// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSSArchives.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TSSArchives.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TSS {

namespace {

const ::google::protobuf::Descriptor* StyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* StylesheetArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StylesheetArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* StylesheetArchive_IdentifiedStyleEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StylesheetArchive_IdentifiedStyleEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* StylesheetArchive_StyleChildrenEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StylesheetArchive_StyleChildrenEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThemeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThemeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyThemeCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyThemeCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyThemeChildCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyThemeChildCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReapUnusedStyleCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReapUnusedStyleCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReapUnusedStyleCommandArchive_IdentifiedStyleEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReapUnusedStyleCommandArchive_IdentifiedStyleEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* StyleUpdatePropertyMapCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StyleUpdatePropertyMapCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThemeReplacePresetCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThemeReplacePresetCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThemeReplaceColorPresetCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThemeReplaceColorPresetCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThemeAddStylePresetCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThemeAddStylePresetCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThemeRemoveStylePresetCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThemeRemoveStylePresetCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThemeMovePresetCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThemeMovePresetCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThemeReplaceStylePresetCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThemeReplaceStylePresetCommandArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ValueType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_TSSArchives_2eproto() {
  protobuf_AddDesc_TSSArchives_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TSSArchives.proto");
  GOOGLE_CHECK(file != NULL);
  StyleArchive_descriptor_ = file->message_type(0);
  static const int StyleArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleArchive, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleArchive, style_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleArchive, parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleArchive, is_variation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleArchive, stylesheet_),
  };
  StyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StyleArchive_descriptor_,
      StyleArchive::default_instance_,
      StyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StyleArchive));
  StylesheetArchive_descriptor_ = file->message_type(1);
  static const int StylesheetArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StylesheetArchive, styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StylesheetArchive, identifier_to_style_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StylesheetArchive, parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StylesheetArchive, is_locked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StylesheetArchive, parent_to_children_style_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StylesheetArchive, can_cull_styles_),
  };
  StylesheetArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StylesheetArchive_descriptor_,
      StylesheetArchive::default_instance_,
      StylesheetArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StylesheetArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StylesheetArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StylesheetArchive));
  StylesheetArchive_IdentifiedStyleEntry_descriptor_ = StylesheetArchive_descriptor_->nested_type(0);
  static const int StylesheetArchive_IdentifiedStyleEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StylesheetArchive_IdentifiedStyleEntry, identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StylesheetArchive_IdentifiedStyleEntry, style_),
  };
  StylesheetArchive_IdentifiedStyleEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StylesheetArchive_IdentifiedStyleEntry_descriptor_,
      StylesheetArchive_IdentifiedStyleEntry::default_instance_,
      StylesheetArchive_IdentifiedStyleEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StylesheetArchive_IdentifiedStyleEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StylesheetArchive_IdentifiedStyleEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StylesheetArchive_IdentifiedStyleEntry));
  StylesheetArchive_StyleChildrenEntry_descriptor_ = StylesheetArchive_descriptor_->nested_type(1);
  static const int StylesheetArchive_StyleChildrenEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StylesheetArchive_StyleChildrenEntry, parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StylesheetArchive_StyleChildrenEntry, children_),
  };
  StylesheetArchive_StyleChildrenEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StylesheetArchive_StyleChildrenEntry_descriptor_,
      StylesheetArchive_StyleChildrenEntry::default_instance_,
      StylesheetArchive_StyleChildrenEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StylesheetArchive_StyleChildrenEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StylesheetArchive_StyleChildrenEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StylesheetArchive_StyleChildrenEntry));
  ThemeArchive_descriptor_ = file->message_type(2);
  static const int ThemeArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeArchive, stylesheet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeArchive, theme_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeArchive, color_presets_),
  };
  ThemeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThemeArchive_descriptor_,
      ThemeArchive::default_instance_,
      ThemeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeArchive, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeArchive, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThemeArchive));
  ApplyThemeCommandArchive_descriptor_ = file->message_type(3);
  static const int ApplyThemeCommandArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyThemeCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyThemeCommandArchive, commands_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyThemeCommandArchive, old_theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyThemeCommandArchive, new_theme_),
  };
  ApplyThemeCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyThemeCommandArchive_descriptor_,
      ApplyThemeCommandArchive::default_instance_,
      ApplyThemeCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyThemeCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyThemeCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyThemeCommandArchive));
  ApplyThemeChildCommandArchive_descriptor_ = file->message_type(4);
  static const int ApplyThemeChildCommandArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyThemeChildCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyThemeChildCommandArchive, parent_),
  };
  ApplyThemeChildCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyThemeChildCommandArchive_descriptor_,
      ApplyThemeChildCommandArchive::default_instance_,
      ApplyThemeChildCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyThemeChildCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyThemeChildCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyThemeChildCommandArchive));
  ReapUnusedStyleCommandArchive_descriptor_ = file->message_type(5);
  static const int ReapUnusedStyleCommandArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapUnusedStyleCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapUnusedStyleCommandArchive, stylesheet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapUnusedStyleCommandArchive, styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapUnusedStyleCommandArchive, identified_styles_),
  };
  ReapUnusedStyleCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReapUnusedStyleCommandArchive_descriptor_,
      ReapUnusedStyleCommandArchive::default_instance_,
      ReapUnusedStyleCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapUnusedStyleCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapUnusedStyleCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReapUnusedStyleCommandArchive));
  ReapUnusedStyleCommandArchive_IdentifiedStyleEntry_descriptor_ = ReapUnusedStyleCommandArchive_descriptor_->nested_type(0);
  static const int ReapUnusedStyleCommandArchive_IdentifiedStyleEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapUnusedStyleCommandArchive_IdentifiedStyleEntry, identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapUnusedStyleCommandArchive_IdentifiedStyleEntry, style_),
  };
  ReapUnusedStyleCommandArchive_IdentifiedStyleEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReapUnusedStyleCommandArchive_IdentifiedStyleEntry_descriptor_,
      ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::default_instance_,
      ReapUnusedStyleCommandArchive_IdentifiedStyleEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapUnusedStyleCommandArchive_IdentifiedStyleEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapUnusedStyleCommandArchive_IdentifiedStyleEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReapUnusedStyleCommandArchive_IdentifiedStyleEntry));
  StyleUpdatePropertyMapCommandArchive_descriptor_ = file->message_type(6);
  static const int StyleUpdatePropertyMapCommandArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleUpdatePropertyMapCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleUpdatePropertyMapCommandArchive, current_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleUpdatePropertyMapCommandArchive, style_with_old_property_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleUpdatePropertyMapCommandArchive, style_with_new_property_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleUpdatePropertyMapCommandArchive, notify_for_style_clients_),
  };
  StyleUpdatePropertyMapCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StyleUpdatePropertyMapCommandArchive_descriptor_,
      StyleUpdatePropertyMapCommandArchive::default_instance_,
      StyleUpdatePropertyMapCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleUpdatePropertyMapCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleUpdatePropertyMapCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StyleUpdatePropertyMapCommandArchive));
  ThemeReplacePresetCommandArchive_descriptor_ = file->message_type(7);
  static const int ThemeReplacePresetCommandArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeReplacePresetCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeReplacePresetCommandArchive, theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeReplacePresetCommandArchive, preset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeReplacePresetCommandArchive, oldpreset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeReplacePresetCommandArchive, index_),
  };
  ThemeReplacePresetCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThemeReplacePresetCommandArchive_descriptor_,
      ThemeReplacePresetCommandArchive::default_instance_,
      ThemeReplacePresetCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeReplacePresetCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeReplacePresetCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThemeReplacePresetCommandArchive));
  ThemeReplaceColorPresetCommandArchive_descriptor_ = file->message_type(8);
  static const int ThemeReplaceColorPresetCommandArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeReplaceColorPresetCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeReplaceColorPresetCommandArchive, theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeReplaceColorPresetCommandArchive, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeReplaceColorPresetCommandArchive, old_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeReplaceColorPresetCommandArchive, index_),
  };
  ThemeReplaceColorPresetCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThemeReplaceColorPresetCommandArchive_descriptor_,
      ThemeReplaceColorPresetCommandArchive::default_instance_,
      ThemeReplaceColorPresetCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeReplaceColorPresetCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeReplaceColorPresetCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThemeReplaceColorPresetCommandArchive));
  ThemeAddStylePresetCommandArchive_descriptor_ = file->message_type(9);
  static const int ThemeAddStylePresetCommandArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeAddStylePresetCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeAddStylePresetCommandArchive, theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeAddStylePresetCommandArchive, preset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeAddStylePresetCommandArchive, preset_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeAddStylePresetCommandArchive, identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeAddStylePresetCommandArchive, add_preset_to_stylesheet_),
  };
  ThemeAddStylePresetCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThemeAddStylePresetCommandArchive_descriptor_,
      ThemeAddStylePresetCommandArchive::default_instance_,
      ThemeAddStylePresetCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeAddStylePresetCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeAddStylePresetCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThemeAddStylePresetCommandArchive));
  ThemeRemoveStylePresetCommandArchive_descriptor_ = file->message_type(10);
  static const int ThemeRemoveStylePresetCommandArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeRemoveStylePresetCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeRemoveStylePresetCommandArchive, theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeRemoveStylePresetCommandArchive, preset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeRemoveStylePresetCommandArchive, preset_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeRemoveStylePresetCommandArchive, preset_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeRemoveStylePresetCommandArchive, identifier_),
  };
  ThemeRemoveStylePresetCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThemeRemoveStylePresetCommandArchive_descriptor_,
      ThemeRemoveStylePresetCommandArchive::default_instance_,
      ThemeRemoveStylePresetCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeRemoveStylePresetCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeRemoveStylePresetCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThemeRemoveStylePresetCommandArchive));
  ThemeMovePresetCommandArchive_descriptor_ = file->message_type(11);
  static const int ThemeMovePresetCommandArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeMovePresetCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeMovePresetCommandArchive, theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeMovePresetCommandArchive, preset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeMovePresetCommandArchive, new_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeMovePresetCommandArchive, old_index_),
  };
  ThemeMovePresetCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThemeMovePresetCommandArchive_descriptor_,
      ThemeMovePresetCommandArchive::default_instance_,
      ThemeMovePresetCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeMovePresetCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeMovePresetCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThemeMovePresetCommandArchive));
  ThemeReplaceStylePresetCommandArchive_descriptor_ = file->message_type(12);
  static const int ThemeReplaceStylePresetCommandArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeReplaceStylePresetCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeReplaceStylePresetCommandArchive, preset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeReplaceStylePresetCommandArchive, old_preset_),
  };
  ThemeReplaceStylePresetCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThemeReplaceStylePresetCommandArchive_descriptor_,
      ThemeReplaceStylePresetCommandArchive::default_instance_,
      ThemeReplaceStylePresetCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeReplaceStylePresetCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeReplaceStylePresetCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThemeReplaceStylePresetCommandArchive));
  ValueType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TSSArchives_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StyleArchive_descriptor_, &StyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StylesheetArchive_descriptor_, &StylesheetArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StylesheetArchive_IdentifiedStyleEntry_descriptor_, &StylesheetArchive_IdentifiedStyleEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StylesheetArchive_StyleChildrenEntry_descriptor_, &StylesheetArchive_StyleChildrenEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThemeArchive_descriptor_, &ThemeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyThemeCommandArchive_descriptor_, &ApplyThemeCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyThemeChildCommandArchive_descriptor_, &ApplyThemeChildCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReapUnusedStyleCommandArchive_descriptor_, &ReapUnusedStyleCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReapUnusedStyleCommandArchive_IdentifiedStyleEntry_descriptor_, &ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StyleUpdatePropertyMapCommandArchive_descriptor_, &StyleUpdatePropertyMapCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThemeReplacePresetCommandArchive_descriptor_, &ThemeReplacePresetCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThemeReplaceColorPresetCommandArchive_descriptor_, &ThemeReplaceColorPresetCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThemeAddStylePresetCommandArchive_descriptor_, &ThemeAddStylePresetCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThemeRemoveStylePresetCommandArchive_descriptor_, &ThemeRemoveStylePresetCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThemeMovePresetCommandArchive_descriptor_, &ThemeMovePresetCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThemeReplaceStylePresetCommandArchive_descriptor_, &ThemeReplaceStylePresetCommandArchive::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TSSArchives_2eproto() {
  delete StyleArchive::default_instance_;
  delete StyleArchive_reflection_;
  delete StylesheetArchive::default_instance_;
  delete StylesheetArchive_reflection_;
  delete StylesheetArchive_IdentifiedStyleEntry::default_instance_;
  delete StylesheetArchive_IdentifiedStyleEntry_reflection_;
  delete StylesheetArchive_StyleChildrenEntry::default_instance_;
  delete StylesheetArchive_StyleChildrenEntry_reflection_;
  delete ThemeArchive::default_instance_;
  delete ThemeArchive_reflection_;
  delete ApplyThemeCommandArchive::default_instance_;
  delete ApplyThemeCommandArchive_reflection_;
  delete ApplyThemeChildCommandArchive::default_instance_;
  delete ApplyThemeChildCommandArchive_reflection_;
  delete ReapUnusedStyleCommandArchive::default_instance_;
  delete ReapUnusedStyleCommandArchive_reflection_;
  delete ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::default_instance_;
  delete ReapUnusedStyleCommandArchive_IdentifiedStyleEntry_reflection_;
  delete StyleUpdatePropertyMapCommandArchive::default_instance_;
  delete StyleUpdatePropertyMapCommandArchive_reflection_;
  delete ThemeReplacePresetCommandArchive::default_instance_;
  delete ThemeReplacePresetCommandArchive_reflection_;
  delete ThemeReplaceColorPresetCommandArchive::default_instance_;
  delete ThemeReplaceColorPresetCommandArchive_reflection_;
  delete ThemeAddStylePresetCommandArchive::default_instance_;
  delete ThemeAddStylePresetCommandArchive_reflection_;
  delete ThemeRemoveStylePresetCommandArchive::default_instance_;
  delete ThemeRemoveStylePresetCommandArchive_reflection_;
  delete ThemeMovePresetCommandArchive::default_instance_;
  delete ThemeMovePresetCommandArchive_reflection_;
  delete ThemeReplaceStylePresetCommandArchive::default_instance_;
  delete ThemeReplaceStylePresetCommandArchive_reflection_;
}

void protobuf_AddDesc_TSSArchives_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::TSP::protobuf_AddDesc_TSPMessages_2eproto();
  ::TSK::protobuf_AddDesc_TSKArchives_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021TSSArchives.proto\022\003TSS\032\021TSPMessages.pr"
    "oto\032\021TSKArchives.proto\"\227\001\n\014StyleArchive\022"
    "\014\n\004name\030\001 \001(\t\022\030\n\020style_identifier\030\002 \001(\t\022"
    "\036\n\006parent\030\003 \001(\0132\016.TSP.Reference\022\033\n\014is_va"
    "riation\030\004 \001(\010:\005false\022\"\n\nstylesheet\030\005 \001(\013"
    "2\016.TSP.Reference\"\316\003\n\021StylesheetArchive\022\036"
    "\n\006styles\030\001 \003(\0132\016.TSP.Reference\022L\n\027identi"
    "fier_to_style_map\030\002 \003(\0132+.TSS.Stylesheet"
    "Archive.IdentifiedStyleEntry\022\036\n\006parent\030\003"
    " \001(\0132\016.TSP.Reference\022\027\n\tis_locked\030\004 \001(\010:"
    "\004true\022O\n\034parent_to_children_style_map\030\005 "
    "\003(\0132).TSS.StylesheetArchive.StyleChildre"
    "nEntry\022\036\n\017can_cull_styles\030\006 \001(\010:\005false\032I"
    "\n\024IdentifiedStyleEntry\022\022\n\nidentifier\030\001 \002"
    "(\t\022\035\n\005style\030\002 \002(\0132\016.TSP.Reference\032V\n\022Sty"
    "leChildrenEntry\022\036\n\006parent\030\001 \002(\0132\016.TSP.Re"
    "ference\022 \n\010children\030\002 \003(\0132\016.TSP.Referenc"
    "e\"y\n\014ThemeArchive\022\"\n\nstylesheet\030\001 \001(\0132\016."
    "TSP.Reference\022\030\n\020theme_identifier\030\003 \001(\t\022"
    "!\n\rcolor_presets\030\n \003(\0132\n.TSP.Color*\010\010d\020\200"
    "\200\200\200\002\"\246\001\n\030ApplyThemeCommandArchive\022\"\n\005sup"
    "er\030\001 \002(\0132\023.TSK.CommandArchive\022 \n\010command"
    "s\030\002 \003(\0132\016.TSP.Reference\022!\n\told_theme\030\003 \001"
    "(\0132\016.TSP.Reference\022!\n\tnew_theme\030\004 \001(\0132\016."
    "TSP.Reference\"c\n\035ApplyThemeChildCommandA"
    "rchive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchi"
    "ve\022\036\n\006parent\030\002 \001(\0132\016.TSP.Reference\"\246\002\n\035R"
    "eapUnusedStyleCommandArchive\022\"\n\005super\030\001 "
    "\002(\0132\023.TSK.CommandArchive\022\"\n\nstylesheet\030\002"
    " \001(\0132\016.TSP.Reference\022\036\n\006styles\030\003 \003(\0132\016.T"
    "SP.Reference\022R\n\021identified_styles\030\004 \003(\0132"
    "7.TSS.ReapUnusedStyleCommandArchive.Iden"
    "tifiedStyleEntry\032I\n\024IdentifiedStyleEntry"
    "\022\022\n\nidentifier\030\001 \002(\t\022\035\n\005style\030\002 \002(\0132\016.TS"
    "P.Reference\"\203\002\n$StyleUpdatePropertyMapCo"
    "mmandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comman"
    "dArchive\022%\n\rcurrent_style\030\002 \002(\0132\016.TSP.Re"
    "ference\0223\n\033style_with_old_property_map\030\003"
    " \002(\0132\016.TSP.Reference\0223\n\033style_with_new_p"
    "roperty_map\030\004 \002(\0132\016.TSP.Reference\022&\n\030not"
    "ify_for_style_clients\030\006 \001(\010:\004true\"\267\001\n Th"
    "emeReplacePresetCommandArchive\022\"\n\005super\030"
    "\001 \002(\0132\023.TSK.CommandArchive\022\035\n\005theme\030\002 \002("
    "\0132\016.TSP.Reference\022\036\n\006preset\030\003 \002(\0132\016.TSP."
    "Reference\022!\n\toldPreset\030\004 \002(\0132\016.TSP.Refer"
    "ence\022\r\n\005index\030\005 \002(\r\"\263\001\n%ThemeReplaceColo"
    "rPresetCommandArchive\022\"\n\005super\030\001 \002(\0132\023.T"
    "SK.CommandArchive\022\035\n\005theme\030\002 \002(\0132\016.TSP.R"
    "eference\022\031\n\005color\030\003 \002(\0132\n.TSP.Color\022\035\n\to"
    "ld_color\030\004 \002(\0132\n.TSP.Color\022\r\n\005index\030\005 \002("
    "\r\"\321\001\n!ThemeAddStylePresetCommandArchive\022"
    "\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\035\n\005t"
    "heme\030\002 \002(\0132\016.TSP.Reference\022\036\n\006preset\030\003 \002"
    "(\0132\016.TSP.Reference\022\023\n\013preset_kind\030\004 \002(\t\022"
    "\022\n\nidentifier\030\005 \001(\t\022 \n\030add_preset_to_sty"
    "lesheet\030\006 \001(\010\"\310\001\n$ThemeRemoveStylePreset"
    "CommandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comm"
    "andArchive\022\035\n\005theme\030\002 \002(\0132\016.TSP.Referenc"
    "e\022\036\n\006preset\030\003 \002(\0132\016.TSP.Reference\022\024\n\014pre"
    "set_index\030\004 \002(\r\022\023\n\013preset_kind\030\005 \002(\t\022\022\n\n"
    "identifier\030\006 \001(\t\"\250\001\n\035ThemeMovePresetComm"
    "andArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandA"
    "rchive\022\035\n\005theme\030\002 \002(\0132\016.TSP.Reference\022\036\n"
    "\006preset\030\003 \002(\0132\016.TSP.Reference\022\021\n\tnew_ind"
    "ex\030\004 \002(\r\022\021\n\told_index\030\005 \002(\r\"\217\001\n%ThemeRep"
    "laceStylePresetCommandArchive\022\"\n\005super\030\001"
    " \002(\0132\023.TSK.CommandArchive\022\036\n\006preset\030\003 \002("
    "\0132\016.TSP.Reference\022\"\n\nold_preset\030\004 \002(\0132\016."
    "TSP.Reference*G\n\tValueType\022\016\n\nObjectType"
    "\020\000\022\013\n\007IntType\020\001\022\r\n\tFloatType\020\002\022\016\n\nDouble"
    "Type\020\003", 2806);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TSSArchives.proto", &protobuf_RegisterTypes);
  StyleArchive::default_instance_ = new StyleArchive();
  StylesheetArchive::default_instance_ = new StylesheetArchive();
  StylesheetArchive_IdentifiedStyleEntry::default_instance_ = new StylesheetArchive_IdentifiedStyleEntry();
  StylesheetArchive_StyleChildrenEntry::default_instance_ = new StylesheetArchive_StyleChildrenEntry();
  ThemeArchive::default_instance_ = new ThemeArchive();
  ApplyThemeCommandArchive::default_instance_ = new ApplyThemeCommandArchive();
  ApplyThemeChildCommandArchive::default_instance_ = new ApplyThemeChildCommandArchive();
  ReapUnusedStyleCommandArchive::default_instance_ = new ReapUnusedStyleCommandArchive();
  ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::default_instance_ = new ReapUnusedStyleCommandArchive_IdentifiedStyleEntry();
  StyleUpdatePropertyMapCommandArchive::default_instance_ = new StyleUpdatePropertyMapCommandArchive();
  ThemeReplacePresetCommandArchive::default_instance_ = new ThemeReplacePresetCommandArchive();
  ThemeReplaceColorPresetCommandArchive::default_instance_ = new ThemeReplaceColorPresetCommandArchive();
  ThemeAddStylePresetCommandArchive::default_instance_ = new ThemeAddStylePresetCommandArchive();
  ThemeRemoveStylePresetCommandArchive::default_instance_ = new ThemeRemoveStylePresetCommandArchive();
  ThemeMovePresetCommandArchive::default_instance_ = new ThemeMovePresetCommandArchive();
  ThemeReplaceStylePresetCommandArchive::default_instance_ = new ThemeReplaceStylePresetCommandArchive();
  StyleArchive::default_instance_->InitAsDefaultInstance();
  StylesheetArchive::default_instance_->InitAsDefaultInstance();
  StylesheetArchive_IdentifiedStyleEntry::default_instance_->InitAsDefaultInstance();
  StylesheetArchive_StyleChildrenEntry::default_instance_->InitAsDefaultInstance();
  ThemeArchive::default_instance_->InitAsDefaultInstance();
  ApplyThemeCommandArchive::default_instance_->InitAsDefaultInstance();
  ApplyThemeChildCommandArchive::default_instance_->InitAsDefaultInstance();
  ReapUnusedStyleCommandArchive::default_instance_->InitAsDefaultInstance();
  ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::default_instance_->InitAsDefaultInstance();
  StyleUpdatePropertyMapCommandArchive::default_instance_->InitAsDefaultInstance();
  ThemeReplacePresetCommandArchive::default_instance_->InitAsDefaultInstance();
  ThemeReplaceColorPresetCommandArchive::default_instance_->InitAsDefaultInstance();
  ThemeAddStylePresetCommandArchive::default_instance_->InitAsDefaultInstance();
  ThemeRemoveStylePresetCommandArchive::default_instance_->InitAsDefaultInstance();
  ThemeMovePresetCommandArchive::default_instance_->InitAsDefaultInstance();
  ThemeReplaceStylePresetCommandArchive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TSSArchives_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TSSArchives_2eproto {
  StaticDescriptorInitializer_TSSArchives_2eproto() {
    protobuf_AddDesc_TSSArchives_2eproto();
  }
} static_descriptor_initializer_TSSArchives_2eproto_;
const ::google::protobuf::EnumDescriptor* ValueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ValueType_descriptor_;
}
bool ValueType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int StyleArchive::kNameFieldNumber;
const int StyleArchive::kStyleIdentifierFieldNumber;
const int StyleArchive::kParentFieldNumber;
const int StyleArchive::kIsVariationFieldNumber;
const int StyleArchive::kStylesheetFieldNumber;
#endif  // !_MSC_VER

StyleArchive::StyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StyleArchive::InitAsDefaultInstance() {
  parent_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  stylesheet_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

StyleArchive::StyleArchive(const StyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StyleArchive::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  style_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  parent_ = NULL;
  is_variation_ = false;
  stylesheet_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StyleArchive::~StyleArchive() {
  SharedDtor();
}

void StyleArchive::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (style_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete style_identifier_;
  }
  if (this != default_instance_) {
    delete parent_;
    delete stylesheet_;
  }
}

void StyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StyleArchive_descriptor_;
}

const StyleArchive& StyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSSArchives_2eproto();
  return *default_instance_;
}

StyleArchive* StyleArchive::default_instance_ = NULL;

StyleArchive* StyleArchive::New() const {
  return new StyleArchive;
}

void StyleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_style_identifier()) {
      if (style_identifier_ != &::google::protobuf::internal::kEmptyString) {
        style_identifier_->clear();
      }
    }
    if (has_parent()) {
      if (parent_ != NULL) parent_->::TSP::Reference::Clear();
    }
    is_variation_ = false;
    if (has_stylesheet()) {
      if (stylesheet_ != NULL) stylesheet_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_style_identifier;
        break;
      }

      // optional string style_identifier = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_style_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_style_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->style_identifier().data(), this->style_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_parent;
        break;
      }

      // optional .TSP.Reference parent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_variation;
        break;
      }

      // optional bool is_variation = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_variation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_variation_)));
          set_has_is_variation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stylesheet;
        break;
      }

      // optional .TSP.Reference stylesheet = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stylesheet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stylesheet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string style_identifier = 2;
  if (has_style_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->style_identifier().data(), this->style_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->style_identifier(), output);
  }

  // optional .TSP.Reference parent = 3;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->parent(), output);
  }

  // optional bool is_variation = 4 [default = false];
  if (has_is_variation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_variation(), output);
  }

  // optional .TSP.Reference stylesheet = 5;
  if (has_stylesheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stylesheet(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string style_identifier = 2;
  if (has_style_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->style_identifier().data(), this->style_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->style_identifier(), target);
  }

  // optional .TSP.Reference parent = 3;
  if (has_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->parent(), target);
  }

  // optional bool is_variation = 4 [default = false];
  if (has_is_variation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_variation(), target);
  }

  // optional .TSP.Reference stylesheet = 5;
  if (has_stylesheet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stylesheet(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string style_identifier = 2;
    if (has_style_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->style_identifier());
    }

    // optional .TSP.Reference parent = 3;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parent());
    }

    // optional bool is_variation = 4 [default = false];
    if (has_is_variation()) {
      total_size += 1 + 1;
    }

    // optional .TSP.Reference stylesheet = 5;
    if (has_stylesheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stylesheet());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StyleArchive::MergeFrom(const StyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_style_identifier()) {
      set_style_identifier(from.style_identifier());
    }
    if (from.has_parent()) {
      mutable_parent()->::TSP::Reference::MergeFrom(from.parent());
    }
    if (from.has_is_variation()) {
      set_is_variation(from.is_variation());
    }
    if (from.has_stylesheet()) {
      mutable_stylesheet()->::TSP::Reference::MergeFrom(from.stylesheet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleArchive::CopyFrom(const StyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleArchive::IsInitialized() const {

  if (has_parent()) {
    if (!this->parent().IsInitialized()) return false;
  }
  if (has_stylesheet()) {
    if (!this->stylesheet().IsInitialized()) return false;
  }
  return true;
}

void StyleArchive::Swap(StyleArchive* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(style_identifier_, other->style_identifier_);
    std::swap(parent_, other->parent_);
    std::swap(is_variation_, other->is_variation_);
    std::swap(stylesheet_, other->stylesheet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StyleArchive_descriptor_;
  metadata.reflection = StyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StylesheetArchive_IdentifiedStyleEntry::kIdentifierFieldNumber;
const int StylesheetArchive_IdentifiedStyleEntry::kStyleFieldNumber;
#endif  // !_MSC_VER

StylesheetArchive_IdentifiedStyleEntry::StylesheetArchive_IdentifiedStyleEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StylesheetArchive_IdentifiedStyleEntry::InitAsDefaultInstance() {
  style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

StylesheetArchive_IdentifiedStyleEntry::StylesheetArchive_IdentifiedStyleEntry(const StylesheetArchive_IdentifiedStyleEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StylesheetArchive_IdentifiedStyleEntry::SharedCtor() {
  _cached_size_ = 0;
  identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  style_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StylesheetArchive_IdentifiedStyleEntry::~StylesheetArchive_IdentifiedStyleEntry() {
  SharedDtor();
}

void StylesheetArchive_IdentifiedStyleEntry::SharedDtor() {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete identifier_;
  }
  if (this != default_instance_) {
    delete style_;
  }
}

void StylesheetArchive_IdentifiedStyleEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StylesheetArchive_IdentifiedStyleEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StylesheetArchive_IdentifiedStyleEntry_descriptor_;
}

const StylesheetArchive_IdentifiedStyleEntry& StylesheetArchive_IdentifiedStyleEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSSArchives_2eproto();
  return *default_instance_;
}

StylesheetArchive_IdentifiedStyleEntry* StylesheetArchive_IdentifiedStyleEntry::default_instance_ = NULL;

StylesheetArchive_IdentifiedStyleEntry* StylesheetArchive_IdentifiedStyleEntry::New() const {
  return new StylesheetArchive_IdentifiedStyleEntry;
}

void StylesheetArchive_IdentifiedStyleEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_identifier()) {
      if (identifier_ != &::google::protobuf::internal::kEmptyString) {
        identifier_->clear();
      }
    }
    if (has_style()) {
      if (style_ != NULL) style_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StylesheetArchive_IdentifiedStyleEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string identifier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->identifier().data(), this->identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_style;
        break;
      }

      // required .TSP.Reference style = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StylesheetArchive_IdentifiedStyleEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string identifier = 1;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->identifier(), output);
  }

  // required .TSP.Reference style = 2;
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->style(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StylesheetArchive_IdentifiedStyleEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string identifier = 1;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->identifier(), target);
  }

  // required .TSP.Reference style = 2;
  if (has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->style(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StylesheetArchive_IdentifiedStyleEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string identifier = 1;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identifier());
    }

    // required .TSP.Reference style = 2;
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->style());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StylesheetArchive_IdentifiedStyleEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StylesheetArchive_IdentifiedStyleEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StylesheetArchive_IdentifiedStyleEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StylesheetArchive_IdentifiedStyleEntry::MergeFrom(const StylesheetArchive_IdentifiedStyleEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identifier()) {
      set_identifier(from.identifier());
    }
    if (from.has_style()) {
      mutable_style()->::TSP::Reference::MergeFrom(from.style());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StylesheetArchive_IdentifiedStyleEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StylesheetArchive_IdentifiedStyleEntry::CopyFrom(const StylesheetArchive_IdentifiedStyleEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StylesheetArchive_IdentifiedStyleEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_style()) {
    if (!this->style().IsInitialized()) return false;
  }
  return true;
}

void StylesheetArchive_IdentifiedStyleEntry::Swap(StylesheetArchive_IdentifiedStyleEntry* other) {
  if (other != this) {
    std::swap(identifier_, other->identifier_);
    std::swap(style_, other->style_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StylesheetArchive_IdentifiedStyleEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StylesheetArchive_IdentifiedStyleEntry_descriptor_;
  metadata.reflection = StylesheetArchive_IdentifiedStyleEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StylesheetArchive_StyleChildrenEntry::kParentFieldNumber;
const int StylesheetArchive_StyleChildrenEntry::kChildrenFieldNumber;
#endif  // !_MSC_VER

StylesheetArchive_StyleChildrenEntry::StylesheetArchive_StyleChildrenEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StylesheetArchive_StyleChildrenEntry::InitAsDefaultInstance() {
  parent_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

StylesheetArchive_StyleChildrenEntry::StylesheetArchive_StyleChildrenEntry(const StylesheetArchive_StyleChildrenEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StylesheetArchive_StyleChildrenEntry::SharedCtor() {
  _cached_size_ = 0;
  parent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StylesheetArchive_StyleChildrenEntry::~StylesheetArchive_StyleChildrenEntry() {
  SharedDtor();
}

void StylesheetArchive_StyleChildrenEntry::SharedDtor() {
  if (this != default_instance_) {
    delete parent_;
  }
}

void StylesheetArchive_StyleChildrenEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StylesheetArchive_StyleChildrenEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StylesheetArchive_StyleChildrenEntry_descriptor_;
}

const StylesheetArchive_StyleChildrenEntry& StylesheetArchive_StyleChildrenEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSSArchives_2eproto();
  return *default_instance_;
}

StylesheetArchive_StyleChildrenEntry* StylesheetArchive_StyleChildrenEntry::default_instance_ = NULL;

StylesheetArchive_StyleChildrenEntry* StylesheetArchive_StyleChildrenEntry::New() const {
  return new StylesheetArchive_StyleChildrenEntry;
}

void StylesheetArchive_StyleChildrenEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_parent()) {
      if (parent_ != NULL) parent_->::TSP::Reference::Clear();
    }
  }
  children_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StylesheetArchive_StyleChildrenEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Reference parent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_children;
        break;
      }

      // repeated .TSP.Reference children = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_children;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StylesheetArchive_StyleChildrenEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Reference parent = 1;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->parent(), output);
  }

  // repeated .TSP.Reference children = 2;
  for (int i = 0; i < this->children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->children(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StylesheetArchive_StyleChildrenEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Reference parent = 1;
  if (has_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->parent(), target);
  }

  // repeated .TSP.Reference children = 2;
  for (int i = 0; i < this->children_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->children(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StylesheetArchive_StyleChildrenEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.Reference parent = 1;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parent());
    }

  }
  // repeated .TSP.Reference children = 2;
  total_size += 1 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StylesheetArchive_StyleChildrenEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StylesheetArchive_StyleChildrenEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StylesheetArchive_StyleChildrenEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StylesheetArchive_StyleChildrenEntry::MergeFrom(const StylesheetArchive_StyleChildrenEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  children_.MergeFrom(from.children_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parent()) {
      mutable_parent()->::TSP::Reference::MergeFrom(from.parent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StylesheetArchive_StyleChildrenEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StylesheetArchive_StyleChildrenEntry::CopyFrom(const StylesheetArchive_StyleChildrenEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StylesheetArchive_StyleChildrenEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_parent()) {
    if (!this->parent().IsInitialized()) return false;
  }
  for (int i = 0; i < children_size(); i++) {
    if (!this->children(i).IsInitialized()) return false;
  }
  return true;
}

void StylesheetArchive_StyleChildrenEntry::Swap(StylesheetArchive_StyleChildrenEntry* other) {
  if (other != this) {
    std::swap(parent_, other->parent_);
    children_.Swap(&other->children_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StylesheetArchive_StyleChildrenEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StylesheetArchive_StyleChildrenEntry_descriptor_;
  metadata.reflection = StylesheetArchive_StyleChildrenEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StylesheetArchive::kStylesFieldNumber;
const int StylesheetArchive::kIdentifierToStyleMapFieldNumber;
const int StylesheetArchive::kParentFieldNumber;
const int StylesheetArchive::kIsLockedFieldNumber;
const int StylesheetArchive::kParentToChildrenStyleMapFieldNumber;
const int StylesheetArchive::kCanCullStylesFieldNumber;
#endif  // !_MSC_VER

StylesheetArchive::StylesheetArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StylesheetArchive::InitAsDefaultInstance() {
  parent_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

StylesheetArchive::StylesheetArchive(const StylesheetArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StylesheetArchive::SharedCtor() {
  _cached_size_ = 0;
  parent_ = NULL;
  is_locked_ = true;
  can_cull_styles_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StylesheetArchive::~StylesheetArchive() {
  SharedDtor();
}

void StylesheetArchive::SharedDtor() {
  if (this != default_instance_) {
    delete parent_;
  }
}

void StylesheetArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StylesheetArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StylesheetArchive_descriptor_;
}

const StylesheetArchive& StylesheetArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSSArchives_2eproto();
  return *default_instance_;
}

StylesheetArchive* StylesheetArchive::default_instance_ = NULL;

StylesheetArchive* StylesheetArchive::New() const {
  return new StylesheetArchive;
}

void StylesheetArchive::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_parent()) {
      if (parent_ != NULL) parent_->::TSP::Reference::Clear();
    }
    is_locked_ = true;
    can_cull_styles_ = false;
  }
  styles_.Clear();
  identifier_to_style_map_.Clear();
  parent_to_children_style_map_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StylesheetArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSP.Reference styles = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_styles;
        if (input->ExpectTag(18)) goto parse_identifier_to_style_map;
        break;
      }

      // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_identifier_to_style_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_identifier_to_style_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_identifier_to_style_map;
        if (input->ExpectTag(26)) goto parse_parent;
        break;
      }

      // optional .TSP.Reference parent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_locked;
        break;
      }

      // optional bool is_locked = 4 [default = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_locked_)));
          set_has_is_locked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_parent_to_children_style_map;
        break;
      }

      // repeated .TSS.StylesheetArchive.StyleChildrenEntry parent_to_children_style_map = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parent_to_children_style_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parent_to_children_style_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_parent_to_children_style_map;
        if (input->ExpectTag(48)) goto parse_can_cull_styles;
        break;
      }

      // optional bool can_cull_styles = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_cull_styles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_cull_styles_)));
          set_has_can_cull_styles();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StylesheetArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSP.Reference styles = 1;
  for (int i = 0; i < this->styles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->styles(i), output);
  }

  // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 2;
  for (int i = 0; i < this->identifier_to_style_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->identifier_to_style_map(i), output);
  }

  // optional .TSP.Reference parent = 3;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->parent(), output);
  }

  // optional bool is_locked = 4 [default = true];
  if (has_is_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_locked(), output);
  }

  // repeated .TSS.StylesheetArchive.StyleChildrenEntry parent_to_children_style_map = 5;
  for (int i = 0; i < this->parent_to_children_style_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->parent_to_children_style_map(i), output);
  }

  // optional bool can_cull_styles = 6 [default = false];
  if (has_can_cull_styles()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->can_cull_styles(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StylesheetArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSP.Reference styles = 1;
  for (int i = 0; i < this->styles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->styles(i), target);
  }

  // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 2;
  for (int i = 0; i < this->identifier_to_style_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->identifier_to_style_map(i), target);
  }

  // optional .TSP.Reference parent = 3;
  if (has_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->parent(), target);
  }

  // optional bool is_locked = 4 [default = true];
  if (has_is_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_locked(), target);
  }

  // repeated .TSS.StylesheetArchive.StyleChildrenEntry parent_to_children_style_map = 5;
  for (int i = 0; i < this->parent_to_children_style_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->parent_to_children_style_map(i), target);
  }

  // optional bool can_cull_styles = 6 [default = false];
  if (has_can_cull_styles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->can_cull_styles(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StylesheetArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .TSP.Reference parent = 3;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parent());
    }

    // optional bool is_locked = 4 [default = true];
    if (has_is_locked()) {
      total_size += 1 + 1;
    }

    // optional bool can_cull_styles = 6 [default = false];
    if (has_can_cull_styles()) {
      total_size += 1 + 1;
    }

  }
  // repeated .TSP.Reference styles = 1;
  total_size += 1 * this->styles_size();
  for (int i = 0; i < this->styles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->styles(i));
  }

  // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 2;
  total_size += 1 * this->identifier_to_style_map_size();
  for (int i = 0; i < this->identifier_to_style_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->identifier_to_style_map(i));
  }

  // repeated .TSS.StylesheetArchive.StyleChildrenEntry parent_to_children_style_map = 5;
  total_size += 1 * this->parent_to_children_style_map_size();
  for (int i = 0; i < this->parent_to_children_style_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parent_to_children_style_map(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StylesheetArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StylesheetArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StylesheetArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StylesheetArchive::MergeFrom(const StylesheetArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  styles_.MergeFrom(from.styles_);
  identifier_to_style_map_.MergeFrom(from.identifier_to_style_map_);
  parent_to_children_style_map_.MergeFrom(from.parent_to_children_style_map_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_parent()) {
      mutable_parent()->::TSP::Reference::MergeFrom(from.parent());
    }
    if (from.has_is_locked()) {
      set_is_locked(from.is_locked());
    }
    if (from.has_can_cull_styles()) {
      set_can_cull_styles(from.can_cull_styles());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StylesheetArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StylesheetArchive::CopyFrom(const StylesheetArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StylesheetArchive::IsInitialized() const {

  for (int i = 0; i < styles_size(); i++) {
    if (!this->styles(i).IsInitialized()) return false;
  }
  for (int i = 0; i < identifier_to_style_map_size(); i++) {
    if (!this->identifier_to_style_map(i).IsInitialized()) return false;
  }
  if (has_parent()) {
    if (!this->parent().IsInitialized()) return false;
  }
  for (int i = 0; i < parent_to_children_style_map_size(); i++) {
    if (!this->parent_to_children_style_map(i).IsInitialized()) return false;
  }
  return true;
}

void StylesheetArchive::Swap(StylesheetArchive* other) {
  if (other != this) {
    styles_.Swap(&other->styles_);
    identifier_to_style_map_.Swap(&other->identifier_to_style_map_);
    std::swap(parent_, other->parent_);
    std::swap(is_locked_, other->is_locked_);
    parent_to_children_style_map_.Swap(&other->parent_to_children_style_map_);
    std::swap(can_cull_styles_, other->can_cull_styles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StylesheetArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StylesheetArchive_descriptor_;
  metadata.reflection = StylesheetArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThemeArchive::kStylesheetFieldNumber;
const int ThemeArchive::kThemeIdentifierFieldNumber;
const int ThemeArchive::kColorPresetsFieldNumber;
#endif  // !_MSC_VER

ThemeArchive::ThemeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThemeArchive::InitAsDefaultInstance() {
  stylesheet_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ThemeArchive::ThemeArchive(const ThemeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThemeArchive::SharedCtor() {
  _cached_size_ = 0;
  stylesheet_ = NULL;
  theme_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThemeArchive::~ThemeArchive() {
  SharedDtor();
}

void ThemeArchive::SharedDtor() {
  if (theme_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete theme_identifier_;
  }
  if (this != default_instance_) {
    delete stylesheet_;
  }
}

void ThemeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThemeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThemeArchive_descriptor_;
}

const ThemeArchive& ThemeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSSArchives_2eproto();
  return *default_instance_;
}

ThemeArchive* ThemeArchive::default_instance_ = NULL;

ThemeArchive* ThemeArchive::New() const {
  return new ThemeArchive;
}

void ThemeArchive::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stylesheet()) {
      if (stylesheet_ != NULL) stylesheet_->::TSP::Reference::Clear();
    }
    if (has_theme_identifier()) {
      if (theme_identifier_ != &::google::protobuf::internal::kEmptyString) {
        theme_identifier_->clear();
      }
    }
  }
  color_presets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThemeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference stylesheet = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stylesheet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_theme_identifier;
        break;
      }

      // optional string theme_identifier = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theme_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_theme_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->theme_identifier().data(), this->theme_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_color_presets;
        break;
      }

      // repeated .TSP.Color color_presets = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_color_presets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_color_presets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_color_presets;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThemeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference stylesheet = 1;
  if (has_stylesheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stylesheet(), output);
  }

  // optional string theme_identifier = 3;
  if (has_theme_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->theme_identifier().data(), this->theme_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->theme_identifier(), output);
  }

  // repeated .TSP.Color color_presets = 10;
  for (int i = 0; i < this->color_presets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->color_presets(i), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThemeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference stylesheet = 1;
  if (has_stylesheet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stylesheet(), target);
  }

  // optional string theme_identifier = 3;
  if (has_theme_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->theme_identifier().data(), this->theme_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->theme_identifier(), target);
  }

  // repeated .TSP.Color color_presets = 10;
  for (int i = 0; i < this->color_presets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->color_presets(i), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThemeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference stylesheet = 1;
    if (has_stylesheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stylesheet());
    }

    // optional string theme_identifier = 3;
    if (has_theme_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->theme_identifier());
    }

  }
  // repeated .TSP.Color color_presets = 10;
  total_size += 1 * this->color_presets_size();
  for (int i = 0; i < this->color_presets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->color_presets(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThemeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThemeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThemeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThemeArchive::MergeFrom(const ThemeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  color_presets_.MergeFrom(from.color_presets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stylesheet()) {
      mutable_stylesheet()->::TSP::Reference::MergeFrom(from.stylesheet());
    }
    if (from.has_theme_identifier()) {
      set_theme_identifier(from.theme_identifier());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThemeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThemeArchive::CopyFrom(const ThemeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeArchive::IsInitialized() const {

  if (has_stylesheet()) {
    if (!this->stylesheet().IsInitialized()) return false;
  }
  for (int i = 0; i < color_presets_size(); i++) {
    if (!this->color_presets(i).IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void ThemeArchive::Swap(ThemeArchive* other) {
  if (other != this) {
    std::swap(stylesheet_, other->stylesheet_);
    std::swap(theme_identifier_, other->theme_identifier_);
    color_presets_.Swap(&other->color_presets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata ThemeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThemeArchive_descriptor_;
  metadata.reflection = ThemeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyThemeCommandArchive::kSuperFieldNumber;
const int ApplyThemeCommandArchive::kCommandsFieldNumber;
const int ApplyThemeCommandArchive::kOldThemeFieldNumber;
const int ApplyThemeCommandArchive::kNewThemeFieldNumber;
#endif  // !_MSC_VER

ApplyThemeCommandArchive::ApplyThemeCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyThemeCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  old_theme_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  new_theme_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ApplyThemeCommandArchive::ApplyThemeCommandArchive(const ApplyThemeCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyThemeCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  old_theme_ = NULL;
  new_theme_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyThemeCommandArchive::~ApplyThemeCommandArchive() {
  SharedDtor();
}

void ApplyThemeCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete old_theme_;
    delete new_theme_;
  }
}

void ApplyThemeCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyThemeCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyThemeCommandArchive_descriptor_;
}

const ApplyThemeCommandArchive& ApplyThemeCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSSArchives_2eproto();
  return *default_instance_;
}

ApplyThemeCommandArchive* ApplyThemeCommandArchive::default_instance_ = NULL;

ApplyThemeCommandArchive* ApplyThemeCommandArchive::New() const {
  return new ApplyThemeCommandArchive;
}

void ApplyThemeCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_old_theme()) {
      if (old_theme_ != NULL) old_theme_->::TSP::Reference::Clear();
    }
    if (has_new_theme()) {
      if (new_theme_ != NULL) new_theme_->::TSP::Reference::Clear();
    }
  }
  commands_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyThemeCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_commands;
        break;
      }

      // repeated .TSP.Reference commands = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_commands()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_commands;
        if (input->ExpectTag(26)) goto parse_old_theme;
        break;
      }

      // optional .TSP.Reference old_theme = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_theme()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_new_theme;
        break;
      }

      // optional .TSP.Reference new_theme = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_theme()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyThemeCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // repeated .TSP.Reference commands = 2;
  for (int i = 0; i < this->commands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commands(i), output);
  }

  // optional .TSP.Reference old_theme = 3;
  if (has_old_theme()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->old_theme(), output);
  }

  // optional .TSP.Reference new_theme = 4;
  if (has_new_theme()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->new_theme(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyThemeCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // repeated .TSP.Reference commands = 2;
  for (int i = 0; i < this->commands_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commands(i), target);
  }

  // optional .TSP.Reference old_theme = 3;
  if (has_old_theme()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->old_theme(), target);
  }

  // optional .TSP.Reference new_theme = 4;
  if (has_new_theme()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->new_theme(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyThemeCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference old_theme = 3;
    if (has_old_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_theme());
    }

    // optional .TSP.Reference new_theme = 4;
    if (has_new_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_theme());
    }

  }
  // repeated .TSP.Reference commands = 2;
  total_size += 1 * this->commands_size();
  for (int i = 0; i < this->commands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commands(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyThemeCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyThemeCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyThemeCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyThemeCommandArchive::MergeFrom(const ApplyThemeCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  commands_.MergeFrom(from.commands_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_old_theme()) {
      mutable_old_theme()->::TSP::Reference::MergeFrom(from.old_theme());
    }
    if (from.has_new_theme()) {
      mutable_new_theme()->::TSP::Reference::MergeFrom(from.new_theme());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyThemeCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyThemeCommandArchive::CopyFrom(const ApplyThemeCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyThemeCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  for (int i = 0; i < commands_size(); i++) {
    if (!this->commands(i).IsInitialized()) return false;
  }
  if (has_old_theme()) {
    if (!this->old_theme().IsInitialized()) return false;
  }
  if (has_new_theme()) {
    if (!this->new_theme().IsInitialized()) return false;
  }
  return true;
}

void ApplyThemeCommandArchive::Swap(ApplyThemeCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    commands_.Swap(&other->commands_);
    std::swap(old_theme_, other->old_theme_);
    std::swap(new_theme_, other->new_theme_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyThemeCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyThemeCommandArchive_descriptor_;
  metadata.reflection = ApplyThemeCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyThemeChildCommandArchive::kSuperFieldNumber;
const int ApplyThemeChildCommandArchive::kParentFieldNumber;
#endif  // !_MSC_VER

ApplyThemeChildCommandArchive::ApplyThemeChildCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyThemeChildCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  parent_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ApplyThemeChildCommandArchive::ApplyThemeChildCommandArchive(const ApplyThemeChildCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyThemeChildCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  parent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyThemeChildCommandArchive::~ApplyThemeChildCommandArchive() {
  SharedDtor();
}

void ApplyThemeChildCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete parent_;
  }
}

void ApplyThemeChildCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyThemeChildCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyThemeChildCommandArchive_descriptor_;
}

const ApplyThemeChildCommandArchive& ApplyThemeChildCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSSArchives_2eproto();
  return *default_instance_;
}

ApplyThemeChildCommandArchive* ApplyThemeChildCommandArchive::default_instance_ = NULL;

ApplyThemeChildCommandArchive* ApplyThemeChildCommandArchive::New() const {
  return new ApplyThemeChildCommandArchive;
}

void ApplyThemeChildCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_parent()) {
      if (parent_ != NULL) parent_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyThemeChildCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_parent;
        break;
      }

      // optional .TSP.Reference parent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyThemeChildCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference parent = 2;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->parent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyThemeChildCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference parent = 2;
  if (has_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->parent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyThemeChildCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference parent = 2;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyThemeChildCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyThemeChildCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyThemeChildCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyThemeChildCommandArchive::MergeFrom(const ApplyThemeChildCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_parent()) {
      mutable_parent()->::TSP::Reference::MergeFrom(from.parent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyThemeChildCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyThemeChildCommandArchive::CopyFrom(const ApplyThemeChildCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyThemeChildCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_parent()) {
    if (!this->parent().IsInitialized()) return false;
  }
  return true;
}

void ApplyThemeChildCommandArchive::Swap(ApplyThemeChildCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(parent_, other->parent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyThemeChildCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyThemeChildCommandArchive_descriptor_;
  metadata.reflection = ApplyThemeChildCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::kIdentifierFieldNumber;
const int ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::kStyleFieldNumber;
#endif  // !_MSC_VER

ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::ReapUnusedStyleCommandArchive_IdentifiedStyleEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::InitAsDefaultInstance() {
  style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::ReapUnusedStyleCommandArchive_IdentifiedStyleEntry(const ReapUnusedStyleCommandArchive_IdentifiedStyleEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::SharedCtor() {
  _cached_size_ = 0;
  identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  style_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::~ReapUnusedStyleCommandArchive_IdentifiedStyleEntry() {
  SharedDtor();
}

void ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::SharedDtor() {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete identifier_;
  }
  if (this != default_instance_) {
    delete style_;
  }
}

void ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReapUnusedStyleCommandArchive_IdentifiedStyleEntry_descriptor_;
}

const ReapUnusedStyleCommandArchive_IdentifiedStyleEntry& ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSSArchives_2eproto();
  return *default_instance_;
}

ReapUnusedStyleCommandArchive_IdentifiedStyleEntry* ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::default_instance_ = NULL;

ReapUnusedStyleCommandArchive_IdentifiedStyleEntry* ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::New() const {
  return new ReapUnusedStyleCommandArchive_IdentifiedStyleEntry;
}

void ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_identifier()) {
      if (identifier_ != &::google::protobuf::internal::kEmptyString) {
        identifier_->clear();
      }
    }
    if (has_style()) {
      if (style_ != NULL) style_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string identifier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->identifier().data(), this->identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_style;
        break;
      }

      // required .TSP.Reference style = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string identifier = 1;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->identifier(), output);
  }

  // required .TSP.Reference style = 2;
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->style(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string identifier = 1;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->identifier(), target);
  }

  // required .TSP.Reference style = 2;
  if (has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->style(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string identifier = 1;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identifier());
    }

    // required .TSP.Reference style = 2;
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->style());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReapUnusedStyleCommandArchive_IdentifiedStyleEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReapUnusedStyleCommandArchive_IdentifiedStyleEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::MergeFrom(const ReapUnusedStyleCommandArchive_IdentifiedStyleEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identifier()) {
      set_identifier(from.identifier());
    }
    if (from.has_style()) {
      mutable_style()->::TSP::Reference::MergeFrom(from.style());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::CopyFrom(const ReapUnusedStyleCommandArchive_IdentifiedStyleEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_style()) {
    if (!this->style().IsInitialized()) return false;
  }
  return true;
}

void ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::Swap(ReapUnusedStyleCommandArchive_IdentifiedStyleEntry* other) {
  if (other != this) {
    std::swap(identifier_, other->identifier_);
    std::swap(style_, other->style_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReapUnusedStyleCommandArchive_IdentifiedStyleEntry_descriptor_;
  metadata.reflection = ReapUnusedStyleCommandArchive_IdentifiedStyleEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReapUnusedStyleCommandArchive::kSuperFieldNumber;
const int ReapUnusedStyleCommandArchive::kStylesheetFieldNumber;
const int ReapUnusedStyleCommandArchive::kStylesFieldNumber;
const int ReapUnusedStyleCommandArchive::kIdentifiedStylesFieldNumber;
#endif  // !_MSC_VER

ReapUnusedStyleCommandArchive::ReapUnusedStyleCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReapUnusedStyleCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  stylesheet_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ReapUnusedStyleCommandArchive::ReapUnusedStyleCommandArchive(const ReapUnusedStyleCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReapUnusedStyleCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  stylesheet_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReapUnusedStyleCommandArchive::~ReapUnusedStyleCommandArchive() {
  SharedDtor();
}

void ReapUnusedStyleCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete stylesheet_;
  }
}

void ReapUnusedStyleCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReapUnusedStyleCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReapUnusedStyleCommandArchive_descriptor_;
}

const ReapUnusedStyleCommandArchive& ReapUnusedStyleCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSSArchives_2eproto();
  return *default_instance_;
}

ReapUnusedStyleCommandArchive* ReapUnusedStyleCommandArchive::default_instance_ = NULL;

ReapUnusedStyleCommandArchive* ReapUnusedStyleCommandArchive::New() const {
  return new ReapUnusedStyleCommandArchive;
}

void ReapUnusedStyleCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_stylesheet()) {
      if (stylesheet_ != NULL) stylesheet_->::TSP::Reference::Clear();
    }
  }
  styles_.Clear();
  identified_styles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReapUnusedStyleCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stylesheet;
        break;
      }

      // optional .TSP.Reference stylesheet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stylesheet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stylesheet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_styles;
        break;
      }

      // repeated .TSP.Reference styles = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_styles;
        if (input->ExpectTag(34)) goto parse_identified_styles;
        break;
      }

      // repeated .TSS.ReapUnusedStyleCommandArchive.IdentifiedStyleEntry identified_styles = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_identified_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_identified_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_identified_styles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReapUnusedStyleCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference stylesheet = 2;
  if (has_stylesheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stylesheet(), output);
  }

  // repeated .TSP.Reference styles = 3;
  for (int i = 0; i < this->styles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->styles(i), output);
  }

  // repeated .TSS.ReapUnusedStyleCommandArchive.IdentifiedStyleEntry identified_styles = 4;
  for (int i = 0; i < this->identified_styles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->identified_styles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReapUnusedStyleCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference stylesheet = 2;
  if (has_stylesheet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stylesheet(), target);
  }

  // repeated .TSP.Reference styles = 3;
  for (int i = 0; i < this->styles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->styles(i), target);
  }

  // repeated .TSS.ReapUnusedStyleCommandArchive.IdentifiedStyleEntry identified_styles = 4;
  for (int i = 0; i < this->identified_styles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->identified_styles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReapUnusedStyleCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference stylesheet = 2;
    if (has_stylesheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stylesheet());
    }

  }
  // repeated .TSP.Reference styles = 3;
  total_size += 1 * this->styles_size();
  for (int i = 0; i < this->styles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->styles(i));
  }

  // repeated .TSS.ReapUnusedStyleCommandArchive.IdentifiedStyleEntry identified_styles = 4;
  total_size += 1 * this->identified_styles_size();
  for (int i = 0; i < this->identified_styles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->identified_styles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReapUnusedStyleCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReapUnusedStyleCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReapUnusedStyleCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReapUnusedStyleCommandArchive::MergeFrom(const ReapUnusedStyleCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  styles_.MergeFrom(from.styles_);
  identified_styles_.MergeFrom(from.identified_styles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_stylesheet()) {
      mutable_stylesheet()->::TSP::Reference::MergeFrom(from.stylesheet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReapUnusedStyleCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReapUnusedStyleCommandArchive::CopyFrom(const ReapUnusedStyleCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReapUnusedStyleCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_stylesheet()) {
    if (!this->stylesheet().IsInitialized()) return false;
  }
  for (int i = 0; i < styles_size(); i++) {
    if (!this->styles(i).IsInitialized()) return false;
  }
  for (int i = 0; i < identified_styles_size(); i++) {
    if (!this->identified_styles(i).IsInitialized()) return false;
  }
  return true;
}

void ReapUnusedStyleCommandArchive::Swap(ReapUnusedStyleCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(stylesheet_, other->stylesheet_);
    styles_.Swap(&other->styles_);
    identified_styles_.Swap(&other->identified_styles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReapUnusedStyleCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReapUnusedStyleCommandArchive_descriptor_;
  metadata.reflection = ReapUnusedStyleCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StyleUpdatePropertyMapCommandArchive::kSuperFieldNumber;
const int StyleUpdatePropertyMapCommandArchive::kCurrentStyleFieldNumber;
const int StyleUpdatePropertyMapCommandArchive::kStyleWithOldPropertyMapFieldNumber;
const int StyleUpdatePropertyMapCommandArchive::kStyleWithNewPropertyMapFieldNumber;
const int StyleUpdatePropertyMapCommandArchive::kNotifyForStyleClientsFieldNumber;
#endif  // !_MSC_VER

StyleUpdatePropertyMapCommandArchive::StyleUpdatePropertyMapCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StyleUpdatePropertyMapCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  current_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  style_with_old_property_map_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  style_with_new_property_map_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

StyleUpdatePropertyMapCommandArchive::StyleUpdatePropertyMapCommandArchive(const StyleUpdatePropertyMapCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StyleUpdatePropertyMapCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  current_style_ = NULL;
  style_with_old_property_map_ = NULL;
  style_with_new_property_map_ = NULL;
  notify_for_style_clients_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StyleUpdatePropertyMapCommandArchive::~StyleUpdatePropertyMapCommandArchive() {
  SharedDtor();
}

void StyleUpdatePropertyMapCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete current_style_;
    delete style_with_old_property_map_;
    delete style_with_new_property_map_;
  }
}

void StyleUpdatePropertyMapCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StyleUpdatePropertyMapCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StyleUpdatePropertyMapCommandArchive_descriptor_;
}

const StyleUpdatePropertyMapCommandArchive& StyleUpdatePropertyMapCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSSArchives_2eproto();
  return *default_instance_;
}

StyleUpdatePropertyMapCommandArchive* StyleUpdatePropertyMapCommandArchive::default_instance_ = NULL;

StyleUpdatePropertyMapCommandArchive* StyleUpdatePropertyMapCommandArchive::New() const {
  return new StyleUpdatePropertyMapCommandArchive;
}

void StyleUpdatePropertyMapCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_current_style()) {
      if (current_style_ != NULL) current_style_->::TSP::Reference::Clear();
    }
    if (has_style_with_old_property_map()) {
      if (style_with_old_property_map_ != NULL) style_with_old_property_map_->::TSP::Reference::Clear();
    }
    if (has_style_with_new_property_map()) {
      if (style_with_new_property_map_ != NULL) style_with_new_property_map_->::TSP::Reference::Clear();
    }
    notify_for_style_clients_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StyleUpdatePropertyMapCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_current_style;
        break;
      }

      // required .TSP.Reference current_style = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_current_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_current_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_style_with_old_property_map;
        break;
      }

      // required .TSP.Reference style_with_old_property_map = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_style_with_old_property_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_style_with_old_property_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_style_with_new_property_map;
        break;
      }

      // required .TSP.Reference style_with_new_property_map = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_style_with_new_property_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_style_with_new_property_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_notify_for_style_clients;
        break;
      }

      // optional bool notify_for_style_clients = 6 [default = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notify_for_style_clients:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notify_for_style_clients_)));
          set_has_notify_for_style_clients();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StyleUpdatePropertyMapCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference current_style = 2;
  if (has_current_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->current_style(), output);
  }

  // required .TSP.Reference style_with_old_property_map = 3;
  if (has_style_with_old_property_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->style_with_old_property_map(), output);
  }

  // required .TSP.Reference style_with_new_property_map = 4;
  if (has_style_with_new_property_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->style_with_new_property_map(), output);
  }

  // optional bool notify_for_style_clients = 6 [default = true];
  if (has_notify_for_style_clients()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->notify_for_style_clients(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StyleUpdatePropertyMapCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference current_style = 2;
  if (has_current_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->current_style(), target);
  }

  // required .TSP.Reference style_with_old_property_map = 3;
  if (has_style_with_old_property_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->style_with_old_property_map(), target);
  }

  // required .TSP.Reference style_with_new_property_map = 4;
  if (has_style_with_new_property_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->style_with_new_property_map(), target);
  }

  // optional bool notify_for_style_clients = 6 [default = true];
  if (has_notify_for_style_clients()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->notify_for_style_clients(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StyleUpdatePropertyMapCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference current_style = 2;
    if (has_current_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->current_style());
    }

    // required .TSP.Reference style_with_old_property_map = 3;
    if (has_style_with_old_property_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->style_with_old_property_map());
    }

    // required .TSP.Reference style_with_new_property_map = 4;
    if (has_style_with_new_property_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->style_with_new_property_map());
    }

    // optional bool notify_for_style_clients = 6 [default = true];
    if (has_notify_for_style_clients()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StyleUpdatePropertyMapCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StyleUpdatePropertyMapCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StyleUpdatePropertyMapCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StyleUpdatePropertyMapCommandArchive::MergeFrom(const StyleUpdatePropertyMapCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_current_style()) {
      mutable_current_style()->::TSP::Reference::MergeFrom(from.current_style());
    }
    if (from.has_style_with_old_property_map()) {
      mutable_style_with_old_property_map()->::TSP::Reference::MergeFrom(from.style_with_old_property_map());
    }
    if (from.has_style_with_new_property_map()) {
      mutable_style_with_new_property_map()->::TSP::Reference::MergeFrom(from.style_with_new_property_map());
    }
    if (from.has_notify_for_style_clients()) {
      set_notify_for_style_clients(from.notify_for_style_clients());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StyleUpdatePropertyMapCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleUpdatePropertyMapCommandArchive::CopyFrom(const StyleUpdatePropertyMapCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleUpdatePropertyMapCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_current_style()) {
    if (!this->current_style().IsInitialized()) return false;
  }
  if (has_style_with_old_property_map()) {
    if (!this->style_with_old_property_map().IsInitialized()) return false;
  }
  if (has_style_with_new_property_map()) {
    if (!this->style_with_new_property_map().IsInitialized()) return false;
  }
  return true;
}

void StyleUpdatePropertyMapCommandArchive::Swap(StyleUpdatePropertyMapCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(current_style_, other->current_style_);
    std::swap(style_with_old_property_map_, other->style_with_old_property_map_);
    std::swap(style_with_new_property_map_, other->style_with_new_property_map_);
    std::swap(notify_for_style_clients_, other->notify_for_style_clients_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StyleUpdatePropertyMapCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StyleUpdatePropertyMapCommandArchive_descriptor_;
  metadata.reflection = StyleUpdatePropertyMapCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThemeReplacePresetCommandArchive::kSuperFieldNumber;
const int ThemeReplacePresetCommandArchive::kThemeFieldNumber;
const int ThemeReplacePresetCommandArchive::kPresetFieldNumber;
const int ThemeReplacePresetCommandArchive::kOldPresetFieldNumber;
const int ThemeReplacePresetCommandArchive::kIndexFieldNumber;
#endif  // !_MSC_VER

ThemeReplacePresetCommandArchive::ThemeReplacePresetCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThemeReplacePresetCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  theme_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  preset_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  oldpreset_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ThemeReplacePresetCommandArchive::ThemeReplacePresetCommandArchive(const ThemeReplacePresetCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThemeReplacePresetCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  theme_ = NULL;
  preset_ = NULL;
  oldpreset_ = NULL;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThemeReplacePresetCommandArchive::~ThemeReplacePresetCommandArchive() {
  SharedDtor();
}

void ThemeReplacePresetCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete theme_;
    delete preset_;
    delete oldpreset_;
  }
}

void ThemeReplacePresetCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThemeReplacePresetCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThemeReplacePresetCommandArchive_descriptor_;
}

const ThemeReplacePresetCommandArchive& ThemeReplacePresetCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSSArchives_2eproto();
  return *default_instance_;
}

ThemeReplacePresetCommandArchive* ThemeReplacePresetCommandArchive::default_instance_ = NULL;

ThemeReplacePresetCommandArchive* ThemeReplacePresetCommandArchive::New() const {
  return new ThemeReplacePresetCommandArchive;
}

void ThemeReplacePresetCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_theme()) {
      if (theme_ != NULL) theme_->::TSP::Reference::Clear();
    }
    if (has_preset()) {
      if (preset_ != NULL) preset_->::TSP::Reference::Clear();
    }
    if (has_oldpreset()) {
      if (oldpreset_ != NULL) oldpreset_->::TSP::Reference::Clear();
    }
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThemeReplacePresetCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_theme;
        break;
      }

      // required .TSP.Reference theme = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_theme()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_preset;
        break;
      }

      // required .TSP.Reference preset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_preset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_oldPreset;
        break;
      }

      // required .TSP.Reference oldPreset = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldPreset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldpreset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_index;
        break;
      }

      // required uint32 index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThemeReplacePresetCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference theme = 2;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->theme(), output);
  }

  // required .TSP.Reference preset = 3;
  if (has_preset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->preset(), output);
  }

  // required .TSP.Reference oldPreset = 4;
  if (has_oldpreset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->oldpreset(), output);
  }

  // required uint32 index = 5;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThemeReplacePresetCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference theme = 2;
  if (has_theme()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->theme(), target);
  }

  // required .TSP.Reference preset = 3;
  if (has_preset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->preset(), target);
  }

  // required .TSP.Reference oldPreset = 4;
  if (has_oldpreset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->oldpreset(), target);
  }

  // required uint32 index = 5;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThemeReplacePresetCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference theme = 2;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->theme());
    }

    // required .TSP.Reference preset = 3;
    if (has_preset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->preset());
    }

    // required .TSP.Reference oldPreset = 4;
    if (has_oldpreset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oldpreset());
    }

    // required uint32 index = 5;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThemeReplacePresetCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThemeReplacePresetCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThemeReplacePresetCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThemeReplacePresetCommandArchive::MergeFrom(const ThemeReplacePresetCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_theme()) {
      mutable_theme()->::TSP::Reference::MergeFrom(from.theme());
    }
    if (from.has_preset()) {
      mutable_preset()->::TSP::Reference::MergeFrom(from.preset());
    }
    if (from.has_oldpreset()) {
      mutable_oldpreset()->::TSP::Reference::MergeFrom(from.oldpreset());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThemeReplacePresetCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThemeReplacePresetCommandArchive::CopyFrom(const ThemeReplacePresetCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeReplacePresetCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_theme()) {
    if (!this->theme().IsInitialized()) return false;
  }
  if (has_preset()) {
    if (!this->preset().IsInitialized()) return false;
  }
  if (has_oldpreset()) {
    if (!this->oldpreset().IsInitialized()) return false;
  }
  return true;
}

void ThemeReplacePresetCommandArchive::Swap(ThemeReplacePresetCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(theme_, other->theme_);
    std::swap(preset_, other->preset_);
    std::swap(oldpreset_, other->oldpreset_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThemeReplacePresetCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThemeReplacePresetCommandArchive_descriptor_;
  metadata.reflection = ThemeReplacePresetCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThemeReplaceColorPresetCommandArchive::kSuperFieldNumber;
const int ThemeReplaceColorPresetCommandArchive::kThemeFieldNumber;
const int ThemeReplaceColorPresetCommandArchive::kColorFieldNumber;
const int ThemeReplaceColorPresetCommandArchive::kOldColorFieldNumber;
const int ThemeReplaceColorPresetCommandArchive::kIndexFieldNumber;
#endif  // !_MSC_VER

ThemeReplaceColorPresetCommandArchive::ThemeReplaceColorPresetCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThemeReplaceColorPresetCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  theme_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  color_ = const_cast< ::TSP::Color*>(&::TSP::Color::default_instance());
  old_color_ = const_cast< ::TSP::Color*>(&::TSP::Color::default_instance());
}

ThemeReplaceColorPresetCommandArchive::ThemeReplaceColorPresetCommandArchive(const ThemeReplaceColorPresetCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThemeReplaceColorPresetCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  theme_ = NULL;
  color_ = NULL;
  old_color_ = NULL;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThemeReplaceColorPresetCommandArchive::~ThemeReplaceColorPresetCommandArchive() {
  SharedDtor();
}

void ThemeReplaceColorPresetCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete theme_;
    delete color_;
    delete old_color_;
  }
}

void ThemeReplaceColorPresetCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThemeReplaceColorPresetCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThemeReplaceColorPresetCommandArchive_descriptor_;
}

const ThemeReplaceColorPresetCommandArchive& ThemeReplaceColorPresetCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSSArchives_2eproto();
  return *default_instance_;
}

ThemeReplaceColorPresetCommandArchive* ThemeReplaceColorPresetCommandArchive::default_instance_ = NULL;

ThemeReplaceColorPresetCommandArchive* ThemeReplaceColorPresetCommandArchive::New() const {
  return new ThemeReplaceColorPresetCommandArchive;
}

void ThemeReplaceColorPresetCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_theme()) {
      if (theme_ != NULL) theme_->::TSP::Reference::Clear();
    }
    if (has_color()) {
      if (color_ != NULL) color_->::TSP::Color::Clear();
    }
    if (has_old_color()) {
      if (old_color_ != NULL) old_color_->::TSP::Color::Clear();
    }
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThemeReplaceColorPresetCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_theme;
        break;
      }

      // required .TSP.Reference theme = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_theme()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_color;
        break;
      }

      // required .TSP.Color color = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_old_color;
        break;
      }

      // required .TSP.Color old_color = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_index;
        break;
      }

      // required uint32 index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThemeReplaceColorPresetCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference theme = 2;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->theme(), output);
  }

  // required .TSP.Color color = 3;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->color(), output);
  }

  // required .TSP.Color old_color = 4;
  if (has_old_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->old_color(), output);
  }

  // required uint32 index = 5;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThemeReplaceColorPresetCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference theme = 2;
  if (has_theme()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->theme(), target);
  }

  // required .TSP.Color color = 3;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->color(), target);
  }

  // required .TSP.Color old_color = 4;
  if (has_old_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->old_color(), target);
  }

  // required uint32 index = 5;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThemeReplaceColorPresetCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference theme = 2;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->theme());
    }

    // required .TSP.Color color = 3;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->color());
    }

    // required .TSP.Color old_color = 4;
    if (has_old_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_color());
    }

    // required uint32 index = 5;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThemeReplaceColorPresetCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThemeReplaceColorPresetCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThemeReplaceColorPresetCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThemeReplaceColorPresetCommandArchive::MergeFrom(const ThemeReplaceColorPresetCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_theme()) {
      mutable_theme()->::TSP::Reference::MergeFrom(from.theme());
    }
    if (from.has_color()) {
      mutable_color()->::TSP::Color::MergeFrom(from.color());
    }
    if (from.has_old_color()) {
      mutable_old_color()->::TSP::Color::MergeFrom(from.old_color());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThemeReplaceColorPresetCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThemeReplaceColorPresetCommandArchive::CopyFrom(const ThemeReplaceColorPresetCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeReplaceColorPresetCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_theme()) {
    if (!this->theme().IsInitialized()) return false;
  }
  if (has_color()) {
    if (!this->color().IsInitialized()) return false;
  }
  if (has_old_color()) {
    if (!this->old_color().IsInitialized()) return false;
  }
  return true;
}

void ThemeReplaceColorPresetCommandArchive::Swap(ThemeReplaceColorPresetCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(theme_, other->theme_);
    std::swap(color_, other->color_);
    std::swap(old_color_, other->old_color_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThemeReplaceColorPresetCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThemeReplaceColorPresetCommandArchive_descriptor_;
  metadata.reflection = ThemeReplaceColorPresetCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThemeAddStylePresetCommandArchive::kSuperFieldNumber;
const int ThemeAddStylePresetCommandArchive::kThemeFieldNumber;
const int ThemeAddStylePresetCommandArchive::kPresetFieldNumber;
const int ThemeAddStylePresetCommandArchive::kPresetKindFieldNumber;
const int ThemeAddStylePresetCommandArchive::kIdentifierFieldNumber;
const int ThemeAddStylePresetCommandArchive::kAddPresetToStylesheetFieldNumber;
#endif  // !_MSC_VER

ThemeAddStylePresetCommandArchive::ThemeAddStylePresetCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThemeAddStylePresetCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  theme_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  preset_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ThemeAddStylePresetCommandArchive::ThemeAddStylePresetCommandArchive(const ThemeAddStylePresetCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThemeAddStylePresetCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  theme_ = NULL;
  preset_ = NULL;
  preset_kind_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  add_preset_to_stylesheet_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThemeAddStylePresetCommandArchive::~ThemeAddStylePresetCommandArchive() {
  SharedDtor();
}

void ThemeAddStylePresetCommandArchive::SharedDtor() {
  if (preset_kind_ != &::google::protobuf::internal::kEmptyString) {
    delete preset_kind_;
  }
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete identifier_;
  }
  if (this != default_instance_) {
    delete super_;
    delete theme_;
    delete preset_;
  }
}

void ThemeAddStylePresetCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThemeAddStylePresetCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThemeAddStylePresetCommandArchive_descriptor_;
}

const ThemeAddStylePresetCommandArchive& ThemeAddStylePresetCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSSArchives_2eproto();
  return *default_instance_;
}

ThemeAddStylePresetCommandArchive* ThemeAddStylePresetCommandArchive::default_instance_ = NULL;

ThemeAddStylePresetCommandArchive* ThemeAddStylePresetCommandArchive::New() const {
  return new ThemeAddStylePresetCommandArchive;
}

void ThemeAddStylePresetCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_theme()) {
      if (theme_ != NULL) theme_->::TSP::Reference::Clear();
    }
    if (has_preset()) {
      if (preset_ != NULL) preset_->::TSP::Reference::Clear();
    }
    if (has_preset_kind()) {
      if (preset_kind_ != &::google::protobuf::internal::kEmptyString) {
        preset_kind_->clear();
      }
    }
    if (has_identifier()) {
      if (identifier_ != &::google::protobuf::internal::kEmptyString) {
        identifier_->clear();
      }
    }
    add_preset_to_stylesheet_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThemeAddStylePresetCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_theme;
        break;
      }

      // required .TSP.Reference theme = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_theme()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_preset;
        break;
      }

      // required .TSP.Reference preset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_preset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_preset_kind;
        break;
      }

      // required string preset_kind = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_preset_kind:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preset_kind()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->preset_kind().data(), this->preset_kind().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_identifier;
        break;
      }

      // optional string identifier = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->identifier().data(), this->identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_add_preset_to_stylesheet;
        break;
      }

      // optional bool add_preset_to_stylesheet = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_preset_to_stylesheet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &add_preset_to_stylesheet_)));
          set_has_add_preset_to_stylesheet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThemeAddStylePresetCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference theme = 2;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->theme(), output);
  }

  // required .TSP.Reference preset = 3;
  if (has_preset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->preset(), output);
  }

  // required string preset_kind = 4;
  if (has_preset_kind()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->preset_kind().data(), this->preset_kind().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->preset_kind(), output);
  }

  // optional string identifier = 5;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->identifier(), output);
  }

  // optional bool add_preset_to_stylesheet = 6;
  if (has_add_preset_to_stylesheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->add_preset_to_stylesheet(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThemeAddStylePresetCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference theme = 2;
  if (has_theme()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->theme(), target);
  }

  // required .TSP.Reference preset = 3;
  if (has_preset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->preset(), target);
  }

  // required string preset_kind = 4;
  if (has_preset_kind()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->preset_kind().data(), this->preset_kind().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->preset_kind(), target);
  }

  // optional string identifier = 5;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->identifier(), target);
  }

  // optional bool add_preset_to_stylesheet = 6;
  if (has_add_preset_to_stylesheet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->add_preset_to_stylesheet(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThemeAddStylePresetCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference theme = 2;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->theme());
    }

    // required .TSP.Reference preset = 3;
    if (has_preset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->preset());
    }

    // required string preset_kind = 4;
    if (has_preset_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preset_kind());
    }

    // optional string identifier = 5;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identifier());
    }

    // optional bool add_preset_to_stylesheet = 6;
    if (has_add_preset_to_stylesheet()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThemeAddStylePresetCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThemeAddStylePresetCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThemeAddStylePresetCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThemeAddStylePresetCommandArchive::MergeFrom(const ThemeAddStylePresetCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_theme()) {
      mutable_theme()->::TSP::Reference::MergeFrom(from.theme());
    }
    if (from.has_preset()) {
      mutable_preset()->::TSP::Reference::MergeFrom(from.preset());
    }
    if (from.has_preset_kind()) {
      set_preset_kind(from.preset_kind());
    }
    if (from.has_identifier()) {
      set_identifier(from.identifier());
    }
    if (from.has_add_preset_to_stylesheet()) {
      set_add_preset_to_stylesheet(from.add_preset_to_stylesheet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThemeAddStylePresetCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThemeAddStylePresetCommandArchive::CopyFrom(const ThemeAddStylePresetCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeAddStylePresetCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_theme()) {
    if (!this->theme().IsInitialized()) return false;
  }
  if (has_preset()) {
    if (!this->preset().IsInitialized()) return false;
  }
  return true;
}

void ThemeAddStylePresetCommandArchive::Swap(ThemeAddStylePresetCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(theme_, other->theme_);
    std::swap(preset_, other->preset_);
    std::swap(preset_kind_, other->preset_kind_);
    std::swap(identifier_, other->identifier_);
    std::swap(add_preset_to_stylesheet_, other->add_preset_to_stylesheet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThemeAddStylePresetCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThemeAddStylePresetCommandArchive_descriptor_;
  metadata.reflection = ThemeAddStylePresetCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThemeRemoveStylePresetCommandArchive::kSuperFieldNumber;
const int ThemeRemoveStylePresetCommandArchive::kThemeFieldNumber;
const int ThemeRemoveStylePresetCommandArchive::kPresetFieldNumber;
const int ThemeRemoveStylePresetCommandArchive::kPresetIndexFieldNumber;
const int ThemeRemoveStylePresetCommandArchive::kPresetKindFieldNumber;
const int ThemeRemoveStylePresetCommandArchive::kIdentifierFieldNumber;
#endif  // !_MSC_VER

ThemeRemoveStylePresetCommandArchive::ThemeRemoveStylePresetCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThemeRemoveStylePresetCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  theme_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  preset_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ThemeRemoveStylePresetCommandArchive::ThemeRemoveStylePresetCommandArchive(const ThemeRemoveStylePresetCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThemeRemoveStylePresetCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  theme_ = NULL;
  preset_ = NULL;
  preset_index_ = 0u;
  preset_kind_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThemeRemoveStylePresetCommandArchive::~ThemeRemoveStylePresetCommandArchive() {
  SharedDtor();
}

void ThemeRemoveStylePresetCommandArchive::SharedDtor() {
  if (preset_kind_ != &::google::protobuf::internal::kEmptyString) {
    delete preset_kind_;
  }
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete identifier_;
  }
  if (this != default_instance_) {
    delete super_;
    delete theme_;
    delete preset_;
  }
}

void ThemeRemoveStylePresetCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThemeRemoveStylePresetCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThemeRemoveStylePresetCommandArchive_descriptor_;
}

const ThemeRemoveStylePresetCommandArchive& ThemeRemoveStylePresetCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSSArchives_2eproto();
  return *default_instance_;
}

ThemeRemoveStylePresetCommandArchive* ThemeRemoveStylePresetCommandArchive::default_instance_ = NULL;

ThemeRemoveStylePresetCommandArchive* ThemeRemoveStylePresetCommandArchive::New() const {
  return new ThemeRemoveStylePresetCommandArchive;
}

void ThemeRemoveStylePresetCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_theme()) {
      if (theme_ != NULL) theme_->::TSP::Reference::Clear();
    }
    if (has_preset()) {
      if (preset_ != NULL) preset_->::TSP::Reference::Clear();
    }
    preset_index_ = 0u;
    if (has_preset_kind()) {
      if (preset_kind_ != &::google::protobuf::internal::kEmptyString) {
        preset_kind_->clear();
      }
    }
    if (has_identifier()) {
      if (identifier_ != &::google::protobuf::internal::kEmptyString) {
        identifier_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThemeRemoveStylePresetCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_theme;
        break;
      }

      // required .TSP.Reference theme = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_theme()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_preset;
        break;
      }

      // required .TSP.Reference preset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_preset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_preset_index;
        break;
      }

      // required uint32 preset_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preset_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preset_index_)));
          set_has_preset_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_preset_kind;
        break;
      }

      // required string preset_kind = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_preset_kind:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preset_kind()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->preset_kind().data(), this->preset_kind().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_identifier;
        break;
      }

      // optional string identifier = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->identifier().data(), this->identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThemeRemoveStylePresetCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference theme = 2;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->theme(), output);
  }

  // required .TSP.Reference preset = 3;
  if (has_preset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->preset(), output);
  }

  // required uint32 preset_index = 4;
  if (has_preset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->preset_index(), output);
  }

  // required string preset_kind = 5;
  if (has_preset_kind()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->preset_kind().data(), this->preset_kind().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->preset_kind(), output);
  }

  // optional string identifier = 6;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->identifier(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThemeRemoveStylePresetCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference theme = 2;
  if (has_theme()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->theme(), target);
  }

  // required .TSP.Reference preset = 3;
  if (has_preset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->preset(), target);
  }

  // required uint32 preset_index = 4;
  if (has_preset_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->preset_index(), target);
  }

  // required string preset_kind = 5;
  if (has_preset_kind()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->preset_kind().data(), this->preset_kind().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->preset_kind(), target);
  }

  // optional string identifier = 6;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->identifier(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThemeRemoveStylePresetCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference theme = 2;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->theme());
    }

    // required .TSP.Reference preset = 3;
    if (has_preset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->preset());
    }

    // required uint32 preset_index = 4;
    if (has_preset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->preset_index());
    }

    // required string preset_kind = 5;
    if (has_preset_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preset_kind());
    }

    // optional string identifier = 6;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identifier());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThemeRemoveStylePresetCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThemeRemoveStylePresetCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThemeRemoveStylePresetCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThemeRemoveStylePresetCommandArchive::MergeFrom(const ThemeRemoveStylePresetCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_theme()) {
      mutable_theme()->::TSP::Reference::MergeFrom(from.theme());
    }
    if (from.has_preset()) {
      mutable_preset()->::TSP::Reference::MergeFrom(from.preset());
    }
    if (from.has_preset_index()) {
      set_preset_index(from.preset_index());
    }
    if (from.has_preset_kind()) {
      set_preset_kind(from.preset_kind());
    }
    if (from.has_identifier()) {
      set_identifier(from.identifier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThemeRemoveStylePresetCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThemeRemoveStylePresetCommandArchive::CopyFrom(const ThemeRemoveStylePresetCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeRemoveStylePresetCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_theme()) {
    if (!this->theme().IsInitialized()) return false;
  }
  if (has_preset()) {
    if (!this->preset().IsInitialized()) return false;
  }
  return true;
}

void ThemeRemoveStylePresetCommandArchive::Swap(ThemeRemoveStylePresetCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(theme_, other->theme_);
    std::swap(preset_, other->preset_);
    std::swap(preset_index_, other->preset_index_);
    std::swap(preset_kind_, other->preset_kind_);
    std::swap(identifier_, other->identifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThemeRemoveStylePresetCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThemeRemoveStylePresetCommandArchive_descriptor_;
  metadata.reflection = ThemeRemoveStylePresetCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThemeMovePresetCommandArchive::kSuperFieldNumber;
const int ThemeMovePresetCommandArchive::kThemeFieldNumber;
const int ThemeMovePresetCommandArchive::kPresetFieldNumber;
const int ThemeMovePresetCommandArchive::kNewIndexFieldNumber;
const int ThemeMovePresetCommandArchive::kOldIndexFieldNumber;
#endif  // !_MSC_VER

ThemeMovePresetCommandArchive::ThemeMovePresetCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThemeMovePresetCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  theme_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  preset_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ThemeMovePresetCommandArchive::ThemeMovePresetCommandArchive(const ThemeMovePresetCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThemeMovePresetCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  theme_ = NULL;
  preset_ = NULL;
  new_index_ = 0u;
  old_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThemeMovePresetCommandArchive::~ThemeMovePresetCommandArchive() {
  SharedDtor();
}

void ThemeMovePresetCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete theme_;
    delete preset_;
  }
}

void ThemeMovePresetCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThemeMovePresetCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThemeMovePresetCommandArchive_descriptor_;
}

const ThemeMovePresetCommandArchive& ThemeMovePresetCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSSArchives_2eproto();
  return *default_instance_;
}

ThemeMovePresetCommandArchive* ThemeMovePresetCommandArchive::default_instance_ = NULL;

ThemeMovePresetCommandArchive* ThemeMovePresetCommandArchive::New() const {
  return new ThemeMovePresetCommandArchive;
}

void ThemeMovePresetCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_theme()) {
      if (theme_ != NULL) theme_->::TSP::Reference::Clear();
    }
    if (has_preset()) {
      if (preset_ != NULL) preset_->::TSP::Reference::Clear();
    }
    new_index_ = 0u;
    old_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThemeMovePresetCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_theme;
        break;
      }

      // required .TSP.Reference theme = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_theme()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_preset;
        break;
      }

      // required .TSP.Reference preset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_preset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_new_index;
        break;
      }

      // required uint32 new_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_index_)));
          set_has_new_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_old_index;
        break;
      }

      // required uint32 old_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_index_)));
          set_has_old_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThemeMovePresetCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference theme = 2;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->theme(), output);
  }

  // required .TSP.Reference preset = 3;
  if (has_preset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->preset(), output);
  }

  // required uint32 new_index = 4;
  if (has_new_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->new_index(), output);
  }

  // required uint32 old_index = 5;
  if (has_old_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->old_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThemeMovePresetCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference theme = 2;
  if (has_theme()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->theme(), target);
  }

  // required .TSP.Reference preset = 3;
  if (has_preset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->preset(), target);
  }

  // required uint32 new_index = 4;
  if (has_new_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->new_index(), target);
  }

  // required uint32 old_index = 5;
  if (has_old_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->old_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThemeMovePresetCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference theme = 2;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->theme());
    }

    // required .TSP.Reference preset = 3;
    if (has_preset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->preset());
    }

    // required uint32 new_index = 4;
    if (has_new_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_index());
    }

    // required uint32 old_index = 5;
    if (has_old_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThemeMovePresetCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThemeMovePresetCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThemeMovePresetCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThemeMovePresetCommandArchive::MergeFrom(const ThemeMovePresetCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_theme()) {
      mutable_theme()->::TSP::Reference::MergeFrom(from.theme());
    }
    if (from.has_preset()) {
      mutable_preset()->::TSP::Reference::MergeFrom(from.preset());
    }
    if (from.has_new_index()) {
      set_new_index(from.new_index());
    }
    if (from.has_old_index()) {
      set_old_index(from.old_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThemeMovePresetCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThemeMovePresetCommandArchive::CopyFrom(const ThemeMovePresetCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeMovePresetCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_theme()) {
    if (!this->theme().IsInitialized()) return false;
  }
  if (has_preset()) {
    if (!this->preset().IsInitialized()) return false;
  }
  return true;
}

void ThemeMovePresetCommandArchive::Swap(ThemeMovePresetCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(theme_, other->theme_);
    std::swap(preset_, other->preset_);
    std::swap(new_index_, other->new_index_);
    std::swap(old_index_, other->old_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThemeMovePresetCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThemeMovePresetCommandArchive_descriptor_;
  metadata.reflection = ThemeMovePresetCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThemeReplaceStylePresetCommandArchive::kSuperFieldNumber;
const int ThemeReplaceStylePresetCommandArchive::kPresetFieldNumber;
const int ThemeReplaceStylePresetCommandArchive::kOldPresetFieldNumber;
#endif  // !_MSC_VER

ThemeReplaceStylePresetCommandArchive::ThemeReplaceStylePresetCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThemeReplaceStylePresetCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  preset_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  old_preset_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ThemeReplaceStylePresetCommandArchive::ThemeReplaceStylePresetCommandArchive(const ThemeReplaceStylePresetCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThemeReplaceStylePresetCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  preset_ = NULL;
  old_preset_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThemeReplaceStylePresetCommandArchive::~ThemeReplaceStylePresetCommandArchive() {
  SharedDtor();
}

void ThemeReplaceStylePresetCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete preset_;
    delete old_preset_;
  }
}

void ThemeReplaceStylePresetCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThemeReplaceStylePresetCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThemeReplaceStylePresetCommandArchive_descriptor_;
}

const ThemeReplaceStylePresetCommandArchive& ThemeReplaceStylePresetCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSSArchives_2eproto();
  return *default_instance_;
}

ThemeReplaceStylePresetCommandArchive* ThemeReplaceStylePresetCommandArchive::default_instance_ = NULL;

ThemeReplaceStylePresetCommandArchive* ThemeReplaceStylePresetCommandArchive::New() const {
  return new ThemeReplaceStylePresetCommandArchive;
}

void ThemeReplaceStylePresetCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_preset()) {
      if (preset_ != NULL) preset_->::TSP::Reference::Clear();
    }
    if (has_old_preset()) {
      if (old_preset_ != NULL) old_preset_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThemeReplaceStylePresetCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_preset;
        break;
      }

      // required .TSP.Reference preset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_preset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_old_preset;
        break;
      }

      // required .TSP.Reference old_preset = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_preset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_preset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThemeReplaceStylePresetCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference preset = 3;
  if (has_preset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->preset(), output);
  }

  // required .TSP.Reference old_preset = 4;
  if (has_old_preset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->old_preset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThemeReplaceStylePresetCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference preset = 3;
  if (has_preset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->preset(), target);
  }

  // required .TSP.Reference old_preset = 4;
  if (has_old_preset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->old_preset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThemeReplaceStylePresetCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference preset = 3;
    if (has_preset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->preset());
    }

    // required .TSP.Reference old_preset = 4;
    if (has_old_preset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_preset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThemeReplaceStylePresetCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThemeReplaceStylePresetCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThemeReplaceStylePresetCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThemeReplaceStylePresetCommandArchive::MergeFrom(const ThemeReplaceStylePresetCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_preset()) {
      mutable_preset()->::TSP::Reference::MergeFrom(from.preset());
    }
    if (from.has_old_preset()) {
      mutable_old_preset()->::TSP::Reference::MergeFrom(from.old_preset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThemeReplaceStylePresetCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThemeReplaceStylePresetCommandArchive::CopyFrom(const ThemeReplaceStylePresetCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeReplaceStylePresetCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_preset()) {
    if (!this->preset().IsInitialized()) return false;
  }
  if (has_old_preset()) {
    if (!this->old_preset().IsInitialized()) return false;
  }
  return true;
}

void ThemeReplaceStylePresetCommandArchive::Swap(ThemeReplaceStylePresetCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(preset_, other->preset_);
    std::swap(old_preset_, other->old_preset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThemeReplaceStylePresetCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThemeReplaceStylePresetCommandArchive_descriptor_;
  metadata.reflection = ThemeReplaceStylePresetCommandArchive_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSS

// @@protoc_insertion_point(global_scope)
