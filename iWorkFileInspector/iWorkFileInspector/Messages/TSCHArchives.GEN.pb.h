// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCHArchives.GEN.proto

#ifndef PROTOBUF_TSCHArchives_2eGEN_2eproto__INCLUDED
#define PROTOBUF_TSCHArchives_2eGEN_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
#include "TSKArchives.pb.h"
#include "TSDArchives.pb.h"
#include "TSSArchives.pb.h"
#include "TSCHArchives.Common.pb.h"
#include "TSCH3DArchives.pb.h"
// @@protoc_insertion_point(includes)

namespace TSCH {
namespace Generated {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TSCHArchives_2eGEN_2eproto();
void protobuf_AssignDesc_TSCHArchives_2eGEN_2eproto();
void protobuf_ShutdownFile_TSCHArchives_2eGEN_2eproto();

class ChartStyleArchive;
class ChartNonStyleArchive;
class LegendStyleArchive;
class LegendNonStyleArchive;
class ChartAxisStyleArchive;
class ChartAxisNonStyleArchive;
class ChartSeriesStyleArchive;
class ChartSeriesNonStyleArchive;
class ChartGenericPropertyMapArchive;
class LegendGenericPropertyMapArchive;
class ChartAxisGenericPropertyMapArchive;
class ChartSeriesGenericPropertyMapArchive;

// ===================================================================

class ChartStyleArchive : public ::google::protobuf::Message {
 public:
  ChartStyleArchive();
  virtual ~ChartStyleArchive();

  ChartStyleArchive(const ChartStyleArchive& from);

  inline ChartStyleArchive& operator=(const ChartStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartStyleArchive& default_instance();

  void Swap(ChartStyleArchive* other);

  // implements Message ----------------------------------------------

  ChartStyleArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartStyleArchive& from);
  void MergeFrom(const ChartStyleArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float tschchartinfodefault3dchartopacity = 1;
  inline bool has_tschchartinfodefault3dchartopacity() const;
  inline void clear_tschchartinfodefault3dchartopacity();
  static const int kTschchartinfodefault3DchartopacityFieldNumber = 1;
  inline float tschchartinfodefault3dchartopacity() const;
  inline void set_tschchartinfodefault3dchartopacity(float value);

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoarea3dlightingpackage = 2;
  inline bool has_tschchartinfoarea3dlightingpackage() const;
  inline void clear_tschchartinfoarea3dlightingpackage();
  static const int kTschchartinfoarea3DlightingpackageFieldNumber = 2;
  inline const ::TSCH::Chart3DLightingPackageArchive& tschchartinfoarea3dlightingpackage() const;
  inline ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfoarea3dlightingpackage();
  inline ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfoarea3dlightingpackage();
  inline void set_allocated_tschchartinfoarea3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfoarea3dlightingpackage);

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobar3dlightingpackage = 3;
  inline bool has_tschchartinfobar3dlightingpackage() const;
  inline void clear_tschchartinfobar3dlightingpackage();
  static const int kTschchartinfobar3DlightingpackageFieldNumber = 3;
  inline const ::TSCH::Chart3DLightingPackageArchive& tschchartinfobar3dlightingpackage() const;
  inline ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfobar3dlightingpackage();
  inline ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfobar3dlightingpackage();
  inline void set_allocated_tschchartinfobar3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfobar3dlightingpackage);

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumn3dlightingpackage = 4;
  inline bool has_tschchartinfocolumn3dlightingpackage() const;
  inline void clear_tschchartinfocolumn3dlightingpackage();
  static const int kTschchartinfocolumn3DlightingpackageFieldNumber = 4;
  inline const ::TSCH::Chart3DLightingPackageArchive& tschchartinfocolumn3dlightingpackage() const;
  inline ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfocolumn3dlightingpackage();
  inline ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfocolumn3dlightingpackage();
  inline void set_allocated_tschchartinfocolumn3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfocolumn3dlightingpackage);

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefault3dlightingpackage = 5;
  inline bool has_tschchartinfodefault3dlightingpackage() const;
  inline void clear_tschchartinfodefault3dlightingpackage();
  static const int kTschchartinfodefault3DlightingpackageFieldNumber = 5;
  inline const ::TSCH::Chart3DLightingPackageArchive& tschchartinfodefault3dlightingpackage() const;
  inline ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfodefault3dlightingpackage();
  inline ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfodefault3dlightingpackage();
  inline void set_allocated_tschchartinfodefault3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfodefault3dlightingpackage);

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoline3dlightingpackage = 6;
  inline bool has_tschchartinfoline3dlightingpackage() const;
  inline void clear_tschchartinfoline3dlightingpackage();
  static const int kTschchartinfoline3DlightingpackageFieldNumber = 6;
  inline const ::TSCH::Chart3DLightingPackageArchive& tschchartinfoline3dlightingpackage() const;
  inline ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfoline3dlightingpackage();
  inline ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfoline3dlightingpackage();
  inline void set_allocated_tschchartinfoline3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfoline3dlightingpackage);

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopie3dlightingpackage = 7;
  inline bool has_tschchartinfopie3dlightingpackage() const;
  inline void clear_tschchartinfopie3dlightingpackage();
  static const int kTschchartinfopie3DlightingpackageFieldNumber = 7;
  inline const ::TSCH::Chart3DLightingPackageArchive& tschchartinfopie3dlightingpackage() const;
  inline ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfopie3dlightingpackage();
  inline ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfopie3dlightingpackage();
  inline void set_allocated_tschchartinfopie3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfopie3dlightingpackage);

  // optional .TSD.FillArchive tschchartinfodefaultbackgroundfill = 8;
  inline bool has_tschchartinfodefaultbackgroundfill() const;
  inline void clear_tschchartinfodefaultbackgroundfill();
  static const int kTschchartinfodefaultbackgroundfillFieldNumber = 8;
  inline const ::TSD::FillArchive& tschchartinfodefaultbackgroundfill() const;
  inline ::TSD::FillArchive* mutable_tschchartinfodefaultbackgroundfill();
  inline ::TSD::FillArchive* release_tschchartinfodefaultbackgroundfill();
  inline void set_allocated_tschchartinfodefaultbackgroundfill(::TSD::FillArchive* tschchartinfodefaultbackgroundfill);

  // optional .TSD.StrokeArchive tschchartinfodefaultbackgroundstroke = 9;
  inline bool has_tschchartinfodefaultbackgroundstroke() const;
  inline void clear_tschchartinfodefaultbackgroundstroke();
  static const int kTschchartinfodefaultbackgroundstrokeFieldNumber = 9;
  inline const ::TSD::StrokeArchive& tschchartinfodefaultbackgroundstroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartinfodefaultbackgroundstroke();
  inline ::TSD::StrokeArchive* release_tschchartinfodefaultbackgroundstroke();
  inline void set_allocated_tschchartinfodefaultbackgroundstroke(::TSD::StrokeArchive* tschchartinfodefaultbackgroundstroke);

  // optional float tschchartinfodefaultborderopacity = 10;
  inline bool has_tschchartinfodefaultborderopacity() const;
  inline void clear_tschchartinfodefaultborderopacity();
  static const int kTschchartinfodefaultborderopacityFieldNumber = 10;
  inline float tschchartinfodefaultborderopacity() const;
  inline void set_tschchartinfodefaultborderopacity(float value);

  // optional .TSD.ShadowArchive tschchartinfodefaultbordershadow = 11;
  inline bool has_tschchartinfodefaultbordershadow() const;
  inline void clear_tschchartinfodefaultbordershadow();
  static const int kTschchartinfodefaultbordershadowFieldNumber = 11;
  inline const ::TSD::ShadowArchive& tschchartinfodefaultbordershadow() const;
  inline ::TSD::ShadowArchive* mutable_tschchartinfodefaultbordershadow();
  inline ::TSD::ShadowArchive* release_tschchartinfodefaultbordershadow();
  inline void set_allocated_tschchartinfodefaultbordershadow(::TSD::ShadowArchive* tschchartinfodefaultbordershadow);

  // optional .TSD.StrokeArchive tschchartinfodefaultborderstroke = 12;
  inline bool has_tschchartinfodefaultborderstroke() const;
  inline void clear_tschchartinfodefaultborderstroke();
  static const int kTschchartinfodefaultborderstrokeFieldNumber = 12;
  inline const ::TSD::StrokeArchive& tschchartinfodefaultborderstroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartinfodefaultborderstroke();
  inline ::TSD::StrokeArchive* release_tschchartinfodefaultborderstroke();
  inline void set_allocated_tschchartinfodefaultborderstroke(::TSD::StrokeArchive* tschchartinfodefaultborderstroke);

  // optional bool tschchartinfodefaultcombinelayers = 13;
  inline bool has_tschchartinfodefaultcombinelayers() const;
  inline void clear_tschchartinfodefaultcombinelayers();
  static const int kTschchartinfodefaultcombinelayersFieldNumber = 13;
  inline bool tschchartinfodefaultcombinelayers() const;
  inline void set_tschchartinfodefaultcombinelayers(bool value);

  // optional .TSD.FillArchive tschchartinfodefaultgridbackgroundfill = 14;
  inline bool has_tschchartinfodefaultgridbackgroundfill() const;
  inline void clear_tschchartinfodefaultgridbackgroundfill();
  static const int kTschchartinfodefaultgridbackgroundfillFieldNumber = 14;
  inline const ::TSD::FillArchive& tschchartinfodefaultgridbackgroundfill() const;
  inline ::TSD::FillArchive* mutable_tschchartinfodefaultgridbackgroundfill();
  inline ::TSD::FillArchive* release_tschchartinfodefaultgridbackgroundfill();
  inline void set_allocated_tschchartinfodefaultgridbackgroundfill(::TSD::FillArchive* tschchartinfodefaultgridbackgroundfill);

  // optional float tschchartinfodefaultgridbackgroundopacity = 15;
  inline bool has_tschchartinfodefaultgridbackgroundopacity() const;
  inline void clear_tschchartinfodefaultgridbackgroundopacity();
  static const int kTschchartinfodefaultgridbackgroundopacityFieldNumber = 15;
  inline float tschchartinfodefaultgridbackgroundopacity() const;
  inline void set_tschchartinfodefaultgridbackgroundopacity(float value);

  // optional float tschchartinfodefaultinterbargap = 16;
  inline bool has_tschchartinfodefaultinterbargap() const;
  inline void clear_tschchartinfodefaultinterbargap();
  static const int kTschchartinfodefaultinterbargapFieldNumber = 16;
  inline float tschchartinfodefaultinterbargap() const;
  inline void set_tschchartinfodefaultinterbargap(float value);

  // optional float tschchartinfodefaultintersetgap = 17;
  inline bool has_tschchartinfodefaultintersetgap() const;
  inline void clear_tschchartinfodefaultintersetgap();
  static const int kTschchartinfodefaultintersetgapFieldNumber = 17;
  inline float tschchartinfodefaultintersetgap() const;
  inline void set_tschchartinfodefaultintersetgap(float value);

  // optional bool tschchartinfodefaultshowborder = 18;
  inline bool has_tschchartinfodefaultshowborder() const;
  inline void clear_tschchartinfodefaultshowborder();
  static const int kTschchartinfodefaultshowborderFieldNumber = 18;
  inline bool tschchartinfodefaultshowborder() const;
  inline void set_tschchartinfodefaultshowborder(bool value);

  // optional .TSP.Color tschchartinfodefaulttitlecolor = 19;
  inline bool has_tschchartinfodefaulttitlecolor() const;
  inline void clear_tschchartinfodefaulttitlecolor();
  static const int kTschchartinfodefaulttitlecolorFieldNumber = 19;
  inline const ::TSP::Color& tschchartinfodefaulttitlecolor() const;
  inline ::TSP::Color* mutable_tschchartinfodefaulttitlecolor();
  inline ::TSP::Color* release_tschchartinfodefaulttitlecolor();
  inline void set_allocated_tschchartinfodefaulttitlecolor(::TSP::Color* tschchartinfodefaulttitlecolor);

  // optional int32 tschchartinfodefaulttitleparagraphstyleindex = 20;
  inline bool has_tschchartinfodefaulttitleparagraphstyleindex() const;
  inline void clear_tschchartinfodefaulttitleparagraphstyleindex();
  static const int kTschchartinfodefaulttitleparagraphstyleindexFieldNumber = 20;
  inline ::google::protobuf::int32 tschchartinfodefaulttitleparagraphstyleindex() const;
  inline void set_tschchartinfodefaulttitleparagraphstyleindex(::google::protobuf::int32 value);

  // optional int32 tschchartinfodefaultdatasetnameparagraphstyleindex = 21;
  inline bool has_tschchartinfodefaultdatasetnameparagraphstyleindex() const;
  inline void clear_tschchartinfodefaultdatasetnameparagraphstyleindex();
  static const int kTschchartinfodefaultdatasetnameparagraphstyleindexFieldNumber = 21;
  inline ::google::protobuf::int32 tschchartinfodefaultdatasetnameparagraphstyleindex() const;
  inline void set_tschchartinfodefaultdatasetnameparagraphstyleindex(::google::protobuf::int32 value);

  static const int kCurrentFieldNumber = 10000;
  static ::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartStyleArchive,
      ::google::protobuf::internal::MessageTypeTraits< ::TSCH::Generated::ChartStyleArchive >, 11, false >
    current;
  // @@protoc_insertion_point(class_scope:TSCH.Generated.ChartStyleArchive)
 private:
  inline void set_has_tschchartinfodefault3dchartopacity();
  inline void clear_has_tschchartinfodefault3dchartopacity();
  inline void set_has_tschchartinfoarea3dlightingpackage();
  inline void clear_has_tschchartinfoarea3dlightingpackage();
  inline void set_has_tschchartinfobar3dlightingpackage();
  inline void clear_has_tschchartinfobar3dlightingpackage();
  inline void set_has_tschchartinfocolumn3dlightingpackage();
  inline void clear_has_tschchartinfocolumn3dlightingpackage();
  inline void set_has_tschchartinfodefault3dlightingpackage();
  inline void clear_has_tschchartinfodefault3dlightingpackage();
  inline void set_has_tschchartinfoline3dlightingpackage();
  inline void clear_has_tschchartinfoline3dlightingpackage();
  inline void set_has_tschchartinfopie3dlightingpackage();
  inline void clear_has_tschchartinfopie3dlightingpackage();
  inline void set_has_tschchartinfodefaultbackgroundfill();
  inline void clear_has_tschchartinfodefaultbackgroundfill();
  inline void set_has_tschchartinfodefaultbackgroundstroke();
  inline void clear_has_tschchartinfodefaultbackgroundstroke();
  inline void set_has_tschchartinfodefaultborderopacity();
  inline void clear_has_tschchartinfodefaultborderopacity();
  inline void set_has_tschchartinfodefaultbordershadow();
  inline void clear_has_tschchartinfodefaultbordershadow();
  inline void set_has_tschchartinfodefaultborderstroke();
  inline void clear_has_tschchartinfodefaultborderstroke();
  inline void set_has_tschchartinfodefaultcombinelayers();
  inline void clear_has_tschchartinfodefaultcombinelayers();
  inline void set_has_tschchartinfodefaultgridbackgroundfill();
  inline void clear_has_tschchartinfodefaultgridbackgroundfill();
  inline void set_has_tschchartinfodefaultgridbackgroundopacity();
  inline void clear_has_tschchartinfodefaultgridbackgroundopacity();
  inline void set_has_tschchartinfodefaultinterbargap();
  inline void clear_has_tschchartinfodefaultinterbargap();
  inline void set_has_tschchartinfodefaultintersetgap();
  inline void clear_has_tschchartinfodefaultintersetgap();
  inline void set_has_tschchartinfodefaultshowborder();
  inline void clear_has_tschchartinfodefaultshowborder();
  inline void set_has_tschchartinfodefaulttitlecolor();
  inline void clear_has_tschchartinfodefaulttitlecolor();
  inline void set_has_tschchartinfodefaulttitleparagraphstyleindex();
  inline void clear_has_tschchartinfodefaulttitleparagraphstyleindex();
  inline void set_has_tschchartinfodefaultdatasetnameparagraphstyleindex();
  inline void clear_has_tschchartinfodefaultdatasetnameparagraphstyleindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::Chart3DLightingPackageArchive* tschchartinfoarea3dlightingpackage_;
  ::TSCH::Chart3DLightingPackageArchive* tschchartinfobar3dlightingpackage_;
  ::TSCH::Chart3DLightingPackageArchive* tschchartinfocolumn3dlightingpackage_;
  ::TSCH::Chart3DLightingPackageArchive* tschchartinfodefault3dlightingpackage_;
  float tschchartinfodefault3dchartopacity_;
  float tschchartinfodefaultborderopacity_;
  ::TSCH::Chart3DLightingPackageArchive* tschchartinfoline3dlightingpackage_;
  ::TSCH::Chart3DLightingPackageArchive* tschchartinfopie3dlightingpackage_;
  ::TSD::FillArchive* tschchartinfodefaultbackgroundfill_;
  ::TSD::StrokeArchive* tschchartinfodefaultbackgroundstroke_;
  ::TSD::ShadowArchive* tschchartinfodefaultbordershadow_;
  ::TSD::StrokeArchive* tschchartinfodefaultborderstroke_;
  ::TSD::FillArchive* tschchartinfodefaultgridbackgroundfill_;
  float tschchartinfodefaultgridbackgroundopacity_;
  bool tschchartinfodefaultcombinelayers_;
  bool tschchartinfodefaultshowborder_;
  float tschchartinfodefaultinterbargap_;
  float tschchartinfodefaultintersetgap_;
  ::TSP::Color* tschchartinfodefaulttitlecolor_;
  ::google::protobuf::int32 tschchartinfodefaulttitleparagraphstyleindex_;
  ::google::protobuf::int32 tschchartinfodefaultdatasetnameparagraphstyleindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHArchives_2eGEN_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eGEN_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eGEN_2eproto();

  void InitAsDefaultInstance();
  static ChartStyleArchive* default_instance_;
};
// -------------------------------------------------------------------

class ChartNonStyleArchive : public ::google::protobuf::Message {
 public:
  ChartNonStyleArchive();
  virtual ~ChartNonStyleArchive();

  ChartNonStyleArchive(const ChartNonStyleArchive& from);

  inline ChartNonStyleArchive& operator=(const ChartNonStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartNonStyleArchive& default_instance();

  void Swap(ChartNonStyleArchive* other);

  // implements Message ----------------------------------------------

  ChartNonStyleArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartNonStyleArchive& from);
  void MergeFrom(const ChartNonStyleArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tschchartinfodefault3dbarshape = 1;
  inline bool has_tschchartinfodefault3dbarshape() const;
  inline void clear_tschchartinfodefault3dbarshape();
  static const int kTschchartinfodefault3DbarshapeFieldNumber = 1;
  inline ::google::protobuf::int32 tschchartinfodefault3dbarshape() const;
  inline void set_tschchartinfodefault3dbarshape(::google::protobuf::int32 value);

  // optional bool tschchartinfodefault3dbeveledges = 2;
  inline bool has_tschchartinfodefault3dbeveledges() const;
  inline void clear_tschchartinfodefault3dbeveledges();
  static const int kTschchartinfodefault3DbeveledgesFieldNumber = 2;
  inline bool tschchartinfodefault3dbeveledges() const;
  inline void set_tschchartinfodefault3dbeveledges(bool value);

  // optional float tschchartinfodefault3dintersetdepthgap = 3;
  inline bool has_tschchartinfodefault3dintersetdepthgap() const;
  inline void clear_tschchartinfodefault3dintersetdepthgap();
  static const int kTschchartinfodefault3DintersetdepthgapFieldNumber = 3;
  inline float tschchartinfodefault3dintersetdepthgap() const;
  inline void set_tschchartinfodefault3dintersetdepthgap(float value);

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3drotation = 4;
  inline bool has_tschchartinfodefault3drotation() const;
  inline void clear_tschchartinfodefault3drotation();
  static const int kTschchartinfodefault3DrotationFieldNumber = 4;
  inline const ::TSCH::Chart3DVectorArchive& tschchartinfodefault3drotation() const;
  inline ::TSCH::Chart3DVectorArchive* mutable_tschchartinfodefault3drotation();
  inline ::TSCH::Chart3DVectorArchive* release_tschchartinfodefault3drotation();
  inline void set_allocated_tschchartinfodefault3drotation(::TSCH::Chart3DVectorArchive* tschchartinfodefault3drotation);

  // optional .TSCH.Chart3DVectorArchive tschchartinfoarea3dscale = 5;
  inline bool has_tschchartinfoarea3dscale() const;
  inline void clear_tschchartinfoarea3dscale();
  static const int kTschchartinfoarea3DscaleFieldNumber = 5;
  inline const ::TSCH::Chart3DVectorArchive& tschchartinfoarea3dscale() const;
  inline ::TSCH::Chart3DVectorArchive* mutable_tschchartinfoarea3dscale();
  inline ::TSCH::Chart3DVectorArchive* release_tschchartinfoarea3dscale();
  inline void set_allocated_tschchartinfoarea3dscale(::TSCH::Chart3DVectorArchive* tschchartinfoarea3dscale);

  // optional .TSCH.Chart3DVectorArchive tschchartinfobar3dscale = 6;
  inline bool has_tschchartinfobar3dscale() const;
  inline void clear_tschchartinfobar3dscale();
  static const int kTschchartinfobar3DscaleFieldNumber = 6;
  inline const ::TSCH::Chart3DVectorArchive& tschchartinfobar3dscale() const;
  inline ::TSCH::Chart3DVectorArchive* mutable_tschchartinfobar3dscale();
  inline ::TSCH::Chart3DVectorArchive* release_tschchartinfobar3dscale();
  inline void set_allocated_tschchartinfobar3dscale(::TSCH::Chart3DVectorArchive* tschchartinfobar3dscale);

  // optional .TSCH.Chart3DVectorArchive tschchartinfocolumn3dscale = 7;
  inline bool has_tschchartinfocolumn3dscale() const;
  inline void clear_tschchartinfocolumn3dscale();
  static const int kTschchartinfocolumn3DscaleFieldNumber = 7;
  inline const ::TSCH::Chart3DVectorArchive& tschchartinfocolumn3dscale() const;
  inline ::TSCH::Chart3DVectorArchive* mutable_tschchartinfocolumn3dscale();
  inline ::TSCH::Chart3DVectorArchive* release_tschchartinfocolumn3dscale();
  inline void set_allocated_tschchartinfocolumn3dscale(::TSCH::Chart3DVectorArchive* tschchartinfocolumn3dscale);

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dscale = 8;
  inline bool has_tschchartinfodefault3dscale() const;
  inline void clear_tschchartinfodefault3dscale();
  static const int kTschchartinfodefault3DscaleFieldNumber = 8;
  inline const ::TSCH::Chart3DVectorArchive& tschchartinfodefault3dscale() const;
  inline ::TSCH::Chart3DVectorArchive* mutable_tschchartinfodefault3dscale();
  inline ::TSCH::Chart3DVectorArchive* release_tschchartinfodefault3dscale();
  inline void set_allocated_tschchartinfodefault3dscale(::TSCH::Chart3DVectorArchive* tschchartinfodefault3dscale);

  // optional .TSCH.Chart3DVectorArchive tschchartinfoline3dscale = 9;
  inline bool has_tschchartinfoline3dscale() const;
  inline void clear_tschchartinfoline3dscale();
  static const int kTschchartinfoline3DscaleFieldNumber = 9;
  inline const ::TSCH::Chart3DVectorArchive& tschchartinfoline3dscale() const;
  inline ::TSCH::Chart3DVectorArchive* mutable_tschchartinfoline3dscale();
  inline ::TSCH::Chart3DVectorArchive* release_tschchartinfoline3dscale();
  inline void set_allocated_tschchartinfoline3dscale(::TSCH::Chart3DVectorArchive* tschchartinfoline3dscale);

  // optional .TSCH.Chart3DVectorArchive tschchartinfopie3dscale = 10;
  inline bool has_tschchartinfopie3dscale() const;
  inline void clear_tschchartinfopie3dscale();
  static const int kTschchartinfopie3DscaleFieldNumber = 10;
  inline const ::TSCH::Chart3DVectorArchive& tschchartinfopie3dscale() const;
  inline ::TSCH::Chart3DVectorArchive* mutable_tschchartinfopie3dscale();
  inline ::TSCH::Chart3DVectorArchive* release_tschchartinfopie3dscale();
  inline void set_allocated_tschchartinfopie3dscale(::TSCH::Chart3DVectorArchive* tschchartinfopie3dscale);

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dviewport = 11;
  inline bool has_tschchartinfodefault3dviewport() const;
  inline void clear_tschchartinfodefault3dviewport();
  static const int kTschchartinfodefault3DviewportFieldNumber = 11;
  inline const ::TSCH::Chart3DVectorArchive& tschchartinfodefault3dviewport() const;
  inline ::TSCH::Chart3DVectorArchive* mutable_tschchartinfodefault3dviewport();
  inline ::TSCH::Chart3DVectorArchive* release_tschchartinfodefault3dviewport();
  inline void set_allocated_tschchartinfodefault3dviewport(::TSCH::Chart3DVectorArchive* tschchartinfodefault3dviewport);

  // optional float tschchartinfodefaultpiestartangle = 19;
  inline bool has_tschchartinfodefaultpiestartangle() const;
  inline void clear_tschchartinfodefaultpiestartangle();
  static const int kTschchartinfodefaultpiestartangleFieldNumber = 19;
  inline float tschchartinfodefaultpiestartangle() const;
  inline void set_tschchartinfodefaultpiestartangle(float value);

  // optional bool tschchartinfodefaultshowlegend = 20;
  inline bool has_tschchartinfodefaultshowlegend() const;
  inline void clear_tschchartinfodefaultshowlegend();
  static const int kTschchartinfodefaultshowlegendFieldNumber = 20;
  inline bool tschchartinfodefaultshowlegend() const;
  inline void set_tschchartinfodefaultshowlegend(bool value);

  // optional bool tschchartinfodefaultshowtitle = 21;
  inline bool has_tschchartinfodefaultshowtitle() const;
  inline void clear_tschchartinfodefaultshowtitle();
  static const int kTschchartinfodefaultshowtitleFieldNumber = 21;
  inline bool tschchartinfodefaultshowtitle() const;
  inline void set_tschchartinfodefaultshowtitle(bool value);

  // optional bool tschchartinfodefaultskiphiddendata = 22;
  inline bool has_tschchartinfodefaultskiphiddendata() const;
  inline void clear_tschchartinfodefaultskiphiddendata();
  static const int kTschchartinfodefaultskiphiddendataFieldNumber = 22;
  inline bool tschchartinfodefaultskiphiddendata() const;
  inline void set_tschchartinfodefaultskiphiddendata(bool value);

  // optional string tschchartinfodefaulttitle = 23;
  inline bool has_tschchartinfodefaulttitle() const;
  inline void clear_tschchartinfodefaulttitle();
  static const int kTschchartinfodefaulttitleFieldNumber = 23;
  inline const ::std::string& tschchartinfodefaulttitle() const;
  inline void set_tschchartinfodefaulttitle(const ::std::string& value);
  inline void set_tschchartinfodefaulttitle(const char* value);
  inline void set_tschchartinfodefaulttitle(const char* value, size_t size);
  inline ::std::string* mutable_tschchartinfodefaulttitle();
  inline ::std::string* release_tschchartinfodefaulttitle();
  inline void set_allocated_tschchartinfodefaulttitle(::std::string* tschchartinfodefaulttitle);

  // optional int32 tschchartinfodefaultdatasetnamelocation = 24;
  inline bool has_tschchartinfodefaultdatasetnamelocation() const;
  inline void clear_tschchartinfodefaultdatasetnamelocation();
  static const int kTschchartinfodefaultdatasetnamelocationFieldNumber = 24;
  inline ::google::protobuf::int32 tschchartinfodefaultdatasetnamelocation() const;
  inline void set_tschchartinfodefaultdatasetnamelocation(::google::protobuf::int32 value);

  // optional int32 tschchartinfodefaultmultidatacontroltype = 25;
  inline bool has_tschchartinfodefaultmultidatacontroltype() const;
  inline void clear_tschchartinfodefaultmultidatacontroltype();
  static const int kTschchartinfodefaultmultidatacontroltypeFieldNumber = 25;
  inline ::google::protobuf::int32 tschchartinfodefaultmultidatacontroltype() const;
  inline void set_tschchartinfodefaultmultidatacontroltype(::google::protobuf::int32 value);

  static const int kCurrentFieldNumber = 10000;
  static ::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartNonStyleArchive,
      ::google::protobuf::internal::MessageTypeTraits< ::TSCH::Generated::ChartNonStyleArchive >, 11, false >
    current;
  // @@protoc_insertion_point(class_scope:TSCH.Generated.ChartNonStyleArchive)
 private:
  inline void set_has_tschchartinfodefault3dbarshape();
  inline void clear_has_tschchartinfodefault3dbarshape();
  inline void set_has_tschchartinfodefault3dbeveledges();
  inline void clear_has_tschchartinfodefault3dbeveledges();
  inline void set_has_tschchartinfodefault3dintersetdepthgap();
  inline void clear_has_tschchartinfodefault3dintersetdepthgap();
  inline void set_has_tschchartinfodefault3drotation();
  inline void clear_has_tschchartinfodefault3drotation();
  inline void set_has_tschchartinfoarea3dscale();
  inline void clear_has_tschchartinfoarea3dscale();
  inline void set_has_tschchartinfobar3dscale();
  inline void clear_has_tschchartinfobar3dscale();
  inline void set_has_tschchartinfocolumn3dscale();
  inline void clear_has_tschchartinfocolumn3dscale();
  inline void set_has_tschchartinfodefault3dscale();
  inline void clear_has_tschchartinfodefault3dscale();
  inline void set_has_tschchartinfoline3dscale();
  inline void clear_has_tschchartinfoline3dscale();
  inline void set_has_tschchartinfopie3dscale();
  inline void clear_has_tschchartinfopie3dscale();
  inline void set_has_tschchartinfodefault3dviewport();
  inline void clear_has_tschchartinfodefault3dviewport();
  inline void set_has_tschchartinfodefaultpiestartangle();
  inline void clear_has_tschchartinfodefaultpiestartangle();
  inline void set_has_tschchartinfodefaultshowlegend();
  inline void clear_has_tschchartinfodefaultshowlegend();
  inline void set_has_tschchartinfodefaultshowtitle();
  inline void clear_has_tschchartinfodefaultshowtitle();
  inline void set_has_tschchartinfodefaultskiphiddendata();
  inline void clear_has_tschchartinfodefaultskiphiddendata();
  inline void set_has_tschchartinfodefaulttitle();
  inline void clear_has_tschchartinfodefaulttitle();
  inline void set_has_tschchartinfodefaultdatasetnamelocation();
  inline void clear_has_tschchartinfodefaultdatasetnamelocation();
  inline void set_has_tschchartinfodefaultmultidatacontroltype();
  inline void clear_has_tschchartinfodefaultmultidatacontroltype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tschchartinfodefault3dbarshape_;
  float tschchartinfodefault3dintersetdepthgap_;
  ::TSCH::Chart3DVectorArchive* tschchartinfodefault3drotation_;
  ::TSCH::Chart3DVectorArchive* tschchartinfoarea3dscale_;
  ::TSCH::Chart3DVectorArchive* tschchartinfobar3dscale_;
  ::TSCH::Chart3DVectorArchive* tschchartinfocolumn3dscale_;
  ::TSCH::Chart3DVectorArchive* tschchartinfodefault3dscale_;
  ::TSCH::Chart3DVectorArchive* tschchartinfoline3dscale_;
  ::TSCH::Chart3DVectorArchive* tschchartinfopie3dscale_;
  ::TSCH::Chart3DVectorArchive* tschchartinfodefault3dviewport_;
  bool tschchartinfodefault3dbeveledges_;
  bool tschchartinfodefaultshowlegend_;
  bool tschchartinfodefaultshowtitle_;
  bool tschchartinfodefaultskiphiddendata_;
  float tschchartinfodefaultpiestartangle_;
  ::std::string* tschchartinfodefaulttitle_;
  ::google::protobuf::int32 tschchartinfodefaultdatasetnamelocation_;
  ::google::protobuf::int32 tschchartinfodefaultmultidatacontroltype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHArchives_2eGEN_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eGEN_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eGEN_2eproto();

  void InitAsDefaultInstance();
  static ChartNonStyleArchive* default_instance_;
};
// -------------------------------------------------------------------

class LegendStyleArchive : public ::google::protobuf::Message {
 public:
  LegendStyleArchive();
  virtual ~LegendStyleArchive();

  LegendStyleArchive(const LegendStyleArchive& from);

  inline LegendStyleArchive& operator=(const LegendStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LegendStyleArchive& default_instance();

  void Swap(LegendStyleArchive* other);

  // implements Message ----------------------------------------------

  LegendStyleArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LegendStyleArchive& from);
  void MergeFrom(const LegendStyleArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TSD.FillArchive tschlegendmodeldefaultfill = 1;
  inline bool has_tschlegendmodeldefaultfill() const;
  inline void clear_tschlegendmodeldefaultfill();
  static const int kTschlegendmodeldefaultfillFieldNumber = 1;
  inline const ::TSD::FillArchive& tschlegendmodeldefaultfill() const;
  inline ::TSD::FillArchive* mutable_tschlegendmodeldefaultfill();
  inline ::TSD::FillArchive* release_tschlegendmodeldefaultfill();
  inline void set_allocated_tschlegendmodeldefaultfill(::TSD::FillArchive* tschlegendmodeldefaultfill);

  // optional int32 tschlegendmodeldefaultlabelparagraphstyleindex = 2;
  inline bool has_tschlegendmodeldefaultlabelparagraphstyleindex() const;
  inline void clear_tschlegendmodeldefaultlabelparagraphstyleindex();
  static const int kTschlegendmodeldefaultlabelparagraphstyleindexFieldNumber = 2;
  inline ::google::protobuf::int32 tschlegendmodeldefaultlabelparagraphstyleindex() const;
  inline void set_tschlegendmodeldefaultlabelparagraphstyleindex(::google::protobuf::int32 value);

  // optional float tschlegendmodeldefaultopacity = 3;
  inline bool has_tschlegendmodeldefaultopacity() const;
  inline void clear_tschlegendmodeldefaultopacity();
  static const int kTschlegendmodeldefaultopacityFieldNumber = 3;
  inline float tschlegendmodeldefaultopacity() const;
  inline void set_tschlegendmodeldefaultopacity(float value);

  // optional .TSD.ShadowArchive tschlegendmodeldefaultshadow = 4;
  inline bool has_tschlegendmodeldefaultshadow() const;
  inline void clear_tschlegendmodeldefaultshadow();
  static const int kTschlegendmodeldefaultshadowFieldNumber = 4;
  inline const ::TSD::ShadowArchive& tschlegendmodeldefaultshadow() const;
  inline ::TSD::ShadowArchive* mutable_tschlegendmodeldefaultshadow();
  inline ::TSD::ShadowArchive* release_tschlegendmodeldefaultshadow();
  inline void set_allocated_tschlegendmodeldefaultshadow(::TSD::ShadowArchive* tschlegendmodeldefaultshadow);

  // optional .TSD.StrokeArchive tschlegendmodeldefaultstroke = 5;
  inline bool has_tschlegendmodeldefaultstroke() const;
  inline void clear_tschlegendmodeldefaultstroke();
  static const int kTschlegendmodeldefaultstrokeFieldNumber = 5;
  inline const ::TSD::StrokeArchive& tschlegendmodeldefaultstroke() const;
  inline ::TSD::StrokeArchive* mutable_tschlegendmodeldefaultstroke();
  inline ::TSD::StrokeArchive* release_tschlegendmodeldefaultstroke();
  inline void set_allocated_tschlegendmodeldefaultstroke(::TSD::StrokeArchive* tschlegendmodeldefaultstroke);

  static const int kCurrentFieldNumber = 10000;
  static ::google::protobuf::internal::ExtensionIdentifier< ::TSCH::LegendStyleArchive,
      ::google::protobuf::internal::MessageTypeTraits< ::TSCH::Generated::LegendStyleArchive >, 11, false >
    current;
  // @@protoc_insertion_point(class_scope:TSCH.Generated.LegendStyleArchive)
 private:
  inline void set_has_tschlegendmodeldefaultfill();
  inline void clear_has_tschlegendmodeldefaultfill();
  inline void set_has_tschlegendmodeldefaultlabelparagraphstyleindex();
  inline void clear_has_tschlegendmodeldefaultlabelparagraphstyleindex();
  inline void set_has_tschlegendmodeldefaultopacity();
  inline void clear_has_tschlegendmodeldefaultopacity();
  inline void set_has_tschlegendmodeldefaultshadow();
  inline void clear_has_tschlegendmodeldefaultshadow();
  inline void set_has_tschlegendmodeldefaultstroke();
  inline void clear_has_tschlegendmodeldefaultstroke();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSD::FillArchive* tschlegendmodeldefaultfill_;
  ::google::protobuf::int32 tschlegendmodeldefaultlabelparagraphstyleindex_;
  float tschlegendmodeldefaultopacity_;
  ::TSD::ShadowArchive* tschlegendmodeldefaultshadow_;
  ::TSD::StrokeArchive* tschlegendmodeldefaultstroke_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHArchives_2eGEN_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eGEN_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eGEN_2eproto();

  void InitAsDefaultInstance();
  static LegendStyleArchive* default_instance_;
};
// -------------------------------------------------------------------

class LegendNonStyleArchive : public ::google::protobuf::Message {
 public:
  LegendNonStyleArchive();
  virtual ~LegendNonStyleArchive();

  LegendNonStyleArchive(const LegendNonStyleArchive& from);

  inline LegendNonStyleArchive& operator=(const LegendNonStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LegendNonStyleArchive& default_instance();

  void Swap(LegendNonStyleArchive* other);

  // implements Message ----------------------------------------------

  LegendNonStyleArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LegendNonStyleArchive& from);
  void MergeFrom(const LegendNonStyleArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  static const int kCurrentFieldNumber = 10000;
  static ::google::protobuf::internal::ExtensionIdentifier< ::TSCH::LegendNonStyleArchive,
      ::google::protobuf::internal::MessageTypeTraits< ::TSCH::Generated::LegendNonStyleArchive >, 11, false >
    current;
  // @@protoc_insertion_point(class_scope:TSCH.Generated.LegendNonStyleArchive)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_TSCHArchives_2eGEN_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eGEN_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eGEN_2eproto();

  void InitAsDefaultInstance();
  static LegendNonStyleArchive* default_instance_;
};
// -------------------------------------------------------------------

class ChartAxisStyleArchive : public ::google::protobuf::Message {
 public:
  ChartAxisStyleArchive();
  virtual ~ChartAxisStyleArchive();

  ChartAxisStyleArchive(const ChartAxisStyleArchive& from);

  inline ChartAxisStyleArchive& operator=(const ChartAxisStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartAxisStyleArchive& default_instance();

  void Swap(ChartAxisStyleArchive* other);

  // implements Message ----------------------------------------------

  ChartAxisStyleArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartAxisStyleArchive& from);
  void MergeFrom(const ChartAxisStyleArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float tschchartaxiscategory3dgridlineopacity = 1;
  inline bool has_tschchartaxiscategory3dgridlineopacity() const;
  inline void clear_tschchartaxiscategory3dgridlineopacity();
  static const int kTschchartaxiscategory3DgridlineopacityFieldNumber = 1;
  inline float tschchartaxiscategory3dgridlineopacity() const;
  inline void set_tschchartaxiscategory3dgridlineopacity(float value);

  // optional float tschchartaxisvalue3dgridlineopacity = 2;
  inline bool has_tschchartaxisvalue3dgridlineopacity() const;
  inline void clear_tschchartaxisvalue3dgridlineopacity();
  static const int kTschchartaxisvalue3DgridlineopacityFieldNumber = 2;
  inline float tschchartaxisvalue3dgridlineopacity() const;
  inline void set_tschchartaxisvalue3dgridlineopacity(float value);

  // optional .TSD.StrokeArchive tschchartaxiscategory3dgridlinestroke = 3;
  inline bool has_tschchartaxiscategory3dgridlinestroke() const;
  inline void clear_tschchartaxiscategory3dgridlinestroke();
  static const int kTschchartaxiscategory3DgridlinestrokeFieldNumber = 3;
  inline const ::TSD::StrokeArchive& tschchartaxiscategory3dgridlinestroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartaxiscategory3dgridlinestroke();
  inline ::TSD::StrokeArchive* release_tschchartaxiscategory3dgridlinestroke();
  inline void set_allocated_tschchartaxiscategory3dgridlinestroke(::TSD::StrokeArchive* tschchartaxiscategory3dgridlinestroke);

  // optional .TSD.StrokeArchive tschchartaxisvalue3dgridlinestroke = 4;
  inline bool has_tschchartaxisvalue3dgridlinestroke() const;
  inline void clear_tschchartaxisvalue3dgridlinestroke();
  static const int kTschchartaxisvalue3DgridlinestrokeFieldNumber = 4;
  inline const ::TSD::StrokeArchive& tschchartaxisvalue3dgridlinestroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartaxisvalue3dgridlinestroke();
  inline ::TSD::StrokeArchive* release_tschchartaxisvalue3dgridlinestroke();
  inline void set_allocated_tschchartaxisvalue3dgridlinestroke(::TSD::StrokeArchive* tschchartaxisvalue3dgridlinestroke);

  // optional int32 tschchartaxiscategoryhorizontalspacing = 5;
  inline bool has_tschchartaxiscategoryhorizontalspacing() const;
  inline void clear_tschchartaxiscategoryhorizontalspacing();
  static const int kTschchartaxiscategoryhorizontalspacingFieldNumber = 5;
  inline ::google::protobuf::int32 tschchartaxiscategoryhorizontalspacing() const;
  inline void set_tschchartaxiscategoryhorizontalspacing(::google::protobuf::int32 value);

  // optional int32 tschchartaxiscategorylabelparagraphstyleindex = 6;
  inline bool has_tschchartaxiscategorylabelparagraphstyleindex() const;
  inline void clear_tschchartaxiscategorylabelparagraphstyleindex();
  static const int kTschchartaxiscategorylabelparagraphstyleindexFieldNumber = 6;
  inline ::google::protobuf::int32 tschchartaxiscategorylabelparagraphstyleindex() const;
  inline void set_tschchartaxiscategorylabelparagraphstyleindex(::google::protobuf::int32 value);

  // optional int32 tschchartaxisdefaultlabelparagraphstyleindex = 7;
  inline bool has_tschchartaxisdefaultlabelparagraphstyleindex() const;
  inline void clear_tschchartaxisdefaultlabelparagraphstyleindex();
  static const int kTschchartaxisdefaultlabelparagraphstyleindexFieldNumber = 7;
  inline ::google::protobuf::int32 tschchartaxisdefaultlabelparagraphstyleindex() const;
  inline void set_tschchartaxisdefaultlabelparagraphstyleindex(::google::protobuf::int32 value);

  // optional int32 tschchartaxisvaluelabelparagraphstyleindex = 8;
  inline bool has_tschchartaxisvaluelabelparagraphstyleindex() const;
  inline void clear_tschchartaxisvaluelabelparagraphstyleindex();
  static const int kTschchartaxisvaluelabelparagraphstyleindexFieldNumber = 8;
  inline ::google::protobuf::int32 tschchartaxisvaluelabelparagraphstyleindex() const;
  inline void set_tschchartaxisvaluelabelparagraphstyleindex(::google::protobuf::int32 value);

  // optional float tschchartaxiscategorylabelsorientation = 9;
  inline bool has_tschchartaxiscategorylabelsorientation() const;
  inline void clear_tschchartaxiscategorylabelsorientation();
  static const int kTschchartaxiscategorylabelsorientationFieldNumber = 9;
  inline float tschchartaxiscategorylabelsorientation() const;
  inline void set_tschchartaxiscategorylabelsorientation(float value);

  // optional float tschchartaxisdefaultlabelsorientation = 10;
  inline bool has_tschchartaxisdefaultlabelsorientation() const;
  inline void clear_tschchartaxisdefaultlabelsorientation();
  static const int kTschchartaxisdefaultlabelsorientationFieldNumber = 10;
  inline float tschchartaxisdefaultlabelsorientation() const;
  inline void set_tschchartaxisdefaultlabelsorientation(float value);

  // optional float tschchartaxisvaluelabelsorientation = 11;
  inline bool has_tschchartaxisvaluelabelsorientation() const;
  inline void clear_tschchartaxisvaluelabelsorientation();
  static const int kTschchartaxisvaluelabelsorientationFieldNumber = 11;
  inline float tschchartaxisvaluelabelsorientation() const;
  inline void set_tschchartaxisvaluelabelsorientation(float value);

  // optional float tschchartaxiscategorymajorgridlineopacity = 12;
  inline bool has_tschchartaxiscategorymajorgridlineopacity() const;
  inline void clear_tschchartaxiscategorymajorgridlineopacity();
  static const int kTschchartaxiscategorymajorgridlineopacityFieldNumber = 12;
  inline float tschchartaxiscategorymajorgridlineopacity() const;
  inline void set_tschchartaxiscategorymajorgridlineopacity(float value);

  // optional float tschchartaxisvaluemajorgridlineopacity = 13;
  inline bool has_tschchartaxisvaluemajorgridlineopacity() const;
  inline void clear_tschchartaxisvaluemajorgridlineopacity();
  static const int kTschchartaxisvaluemajorgridlineopacityFieldNumber = 13;
  inline float tschchartaxisvaluemajorgridlineopacity() const;
  inline void set_tschchartaxisvaluemajorgridlineopacity(float value);

  // optional .TSD.ShadowArchive tschchartaxiscategorymajorgridlineshadow = 14;
  inline bool has_tschchartaxiscategorymajorgridlineshadow() const;
  inline void clear_tschchartaxiscategorymajorgridlineshadow();
  static const int kTschchartaxiscategorymajorgridlineshadowFieldNumber = 14;
  inline const ::TSD::ShadowArchive& tschchartaxiscategorymajorgridlineshadow() const;
  inline ::TSD::ShadowArchive* mutable_tschchartaxiscategorymajorgridlineshadow();
  inline ::TSD::ShadowArchive* release_tschchartaxiscategorymajorgridlineshadow();
  inline void set_allocated_tschchartaxiscategorymajorgridlineshadow(::TSD::ShadowArchive* tschchartaxiscategorymajorgridlineshadow);

  // optional .TSD.ShadowArchive tschchartaxisvaluemajorgridlineshadow = 15;
  inline bool has_tschchartaxisvaluemajorgridlineshadow() const;
  inline void clear_tschchartaxisvaluemajorgridlineshadow();
  static const int kTschchartaxisvaluemajorgridlineshadowFieldNumber = 15;
  inline const ::TSD::ShadowArchive& tschchartaxisvaluemajorgridlineshadow() const;
  inline ::TSD::ShadowArchive* mutable_tschchartaxisvaluemajorgridlineshadow();
  inline ::TSD::ShadowArchive* release_tschchartaxisvaluemajorgridlineshadow();
  inline void set_allocated_tschchartaxisvaluemajorgridlineshadow(::TSD::ShadowArchive* tschchartaxisvaluemajorgridlineshadow);

  // optional .TSD.StrokeArchive tschchartaxiscategorymajorgridlinestroke = 16;
  inline bool has_tschchartaxiscategorymajorgridlinestroke() const;
  inline void clear_tschchartaxiscategorymajorgridlinestroke();
  static const int kTschchartaxiscategorymajorgridlinestrokeFieldNumber = 16;
  inline const ::TSD::StrokeArchive& tschchartaxiscategorymajorgridlinestroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartaxiscategorymajorgridlinestroke();
  inline ::TSD::StrokeArchive* release_tschchartaxiscategorymajorgridlinestroke();
  inline void set_allocated_tschchartaxiscategorymajorgridlinestroke(::TSD::StrokeArchive* tschchartaxiscategorymajorgridlinestroke);

  // optional .TSD.StrokeArchive tschchartaxisvaluemajorgridlinestroke = 17;
  inline bool has_tschchartaxisvaluemajorgridlinestroke() const;
  inline void clear_tschchartaxisvaluemajorgridlinestroke();
  static const int kTschchartaxisvaluemajorgridlinestrokeFieldNumber = 17;
  inline const ::TSD::StrokeArchive& tschchartaxisvaluemajorgridlinestroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartaxisvaluemajorgridlinestroke();
  inline ::TSD::StrokeArchive* release_tschchartaxisvaluemajorgridlinestroke();
  inline void set_allocated_tschchartaxisvaluemajorgridlinestroke(::TSD::StrokeArchive* tschchartaxisvaluemajorgridlinestroke);

  // optional float tschchartaxiscategoryminorgridlineopacity = 18;
  inline bool has_tschchartaxiscategoryminorgridlineopacity() const;
  inline void clear_tschchartaxiscategoryminorgridlineopacity();
  static const int kTschchartaxiscategoryminorgridlineopacityFieldNumber = 18;
  inline float tschchartaxiscategoryminorgridlineopacity() const;
  inline void set_tschchartaxiscategoryminorgridlineopacity(float value);

  // optional float tschchartaxisvalueminorgridlineopacity = 19;
  inline bool has_tschchartaxisvalueminorgridlineopacity() const;
  inline void clear_tschchartaxisvalueminorgridlineopacity();
  static const int kTschchartaxisvalueminorgridlineopacityFieldNumber = 19;
  inline float tschchartaxisvalueminorgridlineopacity() const;
  inline void set_tschchartaxisvalueminorgridlineopacity(float value);

  // optional .TSD.ShadowArchive tschchartaxiscategoryminorgridlineshadow = 20;
  inline bool has_tschchartaxiscategoryminorgridlineshadow() const;
  inline void clear_tschchartaxiscategoryminorgridlineshadow();
  static const int kTschchartaxiscategoryminorgridlineshadowFieldNumber = 20;
  inline const ::TSD::ShadowArchive& tschchartaxiscategoryminorgridlineshadow() const;
  inline ::TSD::ShadowArchive* mutable_tschchartaxiscategoryminorgridlineshadow();
  inline ::TSD::ShadowArchive* release_tschchartaxiscategoryminorgridlineshadow();
  inline void set_allocated_tschchartaxiscategoryminorgridlineshadow(::TSD::ShadowArchive* tschchartaxiscategoryminorgridlineshadow);

  // optional .TSD.ShadowArchive tschchartaxisvalueminorgridlineshadow = 21;
  inline bool has_tschchartaxisvalueminorgridlineshadow() const;
  inline void clear_tschchartaxisvalueminorgridlineshadow();
  static const int kTschchartaxisvalueminorgridlineshadowFieldNumber = 21;
  inline const ::TSD::ShadowArchive& tschchartaxisvalueminorgridlineshadow() const;
  inline ::TSD::ShadowArchive* mutable_tschchartaxisvalueminorgridlineshadow();
  inline ::TSD::ShadowArchive* release_tschchartaxisvalueminorgridlineshadow();
  inline void set_allocated_tschchartaxisvalueminorgridlineshadow(::TSD::ShadowArchive* tschchartaxisvalueminorgridlineshadow);

  // optional .TSD.StrokeArchive tschchartaxiscategoryminorgridlinestroke = 22;
  inline bool has_tschchartaxiscategoryminorgridlinestroke() const;
  inline void clear_tschchartaxiscategoryminorgridlinestroke();
  static const int kTschchartaxiscategoryminorgridlinestrokeFieldNumber = 22;
  inline const ::TSD::StrokeArchive& tschchartaxiscategoryminorgridlinestroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartaxiscategoryminorgridlinestroke();
  inline ::TSD::StrokeArchive* release_tschchartaxiscategoryminorgridlinestroke();
  inline void set_allocated_tschchartaxiscategoryminorgridlinestroke(::TSD::StrokeArchive* tschchartaxiscategoryminorgridlinestroke);

  // optional .TSD.StrokeArchive tschchartaxisvalueminorgridlinestroke = 23;
  inline bool has_tschchartaxisvalueminorgridlinestroke() const;
  inline void clear_tschchartaxisvalueminorgridlinestroke();
  static const int kTschchartaxisvalueminorgridlinestrokeFieldNumber = 23;
  inline const ::TSD::StrokeArchive& tschchartaxisvalueminorgridlinestroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartaxisvalueminorgridlinestroke();
  inline ::TSD::StrokeArchive* release_tschchartaxisvalueminorgridlinestroke();
  inline void set_allocated_tschchartaxisvalueminorgridlinestroke(::TSD::StrokeArchive* tschchartaxisvalueminorgridlinestroke);

  // optional bool tschchartaxiscategoryshowaxis = 24;
  inline bool has_tschchartaxiscategoryshowaxis() const;
  inline void clear_tschchartaxiscategoryshowaxis();
  static const int kTschchartaxiscategoryshowaxisFieldNumber = 24;
  inline bool tschchartaxiscategoryshowaxis() const;
  inline void set_tschchartaxiscategoryshowaxis(bool value);

  // optional bool tschchartaxisvalueshowaxis = 25;
  inline bool has_tschchartaxisvalueshowaxis() const;
  inline void clear_tschchartaxisvalueshowaxis();
  static const int kTschchartaxisvalueshowaxisFieldNumber = 25;
  inline bool tschchartaxisvalueshowaxis() const;
  inline void set_tschchartaxisvalueshowaxis(bool value);

  // optional bool tschchartaxiscategoryshowlastlabel = 26;
  inline bool has_tschchartaxiscategoryshowlastlabel() const;
  inline void clear_tschchartaxiscategoryshowlastlabel();
  static const int kTschchartaxiscategoryshowlastlabelFieldNumber = 26;
  inline bool tschchartaxiscategoryshowlastlabel() const;
  inline void set_tschchartaxiscategoryshowlastlabel(bool value);

  // optional bool tschchartaxiscategoryshowmajorgridlines = 27;
  inline bool has_tschchartaxiscategoryshowmajorgridlines() const;
  inline void clear_tschchartaxiscategoryshowmajorgridlines();
  static const int kTschchartaxiscategoryshowmajorgridlinesFieldNumber = 27;
  inline bool tschchartaxiscategoryshowmajorgridlines() const;
  inline void set_tschchartaxiscategoryshowmajorgridlines(bool value);

  // optional bool tschchartaxisvalueshowmajorgridlines = 28;
  inline bool has_tschchartaxisvalueshowmajorgridlines() const;
  inline void clear_tschchartaxisvalueshowmajorgridlines();
  static const int kTschchartaxisvalueshowmajorgridlinesFieldNumber = 28;
  inline bool tschchartaxisvalueshowmajorgridlines() const;
  inline void set_tschchartaxisvalueshowmajorgridlines(bool value);

  // optional bool tschchartaxiscategoryshowmajortickmarks = 29;
  inline bool has_tschchartaxiscategoryshowmajortickmarks() const;
  inline void clear_tschchartaxiscategoryshowmajortickmarks();
  static const int kTschchartaxiscategoryshowmajortickmarksFieldNumber = 29;
  inline bool tschchartaxiscategoryshowmajortickmarks() const;
  inline void set_tschchartaxiscategoryshowmajortickmarks(bool value);

  // optional bool tschchartaxisvalueshowmajortickmarks = 30;
  inline bool has_tschchartaxisvalueshowmajortickmarks() const;
  inline void clear_tschchartaxisvalueshowmajortickmarks();
  static const int kTschchartaxisvalueshowmajortickmarksFieldNumber = 30;
  inline bool tschchartaxisvalueshowmajortickmarks() const;
  inline void set_tschchartaxisvalueshowmajortickmarks(bool value);

  // optional bool tschchartaxisvalueshowminimumlabel = 31;
  inline bool has_tschchartaxisvalueshowminimumlabel() const;
  inline void clear_tschchartaxisvalueshowminimumlabel();
  static const int kTschchartaxisvalueshowminimumlabelFieldNumber = 31;
  inline bool tschchartaxisvalueshowminimumlabel() const;
  inline void set_tschchartaxisvalueshowminimumlabel(bool value);

  // optional bool tschchartaxiscategoryshowminorgridlines = 32;
  inline bool has_tschchartaxiscategoryshowminorgridlines() const;
  inline void clear_tschchartaxiscategoryshowminorgridlines();
  static const int kTschchartaxiscategoryshowminorgridlinesFieldNumber = 32;
  inline bool tschchartaxiscategoryshowminorgridlines() const;
  inline void set_tschchartaxiscategoryshowminorgridlines(bool value);

  // optional bool tschchartaxisvalueshowminorgridlines = 33;
  inline bool has_tschchartaxisvalueshowminorgridlines() const;
  inline void clear_tschchartaxisvalueshowminorgridlines();
  static const int kTschchartaxisvalueshowminorgridlinesFieldNumber = 33;
  inline bool tschchartaxisvalueshowminorgridlines() const;
  inline void set_tschchartaxisvalueshowminorgridlines(bool value);

  // optional bool tschchartaxiscategoryshowminortickmarks = 34;
  inline bool has_tschchartaxiscategoryshowminortickmarks() const;
  inline void clear_tschchartaxiscategoryshowminortickmarks();
  static const int kTschchartaxiscategoryshowminortickmarksFieldNumber = 34;
  inline bool tschchartaxiscategoryshowminortickmarks() const;
  inline void set_tschchartaxiscategoryshowminortickmarks(bool value);

  // optional bool tschchartaxisvalueshowminortickmarks = 35;
  inline bool has_tschchartaxisvalueshowminortickmarks() const;
  inline void clear_tschchartaxisvalueshowminortickmarks();
  static const int kTschchartaxisvalueshowminortickmarksFieldNumber = 35;
  inline bool tschchartaxisvalueshowminortickmarks() const;
  inline void set_tschchartaxisvalueshowminortickmarks(bool value);

  // optional int32 tschchartaxiscategorytickmarklocation = 36;
  inline bool has_tschchartaxiscategorytickmarklocation() const;
  inline void clear_tschchartaxiscategorytickmarklocation();
  static const int kTschchartaxiscategorytickmarklocationFieldNumber = 36;
  inline ::google::protobuf::int32 tschchartaxiscategorytickmarklocation() const;
  inline void set_tschchartaxiscategorytickmarklocation(::google::protobuf::int32 value);

  // optional int32 tschchartaxisvaluetickmarklocation = 37;
  inline bool has_tschchartaxisvaluetickmarklocation() const;
  inline void clear_tschchartaxisvaluetickmarklocation();
  static const int kTschchartaxisvaluetickmarklocationFieldNumber = 37;
  inline ::google::protobuf::int32 tschchartaxisvaluetickmarklocation() const;
  inline void set_tschchartaxisvaluetickmarklocation(::google::protobuf::int32 value);

  // optional int32 tschchartaxiscategorytitleparagraphstyleindex = 38;
  inline bool has_tschchartaxiscategorytitleparagraphstyleindex() const;
  inline void clear_tschchartaxiscategorytitleparagraphstyleindex();
  static const int kTschchartaxiscategorytitleparagraphstyleindexFieldNumber = 38;
  inline ::google::protobuf::int32 tschchartaxiscategorytitleparagraphstyleindex() const;
  inline void set_tschchartaxiscategorytitleparagraphstyleindex(::google::protobuf::int32 value);

  // optional int32 tschchartaxisdefaulttitleparagraphstyleindex = 39;
  inline bool has_tschchartaxisdefaulttitleparagraphstyleindex() const;
  inline void clear_tschchartaxisdefaulttitleparagraphstyleindex();
  static const int kTschchartaxisdefaulttitleparagraphstyleindexFieldNumber = 39;
  inline ::google::protobuf::int32 tschchartaxisdefaulttitleparagraphstyleindex() const;
  inline void set_tschchartaxisdefaulttitleparagraphstyleindex(::google::protobuf::int32 value);

  // optional int32 tschchartaxisvaluetitleparagraphstyleindex = 40;
  inline bool has_tschchartaxisvaluetitleparagraphstyleindex() const;
  inline void clear_tschchartaxisvaluetitleparagraphstyleindex();
  static const int kTschchartaxisvaluetitleparagraphstyleindexFieldNumber = 40;
  inline ::google::protobuf::int32 tschchartaxisvaluetitleparagraphstyleindex() const;
  inline void set_tschchartaxisvaluetitleparagraphstyleindex(::google::protobuf::int32 value);

  // optional int32 tschchartaxiscategoryverticalspacing = 41;
  inline bool has_tschchartaxiscategoryverticalspacing() const;
  inline void clear_tschchartaxiscategoryverticalspacing();
  static const int kTschchartaxiscategoryverticalspacingFieldNumber = 41;
  inline ::google::protobuf::int32 tschchartaxiscategoryverticalspacing() const;
  inline void set_tschchartaxiscategoryverticalspacing(::google::protobuf::int32 value);

  static const int kCurrentFieldNumber = 10000;
  static ::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartAxisStyleArchive,
      ::google::protobuf::internal::MessageTypeTraits< ::TSCH::Generated::ChartAxisStyleArchive >, 11, false >
    current;
  // @@protoc_insertion_point(class_scope:TSCH.Generated.ChartAxisStyleArchive)
 private:
  inline void set_has_tschchartaxiscategory3dgridlineopacity();
  inline void clear_has_tschchartaxiscategory3dgridlineopacity();
  inline void set_has_tschchartaxisvalue3dgridlineopacity();
  inline void clear_has_tschchartaxisvalue3dgridlineopacity();
  inline void set_has_tschchartaxiscategory3dgridlinestroke();
  inline void clear_has_tschchartaxiscategory3dgridlinestroke();
  inline void set_has_tschchartaxisvalue3dgridlinestroke();
  inline void clear_has_tschchartaxisvalue3dgridlinestroke();
  inline void set_has_tschchartaxiscategoryhorizontalspacing();
  inline void clear_has_tschchartaxiscategoryhorizontalspacing();
  inline void set_has_tschchartaxiscategorylabelparagraphstyleindex();
  inline void clear_has_tschchartaxiscategorylabelparagraphstyleindex();
  inline void set_has_tschchartaxisdefaultlabelparagraphstyleindex();
  inline void clear_has_tschchartaxisdefaultlabelparagraphstyleindex();
  inline void set_has_tschchartaxisvaluelabelparagraphstyleindex();
  inline void clear_has_tschchartaxisvaluelabelparagraphstyleindex();
  inline void set_has_tschchartaxiscategorylabelsorientation();
  inline void clear_has_tschchartaxiscategorylabelsorientation();
  inline void set_has_tschchartaxisdefaultlabelsorientation();
  inline void clear_has_tschchartaxisdefaultlabelsorientation();
  inline void set_has_tschchartaxisvaluelabelsorientation();
  inline void clear_has_tschchartaxisvaluelabelsorientation();
  inline void set_has_tschchartaxiscategorymajorgridlineopacity();
  inline void clear_has_tschchartaxiscategorymajorgridlineopacity();
  inline void set_has_tschchartaxisvaluemajorgridlineopacity();
  inline void clear_has_tschchartaxisvaluemajorgridlineopacity();
  inline void set_has_tschchartaxiscategorymajorgridlineshadow();
  inline void clear_has_tschchartaxiscategorymajorgridlineshadow();
  inline void set_has_tschchartaxisvaluemajorgridlineshadow();
  inline void clear_has_tschchartaxisvaluemajorgridlineshadow();
  inline void set_has_tschchartaxiscategorymajorgridlinestroke();
  inline void clear_has_tschchartaxiscategorymajorgridlinestroke();
  inline void set_has_tschchartaxisvaluemajorgridlinestroke();
  inline void clear_has_tschchartaxisvaluemajorgridlinestroke();
  inline void set_has_tschchartaxiscategoryminorgridlineopacity();
  inline void clear_has_tschchartaxiscategoryminorgridlineopacity();
  inline void set_has_tschchartaxisvalueminorgridlineopacity();
  inline void clear_has_tschchartaxisvalueminorgridlineopacity();
  inline void set_has_tschchartaxiscategoryminorgridlineshadow();
  inline void clear_has_tschchartaxiscategoryminorgridlineshadow();
  inline void set_has_tschchartaxisvalueminorgridlineshadow();
  inline void clear_has_tschchartaxisvalueminorgridlineshadow();
  inline void set_has_tschchartaxiscategoryminorgridlinestroke();
  inline void clear_has_tschchartaxiscategoryminorgridlinestroke();
  inline void set_has_tschchartaxisvalueminorgridlinestroke();
  inline void clear_has_tschchartaxisvalueminorgridlinestroke();
  inline void set_has_tschchartaxiscategoryshowaxis();
  inline void clear_has_tschchartaxiscategoryshowaxis();
  inline void set_has_tschchartaxisvalueshowaxis();
  inline void clear_has_tschchartaxisvalueshowaxis();
  inline void set_has_tschchartaxiscategoryshowlastlabel();
  inline void clear_has_tschchartaxiscategoryshowlastlabel();
  inline void set_has_tschchartaxiscategoryshowmajorgridlines();
  inline void clear_has_tschchartaxiscategoryshowmajorgridlines();
  inline void set_has_tschchartaxisvalueshowmajorgridlines();
  inline void clear_has_tschchartaxisvalueshowmajorgridlines();
  inline void set_has_tschchartaxiscategoryshowmajortickmarks();
  inline void clear_has_tschchartaxiscategoryshowmajortickmarks();
  inline void set_has_tschchartaxisvalueshowmajortickmarks();
  inline void clear_has_tschchartaxisvalueshowmajortickmarks();
  inline void set_has_tschchartaxisvalueshowminimumlabel();
  inline void clear_has_tschchartaxisvalueshowminimumlabel();
  inline void set_has_tschchartaxiscategoryshowminorgridlines();
  inline void clear_has_tschchartaxiscategoryshowminorgridlines();
  inline void set_has_tschchartaxisvalueshowminorgridlines();
  inline void clear_has_tschchartaxisvalueshowminorgridlines();
  inline void set_has_tschchartaxiscategoryshowminortickmarks();
  inline void clear_has_tschchartaxiscategoryshowminortickmarks();
  inline void set_has_tschchartaxisvalueshowminortickmarks();
  inline void clear_has_tschchartaxisvalueshowminortickmarks();
  inline void set_has_tschchartaxiscategorytickmarklocation();
  inline void clear_has_tschchartaxiscategorytickmarklocation();
  inline void set_has_tschchartaxisvaluetickmarklocation();
  inline void clear_has_tschchartaxisvaluetickmarklocation();
  inline void set_has_tschchartaxiscategorytitleparagraphstyleindex();
  inline void clear_has_tschchartaxiscategorytitleparagraphstyleindex();
  inline void set_has_tschchartaxisdefaulttitleparagraphstyleindex();
  inline void clear_has_tschchartaxisdefaulttitleparagraphstyleindex();
  inline void set_has_tschchartaxisvaluetitleparagraphstyleindex();
  inline void clear_has_tschchartaxisvaluetitleparagraphstyleindex();
  inline void set_has_tschchartaxiscategoryverticalspacing();
  inline void clear_has_tschchartaxiscategoryverticalspacing();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float tschchartaxiscategory3dgridlineopacity_;
  float tschchartaxisvalue3dgridlineopacity_;
  ::TSD::StrokeArchive* tschchartaxiscategory3dgridlinestroke_;
  ::TSD::StrokeArchive* tschchartaxisvalue3dgridlinestroke_;
  ::google::protobuf::int32 tschchartaxiscategoryhorizontalspacing_;
  ::google::protobuf::int32 tschchartaxiscategorylabelparagraphstyleindex_;
  ::google::protobuf::int32 tschchartaxisdefaultlabelparagraphstyleindex_;
  ::google::protobuf::int32 tschchartaxisvaluelabelparagraphstyleindex_;
  float tschchartaxiscategorylabelsorientation_;
  float tschchartaxisdefaultlabelsorientation_;
  float tschchartaxisvaluelabelsorientation_;
  float tschchartaxiscategorymajorgridlineopacity_;
  ::TSD::ShadowArchive* tschchartaxiscategorymajorgridlineshadow_;
  ::TSD::ShadowArchive* tschchartaxisvaluemajorgridlineshadow_;
  float tschchartaxisvaluemajorgridlineopacity_;
  float tschchartaxiscategoryminorgridlineopacity_;
  ::TSD::StrokeArchive* tschchartaxiscategorymajorgridlinestroke_;
  ::TSD::StrokeArchive* tschchartaxisvaluemajorgridlinestroke_;
  ::TSD::ShadowArchive* tschchartaxiscategoryminorgridlineshadow_;
  ::TSD::ShadowArchive* tschchartaxisvalueminorgridlineshadow_;
  ::TSD::StrokeArchive* tschchartaxiscategoryminorgridlinestroke_;
  ::TSD::StrokeArchive* tschchartaxisvalueminorgridlinestroke_;
  float tschchartaxisvalueminorgridlineopacity_;
  bool tschchartaxiscategoryshowaxis_;
  bool tschchartaxisvalueshowaxis_;
  bool tschchartaxiscategoryshowlastlabel_;
  bool tschchartaxiscategoryshowmajorgridlines_;
  bool tschchartaxisvalueshowmajorgridlines_;
  bool tschchartaxiscategoryshowmajortickmarks_;
  bool tschchartaxisvalueshowmajortickmarks_;
  bool tschchartaxisvalueshowminimumlabel_;
  bool tschchartaxiscategoryshowminorgridlines_;
  bool tschchartaxisvalueshowminorgridlines_;
  bool tschchartaxiscategoryshowminortickmarks_;
  bool tschchartaxisvalueshowminortickmarks_;
  ::google::protobuf::int32 tschchartaxiscategorytickmarklocation_;
  ::google::protobuf::int32 tschchartaxisvaluetickmarklocation_;
  ::google::protobuf::int32 tschchartaxiscategorytitleparagraphstyleindex_;
  ::google::protobuf::int32 tschchartaxisdefaulttitleparagraphstyleindex_;
  ::google::protobuf::int32 tschchartaxisvaluetitleparagraphstyleindex_;
  ::google::protobuf::int32 tschchartaxiscategoryverticalspacing_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(41 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHArchives_2eGEN_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eGEN_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eGEN_2eproto();

  void InitAsDefaultInstance();
  static ChartAxisStyleArchive* default_instance_;
};
// -------------------------------------------------------------------

class ChartAxisNonStyleArchive : public ::google::protobuf::Message {
 public:
  ChartAxisNonStyleArchive();
  virtual ~ChartAxisNonStyleArchive();

  ChartAxisNonStyleArchive(const ChartAxisNonStyleArchive& from);

  inline ChartAxisNonStyleArchive& operator=(const ChartAxisNonStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartAxisNonStyleArchive& default_instance();

  void Swap(ChartAxisNonStyleArchive* other);

  // implements Message ----------------------------------------------

  ChartAxisNonStyleArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartAxisNonStyleArchive& from);
  void MergeFrom(const ChartAxisNonStyleArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tschchartaxisdefault3dlabelposition = 1;
  inline bool has_tschchartaxisdefault3dlabelposition() const;
  inline void clear_tschchartaxisdefault3dlabelposition();
  static const int kTschchartaxisdefault3DlabelpositionFieldNumber = 1;
  inline ::google::protobuf::int32 tschchartaxisdefault3dlabelposition() const;
  inline void set_tschchartaxisdefault3dlabelposition(::google::protobuf::int32 value);

  // optional .TSK.FormatStructArchive tschchartaxisdefault1_0numberformat = 2;
  inline bool has_tschchartaxisdefault1_0numberformat() const;
  inline void clear_tschchartaxisdefault1_0numberformat();
  static const int kTschchartaxisdefault10NumberformatFieldNumber = 2;
  inline const ::TSK::FormatStructArchive& tschchartaxisdefault1_0numberformat() const;
  inline ::TSK::FormatStructArchive* mutable_tschchartaxisdefault1_0numberformat();
  inline ::TSK::FormatStructArchive* release_tschchartaxisdefault1_0numberformat();
  inline void set_allocated_tschchartaxisdefault1_0numberformat(::TSK::FormatStructArchive* tschchartaxisdefault1_0numberformat);

  // optional .TSK.FormatStructArchive tschchartaxisdefaultnumberformat = 42;
  inline bool has_tschchartaxisdefaultnumberformat() const;
  inline void clear_tschchartaxisdefaultnumberformat();
  static const int kTschchartaxisdefaultnumberformatFieldNumber = 42;
  inline const ::TSK::FormatStructArchive& tschchartaxisdefaultnumberformat() const;
  inline ::TSK::FormatStructArchive* mutable_tschchartaxisdefaultnumberformat();
  inline ::TSK::FormatStructArchive* release_tschchartaxisdefaultnumberformat();
  inline void set_allocated_tschchartaxisdefaultnumberformat(::TSK::FormatStructArchive* tschchartaxisdefaultnumberformat);

  // optional .TSK.FormatStructArchive tschchartaxisdefault1_0dateformat = 20;
  inline bool has_tschchartaxisdefault1_0dateformat() const;
  inline void clear_tschchartaxisdefault1_0dateformat();
  static const int kTschchartaxisdefault10DateformatFieldNumber = 20;
  inline const ::TSK::FormatStructArchive& tschchartaxisdefault1_0dateformat() const;
  inline ::TSK::FormatStructArchive* mutable_tschchartaxisdefault1_0dateformat();
  inline ::TSK::FormatStructArchive* release_tschchartaxisdefault1_0dateformat();
  inline void set_allocated_tschchartaxisdefault1_0dateformat(::TSK::FormatStructArchive* tschchartaxisdefault1_0dateformat);

  // optional .TSK.FormatStructArchive tschchartaxisdefaultdurationformat = 21;
  inline bool has_tschchartaxisdefaultdurationformat() const;
  inline void clear_tschchartaxisdefaultdurationformat();
  static const int kTschchartaxisdefaultdurationformatFieldNumber = 21;
  inline const ::TSK::FormatStructArchive& tschchartaxisdefaultdurationformat() const;
  inline ::TSK::FormatStructArchive* mutable_tschchartaxisdefaultdurationformat();
  inline ::TSK::FormatStructArchive* release_tschchartaxisdefaultdurationformat();
  inline void set_allocated_tschchartaxisdefaultdurationformat(::TSK::FormatStructArchive* tschchartaxisdefaultdurationformat);

  // optional .TSK.FormatStructArchive tschchartaxisdefaultdateformat = 22;
  inline bool has_tschchartaxisdefaultdateformat() const;
  inline void clear_tschchartaxisdefaultdateformat();
  static const int kTschchartaxisdefaultdateformatFieldNumber = 22;
  inline const ::TSK::FormatStructArchive& tschchartaxisdefaultdateformat() const;
  inline ::TSK::FormatStructArchive* mutable_tschchartaxisdefaultdateformat();
  inline ::TSK::FormatStructArchive* release_tschchartaxisdefaultdateformat();
  inline void set_allocated_tschchartaxisdefaultdateformat(::TSK::FormatStructArchive* tschchartaxisdefaultdateformat);

  // optional int32 tschchartaxisdefaultnumberformattype = 3;
  inline bool has_tschchartaxisdefaultnumberformattype() const;
  inline void clear_tschchartaxisdefaultnumberformattype();
  static const int kTschchartaxisdefaultnumberformattypeFieldNumber = 3;
  inline ::google::protobuf::int32 tschchartaxisdefaultnumberformattype() const;
  inline void set_tschchartaxisdefaultnumberformattype(::google::protobuf::int32 value);

  // optional int32 tschchartaxisvaluenumberofdecades = 4;
  inline bool has_tschchartaxisvaluenumberofdecades() const;
  inline void clear_tschchartaxisvaluenumberofdecades();
  static const int kTschchartaxisvaluenumberofdecadesFieldNumber = 4;
  inline ::google::protobuf::int32 tschchartaxisvaluenumberofdecades() const;
  inline void set_tschchartaxisvaluenumberofdecades(::google::protobuf::int32 value);

  // optional int32 tschchartaxisvaluenumberofmajorgridlines = 5;
  inline bool has_tschchartaxisvaluenumberofmajorgridlines() const;
  inline void clear_tschchartaxisvaluenumberofmajorgridlines();
  static const int kTschchartaxisvaluenumberofmajorgridlinesFieldNumber = 5;
  inline ::google::protobuf::int32 tschchartaxisvaluenumberofmajorgridlines() const;
  inline void set_tschchartaxisvaluenumberofmajorgridlines(::google::protobuf::int32 value);

  // optional int32 tschchartaxisvaluenumberofminorgridlines = 6;
  inline bool has_tschchartaxisvaluenumberofminorgridlines() const;
  inline void clear_tschchartaxisvaluenumberofminorgridlines();
  static const int kTschchartaxisvaluenumberofminorgridlinesFieldNumber = 6;
  inline ::google::protobuf::int32 tschchartaxisvaluenumberofminorgridlines() const;
  inline void set_tschchartaxisvaluenumberofminorgridlines(::google::protobuf::int32 value);

  // optional bool tschchartaxiscategoryplottoedges = 7;
  inline bool has_tschchartaxiscategoryplottoedges() const;
  inline void clear_tschchartaxiscategoryplottoedges();
  static const int kTschchartaxiscategoryplottoedgesFieldNumber = 7;
  inline bool tschchartaxiscategoryplottoedges() const;
  inline void set_tschchartaxiscategoryplottoedges(bool value);

  // optional int32 tschchartaxisvaluescale = 8;
  inline bool has_tschchartaxisvaluescale() const;
  inline void clear_tschchartaxisvaluescale();
  static const int kTschchartaxisvaluescaleFieldNumber = 8;
  inline ::google::protobuf::int32 tschchartaxisvaluescale() const;
  inline void set_tschchartaxisvaluescale(::google::protobuf::int32 value);

  // optional bool tschchartaxiscategoryshowlabels = 9;
  inline bool has_tschchartaxiscategoryshowlabels() const;
  inline void clear_tschchartaxiscategoryshowlabels();
  static const int kTschchartaxiscategoryshowlabelsFieldNumber = 9;
  inline bool tschchartaxiscategoryshowlabels() const;
  inline void set_tschchartaxiscategoryshowlabels(bool value);

  // optional bool tschchartaxisdefaultshowlabels = 10;
  inline bool has_tschchartaxisdefaultshowlabels() const;
  inline void clear_tschchartaxisdefaultshowlabels();
  static const int kTschchartaxisdefaultshowlabelsFieldNumber = 10;
  inline bool tschchartaxisdefaultshowlabels() const;
  inline void set_tschchartaxisdefaultshowlabels(bool value);

  // optional bool tschchartaxisvalueshowlabels = 11;
  inline bool has_tschchartaxisvalueshowlabels() const;
  inline void clear_tschchartaxisvalueshowlabels();
  static const int kTschchartaxisvalueshowlabelsFieldNumber = 11;
  inline bool tschchartaxisvalueshowlabels() const;
  inline void set_tschchartaxisvalueshowlabels(bool value);

  // optional bool tschchartaxiscategoryshowserieslabels = 12;
  inline bool has_tschchartaxiscategoryshowserieslabels() const;
  inline void clear_tschchartaxiscategoryshowserieslabels();
  static const int kTschchartaxiscategoryshowserieslabelsFieldNumber = 12;
  inline bool tschchartaxiscategoryshowserieslabels() const;
  inline void set_tschchartaxiscategoryshowserieslabels(bool value);

  // optional bool tschchartaxismultidatashowserieslabels = 19;
  inline bool has_tschchartaxismultidatashowserieslabels() const;
  inline void clear_tschchartaxismultidatashowserieslabels();
  static const int kTschchartaxismultidatashowserieslabelsFieldNumber = 19;
  inline bool tschchartaxismultidatashowserieslabels() const;
  inline void set_tschchartaxismultidatashowserieslabels(bool value);

  // optional bool tschchartaxiscategoryshowtitle = 13;
  inline bool has_tschchartaxiscategoryshowtitle() const;
  inline void clear_tschchartaxiscategoryshowtitle();
  static const int kTschchartaxiscategoryshowtitleFieldNumber = 13;
  inline bool tschchartaxiscategoryshowtitle() const;
  inline void set_tschchartaxiscategoryshowtitle(bool value);

  // optional bool tschchartaxisvalueshowtitle = 14;
  inline bool has_tschchartaxisvalueshowtitle() const;
  inline void clear_tschchartaxisvalueshowtitle();
  static const int kTschchartaxisvalueshowtitleFieldNumber = 14;
  inline bool tschchartaxisvalueshowtitle() const;
  inline void set_tschchartaxisvalueshowtitle(bool value);

  // optional string tschchartaxiscategorytitle = 15;
  inline bool has_tschchartaxiscategorytitle() const;
  inline void clear_tschchartaxiscategorytitle();
  static const int kTschchartaxiscategorytitleFieldNumber = 15;
  inline const ::std::string& tschchartaxiscategorytitle() const;
  inline void set_tschchartaxiscategorytitle(const ::std::string& value);
  inline void set_tschchartaxiscategorytitle(const char* value);
  inline void set_tschchartaxiscategorytitle(const char* value, size_t size);
  inline ::std::string* mutable_tschchartaxiscategorytitle();
  inline ::std::string* release_tschchartaxiscategorytitle();
  inline void set_allocated_tschchartaxiscategorytitle(::std::string* tschchartaxiscategorytitle);

  // optional string tschchartaxisvaluetitle = 16;
  inline bool has_tschchartaxisvaluetitle() const;
  inline void clear_tschchartaxisvaluetitle();
  static const int kTschchartaxisvaluetitleFieldNumber = 16;
  inline const ::std::string& tschchartaxisvaluetitle() const;
  inline void set_tschchartaxisvaluetitle(const ::std::string& value);
  inline void set_tschchartaxisvaluetitle(const char* value);
  inline void set_tschchartaxisvaluetitle(const char* value, size_t size);
  inline ::std::string* mutable_tschchartaxisvaluetitle();
  inline ::std::string* release_tschchartaxisvaluetitle();
  inline void set_allocated_tschchartaxisvaluetitle(::std::string* tschchartaxisvaluetitle);

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermax = 17;
  inline bool has_tschchartaxisdefaultusermax() const;
  inline void clear_tschchartaxisdefaultusermax();
  static const int kTschchartaxisdefaultusermaxFieldNumber = 17;
  inline const ::TSCH::ChartsNSNumberDoubleArchive& tschchartaxisdefaultusermax() const;
  inline ::TSCH::ChartsNSNumberDoubleArchive* mutable_tschchartaxisdefaultusermax();
  inline ::TSCH::ChartsNSNumberDoubleArchive* release_tschchartaxisdefaultusermax();
  inline void set_allocated_tschchartaxisdefaultusermax(::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermax);

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermin = 18;
  inline bool has_tschchartaxisdefaultusermin() const;
  inline void clear_tschchartaxisdefaultusermin();
  static const int kTschchartaxisdefaultuserminFieldNumber = 18;
  inline const ::TSCH::ChartsNSNumberDoubleArchive& tschchartaxisdefaultusermin() const;
  inline ::TSCH::ChartsNSNumberDoubleArchive* mutable_tschchartaxisdefaultusermin();
  inline ::TSCH::ChartsNSNumberDoubleArchive* release_tschchartaxisdefaultusermin();
  inline void set_allocated_tschchartaxisdefaultusermin(::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermin);

  static const int kCurrentFieldNumber = 10000;
  static ::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartAxisNonStyleArchive,
      ::google::protobuf::internal::MessageTypeTraits< ::TSCH::Generated::ChartAxisNonStyleArchive >, 11, false >
    current;
  // @@protoc_insertion_point(class_scope:TSCH.Generated.ChartAxisNonStyleArchive)
 private:
  inline void set_has_tschchartaxisdefault3dlabelposition();
  inline void clear_has_tschchartaxisdefault3dlabelposition();
  inline void set_has_tschchartaxisdefault1_0numberformat();
  inline void clear_has_tschchartaxisdefault1_0numberformat();
  inline void set_has_tschchartaxisdefaultnumberformat();
  inline void clear_has_tschchartaxisdefaultnumberformat();
  inline void set_has_tschchartaxisdefault1_0dateformat();
  inline void clear_has_tschchartaxisdefault1_0dateformat();
  inline void set_has_tschchartaxisdefaultdurationformat();
  inline void clear_has_tschchartaxisdefaultdurationformat();
  inline void set_has_tschchartaxisdefaultdateformat();
  inline void clear_has_tschchartaxisdefaultdateformat();
  inline void set_has_tschchartaxisdefaultnumberformattype();
  inline void clear_has_tschchartaxisdefaultnumberformattype();
  inline void set_has_tschchartaxisvaluenumberofdecades();
  inline void clear_has_tschchartaxisvaluenumberofdecades();
  inline void set_has_tschchartaxisvaluenumberofmajorgridlines();
  inline void clear_has_tschchartaxisvaluenumberofmajorgridlines();
  inline void set_has_tschchartaxisvaluenumberofminorgridlines();
  inline void clear_has_tschchartaxisvaluenumberofminorgridlines();
  inline void set_has_tschchartaxiscategoryplottoedges();
  inline void clear_has_tschchartaxiscategoryplottoedges();
  inline void set_has_tschchartaxisvaluescale();
  inline void clear_has_tschchartaxisvaluescale();
  inline void set_has_tschchartaxiscategoryshowlabels();
  inline void clear_has_tschchartaxiscategoryshowlabels();
  inline void set_has_tschchartaxisdefaultshowlabels();
  inline void clear_has_tschchartaxisdefaultshowlabels();
  inline void set_has_tschchartaxisvalueshowlabels();
  inline void clear_has_tschchartaxisvalueshowlabels();
  inline void set_has_tschchartaxiscategoryshowserieslabels();
  inline void clear_has_tschchartaxiscategoryshowserieslabels();
  inline void set_has_tschchartaxismultidatashowserieslabels();
  inline void clear_has_tschchartaxismultidatashowserieslabels();
  inline void set_has_tschchartaxiscategoryshowtitle();
  inline void clear_has_tschchartaxiscategoryshowtitle();
  inline void set_has_tschchartaxisvalueshowtitle();
  inline void clear_has_tschchartaxisvalueshowtitle();
  inline void set_has_tschchartaxiscategorytitle();
  inline void clear_has_tschchartaxiscategorytitle();
  inline void set_has_tschchartaxisvaluetitle();
  inline void clear_has_tschchartaxisvaluetitle();
  inline void set_has_tschchartaxisdefaultusermax();
  inline void clear_has_tschchartaxisdefaultusermax();
  inline void set_has_tschchartaxisdefaultusermin();
  inline void clear_has_tschchartaxisdefaultusermin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSK::FormatStructArchive* tschchartaxisdefault1_0numberformat_;
  ::TSK::FormatStructArchive* tschchartaxisdefaultnumberformat_;
  ::TSK::FormatStructArchive* tschchartaxisdefault1_0dateformat_;
  ::google::protobuf::int32 tschchartaxisdefault3dlabelposition_;
  ::google::protobuf::int32 tschchartaxisdefaultnumberformattype_;
  ::TSK::FormatStructArchive* tschchartaxisdefaultdurationformat_;
  ::TSK::FormatStructArchive* tschchartaxisdefaultdateformat_;
  ::google::protobuf::int32 tschchartaxisvaluenumberofdecades_;
  ::google::protobuf::int32 tschchartaxisvaluenumberofmajorgridlines_;
  ::google::protobuf::int32 tschchartaxisvaluenumberofminorgridlines_;
  ::google::protobuf::int32 tschchartaxisvaluescale_;
  bool tschchartaxiscategoryplottoedges_;
  bool tschchartaxiscategoryshowlabels_;
  bool tschchartaxisdefaultshowlabels_;
  bool tschchartaxisvalueshowlabels_;
  bool tschchartaxiscategoryshowserieslabels_;
  bool tschchartaxismultidatashowserieslabels_;
  bool tschchartaxiscategoryshowtitle_;
  bool tschchartaxisvalueshowtitle_;
  ::std::string* tschchartaxiscategorytitle_;
  ::std::string* tschchartaxisvaluetitle_;
  ::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermax_;
  ::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHArchives_2eGEN_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eGEN_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eGEN_2eproto();

  void InitAsDefaultInstance();
  static ChartAxisNonStyleArchive* default_instance_;
};
// -------------------------------------------------------------------

class ChartSeriesStyleArchive : public ::google::protobuf::Message {
 public:
  ChartSeriesStyleArchive();
  virtual ~ChartSeriesStyleArchive();

  ChartSeriesStyleArchive(const ChartSeriesStyleArchive& from);

  inline ChartSeriesStyleArchive& operator=(const ChartSeriesStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartSeriesStyleArchive& default_instance();

  void Swap(ChartSeriesStyleArchive* other);

  // implements Message ----------------------------------------------

  ChartSeriesStyleArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartSeriesStyleArchive& from);
  void MergeFrom(const ChartSeriesStyleArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineend = 1;
  inline bool has_tschchartseriesdefaulterrorbarlineend() const;
  inline void clear_tschchartseriesdefaulterrorbarlineend();
  static const int kTschchartseriesdefaulterrorbarlineendFieldNumber = 1;
  inline const ::TSD::LineEndArchive& tschchartseriesdefaulterrorbarlineend() const;
  inline ::TSD::LineEndArchive* mutable_tschchartseriesdefaulterrorbarlineend();
  inline ::TSD::LineEndArchive* release_tschchartseriesdefaulterrorbarlineend();
  inline void set_allocated_tschchartseriesdefaulterrorbarlineend(::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineend);

  // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineendscatterx = 2;
  inline bool has_tschchartseriesdefaulterrorbarlineendscatterx() const;
  inline void clear_tschchartseriesdefaulterrorbarlineendscatterx();
  static const int kTschchartseriesdefaulterrorbarlineendscatterxFieldNumber = 2;
  inline const ::TSD::LineEndArchive& tschchartseriesdefaulterrorbarlineendscatterx() const;
  inline ::TSD::LineEndArchive* mutable_tschchartseriesdefaulterrorbarlineendscatterx();
  inline ::TSD::LineEndArchive* release_tschchartseriesdefaulterrorbarlineendscatterx();
  inline void set_allocated_tschchartseriesdefaulterrorbarlineendscatterx(::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineendscatterx);

  // optional .TSD.ShadowArchive tschchartseriesdefaulterrorbarshadow = 3;
  inline bool has_tschchartseriesdefaulterrorbarshadow() const;
  inline void clear_tschchartseriesdefaulterrorbarshadow();
  static const int kTschchartseriesdefaulterrorbarshadowFieldNumber = 3;
  inline const ::TSD::ShadowArchive& tschchartseriesdefaulterrorbarshadow() const;
  inline ::TSD::ShadowArchive* mutable_tschchartseriesdefaulterrorbarshadow();
  inline ::TSD::ShadowArchive* release_tschchartseriesdefaulterrorbarshadow();
  inline void set_allocated_tschchartseriesdefaulterrorbarshadow(::TSD::ShadowArchive* tschchartseriesdefaulterrorbarshadow);

  // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstroke = 4;
  inline bool has_tschchartseriesdefaulterrorbarstroke() const;
  inline void clear_tschchartseriesdefaulterrorbarstroke();
  static const int kTschchartseriesdefaulterrorbarstrokeFieldNumber = 4;
  inline const ::TSD::StrokeArchive& tschchartseriesdefaulterrorbarstroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartseriesdefaulterrorbarstroke();
  inline ::TSD::StrokeArchive* release_tschchartseriesdefaulterrorbarstroke();
  inline void set_allocated_tschchartseriesdefaulterrorbarstroke(::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstroke);

  // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstrokescatterx = 5;
  inline bool has_tschchartseriesdefaulterrorbarstrokescatterx() const;
  inline void clear_tschchartseriesdefaulterrorbarstrokescatterx();
  static const int kTschchartseriesdefaulterrorbarstrokescatterxFieldNumber = 5;
  inline const ::TSD::StrokeArchive& tschchartseriesdefaulterrorbarstrokescatterx() const;
  inline ::TSD::StrokeArchive* mutable_tschchartseriesdefaulterrorbarstrokescatterx();
  inline ::TSD::StrokeArchive* release_tschchartseriesdefaulterrorbarstrokescatterx();
  inline void set_allocated_tschchartseriesdefaulterrorbarstrokescatterx(::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstrokescatterx);

  // optional .TSD.FillArchive tschchartseries3dareafill = 6;
  inline bool has_tschchartseries3dareafill() const;
  inline void clear_tschchartseries3dareafill();
  static const int kTschchartseries3DareafillFieldNumber = 6;
  inline const ::TSD::FillArchive& tschchartseries3dareafill() const;
  inline ::TSD::FillArchive* mutable_tschchartseries3dareafill();
  inline ::TSD::FillArchive* release_tschchartseries3dareafill();
  inline void set_allocated_tschchartseries3dareafill(::TSD::FillArchive* tschchartseries3dareafill);

  // optional .TSD.FillArchive tschchartseries3dbarfill = 7;
  inline bool has_tschchartseries3dbarfill() const;
  inline void clear_tschchartseries3dbarfill();
  static const int kTschchartseries3DbarfillFieldNumber = 7;
  inline const ::TSD::FillArchive& tschchartseries3dbarfill() const;
  inline ::TSD::FillArchive* mutable_tschchartseries3dbarfill();
  inline ::TSD::FillArchive* release_tschchartseries3dbarfill();
  inline void set_allocated_tschchartseries3dbarfill(::TSD::FillArchive* tschchartseries3dbarfill);

  // optional .TSD.FillArchive tschchartseries3dcolumnfill = 8;
  inline bool has_tschchartseries3dcolumnfill() const;
  inline void clear_tschchartseries3dcolumnfill();
  static const int kTschchartseries3DcolumnfillFieldNumber = 8;
  inline const ::TSD::FillArchive& tschchartseries3dcolumnfill() const;
  inline ::TSD::FillArchive* mutable_tschchartseries3dcolumnfill();
  inline ::TSD::FillArchive* release_tschchartseries3dcolumnfill();
  inline void set_allocated_tschchartseries3dcolumnfill(::TSD::FillArchive* tschchartseries3dcolumnfill);

  // optional .TSD.FillArchive tschchartseries3dlinefill = 9;
  inline bool has_tschchartseries3dlinefill() const;
  inline void clear_tschchartseries3dlinefill();
  static const int kTschchartseries3DlinefillFieldNumber = 9;
  inline const ::TSD::FillArchive& tschchartseries3dlinefill() const;
  inline ::TSD::FillArchive* mutable_tschchartseries3dlinefill();
  inline ::TSD::FillArchive* release_tschchartseries3dlinefill();
  inline void set_allocated_tschchartseries3dlinefill(::TSD::FillArchive* tschchartseries3dlinefill);

  // optional .TSD.FillArchive tschchartseries3dpiefill = 10;
  inline bool has_tschchartseries3dpiefill() const;
  inline void clear_tschchartseries3dpiefill();
  static const int kTschchartseries3DpiefillFieldNumber = 10;
  inline const ::TSD::FillArchive& tschchartseries3dpiefill() const;
  inline ::TSD::FillArchive* mutable_tschchartseries3dpiefill();
  inline ::TSD::FillArchive* release_tschchartseries3dpiefill();
  inline void set_allocated_tschchartseries3dpiefill(::TSD::FillArchive* tschchartseries3dpiefill);

  // optional .TSD.FillArchive tschchartseriesareafill = 11;
  inline bool has_tschchartseriesareafill() const;
  inline void clear_tschchartseriesareafill();
  static const int kTschchartseriesareafillFieldNumber = 11;
  inline const ::TSD::FillArchive& tschchartseriesareafill() const;
  inline ::TSD::FillArchive* mutable_tschchartseriesareafill();
  inline ::TSD::FillArchive* release_tschchartseriesareafill();
  inline void set_allocated_tschchartseriesareafill(::TSD::FillArchive* tschchartseriesareafill);

  // optional .TSD.FillArchive tschchartseriesbarfill = 12;
  inline bool has_tschchartseriesbarfill() const;
  inline void clear_tschchartseriesbarfill();
  static const int kTschchartseriesbarfillFieldNumber = 12;
  inline const ::TSD::FillArchive& tschchartseriesbarfill() const;
  inline ::TSD::FillArchive* mutable_tschchartseriesbarfill();
  inline ::TSD::FillArchive* release_tschchartseriesbarfill();
  inline void set_allocated_tschchartseriesbarfill(::TSD::FillArchive* tschchartseriesbarfill);

  // optional .TSD.FillArchive tschchartseriescolumnfill = 13;
  inline bool has_tschchartseriescolumnfill() const;
  inline void clear_tschchartseriescolumnfill();
  static const int kTschchartseriescolumnfillFieldNumber = 13;
  inline const ::TSD::FillArchive& tschchartseriescolumnfill() const;
  inline ::TSD::FillArchive* mutable_tschchartseriescolumnfill();
  inline ::TSD::FillArchive* release_tschchartseriescolumnfill();
  inline void set_allocated_tschchartseriescolumnfill(::TSD::FillArchive* tschchartseriescolumnfill);

  // optional .TSD.FillArchive tschchartseriesdefaultfill = 14;
  inline bool has_tschchartseriesdefaultfill() const;
  inline void clear_tschchartseriesdefaultfill();
  static const int kTschchartseriesdefaultfillFieldNumber = 14;
  inline const ::TSD::FillArchive& tschchartseriesdefaultfill() const;
  inline ::TSD::FillArchive* mutable_tschchartseriesdefaultfill();
  inline ::TSD::FillArchive* release_tschchartseriesdefaultfill();
  inline void set_allocated_tschchartseriesdefaultfill(::TSD::FillArchive* tschchartseriesdefaultfill);

  // optional .TSD.FillArchive tschchartseriesmixedareafill = 15;
  inline bool has_tschchartseriesmixedareafill() const;
  inline void clear_tschchartseriesmixedareafill();
  static const int kTschchartseriesmixedareafillFieldNumber = 15;
  inline const ::TSD::FillArchive& tschchartseriesmixedareafill() const;
  inline ::TSD::FillArchive* mutable_tschchartseriesmixedareafill();
  inline ::TSD::FillArchive* release_tschchartseriesmixedareafill();
  inline void set_allocated_tschchartseriesmixedareafill(::TSD::FillArchive* tschchartseriesmixedareafill);

  // optional .TSD.FillArchive tschchartseriesmixedcolumnfill = 16;
  inline bool has_tschchartseriesmixedcolumnfill() const;
  inline void clear_tschchartseriesmixedcolumnfill();
  static const int kTschchartseriesmixedcolumnfillFieldNumber = 16;
  inline const ::TSD::FillArchive& tschchartseriesmixedcolumnfill() const;
  inline ::TSD::FillArchive* mutable_tschchartseriesmixedcolumnfill();
  inline ::TSD::FillArchive* release_tschchartseriesmixedcolumnfill();
  inline void set_allocated_tschchartseriesmixedcolumnfill(::TSD::FillArchive* tschchartseriesmixedcolumnfill);

  // optional .TSD.FillArchive tschchartseriespiefill = 17;
  inline bool has_tschchartseriespiefill() const;
  inline void clear_tschchartseriespiefill();
  static const int kTschchartseriespiefillFieldNumber = 17;
  inline const ::TSD::FillArchive& tschchartseriespiefill() const;
  inline ::TSD::FillArchive* mutable_tschchartseriespiefill();
  inline ::TSD::FillArchive* release_tschchartseriespiefill();
  inline void set_allocated_tschchartseriespiefill(::TSD::FillArchive* tschchartseriespiefill);

  // optional int32 tschchartseriesarealabelparagraphstyleindex = 18;
  inline bool has_tschchartseriesarealabelparagraphstyleindex() const;
  inline void clear_tschchartseriesarealabelparagraphstyleindex();
  static const int kTschchartseriesarealabelparagraphstyleindexFieldNumber = 18;
  inline ::google::protobuf::int32 tschchartseriesarealabelparagraphstyleindex() const;
  inline void set_tschchartseriesarealabelparagraphstyleindex(::google::protobuf::int32 value);

  // optional int32 tschchartseriesbarlabelparagraphstyleindex = 19;
  inline bool has_tschchartseriesbarlabelparagraphstyleindex() const;
  inline void clear_tschchartseriesbarlabelparagraphstyleindex();
  static const int kTschchartseriesbarlabelparagraphstyleindexFieldNumber = 19;
  inline ::google::protobuf::int32 tschchartseriesbarlabelparagraphstyleindex() const;
  inline void set_tschchartseriesbarlabelparagraphstyleindex(::google::protobuf::int32 value);

  // optional int32 tschchartseriesdefaultlabelparagraphstyleindex = 20;
  inline bool has_tschchartseriesdefaultlabelparagraphstyleindex() const;
  inline void clear_tschchartseriesdefaultlabelparagraphstyleindex();
  static const int kTschchartseriesdefaultlabelparagraphstyleindexFieldNumber = 20;
  inline ::google::protobuf::int32 tschchartseriesdefaultlabelparagraphstyleindex() const;
  inline void set_tschchartseriesdefaultlabelparagraphstyleindex(::google::protobuf::int32 value);

  // optional int32 tschchartserieslinelabelparagraphstyleindex = 21;
  inline bool has_tschchartserieslinelabelparagraphstyleindex() const;
  inline void clear_tschchartserieslinelabelparagraphstyleindex();
  static const int kTschchartserieslinelabelparagraphstyleindexFieldNumber = 21;
  inline ::google::protobuf::int32 tschchartserieslinelabelparagraphstyleindex() const;
  inline void set_tschchartserieslinelabelparagraphstyleindex(::google::protobuf::int32 value);

  // optional int32 tschchartseriesmixedlabelparagraphstyleindex = 22;
  inline bool has_tschchartseriesmixedlabelparagraphstyleindex() const;
  inline void clear_tschchartseriesmixedlabelparagraphstyleindex();
  static const int kTschchartseriesmixedlabelparagraphstyleindexFieldNumber = 22;
  inline ::google::protobuf::int32 tschchartseriesmixedlabelparagraphstyleindex() const;
  inline void set_tschchartseriesmixedlabelparagraphstyleindex(::google::protobuf::int32 value);

  // optional int32 tschchartseriespielabelparagraphstyleindex = 23;
  inline bool has_tschchartseriespielabelparagraphstyleindex() const;
  inline void clear_tschchartseriespielabelparagraphstyleindex();
  static const int kTschchartseriespielabelparagraphstyleindexFieldNumber = 23;
  inline ::google::protobuf::int32 tschchartseriespielabelparagraphstyleindex() const;
  inline void set_tschchartseriespielabelparagraphstyleindex(::google::protobuf::int32 value);

  // optional float tschchartseriesdefaultopacity = 24;
  inline bool has_tschchartseriesdefaultopacity() const;
  inline void clear_tschchartseriesdefaultopacity();
  static const int kTschchartseriesdefaultopacityFieldNumber = 24;
  inline float tschchartseriesdefaultopacity() const;
  inline void set_tschchartseriesdefaultopacity(float value);

  // optional int32 tschchartseriesareaoutsidelabelparagraphstyleindex = 25;
  inline bool has_tschchartseriesareaoutsidelabelparagraphstyleindex() const;
  inline void clear_tschchartseriesareaoutsidelabelparagraphstyleindex();
  static const int kTschchartseriesareaoutsidelabelparagraphstyleindexFieldNumber = 25;
  inline ::google::protobuf::int32 tschchartseriesareaoutsidelabelparagraphstyleindex() const;
  inline void set_tschchartseriesareaoutsidelabelparagraphstyleindex(::google::protobuf::int32 value);

  // optional int32 tschchartseriesbaroutsidelabelparagraphstyleindex = 26;
  inline bool has_tschchartseriesbaroutsidelabelparagraphstyleindex() const;
  inline void clear_tschchartseriesbaroutsidelabelparagraphstyleindex();
  static const int kTschchartseriesbaroutsidelabelparagraphstyleindexFieldNumber = 26;
  inline ::google::protobuf::int32 tschchartseriesbaroutsidelabelparagraphstyleindex() const;
  inline void set_tschchartseriesbaroutsidelabelparagraphstyleindex(::google::protobuf::int32 value);

  // optional int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex = 27;
  inline bool has_tschchartseriesdefaultoutsidelabelparagraphstyleindex() const;
  inline void clear_tschchartseriesdefaultoutsidelabelparagraphstyleindex();
  static const int kTschchartseriesdefaultoutsidelabelparagraphstyleindexFieldNumber = 27;
  inline ::google::protobuf::int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex() const;
  inline void set_tschchartseriesdefaultoutsidelabelparagraphstyleindex(::google::protobuf::int32 value);

  // optional int32 tschchartseriesmixedoutsidelabelparagraphstyleindex = 28;
  inline bool has_tschchartseriesmixedoutsidelabelparagraphstyleindex() const;
  inline void clear_tschchartseriesmixedoutsidelabelparagraphstyleindex();
  static const int kTschchartseriesmixedoutsidelabelparagraphstyleindexFieldNumber = 28;
  inline ::google::protobuf::int32 tschchartseriesmixedoutsidelabelparagraphstyleindex() const;
  inline void set_tschchartseriesmixedoutsidelabelparagraphstyleindex(::google::protobuf::int32 value);

  // optional int32 tschchartseriespieoutsidelabelparagraphstyleindex = 29;
  inline bool has_tschchartseriespieoutsidelabelparagraphstyleindex() const;
  inline void clear_tschchartseriespieoutsidelabelparagraphstyleindex();
  static const int kTschchartseriespieoutsidelabelparagraphstyleindexFieldNumber = 29;
  inline ::google::protobuf::int32 tschchartseriespieoutsidelabelparagraphstyleindex() const;
  inline void set_tschchartseriespieoutsidelabelparagraphstyleindex(::google::protobuf::int32 value);

  // optional .TSD.ShadowArchive tschchartseries3dareashadow = 30;
  inline bool has_tschchartseries3dareashadow() const;
  inline void clear_tschchartseries3dareashadow();
  static const int kTschchartseries3DareashadowFieldNumber = 30;
  inline const ::TSD::ShadowArchive& tschchartseries3dareashadow() const;
  inline ::TSD::ShadowArchive* mutable_tschchartseries3dareashadow();
  inline ::TSD::ShadowArchive* release_tschchartseries3dareashadow();
  inline void set_allocated_tschchartseries3dareashadow(::TSD::ShadowArchive* tschchartseries3dareashadow);

  // optional .TSD.ShadowArchive tschchartseries3dbarshadow = 31;
  inline bool has_tschchartseries3dbarshadow() const;
  inline void clear_tschchartseries3dbarshadow();
  static const int kTschchartseries3DbarshadowFieldNumber = 31;
  inline const ::TSD::ShadowArchive& tschchartseries3dbarshadow() const;
  inline ::TSD::ShadowArchive* mutable_tschchartseries3dbarshadow();
  inline ::TSD::ShadowArchive* release_tschchartseries3dbarshadow();
  inline void set_allocated_tschchartseries3dbarshadow(::TSD::ShadowArchive* tschchartseries3dbarshadow);

  // optional .TSD.ShadowArchive tschchartseries3dcolumnshadow = 32;
  inline bool has_tschchartseries3dcolumnshadow() const;
  inline void clear_tschchartseries3dcolumnshadow();
  static const int kTschchartseries3DcolumnshadowFieldNumber = 32;
  inline const ::TSD::ShadowArchive& tschchartseries3dcolumnshadow() const;
  inline ::TSD::ShadowArchive* mutable_tschchartseries3dcolumnshadow();
  inline ::TSD::ShadowArchive* release_tschchartseries3dcolumnshadow();
  inline void set_allocated_tschchartseries3dcolumnshadow(::TSD::ShadowArchive* tschchartseries3dcolumnshadow);

  // optional .TSD.ShadowArchive tschchartseries3dlineshadow = 33;
  inline bool has_tschchartseries3dlineshadow() const;
  inline void clear_tschchartseries3dlineshadow();
  static const int kTschchartseries3DlineshadowFieldNumber = 33;
  inline const ::TSD::ShadowArchive& tschchartseries3dlineshadow() const;
  inline ::TSD::ShadowArchive* mutable_tschchartseries3dlineshadow();
  inline ::TSD::ShadowArchive* release_tschchartseries3dlineshadow();
  inline void set_allocated_tschchartseries3dlineshadow(::TSD::ShadowArchive* tschchartseries3dlineshadow);

  // optional .TSD.ShadowArchive tschchartseries3dpieshadow = 34;
  inline bool has_tschchartseries3dpieshadow() const;
  inline void clear_tschchartseries3dpieshadow();
  static const int kTschchartseries3DpieshadowFieldNumber = 34;
  inline const ::TSD::ShadowArchive& tschchartseries3dpieshadow() const;
  inline ::TSD::ShadowArchive* mutable_tschchartseries3dpieshadow();
  inline ::TSD::ShadowArchive* release_tschchartseries3dpieshadow();
  inline void set_allocated_tschchartseries3dpieshadow(::TSD::ShadowArchive* tschchartseries3dpieshadow);

  // optional .TSD.ShadowArchive tschchartseriesareashadow = 35;
  inline bool has_tschchartseriesareashadow() const;
  inline void clear_tschchartseriesareashadow();
  static const int kTschchartseriesareashadowFieldNumber = 35;
  inline const ::TSD::ShadowArchive& tschchartseriesareashadow() const;
  inline ::TSD::ShadowArchive* mutable_tschchartseriesareashadow();
  inline ::TSD::ShadowArchive* release_tschchartseriesareashadow();
  inline void set_allocated_tschchartseriesareashadow(::TSD::ShadowArchive* tschchartseriesareashadow);

  // optional .TSD.ShadowArchive tschchartseriesbarshadow = 36;
  inline bool has_tschchartseriesbarshadow() const;
  inline void clear_tschchartseriesbarshadow();
  static const int kTschchartseriesbarshadowFieldNumber = 36;
  inline const ::TSD::ShadowArchive& tschchartseriesbarshadow() const;
  inline ::TSD::ShadowArchive* mutable_tschchartseriesbarshadow();
  inline ::TSD::ShadowArchive* release_tschchartseriesbarshadow();
  inline void set_allocated_tschchartseriesbarshadow(::TSD::ShadowArchive* tschchartseriesbarshadow);

  // optional .TSD.ShadowArchive tschchartseriesbubbleshadow = 37;
  inline bool has_tschchartseriesbubbleshadow() const;
  inline void clear_tschchartseriesbubbleshadow();
  static const int kTschchartseriesbubbleshadowFieldNumber = 37;
  inline const ::TSD::ShadowArchive& tschchartseriesbubbleshadow() const;
  inline ::TSD::ShadowArchive* mutable_tschchartseriesbubbleshadow();
  inline ::TSD::ShadowArchive* release_tschchartseriesbubbleshadow();
  inline void set_allocated_tschchartseriesbubbleshadow(::TSD::ShadowArchive* tschchartseriesbubbleshadow);

  // optional .TSD.ShadowArchive tschchartseriesdefaultshadow = 38;
  inline bool has_tschchartseriesdefaultshadow() const;
  inline void clear_tschchartseriesdefaultshadow();
  static const int kTschchartseriesdefaultshadowFieldNumber = 38;
  inline const ::TSD::ShadowArchive& tschchartseriesdefaultshadow() const;
  inline ::TSD::ShadowArchive* mutable_tschchartseriesdefaultshadow();
  inline ::TSD::ShadowArchive* release_tschchartseriesdefaultshadow();
  inline void set_allocated_tschchartseriesdefaultshadow(::TSD::ShadowArchive* tschchartseriesdefaultshadow);

  // optional .TSD.ShadowArchive tschchartserieslineshadow = 39;
  inline bool has_tschchartserieslineshadow() const;
  inline void clear_tschchartserieslineshadow();
  static const int kTschchartserieslineshadowFieldNumber = 39;
  inline const ::TSD::ShadowArchive& tschchartserieslineshadow() const;
  inline ::TSD::ShadowArchive* mutable_tschchartserieslineshadow();
  inline ::TSD::ShadowArchive* release_tschchartserieslineshadow();
  inline void set_allocated_tschchartserieslineshadow(::TSD::ShadowArchive* tschchartserieslineshadow);

  // optional .TSD.ShadowArchive tschchartseriesmixedareashadow = 40;
  inline bool has_tschchartseriesmixedareashadow() const;
  inline void clear_tschchartseriesmixedareashadow();
  static const int kTschchartseriesmixedareashadowFieldNumber = 40;
  inline const ::TSD::ShadowArchive& tschchartseriesmixedareashadow() const;
  inline ::TSD::ShadowArchive* mutable_tschchartseriesmixedareashadow();
  inline ::TSD::ShadowArchive* release_tschchartseriesmixedareashadow();
  inline void set_allocated_tschchartseriesmixedareashadow(::TSD::ShadowArchive* tschchartseriesmixedareashadow);

  // optional .TSD.ShadowArchive tschchartseriesmixedcolumnshadow = 41;
  inline bool has_tschchartseriesmixedcolumnshadow() const;
  inline void clear_tschchartseriesmixedcolumnshadow();
  static const int kTschchartseriesmixedcolumnshadowFieldNumber = 41;
  inline const ::TSD::ShadowArchive& tschchartseriesmixedcolumnshadow() const;
  inline ::TSD::ShadowArchive* mutable_tschchartseriesmixedcolumnshadow();
  inline ::TSD::ShadowArchive* release_tschchartseriesmixedcolumnshadow();
  inline void set_allocated_tschchartseriesmixedcolumnshadow(::TSD::ShadowArchive* tschchartseriesmixedcolumnshadow);

  // optional .TSD.ShadowArchive tschchartseriesmixedlineshadow = 42;
  inline bool has_tschchartseriesmixedlineshadow() const;
  inline void clear_tschchartseriesmixedlineshadow();
  static const int kTschchartseriesmixedlineshadowFieldNumber = 42;
  inline const ::TSD::ShadowArchive& tschchartseriesmixedlineshadow() const;
  inline ::TSD::ShadowArchive* mutable_tschchartseriesmixedlineshadow();
  inline ::TSD::ShadowArchive* release_tschchartseriesmixedlineshadow();
  inline void set_allocated_tschchartseriesmixedlineshadow(::TSD::ShadowArchive* tschchartseriesmixedlineshadow);

  // optional .TSD.ShadowArchive tschchartseriespieshadow = 43;
  inline bool has_tschchartseriespieshadow() const;
  inline void clear_tschchartseriespieshadow();
  static const int kTschchartseriespieshadowFieldNumber = 43;
  inline const ::TSD::ShadowArchive& tschchartseriespieshadow() const;
  inline ::TSD::ShadowArchive* mutable_tschchartseriespieshadow();
  inline ::TSD::ShadowArchive* release_tschchartseriespieshadow();
  inline void set_allocated_tschchartseriespieshadow(::TSD::ShadowArchive* tschchartseriespieshadow);

  // optional .TSD.ShadowArchive tschchartseriesscattershadow = 44;
  inline bool has_tschchartseriesscattershadow() const;
  inline void clear_tschchartseriesscattershadow();
  static const int kTschchartseriesscattershadowFieldNumber = 44;
  inline const ::TSD::ShadowArchive& tschchartseriesscattershadow() const;
  inline ::TSD::ShadowArchive* mutable_tschchartseriesscattershadow();
  inline ::TSD::ShadowArchive* release_tschchartseriesscattershadow();
  inline void set_allocated_tschchartseriesscattershadow(::TSD::ShadowArchive* tschchartseriesscattershadow);

  // optional .TSD.StrokeArchive tschchartseriesareastroke = 45;
  inline bool has_tschchartseriesareastroke() const;
  inline void clear_tschchartseriesareastroke();
  static const int kTschchartseriesareastrokeFieldNumber = 45;
  inline const ::TSD::StrokeArchive& tschchartseriesareastroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartseriesareastroke();
  inline ::TSD::StrokeArchive* release_tschchartseriesareastroke();
  inline void set_allocated_tschchartseriesareastroke(::TSD::StrokeArchive* tschchartseriesareastroke);

  // optional .TSD.StrokeArchive tschchartseriesbarstroke = 46;
  inline bool has_tschchartseriesbarstroke() const;
  inline void clear_tschchartseriesbarstroke();
  static const int kTschchartseriesbarstrokeFieldNumber = 46;
  inline const ::TSD::StrokeArchive& tschchartseriesbarstroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartseriesbarstroke();
  inline ::TSD::StrokeArchive* release_tschchartseriesbarstroke();
  inline void set_allocated_tschchartseriesbarstroke(::TSD::StrokeArchive* tschchartseriesbarstroke);

  // optional .TSD.StrokeArchive tschchartseriesbubblestroke = 47;
  inline bool has_tschchartseriesbubblestroke() const;
  inline void clear_tschchartseriesbubblestroke();
  static const int kTschchartseriesbubblestrokeFieldNumber = 47;
  inline const ::TSD::StrokeArchive& tschchartseriesbubblestroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartseriesbubblestroke();
  inline ::TSD::StrokeArchive* release_tschchartseriesbubblestroke();
  inline void set_allocated_tschchartseriesbubblestroke(::TSD::StrokeArchive* tschchartseriesbubblestroke);

  // optional .TSD.StrokeArchive tschchartserieslinestroke = 48;
  inline bool has_tschchartserieslinestroke() const;
  inline void clear_tschchartserieslinestroke();
  static const int kTschchartserieslinestrokeFieldNumber = 48;
  inline const ::TSD::StrokeArchive& tschchartserieslinestroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartserieslinestroke();
  inline ::TSD::StrokeArchive* release_tschchartserieslinestroke();
  inline void set_allocated_tschchartserieslinestroke(::TSD::StrokeArchive* tschchartserieslinestroke);

  // optional .TSD.StrokeArchive tschchartseriesmixedareastroke = 49;
  inline bool has_tschchartseriesmixedareastroke() const;
  inline void clear_tschchartseriesmixedareastroke();
  static const int kTschchartseriesmixedareastrokeFieldNumber = 49;
  inline const ::TSD::StrokeArchive& tschchartseriesmixedareastroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartseriesmixedareastroke();
  inline ::TSD::StrokeArchive* release_tschchartseriesmixedareastroke();
  inline void set_allocated_tschchartseriesmixedareastroke(::TSD::StrokeArchive* tschchartseriesmixedareastroke);

  // optional .TSD.StrokeArchive tschchartseriesmixedcolumnstroke = 50;
  inline bool has_tschchartseriesmixedcolumnstroke() const;
  inline void clear_tschchartseriesmixedcolumnstroke();
  static const int kTschchartseriesmixedcolumnstrokeFieldNumber = 50;
  inline const ::TSD::StrokeArchive& tschchartseriesmixedcolumnstroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartseriesmixedcolumnstroke();
  inline ::TSD::StrokeArchive* release_tschchartseriesmixedcolumnstroke();
  inline void set_allocated_tschchartseriesmixedcolumnstroke(::TSD::StrokeArchive* tschchartseriesmixedcolumnstroke);

  // optional .TSD.StrokeArchive tschchartseriesmixedlinestroke = 51;
  inline bool has_tschchartseriesmixedlinestroke() const;
  inline void clear_tschchartseriesmixedlinestroke();
  static const int kTschchartseriesmixedlinestrokeFieldNumber = 51;
  inline const ::TSD::StrokeArchive& tschchartseriesmixedlinestroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartseriesmixedlinestroke();
  inline ::TSD::StrokeArchive* release_tschchartseriesmixedlinestroke();
  inline void set_allocated_tschchartseriesmixedlinestroke(::TSD::StrokeArchive* tschchartseriesmixedlinestroke);

  // optional .TSD.StrokeArchive tschchartseriespiestroke = 52;
  inline bool has_tschchartseriespiestroke() const;
  inline void clear_tschchartseriespiestroke();
  static const int kTschchartseriespiestrokeFieldNumber = 52;
  inline const ::TSD::StrokeArchive& tschchartseriespiestroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartseriespiestroke();
  inline ::TSD::StrokeArchive* release_tschchartseriespiestroke();
  inline void set_allocated_tschchartseriespiestroke(::TSD::StrokeArchive* tschchartseriespiestroke);

  // optional .TSD.StrokeArchive tschchartseriesscatterstroke = 53;
  inline bool has_tschchartseriesscatterstroke() const;
  inline void clear_tschchartseriesscatterstroke();
  static const int kTschchartseriesscatterstrokeFieldNumber = 53;
  inline const ::TSD::StrokeArchive& tschchartseriesscatterstroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartseriesscatterstroke();
  inline ::TSD::StrokeArchive* release_tschchartseriesscatterstroke();
  inline void set_allocated_tschchartseriesscatterstroke(::TSD::StrokeArchive* tschchartseriesscatterstroke);

  // optional .TSD.FillArchive tschchartseriesareasymbolfill = 54;
  inline bool has_tschchartseriesareasymbolfill() const;
  inline void clear_tschchartseriesareasymbolfill();
  static const int kTschchartseriesareasymbolfillFieldNumber = 54;
  inline const ::TSD::FillArchive& tschchartseriesareasymbolfill() const;
  inline ::TSD::FillArchive* mutable_tschchartseriesareasymbolfill();
  inline ::TSD::FillArchive* release_tschchartseriesareasymbolfill();
  inline void set_allocated_tschchartseriesareasymbolfill(::TSD::FillArchive* tschchartseriesareasymbolfill);

  // optional .TSD.FillArchive tschchartseriesbubblesymbolfill = 55;
  inline bool has_tschchartseriesbubblesymbolfill() const;
  inline void clear_tschchartseriesbubblesymbolfill();
  static const int kTschchartseriesbubblesymbolfillFieldNumber = 55;
  inline const ::TSD::FillArchive& tschchartseriesbubblesymbolfill() const;
  inline ::TSD::FillArchive* mutable_tschchartseriesbubblesymbolfill();
  inline ::TSD::FillArchive* release_tschchartseriesbubblesymbolfill();
  inline void set_allocated_tschchartseriesbubblesymbolfill(::TSD::FillArchive* tschchartseriesbubblesymbolfill);

  // optional .TSD.FillArchive tschchartserieslinesymbolfill = 56;
  inline bool has_tschchartserieslinesymbolfill() const;
  inline void clear_tschchartserieslinesymbolfill();
  static const int kTschchartserieslinesymbolfillFieldNumber = 56;
  inline const ::TSD::FillArchive& tschchartserieslinesymbolfill() const;
  inline ::TSD::FillArchive* mutable_tschchartserieslinesymbolfill();
  inline ::TSD::FillArchive* release_tschchartserieslinesymbolfill();
  inline void set_allocated_tschchartserieslinesymbolfill(::TSD::FillArchive* tschchartserieslinesymbolfill);

  // optional .TSD.FillArchive tschchartseriesmixedareasymbolfill = 57;
  inline bool has_tschchartseriesmixedareasymbolfill() const;
  inline void clear_tschchartseriesmixedareasymbolfill();
  static const int kTschchartseriesmixedareasymbolfillFieldNumber = 57;
  inline const ::TSD::FillArchive& tschchartseriesmixedareasymbolfill() const;
  inline ::TSD::FillArchive* mutable_tschchartseriesmixedareasymbolfill();
  inline ::TSD::FillArchive* release_tschchartseriesmixedareasymbolfill();
  inline void set_allocated_tschchartseriesmixedareasymbolfill(::TSD::FillArchive* tschchartseriesmixedareasymbolfill);

  // optional .TSD.FillArchive tschchartseriesmixedlinesymbolfill = 58;
  inline bool has_tschchartseriesmixedlinesymbolfill() const;
  inline void clear_tschchartseriesmixedlinesymbolfill();
  static const int kTschchartseriesmixedlinesymbolfillFieldNumber = 58;
  inline const ::TSD::FillArchive& tschchartseriesmixedlinesymbolfill() const;
  inline ::TSD::FillArchive* mutable_tschchartseriesmixedlinesymbolfill();
  inline ::TSD::FillArchive* release_tschchartseriesmixedlinesymbolfill();
  inline void set_allocated_tschchartseriesmixedlinesymbolfill(::TSD::FillArchive* tschchartseriesmixedlinesymbolfill);

  // optional .TSD.FillArchive tschchartseriesscattersymbolfill = 59;
  inline bool has_tschchartseriesscattersymbolfill() const;
  inline void clear_tschchartseriesscattersymbolfill();
  static const int kTschchartseriesscattersymbolfillFieldNumber = 59;
  inline const ::TSD::FillArchive& tschchartseriesscattersymbolfill() const;
  inline ::TSD::FillArchive* mutable_tschchartseriesscattersymbolfill();
  inline ::TSD::FillArchive* release_tschchartseriesscattersymbolfill();
  inline void set_allocated_tschchartseriesscattersymbolfill(::TSD::FillArchive* tschchartseriesscattersymbolfill);

  // optional bool tschchartseriesareasymbolfilluseseriesfill = 60;
  inline bool has_tschchartseriesareasymbolfilluseseriesfill() const;
  inline void clear_tschchartseriesareasymbolfilluseseriesfill();
  static const int kTschchartseriesareasymbolfilluseseriesfillFieldNumber = 60;
  inline bool tschchartseriesareasymbolfilluseseriesfill() const;
  inline void set_tschchartseriesareasymbolfilluseseriesfill(bool value);

  // optional bool tschchartserieslinesymbolfilluseseriesfill = 61;
  inline bool has_tschchartserieslinesymbolfilluseseriesfill() const;
  inline void clear_tschchartserieslinesymbolfilluseseriesfill();
  static const int kTschchartserieslinesymbolfilluseseriesfillFieldNumber = 61;
  inline bool tschchartserieslinesymbolfilluseseriesfill() const;
  inline void set_tschchartserieslinesymbolfilluseseriesfill(bool value);

  // optional bool tschchartseriesmixedareasymbolfilluseseriesfill = 62;
  inline bool has_tschchartseriesmixedareasymbolfilluseseriesfill() const;
  inline void clear_tschchartseriesmixedareasymbolfilluseseriesfill();
  static const int kTschchartseriesmixedareasymbolfilluseseriesfillFieldNumber = 62;
  inline bool tschchartseriesmixedareasymbolfilluseseriesfill() const;
  inline void set_tschchartseriesmixedareasymbolfilluseseriesfill(bool value);

  // optional bool tschchartseriesmixedlinesymbolfilluseseriesfill = 63;
  inline bool has_tschchartseriesmixedlinesymbolfilluseseriesfill() const;
  inline void clear_tschchartseriesmixedlinesymbolfilluseseriesfill();
  static const int kTschchartseriesmixedlinesymbolfilluseseriesfillFieldNumber = 63;
  inline bool tschchartseriesmixedlinesymbolfilluseseriesfill() const;
  inline void set_tschchartseriesmixedlinesymbolfilluseseriesfill(bool value);

  // optional bool tschchartseriesareasymbolfilluseseriesstroke = 64;
  inline bool has_tschchartseriesareasymbolfilluseseriesstroke() const;
  inline void clear_tschchartseriesareasymbolfilluseseriesstroke();
  static const int kTschchartseriesareasymbolfilluseseriesstrokeFieldNumber = 64;
  inline bool tschchartseriesareasymbolfilluseseriesstroke() const;
  inline void set_tschchartseriesareasymbolfilluseseriesstroke(bool value);

  // optional bool tschchartseriesbubblesymbolfilluseseriesstroke = 65;
  inline bool has_tschchartseriesbubblesymbolfilluseseriesstroke() const;
  inline void clear_tschchartseriesbubblesymbolfilluseseriesstroke();
  static const int kTschchartseriesbubblesymbolfilluseseriesstrokeFieldNumber = 65;
  inline bool tschchartseriesbubblesymbolfilluseseriesstroke() const;
  inline void set_tschchartseriesbubblesymbolfilluseseriesstroke(bool value);

  // optional bool tschchartserieslinesymbolfilluseseriesstroke = 66;
  inline bool has_tschchartserieslinesymbolfilluseseriesstroke() const;
  inline void clear_tschchartserieslinesymbolfilluseseriesstroke();
  static const int kTschchartserieslinesymbolfilluseseriesstrokeFieldNumber = 66;
  inline bool tschchartserieslinesymbolfilluseseriesstroke() const;
  inline void set_tschchartserieslinesymbolfilluseseriesstroke(bool value);

  // optional bool tschchartseriesmixedareasymbolfilluseseriesstroke = 67;
  inline bool has_tschchartseriesmixedareasymbolfilluseseriesstroke() const;
  inline void clear_tschchartseriesmixedareasymbolfilluseseriesstroke();
  static const int kTschchartseriesmixedareasymbolfilluseseriesstrokeFieldNumber = 67;
  inline bool tschchartseriesmixedareasymbolfilluseseriesstroke() const;
  inline void set_tschchartseriesmixedareasymbolfilluseseriesstroke(bool value);

  // optional bool tschchartseriesmixedlinesymbolfilluseseriesstroke = 68;
  inline bool has_tschchartseriesmixedlinesymbolfilluseseriesstroke() const;
  inline void clear_tschchartseriesmixedlinesymbolfilluseseriesstroke();
  static const int kTschchartseriesmixedlinesymbolfilluseseriesstrokeFieldNumber = 68;
  inline bool tschchartseriesmixedlinesymbolfilluseseriesstroke() const;
  inline void set_tschchartseriesmixedlinesymbolfilluseseriesstroke(bool value);

  // optional bool tschchartseriesscattersymbolfilluseseriesstroke = 69;
  inline bool has_tschchartseriesscattersymbolfilluseseriesstroke() const;
  inline void clear_tschchartseriesscattersymbolfilluseseriesstroke();
  static const int kTschchartseriesscattersymbolfilluseseriesstrokeFieldNumber = 69;
  inline bool tschchartseriesscattersymbolfilluseseriesstroke() const;
  inline void set_tschchartseriesscattersymbolfilluseseriesstroke(bool value);

  // optional float tschchartseriesareasymbolsize = 70;
  inline bool has_tschchartseriesareasymbolsize() const;
  inline void clear_tschchartseriesareasymbolsize();
  static const int kTschchartseriesareasymbolsizeFieldNumber = 70;
  inline float tschchartseriesareasymbolsize() const;
  inline void set_tschchartseriesareasymbolsize(float value);

  // optional float tschchartserieslinesymbolsize = 71;
  inline bool has_tschchartserieslinesymbolsize() const;
  inline void clear_tschchartserieslinesymbolsize();
  static const int kTschchartserieslinesymbolsizeFieldNumber = 71;
  inline float tschchartserieslinesymbolsize() const;
  inline void set_tschchartserieslinesymbolsize(float value);

  // optional float tschchartseriesmixedareasymbolsize = 72;
  inline bool has_tschchartseriesmixedareasymbolsize() const;
  inline void clear_tschchartseriesmixedareasymbolsize();
  static const int kTschchartseriesmixedareasymbolsizeFieldNumber = 72;
  inline float tschchartseriesmixedareasymbolsize() const;
  inline void set_tschchartseriesmixedareasymbolsize(float value);

  // optional float tschchartseriesmixedlinesymbolsize = 73;
  inline bool has_tschchartseriesmixedlinesymbolsize() const;
  inline void clear_tschchartseriesmixedlinesymbolsize();
  static const int kTschchartseriesmixedlinesymbolsizeFieldNumber = 73;
  inline float tschchartseriesmixedlinesymbolsize() const;
  inline void set_tschchartseriesmixedlinesymbolsize(float value);

  // optional float tschchartseriesscattersymbolsize = 74;
  inline bool has_tschchartseriesscattersymbolsize() const;
  inline void clear_tschchartseriesscattersymbolsize();
  static const int kTschchartseriesscattersymbolsizeFieldNumber = 74;
  inline float tschchartseriesscattersymbolsize() const;
  inline void set_tschchartseriesscattersymbolsize(float value);

  // optional .TSD.StrokeArchive tschchartseriesareasymbolstroke = 75;
  inline bool has_tschchartseriesareasymbolstroke() const;
  inline void clear_tschchartseriesareasymbolstroke();
  static const int kTschchartseriesareasymbolstrokeFieldNumber = 75;
  inline const ::TSD::StrokeArchive& tschchartseriesareasymbolstroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartseriesareasymbolstroke();
  inline ::TSD::StrokeArchive* release_tschchartseriesareasymbolstroke();
  inline void set_allocated_tschchartseriesareasymbolstroke(::TSD::StrokeArchive* tschchartseriesareasymbolstroke);

  // optional .TSD.StrokeArchive tschchartseriesbubblesymbolstroke = 76;
  inline bool has_tschchartseriesbubblesymbolstroke() const;
  inline void clear_tschchartseriesbubblesymbolstroke();
  static const int kTschchartseriesbubblesymbolstrokeFieldNumber = 76;
  inline const ::TSD::StrokeArchive& tschchartseriesbubblesymbolstroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartseriesbubblesymbolstroke();
  inline ::TSD::StrokeArchive* release_tschchartseriesbubblesymbolstroke();
  inline void set_allocated_tschchartseriesbubblesymbolstroke(::TSD::StrokeArchive* tschchartseriesbubblesymbolstroke);

  // optional .TSD.StrokeArchive tschchartserieslinesymbolstroke = 77;
  inline bool has_tschchartserieslinesymbolstroke() const;
  inline void clear_tschchartserieslinesymbolstroke();
  static const int kTschchartserieslinesymbolstrokeFieldNumber = 77;
  inline const ::TSD::StrokeArchive& tschchartserieslinesymbolstroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartserieslinesymbolstroke();
  inline ::TSD::StrokeArchive* release_tschchartserieslinesymbolstroke();
  inline void set_allocated_tschchartserieslinesymbolstroke(::TSD::StrokeArchive* tschchartserieslinesymbolstroke);

  // optional .TSD.StrokeArchive tschchartseriesmixedareasymbolstroke = 78;
  inline bool has_tschchartseriesmixedareasymbolstroke() const;
  inline void clear_tschchartseriesmixedareasymbolstroke();
  static const int kTschchartseriesmixedareasymbolstrokeFieldNumber = 78;
  inline const ::TSD::StrokeArchive& tschchartseriesmixedareasymbolstroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartseriesmixedareasymbolstroke();
  inline ::TSD::StrokeArchive* release_tschchartseriesmixedareasymbolstroke();
  inline void set_allocated_tschchartseriesmixedareasymbolstroke(::TSD::StrokeArchive* tschchartseriesmixedareasymbolstroke);

  // optional .TSD.StrokeArchive tschchartseriesmixedlinesymbolstroke = 79;
  inline bool has_tschchartseriesmixedlinesymbolstroke() const;
  inline void clear_tschchartseriesmixedlinesymbolstroke();
  static const int kTschchartseriesmixedlinesymbolstrokeFieldNumber = 79;
  inline const ::TSD::StrokeArchive& tschchartseriesmixedlinesymbolstroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartseriesmixedlinesymbolstroke();
  inline ::TSD::StrokeArchive* release_tschchartseriesmixedlinesymbolstroke();
  inline void set_allocated_tschchartseriesmixedlinesymbolstroke(::TSD::StrokeArchive* tschchartseriesmixedlinesymbolstroke);

  // optional .TSD.StrokeArchive tschchartseriesscattersymbolstroke = 80;
  inline bool has_tschchartseriesscattersymbolstroke() const;
  inline void clear_tschchartseriesscattersymbolstroke();
  static const int kTschchartseriesscattersymbolstrokeFieldNumber = 80;
  inline const ::TSD::StrokeArchive& tschchartseriesscattersymbolstroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartseriesscattersymbolstroke();
  inline ::TSD::StrokeArchive* release_tschchartseriesscattersymbolstroke();
  inline void set_allocated_tschchartseriesscattersymbolstroke(::TSD::StrokeArchive* tschchartseriesscattersymbolstroke);

  // optional float tschchartseriesdefaulttrendlineequationopacity = 81;
  inline bool has_tschchartseriesdefaulttrendlineequationopacity() const;
  inline void clear_tschchartseriesdefaulttrendlineequationopacity();
  static const int kTschchartseriesdefaulttrendlineequationopacityFieldNumber = 81;
  inline float tschchartseriesdefaulttrendlineequationopacity() const;
  inline void set_tschchartseriesdefaulttrendlineequationopacity(float value);

  // optional int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex = 82;
  inline bool has_tschchartseriesdefaulttrendlineequationparagraphstyleindex() const;
  inline void clear_tschchartseriesdefaulttrendlineequationparagraphstyleindex();
  static const int kTschchartseriesdefaulttrendlineequationparagraphstyleindexFieldNumber = 82;
  inline ::google::protobuf::int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex() const;
  inline void set_tschchartseriesdefaulttrendlineequationparagraphstyleindex(::google::protobuf::int32 value);

  // optional float tschchartseriesdefaulttrendlinersquaredopacity = 83;
  inline bool has_tschchartseriesdefaulttrendlinersquaredopacity() const;
  inline void clear_tschchartseriesdefaulttrendlinersquaredopacity();
  static const int kTschchartseriesdefaulttrendlinersquaredopacityFieldNumber = 83;
  inline float tschchartseriesdefaulttrendlinersquaredopacity() const;
  inline void set_tschchartseriesdefaulttrendlinersquaredopacity(float value);

  // optional int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex = 84;
  inline bool has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() const;
  inline void clear_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex();
  static const int kTschchartseriesdefaulttrendlinersquaredparagraphstyleindexFieldNumber = 84;
  inline ::google::protobuf::int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() const;
  inline void set_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(::google::protobuf::int32 value);

  // optional .TSD.ShadowArchive tschchartseriesdefaulttrendlineshadow = 85;
  inline bool has_tschchartseriesdefaulttrendlineshadow() const;
  inline void clear_tschchartseriesdefaulttrendlineshadow();
  static const int kTschchartseriesdefaulttrendlineshadowFieldNumber = 85;
  inline const ::TSD::ShadowArchive& tschchartseriesdefaulttrendlineshadow() const;
  inline ::TSD::ShadowArchive* mutable_tschchartseriesdefaulttrendlineshadow();
  inline ::TSD::ShadowArchive* release_tschchartseriesdefaulttrendlineshadow();
  inline void set_allocated_tschchartseriesdefaulttrendlineshadow(::TSD::ShadowArchive* tschchartseriesdefaulttrendlineshadow);

  // optional .TSD.StrokeArchive tschchartseriesdefaulttrendlinestroke = 86;
  inline bool has_tschchartseriesdefaulttrendlinestroke() const;
  inline void clear_tschchartseriesdefaulttrendlinestroke();
  static const int kTschchartseriesdefaulttrendlinestrokeFieldNumber = 86;
  inline const ::TSD::StrokeArchive& tschchartseriesdefaulttrendlinestroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartseriesdefaulttrendlinestroke();
  inline ::TSD::StrokeArchive* release_tschchartseriesdefaulttrendlinestroke();
  inline void set_allocated_tschchartseriesdefaulttrendlinestroke(::TSD::StrokeArchive* tschchartseriesdefaulttrendlinestroke);

  // optional int32 tschchartseriesareavaluelabelposition = 87;
  inline bool has_tschchartseriesareavaluelabelposition() const;
  inline void clear_tschchartseriesareavaluelabelposition();
  static const int kTschchartseriesareavaluelabelpositionFieldNumber = 87;
  inline ::google::protobuf::int32 tschchartseriesareavaluelabelposition() const;
  inline void set_tschchartseriesareavaluelabelposition(::google::protobuf::int32 value);

  // optional int32 tschchartseriesbarvaluelabelposition = 88;
  inline bool has_tschchartseriesbarvaluelabelposition() const;
  inline void clear_tschchartseriesbarvaluelabelposition();
  static const int kTschchartseriesbarvaluelabelpositionFieldNumber = 88;
  inline ::google::protobuf::int32 tschchartseriesbarvaluelabelposition() const;
  inline void set_tschchartseriesbarvaluelabelposition(::google::protobuf::int32 value);

  // optional int32 tschchartseriesbubblevaluelabelposition = 89;
  inline bool has_tschchartseriesbubblevaluelabelposition() const;
  inline void clear_tschchartseriesbubblevaluelabelposition();
  static const int kTschchartseriesbubblevaluelabelpositionFieldNumber = 89;
  inline ::google::protobuf::int32 tschchartseriesbubblevaluelabelposition() const;
  inline void set_tschchartseriesbubblevaluelabelposition(::google::protobuf::int32 value);

  // optional int32 tschchartseriesdefaultvaluelabelposition = 90;
  inline bool has_tschchartseriesdefaultvaluelabelposition() const;
  inline void clear_tschchartseriesdefaultvaluelabelposition();
  static const int kTschchartseriesdefaultvaluelabelpositionFieldNumber = 90;
  inline ::google::protobuf::int32 tschchartseriesdefaultvaluelabelposition() const;
  inline void set_tschchartseriesdefaultvaluelabelposition(::google::protobuf::int32 value);

  // optional int32 tschchartserieslinevaluelabelposition = 91;
  inline bool has_tschchartserieslinevaluelabelposition() const;
  inline void clear_tschchartserieslinevaluelabelposition();
  static const int kTschchartserieslinevaluelabelpositionFieldNumber = 91;
  inline ::google::protobuf::int32 tschchartserieslinevaluelabelposition() const;
  inline void set_tschchartserieslinevaluelabelposition(::google::protobuf::int32 value);

  // optional int32 tschchartseriesmixedareavaluelabelposition = 92;
  inline bool has_tschchartseriesmixedareavaluelabelposition() const;
  inline void clear_tschchartseriesmixedareavaluelabelposition();
  static const int kTschchartseriesmixedareavaluelabelpositionFieldNumber = 92;
  inline ::google::protobuf::int32 tschchartseriesmixedareavaluelabelposition() const;
  inline void set_tschchartseriesmixedareavaluelabelposition(::google::protobuf::int32 value);

  // optional int32 tschchartseriesmixedcolumnvaluelabelposition = 93;
  inline bool has_tschchartseriesmixedcolumnvaluelabelposition() const;
  inline void clear_tschchartseriesmixedcolumnvaluelabelposition();
  static const int kTschchartseriesmixedcolumnvaluelabelpositionFieldNumber = 93;
  inline ::google::protobuf::int32 tschchartseriesmixedcolumnvaluelabelposition() const;
  inline void set_tschchartseriesmixedcolumnvaluelabelposition(::google::protobuf::int32 value);

  // optional int32 tschchartseriesmixedlinevaluelabelposition = 94;
  inline bool has_tschchartseriesmixedlinevaluelabelposition() const;
  inline void clear_tschchartseriesmixedlinevaluelabelposition();
  static const int kTschchartseriesmixedlinevaluelabelpositionFieldNumber = 94;
  inline ::google::protobuf::int32 tschchartseriesmixedlinevaluelabelposition() const;
  inline void set_tschchartseriesmixedlinevaluelabelposition(::google::protobuf::int32 value);

  // optional int32 tschchartseriesscattervaluelabelposition = 95;
  inline bool has_tschchartseriesscattervaluelabelposition() const;
  inline void clear_tschchartseriesscattervaluelabelposition();
  static const int kTschchartseriesscattervaluelabelpositionFieldNumber = 95;
  inline ::google::protobuf::int32 tschchartseriesscattervaluelabelposition() const;
  inline void set_tschchartseriesscattervaluelabelposition(::google::protobuf::int32 value);

  // optional int32 tschchartseriesstackedareavaluelabelposition = 96;
  inline bool has_tschchartseriesstackedareavaluelabelposition() const;
  inline void clear_tschchartseriesstackedareavaluelabelposition();
  static const int kTschchartseriesstackedareavaluelabelpositionFieldNumber = 96;
  inline ::google::protobuf::int32 tschchartseriesstackedareavaluelabelposition() const;
  inline void set_tschchartseriesstackedareavaluelabelposition(::google::protobuf::int32 value);

  // optional int32 tschchartseriesstackedbarvaluelabelposition = 97;
  inline bool has_tschchartseriesstackedbarvaluelabelposition() const;
  inline void clear_tschchartseriesstackedbarvaluelabelposition();
  static const int kTschchartseriesstackedbarvaluelabelpositionFieldNumber = 97;
  inline ::google::protobuf::int32 tschchartseriesstackedbarvaluelabelposition() const;
  inline void set_tschchartseriesstackedbarvaluelabelposition(::google::protobuf::int32 value);

  static const int kCurrentFieldNumber = 10000;
  static ::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartSeriesStyleArchive,
      ::google::protobuf::internal::MessageTypeTraits< ::TSCH::Generated::ChartSeriesStyleArchive >, 11, false >
    current;
  // @@protoc_insertion_point(class_scope:TSCH.Generated.ChartSeriesStyleArchive)
 private:
  inline void set_has_tschchartseriesdefaulterrorbarlineend();
  inline void clear_has_tschchartseriesdefaulterrorbarlineend();
  inline void set_has_tschchartseriesdefaulterrorbarlineendscatterx();
  inline void clear_has_tschchartseriesdefaulterrorbarlineendscatterx();
  inline void set_has_tschchartseriesdefaulterrorbarshadow();
  inline void clear_has_tschchartseriesdefaulterrorbarshadow();
  inline void set_has_tschchartseriesdefaulterrorbarstroke();
  inline void clear_has_tschchartseriesdefaulterrorbarstroke();
  inline void set_has_tschchartseriesdefaulterrorbarstrokescatterx();
  inline void clear_has_tschchartseriesdefaulterrorbarstrokescatterx();
  inline void set_has_tschchartseries3dareafill();
  inline void clear_has_tschchartseries3dareafill();
  inline void set_has_tschchartseries3dbarfill();
  inline void clear_has_tschchartseries3dbarfill();
  inline void set_has_tschchartseries3dcolumnfill();
  inline void clear_has_tschchartseries3dcolumnfill();
  inline void set_has_tschchartseries3dlinefill();
  inline void clear_has_tschchartseries3dlinefill();
  inline void set_has_tschchartseries3dpiefill();
  inline void clear_has_tschchartseries3dpiefill();
  inline void set_has_tschchartseriesareafill();
  inline void clear_has_tschchartseriesareafill();
  inline void set_has_tschchartseriesbarfill();
  inline void clear_has_tschchartseriesbarfill();
  inline void set_has_tschchartseriescolumnfill();
  inline void clear_has_tschchartseriescolumnfill();
  inline void set_has_tschchartseriesdefaultfill();
  inline void clear_has_tschchartseriesdefaultfill();
  inline void set_has_tschchartseriesmixedareafill();
  inline void clear_has_tschchartseriesmixedareafill();
  inline void set_has_tschchartseriesmixedcolumnfill();
  inline void clear_has_tschchartseriesmixedcolumnfill();
  inline void set_has_tschchartseriespiefill();
  inline void clear_has_tschchartseriespiefill();
  inline void set_has_tschchartseriesarealabelparagraphstyleindex();
  inline void clear_has_tschchartseriesarealabelparagraphstyleindex();
  inline void set_has_tschchartseriesbarlabelparagraphstyleindex();
  inline void clear_has_tschchartseriesbarlabelparagraphstyleindex();
  inline void set_has_tschchartseriesdefaultlabelparagraphstyleindex();
  inline void clear_has_tschchartseriesdefaultlabelparagraphstyleindex();
  inline void set_has_tschchartserieslinelabelparagraphstyleindex();
  inline void clear_has_tschchartserieslinelabelparagraphstyleindex();
  inline void set_has_tschchartseriesmixedlabelparagraphstyleindex();
  inline void clear_has_tschchartseriesmixedlabelparagraphstyleindex();
  inline void set_has_tschchartseriespielabelparagraphstyleindex();
  inline void clear_has_tschchartseriespielabelparagraphstyleindex();
  inline void set_has_tschchartseriesdefaultopacity();
  inline void clear_has_tschchartseriesdefaultopacity();
  inline void set_has_tschchartseriesareaoutsidelabelparagraphstyleindex();
  inline void clear_has_tschchartseriesareaoutsidelabelparagraphstyleindex();
  inline void set_has_tschchartseriesbaroutsidelabelparagraphstyleindex();
  inline void clear_has_tschchartseriesbaroutsidelabelparagraphstyleindex();
  inline void set_has_tschchartseriesdefaultoutsidelabelparagraphstyleindex();
  inline void clear_has_tschchartseriesdefaultoutsidelabelparagraphstyleindex();
  inline void set_has_tschchartseriesmixedoutsidelabelparagraphstyleindex();
  inline void clear_has_tschchartseriesmixedoutsidelabelparagraphstyleindex();
  inline void set_has_tschchartseriespieoutsidelabelparagraphstyleindex();
  inline void clear_has_tschchartseriespieoutsidelabelparagraphstyleindex();
  inline void set_has_tschchartseries3dareashadow();
  inline void clear_has_tschchartseries3dareashadow();
  inline void set_has_tschchartseries3dbarshadow();
  inline void clear_has_tschchartseries3dbarshadow();
  inline void set_has_tschchartseries3dcolumnshadow();
  inline void clear_has_tschchartseries3dcolumnshadow();
  inline void set_has_tschchartseries3dlineshadow();
  inline void clear_has_tschchartseries3dlineshadow();
  inline void set_has_tschchartseries3dpieshadow();
  inline void clear_has_tschchartseries3dpieshadow();
  inline void set_has_tschchartseriesareashadow();
  inline void clear_has_tschchartseriesareashadow();
  inline void set_has_tschchartseriesbarshadow();
  inline void clear_has_tschchartseriesbarshadow();
  inline void set_has_tschchartseriesbubbleshadow();
  inline void clear_has_tschchartseriesbubbleshadow();
  inline void set_has_tschchartseriesdefaultshadow();
  inline void clear_has_tschchartseriesdefaultshadow();
  inline void set_has_tschchartserieslineshadow();
  inline void clear_has_tschchartserieslineshadow();
  inline void set_has_tschchartseriesmixedareashadow();
  inline void clear_has_tschchartseriesmixedareashadow();
  inline void set_has_tschchartseriesmixedcolumnshadow();
  inline void clear_has_tschchartseriesmixedcolumnshadow();
  inline void set_has_tschchartseriesmixedlineshadow();
  inline void clear_has_tschchartseriesmixedlineshadow();
  inline void set_has_tschchartseriespieshadow();
  inline void clear_has_tschchartseriespieshadow();
  inline void set_has_tschchartseriesscattershadow();
  inline void clear_has_tschchartseriesscattershadow();
  inline void set_has_tschchartseriesareastroke();
  inline void clear_has_tschchartseriesareastroke();
  inline void set_has_tschchartseriesbarstroke();
  inline void clear_has_tschchartseriesbarstroke();
  inline void set_has_tschchartseriesbubblestroke();
  inline void clear_has_tschchartseriesbubblestroke();
  inline void set_has_tschchartserieslinestroke();
  inline void clear_has_tschchartserieslinestroke();
  inline void set_has_tschchartseriesmixedareastroke();
  inline void clear_has_tschchartseriesmixedareastroke();
  inline void set_has_tschchartseriesmixedcolumnstroke();
  inline void clear_has_tschchartseriesmixedcolumnstroke();
  inline void set_has_tschchartseriesmixedlinestroke();
  inline void clear_has_tschchartseriesmixedlinestroke();
  inline void set_has_tschchartseriespiestroke();
  inline void clear_has_tschchartseriespiestroke();
  inline void set_has_tschchartseriesscatterstroke();
  inline void clear_has_tschchartseriesscatterstroke();
  inline void set_has_tschchartseriesareasymbolfill();
  inline void clear_has_tschchartseriesareasymbolfill();
  inline void set_has_tschchartseriesbubblesymbolfill();
  inline void clear_has_tschchartseriesbubblesymbolfill();
  inline void set_has_tschchartserieslinesymbolfill();
  inline void clear_has_tschchartserieslinesymbolfill();
  inline void set_has_tschchartseriesmixedareasymbolfill();
  inline void clear_has_tschchartseriesmixedareasymbolfill();
  inline void set_has_tschchartseriesmixedlinesymbolfill();
  inline void clear_has_tschchartseriesmixedlinesymbolfill();
  inline void set_has_tschchartseriesscattersymbolfill();
  inline void clear_has_tschchartseriesscattersymbolfill();
  inline void set_has_tschchartseriesareasymbolfilluseseriesfill();
  inline void clear_has_tschchartseriesareasymbolfilluseseriesfill();
  inline void set_has_tschchartserieslinesymbolfilluseseriesfill();
  inline void clear_has_tschchartserieslinesymbolfilluseseriesfill();
  inline void set_has_tschchartseriesmixedareasymbolfilluseseriesfill();
  inline void clear_has_tschchartseriesmixedareasymbolfilluseseriesfill();
  inline void set_has_tschchartseriesmixedlinesymbolfilluseseriesfill();
  inline void clear_has_tschchartseriesmixedlinesymbolfilluseseriesfill();
  inline void set_has_tschchartseriesareasymbolfilluseseriesstroke();
  inline void clear_has_tschchartseriesareasymbolfilluseseriesstroke();
  inline void set_has_tschchartseriesbubblesymbolfilluseseriesstroke();
  inline void clear_has_tschchartseriesbubblesymbolfilluseseriesstroke();
  inline void set_has_tschchartserieslinesymbolfilluseseriesstroke();
  inline void clear_has_tschchartserieslinesymbolfilluseseriesstroke();
  inline void set_has_tschchartseriesmixedareasymbolfilluseseriesstroke();
  inline void clear_has_tschchartseriesmixedareasymbolfilluseseriesstroke();
  inline void set_has_tschchartseriesmixedlinesymbolfilluseseriesstroke();
  inline void clear_has_tschchartseriesmixedlinesymbolfilluseseriesstroke();
  inline void set_has_tschchartseriesscattersymbolfilluseseriesstroke();
  inline void clear_has_tschchartseriesscattersymbolfilluseseriesstroke();
  inline void set_has_tschchartseriesareasymbolsize();
  inline void clear_has_tschchartseriesareasymbolsize();
  inline void set_has_tschchartserieslinesymbolsize();
  inline void clear_has_tschchartserieslinesymbolsize();
  inline void set_has_tschchartseriesmixedareasymbolsize();
  inline void clear_has_tschchartseriesmixedareasymbolsize();
  inline void set_has_tschchartseriesmixedlinesymbolsize();
  inline void clear_has_tschchartseriesmixedlinesymbolsize();
  inline void set_has_tschchartseriesscattersymbolsize();
  inline void clear_has_tschchartseriesscattersymbolsize();
  inline void set_has_tschchartseriesareasymbolstroke();
  inline void clear_has_tschchartseriesareasymbolstroke();
  inline void set_has_tschchartseriesbubblesymbolstroke();
  inline void clear_has_tschchartseriesbubblesymbolstroke();
  inline void set_has_tschchartserieslinesymbolstroke();
  inline void clear_has_tschchartserieslinesymbolstroke();
  inline void set_has_tschchartseriesmixedareasymbolstroke();
  inline void clear_has_tschchartseriesmixedareasymbolstroke();
  inline void set_has_tschchartseriesmixedlinesymbolstroke();
  inline void clear_has_tschchartseriesmixedlinesymbolstroke();
  inline void set_has_tschchartseriesscattersymbolstroke();
  inline void clear_has_tschchartseriesscattersymbolstroke();
  inline void set_has_tschchartseriesdefaulttrendlineequationopacity();
  inline void clear_has_tschchartseriesdefaulttrendlineequationopacity();
  inline void set_has_tschchartseriesdefaulttrendlineequationparagraphstyleindex();
  inline void clear_has_tschchartseriesdefaulttrendlineequationparagraphstyleindex();
  inline void set_has_tschchartseriesdefaulttrendlinersquaredopacity();
  inline void clear_has_tschchartseriesdefaulttrendlinersquaredopacity();
  inline void set_has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex();
  inline void clear_has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex();
  inline void set_has_tschchartseriesdefaulttrendlineshadow();
  inline void clear_has_tschchartseriesdefaulttrendlineshadow();
  inline void set_has_tschchartseriesdefaulttrendlinestroke();
  inline void clear_has_tschchartseriesdefaulttrendlinestroke();
  inline void set_has_tschchartseriesareavaluelabelposition();
  inline void clear_has_tschchartseriesareavaluelabelposition();
  inline void set_has_tschchartseriesbarvaluelabelposition();
  inline void clear_has_tschchartseriesbarvaluelabelposition();
  inline void set_has_tschchartseriesbubblevaluelabelposition();
  inline void clear_has_tschchartseriesbubblevaluelabelposition();
  inline void set_has_tschchartseriesdefaultvaluelabelposition();
  inline void clear_has_tschchartseriesdefaultvaluelabelposition();
  inline void set_has_tschchartserieslinevaluelabelposition();
  inline void clear_has_tschchartserieslinevaluelabelposition();
  inline void set_has_tschchartseriesmixedareavaluelabelposition();
  inline void clear_has_tschchartseriesmixedareavaluelabelposition();
  inline void set_has_tschchartseriesmixedcolumnvaluelabelposition();
  inline void clear_has_tschchartseriesmixedcolumnvaluelabelposition();
  inline void set_has_tschchartseriesmixedlinevaluelabelposition();
  inline void clear_has_tschchartseriesmixedlinevaluelabelposition();
  inline void set_has_tschchartseriesscattervaluelabelposition();
  inline void clear_has_tschchartseriesscattervaluelabelposition();
  inline void set_has_tschchartseriesstackedareavaluelabelposition();
  inline void clear_has_tschchartseriesstackedareavaluelabelposition();
  inline void set_has_tschchartseriesstackedbarvaluelabelposition();
  inline void clear_has_tschchartseriesstackedbarvaluelabelposition();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineend_;
  ::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineendscatterx_;
  ::TSD::ShadowArchive* tschchartseriesdefaulterrorbarshadow_;
  ::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstroke_;
  ::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstrokescatterx_;
  ::TSD::FillArchive* tschchartseries3dareafill_;
  ::TSD::FillArchive* tschchartseries3dbarfill_;
  ::TSD::FillArchive* tschchartseries3dcolumnfill_;
  ::TSD::FillArchive* tschchartseries3dlinefill_;
  ::TSD::FillArchive* tschchartseries3dpiefill_;
  ::TSD::FillArchive* tschchartseriesareafill_;
  ::TSD::FillArchive* tschchartseriesbarfill_;
  ::TSD::FillArchive* tschchartseriescolumnfill_;
  ::TSD::FillArchive* tschchartseriesdefaultfill_;
  ::TSD::FillArchive* tschchartseriesmixedareafill_;
  ::TSD::FillArchive* tschchartseriesmixedcolumnfill_;
  ::TSD::FillArchive* tschchartseriespiefill_;
  ::google::protobuf::int32 tschchartseriesarealabelparagraphstyleindex_;
  ::google::protobuf::int32 tschchartseriesbarlabelparagraphstyleindex_;
  ::google::protobuf::int32 tschchartseriesdefaultlabelparagraphstyleindex_;
  ::google::protobuf::int32 tschchartserieslinelabelparagraphstyleindex_;
  ::google::protobuf::int32 tschchartseriesmixedlabelparagraphstyleindex_;
  ::google::protobuf::int32 tschchartseriespielabelparagraphstyleindex_;
  float tschchartseriesdefaultopacity_;
  ::google::protobuf::int32 tschchartseriesareaoutsidelabelparagraphstyleindex_;
  ::google::protobuf::int32 tschchartseriesbaroutsidelabelparagraphstyleindex_;
  ::google::protobuf::int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex_;
  ::google::protobuf::int32 tschchartseriesmixedoutsidelabelparagraphstyleindex_;
  ::google::protobuf::int32 tschchartseriespieoutsidelabelparagraphstyleindex_;
  ::TSD::ShadowArchive* tschchartseries3dareashadow_;
  ::TSD::ShadowArchive* tschchartseries3dbarshadow_;
  ::TSD::ShadowArchive* tschchartseries3dcolumnshadow_;
  ::TSD::ShadowArchive* tschchartseries3dlineshadow_;
  ::TSD::ShadowArchive* tschchartseries3dpieshadow_;
  ::TSD::ShadowArchive* tschchartseriesareashadow_;
  ::TSD::ShadowArchive* tschchartseriesbarshadow_;
  ::TSD::ShadowArchive* tschchartseriesbubbleshadow_;
  ::TSD::ShadowArchive* tschchartseriesdefaultshadow_;
  ::TSD::ShadowArchive* tschchartserieslineshadow_;
  ::TSD::ShadowArchive* tschchartseriesmixedareashadow_;
  ::TSD::ShadowArchive* tschchartseriesmixedcolumnshadow_;
  ::TSD::ShadowArchive* tschchartseriesmixedlineshadow_;
  ::TSD::ShadowArchive* tschchartseriespieshadow_;
  ::TSD::ShadowArchive* tschchartseriesscattershadow_;
  ::TSD::StrokeArchive* tschchartseriesareastroke_;
  ::TSD::StrokeArchive* tschchartseriesbarstroke_;
  ::TSD::StrokeArchive* tschchartseriesbubblestroke_;
  ::TSD::StrokeArchive* tschchartserieslinestroke_;
  ::TSD::StrokeArchive* tschchartseriesmixedareastroke_;
  ::TSD::StrokeArchive* tschchartseriesmixedcolumnstroke_;
  ::TSD::StrokeArchive* tschchartseriesmixedlinestroke_;
  ::TSD::StrokeArchive* tschchartseriespiestroke_;
  ::TSD::StrokeArchive* tschchartseriesscatterstroke_;
  ::TSD::FillArchive* tschchartseriesareasymbolfill_;
  ::TSD::FillArchive* tschchartseriesbubblesymbolfill_;
  ::TSD::FillArchive* tschchartserieslinesymbolfill_;
  ::TSD::FillArchive* tschchartseriesmixedareasymbolfill_;
  ::TSD::FillArchive* tschchartseriesmixedlinesymbolfill_;
  ::TSD::FillArchive* tschchartseriesscattersymbolfill_;
  bool tschchartseriesareasymbolfilluseseriesfill_;
  bool tschchartserieslinesymbolfilluseseriesfill_;
  bool tschchartseriesmixedareasymbolfilluseseriesfill_;
  bool tschchartseriesmixedlinesymbolfilluseseriesfill_;
  bool tschchartseriesareasymbolfilluseseriesstroke_;
  bool tschchartseriesbubblesymbolfilluseseriesstroke_;
  bool tschchartserieslinesymbolfilluseseriesstroke_;
  bool tschchartseriesmixedareasymbolfilluseseriesstroke_;
  bool tschchartseriesmixedlinesymbolfilluseseriesstroke_;
  bool tschchartseriesscattersymbolfilluseseriesstroke_;
  float tschchartseriesareasymbolsize_;
  float tschchartserieslinesymbolsize_;
  float tschchartseriesmixedareasymbolsize_;
  float tschchartseriesmixedlinesymbolsize_;
  float tschchartseriesscattersymbolsize_;
  ::TSD::StrokeArchive* tschchartseriesareasymbolstroke_;
  ::TSD::StrokeArchive* tschchartseriesbubblesymbolstroke_;
  ::TSD::StrokeArchive* tschchartserieslinesymbolstroke_;
  ::TSD::StrokeArchive* tschchartseriesmixedareasymbolstroke_;
  ::TSD::StrokeArchive* tschchartseriesmixedlinesymbolstroke_;
  ::TSD::StrokeArchive* tschchartseriesscattersymbolstroke_;
  float tschchartseriesdefaulttrendlineequationopacity_;
  ::google::protobuf::int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex_;
  float tschchartseriesdefaulttrendlinersquaredopacity_;
  ::google::protobuf::int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_;
  ::TSD::ShadowArchive* tschchartseriesdefaulttrendlineshadow_;
  ::TSD::StrokeArchive* tschchartseriesdefaulttrendlinestroke_;
  ::google::protobuf::int32 tschchartseriesareavaluelabelposition_;
  ::google::protobuf::int32 tschchartseriesbarvaluelabelposition_;
  ::google::protobuf::int32 tschchartseriesbubblevaluelabelposition_;
  ::google::protobuf::int32 tschchartseriesdefaultvaluelabelposition_;
  ::google::protobuf::int32 tschchartserieslinevaluelabelposition_;
  ::google::protobuf::int32 tschchartseriesmixedareavaluelabelposition_;
  ::google::protobuf::int32 tschchartseriesmixedcolumnvaluelabelposition_;
  ::google::protobuf::int32 tschchartseriesmixedlinevaluelabelposition_;
  ::google::protobuf::int32 tschchartseriesscattervaluelabelposition_;
  ::google::protobuf::int32 tschchartseriesstackedareavaluelabelposition_;
  ::google::protobuf::int32 tschchartseriesstackedbarvaluelabelposition_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(97 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHArchives_2eGEN_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eGEN_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eGEN_2eproto();

  void InitAsDefaultInstance();
  static ChartSeriesStyleArchive* default_instance_;
};
// -------------------------------------------------------------------

class ChartSeriesNonStyleArchive : public ::google::protobuf::Message {
 public:
  ChartSeriesNonStyleArchive();
  virtual ~ChartSeriesNonStyleArchive();

  ChartSeriesNonStyleArchive(const ChartSeriesNonStyleArchive& from);

  inline ChartSeriesNonStyleArchive& operator=(const ChartSeriesNonStyleArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartSeriesNonStyleArchive& default_instance();

  void Swap(ChartSeriesNonStyleArchive* other);

  // implements Message ----------------------------------------------

  ChartSeriesNonStyleArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartSeriesNonStyleArchive& from);
  void MergeFrom(const ChartSeriesNonStyleArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float tschchartseriesbubbleadjustmentscale = 1;
  inline bool has_tschchartseriesbubbleadjustmentscale() const;
  inline void clear_tschchartseriesbubbleadjustmentscale();
  static const int kTschchartseriesbubbleadjustmentscaleFieldNumber = 1;
  inline float tschchartseriesbubbleadjustmentscale() const;
  inline void set_tschchartseriesbubbleadjustmentscale(float value);

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedata = 2;
  inline bool has_tschchartseriesdefaulterrorbarcustomnegativedata() const;
  inline void clear_tschchartseriesdefaulterrorbarcustomnegativedata();
  static const int kTschchartseriesdefaulterrorbarcustomnegativedataFieldNumber = 2;
  inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustomnegativedata() const;
  inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* mutable_tschchartseriesdefaulterrorbarcustomnegativedata();
  inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* release_tschchartseriesdefaulterrorbarcustomnegativedata();
  inline void set_allocated_tschchartseriesdefaulterrorbarcustomnegativedata(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedata);

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedatascatterx = 3;
  inline bool has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() const;
  inline void clear_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();
  static const int kTschchartseriesdefaulterrorbarcustomnegativedatascatterxFieldNumber = 3;
  inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustomnegativedatascatterx() const;
  inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* mutable_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();
  inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* release_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();
  inline void set_allocated_tschchartseriesdefaulterrorbarcustomnegativedatascatterx(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedatascatterx);

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedata = 4;
  inline bool has_tschchartseriesdefaulterrorbarcustompositivedata() const;
  inline void clear_tschchartseriesdefaulterrorbarcustompositivedata();
  static const int kTschchartseriesdefaulterrorbarcustompositivedataFieldNumber = 4;
  inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustompositivedata() const;
  inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* mutable_tschchartseriesdefaulterrorbarcustompositivedata();
  inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* release_tschchartseriesdefaulterrorbarcustompositivedata();
  inline void set_allocated_tschchartseriesdefaulterrorbarcustompositivedata(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedata);

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedatascatterx = 5;
  inline bool has_tschchartseriesdefaulterrorbarcustompositivedatascatterx() const;
  inline void clear_tschchartseriesdefaulterrorbarcustompositivedatascatterx();
  static const int kTschchartseriesdefaulterrorbarcustompositivedatascatterxFieldNumber = 5;
  inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustompositivedatascatterx() const;
  inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* mutable_tschchartseriesdefaulterrorbarcustompositivedatascatterx();
  inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* release_tschchartseriesdefaulterrorbarcustompositivedatascatterx();
  inline void set_allocated_tschchartseriesdefaulterrorbarcustompositivedatascatterx(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedatascatterx);

  // optional float tschchartseriesdefaulterrorbarfixedvalue = 6;
  inline bool has_tschchartseriesdefaulterrorbarfixedvalue() const;
  inline void clear_tschchartseriesdefaulterrorbarfixedvalue();
  static const int kTschchartseriesdefaulterrorbarfixedvalueFieldNumber = 6;
  inline float tschchartseriesdefaulterrorbarfixedvalue() const;
  inline void set_tschchartseriesdefaulterrorbarfixedvalue(float value);

  // optional float tschchartseriesdefaulterrorbarfixedvaluescatterx = 7;
  inline bool has_tschchartseriesdefaulterrorbarfixedvaluescatterx() const;
  inline void clear_tschchartseriesdefaulterrorbarfixedvaluescatterx();
  static const int kTschchartseriesdefaulterrorbarfixedvaluescatterxFieldNumber = 7;
  inline float tschchartseriesdefaulterrorbarfixedvaluescatterx() const;
  inline void set_tschchartseriesdefaulterrorbarfixedvaluescatterx(float value);

  // optional float tschchartseriesdefaulterrorbarpercentvalue = 8;
  inline bool has_tschchartseriesdefaulterrorbarpercentvalue() const;
  inline void clear_tschchartseriesdefaulterrorbarpercentvalue();
  static const int kTschchartseriesdefaulterrorbarpercentvalueFieldNumber = 8;
  inline float tschchartseriesdefaulterrorbarpercentvalue() const;
  inline void set_tschchartseriesdefaulterrorbarpercentvalue(float value);

  // optional float tschchartseriesdefaulterrorbarpercentvaluescatterx = 9;
  inline bool has_tschchartseriesdefaulterrorbarpercentvaluescatterx() const;
  inline void clear_tschchartseriesdefaulterrorbarpercentvaluescatterx();
  static const int kTschchartseriesdefaulterrorbarpercentvaluescatterxFieldNumber = 9;
  inline float tschchartseriesdefaulterrorbarpercentvaluescatterx() const;
  inline void set_tschchartseriesdefaulterrorbarpercentvaluescatterx(float value);

  // optional int32 tschchartseriesdefaulterrorbarsetting = 10;
  inline bool has_tschchartseriesdefaulterrorbarsetting() const;
  inline void clear_tschchartseriesdefaulterrorbarsetting();
  static const int kTschchartseriesdefaulterrorbarsettingFieldNumber = 10;
  inline ::google::protobuf::int32 tschchartseriesdefaulterrorbarsetting() const;
  inline void set_tschchartseriesdefaulterrorbarsetting(::google::protobuf::int32 value);

  // optional int32 tschchartseriesdefaulterrorbarsettingscatterx = 11;
  inline bool has_tschchartseriesdefaulterrorbarsettingscatterx() const;
  inline void clear_tschchartseriesdefaulterrorbarsettingscatterx();
  static const int kTschchartseriesdefaulterrorbarsettingscatterxFieldNumber = 11;
  inline ::google::protobuf::int32 tschchartseriesdefaulterrorbarsettingscatterx() const;
  inline void set_tschchartseriesdefaulterrorbarsettingscatterx(::google::protobuf::int32 value);

  // optional float tschchartseriesdefaulterrorbarstddevvalue = 12;
  inline bool has_tschchartseriesdefaulterrorbarstddevvalue() const;
  inline void clear_tschchartseriesdefaulterrorbarstddevvalue();
  static const int kTschchartseriesdefaulterrorbarstddevvalueFieldNumber = 12;
  inline float tschchartseriesdefaulterrorbarstddevvalue() const;
  inline void set_tschchartseriesdefaulterrorbarstddevvalue(float value);

  // optional float tschchartseriesdefaulterrorbarstddevvaluescatterx = 13;
  inline bool has_tschchartseriesdefaulterrorbarstddevvaluescatterx() const;
  inline void clear_tschchartseriesdefaulterrorbarstddevvaluescatterx();
  static const int kTschchartseriesdefaulterrorbarstddevvaluescatterxFieldNumber = 13;
  inline float tschchartseriesdefaulterrorbarstddevvaluescatterx() const;
  inline void set_tschchartseriesdefaulterrorbarstddevvaluescatterx(float value);

  // optional int32 tschchartseriesdefaulterrorbartype = 14;
  inline bool has_tschchartseriesdefaulterrorbartype() const;
  inline void clear_tschchartseriesdefaulterrorbartype();
  static const int kTschchartseriesdefaulterrorbartypeFieldNumber = 14;
  inline ::google::protobuf::int32 tschchartseriesdefaulterrorbartype() const;
  inline void set_tschchartseriesdefaulterrorbartype(::google::protobuf::int32 value);

  // optional int32 tschchartseriesdefaulterrorbartypescatterx = 15;
  inline bool has_tschchartseriesdefaulterrorbartypescatterx() const;
  inline void clear_tschchartseriesdefaulterrorbartypescatterx();
  static const int kTschchartseriesdefaulterrorbartypescatterxFieldNumber = 15;
  inline ::google::protobuf::int32 tschchartseriesdefaulterrorbartypescatterx() const;
  inline void set_tschchartseriesdefaulterrorbartypescatterx(::google::protobuf::int32 value);

  // optional float tschchartseriespielabelexplosion = 16;
  inline bool has_tschchartseriespielabelexplosion() const;
  inline void clear_tschchartseriespielabelexplosion();
  static const int kTschchartseriespielabelexplosionFieldNumber = 16;
  inline float tschchartseriespielabelexplosion() const;
  inline void set_tschchartseriespielabelexplosion(float value);

  // optional int32 tschchartseriesbubblelinetype = 17;
  inline bool has_tschchartseriesbubblelinetype() const;
  inline void clear_tschchartseriesbubblelinetype();
  static const int kTschchartseriesbubblelinetypeFieldNumber = 17;
  inline ::google::protobuf::int32 tschchartseriesbubblelinetype() const;
  inline void set_tschchartseriesbubblelinetype(::google::protobuf::int32 value);

  // optional int32 tschchartserieslinelinetype = 18;
  inline bool has_tschchartserieslinelinetype() const;
  inline void clear_tschchartserieslinelinetype();
  static const int kTschchartserieslinelinetypeFieldNumber = 18;
  inline ::google::protobuf::int32 tschchartserieslinelinetype() const;
  inline void set_tschchartserieslinelinetype(::google::protobuf::int32 value);

  // optional int32 tschchartseriesmixedlinelinetype = 19;
  inline bool has_tschchartseriesmixedlinelinetype() const;
  inline void clear_tschchartseriesmixedlinelinetype();
  static const int kTschchartseriesmixedlinelinetypeFieldNumber = 19;
  inline ::google::protobuf::int32 tschchartseriesmixedlinelinetype() const;
  inline void set_tschchartseriesmixedlinelinetype(::google::protobuf::int32 value);

  // optional int32 tschchartseriesscatterlinetype = 20;
  inline bool has_tschchartseriesscatterlinetype() const;
  inline void clear_tschchartseriesscatterlinetype();
  static const int kTschchartseriesscatterlinetypeFieldNumber = 20;
  inline ::google::protobuf::int32 tschchartseriesscatterlinetype() const;
  inline void set_tschchartseriesscatterlinetype(::google::protobuf::int32 value);

  // optional .TSK.FormatStructArchive tschchartseriesdefault1_0numberformat = 21;
  inline bool has_tschchartseriesdefault1_0numberformat() const;
  inline void clear_tschchartseriesdefault1_0numberformat();
  static const int kTschchartseriesdefault10NumberformatFieldNumber = 21;
  inline const ::TSK::FormatStructArchive& tschchartseriesdefault1_0numberformat() const;
  inline ::TSK::FormatStructArchive* mutable_tschchartseriesdefault1_0numberformat();
  inline ::TSK::FormatStructArchive* release_tschchartseriesdefault1_0numberformat();
  inline void set_allocated_tschchartseriesdefault1_0numberformat(::TSK::FormatStructArchive* tschchartseriesdefault1_0numberformat);

  // optional .TSK.FormatStructArchive tschchartseriesdefaultnumberformat = 98;
  inline bool has_tschchartseriesdefaultnumberformat() const;
  inline void clear_tschchartseriesdefaultnumberformat();
  static const int kTschchartseriesdefaultnumberformatFieldNumber = 98;
  inline const ::TSK::FormatStructArchive& tschchartseriesdefaultnumberformat() const;
  inline ::TSK::FormatStructArchive* mutable_tschchartseriesdefaultnumberformat();
  inline ::TSK::FormatStructArchive* release_tschchartseriesdefaultnumberformat();
  inline void set_allocated_tschchartseriesdefaultnumberformat(::TSK::FormatStructArchive* tschchartseriesdefaultnumberformat);

  // optional .TSK.FormatStructArchive tschchartseriesdefault1_0dateformat = 69;
  inline bool has_tschchartseriesdefault1_0dateformat() const;
  inline void clear_tschchartseriesdefault1_0dateformat();
  static const int kTschchartseriesdefault10DateformatFieldNumber = 69;
  inline const ::TSK::FormatStructArchive& tschchartseriesdefault1_0dateformat() const;
  inline ::TSK::FormatStructArchive* mutable_tschchartseriesdefault1_0dateformat();
  inline ::TSK::FormatStructArchive* release_tschchartseriesdefault1_0dateformat();
  inline void set_allocated_tschchartseriesdefault1_0dateformat(::TSK::FormatStructArchive* tschchartseriesdefault1_0dateformat);

  // optional .TSK.FormatStructArchive tschchartseriesdefaultdurationformat = 70;
  inline bool has_tschchartseriesdefaultdurationformat() const;
  inline void clear_tschchartseriesdefaultdurationformat();
  static const int kTschchartseriesdefaultdurationformatFieldNumber = 70;
  inline const ::TSK::FormatStructArchive& tschchartseriesdefaultdurationformat() const;
  inline ::TSK::FormatStructArchive* mutable_tschchartseriesdefaultdurationformat();
  inline ::TSK::FormatStructArchive* release_tschchartseriesdefaultdurationformat();
  inline void set_allocated_tschchartseriesdefaultdurationformat(::TSK::FormatStructArchive* tschchartseriesdefaultdurationformat);

  // optional .TSK.FormatStructArchive tschchartseriesdefaultdateformat = 71;
  inline bool has_tschchartseriesdefaultdateformat() const;
  inline void clear_tschchartseriesdefaultdateformat();
  static const int kTschchartseriesdefaultdateformatFieldNumber = 71;
  inline const ::TSK::FormatStructArchive& tschchartseriesdefaultdateformat() const;
  inline ::TSK::FormatStructArchive* mutable_tschchartseriesdefaultdateformat();
  inline ::TSK::FormatStructArchive* release_tschchartseriesdefaultdateformat();
  inline void set_allocated_tschchartseriesdefaultdateformat(::TSK::FormatStructArchive* tschchartseriesdefaultdateformat);

  // optional .TSK.FormatStructArchive tschchartseriespie1_0numberformat = 22;
  inline bool has_tschchartseriespie1_0numberformat() const;
  inline void clear_tschchartseriespie1_0numberformat();
  static const int kTschchartseriespie10NumberformatFieldNumber = 22;
  inline const ::TSK::FormatStructArchive& tschchartseriespie1_0numberformat() const;
  inline ::TSK::FormatStructArchive* mutable_tschchartseriespie1_0numberformat();
  inline ::TSK::FormatStructArchive* release_tschchartseriespie1_0numberformat();
  inline void set_allocated_tschchartseriespie1_0numberformat(::TSK::FormatStructArchive* tschchartseriespie1_0numberformat);

  // optional .TSK.FormatStructArchive tschchartseriespienumberformat = 99;
  inline bool has_tschchartseriespienumberformat() const;
  inline void clear_tschchartseriespienumberformat();
  static const int kTschchartseriespienumberformatFieldNumber = 99;
  inline const ::TSK::FormatStructArchive& tschchartseriespienumberformat() const;
  inline ::TSK::FormatStructArchive* mutable_tschchartseriespienumberformat();
  inline ::TSK::FormatStructArchive* release_tschchartseriespienumberformat();
  inline void set_allocated_tschchartseriespienumberformat(::TSK::FormatStructArchive* tschchartseriespienumberformat);

  // optional int32 tschchartseriesdefaultnumberformattype = 23;
  inline bool has_tschchartseriesdefaultnumberformattype() const;
  inline void clear_tschchartseriesdefaultnumberformattype();
  static const int kTschchartseriesdefaultnumberformattypeFieldNumber = 23;
  inline ::google::protobuf::int32 tschchartseriesdefaultnumberformattype() const;
  inline void set_tschchartseriesdefaultnumberformattype(::google::protobuf::int32 value);

  // optional int32 tschchartseriespienumberformattype = 24;
  inline bool has_tschchartseriespienumberformattype() const;
  inline void clear_tschchartseriespienumberformattype();
  static const int kTschchartseriespienumberformattypeFieldNumber = 24;
  inline ::google::protobuf::int32 tschchartseriespienumberformattype() const;
  inline void set_tschchartseriespienumberformattype(::google::protobuf::int32 value);

  // optional .TSK.FormatStructArchive tschchartseriesstackedpercentnumberformat = 25;
  inline bool has_tschchartseriesstackedpercentnumberformat() const;
  inline void clear_tschchartseriesstackedpercentnumberformat();
  static const int kTschchartseriesstackedpercentnumberformatFieldNumber = 25;
  inline const ::TSK::FormatStructArchive& tschchartseriesstackedpercentnumberformat() const;
  inline ::TSK::FormatStructArchive* mutable_tschchartseriesstackedpercentnumberformat();
  inline ::TSK::FormatStructArchive* release_tschchartseriesstackedpercentnumberformat();
  inline void set_allocated_tschchartseriesstackedpercentnumberformat(::TSK::FormatStructArchive* tschchartseriesstackedpercentnumberformat);

  // optional int32 tschchartseriesdefaultseriestype = 26;
  inline bool has_tschchartseriesdefaultseriestype() const;
  inline void clear_tschchartseriesdefaultseriestype();
  static const int kTschchartseriesdefaultseriestypeFieldNumber = 26;
  inline ::google::protobuf::int32 tschchartseriesdefaultseriestype() const;
  inline void set_tschchartseriesdefaultseriestype(::google::protobuf::int32 value);

  // optional bool tschchartseriesdefaultshowerrorbar = 27;
  inline bool has_tschchartseriesdefaultshowerrorbar() const;
  inline void clear_tschchartseriesdefaultshowerrorbar();
  static const int kTschchartseriesdefaultshowerrorbarFieldNumber = 27;
  inline bool tschchartseriesdefaultshowerrorbar() const;
  inline void set_tschchartseriesdefaultshowerrorbar(bool value);

  // optional bool tschchartseriesdefaultshowerrorbarscatterx = 28;
  inline bool has_tschchartseriesdefaultshowerrorbarscatterx() const;
  inline void clear_tschchartseriesdefaultshowerrorbarscatterx();
  static const int kTschchartseriesdefaultshowerrorbarscatterxFieldNumber = 28;
  inline bool tschchartseriesdefaultshowerrorbarscatterx() const;
  inline void set_tschchartseriesdefaultshowerrorbarscatterx(bool value);

  // optional bool tschchartseriesscattershowline = 29;
  inline bool has_tschchartseriesscattershowline() const;
  inline void clear_tschchartseriesscattershowline();
  static const int kTschchartseriesscattershowlineFieldNumber = 29;
  inline bool tschchartseriesscattershowline() const;
  inline void set_tschchartseriesscattershowline(bool value);

  // optional bool tschchartseriesbubbleshownegativedata = 30;
  inline bool has_tschchartseriesbubbleshownegativedata() const;
  inline void clear_tschchartseriesbubbleshownegativedata();
  static const int kTschchartseriesbubbleshownegativedataFieldNumber = 30;
  inline bool tschchartseriesbubbleshownegativedata() const;
  inline void set_tschchartseriesbubbleshownegativedata(bool value);

  // optional bool tschchartseriespieshowserieslabels = 31;
  inline bool has_tschchartseriespieshowserieslabels() const;
  inline void clear_tschchartseriespieshowserieslabels();
  static const int kTschchartseriespieshowserieslabelsFieldNumber = 31;
  inline bool tschchartseriespieshowserieslabels() const;
  inline void set_tschchartseriespieshowserieslabels(bool value);

  // optional bool tschchartseriesareashowsymbol = 32;
  inline bool has_tschchartseriesareashowsymbol() const;
  inline void clear_tschchartseriesareashowsymbol();
  static const int kTschchartseriesareashowsymbolFieldNumber = 32;
  inline bool tschchartseriesareashowsymbol() const;
  inline void set_tschchartseriesareashowsymbol(bool value);

  // optional bool tschchartserieslineshowsymbol = 33;
  inline bool has_tschchartserieslineshowsymbol() const;
  inline void clear_tschchartserieslineshowsymbol();
  static const int kTschchartserieslineshowsymbolFieldNumber = 33;
  inline bool tschchartserieslineshowsymbol() const;
  inline void set_tschchartserieslineshowsymbol(bool value);

  // optional bool tschchartseriesmixedareashowsymbol = 34;
  inline bool has_tschchartseriesmixedareashowsymbol() const;
  inline void clear_tschchartseriesmixedareashowsymbol();
  static const int kTschchartseriesmixedareashowsymbolFieldNumber = 34;
  inline bool tschchartseriesmixedareashowsymbol() const;
  inline void set_tschchartseriesmixedareashowsymbol(bool value);

  // optional bool tschchartseriesmixedlineshowsymbol = 35;
  inline bool has_tschchartseriesmixedlineshowsymbol() const;
  inline void clear_tschchartseriesmixedlineshowsymbol();
  static const int kTschchartseriesmixedlineshowsymbolFieldNumber = 35;
  inline bool tschchartseriesmixedlineshowsymbol() const;
  inline void set_tschchartseriesmixedlineshowsymbol(bool value);

  // optional bool tschchartseriesscattershowsymbol = 36;
  inline bool has_tschchartseriesscattershowsymbol() const;
  inline void clear_tschchartseriesscattershowsymbol();
  static const int kTschchartseriesscattershowsymbolFieldNumber = 36;
  inline bool tschchartseriesscattershowsymbol() const;
  inline void set_tschchartseriesscattershowsymbol(bool value);

  // optional bool tschchartseriesdefaultshowtrendline = 37;
  inline bool has_tschchartseriesdefaultshowtrendline() const;
  inline void clear_tschchartseriesdefaultshowtrendline();
  static const int kTschchartseriesdefaultshowtrendlineFieldNumber = 37;
  inline bool tschchartseriesdefaultshowtrendline() const;
  inline void set_tschchartseriesdefaultshowtrendline(bool value);

  // optional bool tschchartseriesareashowvaluelabels = 38;
  inline bool has_tschchartseriesareashowvaluelabels() const;
  inline void clear_tschchartseriesareashowvaluelabels();
  static const int kTschchartseriesareashowvaluelabelsFieldNumber = 38;
  inline bool tschchartseriesareashowvaluelabels() const;
  inline void set_tschchartseriesareashowvaluelabels(bool value);

  // optional bool tschchartseriesbarshowvaluelabels = 39;
  inline bool has_tschchartseriesbarshowvaluelabels() const;
  inline void clear_tschchartseriesbarshowvaluelabels();
  static const int kTschchartseriesbarshowvaluelabelsFieldNumber = 39;
  inline bool tschchartseriesbarshowvaluelabels() const;
  inline void set_tschchartseriesbarshowvaluelabels(bool value);

  // optional bool tschchartseriesbubbleshowvaluelabels = 40;
  inline bool has_tschchartseriesbubbleshowvaluelabels() const;
  inline void clear_tschchartseriesbubbleshowvaluelabels();
  static const int kTschchartseriesbubbleshowvaluelabelsFieldNumber = 40;
  inline bool tschchartseriesbubbleshowvaluelabels() const;
  inline void set_tschchartseriesbubbleshowvaluelabels(bool value);

  // optional bool tschchartseriesdefaultshowvaluelabels = 41;
  inline bool has_tschchartseriesdefaultshowvaluelabels() const;
  inline void clear_tschchartseriesdefaultshowvaluelabels();
  static const int kTschchartseriesdefaultshowvaluelabelsFieldNumber = 41;
  inline bool tschchartseriesdefaultshowvaluelabels() const;
  inline void set_tschchartseriesdefaultshowvaluelabels(bool value);

  // optional bool tschchartserieslineshowvaluelabels = 42;
  inline bool has_tschchartserieslineshowvaluelabels() const;
  inline void clear_tschchartserieslineshowvaluelabels();
  static const int kTschchartserieslineshowvaluelabelsFieldNumber = 42;
  inline bool tschchartserieslineshowvaluelabels() const;
  inline void set_tschchartserieslineshowvaluelabels(bool value);

  // optional bool tschchartseriesmixedshowvaluelabels = 43;
  inline bool has_tschchartseriesmixedshowvaluelabels() const;
  inline void clear_tschchartseriesmixedshowvaluelabels();
  static const int kTschchartseriesmixedshowvaluelabelsFieldNumber = 43;
  inline bool tschchartseriesmixedshowvaluelabels() const;
  inline void set_tschchartseriesmixedshowvaluelabels(bool value);

  // optional bool tschchartseriespieshowvaluelabels = 44;
  inline bool has_tschchartseriespieshowvaluelabels() const;
  inline void clear_tschchartseriespieshowvaluelabels();
  static const int kTschchartseriespieshowvaluelabelsFieldNumber = 44;
  inline bool tschchartseriespieshowvaluelabels() const;
  inline void set_tschchartseriespieshowvaluelabels(bool value);

  // optional bool tschchartseriesscattershowvaluelabels = 45;
  inline bool has_tschchartseriesscattershowvaluelabels() const;
  inline void clear_tschchartseriesscattershowvaluelabels();
  static const int kTschchartseriesscattershowvaluelabelsFieldNumber = 45;
  inline bool tschchartseriesscattershowvaluelabels() const;
  inline void set_tschchartseriesscattershowvaluelabels(bool value);

  // optional int32 tschchartseriesbubblesizedimension = 46;
  inline bool has_tschchartseriesbubblesizedimension() const;
  inline void clear_tschchartseriesbubblesizedimension();
  static const int kTschchartseriesbubblesizedimensionFieldNumber = 46;
  inline ::google::protobuf::int32 tschchartseriesbubblesizedimension() const;
  inline void set_tschchartseriesbubblesizedimension(::google::protobuf::int32 value);

  // optional int32 tschchartseriesareasymboltype = 47;
  inline bool has_tschchartseriesareasymboltype() const;
  inline void clear_tschchartseriesareasymboltype();
  static const int kTschchartseriesareasymboltypeFieldNumber = 47;
  inline ::google::protobuf::int32 tschchartseriesareasymboltype() const;
  inline void set_tschchartseriesareasymboltype(::google::protobuf::int32 value);

  // optional int32 tschchartserieslinesymboltype = 48;
  inline bool has_tschchartserieslinesymboltype() const;
  inline void clear_tschchartserieslinesymboltype();
  static const int kTschchartserieslinesymboltypeFieldNumber = 48;
  inline ::google::protobuf::int32 tschchartserieslinesymboltype() const;
  inline void set_tschchartserieslinesymboltype(::google::protobuf::int32 value);

  // optional int32 tschchartseriesmixedareasymboltype = 49;
  inline bool has_tschchartseriesmixedareasymboltype() const;
  inline void clear_tschchartseriesmixedareasymboltype();
  static const int kTschchartseriesmixedareasymboltypeFieldNumber = 49;
  inline ::google::protobuf::int32 tschchartseriesmixedareasymboltype() const;
  inline void set_tschchartseriesmixedareasymboltype(::google::protobuf::int32 value);

  // optional int32 tschchartseriesmixedlinesymboltype = 50;
  inline bool has_tschchartseriesmixedlinesymboltype() const;
  inline void clear_tschchartseriesmixedlinesymboltype();
  static const int kTschchartseriesmixedlinesymboltypeFieldNumber = 50;
  inline ::google::protobuf::int32 tschchartseriesmixedlinesymboltype() const;
  inline void set_tschchartseriesmixedlinesymboltype(::google::protobuf::int32 value);

  // optional int32 tschchartseriesscattersymboltype = 51;
  inline bool has_tschchartseriesscattersymboltype() const;
  inline void clear_tschchartseriesscattersymboltype();
  static const int kTschchartseriesscattersymboltypeFieldNumber = 51;
  inline ::google::protobuf::int32 tschchartseriesscattersymboltype() const;
  inline void set_tschchartseriesscattersymboltype(::google::protobuf::int32 value);

  // optional float tschchartseriesdefaulttrendlineequationoffsetx = 52;
  inline bool has_tschchartseriesdefaulttrendlineequationoffsetx() const;
  inline void clear_tschchartseriesdefaulttrendlineequationoffsetx();
  static const int kTschchartseriesdefaulttrendlineequationoffsetxFieldNumber = 52;
  inline float tschchartseriesdefaulttrendlineequationoffsetx() const;
  inline void set_tschchartseriesdefaulttrendlineequationoffsetx(float value);

  // optional float tschchartseriesdefaulttrendlineequationoffsety = 53;
  inline bool has_tschchartseriesdefaulttrendlineequationoffsety() const;
  inline void clear_tschchartseriesdefaulttrendlineequationoffsety();
  static const int kTschchartseriesdefaulttrendlineequationoffsetyFieldNumber = 53;
  inline float tschchartseriesdefaulttrendlineequationoffsety() const;
  inline void set_tschchartseriesdefaulttrendlineequationoffsety(float value);

  // optional string tschchartseriesdefaulttrendlinelabelstring = 54;
  inline bool has_tschchartseriesdefaulttrendlinelabelstring() const;
  inline void clear_tschchartseriesdefaulttrendlinelabelstring();
  static const int kTschchartseriesdefaulttrendlinelabelstringFieldNumber = 54;
  inline const ::std::string& tschchartseriesdefaulttrendlinelabelstring() const;
  inline void set_tschchartseriesdefaulttrendlinelabelstring(const ::std::string& value);
  inline void set_tschchartseriesdefaulttrendlinelabelstring(const char* value);
  inline void set_tschchartseriesdefaulttrendlinelabelstring(const char* value, size_t size);
  inline ::std::string* mutable_tschchartseriesdefaulttrendlinelabelstring();
  inline ::std::string* release_tschchartseriesdefaulttrendlinelabelstring();
  inline void set_allocated_tschchartseriesdefaulttrendlinelabelstring(::std::string* tschchartseriesdefaulttrendlinelabelstring);

  // optional int32 tschchartseriesdefaulttrendlineorder = 55;
  inline bool has_tschchartseriesdefaulttrendlineorder() const;
  inline void clear_tschchartseriesdefaulttrendlineorder();
  static const int kTschchartseriesdefaulttrendlineorderFieldNumber = 55;
  inline ::google::protobuf::int32 tschchartseriesdefaulttrendlineorder() const;
  inline void set_tschchartseriesdefaulttrendlineorder(::google::protobuf::int32 value);

  // optional int32 tschchartseriesdefaulttrendlineperiod = 56;
  inline bool has_tschchartseriesdefaulttrendlineperiod() const;
  inline void clear_tschchartseriesdefaulttrendlineperiod();
  static const int kTschchartseriesdefaulttrendlineperiodFieldNumber = 56;
  inline ::google::protobuf::int32 tschchartseriesdefaulttrendlineperiod() const;
  inline void set_tschchartseriesdefaulttrendlineperiod(::google::protobuf::int32 value);

  // optional float tschchartseriesdefaulttrendlinersquaredoffsetx = 57;
  inline bool has_tschchartseriesdefaulttrendlinersquaredoffsetx() const;
  inline void clear_tschchartseriesdefaulttrendlinersquaredoffsetx();
  static const int kTschchartseriesdefaulttrendlinersquaredoffsetxFieldNumber = 57;
  inline float tschchartseriesdefaulttrendlinersquaredoffsetx() const;
  inline void set_tschchartseriesdefaulttrendlinersquaredoffsetx(float value);

  // optional float tschchartseriesdefaulttrendlinersquaredoffsety = 58;
  inline bool has_tschchartseriesdefaulttrendlinersquaredoffsety() const;
  inline void clear_tschchartseriesdefaulttrendlinersquaredoffsety();
  static const int kTschchartseriesdefaulttrendlinersquaredoffsetyFieldNumber = 58;
  inline float tschchartseriesdefaulttrendlinersquaredoffsety() const;
  inline void set_tschchartseriesdefaulttrendlinersquaredoffsety(float value);

  // optional bool tschchartseriesdefaulttrendlineshowequation = 59;
  inline bool has_tschchartseriesdefaulttrendlineshowequation() const;
  inline void clear_tschchartseriesdefaulttrendlineshowequation();
  static const int kTschchartseriesdefaulttrendlineshowequationFieldNumber = 59;
  inline bool tschchartseriesdefaulttrendlineshowequation() const;
  inline void set_tschchartseriesdefaulttrendlineshowequation(bool value);

  // optional bool tschchartseriesdefaulttrendlineshowlabel = 60;
  inline bool has_tschchartseriesdefaulttrendlineshowlabel() const;
  inline void clear_tschchartseriesdefaulttrendlineshowlabel();
  static const int kTschchartseriesdefaulttrendlineshowlabelFieldNumber = 60;
  inline bool tschchartseriesdefaulttrendlineshowlabel() const;
  inline void set_tschchartseriesdefaulttrendlineshowlabel(bool value);

  // optional bool tschchartseriesdefaulttrendlineshowr2value = 61;
  inline bool has_tschchartseriesdefaulttrendlineshowr2value() const;
  inline void clear_tschchartseriesdefaulttrendlineshowr2value();
  static const int kTschchartseriesdefaulttrendlineshowr2ValueFieldNumber = 61;
  inline bool tschchartseriesdefaulttrendlineshowr2value() const;
  inline void set_tschchartseriesdefaulttrendlineshowr2value(bool value);

  // optional int32 tschchartseriesdefaulttrendlinetype = 62;
  inline bool has_tschchartseriesdefaulttrendlinetype() const;
  inline void clear_tschchartseriesdefaulttrendlinetype();
  static const int kTschchartseriesdefaulttrendlinetypeFieldNumber = 62;
  inline ::google::protobuf::int32 tschchartseriesdefaulttrendlinetype() const;
  inline void set_tschchartseriesdefaulttrendlinetype(::google::protobuf::int32 value);

  // optional float tschchartseriespiewedgeexplosion = 63;
  inline bool has_tschchartseriespiewedgeexplosion() const;
  inline void clear_tschchartseriespiewedgeexplosion();
  static const int kTschchartseriespiewedgeexplosionFieldNumber = 63;
  inline float tschchartseriespiewedgeexplosion() const;
  inline void set_tschchartseriespiewedgeexplosion(float value);

  // optional int32 tschchartseriesdefaultyaxisordinal = 64;
  inline bool has_tschchartseriesdefaultyaxisordinal() const;
  inline void clear_tschchartseriesdefaultyaxisordinal();
  static const int kTschchartseriesdefaultyaxisordinalFieldNumber = 64;
  inline ::google::protobuf::int32 tschchartseriesdefaultyaxisordinal() const;
  inline void set_tschchartseriesdefaultyaxisordinal(::google::protobuf::int32 value);

  // optional bool tschchartseriesbubbleshowserieslabels = 65;
  inline bool has_tschchartseriesbubbleshowserieslabels() const;
  inline void clear_tschchartseriesbubbleshowserieslabels();
  static const int kTschchartseriesbubbleshowserieslabelsFieldNumber = 65;
  inline bool tschchartseriesbubbleshowserieslabels() const;
  inline void set_tschchartseriesbubbleshowserieslabels(bool value);

  // optional int32 tschchartseriesbubblevaluelabelsaxis = 66;
  inline bool has_tschchartseriesbubblevaluelabelsaxis() const;
  inline void clear_tschchartseriesbubblevaluelabelsaxis();
  static const int kTschchartseriesbubblevaluelabelsaxisFieldNumber = 66;
  inline ::google::protobuf::int32 tschchartseriesbubblevaluelabelsaxis() const;
  inline void set_tschchartseriesbubblevaluelabelsaxis(::google::protobuf::int32 value);

  // optional bool tschchartseriesscattershowserieslabels = 67;
  inline bool has_tschchartseriesscattershowserieslabels() const;
  inline void clear_tschchartseriesscattershowserieslabels();
  static const int kTschchartseriesscattershowserieslabelsFieldNumber = 67;
  inline bool tschchartseriesscattershowserieslabels() const;
  inline void set_tschchartseriesscattershowserieslabels(bool value);

  // optional int32 tschchartseriesscattervaluelabelsaxis = 68;
  inline bool has_tschchartseriesscattervaluelabelsaxis() const;
  inline void clear_tschchartseriesscattervaluelabelsaxis();
  static const int kTschchartseriesscattervaluelabelsaxisFieldNumber = 68;
  inline ::google::protobuf::int32 tschchartseriesscattervaluelabelsaxis() const;
  inline void set_tschchartseriesscattervaluelabelsaxis(::google::protobuf::int32 value);

  // optional bool tschchartseriesdefaultshowlabelsinfront = 100;
  inline bool has_tschchartseriesdefaultshowlabelsinfront() const;
  inline void clear_tschchartseriesdefaultshowlabelsinfront();
  static const int kTschchartseriesdefaultshowlabelsinfrontFieldNumber = 100;
  inline bool tschchartseriesdefaultshowlabelsinfront() const;
  inline void set_tschchartseriesdefaultshowlabelsinfront(bool value);

  // optional bool tschchartseriesbubbleshowlabelsinfront = 101;
  inline bool has_tschchartseriesbubbleshowlabelsinfront() const;
  inline void clear_tschchartseriesbubbleshowlabelsinfront();
  static const int kTschchartseriesbubbleshowlabelsinfrontFieldNumber = 101;
  inline bool tschchartseriesbubbleshowlabelsinfront() const;
  inline void set_tschchartseriesbubbleshowlabelsinfront(bool value);

  static const int kCurrentFieldNumber = 10000;
  static ::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartSeriesNonStyleArchive,
      ::google::protobuf::internal::MessageTypeTraits< ::TSCH::Generated::ChartSeriesNonStyleArchive >, 11, false >
    current;
  // @@protoc_insertion_point(class_scope:TSCH.Generated.ChartSeriesNonStyleArchive)
 private:
  inline void set_has_tschchartseriesbubbleadjustmentscale();
  inline void clear_has_tschchartseriesbubbleadjustmentscale();
  inline void set_has_tschchartseriesdefaulterrorbarcustomnegativedata();
  inline void clear_has_tschchartseriesdefaulterrorbarcustomnegativedata();
  inline void set_has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();
  inline void clear_has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();
  inline void set_has_tschchartseriesdefaulterrorbarcustompositivedata();
  inline void clear_has_tschchartseriesdefaulterrorbarcustompositivedata();
  inline void set_has_tschchartseriesdefaulterrorbarcustompositivedatascatterx();
  inline void clear_has_tschchartseriesdefaulterrorbarcustompositivedatascatterx();
  inline void set_has_tschchartseriesdefaulterrorbarfixedvalue();
  inline void clear_has_tschchartseriesdefaulterrorbarfixedvalue();
  inline void set_has_tschchartseriesdefaulterrorbarfixedvaluescatterx();
  inline void clear_has_tschchartseriesdefaulterrorbarfixedvaluescatterx();
  inline void set_has_tschchartseriesdefaulterrorbarpercentvalue();
  inline void clear_has_tschchartseriesdefaulterrorbarpercentvalue();
  inline void set_has_tschchartseriesdefaulterrorbarpercentvaluescatterx();
  inline void clear_has_tschchartseriesdefaulterrorbarpercentvaluescatterx();
  inline void set_has_tschchartseriesdefaulterrorbarsetting();
  inline void clear_has_tschchartseriesdefaulterrorbarsetting();
  inline void set_has_tschchartseriesdefaulterrorbarsettingscatterx();
  inline void clear_has_tschchartseriesdefaulterrorbarsettingscatterx();
  inline void set_has_tschchartseriesdefaulterrorbarstddevvalue();
  inline void clear_has_tschchartseriesdefaulterrorbarstddevvalue();
  inline void set_has_tschchartseriesdefaulterrorbarstddevvaluescatterx();
  inline void clear_has_tschchartseriesdefaulterrorbarstddevvaluescatterx();
  inline void set_has_tschchartseriesdefaulterrorbartype();
  inline void clear_has_tschchartseriesdefaulterrorbartype();
  inline void set_has_tschchartseriesdefaulterrorbartypescatterx();
  inline void clear_has_tschchartseriesdefaulterrorbartypescatterx();
  inline void set_has_tschchartseriespielabelexplosion();
  inline void clear_has_tschchartseriespielabelexplosion();
  inline void set_has_tschchartseriesbubblelinetype();
  inline void clear_has_tschchartseriesbubblelinetype();
  inline void set_has_tschchartserieslinelinetype();
  inline void clear_has_tschchartserieslinelinetype();
  inline void set_has_tschchartseriesmixedlinelinetype();
  inline void clear_has_tschchartseriesmixedlinelinetype();
  inline void set_has_tschchartseriesscatterlinetype();
  inline void clear_has_tschchartseriesscatterlinetype();
  inline void set_has_tschchartseriesdefault1_0numberformat();
  inline void clear_has_tschchartseriesdefault1_0numberformat();
  inline void set_has_tschchartseriesdefaultnumberformat();
  inline void clear_has_tschchartseriesdefaultnumberformat();
  inline void set_has_tschchartseriesdefault1_0dateformat();
  inline void clear_has_tschchartseriesdefault1_0dateformat();
  inline void set_has_tschchartseriesdefaultdurationformat();
  inline void clear_has_tschchartseriesdefaultdurationformat();
  inline void set_has_tschchartseriesdefaultdateformat();
  inline void clear_has_tschchartseriesdefaultdateformat();
  inline void set_has_tschchartseriespie1_0numberformat();
  inline void clear_has_tschchartseriespie1_0numberformat();
  inline void set_has_tschchartseriespienumberformat();
  inline void clear_has_tschchartseriespienumberformat();
  inline void set_has_tschchartseriesdefaultnumberformattype();
  inline void clear_has_tschchartseriesdefaultnumberformattype();
  inline void set_has_tschchartseriespienumberformattype();
  inline void clear_has_tschchartseriespienumberformattype();
  inline void set_has_tschchartseriesstackedpercentnumberformat();
  inline void clear_has_tschchartseriesstackedpercentnumberformat();
  inline void set_has_tschchartseriesdefaultseriestype();
  inline void clear_has_tschchartseriesdefaultseriestype();
  inline void set_has_tschchartseriesdefaultshowerrorbar();
  inline void clear_has_tschchartseriesdefaultshowerrorbar();
  inline void set_has_tschchartseriesdefaultshowerrorbarscatterx();
  inline void clear_has_tschchartseriesdefaultshowerrorbarscatterx();
  inline void set_has_tschchartseriesscattershowline();
  inline void clear_has_tschchartseriesscattershowline();
  inline void set_has_tschchartseriesbubbleshownegativedata();
  inline void clear_has_tschchartseriesbubbleshownegativedata();
  inline void set_has_tschchartseriespieshowserieslabels();
  inline void clear_has_tschchartseriespieshowserieslabels();
  inline void set_has_tschchartseriesareashowsymbol();
  inline void clear_has_tschchartseriesareashowsymbol();
  inline void set_has_tschchartserieslineshowsymbol();
  inline void clear_has_tschchartserieslineshowsymbol();
  inline void set_has_tschchartseriesmixedareashowsymbol();
  inline void clear_has_tschchartseriesmixedareashowsymbol();
  inline void set_has_tschchartseriesmixedlineshowsymbol();
  inline void clear_has_tschchartseriesmixedlineshowsymbol();
  inline void set_has_tschchartseriesscattershowsymbol();
  inline void clear_has_tschchartseriesscattershowsymbol();
  inline void set_has_tschchartseriesdefaultshowtrendline();
  inline void clear_has_tschchartseriesdefaultshowtrendline();
  inline void set_has_tschchartseriesareashowvaluelabels();
  inline void clear_has_tschchartseriesareashowvaluelabels();
  inline void set_has_tschchartseriesbarshowvaluelabels();
  inline void clear_has_tschchartseriesbarshowvaluelabels();
  inline void set_has_tschchartseriesbubbleshowvaluelabels();
  inline void clear_has_tschchartseriesbubbleshowvaluelabels();
  inline void set_has_tschchartseriesdefaultshowvaluelabels();
  inline void clear_has_tschchartseriesdefaultshowvaluelabels();
  inline void set_has_tschchartserieslineshowvaluelabels();
  inline void clear_has_tschchartserieslineshowvaluelabels();
  inline void set_has_tschchartseriesmixedshowvaluelabels();
  inline void clear_has_tschchartseriesmixedshowvaluelabels();
  inline void set_has_tschchartseriespieshowvaluelabels();
  inline void clear_has_tschchartseriespieshowvaluelabels();
  inline void set_has_tschchartseriesscattershowvaluelabels();
  inline void clear_has_tschchartseriesscattershowvaluelabels();
  inline void set_has_tschchartseriesbubblesizedimension();
  inline void clear_has_tschchartseriesbubblesizedimension();
  inline void set_has_tschchartseriesareasymboltype();
  inline void clear_has_tschchartseriesareasymboltype();
  inline void set_has_tschchartserieslinesymboltype();
  inline void clear_has_tschchartserieslinesymboltype();
  inline void set_has_tschchartseriesmixedareasymboltype();
  inline void clear_has_tschchartseriesmixedareasymboltype();
  inline void set_has_tschchartseriesmixedlinesymboltype();
  inline void clear_has_tschchartseriesmixedlinesymboltype();
  inline void set_has_tschchartseriesscattersymboltype();
  inline void clear_has_tschchartseriesscattersymboltype();
  inline void set_has_tschchartseriesdefaulttrendlineequationoffsetx();
  inline void clear_has_tschchartseriesdefaulttrendlineequationoffsetx();
  inline void set_has_tschchartseriesdefaulttrendlineequationoffsety();
  inline void clear_has_tschchartseriesdefaulttrendlineequationoffsety();
  inline void set_has_tschchartseriesdefaulttrendlinelabelstring();
  inline void clear_has_tschchartseriesdefaulttrendlinelabelstring();
  inline void set_has_tschchartseriesdefaulttrendlineorder();
  inline void clear_has_tschchartseriesdefaulttrendlineorder();
  inline void set_has_tschchartseriesdefaulttrendlineperiod();
  inline void clear_has_tschchartseriesdefaulttrendlineperiod();
  inline void set_has_tschchartseriesdefaulttrendlinersquaredoffsetx();
  inline void clear_has_tschchartseriesdefaulttrendlinersquaredoffsetx();
  inline void set_has_tschchartseriesdefaulttrendlinersquaredoffsety();
  inline void clear_has_tschchartseriesdefaulttrendlinersquaredoffsety();
  inline void set_has_tschchartseriesdefaulttrendlineshowequation();
  inline void clear_has_tschchartseriesdefaulttrendlineshowequation();
  inline void set_has_tschchartseriesdefaulttrendlineshowlabel();
  inline void clear_has_tschchartseriesdefaulttrendlineshowlabel();
  inline void set_has_tschchartseriesdefaulttrendlineshowr2value();
  inline void clear_has_tschchartseriesdefaulttrendlineshowr2value();
  inline void set_has_tschchartseriesdefaulttrendlinetype();
  inline void clear_has_tschchartseriesdefaulttrendlinetype();
  inline void set_has_tschchartseriespiewedgeexplosion();
  inline void clear_has_tschchartseriespiewedgeexplosion();
  inline void set_has_tschchartseriesdefaultyaxisordinal();
  inline void clear_has_tschchartseriesdefaultyaxisordinal();
  inline void set_has_tschchartseriesbubbleshowserieslabels();
  inline void clear_has_tschchartseriesbubbleshowserieslabels();
  inline void set_has_tschchartseriesbubblevaluelabelsaxis();
  inline void clear_has_tschchartseriesbubblevaluelabelsaxis();
  inline void set_has_tschchartseriesscattershowserieslabels();
  inline void clear_has_tschchartseriesscattershowserieslabels();
  inline void set_has_tschchartseriesscattervaluelabelsaxis();
  inline void clear_has_tschchartseriesscattervaluelabelsaxis();
  inline void set_has_tschchartseriesdefaultshowlabelsinfront();
  inline void clear_has_tschchartseriesdefaultshowlabelsinfront();
  inline void set_has_tschchartseriesbubbleshowlabelsinfront();
  inline void clear_has_tschchartseriesbubbleshowlabelsinfront();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedata_;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
  float tschchartseriesbubbleadjustmentscale_;
  float tschchartseriesdefaulterrorbarfixedvalue_;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedata_;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
  float tschchartseriesdefaulterrorbarfixedvaluescatterx_;
  float tschchartseriesdefaulterrorbarpercentvalue_;
  float tschchartseriesdefaulterrorbarpercentvaluescatterx_;
  ::google::protobuf::int32 tschchartseriesdefaulterrorbarsetting_;
  ::google::protobuf::int32 tschchartseriesdefaulterrorbarsettingscatterx_;
  float tschchartseriesdefaulterrorbarstddevvalue_;
  float tschchartseriesdefaulterrorbarstddevvaluescatterx_;
  ::google::protobuf::int32 tschchartseriesdefaulterrorbartype_;
  ::google::protobuf::int32 tschchartseriesdefaulterrorbartypescatterx_;
  float tschchartseriespielabelexplosion_;
  ::google::protobuf::int32 tschchartseriesbubblelinetype_;
  ::google::protobuf::int32 tschchartserieslinelinetype_;
  ::google::protobuf::int32 tschchartseriesmixedlinelinetype_;
  ::google::protobuf::int32 tschchartseriesscatterlinetype_;
  ::TSK::FormatStructArchive* tschchartseriesdefault1_0numberformat_;
  ::TSK::FormatStructArchive* tschchartseriesdefaultnumberformat_;
  ::TSK::FormatStructArchive* tschchartseriesdefault1_0dateformat_;
  ::TSK::FormatStructArchive* tschchartseriesdefaultdurationformat_;
  ::TSK::FormatStructArchive* tschchartseriesdefaultdateformat_;
  ::TSK::FormatStructArchive* tschchartseriespie1_0numberformat_;
  ::TSK::FormatStructArchive* tschchartseriespienumberformat_;
  ::google::protobuf::int32 tschchartseriesdefaultnumberformattype_;
  ::google::protobuf::int32 tschchartseriespienumberformattype_;
  ::TSK::FormatStructArchive* tschchartseriesstackedpercentnumberformat_;
  ::google::protobuf::int32 tschchartseriesdefaultseriestype_;
  bool tschchartseriesdefaultshowerrorbar_;
  bool tschchartseriesdefaultshowerrorbarscatterx_;
  bool tschchartseriesscattershowline_;
  bool tschchartseriesbubbleshownegativedata_;
  bool tschchartseriespieshowserieslabels_;
  bool tschchartseriesareashowsymbol_;
  bool tschchartserieslineshowsymbol_;
  bool tschchartseriesmixedareashowsymbol_;
  bool tschchartseriesmixedlineshowsymbol_;
  bool tschchartseriesscattershowsymbol_;
  bool tschchartseriesdefaultshowtrendline_;
  bool tschchartseriesareashowvaluelabels_;
  bool tschchartseriesbarshowvaluelabels_;
  bool tschchartseriesbubbleshowvaluelabels_;
  bool tschchartseriesdefaultshowvaluelabels_;
  bool tschchartserieslineshowvaluelabels_;
  ::google::protobuf::int32 tschchartseriesbubblesizedimension_;
  ::google::protobuf::int32 tschchartseriesareasymboltype_;
  bool tschchartseriesmixedshowvaluelabels_;
  bool tschchartseriespieshowvaluelabels_;
  bool tschchartseriesscattershowvaluelabels_;
  bool tschchartseriesdefaulttrendlineshowequation_;
  ::google::protobuf::int32 tschchartserieslinesymboltype_;
  ::google::protobuf::int32 tschchartseriesmixedareasymboltype_;
  ::google::protobuf::int32 tschchartseriesmixedlinesymboltype_;
  ::google::protobuf::int32 tschchartseriesscattersymboltype_;
  float tschchartseriesdefaulttrendlineequationoffsetx_;
  float tschchartseriesdefaulttrendlineequationoffsety_;
  ::std::string* tschchartseriesdefaulttrendlinelabelstring_;
  ::google::protobuf::int32 tschchartseriesdefaulttrendlineorder_;
  ::google::protobuf::int32 tschchartseriesdefaulttrendlineperiod_;
  float tschchartseriesdefaulttrendlinersquaredoffsetx_;
  float tschchartseriesdefaulttrendlinersquaredoffsety_;
  ::google::protobuf::int32 tschchartseriesdefaulttrendlinetype_;
  float tschchartseriespiewedgeexplosion_;
  bool tschchartseriesdefaulttrendlineshowlabel_;
  bool tschchartseriesdefaulttrendlineshowr2value_;
  bool tschchartseriesbubbleshowserieslabels_;
  bool tschchartseriesscattershowserieslabels_;
  ::google::protobuf::int32 tschchartseriesdefaultyaxisordinal_;
  ::google::protobuf::int32 tschchartseriesbubblevaluelabelsaxis_;
  ::google::protobuf::int32 tschchartseriesscattervaluelabelsaxis_;
  bool tschchartseriesdefaultshowlabelsinfront_;
  bool tschchartseriesbubbleshowlabelsinfront_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(75 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHArchives_2eGEN_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eGEN_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eGEN_2eproto();

  void InitAsDefaultInstance();
  static ChartSeriesNonStyleArchive* default_instance_;
};
// -------------------------------------------------------------------

class ChartGenericPropertyMapArchive : public ::google::protobuf::Message {
 public:
  ChartGenericPropertyMapArchive();
  virtual ~ChartGenericPropertyMapArchive();

  ChartGenericPropertyMapArchive(const ChartGenericPropertyMapArchive& from);

  inline ChartGenericPropertyMapArchive& operator=(const ChartGenericPropertyMapArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartGenericPropertyMapArchive& default_instance();

  void Swap(ChartGenericPropertyMapArchive* other);

  // implements Message ----------------------------------------------

  ChartGenericPropertyMapArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartGenericPropertyMapArchive& from);
  void MergeFrom(const ChartGenericPropertyMapArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tschchartinfo3dbarshape = 1;
  inline bool has_tschchartinfo3dbarshape() const;
  inline void clear_tschchartinfo3dbarshape();
  static const int kTschchartinfo3DbarshapeFieldNumber = 1;
  inline ::google::protobuf::int32 tschchartinfo3dbarshape() const;
  inline void set_tschchartinfo3dbarshape(::google::protobuf::int32 value);

  // optional bool tschchartinfo3dbeveledges = 2;
  inline bool has_tschchartinfo3dbeveledges() const;
  inline void clear_tschchartinfo3dbeveledges();
  static const int kTschchartinfo3DbeveledgesFieldNumber = 2;
  inline bool tschchartinfo3dbeveledges() const;
  inline void set_tschchartinfo3dbeveledges(bool value);

  // optional float tschchartinfo3dintersetdepthgap = 3;
  inline bool has_tschchartinfo3dintersetdepthgap() const;
  inline void clear_tschchartinfo3dintersetdepthgap();
  static const int kTschchartinfo3DintersetdepthgapFieldNumber = 3;
  inline float tschchartinfo3dintersetdepthgap() const;
  inline void set_tschchartinfo3dintersetdepthgap(float value);

  // optional .TSCH.Chart3DVectorArchive tschchartinfo3drotation = 4;
  inline bool has_tschchartinfo3drotation() const;
  inline void clear_tschchartinfo3drotation();
  static const int kTschchartinfo3DrotationFieldNumber = 4;
  inline const ::TSCH::Chart3DVectorArchive& tschchartinfo3drotation() const;
  inline ::TSCH::Chart3DVectorArchive* mutable_tschchartinfo3drotation();
  inline ::TSCH::Chart3DVectorArchive* release_tschchartinfo3drotation();
  inline void set_allocated_tschchartinfo3drotation(::TSCH::Chart3DVectorArchive* tschchartinfo3drotation);

  // optional .TSCH.Chart3DVectorArchive tschchartinfo3dscale = 5;
  inline bool has_tschchartinfo3dscale() const;
  inline void clear_tschchartinfo3dscale();
  static const int kTschchartinfo3DscaleFieldNumber = 5;
  inline const ::TSCH::Chart3DVectorArchive& tschchartinfo3dscale() const;
  inline ::TSCH::Chart3DVectorArchive* mutable_tschchartinfo3dscale();
  inline ::TSCH::Chart3DVectorArchive* release_tschchartinfo3dscale();
  inline void set_allocated_tschchartinfo3dscale(::TSCH::Chart3DVectorArchive* tschchartinfo3dscale);

  // optional .TSCH.Chart3DVectorArchive tschchartinfo3dviewport = 6;
  inline bool has_tschchartinfo3dviewport() const;
  inline void clear_tschchartinfo3dviewport();
  static const int kTschchartinfo3DviewportFieldNumber = 6;
  inline const ::TSCH::Chart3DVectorArchive& tschchartinfo3dviewport() const;
  inline ::TSCH::Chart3DVectorArchive* mutable_tschchartinfo3dviewport();
  inline ::TSCH::Chart3DVectorArchive* release_tschchartinfo3dviewport();
  inline void set_allocated_tschchartinfo3dviewport(::TSCH::Chart3DVectorArchive* tschchartinfo3dviewport);

  // optional float tschchartinfopiestartangle = 7;
  inline bool has_tschchartinfopiestartangle() const;
  inline void clear_tschchartinfopiestartangle();
  static const int kTschchartinfopiestartangleFieldNumber = 7;
  inline float tschchartinfopiestartangle() const;
  inline void set_tschchartinfopiestartangle(float value);

  // optional bool tschchartinfoshowlegend = 8;
  inline bool has_tschchartinfoshowlegend() const;
  inline void clear_tschchartinfoshowlegend();
  static const int kTschchartinfoshowlegendFieldNumber = 8;
  inline bool tschchartinfoshowlegend() const;
  inline void set_tschchartinfoshowlegend(bool value);

  // optional bool tschchartinfoshowtitle = 9;
  inline bool has_tschchartinfoshowtitle() const;
  inline void clear_tschchartinfoshowtitle();
  static const int kTschchartinfoshowtitleFieldNumber = 9;
  inline bool tschchartinfoshowtitle() const;
  inline void set_tschchartinfoshowtitle(bool value);

  // optional bool tschchartinfoskiphiddendata = 10;
  inline bool has_tschchartinfoskiphiddendata() const;
  inline void clear_tschchartinfoskiphiddendata();
  static const int kTschchartinfoskiphiddendataFieldNumber = 10;
  inline bool tschchartinfoskiphiddendata() const;
  inline void set_tschchartinfoskiphiddendata(bool value);

  // optional string tschchartinfotitle = 11;
  inline bool has_tschchartinfotitle() const;
  inline void clear_tschchartinfotitle();
  static const int kTschchartinfotitleFieldNumber = 11;
  inline const ::std::string& tschchartinfotitle() const;
  inline void set_tschchartinfotitle(const ::std::string& value);
  inline void set_tschchartinfotitle(const char* value);
  inline void set_tschchartinfotitle(const char* value, size_t size);
  inline ::std::string* mutable_tschchartinfotitle();
  inline ::std::string* release_tschchartinfotitle();
  inline void set_allocated_tschchartinfotitle(::std::string* tschchartinfotitle);

  // optional int32 tschchartinfodatasetnamelocation = 12;
  inline bool has_tschchartinfodatasetnamelocation() const;
  inline void clear_tschchartinfodatasetnamelocation();
  static const int kTschchartinfodatasetnamelocationFieldNumber = 12;
  inline ::google::protobuf::int32 tschchartinfodatasetnamelocation() const;
  inline void set_tschchartinfodatasetnamelocation(::google::protobuf::int32 value);

  // optional int32 tschchartinfomultidatacontroltype = 13;
  inline bool has_tschchartinfomultidatacontroltype() const;
  inline void clear_tschchartinfomultidatacontroltype();
  static const int kTschchartinfomultidatacontroltypeFieldNumber = 13;
  inline ::google::protobuf::int32 tschchartinfomultidatacontroltype() const;
  inline void set_tschchartinfomultidatacontroltype(::google::protobuf::int32 value);

  // optional float tschchartinfo3dchartopacity = 14;
  inline bool has_tschchartinfo3dchartopacity() const;
  inline void clear_tschchartinfo3dchartopacity();
  static const int kTschchartinfo3DchartopacityFieldNumber = 14;
  inline float tschchartinfo3dchartopacity() const;
  inline void set_tschchartinfo3dchartopacity(float value);

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfo3dlightingpackage = 15;
  inline bool has_tschchartinfo3dlightingpackage() const;
  inline void clear_tschchartinfo3dlightingpackage();
  static const int kTschchartinfo3DlightingpackageFieldNumber = 15;
  inline const ::TSCH::Chart3DLightingPackageArchive& tschchartinfo3dlightingpackage() const;
  inline ::TSCH::Chart3DLightingPackageArchive* mutable_tschchartinfo3dlightingpackage();
  inline ::TSCH::Chart3DLightingPackageArchive* release_tschchartinfo3dlightingpackage();
  inline void set_allocated_tschchartinfo3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfo3dlightingpackage);

  // optional .TSD.FillArchive tschchartinfobackgroundfill = 16;
  inline bool has_tschchartinfobackgroundfill() const;
  inline void clear_tschchartinfobackgroundfill();
  static const int kTschchartinfobackgroundfillFieldNumber = 16;
  inline const ::TSD::FillArchive& tschchartinfobackgroundfill() const;
  inline ::TSD::FillArchive* mutable_tschchartinfobackgroundfill();
  inline ::TSD::FillArchive* release_tschchartinfobackgroundfill();
  inline void set_allocated_tschchartinfobackgroundfill(::TSD::FillArchive* tschchartinfobackgroundfill);

  // optional .TSD.StrokeArchive tschchartinfobackgroundstroke = 17;
  inline bool has_tschchartinfobackgroundstroke() const;
  inline void clear_tschchartinfobackgroundstroke();
  static const int kTschchartinfobackgroundstrokeFieldNumber = 17;
  inline const ::TSD::StrokeArchive& tschchartinfobackgroundstroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartinfobackgroundstroke();
  inline ::TSD::StrokeArchive* release_tschchartinfobackgroundstroke();
  inline void set_allocated_tschchartinfobackgroundstroke(::TSD::StrokeArchive* tschchartinfobackgroundstroke);

  // optional float tschchartinfoborderopacity = 18;
  inline bool has_tschchartinfoborderopacity() const;
  inline void clear_tschchartinfoborderopacity();
  static const int kTschchartinfoborderopacityFieldNumber = 18;
  inline float tschchartinfoborderopacity() const;
  inline void set_tschchartinfoborderopacity(float value);

  // optional .TSD.ShadowArchive tschchartinfobordershadow = 19;
  inline bool has_tschchartinfobordershadow() const;
  inline void clear_tschchartinfobordershadow();
  static const int kTschchartinfobordershadowFieldNumber = 19;
  inline const ::TSD::ShadowArchive& tschchartinfobordershadow() const;
  inline ::TSD::ShadowArchive* mutable_tschchartinfobordershadow();
  inline ::TSD::ShadowArchive* release_tschchartinfobordershadow();
  inline void set_allocated_tschchartinfobordershadow(::TSD::ShadowArchive* tschchartinfobordershadow);

  // optional .TSD.StrokeArchive tschchartinfoborderstroke = 20;
  inline bool has_tschchartinfoborderstroke() const;
  inline void clear_tschchartinfoborderstroke();
  static const int kTschchartinfoborderstrokeFieldNumber = 20;
  inline const ::TSD::StrokeArchive& tschchartinfoborderstroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartinfoborderstroke();
  inline ::TSD::StrokeArchive* release_tschchartinfoborderstroke();
  inline void set_allocated_tschchartinfoborderstroke(::TSD::StrokeArchive* tschchartinfoborderstroke);

  // optional bool tschchartinfocombinelayers = 21;
  inline bool has_tschchartinfocombinelayers() const;
  inline void clear_tschchartinfocombinelayers();
  static const int kTschchartinfocombinelayersFieldNumber = 21;
  inline bool tschchartinfocombinelayers() const;
  inline void set_tschchartinfocombinelayers(bool value);

  // optional .TSD.FillArchive tschchartinfogridbackgroundfill = 22;
  inline bool has_tschchartinfogridbackgroundfill() const;
  inline void clear_tschchartinfogridbackgroundfill();
  static const int kTschchartinfogridbackgroundfillFieldNumber = 22;
  inline const ::TSD::FillArchive& tschchartinfogridbackgroundfill() const;
  inline ::TSD::FillArchive* mutable_tschchartinfogridbackgroundfill();
  inline ::TSD::FillArchive* release_tschchartinfogridbackgroundfill();
  inline void set_allocated_tschchartinfogridbackgroundfill(::TSD::FillArchive* tschchartinfogridbackgroundfill);

  // optional float tschchartinfogridbackgroundopacity = 23;
  inline bool has_tschchartinfogridbackgroundopacity() const;
  inline void clear_tschchartinfogridbackgroundopacity();
  static const int kTschchartinfogridbackgroundopacityFieldNumber = 23;
  inline float tschchartinfogridbackgroundopacity() const;
  inline void set_tschchartinfogridbackgroundopacity(float value);

  // optional float tschchartinfointerbargap = 24;
  inline bool has_tschchartinfointerbargap() const;
  inline void clear_tschchartinfointerbargap();
  static const int kTschchartinfointerbargapFieldNumber = 24;
  inline float tschchartinfointerbargap() const;
  inline void set_tschchartinfointerbargap(float value);

  // optional float tschchartinfointersetgap = 25;
  inline bool has_tschchartinfointersetgap() const;
  inline void clear_tschchartinfointersetgap();
  static const int kTschchartinfointersetgapFieldNumber = 25;
  inline float tschchartinfointersetgap() const;
  inline void set_tschchartinfointersetgap(float value);

  // optional bool tschchartinfoshowborder = 26;
  inline bool has_tschchartinfoshowborder() const;
  inline void clear_tschchartinfoshowborder();
  static const int kTschchartinfoshowborderFieldNumber = 26;
  inline bool tschchartinfoshowborder() const;
  inline void set_tschchartinfoshowborder(bool value);

  // optional .TSP.Color tschchartinfotitlecolor = 27;
  inline bool has_tschchartinfotitlecolor() const;
  inline void clear_tschchartinfotitlecolor();
  static const int kTschchartinfotitlecolorFieldNumber = 27;
  inline const ::TSP::Color& tschchartinfotitlecolor() const;
  inline ::TSP::Color* mutable_tschchartinfotitlecolor();
  inline ::TSP::Color* release_tschchartinfotitlecolor();
  inline void set_allocated_tschchartinfotitlecolor(::TSP::Color* tschchartinfotitlecolor);

  // optional int32 tschchartinfotitleparagraphstyleindex = 28;
  inline bool has_tschchartinfotitleparagraphstyleindex() const;
  inline void clear_tschchartinfotitleparagraphstyleindex();
  static const int kTschchartinfotitleparagraphstyleindexFieldNumber = 28;
  inline ::google::protobuf::int32 tschchartinfotitleparagraphstyleindex() const;
  inline void set_tschchartinfotitleparagraphstyleindex(::google::protobuf::int32 value);

  // optional int32 tschchartinfodatasetnameparagraphstyleindex = 29;
  inline bool has_tschchartinfodatasetnameparagraphstyleindex() const;
  inline void clear_tschchartinfodatasetnameparagraphstyleindex();
  static const int kTschchartinfodatasetnameparagraphstyleindexFieldNumber = 29;
  inline ::google::protobuf::int32 tschchartinfodatasetnameparagraphstyleindex() const;
  inline void set_tschchartinfodatasetnameparagraphstyleindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TSCH.Generated.ChartGenericPropertyMapArchive)
 private:
  inline void set_has_tschchartinfo3dbarshape();
  inline void clear_has_tschchartinfo3dbarshape();
  inline void set_has_tschchartinfo3dbeveledges();
  inline void clear_has_tschchartinfo3dbeveledges();
  inline void set_has_tschchartinfo3dintersetdepthgap();
  inline void clear_has_tschchartinfo3dintersetdepthgap();
  inline void set_has_tschchartinfo3drotation();
  inline void clear_has_tschchartinfo3drotation();
  inline void set_has_tschchartinfo3dscale();
  inline void clear_has_tschchartinfo3dscale();
  inline void set_has_tschchartinfo3dviewport();
  inline void clear_has_tschchartinfo3dviewport();
  inline void set_has_tschchartinfopiestartangle();
  inline void clear_has_tschchartinfopiestartangle();
  inline void set_has_tschchartinfoshowlegend();
  inline void clear_has_tschchartinfoshowlegend();
  inline void set_has_tschchartinfoshowtitle();
  inline void clear_has_tschchartinfoshowtitle();
  inline void set_has_tschchartinfoskiphiddendata();
  inline void clear_has_tschchartinfoskiphiddendata();
  inline void set_has_tschchartinfotitle();
  inline void clear_has_tschchartinfotitle();
  inline void set_has_tschchartinfodatasetnamelocation();
  inline void clear_has_tschchartinfodatasetnamelocation();
  inline void set_has_tschchartinfomultidatacontroltype();
  inline void clear_has_tschchartinfomultidatacontroltype();
  inline void set_has_tschchartinfo3dchartopacity();
  inline void clear_has_tschchartinfo3dchartopacity();
  inline void set_has_tschchartinfo3dlightingpackage();
  inline void clear_has_tschchartinfo3dlightingpackage();
  inline void set_has_tschchartinfobackgroundfill();
  inline void clear_has_tschchartinfobackgroundfill();
  inline void set_has_tschchartinfobackgroundstroke();
  inline void clear_has_tschchartinfobackgroundstroke();
  inline void set_has_tschchartinfoborderopacity();
  inline void clear_has_tschchartinfoborderopacity();
  inline void set_has_tschchartinfobordershadow();
  inline void clear_has_tschchartinfobordershadow();
  inline void set_has_tschchartinfoborderstroke();
  inline void clear_has_tschchartinfoborderstroke();
  inline void set_has_tschchartinfocombinelayers();
  inline void clear_has_tschchartinfocombinelayers();
  inline void set_has_tschchartinfogridbackgroundfill();
  inline void clear_has_tschchartinfogridbackgroundfill();
  inline void set_has_tschchartinfogridbackgroundopacity();
  inline void clear_has_tschchartinfogridbackgroundopacity();
  inline void set_has_tschchartinfointerbargap();
  inline void clear_has_tschchartinfointerbargap();
  inline void set_has_tschchartinfointersetgap();
  inline void clear_has_tschchartinfointersetgap();
  inline void set_has_tschchartinfoshowborder();
  inline void clear_has_tschchartinfoshowborder();
  inline void set_has_tschchartinfotitlecolor();
  inline void clear_has_tschchartinfotitlecolor();
  inline void set_has_tschchartinfotitleparagraphstyleindex();
  inline void clear_has_tschchartinfotitleparagraphstyleindex();
  inline void set_has_tschchartinfodatasetnameparagraphstyleindex();
  inline void clear_has_tschchartinfodatasetnameparagraphstyleindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tschchartinfo3dbarshape_;
  float tschchartinfo3dintersetdepthgap_;
  ::TSCH::Chart3DVectorArchive* tschchartinfo3drotation_;
  ::TSCH::Chart3DVectorArchive* tschchartinfo3dscale_;
  ::TSCH::Chart3DVectorArchive* tschchartinfo3dviewport_;
  float tschchartinfopiestartangle_;
  bool tschchartinfo3dbeveledges_;
  bool tschchartinfoshowlegend_;
  bool tschchartinfoshowtitle_;
  bool tschchartinfoskiphiddendata_;
  ::std::string* tschchartinfotitle_;
  ::google::protobuf::int32 tschchartinfodatasetnamelocation_;
  ::google::protobuf::int32 tschchartinfomultidatacontroltype_;
  ::TSCH::Chart3DLightingPackageArchive* tschchartinfo3dlightingpackage_;
  float tschchartinfo3dchartopacity_;
  float tschchartinfoborderopacity_;
  ::TSD::FillArchive* tschchartinfobackgroundfill_;
  ::TSD::StrokeArchive* tschchartinfobackgroundstroke_;
  ::TSD::ShadowArchive* tschchartinfobordershadow_;
  ::TSD::StrokeArchive* tschchartinfoborderstroke_;
  ::TSD::FillArchive* tschchartinfogridbackgroundfill_;
  float tschchartinfogridbackgroundopacity_;
  bool tschchartinfocombinelayers_;
  bool tschchartinfoshowborder_;
  float tschchartinfointerbargap_;
  float tschchartinfointersetgap_;
  ::TSP::Color* tschchartinfotitlecolor_;
  ::google::protobuf::int32 tschchartinfotitleparagraphstyleindex_;
  ::google::protobuf::int32 tschchartinfodatasetnameparagraphstyleindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(29 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHArchives_2eGEN_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eGEN_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eGEN_2eproto();

  void InitAsDefaultInstance();
  static ChartGenericPropertyMapArchive* default_instance_;
};
// -------------------------------------------------------------------

class LegendGenericPropertyMapArchive : public ::google::protobuf::Message {
 public:
  LegendGenericPropertyMapArchive();
  virtual ~LegendGenericPropertyMapArchive();

  LegendGenericPropertyMapArchive(const LegendGenericPropertyMapArchive& from);

  inline LegendGenericPropertyMapArchive& operator=(const LegendGenericPropertyMapArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LegendGenericPropertyMapArchive& default_instance();

  void Swap(LegendGenericPropertyMapArchive* other);

  // implements Message ----------------------------------------------

  LegendGenericPropertyMapArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LegendGenericPropertyMapArchive& from);
  void MergeFrom(const LegendGenericPropertyMapArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TSD.FillArchive tschlegendmodelfill = 1;
  inline bool has_tschlegendmodelfill() const;
  inline void clear_tschlegendmodelfill();
  static const int kTschlegendmodelfillFieldNumber = 1;
  inline const ::TSD::FillArchive& tschlegendmodelfill() const;
  inline ::TSD::FillArchive* mutable_tschlegendmodelfill();
  inline ::TSD::FillArchive* release_tschlegendmodelfill();
  inline void set_allocated_tschlegendmodelfill(::TSD::FillArchive* tschlegendmodelfill);

  // optional int32 tschlegendmodellabelparagraphstyleindex = 2;
  inline bool has_tschlegendmodellabelparagraphstyleindex() const;
  inline void clear_tschlegendmodellabelparagraphstyleindex();
  static const int kTschlegendmodellabelparagraphstyleindexFieldNumber = 2;
  inline ::google::protobuf::int32 tschlegendmodellabelparagraphstyleindex() const;
  inline void set_tschlegendmodellabelparagraphstyleindex(::google::protobuf::int32 value);

  // optional float tschlegendmodelopacity = 3;
  inline bool has_tschlegendmodelopacity() const;
  inline void clear_tschlegendmodelopacity();
  static const int kTschlegendmodelopacityFieldNumber = 3;
  inline float tschlegendmodelopacity() const;
  inline void set_tschlegendmodelopacity(float value);

  // optional .TSD.ShadowArchive tschlegendmodelshadow = 4;
  inline bool has_tschlegendmodelshadow() const;
  inline void clear_tschlegendmodelshadow();
  static const int kTschlegendmodelshadowFieldNumber = 4;
  inline const ::TSD::ShadowArchive& tschlegendmodelshadow() const;
  inline ::TSD::ShadowArchive* mutable_tschlegendmodelshadow();
  inline ::TSD::ShadowArchive* release_tschlegendmodelshadow();
  inline void set_allocated_tschlegendmodelshadow(::TSD::ShadowArchive* tschlegendmodelshadow);

  // optional .TSD.StrokeArchive tschlegendmodelstroke = 5;
  inline bool has_tschlegendmodelstroke() const;
  inline void clear_tschlegendmodelstroke();
  static const int kTschlegendmodelstrokeFieldNumber = 5;
  inline const ::TSD::StrokeArchive& tschlegendmodelstroke() const;
  inline ::TSD::StrokeArchive* mutable_tschlegendmodelstroke();
  inline ::TSD::StrokeArchive* release_tschlegendmodelstroke();
  inline void set_allocated_tschlegendmodelstroke(::TSD::StrokeArchive* tschlegendmodelstroke);

  // @@protoc_insertion_point(class_scope:TSCH.Generated.LegendGenericPropertyMapArchive)
 private:
  inline void set_has_tschlegendmodelfill();
  inline void clear_has_tschlegendmodelfill();
  inline void set_has_tschlegendmodellabelparagraphstyleindex();
  inline void clear_has_tschlegendmodellabelparagraphstyleindex();
  inline void set_has_tschlegendmodelopacity();
  inline void clear_has_tschlegendmodelopacity();
  inline void set_has_tschlegendmodelshadow();
  inline void clear_has_tschlegendmodelshadow();
  inline void set_has_tschlegendmodelstroke();
  inline void clear_has_tschlegendmodelstroke();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSD::FillArchive* tschlegendmodelfill_;
  ::google::protobuf::int32 tschlegendmodellabelparagraphstyleindex_;
  float tschlegendmodelopacity_;
  ::TSD::ShadowArchive* tschlegendmodelshadow_;
  ::TSD::StrokeArchive* tschlegendmodelstroke_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHArchives_2eGEN_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eGEN_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eGEN_2eproto();

  void InitAsDefaultInstance();
  static LegendGenericPropertyMapArchive* default_instance_;
};
// -------------------------------------------------------------------

class ChartAxisGenericPropertyMapArchive : public ::google::protobuf::Message {
 public:
  ChartAxisGenericPropertyMapArchive();
  virtual ~ChartAxisGenericPropertyMapArchive();

  ChartAxisGenericPropertyMapArchive(const ChartAxisGenericPropertyMapArchive& from);

  inline ChartAxisGenericPropertyMapArchive& operator=(const ChartAxisGenericPropertyMapArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartAxisGenericPropertyMapArchive& default_instance();

  void Swap(ChartAxisGenericPropertyMapArchive* other);

  // implements Message ----------------------------------------------

  ChartAxisGenericPropertyMapArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartAxisGenericPropertyMapArchive& from);
  void MergeFrom(const ChartAxisGenericPropertyMapArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tschchartaxis3dlabelposition = 1;
  inline bool has_tschchartaxis3dlabelposition() const;
  inline void clear_tschchartaxis3dlabelposition();
  static const int kTschchartaxis3DlabelpositionFieldNumber = 1;
  inline ::google::protobuf::int32 tschchartaxis3dlabelposition() const;
  inline void set_tschchartaxis3dlabelposition(::google::protobuf::int32 value);

  // optional .TSK.FormatStructArchive tschchartaxis1_0numberformat = 2;
  inline bool has_tschchartaxis1_0numberformat() const;
  inline void clear_tschchartaxis1_0numberformat();
  static const int kTschchartaxis10NumberformatFieldNumber = 2;
  inline const ::TSK::FormatStructArchive& tschchartaxis1_0numberformat() const;
  inline ::TSK::FormatStructArchive* mutable_tschchartaxis1_0numberformat();
  inline ::TSK::FormatStructArchive* release_tschchartaxis1_0numberformat();
  inline void set_allocated_tschchartaxis1_0numberformat(::TSK::FormatStructArchive* tschchartaxis1_0numberformat);

  // optional .TSK.FormatStructArchive tschchartaxisnumberformat = 3;
  inline bool has_tschchartaxisnumberformat() const;
  inline void clear_tschchartaxisnumberformat();
  static const int kTschchartaxisnumberformatFieldNumber = 3;
  inline const ::TSK::FormatStructArchive& tschchartaxisnumberformat() const;
  inline ::TSK::FormatStructArchive* mutable_tschchartaxisnumberformat();
  inline ::TSK::FormatStructArchive* release_tschchartaxisnumberformat();
  inline void set_allocated_tschchartaxisnumberformat(::TSK::FormatStructArchive* tschchartaxisnumberformat);

  // optional .TSK.FormatStructArchive tschchartaxis1_0dateformat = 4;
  inline bool has_tschchartaxis1_0dateformat() const;
  inline void clear_tschchartaxis1_0dateformat();
  static const int kTschchartaxis10DateformatFieldNumber = 4;
  inline const ::TSK::FormatStructArchive& tschchartaxis1_0dateformat() const;
  inline ::TSK::FormatStructArchive* mutable_tschchartaxis1_0dateformat();
  inline ::TSK::FormatStructArchive* release_tschchartaxis1_0dateformat();
  inline void set_allocated_tschchartaxis1_0dateformat(::TSK::FormatStructArchive* tschchartaxis1_0dateformat);

  // optional .TSK.FormatStructArchive tschchartaxisdurationformat = 5;
  inline bool has_tschchartaxisdurationformat() const;
  inline void clear_tschchartaxisdurationformat();
  static const int kTschchartaxisdurationformatFieldNumber = 5;
  inline const ::TSK::FormatStructArchive& tschchartaxisdurationformat() const;
  inline ::TSK::FormatStructArchive* mutable_tschchartaxisdurationformat();
  inline ::TSK::FormatStructArchive* release_tschchartaxisdurationformat();
  inline void set_allocated_tschchartaxisdurationformat(::TSK::FormatStructArchive* tschchartaxisdurationformat);

  // optional .TSK.FormatStructArchive tschchartaxisdateformat = 6;
  inline bool has_tschchartaxisdateformat() const;
  inline void clear_tschchartaxisdateformat();
  static const int kTschchartaxisdateformatFieldNumber = 6;
  inline const ::TSK::FormatStructArchive& tschchartaxisdateformat() const;
  inline ::TSK::FormatStructArchive* mutable_tschchartaxisdateformat();
  inline ::TSK::FormatStructArchive* release_tschchartaxisdateformat();
  inline void set_allocated_tschchartaxisdateformat(::TSK::FormatStructArchive* tschchartaxisdateformat);

  // optional int32 tschchartaxisnumberformattype = 7;
  inline bool has_tschchartaxisnumberformattype() const;
  inline void clear_tschchartaxisnumberformattype();
  static const int kTschchartaxisnumberformattypeFieldNumber = 7;
  inline ::google::protobuf::int32 tschchartaxisnumberformattype() const;
  inline void set_tschchartaxisnumberformattype(::google::protobuf::int32 value);

  // optional int32 tschchartaxisnumberofdecades = 8;
  inline bool has_tschchartaxisnumberofdecades() const;
  inline void clear_tschchartaxisnumberofdecades();
  static const int kTschchartaxisnumberofdecadesFieldNumber = 8;
  inline ::google::protobuf::int32 tschchartaxisnumberofdecades() const;
  inline void set_tschchartaxisnumberofdecades(::google::protobuf::int32 value);

  // optional int32 tschchartaxisnumberofmajorgridlines = 9;
  inline bool has_tschchartaxisnumberofmajorgridlines() const;
  inline void clear_tschchartaxisnumberofmajorgridlines();
  static const int kTschchartaxisnumberofmajorgridlinesFieldNumber = 9;
  inline ::google::protobuf::int32 tschchartaxisnumberofmajorgridlines() const;
  inline void set_tschchartaxisnumberofmajorgridlines(::google::protobuf::int32 value);

  // optional int32 tschchartaxisnumberofminorgridlines = 10;
  inline bool has_tschchartaxisnumberofminorgridlines() const;
  inline void clear_tschchartaxisnumberofminorgridlines();
  static const int kTschchartaxisnumberofminorgridlinesFieldNumber = 10;
  inline ::google::protobuf::int32 tschchartaxisnumberofminorgridlines() const;
  inline void set_tschchartaxisnumberofminorgridlines(::google::protobuf::int32 value);

  // optional bool tschchartaxisplottoedges = 11;
  inline bool has_tschchartaxisplottoedges() const;
  inline void clear_tschchartaxisplottoedges();
  static const int kTschchartaxisplottoedgesFieldNumber = 11;
  inline bool tschchartaxisplottoedges() const;
  inline void set_tschchartaxisplottoedges(bool value);

  // optional int32 tschchartaxisscale = 12;
  inline bool has_tschchartaxisscale() const;
  inline void clear_tschchartaxisscale();
  static const int kTschchartaxisscaleFieldNumber = 12;
  inline ::google::protobuf::int32 tschchartaxisscale() const;
  inline void set_tschchartaxisscale(::google::protobuf::int32 value);

  // optional bool tschchartaxisshowlabels = 13;
  inline bool has_tschchartaxisshowlabels() const;
  inline void clear_tschchartaxisshowlabels();
  static const int kTschchartaxisshowlabelsFieldNumber = 13;
  inline bool tschchartaxisshowlabels() const;
  inline void set_tschchartaxisshowlabels(bool value);

  // optional bool tschchartaxisshowserieslabels = 14;
  inline bool has_tschchartaxisshowserieslabels() const;
  inline void clear_tschchartaxisshowserieslabels();
  static const int kTschchartaxisshowserieslabelsFieldNumber = 14;
  inline bool tschchartaxisshowserieslabels() const;
  inline void set_tschchartaxisshowserieslabels(bool value);

  // optional bool tschchartaxisshowtitle = 15;
  inline bool has_tschchartaxisshowtitle() const;
  inline void clear_tschchartaxisshowtitle();
  static const int kTschchartaxisshowtitleFieldNumber = 15;
  inline bool tschchartaxisshowtitle() const;
  inline void set_tschchartaxisshowtitle(bool value);

  // optional string tschchartaxistitle = 16;
  inline bool has_tschchartaxistitle() const;
  inline void clear_tschchartaxistitle();
  static const int kTschchartaxistitleFieldNumber = 16;
  inline const ::std::string& tschchartaxistitle() const;
  inline void set_tschchartaxistitle(const ::std::string& value);
  inline void set_tschchartaxistitle(const char* value);
  inline void set_tschchartaxistitle(const char* value, size_t size);
  inline ::std::string* mutable_tschchartaxistitle();
  inline ::std::string* release_tschchartaxistitle();
  inline void set_allocated_tschchartaxistitle(::std::string* tschchartaxistitle);

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisusermax = 17;
  inline bool has_tschchartaxisusermax() const;
  inline void clear_tschchartaxisusermax();
  static const int kTschchartaxisusermaxFieldNumber = 17;
  inline const ::TSCH::ChartsNSNumberDoubleArchive& tschchartaxisusermax() const;
  inline ::TSCH::ChartsNSNumberDoubleArchive* mutable_tschchartaxisusermax();
  inline ::TSCH::ChartsNSNumberDoubleArchive* release_tschchartaxisusermax();
  inline void set_allocated_tschchartaxisusermax(::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisusermax);

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisusermin = 18;
  inline bool has_tschchartaxisusermin() const;
  inline void clear_tschchartaxisusermin();
  static const int kTschchartaxisuserminFieldNumber = 18;
  inline const ::TSCH::ChartsNSNumberDoubleArchive& tschchartaxisusermin() const;
  inline ::TSCH::ChartsNSNumberDoubleArchive* mutable_tschchartaxisusermin();
  inline ::TSCH::ChartsNSNumberDoubleArchive* release_tschchartaxisusermin();
  inline void set_allocated_tschchartaxisusermin(::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisusermin);

  // optional float tschchartaxis3dgridlineopacity = 19;
  inline bool has_tschchartaxis3dgridlineopacity() const;
  inline void clear_tschchartaxis3dgridlineopacity();
  static const int kTschchartaxis3DgridlineopacityFieldNumber = 19;
  inline float tschchartaxis3dgridlineopacity() const;
  inline void set_tschchartaxis3dgridlineopacity(float value);

  // optional .TSD.StrokeArchive tschchartaxis3dgridlinestroke = 20;
  inline bool has_tschchartaxis3dgridlinestroke() const;
  inline void clear_tschchartaxis3dgridlinestroke();
  static const int kTschchartaxis3DgridlinestrokeFieldNumber = 20;
  inline const ::TSD::StrokeArchive& tschchartaxis3dgridlinestroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartaxis3dgridlinestroke();
  inline ::TSD::StrokeArchive* release_tschchartaxis3dgridlinestroke();
  inline void set_allocated_tschchartaxis3dgridlinestroke(::TSD::StrokeArchive* tschchartaxis3dgridlinestroke);

  // optional int32 tschchartaxishorizontalspacing = 21;
  inline bool has_tschchartaxishorizontalspacing() const;
  inline void clear_tschchartaxishorizontalspacing();
  static const int kTschchartaxishorizontalspacingFieldNumber = 21;
  inline ::google::protobuf::int32 tschchartaxishorizontalspacing() const;
  inline void set_tschchartaxishorizontalspacing(::google::protobuf::int32 value);

  // optional int32 tschchartaxislabelparagraphstyleindex = 22;
  inline bool has_tschchartaxislabelparagraphstyleindex() const;
  inline void clear_tschchartaxislabelparagraphstyleindex();
  static const int kTschchartaxislabelparagraphstyleindexFieldNumber = 22;
  inline ::google::protobuf::int32 tschchartaxislabelparagraphstyleindex() const;
  inline void set_tschchartaxislabelparagraphstyleindex(::google::protobuf::int32 value);

  // optional float tschchartaxislabelsorientation = 23;
  inline bool has_tschchartaxislabelsorientation() const;
  inline void clear_tschchartaxislabelsorientation();
  static const int kTschchartaxislabelsorientationFieldNumber = 23;
  inline float tschchartaxislabelsorientation() const;
  inline void set_tschchartaxislabelsorientation(float value);

  // optional float tschchartaxismajorgridlineopacity = 24;
  inline bool has_tschchartaxismajorgridlineopacity() const;
  inline void clear_tschchartaxismajorgridlineopacity();
  static const int kTschchartaxismajorgridlineopacityFieldNumber = 24;
  inline float tschchartaxismajorgridlineopacity() const;
  inline void set_tschchartaxismajorgridlineopacity(float value);

  // optional .TSD.ShadowArchive tschchartaxismajorgridlineshadow = 25;
  inline bool has_tschchartaxismajorgridlineshadow() const;
  inline void clear_tschchartaxismajorgridlineshadow();
  static const int kTschchartaxismajorgridlineshadowFieldNumber = 25;
  inline const ::TSD::ShadowArchive& tschchartaxismajorgridlineshadow() const;
  inline ::TSD::ShadowArchive* mutable_tschchartaxismajorgridlineshadow();
  inline ::TSD::ShadowArchive* release_tschchartaxismajorgridlineshadow();
  inline void set_allocated_tschchartaxismajorgridlineshadow(::TSD::ShadowArchive* tschchartaxismajorgridlineshadow);

  // optional .TSD.StrokeArchive tschchartaxismajorgridlinestroke = 26;
  inline bool has_tschchartaxismajorgridlinestroke() const;
  inline void clear_tschchartaxismajorgridlinestroke();
  static const int kTschchartaxismajorgridlinestrokeFieldNumber = 26;
  inline const ::TSD::StrokeArchive& tschchartaxismajorgridlinestroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartaxismajorgridlinestroke();
  inline ::TSD::StrokeArchive* release_tschchartaxismajorgridlinestroke();
  inline void set_allocated_tschchartaxismajorgridlinestroke(::TSD::StrokeArchive* tschchartaxismajorgridlinestroke);

  // optional float tschchartaxisminorgridlineopacity = 27;
  inline bool has_tschchartaxisminorgridlineopacity() const;
  inline void clear_tschchartaxisminorgridlineopacity();
  static const int kTschchartaxisminorgridlineopacityFieldNumber = 27;
  inline float tschchartaxisminorgridlineopacity() const;
  inline void set_tschchartaxisminorgridlineopacity(float value);

  // optional .TSD.ShadowArchive tschchartaxisminorgridlineshadow = 28;
  inline bool has_tschchartaxisminorgridlineshadow() const;
  inline void clear_tschchartaxisminorgridlineshadow();
  static const int kTschchartaxisminorgridlineshadowFieldNumber = 28;
  inline const ::TSD::ShadowArchive& tschchartaxisminorgridlineshadow() const;
  inline ::TSD::ShadowArchive* mutable_tschchartaxisminorgridlineshadow();
  inline ::TSD::ShadowArchive* release_tschchartaxisminorgridlineshadow();
  inline void set_allocated_tschchartaxisminorgridlineshadow(::TSD::ShadowArchive* tschchartaxisminorgridlineshadow);

  // optional .TSD.StrokeArchive tschchartaxisminorgridlinestroke = 29;
  inline bool has_tschchartaxisminorgridlinestroke() const;
  inline void clear_tschchartaxisminorgridlinestroke();
  static const int kTschchartaxisminorgridlinestrokeFieldNumber = 29;
  inline const ::TSD::StrokeArchive& tschchartaxisminorgridlinestroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartaxisminorgridlinestroke();
  inline ::TSD::StrokeArchive* release_tschchartaxisminorgridlinestroke();
  inline void set_allocated_tschchartaxisminorgridlinestroke(::TSD::StrokeArchive* tschchartaxisminorgridlinestroke);

  // optional bool tschchartaxisshowaxis = 30;
  inline bool has_tschchartaxisshowaxis() const;
  inline void clear_tschchartaxisshowaxis();
  static const int kTschchartaxisshowaxisFieldNumber = 30;
  inline bool tschchartaxisshowaxis() const;
  inline void set_tschchartaxisshowaxis(bool value);

  // optional bool tschchartaxisshowlastlabel = 31;
  inline bool has_tschchartaxisshowlastlabel() const;
  inline void clear_tschchartaxisshowlastlabel();
  static const int kTschchartaxisshowlastlabelFieldNumber = 31;
  inline bool tschchartaxisshowlastlabel() const;
  inline void set_tschchartaxisshowlastlabel(bool value);

  // optional bool tschchartaxisshowmajorgridlines = 32;
  inline bool has_tschchartaxisshowmajorgridlines() const;
  inline void clear_tschchartaxisshowmajorgridlines();
  static const int kTschchartaxisshowmajorgridlinesFieldNumber = 32;
  inline bool tschchartaxisshowmajorgridlines() const;
  inline void set_tschchartaxisshowmajorgridlines(bool value);

  // optional bool tschchartaxisshowmajortickmarks = 33;
  inline bool has_tschchartaxisshowmajortickmarks() const;
  inline void clear_tschchartaxisshowmajortickmarks();
  static const int kTschchartaxisshowmajortickmarksFieldNumber = 33;
  inline bool tschchartaxisshowmajortickmarks() const;
  inline void set_tschchartaxisshowmajortickmarks(bool value);

  // optional bool tschchartaxisshowminimumlabel = 34;
  inline bool has_tschchartaxisshowminimumlabel() const;
  inline void clear_tschchartaxisshowminimumlabel();
  static const int kTschchartaxisshowminimumlabelFieldNumber = 34;
  inline bool tschchartaxisshowminimumlabel() const;
  inline void set_tschchartaxisshowminimumlabel(bool value);

  // optional bool tschchartaxisshowminorgridlines = 35;
  inline bool has_tschchartaxisshowminorgridlines() const;
  inline void clear_tschchartaxisshowminorgridlines();
  static const int kTschchartaxisshowminorgridlinesFieldNumber = 35;
  inline bool tschchartaxisshowminorgridlines() const;
  inline void set_tschchartaxisshowminorgridlines(bool value);

  // optional bool tschchartaxisshowminortickmarks = 36;
  inline bool has_tschchartaxisshowminortickmarks() const;
  inline void clear_tschchartaxisshowminortickmarks();
  static const int kTschchartaxisshowminortickmarksFieldNumber = 36;
  inline bool tschchartaxisshowminortickmarks() const;
  inline void set_tschchartaxisshowminortickmarks(bool value);

  // optional int32 tschchartaxistickmarklocation = 37;
  inline bool has_tschchartaxistickmarklocation() const;
  inline void clear_tschchartaxistickmarklocation();
  static const int kTschchartaxistickmarklocationFieldNumber = 37;
  inline ::google::protobuf::int32 tschchartaxistickmarklocation() const;
  inline void set_tschchartaxistickmarklocation(::google::protobuf::int32 value);

  // optional int32 tschchartaxistitleparagraphstyleindex = 38;
  inline bool has_tschchartaxistitleparagraphstyleindex() const;
  inline void clear_tschchartaxistitleparagraphstyleindex();
  static const int kTschchartaxistitleparagraphstyleindexFieldNumber = 38;
  inline ::google::protobuf::int32 tschchartaxistitleparagraphstyleindex() const;
  inline void set_tschchartaxistitleparagraphstyleindex(::google::protobuf::int32 value);

  // optional int32 tschchartaxisverticalspacing = 39;
  inline bool has_tschchartaxisverticalspacing() const;
  inline void clear_tschchartaxisverticalspacing();
  static const int kTschchartaxisverticalspacingFieldNumber = 39;
  inline ::google::protobuf::int32 tschchartaxisverticalspacing() const;
  inline void set_tschchartaxisverticalspacing(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TSCH.Generated.ChartAxisGenericPropertyMapArchive)
 private:
  inline void set_has_tschchartaxis3dlabelposition();
  inline void clear_has_tschchartaxis3dlabelposition();
  inline void set_has_tschchartaxis1_0numberformat();
  inline void clear_has_tschchartaxis1_0numberformat();
  inline void set_has_tschchartaxisnumberformat();
  inline void clear_has_tschchartaxisnumberformat();
  inline void set_has_tschchartaxis1_0dateformat();
  inline void clear_has_tschchartaxis1_0dateformat();
  inline void set_has_tschchartaxisdurationformat();
  inline void clear_has_tschchartaxisdurationformat();
  inline void set_has_tschchartaxisdateformat();
  inline void clear_has_tschchartaxisdateformat();
  inline void set_has_tschchartaxisnumberformattype();
  inline void clear_has_tschchartaxisnumberformattype();
  inline void set_has_tschchartaxisnumberofdecades();
  inline void clear_has_tschchartaxisnumberofdecades();
  inline void set_has_tschchartaxisnumberofmajorgridlines();
  inline void clear_has_tschchartaxisnumberofmajorgridlines();
  inline void set_has_tschchartaxisnumberofminorgridlines();
  inline void clear_has_tschchartaxisnumberofminorgridlines();
  inline void set_has_tschchartaxisplottoedges();
  inline void clear_has_tschchartaxisplottoedges();
  inline void set_has_tschchartaxisscale();
  inline void clear_has_tschchartaxisscale();
  inline void set_has_tschchartaxisshowlabels();
  inline void clear_has_tschchartaxisshowlabels();
  inline void set_has_tschchartaxisshowserieslabels();
  inline void clear_has_tschchartaxisshowserieslabels();
  inline void set_has_tschchartaxisshowtitle();
  inline void clear_has_tschchartaxisshowtitle();
  inline void set_has_tschchartaxistitle();
  inline void clear_has_tschchartaxistitle();
  inline void set_has_tschchartaxisusermax();
  inline void clear_has_tschchartaxisusermax();
  inline void set_has_tschchartaxisusermin();
  inline void clear_has_tschchartaxisusermin();
  inline void set_has_tschchartaxis3dgridlineopacity();
  inline void clear_has_tschchartaxis3dgridlineopacity();
  inline void set_has_tschchartaxis3dgridlinestroke();
  inline void clear_has_tschchartaxis3dgridlinestroke();
  inline void set_has_tschchartaxishorizontalspacing();
  inline void clear_has_tschchartaxishorizontalspacing();
  inline void set_has_tschchartaxislabelparagraphstyleindex();
  inline void clear_has_tschchartaxislabelparagraphstyleindex();
  inline void set_has_tschchartaxislabelsorientation();
  inline void clear_has_tschchartaxislabelsorientation();
  inline void set_has_tschchartaxismajorgridlineopacity();
  inline void clear_has_tschchartaxismajorgridlineopacity();
  inline void set_has_tschchartaxismajorgridlineshadow();
  inline void clear_has_tschchartaxismajorgridlineshadow();
  inline void set_has_tschchartaxismajorgridlinestroke();
  inline void clear_has_tschchartaxismajorgridlinestroke();
  inline void set_has_tschchartaxisminorgridlineopacity();
  inline void clear_has_tschchartaxisminorgridlineopacity();
  inline void set_has_tschchartaxisminorgridlineshadow();
  inline void clear_has_tschchartaxisminorgridlineshadow();
  inline void set_has_tschchartaxisminorgridlinestroke();
  inline void clear_has_tschchartaxisminorgridlinestroke();
  inline void set_has_tschchartaxisshowaxis();
  inline void clear_has_tschchartaxisshowaxis();
  inline void set_has_tschchartaxisshowlastlabel();
  inline void clear_has_tschchartaxisshowlastlabel();
  inline void set_has_tschchartaxisshowmajorgridlines();
  inline void clear_has_tschchartaxisshowmajorgridlines();
  inline void set_has_tschchartaxisshowmajortickmarks();
  inline void clear_has_tschchartaxisshowmajortickmarks();
  inline void set_has_tschchartaxisshowminimumlabel();
  inline void clear_has_tschchartaxisshowminimumlabel();
  inline void set_has_tschchartaxisshowminorgridlines();
  inline void clear_has_tschchartaxisshowminorgridlines();
  inline void set_has_tschchartaxisshowminortickmarks();
  inline void clear_has_tschchartaxisshowminortickmarks();
  inline void set_has_tschchartaxistickmarklocation();
  inline void clear_has_tschchartaxistickmarklocation();
  inline void set_has_tschchartaxistitleparagraphstyleindex();
  inline void clear_has_tschchartaxistitleparagraphstyleindex();
  inline void set_has_tschchartaxisverticalspacing();
  inline void clear_has_tschchartaxisverticalspacing();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSK::FormatStructArchive* tschchartaxis1_0numberformat_;
  ::TSK::FormatStructArchive* tschchartaxisnumberformat_;
  ::TSK::FormatStructArchive* tschchartaxis1_0dateformat_;
  ::google::protobuf::int32 tschchartaxis3dlabelposition_;
  ::google::protobuf::int32 tschchartaxisnumberformattype_;
  ::TSK::FormatStructArchive* tschchartaxisdurationformat_;
  ::TSK::FormatStructArchive* tschchartaxisdateformat_;
  ::google::protobuf::int32 tschchartaxisnumberofdecades_;
  ::google::protobuf::int32 tschchartaxisnumberofmajorgridlines_;
  ::google::protobuf::int32 tschchartaxisnumberofminorgridlines_;
  ::google::protobuf::int32 tschchartaxisscale_;
  bool tschchartaxisplottoedges_;
  bool tschchartaxisshowlabels_;
  bool tschchartaxisshowserieslabels_;
  bool tschchartaxisshowtitle_;
  float tschchartaxis3dgridlineopacity_;
  ::std::string* tschchartaxistitle_;
  ::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisusermax_;
  ::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisusermin_;
  ::TSD::StrokeArchive* tschchartaxis3dgridlinestroke_;
  ::google::protobuf::int32 tschchartaxishorizontalspacing_;
  ::google::protobuf::int32 tschchartaxislabelparagraphstyleindex_;
  float tschchartaxislabelsorientation_;
  float tschchartaxismajorgridlineopacity_;
  ::TSD::ShadowArchive* tschchartaxismajorgridlineshadow_;
  ::TSD::StrokeArchive* tschchartaxismajorgridlinestroke_;
  ::TSD::ShadowArchive* tschchartaxisminorgridlineshadow_;
  ::TSD::StrokeArchive* tschchartaxisminorgridlinestroke_;
  float tschchartaxisminorgridlineopacity_;
  bool tschchartaxisshowaxis_;
  bool tschchartaxisshowlastlabel_;
  bool tschchartaxisshowmajorgridlines_;
  bool tschchartaxisshowmajortickmarks_;
  bool tschchartaxisshowminimumlabel_;
  bool tschchartaxisshowminorgridlines_;
  bool tschchartaxisshowminortickmarks_;
  ::google::protobuf::int32 tschchartaxistickmarklocation_;
  ::google::protobuf::int32 tschchartaxistitleparagraphstyleindex_;
  ::google::protobuf::int32 tschchartaxisverticalspacing_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(39 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHArchives_2eGEN_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eGEN_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eGEN_2eproto();

  void InitAsDefaultInstance();
  static ChartAxisGenericPropertyMapArchive* default_instance_;
};
// -------------------------------------------------------------------

class ChartSeriesGenericPropertyMapArchive : public ::google::protobuf::Message {
 public:
  ChartSeriesGenericPropertyMapArchive();
  virtual ~ChartSeriesGenericPropertyMapArchive();

  ChartSeriesGenericPropertyMapArchive(const ChartSeriesGenericPropertyMapArchive& from);

  inline ChartSeriesGenericPropertyMapArchive& operator=(const ChartSeriesGenericPropertyMapArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartSeriesGenericPropertyMapArchive& default_instance();

  void Swap(ChartSeriesGenericPropertyMapArchive* other);

  // implements Message ----------------------------------------------

  ChartSeriesGenericPropertyMapArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartSeriesGenericPropertyMapArchive& from);
  void MergeFrom(const ChartSeriesGenericPropertyMapArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float tschchartseriesadjustmentscale = 1;
  inline bool has_tschchartseriesadjustmentscale() const;
  inline void clear_tschchartseriesadjustmentscale();
  static const int kTschchartseriesadjustmentscaleFieldNumber = 1;
  inline float tschchartseriesadjustmentscale() const;
  inline void set_tschchartseriesadjustmentscale(float value);

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustomnegativedata = 2;
  inline bool has_tschchartserieserrorbarcustomnegativedata() const;
  inline void clear_tschchartserieserrorbarcustomnegativedata();
  static const int kTschchartserieserrorbarcustomnegativedataFieldNumber = 2;
  inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartserieserrorbarcustomnegativedata() const;
  inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* mutable_tschchartserieserrorbarcustomnegativedata();
  inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* release_tschchartserieserrorbarcustomnegativedata();
  inline void set_allocated_tschchartserieserrorbarcustomnegativedata(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustomnegativedata);

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustomnegativedatascatterx = 3;
  inline bool has_tschchartserieserrorbarcustomnegativedatascatterx() const;
  inline void clear_tschchartserieserrorbarcustomnegativedatascatterx();
  static const int kTschchartserieserrorbarcustomnegativedatascatterxFieldNumber = 3;
  inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartserieserrorbarcustomnegativedatascatterx() const;
  inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* mutable_tschchartserieserrorbarcustomnegativedatascatterx();
  inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* release_tschchartserieserrorbarcustomnegativedatascatterx();
  inline void set_allocated_tschchartserieserrorbarcustomnegativedatascatterx(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustomnegativedatascatterx);

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustompositivedata = 4;
  inline bool has_tschchartserieserrorbarcustompositivedata() const;
  inline void clear_tschchartserieserrorbarcustompositivedata();
  static const int kTschchartserieserrorbarcustompositivedataFieldNumber = 4;
  inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartserieserrorbarcustompositivedata() const;
  inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* mutable_tschchartserieserrorbarcustompositivedata();
  inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* release_tschchartserieserrorbarcustompositivedata();
  inline void set_allocated_tschchartserieserrorbarcustompositivedata(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustompositivedata);

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustompositivedatascatterx = 5;
  inline bool has_tschchartserieserrorbarcustompositivedatascatterx() const;
  inline void clear_tschchartserieserrorbarcustompositivedatascatterx();
  static const int kTschchartserieserrorbarcustompositivedatascatterxFieldNumber = 5;
  inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartserieserrorbarcustompositivedatascatterx() const;
  inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* mutable_tschchartserieserrorbarcustompositivedatascatterx();
  inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* release_tschchartserieserrorbarcustompositivedatascatterx();
  inline void set_allocated_tschchartserieserrorbarcustompositivedatascatterx(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustompositivedatascatterx);

  // optional float tschchartserieserrorbarfixedvalue = 6;
  inline bool has_tschchartserieserrorbarfixedvalue() const;
  inline void clear_tschchartserieserrorbarfixedvalue();
  static const int kTschchartserieserrorbarfixedvalueFieldNumber = 6;
  inline float tschchartserieserrorbarfixedvalue() const;
  inline void set_tschchartserieserrorbarfixedvalue(float value);

  // optional float tschchartserieserrorbarfixedvaluescatterx = 7;
  inline bool has_tschchartserieserrorbarfixedvaluescatterx() const;
  inline void clear_tschchartserieserrorbarfixedvaluescatterx();
  static const int kTschchartserieserrorbarfixedvaluescatterxFieldNumber = 7;
  inline float tschchartserieserrorbarfixedvaluescatterx() const;
  inline void set_tschchartserieserrorbarfixedvaluescatterx(float value);

  // optional float tschchartserieserrorbarpercentvalue = 8;
  inline bool has_tschchartserieserrorbarpercentvalue() const;
  inline void clear_tschchartserieserrorbarpercentvalue();
  static const int kTschchartserieserrorbarpercentvalueFieldNumber = 8;
  inline float tschchartserieserrorbarpercentvalue() const;
  inline void set_tschchartserieserrorbarpercentvalue(float value);

  // optional float tschchartserieserrorbarpercentvaluescatterx = 9;
  inline bool has_tschchartserieserrorbarpercentvaluescatterx() const;
  inline void clear_tschchartserieserrorbarpercentvaluescatterx();
  static const int kTschchartserieserrorbarpercentvaluescatterxFieldNumber = 9;
  inline float tschchartserieserrorbarpercentvaluescatterx() const;
  inline void set_tschchartserieserrorbarpercentvaluescatterx(float value);

  // optional int32 tschchartserieserrorbarsetting = 10;
  inline bool has_tschchartserieserrorbarsetting() const;
  inline void clear_tschchartserieserrorbarsetting();
  static const int kTschchartserieserrorbarsettingFieldNumber = 10;
  inline ::google::protobuf::int32 tschchartserieserrorbarsetting() const;
  inline void set_tschchartserieserrorbarsetting(::google::protobuf::int32 value);

  // optional int32 tschchartserieserrorbarsettingscatterx = 11;
  inline bool has_tschchartserieserrorbarsettingscatterx() const;
  inline void clear_tschchartserieserrorbarsettingscatterx();
  static const int kTschchartserieserrorbarsettingscatterxFieldNumber = 11;
  inline ::google::protobuf::int32 tschchartserieserrorbarsettingscatterx() const;
  inline void set_tschchartserieserrorbarsettingscatterx(::google::protobuf::int32 value);

  // optional float tschchartserieserrorbarstddevvalue = 12;
  inline bool has_tschchartserieserrorbarstddevvalue() const;
  inline void clear_tschchartserieserrorbarstddevvalue();
  static const int kTschchartserieserrorbarstddevvalueFieldNumber = 12;
  inline float tschchartserieserrorbarstddevvalue() const;
  inline void set_tschchartserieserrorbarstddevvalue(float value);

  // optional float tschchartserieserrorbarstddevvaluescatterx = 13;
  inline bool has_tschchartserieserrorbarstddevvaluescatterx() const;
  inline void clear_tschchartserieserrorbarstddevvaluescatterx();
  static const int kTschchartserieserrorbarstddevvaluescatterxFieldNumber = 13;
  inline float tschchartserieserrorbarstddevvaluescatterx() const;
  inline void set_tschchartserieserrorbarstddevvaluescatterx(float value);

  // optional int32 tschchartserieserrorbartype = 14;
  inline bool has_tschchartserieserrorbartype() const;
  inline void clear_tschchartserieserrorbartype();
  static const int kTschchartserieserrorbartypeFieldNumber = 14;
  inline ::google::protobuf::int32 tschchartserieserrorbartype() const;
  inline void set_tschchartserieserrorbartype(::google::protobuf::int32 value);

  // optional int32 tschchartserieserrorbartypescatterx = 15;
  inline bool has_tschchartserieserrorbartypescatterx() const;
  inline void clear_tschchartserieserrorbartypescatterx();
  static const int kTschchartserieserrorbartypescatterxFieldNumber = 15;
  inline ::google::protobuf::int32 tschchartserieserrorbartypescatterx() const;
  inline void set_tschchartserieserrorbartypescatterx(::google::protobuf::int32 value);

  // optional float tschchartserieslabelexplosion = 16;
  inline bool has_tschchartserieslabelexplosion() const;
  inline void clear_tschchartserieslabelexplosion();
  static const int kTschchartserieslabelexplosionFieldNumber = 16;
  inline float tschchartserieslabelexplosion() const;
  inline void set_tschchartserieslabelexplosion(float value);

  // optional int32 tschchartserieslinetype = 17;
  inline bool has_tschchartserieslinetype() const;
  inline void clear_tschchartserieslinetype();
  static const int kTschchartserieslinetypeFieldNumber = 17;
  inline ::google::protobuf::int32 tschchartserieslinetype() const;
  inline void set_tschchartserieslinetype(::google::protobuf::int32 value);

  // optional .TSK.FormatStructArchive tschchartseries1_0numberformat = 18;
  inline bool has_tschchartseries1_0numberformat() const;
  inline void clear_tschchartseries1_0numberformat();
  static const int kTschchartseries10NumberformatFieldNumber = 18;
  inline const ::TSK::FormatStructArchive& tschchartseries1_0numberformat() const;
  inline ::TSK::FormatStructArchive* mutable_tschchartseries1_0numberformat();
  inline ::TSK::FormatStructArchive* release_tschchartseries1_0numberformat();
  inline void set_allocated_tschchartseries1_0numberformat(::TSK::FormatStructArchive* tschchartseries1_0numberformat);

  // optional .TSK.FormatStructArchive tschchartseriesnumberformat = 19;
  inline bool has_tschchartseriesnumberformat() const;
  inline void clear_tschchartseriesnumberformat();
  static const int kTschchartseriesnumberformatFieldNumber = 19;
  inline const ::TSK::FormatStructArchive& tschchartseriesnumberformat() const;
  inline ::TSK::FormatStructArchive* mutable_tschchartseriesnumberformat();
  inline ::TSK::FormatStructArchive* release_tschchartseriesnumberformat();
  inline void set_allocated_tschchartseriesnumberformat(::TSK::FormatStructArchive* tschchartseriesnumberformat);

  // optional .TSK.FormatStructArchive tschchartseries1_0dateformat = 20;
  inline bool has_tschchartseries1_0dateformat() const;
  inline void clear_tschchartseries1_0dateformat();
  static const int kTschchartseries10DateformatFieldNumber = 20;
  inline const ::TSK::FormatStructArchive& tschchartseries1_0dateformat() const;
  inline ::TSK::FormatStructArchive* mutable_tschchartseries1_0dateformat();
  inline ::TSK::FormatStructArchive* release_tschchartseries1_0dateformat();
  inline void set_allocated_tschchartseries1_0dateformat(::TSK::FormatStructArchive* tschchartseries1_0dateformat);

  // optional .TSK.FormatStructArchive tschchartseriesdurationformat = 21;
  inline bool has_tschchartseriesdurationformat() const;
  inline void clear_tschchartseriesdurationformat();
  static const int kTschchartseriesdurationformatFieldNumber = 21;
  inline const ::TSK::FormatStructArchive& tschchartseriesdurationformat() const;
  inline ::TSK::FormatStructArchive* mutable_tschchartseriesdurationformat();
  inline ::TSK::FormatStructArchive* release_tschchartseriesdurationformat();
  inline void set_allocated_tschchartseriesdurationformat(::TSK::FormatStructArchive* tschchartseriesdurationformat);

  // optional .TSK.FormatStructArchive tschchartseriesdateformat = 22;
  inline bool has_tschchartseriesdateformat() const;
  inline void clear_tschchartseriesdateformat();
  static const int kTschchartseriesdateformatFieldNumber = 22;
  inline const ::TSK::FormatStructArchive& tschchartseriesdateformat() const;
  inline ::TSK::FormatStructArchive* mutable_tschchartseriesdateformat();
  inline ::TSK::FormatStructArchive* release_tschchartseriesdateformat();
  inline void set_allocated_tschchartseriesdateformat(::TSK::FormatStructArchive* tschchartseriesdateformat);

  // optional int32 tschchartseriesnumberformattype = 23;
  inline bool has_tschchartseriesnumberformattype() const;
  inline void clear_tschchartseriesnumberformattype();
  static const int kTschchartseriesnumberformattypeFieldNumber = 23;
  inline ::google::protobuf::int32 tschchartseriesnumberformattype() const;
  inline void set_tschchartseriesnumberformattype(::google::protobuf::int32 value);

  // optional .TSK.FormatStructArchive tschchartseriespercentnumberformat = 24;
  inline bool has_tschchartseriespercentnumberformat() const;
  inline void clear_tschchartseriespercentnumberformat();
  static const int kTschchartseriespercentnumberformatFieldNumber = 24;
  inline const ::TSK::FormatStructArchive& tschchartseriespercentnumberformat() const;
  inline ::TSK::FormatStructArchive* mutable_tschchartseriespercentnumberformat();
  inline ::TSK::FormatStructArchive* release_tschchartseriespercentnumberformat();
  inline void set_allocated_tschchartseriespercentnumberformat(::TSK::FormatStructArchive* tschchartseriespercentnumberformat);

  // optional int32 tschchartseriesseriestype = 25;
  inline bool has_tschchartseriesseriestype() const;
  inline void clear_tschchartseriesseriestype();
  static const int kTschchartseriesseriestypeFieldNumber = 25;
  inline ::google::protobuf::int32 tschchartseriesseriestype() const;
  inline void set_tschchartseriesseriestype(::google::protobuf::int32 value);

  // optional bool tschchartseriesshowerrorbar = 26;
  inline bool has_tschchartseriesshowerrorbar() const;
  inline void clear_tschchartseriesshowerrorbar();
  static const int kTschchartseriesshowerrorbarFieldNumber = 26;
  inline bool tschchartseriesshowerrorbar() const;
  inline void set_tschchartseriesshowerrorbar(bool value);

  // optional bool tschchartseriesshowerrorbarscatterx = 27;
  inline bool has_tschchartseriesshowerrorbarscatterx() const;
  inline void clear_tschchartseriesshowerrorbarscatterx();
  static const int kTschchartseriesshowerrorbarscatterxFieldNumber = 27;
  inline bool tschchartseriesshowerrorbarscatterx() const;
  inline void set_tschchartseriesshowerrorbarscatterx(bool value);

  // optional bool tschchartseriesshowline = 28;
  inline bool has_tschchartseriesshowline() const;
  inline void clear_tschchartseriesshowline();
  static const int kTschchartseriesshowlineFieldNumber = 28;
  inline bool tschchartseriesshowline() const;
  inline void set_tschchartseriesshowline(bool value);

  // optional bool tschchartseriesshownegativedata = 29;
  inline bool has_tschchartseriesshownegativedata() const;
  inline void clear_tschchartseriesshownegativedata();
  static const int kTschchartseriesshownegativedataFieldNumber = 29;
  inline bool tschchartseriesshownegativedata() const;
  inline void set_tschchartseriesshownegativedata(bool value);

  // optional bool tschchartseriesshowserieslabels = 30;
  inline bool has_tschchartseriesshowserieslabels() const;
  inline void clear_tschchartseriesshowserieslabels();
  static const int kTschchartseriesshowserieslabelsFieldNumber = 30;
  inline bool tschchartseriesshowserieslabels() const;
  inline void set_tschchartseriesshowserieslabels(bool value);

  // optional bool tschchartseriesshowsymbol = 31;
  inline bool has_tschchartseriesshowsymbol() const;
  inline void clear_tschchartseriesshowsymbol();
  static const int kTschchartseriesshowsymbolFieldNumber = 31;
  inline bool tschchartseriesshowsymbol() const;
  inline void set_tschchartseriesshowsymbol(bool value);

  // optional bool tschchartseriesshowtrendline = 32;
  inline bool has_tschchartseriesshowtrendline() const;
  inline void clear_tschchartseriesshowtrendline();
  static const int kTschchartseriesshowtrendlineFieldNumber = 32;
  inline bool tschchartseriesshowtrendline() const;
  inline void set_tschchartseriesshowtrendline(bool value);

  // optional bool tschchartseriesshowvaluelabels = 33;
  inline bool has_tschchartseriesshowvaluelabels() const;
  inline void clear_tschchartseriesshowvaluelabels();
  static const int kTschchartseriesshowvaluelabelsFieldNumber = 33;
  inline bool tschchartseriesshowvaluelabels() const;
  inline void set_tschchartseriesshowvaluelabels(bool value);

  // optional int32 tschchartseriessizedimension = 34;
  inline bool has_tschchartseriessizedimension() const;
  inline void clear_tschchartseriessizedimension();
  static const int kTschchartseriessizedimensionFieldNumber = 34;
  inline ::google::protobuf::int32 tschchartseriessizedimension() const;
  inline void set_tschchartseriessizedimension(::google::protobuf::int32 value);

  // optional int32 tschchartseriessymboltype = 35;
  inline bool has_tschchartseriessymboltype() const;
  inline void clear_tschchartseriessymboltype();
  static const int kTschchartseriessymboltypeFieldNumber = 35;
  inline ::google::protobuf::int32 tschchartseriessymboltype() const;
  inline void set_tschchartseriessymboltype(::google::protobuf::int32 value);

  // optional float tschchartseriestrendlineequationoffsetx = 36;
  inline bool has_tschchartseriestrendlineequationoffsetx() const;
  inline void clear_tschchartseriestrendlineequationoffsetx();
  static const int kTschchartseriestrendlineequationoffsetxFieldNumber = 36;
  inline float tschchartseriestrendlineequationoffsetx() const;
  inline void set_tschchartseriestrendlineequationoffsetx(float value);

  // optional float tschchartseriestrendlineequationoffsety = 37;
  inline bool has_tschchartseriestrendlineequationoffsety() const;
  inline void clear_tschchartseriestrendlineequationoffsety();
  static const int kTschchartseriestrendlineequationoffsetyFieldNumber = 37;
  inline float tschchartseriestrendlineequationoffsety() const;
  inline void set_tschchartseriestrendlineequationoffsety(float value);

  // optional string tschchartseriestrendlinelabelstring = 38;
  inline bool has_tschchartseriestrendlinelabelstring() const;
  inline void clear_tschchartseriestrendlinelabelstring();
  static const int kTschchartseriestrendlinelabelstringFieldNumber = 38;
  inline const ::std::string& tschchartseriestrendlinelabelstring() const;
  inline void set_tschchartseriestrendlinelabelstring(const ::std::string& value);
  inline void set_tschchartseriestrendlinelabelstring(const char* value);
  inline void set_tschchartseriestrendlinelabelstring(const char* value, size_t size);
  inline ::std::string* mutable_tschchartseriestrendlinelabelstring();
  inline ::std::string* release_tschchartseriestrendlinelabelstring();
  inline void set_allocated_tschchartseriestrendlinelabelstring(::std::string* tschchartseriestrendlinelabelstring);

  // optional int32 tschchartseriestrendlineorder = 39;
  inline bool has_tschchartseriestrendlineorder() const;
  inline void clear_tschchartseriestrendlineorder();
  static const int kTschchartseriestrendlineorderFieldNumber = 39;
  inline ::google::protobuf::int32 tschchartseriestrendlineorder() const;
  inline void set_tschchartseriestrendlineorder(::google::protobuf::int32 value);

  // optional int32 tschchartseriestrendlineperiod = 40;
  inline bool has_tschchartseriestrendlineperiod() const;
  inline void clear_tschchartseriestrendlineperiod();
  static const int kTschchartseriestrendlineperiodFieldNumber = 40;
  inline ::google::protobuf::int32 tschchartseriestrendlineperiod() const;
  inline void set_tschchartseriestrendlineperiod(::google::protobuf::int32 value);

  // optional float tschchartseriestrendlinersquaredoffsetx = 41;
  inline bool has_tschchartseriestrendlinersquaredoffsetx() const;
  inline void clear_tschchartseriestrendlinersquaredoffsetx();
  static const int kTschchartseriestrendlinersquaredoffsetxFieldNumber = 41;
  inline float tschchartseriestrendlinersquaredoffsetx() const;
  inline void set_tschchartseriestrendlinersquaredoffsetx(float value);

  // optional float tschchartseriestrendlinersquaredoffsety = 42;
  inline bool has_tschchartseriestrendlinersquaredoffsety() const;
  inline void clear_tschchartseriestrendlinersquaredoffsety();
  static const int kTschchartseriestrendlinersquaredoffsetyFieldNumber = 42;
  inline float tschchartseriestrendlinersquaredoffsety() const;
  inline void set_tschchartseriestrendlinersquaredoffsety(float value);

  // optional bool tschchartseriestrendlineshowequation = 43;
  inline bool has_tschchartseriestrendlineshowequation() const;
  inline void clear_tschchartseriestrendlineshowequation();
  static const int kTschchartseriestrendlineshowequationFieldNumber = 43;
  inline bool tschchartseriestrendlineshowequation() const;
  inline void set_tschchartseriestrendlineshowequation(bool value);

  // optional bool tschchartseriestrendlineshowlabel = 44;
  inline bool has_tschchartseriestrendlineshowlabel() const;
  inline void clear_tschchartseriestrendlineshowlabel();
  static const int kTschchartseriestrendlineshowlabelFieldNumber = 44;
  inline bool tschchartseriestrendlineshowlabel() const;
  inline void set_tschchartseriestrendlineshowlabel(bool value);

  // optional bool tschchartseriestrendlineshowr2value = 45;
  inline bool has_tschchartseriestrendlineshowr2value() const;
  inline void clear_tschchartseriestrendlineshowr2value();
  static const int kTschchartseriestrendlineshowr2ValueFieldNumber = 45;
  inline bool tschchartseriestrendlineshowr2value() const;
  inline void set_tschchartseriestrendlineshowr2value(bool value);

  // optional int32 tschchartseriestrendlinetype = 46;
  inline bool has_tschchartseriestrendlinetype() const;
  inline void clear_tschchartseriestrendlinetype();
  static const int kTschchartseriestrendlinetypeFieldNumber = 46;
  inline ::google::protobuf::int32 tschchartseriestrendlinetype() const;
  inline void set_tschchartseriestrendlinetype(::google::protobuf::int32 value);

  // optional float tschchartserieswedgeexplosion = 47;
  inline bool has_tschchartserieswedgeexplosion() const;
  inline void clear_tschchartserieswedgeexplosion();
  static const int kTschchartserieswedgeexplosionFieldNumber = 47;
  inline float tschchartserieswedgeexplosion() const;
  inline void set_tschchartserieswedgeexplosion(float value);

  // optional int32 tschchartseriesyaxisordinal = 48;
  inline bool has_tschchartseriesyaxisordinal() const;
  inline void clear_tschchartseriesyaxisordinal();
  static const int kTschchartseriesyaxisordinalFieldNumber = 48;
  inline ::google::protobuf::int32 tschchartseriesyaxisordinal() const;
  inline void set_tschchartseriesyaxisordinal(::google::protobuf::int32 value);

  // optional int32 tschchartseriesvaluelabelsaxis = 49;
  inline bool has_tschchartseriesvaluelabelsaxis() const;
  inline void clear_tschchartseriesvaluelabelsaxis();
  static const int kTschchartseriesvaluelabelsaxisFieldNumber = 49;
  inline ::google::protobuf::int32 tschchartseriesvaluelabelsaxis() const;
  inline void set_tschchartseriesvaluelabelsaxis(::google::protobuf::int32 value);

  // optional .TSD.LineEndArchive tschchartserieserrorbarlineend = 50;
  inline bool has_tschchartserieserrorbarlineend() const;
  inline void clear_tschchartserieserrorbarlineend();
  static const int kTschchartserieserrorbarlineendFieldNumber = 50;
  inline const ::TSD::LineEndArchive& tschchartserieserrorbarlineend() const;
  inline ::TSD::LineEndArchive* mutable_tschchartserieserrorbarlineend();
  inline ::TSD::LineEndArchive* release_tschchartserieserrorbarlineend();
  inline void set_allocated_tschchartserieserrorbarlineend(::TSD::LineEndArchive* tschchartserieserrorbarlineend);

  // optional .TSD.LineEndArchive tschchartserieserrorbarlineendscatterx = 51;
  inline bool has_tschchartserieserrorbarlineendscatterx() const;
  inline void clear_tschchartserieserrorbarlineendscatterx();
  static const int kTschchartserieserrorbarlineendscatterxFieldNumber = 51;
  inline const ::TSD::LineEndArchive& tschchartserieserrorbarlineendscatterx() const;
  inline ::TSD::LineEndArchive* mutable_tschchartserieserrorbarlineendscatterx();
  inline ::TSD::LineEndArchive* release_tschchartserieserrorbarlineendscatterx();
  inline void set_allocated_tschchartserieserrorbarlineendscatterx(::TSD::LineEndArchive* tschchartserieserrorbarlineendscatterx);

  // optional .TSD.ShadowArchive tschchartserieserrorbarshadow = 52;
  inline bool has_tschchartserieserrorbarshadow() const;
  inline void clear_tschchartserieserrorbarshadow();
  static const int kTschchartserieserrorbarshadowFieldNumber = 52;
  inline const ::TSD::ShadowArchive& tschchartserieserrorbarshadow() const;
  inline ::TSD::ShadowArchive* mutable_tschchartserieserrorbarshadow();
  inline ::TSD::ShadowArchive* release_tschchartserieserrorbarshadow();
  inline void set_allocated_tschchartserieserrorbarshadow(::TSD::ShadowArchive* tschchartserieserrorbarshadow);

  // optional .TSD.StrokeArchive tschchartserieserrorbarstroke = 53;
  inline bool has_tschchartserieserrorbarstroke() const;
  inline void clear_tschchartserieserrorbarstroke();
  static const int kTschchartserieserrorbarstrokeFieldNumber = 53;
  inline const ::TSD::StrokeArchive& tschchartserieserrorbarstroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartserieserrorbarstroke();
  inline ::TSD::StrokeArchive* release_tschchartserieserrorbarstroke();
  inline void set_allocated_tschchartserieserrorbarstroke(::TSD::StrokeArchive* tschchartserieserrorbarstroke);

  // optional .TSD.StrokeArchive tschchartserieserrorbarstrokescatterx = 54;
  inline bool has_tschchartserieserrorbarstrokescatterx() const;
  inline void clear_tschchartserieserrorbarstrokescatterx();
  static const int kTschchartserieserrorbarstrokescatterxFieldNumber = 54;
  inline const ::TSD::StrokeArchive& tschchartserieserrorbarstrokescatterx() const;
  inline ::TSD::StrokeArchive* mutable_tschchartserieserrorbarstrokescatterx();
  inline ::TSD::StrokeArchive* release_tschchartserieserrorbarstrokescatterx();
  inline void set_allocated_tschchartserieserrorbarstrokescatterx(::TSD::StrokeArchive* tschchartserieserrorbarstrokescatterx);

  // optional .TSD.FillArchive tschchartseriesfill = 55;
  inline bool has_tschchartseriesfill() const;
  inline void clear_tschchartseriesfill();
  static const int kTschchartseriesfillFieldNumber = 55;
  inline const ::TSD::FillArchive& tschchartseriesfill() const;
  inline ::TSD::FillArchive* mutable_tschchartseriesfill();
  inline ::TSD::FillArchive* release_tschchartseriesfill();
  inline void set_allocated_tschchartseriesfill(::TSD::FillArchive* tschchartseriesfill);

  // optional int32 tschchartserieslabelparagraphstyleindex = 56;
  inline bool has_tschchartserieslabelparagraphstyleindex() const;
  inline void clear_tschchartserieslabelparagraphstyleindex();
  static const int kTschchartserieslabelparagraphstyleindexFieldNumber = 56;
  inline ::google::protobuf::int32 tschchartserieslabelparagraphstyleindex() const;
  inline void set_tschchartserieslabelparagraphstyleindex(::google::protobuf::int32 value);

  // optional float tschchartseriesopacity = 57;
  inline bool has_tschchartseriesopacity() const;
  inline void clear_tschchartseriesopacity();
  static const int kTschchartseriesopacityFieldNumber = 57;
  inline float tschchartseriesopacity() const;
  inline void set_tschchartseriesopacity(float value);

  // optional int32 tschchartseriesoutsidelabelparagraphstyleindex = 58;
  inline bool has_tschchartseriesoutsidelabelparagraphstyleindex() const;
  inline void clear_tschchartseriesoutsidelabelparagraphstyleindex();
  static const int kTschchartseriesoutsidelabelparagraphstyleindexFieldNumber = 58;
  inline ::google::protobuf::int32 tschchartseriesoutsidelabelparagraphstyleindex() const;
  inline void set_tschchartseriesoutsidelabelparagraphstyleindex(::google::protobuf::int32 value);

  // optional .TSD.ShadowArchive tschchartseriesshadow = 59;
  inline bool has_tschchartseriesshadow() const;
  inline void clear_tschchartseriesshadow();
  static const int kTschchartseriesshadowFieldNumber = 59;
  inline const ::TSD::ShadowArchive& tschchartseriesshadow() const;
  inline ::TSD::ShadowArchive* mutable_tschchartseriesshadow();
  inline ::TSD::ShadowArchive* release_tschchartseriesshadow();
  inline void set_allocated_tschchartseriesshadow(::TSD::ShadowArchive* tschchartseriesshadow);

  // optional .TSD.StrokeArchive tschchartseriesstroke = 60;
  inline bool has_tschchartseriesstroke() const;
  inline void clear_tschchartseriesstroke();
  static const int kTschchartseriesstrokeFieldNumber = 60;
  inline const ::TSD::StrokeArchive& tschchartseriesstroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartseriesstroke();
  inline ::TSD::StrokeArchive* release_tschchartseriesstroke();
  inline void set_allocated_tschchartseriesstroke(::TSD::StrokeArchive* tschchartseriesstroke);

  // optional .TSD.FillArchive tschchartseriessymbolfill = 61;
  inline bool has_tschchartseriessymbolfill() const;
  inline void clear_tschchartseriessymbolfill();
  static const int kTschchartseriessymbolfillFieldNumber = 61;
  inline const ::TSD::FillArchive& tschchartseriessymbolfill() const;
  inline ::TSD::FillArchive* mutable_tschchartseriessymbolfill();
  inline ::TSD::FillArchive* release_tschchartseriessymbolfill();
  inline void set_allocated_tschchartseriessymbolfill(::TSD::FillArchive* tschchartseriessymbolfill);

  // optional bool tschchartseriessymbolfilluseseriesfill = 62;
  inline bool has_tschchartseriessymbolfilluseseriesfill() const;
  inline void clear_tschchartseriessymbolfilluseseriesfill();
  static const int kTschchartseriessymbolfilluseseriesfillFieldNumber = 62;
  inline bool tschchartseriessymbolfilluseseriesfill() const;
  inline void set_tschchartseriessymbolfilluseseriesfill(bool value);

  // optional bool tschchartseriessymbolfilluseseriesstroke = 63;
  inline bool has_tschchartseriessymbolfilluseseriesstroke() const;
  inline void clear_tschchartseriessymbolfilluseseriesstroke();
  static const int kTschchartseriessymbolfilluseseriesstrokeFieldNumber = 63;
  inline bool tschchartseriessymbolfilluseseriesstroke() const;
  inline void set_tschchartseriessymbolfilluseseriesstroke(bool value);

  // optional float tschchartseriessymbolsize = 64;
  inline bool has_tschchartseriessymbolsize() const;
  inline void clear_tschchartseriessymbolsize();
  static const int kTschchartseriessymbolsizeFieldNumber = 64;
  inline float tschchartseriessymbolsize() const;
  inline void set_tschchartseriessymbolsize(float value);

  // optional .TSD.StrokeArchive tschchartseriessymbolstroke = 65;
  inline bool has_tschchartseriessymbolstroke() const;
  inline void clear_tschchartseriessymbolstroke();
  static const int kTschchartseriessymbolstrokeFieldNumber = 65;
  inline const ::TSD::StrokeArchive& tschchartseriessymbolstroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartseriessymbolstroke();
  inline ::TSD::StrokeArchive* release_tschchartseriessymbolstroke();
  inline void set_allocated_tschchartseriessymbolstroke(::TSD::StrokeArchive* tschchartseriessymbolstroke);

  // optional float tschchartseriestrendlineequationopacity = 66;
  inline bool has_tschchartseriestrendlineequationopacity() const;
  inline void clear_tschchartseriestrendlineequationopacity();
  static const int kTschchartseriestrendlineequationopacityFieldNumber = 66;
  inline float tschchartseriestrendlineequationopacity() const;
  inline void set_tschchartseriestrendlineequationopacity(float value);

  // optional int32 tschchartseriestrendlineequationparagraphstyleindex = 67;
  inline bool has_tschchartseriestrendlineequationparagraphstyleindex() const;
  inline void clear_tschchartseriestrendlineequationparagraphstyleindex();
  static const int kTschchartseriestrendlineequationparagraphstyleindexFieldNumber = 67;
  inline ::google::protobuf::int32 tschchartseriestrendlineequationparagraphstyleindex() const;
  inline void set_tschchartseriestrendlineequationparagraphstyleindex(::google::protobuf::int32 value);

  // optional float tschchartseriestrendlinersquaredopacity = 68;
  inline bool has_tschchartseriestrendlinersquaredopacity() const;
  inline void clear_tschchartseriestrendlinersquaredopacity();
  static const int kTschchartseriestrendlinersquaredopacityFieldNumber = 68;
  inline float tschchartseriestrendlinersquaredopacity() const;
  inline void set_tschchartseriestrendlinersquaredopacity(float value);

  // optional int32 tschchartseriestrendlinersquaredparagraphstyleindex = 69;
  inline bool has_tschchartseriestrendlinersquaredparagraphstyleindex() const;
  inline void clear_tschchartseriestrendlinersquaredparagraphstyleindex();
  static const int kTschchartseriestrendlinersquaredparagraphstyleindexFieldNumber = 69;
  inline ::google::protobuf::int32 tschchartseriestrendlinersquaredparagraphstyleindex() const;
  inline void set_tschchartseriestrendlinersquaredparagraphstyleindex(::google::protobuf::int32 value);

  // optional .TSD.ShadowArchive tschchartseriestrendlineshadow = 70;
  inline bool has_tschchartseriestrendlineshadow() const;
  inline void clear_tschchartseriestrendlineshadow();
  static const int kTschchartseriestrendlineshadowFieldNumber = 70;
  inline const ::TSD::ShadowArchive& tschchartseriestrendlineshadow() const;
  inline ::TSD::ShadowArchive* mutable_tschchartseriestrendlineshadow();
  inline ::TSD::ShadowArchive* release_tschchartseriestrendlineshadow();
  inline void set_allocated_tschchartseriestrendlineshadow(::TSD::ShadowArchive* tschchartseriestrendlineshadow);

  // optional .TSD.StrokeArchive tschchartseriestrendlinestroke = 71;
  inline bool has_tschchartseriestrendlinestroke() const;
  inline void clear_tschchartseriestrendlinestroke();
  static const int kTschchartseriestrendlinestrokeFieldNumber = 71;
  inline const ::TSD::StrokeArchive& tschchartseriestrendlinestroke() const;
  inline ::TSD::StrokeArchive* mutable_tschchartseriestrendlinestroke();
  inline ::TSD::StrokeArchive* release_tschchartseriestrendlinestroke();
  inline void set_allocated_tschchartseriestrendlinestroke(::TSD::StrokeArchive* tschchartseriestrendlinestroke);

  // optional int32 tschchartseriesvaluelabelposition = 72;
  inline bool has_tschchartseriesvaluelabelposition() const;
  inline void clear_tschchartseriesvaluelabelposition();
  static const int kTschchartseriesvaluelabelpositionFieldNumber = 72;
  inline ::google::protobuf::int32 tschchartseriesvaluelabelposition() const;
  inline void set_tschchartseriesvaluelabelposition(::google::protobuf::int32 value);

  // optional bool tschchartseriesshowlabelsinfront = 73;
  inline bool has_tschchartseriesshowlabelsinfront() const;
  inline void clear_tschchartseriesshowlabelsinfront();
  static const int kTschchartseriesshowlabelsinfrontFieldNumber = 73;
  inline bool tschchartseriesshowlabelsinfront() const;
  inline void set_tschchartseriesshowlabelsinfront(bool value);

  // @@protoc_insertion_point(class_scope:TSCH.Generated.ChartSeriesGenericPropertyMapArchive)
 private:
  inline void set_has_tschchartseriesadjustmentscale();
  inline void clear_has_tschchartseriesadjustmentscale();
  inline void set_has_tschchartserieserrorbarcustomnegativedata();
  inline void clear_has_tschchartserieserrorbarcustomnegativedata();
  inline void set_has_tschchartserieserrorbarcustomnegativedatascatterx();
  inline void clear_has_tschchartserieserrorbarcustomnegativedatascatterx();
  inline void set_has_tschchartserieserrorbarcustompositivedata();
  inline void clear_has_tschchartserieserrorbarcustompositivedata();
  inline void set_has_tschchartserieserrorbarcustompositivedatascatterx();
  inline void clear_has_tschchartserieserrorbarcustompositivedatascatterx();
  inline void set_has_tschchartserieserrorbarfixedvalue();
  inline void clear_has_tschchartserieserrorbarfixedvalue();
  inline void set_has_tschchartserieserrorbarfixedvaluescatterx();
  inline void clear_has_tschchartserieserrorbarfixedvaluescatterx();
  inline void set_has_tschchartserieserrorbarpercentvalue();
  inline void clear_has_tschchartserieserrorbarpercentvalue();
  inline void set_has_tschchartserieserrorbarpercentvaluescatterx();
  inline void clear_has_tschchartserieserrorbarpercentvaluescatterx();
  inline void set_has_tschchartserieserrorbarsetting();
  inline void clear_has_tschchartserieserrorbarsetting();
  inline void set_has_tschchartserieserrorbarsettingscatterx();
  inline void clear_has_tschchartserieserrorbarsettingscatterx();
  inline void set_has_tschchartserieserrorbarstddevvalue();
  inline void clear_has_tschchartserieserrorbarstddevvalue();
  inline void set_has_tschchartserieserrorbarstddevvaluescatterx();
  inline void clear_has_tschchartserieserrorbarstddevvaluescatterx();
  inline void set_has_tschchartserieserrorbartype();
  inline void clear_has_tschchartserieserrorbartype();
  inline void set_has_tschchartserieserrorbartypescatterx();
  inline void clear_has_tschchartserieserrorbartypescatterx();
  inline void set_has_tschchartserieslabelexplosion();
  inline void clear_has_tschchartserieslabelexplosion();
  inline void set_has_tschchartserieslinetype();
  inline void clear_has_tschchartserieslinetype();
  inline void set_has_tschchartseries1_0numberformat();
  inline void clear_has_tschchartseries1_0numberformat();
  inline void set_has_tschchartseriesnumberformat();
  inline void clear_has_tschchartseriesnumberformat();
  inline void set_has_tschchartseries1_0dateformat();
  inline void clear_has_tschchartseries1_0dateformat();
  inline void set_has_tschchartseriesdurationformat();
  inline void clear_has_tschchartseriesdurationformat();
  inline void set_has_tschchartseriesdateformat();
  inline void clear_has_tschchartseriesdateformat();
  inline void set_has_tschchartseriesnumberformattype();
  inline void clear_has_tschchartseriesnumberformattype();
  inline void set_has_tschchartseriespercentnumberformat();
  inline void clear_has_tschchartseriespercentnumberformat();
  inline void set_has_tschchartseriesseriestype();
  inline void clear_has_tschchartseriesseriestype();
  inline void set_has_tschchartseriesshowerrorbar();
  inline void clear_has_tschchartseriesshowerrorbar();
  inline void set_has_tschchartseriesshowerrorbarscatterx();
  inline void clear_has_tschchartseriesshowerrorbarscatterx();
  inline void set_has_tschchartseriesshowline();
  inline void clear_has_tschchartseriesshowline();
  inline void set_has_tschchartseriesshownegativedata();
  inline void clear_has_tschchartseriesshownegativedata();
  inline void set_has_tschchartseriesshowserieslabels();
  inline void clear_has_tschchartseriesshowserieslabels();
  inline void set_has_tschchartseriesshowsymbol();
  inline void clear_has_tschchartseriesshowsymbol();
  inline void set_has_tschchartseriesshowtrendline();
  inline void clear_has_tschchartseriesshowtrendline();
  inline void set_has_tschchartseriesshowvaluelabels();
  inline void clear_has_tschchartseriesshowvaluelabels();
  inline void set_has_tschchartseriessizedimension();
  inline void clear_has_tschchartseriessizedimension();
  inline void set_has_tschchartseriessymboltype();
  inline void clear_has_tschchartseriessymboltype();
  inline void set_has_tschchartseriestrendlineequationoffsetx();
  inline void clear_has_tschchartseriestrendlineequationoffsetx();
  inline void set_has_tschchartseriestrendlineequationoffsety();
  inline void clear_has_tschchartseriestrendlineequationoffsety();
  inline void set_has_tschchartseriestrendlinelabelstring();
  inline void clear_has_tschchartseriestrendlinelabelstring();
  inline void set_has_tschchartseriestrendlineorder();
  inline void clear_has_tschchartseriestrendlineorder();
  inline void set_has_tschchartseriestrendlineperiod();
  inline void clear_has_tschchartseriestrendlineperiod();
  inline void set_has_tschchartseriestrendlinersquaredoffsetx();
  inline void clear_has_tschchartseriestrendlinersquaredoffsetx();
  inline void set_has_tschchartseriestrendlinersquaredoffsety();
  inline void clear_has_tschchartseriestrendlinersquaredoffsety();
  inline void set_has_tschchartseriestrendlineshowequation();
  inline void clear_has_tschchartseriestrendlineshowequation();
  inline void set_has_tschchartseriestrendlineshowlabel();
  inline void clear_has_tschchartseriestrendlineshowlabel();
  inline void set_has_tschchartseriestrendlineshowr2value();
  inline void clear_has_tschchartseriestrendlineshowr2value();
  inline void set_has_tschchartseriestrendlinetype();
  inline void clear_has_tschchartseriestrendlinetype();
  inline void set_has_tschchartserieswedgeexplosion();
  inline void clear_has_tschchartserieswedgeexplosion();
  inline void set_has_tschchartseriesyaxisordinal();
  inline void clear_has_tschchartseriesyaxisordinal();
  inline void set_has_tschchartseriesvaluelabelsaxis();
  inline void clear_has_tschchartseriesvaluelabelsaxis();
  inline void set_has_tschchartserieserrorbarlineend();
  inline void clear_has_tschchartserieserrorbarlineend();
  inline void set_has_tschchartserieserrorbarlineendscatterx();
  inline void clear_has_tschchartserieserrorbarlineendscatterx();
  inline void set_has_tschchartserieserrorbarshadow();
  inline void clear_has_tschchartserieserrorbarshadow();
  inline void set_has_tschchartserieserrorbarstroke();
  inline void clear_has_tschchartserieserrorbarstroke();
  inline void set_has_tschchartserieserrorbarstrokescatterx();
  inline void clear_has_tschchartserieserrorbarstrokescatterx();
  inline void set_has_tschchartseriesfill();
  inline void clear_has_tschchartseriesfill();
  inline void set_has_tschchartserieslabelparagraphstyleindex();
  inline void clear_has_tschchartserieslabelparagraphstyleindex();
  inline void set_has_tschchartseriesopacity();
  inline void clear_has_tschchartseriesopacity();
  inline void set_has_tschchartseriesoutsidelabelparagraphstyleindex();
  inline void clear_has_tschchartseriesoutsidelabelparagraphstyleindex();
  inline void set_has_tschchartseriesshadow();
  inline void clear_has_tschchartseriesshadow();
  inline void set_has_tschchartseriesstroke();
  inline void clear_has_tschchartseriesstroke();
  inline void set_has_tschchartseriessymbolfill();
  inline void clear_has_tschchartseriessymbolfill();
  inline void set_has_tschchartseriessymbolfilluseseriesfill();
  inline void clear_has_tschchartseriessymbolfilluseseriesfill();
  inline void set_has_tschchartseriessymbolfilluseseriesstroke();
  inline void clear_has_tschchartseriessymbolfilluseseriesstroke();
  inline void set_has_tschchartseriessymbolsize();
  inline void clear_has_tschchartseriessymbolsize();
  inline void set_has_tschchartseriessymbolstroke();
  inline void clear_has_tschchartseriessymbolstroke();
  inline void set_has_tschchartseriestrendlineequationopacity();
  inline void clear_has_tschchartseriestrendlineequationopacity();
  inline void set_has_tschchartseriestrendlineequationparagraphstyleindex();
  inline void clear_has_tschchartseriestrendlineequationparagraphstyleindex();
  inline void set_has_tschchartseriestrendlinersquaredopacity();
  inline void clear_has_tschchartseriestrendlinersquaredopacity();
  inline void set_has_tschchartseriestrendlinersquaredparagraphstyleindex();
  inline void clear_has_tschchartseriestrendlinersquaredparagraphstyleindex();
  inline void set_has_tschchartseriestrendlineshadow();
  inline void clear_has_tschchartseriestrendlineshadow();
  inline void set_has_tschchartseriestrendlinestroke();
  inline void clear_has_tschchartseriestrendlinestroke();
  inline void set_has_tschchartseriesvaluelabelposition();
  inline void clear_has_tschchartseriesvaluelabelposition();
  inline void set_has_tschchartseriesshowlabelsinfront();
  inline void clear_has_tschchartseriesshowlabelsinfront();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustomnegativedata_;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustomnegativedatascatterx_;
  float tschchartseriesadjustmentscale_;
  float tschchartserieserrorbarfixedvalue_;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustompositivedata_;
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustompositivedatascatterx_;
  float tschchartserieserrorbarfixedvaluescatterx_;
  float tschchartserieserrorbarpercentvalue_;
  float tschchartserieserrorbarpercentvaluescatterx_;
  ::google::protobuf::int32 tschchartserieserrorbarsetting_;
  ::google::protobuf::int32 tschchartserieserrorbarsettingscatterx_;
  float tschchartserieserrorbarstddevvalue_;
  float tschchartserieserrorbarstddevvaluescatterx_;
  ::google::protobuf::int32 tschchartserieserrorbartype_;
  ::google::protobuf::int32 tschchartserieserrorbartypescatterx_;
  float tschchartserieslabelexplosion_;
  ::TSK::FormatStructArchive* tschchartseries1_0numberformat_;
  ::TSK::FormatStructArchive* tschchartseriesnumberformat_;
  ::TSK::FormatStructArchive* tschchartseries1_0dateformat_;
  ::google::protobuf::int32 tschchartserieslinetype_;
  ::google::protobuf::int32 tschchartseriesnumberformattype_;
  ::TSK::FormatStructArchive* tschchartseriesdurationformat_;
  ::TSK::FormatStructArchive* tschchartseriesdateformat_;
  ::TSK::FormatStructArchive* tschchartseriespercentnumberformat_;
  ::google::protobuf::int32 tschchartseriesseriestype_;
  bool tschchartseriesshowerrorbar_;
  bool tschchartseriesshowerrorbarscatterx_;
  bool tschchartseriesshowline_;
  bool tschchartseriesshownegativedata_;
  bool tschchartseriesshowserieslabels_;
  bool tschchartseriesshowsymbol_;
  bool tschchartseriesshowtrendline_;
  bool tschchartseriesshowvaluelabels_;
  ::google::protobuf::int32 tschchartseriessizedimension_;
  ::google::protobuf::int32 tschchartseriessymboltype_;
  float tschchartseriestrendlineequationoffsetx_;
  ::std::string* tschchartseriestrendlinelabelstring_;
  float tschchartseriestrendlineequationoffsety_;
  ::google::protobuf::int32 tschchartseriestrendlineorder_;
  ::google::protobuf::int32 tschchartseriestrendlineperiod_;
  float tschchartseriestrendlinersquaredoffsetx_;
  float tschchartseriestrendlinersquaredoffsety_;
  ::google::protobuf::int32 tschchartseriestrendlinetype_;
  float tschchartserieswedgeexplosion_;
  ::google::protobuf::int32 tschchartseriesyaxisordinal_;
  bool tschchartseriestrendlineshowequation_;
  bool tschchartseriestrendlineshowlabel_;
  bool tschchartseriestrendlineshowr2value_;
  bool tschchartseriessymbolfilluseseriesfill_;
  ::google::protobuf::int32 tschchartseriesvaluelabelsaxis_;
  ::TSD::LineEndArchive* tschchartserieserrorbarlineend_;
  ::TSD::LineEndArchive* tschchartserieserrorbarlineendscatterx_;
  ::TSD::ShadowArchive* tschchartserieserrorbarshadow_;
  ::TSD::StrokeArchive* tschchartserieserrorbarstroke_;
  ::TSD::StrokeArchive* tschchartserieserrorbarstrokescatterx_;
  ::TSD::FillArchive* tschchartseriesfill_;
  ::google::protobuf::int32 tschchartserieslabelparagraphstyleindex_;
  float tschchartseriesopacity_;
  ::TSD::ShadowArchive* tschchartseriesshadow_;
  ::TSD::StrokeArchive* tschchartseriesstroke_;
  ::google::protobuf::int32 tschchartseriesoutsidelabelparagraphstyleindex_;
  float tschchartseriessymbolsize_;
  ::TSD::FillArchive* tschchartseriessymbolfill_;
  ::TSD::StrokeArchive* tschchartseriessymbolstroke_;
  float tschchartseriestrendlineequationopacity_;
  ::google::protobuf::int32 tschchartseriestrendlineequationparagraphstyleindex_;
  float tschchartseriestrendlinersquaredopacity_;
  bool tschchartseriessymbolfilluseseriesstroke_;
  bool tschchartseriesshowlabelsinfront_;
  ::TSD::ShadowArchive* tschchartseriestrendlineshadow_;
  ::google::protobuf::int32 tschchartseriestrendlinersquaredparagraphstyleindex_;
  ::google::protobuf::int32 tschchartseriesvaluelabelposition_;
  ::TSD::StrokeArchive* tschchartseriestrendlinestroke_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(73 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHArchives_2eGEN_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eGEN_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eGEN_2eproto();

  void InitAsDefaultInstance();
  static ChartSeriesGenericPropertyMapArchive* default_instance_;
};
// ===================================================================


// ===================================================================

// ChartStyleArchive

// optional float tschchartinfodefault3dchartopacity = 1;
inline bool ChartStyleArchive::has_tschchartinfodefault3dchartopacity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChartStyleArchive::set_has_tschchartinfodefault3dchartopacity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChartStyleArchive::clear_has_tschchartinfodefault3dchartopacity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChartStyleArchive::clear_tschchartinfodefault3dchartopacity() {
  tschchartinfodefault3dchartopacity_ = 0;
  clear_has_tschchartinfodefault3dchartopacity();
}
inline float ChartStyleArchive::tschchartinfodefault3dchartopacity() const {
  return tschchartinfodefault3dchartopacity_;
}
inline void ChartStyleArchive::set_tschchartinfodefault3dchartopacity(float value) {
  set_has_tschchartinfodefault3dchartopacity();
  tschchartinfodefault3dchartopacity_ = value;
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfoarea3dlightingpackage = 2;
inline bool ChartStyleArchive::has_tschchartinfoarea3dlightingpackage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChartStyleArchive::set_has_tschchartinfoarea3dlightingpackage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChartStyleArchive::clear_has_tschchartinfoarea3dlightingpackage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChartStyleArchive::clear_tschchartinfoarea3dlightingpackage() {
  if (tschchartinfoarea3dlightingpackage_ != NULL) tschchartinfoarea3dlightingpackage_->::TSCH::Chart3DLightingPackageArchive::Clear();
  clear_has_tschchartinfoarea3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::tschchartinfoarea3dlightingpackage() const {
  return tschchartinfoarea3dlightingpackage_ != NULL ? *tschchartinfoarea3dlightingpackage_ : *default_instance_->tschchartinfoarea3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::mutable_tschchartinfoarea3dlightingpackage() {
  set_has_tschchartinfoarea3dlightingpackage();
  if (tschchartinfoarea3dlightingpackage_ == NULL) tschchartinfoarea3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive;
  return tschchartinfoarea3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::release_tschchartinfoarea3dlightingpackage() {
  clear_has_tschchartinfoarea3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfoarea3dlightingpackage_;
  tschchartinfoarea3dlightingpackage_ = NULL;
  return temp;
}
inline void ChartStyleArchive::set_allocated_tschchartinfoarea3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfoarea3dlightingpackage) {
  delete tschchartinfoarea3dlightingpackage_;
  tschchartinfoarea3dlightingpackage_ = tschchartinfoarea3dlightingpackage;
  if (tschchartinfoarea3dlightingpackage) {
    set_has_tschchartinfoarea3dlightingpackage();
  } else {
    clear_has_tschchartinfoarea3dlightingpackage();
  }
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfobar3dlightingpackage = 3;
inline bool ChartStyleArchive::has_tschchartinfobar3dlightingpackage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChartStyleArchive::set_has_tschchartinfobar3dlightingpackage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChartStyleArchive::clear_has_tschchartinfobar3dlightingpackage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChartStyleArchive::clear_tschchartinfobar3dlightingpackage() {
  if (tschchartinfobar3dlightingpackage_ != NULL) tschchartinfobar3dlightingpackage_->::TSCH::Chart3DLightingPackageArchive::Clear();
  clear_has_tschchartinfobar3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::tschchartinfobar3dlightingpackage() const {
  return tschchartinfobar3dlightingpackage_ != NULL ? *tschchartinfobar3dlightingpackage_ : *default_instance_->tschchartinfobar3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::mutable_tschchartinfobar3dlightingpackage() {
  set_has_tschchartinfobar3dlightingpackage();
  if (tschchartinfobar3dlightingpackage_ == NULL) tschchartinfobar3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive;
  return tschchartinfobar3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::release_tschchartinfobar3dlightingpackage() {
  clear_has_tschchartinfobar3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfobar3dlightingpackage_;
  tschchartinfobar3dlightingpackage_ = NULL;
  return temp;
}
inline void ChartStyleArchive::set_allocated_tschchartinfobar3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfobar3dlightingpackage) {
  delete tschchartinfobar3dlightingpackage_;
  tschchartinfobar3dlightingpackage_ = tschchartinfobar3dlightingpackage;
  if (tschchartinfobar3dlightingpackage) {
    set_has_tschchartinfobar3dlightingpackage();
  } else {
    clear_has_tschchartinfobar3dlightingpackage();
  }
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumn3dlightingpackage = 4;
inline bool ChartStyleArchive::has_tschchartinfocolumn3dlightingpackage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChartStyleArchive::set_has_tschchartinfocolumn3dlightingpackage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChartStyleArchive::clear_has_tschchartinfocolumn3dlightingpackage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChartStyleArchive::clear_tschchartinfocolumn3dlightingpackage() {
  if (tschchartinfocolumn3dlightingpackage_ != NULL) tschchartinfocolumn3dlightingpackage_->::TSCH::Chart3DLightingPackageArchive::Clear();
  clear_has_tschchartinfocolumn3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::tschchartinfocolumn3dlightingpackage() const {
  return tschchartinfocolumn3dlightingpackage_ != NULL ? *tschchartinfocolumn3dlightingpackage_ : *default_instance_->tschchartinfocolumn3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::mutable_tschchartinfocolumn3dlightingpackage() {
  set_has_tschchartinfocolumn3dlightingpackage();
  if (tschchartinfocolumn3dlightingpackage_ == NULL) tschchartinfocolumn3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive;
  return tschchartinfocolumn3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::release_tschchartinfocolumn3dlightingpackage() {
  clear_has_tschchartinfocolumn3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfocolumn3dlightingpackage_;
  tschchartinfocolumn3dlightingpackage_ = NULL;
  return temp;
}
inline void ChartStyleArchive::set_allocated_tschchartinfocolumn3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfocolumn3dlightingpackage) {
  delete tschchartinfocolumn3dlightingpackage_;
  tschchartinfocolumn3dlightingpackage_ = tschchartinfocolumn3dlightingpackage;
  if (tschchartinfocolumn3dlightingpackage) {
    set_has_tschchartinfocolumn3dlightingpackage();
  } else {
    clear_has_tschchartinfocolumn3dlightingpackage();
  }
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefault3dlightingpackage = 5;
inline bool ChartStyleArchive::has_tschchartinfodefault3dlightingpackage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChartStyleArchive::set_has_tschchartinfodefault3dlightingpackage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChartStyleArchive::clear_has_tschchartinfodefault3dlightingpackage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChartStyleArchive::clear_tschchartinfodefault3dlightingpackage() {
  if (tschchartinfodefault3dlightingpackage_ != NULL) tschchartinfodefault3dlightingpackage_->::TSCH::Chart3DLightingPackageArchive::Clear();
  clear_has_tschchartinfodefault3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::tschchartinfodefault3dlightingpackage() const {
  return tschchartinfodefault3dlightingpackage_ != NULL ? *tschchartinfodefault3dlightingpackage_ : *default_instance_->tschchartinfodefault3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::mutable_tschchartinfodefault3dlightingpackage() {
  set_has_tschchartinfodefault3dlightingpackage();
  if (tschchartinfodefault3dlightingpackage_ == NULL) tschchartinfodefault3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive;
  return tschchartinfodefault3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::release_tschchartinfodefault3dlightingpackage() {
  clear_has_tschchartinfodefault3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfodefault3dlightingpackage_;
  tschchartinfodefault3dlightingpackage_ = NULL;
  return temp;
}
inline void ChartStyleArchive::set_allocated_tschchartinfodefault3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfodefault3dlightingpackage) {
  delete tschchartinfodefault3dlightingpackage_;
  tschchartinfodefault3dlightingpackage_ = tschchartinfodefault3dlightingpackage;
  if (tschchartinfodefault3dlightingpackage) {
    set_has_tschchartinfodefault3dlightingpackage();
  } else {
    clear_has_tschchartinfodefault3dlightingpackage();
  }
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfoline3dlightingpackage = 6;
inline bool ChartStyleArchive::has_tschchartinfoline3dlightingpackage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChartStyleArchive::set_has_tschchartinfoline3dlightingpackage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChartStyleArchive::clear_has_tschchartinfoline3dlightingpackage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChartStyleArchive::clear_tschchartinfoline3dlightingpackage() {
  if (tschchartinfoline3dlightingpackage_ != NULL) tschchartinfoline3dlightingpackage_->::TSCH::Chart3DLightingPackageArchive::Clear();
  clear_has_tschchartinfoline3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::tschchartinfoline3dlightingpackage() const {
  return tschchartinfoline3dlightingpackage_ != NULL ? *tschchartinfoline3dlightingpackage_ : *default_instance_->tschchartinfoline3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::mutable_tschchartinfoline3dlightingpackage() {
  set_has_tschchartinfoline3dlightingpackage();
  if (tschchartinfoline3dlightingpackage_ == NULL) tschchartinfoline3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive;
  return tschchartinfoline3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::release_tschchartinfoline3dlightingpackage() {
  clear_has_tschchartinfoline3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfoline3dlightingpackage_;
  tschchartinfoline3dlightingpackage_ = NULL;
  return temp;
}
inline void ChartStyleArchive::set_allocated_tschchartinfoline3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfoline3dlightingpackage) {
  delete tschchartinfoline3dlightingpackage_;
  tschchartinfoline3dlightingpackage_ = tschchartinfoline3dlightingpackage;
  if (tschchartinfoline3dlightingpackage) {
    set_has_tschchartinfoline3dlightingpackage();
  } else {
    clear_has_tschchartinfoline3dlightingpackage();
  }
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfopie3dlightingpackage = 7;
inline bool ChartStyleArchive::has_tschchartinfopie3dlightingpackage() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChartStyleArchive::set_has_tschchartinfopie3dlightingpackage() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChartStyleArchive::clear_has_tschchartinfopie3dlightingpackage() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChartStyleArchive::clear_tschchartinfopie3dlightingpackage() {
  if (tschchartinfopie3dlightingpackage_ != NULL) tschchartinfopie3dlightingpackage_->::TSCH::Chart3DLightingPackageArchive::Clear();
  clear_has_tschchartinfopie3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartStyleArchive::tschchartinfopie3dlightingpackage() const {
  return tschchartinfopie3dlightingpackage_ != NULL ? *tschchartinfopie3dlightingpackage_ : *default_instance_->tschchartinfopie3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::mutable_tschchartinfopie3dlightingpackage() {
  set_has_tschchartinfopie3dlightingpackage();
  if (tschchartinfopie3dlightingpackage_ == NULL) tschchartinfopie3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive;
  return tschchartinfopie3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartStyleArchive::release_tschchartinfopie3dlightingpackage() {
  clear_has_tschchartinfopie3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfopie3dlightingpackage_;
  tschchartinfopie3dlightingpackage_ = NULL;
  return temp;
}
inline void ChartStyleArchive::set_allocated_tschchartinfopie3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfopie3dlightingpackage) {
  delete tschchartinfopie3dlightingpackage_;
  tschchartinfopie3dlightingpackage_ = tschchartinfopie3dlightingpackage;
  if (tschchartinfopie3dlightingpackage) {
    set_has_tschchartinfopie3dlightingpackage();
  } else {
    clear_has_tschchartinfopie3dlightingpackage();
  }
}

// optional .TSD.FillArchive tschchartinfodefaultbackgroundfill = 8;
inline bool ChartStyleArchive::has_tschchartinfodefaultbackgroundfill() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChartStyleArchive::set_has_tschchartinfodefaultbackgroundfill() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChartStyleArchive::clear_has_tschchartinfodefaultbackgroundfill() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChartStyleArchive::clear_tschchartinfodefaultbackgroundfill() {
  if (tschchartinfodefaultbackgroundfill_ != NULL) tschchartinfodefaultbackgroundfill_->::TSD::FillArchive::Clear();
  clear_has_tschchartinfodefaultbackgroundfill();
}
inline const ::TSD::FillArchive& ChartStyleArchive::tschchartinfodefaultbackgroundfill() const {
  return tschchartinfodefaultbackgroundfill_ != NULL ? *tschchartinfodefaultbackgroundfill_ : *default_instance_->tschchartinfodefaultbackgroundfill_;
}
inline ::TSD::FillArchive* ChartStyleArchive::mutable_tschchartinfodefaultbackgroundfill() {
  set_has_tschchartinfodefaultbackgroundfill();
  if (tschchartinfodefaultbackgroundfill_ == NULL) tschchartinfodefaultbackgroundfill_ = new ::TSD::FillArchive;
  return tschchartinfodefaultbackgroundfill_;
}
inline ::TSD::FillArchive* ChartStyleArchive::release_tschchartinfodefaultbackgroundfill() {
  clear_has_tschchartinfodefaultbackgroundfill();
  ::TSD::FillArchive* temp = tschchartinfodefaultbackgroundfill_;
  tschchartinfodefaultbackgroundfill_ = NULL;
  return temp;
}
inline void ChartStyleArchive::set_allocated_tschchartinfodefaultbackgroundfill(::TSD::FillArchive* tschchartinfodefaultbackgroundfill) {
  delete tschchartinfodefaultbackgroundfill_;
  tschchartinfodefaultbackgroundfill_ = tschchartinfodefaultbackgroundfill;
  if (tschchartinfodefaultbackgroundfill) {
    set_has_tschchartinfodefaultbackgroundfill();
  } else {
    clear_has_tschchartinfodefaultbackgroundfill();
  }
}

// optional .TSD.StrokeArchive tschchartinfodefaultbackgroundstroke = 9;
inline bool ChartStyleArchive::has_tschchartinfodefaultbackgroundstroke() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChartStyleArchive::set_has_tschchartinfodefaultbackgroundstroke() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChartStyleArchive::clear_has_tschchartinfodefaultbackgroundstroke() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChartStyleArchive::clear_tschchartinfodefaultbackgroundstroke() {
  if (tschchartinfodefaultbackgroundstroke_ != NULL) tschchartinfodefaultbackgroundstroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartinfodefaultbackgroundstroke();
}
inline const ::TSD::StrokeArchive& ChartStyleArchive::tschchartinfodefaultbackgroundstroke() const {
  return tschchartinfodefaultbackgroundstroke_ != NULL ? *tschchartinfodefaultbackgroundstroke_ : *default_instance_->tschchartinfodefaultbackgroundstroke_;
}
inline ::TSD::StrokeArchive* ChartStyleArchive::mutable_tschchartinfodefaultbackgroundstroke() {
  set_has_tschchartinfodefaultbackgroundstroke();
  if (tschchartinfodefaultbackgroundstroke_ == NULL) tschchartinfodefaultbackgroundstroke_ = new ::TSD::StrokeArchive;
  return tschchartinfodefaultbackgroundstroke_;
}
inline ::TSD::StrokeArchive* ChartStyleArchive::release_tschchartinfodefaultbackgroundstroke() {
  clear_has_tschchartinfodefaultbackgroundstroke();
  ::TSD::StrokeArchive* temp = tschchartinfodefaultbackgroundstroke_;
  tschchartinfodefaultbackgroundstroke_ = NULL;
  return temp;
}
inline void ChartStyleArchive::set_allocated_tschchartinfodefaultbackgroundstroke(::TSD::StrokeArchive* tschchartinfodefaultbackgroundstroke) {
  delete tschchartinfodefaultbackgroundstroke_;
  tschchartinfodefaultbackgroundstroke_ = tschchartinfodefaultbackgroundstroke;
  if (tschchartinfodefaultbackgroundstroke) {
    set_has_tschchartinfodefaultbackgroundstroke();
  } else {
    clear_has_tschchartinfodefaultbackgroundstroke();
  }
}

// optional float tschchartinfodefaultborderopacity = 10;
inline bool ChartStyleArchive::has_tschchartinfodefaultborderopacity() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChartStyleArchive::set_has_tschchartinfodefaultborderopacity() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ChartStyleArchive::clear_has_tschchartinfodefaultborderopacity() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ChartStyleArchive::clear_tschchartinfodefaultborderopacity() {
  tschchartinfodefaultborderopacity_ = 0;
  clear_has_tschchartinfodefaultborderopacity();
}
inline float ChartStyleArchive::tschchartinfodefaultborderopacity() const {
  return tschchartinfodefaultborderopacity_;
}
inline void ChartStyleArchive::set_tschchartinfodefaultborderopacity(float value) {
  set_has_tschchartinfodefaultborderopacity();
  tschchartinfodefaultborderopacity_ = value;
}

// optional .TSD.ShadowArchive tschchartinfodefaultbordershadow = 11;
inline bool ChartStyleArchive::has_tschchartinfodefaultbordershadow() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChartStyleArchive::set_has_tschchartinfodefaultbordershadow() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ChartStyleArchive::clear_has_tschchartinfodefaultbordershadow() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ChartStyleArchive::clear_tschchartinfodefaultbordershadow() {
  if (tschchartinfodefaultbordershadow_ != NULL) tschchartinfodefaultbordershadow_->::TSD::ShadowArchive::Clear();
  clear_has_tschchartinfodefaultbordershadow();
}
inline const ::TSD::ShadowArchive& ChartStyleArchive::tschchartinfodefaultbordershadow() const {
  return tschchartinfodefaultbordershadow_ != NULL ? *tschchartinfodefaultbordershadow_ : *default_instance_->tschchartinfodefaultbordershadow_;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::mutable_tschchartinfodefaultbordershadow() {
  set_has_tschchartinfodefaultbordershadow();
  if (tschchartinfodefaultbordershadow_ == NULL) tschchartinfodefaultbordershadow_ = new ::TSD::ShadowArchive;
  return tschchartinfodefaultbordershadow_;
}
inline ::TSD::ShadowArchive* ChartStyleArchive::release_tschchartinfodefaultbordershadow() {
  clear_has_tschchartinfodefaultbordershadow();
  ::TSD::ShadowArchive* temp = tschchartinfodefaultbordershadow_;
  tschchartinfodefaultbordershadow_ = NULL;
  return temp;
}
inline void ChartStyleArchive::set_allocated_tschchartinfodefaultbordershadow(::TSD::ShadowArchive* tschchartinfodefaultbordershadow) {
  delete tschchartinfodefaultbordershadow_;
  tschchartinfodefaultbordershadow_ = tschchartinfodefaultbordershadow;
  if (tschchartinfodefaultbordershadow) {
    set_has_tschchartinfodefaultbordershadow();
  } else {
    clear_has_tschchartinfodefaultbordershadow();
  }
}

// optional .TSD.StrokeArchive tschchartinfodefaultborderstroke = 12;
inline bool ChartStyleArchive::has_tschchartinfodefaultborderstroke() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ChartStyleArchive::set_has_tschchartinfodefaultborderstroke() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ChartStyleArchive::clear_has_tschchartinfodefaultborderstroke() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ChartStyleArchive::clear_tschchartinfodefaultborderstroke() {
  if (tschchartinfodefaultborderstroke_ != NULL) tschchartinfodefaultborderstroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartinfodefaultborderstroke();
}
inline const ::TSD::StrokeArchive& ChartStyleArchive::tschchartinfodefaultborderstroke() const {
  return tschchartinfodefaultborderstroke_ != NULL ? *tschchartinfodefaultborderstroke_ : *default_instance_->tschchartinfodefaultborderstroke_;
}
inline ::TSD::StrokeArchive* ChartStyleArchive::mutable_tschchartinfodefaultborderstroke() {
  set_has_tschchartinfodefaultborderstroke();
  if (tschchartinfodefaultborderstroke_ == NULL) tschchartinfodefaultborderstroke_ = new ::TSD::StrokeArchive;
  return tschchartinfodefaultborderstroke_;
}
inline ::TSD::StrokeArchive* ChartStyleArchive::release_tschchartinfodefaultborderstroke() {
  clear_has_tschchartinfodefaultborderstroke();
  ::TSD::StrokeArchive* temp = tschchartinfodefaultborderstroke_;
  tschchartinfodefaultborderstroke_ = NULL;
  return temp;
}
inline void ChartStyleArchive::set_allocated_tschchartinfodefaultborderstroke(::TSD::StrokeArchive* tschchartinfodefaultborderstroke) {
  delete tschchartinfodefaultborderstroke_;
  tschchartinfodefaultborderstroke_ = tschchartinfodefaultborderstroke;
  if (tschchartinfodefaultborderstroke) {
    set_has_tschchartinfodefaultborderstroke();
  } else {
    clear_has_tschchartinfodefaultborderstroke();
  }
}

// optional bool tschchartinfodefaultcombinelayers = 13;
inline bool ChartStyleArchive::has_tschchartinfodefaultcombinelayers() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ChartStyleArchive::set_has_tschchartinfodefaultcombinelayers() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ChartStyleArchive::clear_has_tschchartinfodefaultcombinelayers() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ChartStyleArchive::clear_tschchartinfodefaultcombinelayers() {
  tschchartinfodefaultcombinelayers_ = false;
  clear_has_tschchartinfodefaultcombinelayers();
}
inline bool ChartStyleArchive::tschchartinfodefaultcombinelayers() const {
  return tschchartinfodefaultcombinelayers_;
}
inline void ChartStyleArchive::set_tschchartinfodefaultcombinelayers(bool value) {
  set_has_tschchartinfodefaultcombinelayers();
  tschchartinfodefaultcombinelayers_ = value;
}

// optional .TSD.FillArchive tschchartinfodefaultgridbackgroundfill = 14;
inline bool ChartStyleArchive::has_tschchartinfodefaultgridbackgroundfill() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ChartStyleArchive::set_has_tschchartinfodefaultgridbackgroundfill() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ChartStyleArchive::clear_has_tschchartinfodefaultgridbackgroundfill() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ChartStyleArchive::clear_tschchartinfodefaultgridbackgroundfill() {
  if (tschchartinfodefaultgridbackgroundfill_ != NULL) tschchartinfodefaultgridbackgroundfill_->::TSD::FillArchive::Clear();
  clear_has_tschchartinfodefaultgridbackgroundfill();
}
inline const ::TSD::FillArchive& ChartStyleArchive::tschchartinfodefaultgridbackgroundfill() const {
  return tschchartinfodefaultgridbackgroundfill_ != NULL ? *tschchartinfodefaultgridbackgroundfill_ : *default_instance_->tschchartinfodefaultgridbackgroundfill_;
}
inline ::TSD::FillArchive* ChartStyleArchive::mutable_tschchartinfodefaultgridbackgroundfill() {
  set_has_tschchartinfodefaultgridbackgroundfill();
  if (tschchartinfodefaultgridbackgroundfill_ == NULL) tschchartinfodefaultgridbackgroundfill_ = new ::TSD::FillArchive;
  return tschchartinfodefaultgridbackgroundfill_;
}
inline ::TSD::FillArchive* ChartStyleArchive::release_tschchartinfodefaultgridbackgroundfill() {
  clear_has_tschchartinfodefaultgridbackgroundfill();
  ::TSD::FillArchive* temp = tschchartinfodefaultgridbackgroundfill_;
  tschchartinfodefaultgridbackgroundfill_ = NULL;
  return temp;
}
inline void ChartStyleArchive::set_allocated_tschchartinfodefaultgridbackgroundfill(::TSD::FillArchive* tschchartinfodefaultgridbackgroundfill) {
  delete tschchartinfodefaultgridbackgroundfill_;
  tschchartinfodefaultgridbackgroundfill_ = tschchartinfodefaultgridbackgroundfill;
  if (tschchartinfodefaultgridbackgroundfill) {
    set_has_tschchartinfodefaultgridbackgroundfill();
  } else {
    clear_has_tschchartinfodefaultgridbackgroundfill();
  }
}

// optional float tschchartinfodefaultgridbackgroundopacity = 15;
inline bool ChartStyleArchive::has_tschchartinfodefaultgridbackgroundopacity() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ChartStyleArchive::set_has_tschchartinfodefaultgridbackgroundopacity() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ChartStyleArchive::clear_has_tschchartinfodefaultgridbackgroundopacity() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ChartStyleArchive::clear_tschchartinfodefaultgridbackgroundopacity() {
  tschchartinfodefaultgridbackgroundopacity_ = 0;
  clear_has_tschchartinfodefaultgridbackgroundopacity();
}
inline float ChartStyleArchive::tschchartinfodefaultgridbackgroundopacity() const {
  return tschchartinfodefaultgridbackgroundopacity_;
}
inline void ChartStyleArchive::set_tschchartinfodefaultgridbackgroundopacity(float value) {
  set_has_tschchartinfodefaultgridbackgroundopacity();
  tschchartinfodefaultgridbackgroundopacity_ = value;
}

// optional float tschchartinfodefaultinterbargap = 16;
inline bool ChartStyleArchive::has_tschchartinfodefaultinterbargap() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ChartStyleArchive::set_has_tschchartinfodefaultinterbargap() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ChartStyleArchive::clear_has_tschchartinfodefaultinterbargap() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ChartStyleArchive::clear_tschchartinfodefaultinterbargap() {
  tschchartinfodefaultinterbargap_ = 0;
  clear_has_tschchartinfodefaultinterbargap();
}
inline float ChartStyleArchive::tschchartinfodefaultinterbargap() const {
  return tschchartinfodefaultinterbargap_;
}
inline void ChartStyleArchive::set_tschchartinfodefaultinterbargap(float value) {
  set_has_tschchartinfodefaultinterbargap();
  tschchartinfodefaultinterbargap_ = value;
}

// optional float tschchartinfodefaultintersetgap = 17;
inline bool ChartStyleArchive::has_tschchartinfodefaultintersetgap() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ChartStyleArchive::set_has_tschchartinfodefaultintersetgap() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ChartStyleArchive::clear_has_tschchartinfodefaultintersetgap() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ChartStyleArchive::clear_tschchartinfodefaultintersetgap() {
  tschchartinfodefaultintersetgap_ = 0;
  clear_has_tschchartinfodefaultintersetgap();
}
inline float ChartStyleArchive::tschchartinfodefaultintersetgap() const {
  return tschchartinfodefaultintersetgap_;
}
inline void ChartStyleArchive::set_tschchartinfodefaultintersetgap(float value) {
  set_has_tschchartinfodefaultintersetgap();
  tschchartinfodefaultintersetgap_ = value;
}

// optional bool tschchartinfodefaultshowborder = 18;
inline bool ChartStyleArchive::has_tschchartinfodefaultshowborder() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ChartStyleArchive::set_has_tschchartinfodefaultshowborder() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ChartStyleArchive::clear_has_tschchartinfodefaultshowborder() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ChartStyleArchive::clear_tschchartinfodefaultshowborder() {
  tschchartinfodefaultshowborder_ = false;
  clear_has_tschchartinfodefaultshowborder();
}
inline bool ChartStyleArchive::tschchartinfodefaultshowborder() const {
  return tschchartinfodefaultshowborder_;
}
inline void ChartStyleArchive::set_tschchartinfodefaultshowborder(bool value) {
  set_has_tschchartinfodefaultshowborder();
  tschchartinfodefaultshowborder_ = value;
}

// optional .TSP.Color tschchartinfodefaulttitlecolor = 19;
inline bool ChartStyleArchive::has_tschchartinfodefaulttitlecolor() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ChartStyleArchive::set_has_tschchartinfodefaulttitlecolor() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ChartStyleArchive::clear_has_tschchartinfodefaulttitlecolor() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ChartStyleArchive::clear_tschchartinfodefaulttitlecolor() {
  if (tschchartinfodefaulttitlecolor_ != NULL) tschchartinfodefaulttitlecolor_->::TSP::Color::Clear();
  clear_has_tschchartinfodefaulttitlecolor();
}
inline const ::TSP::Color& ChartStyleArchive::tschchartinfodefaulttitlecolor() const {
  return tschchartinfodefaulttitlecolor_ != NULL ? *tschchartinfodefaulttitlecolor_ : *default_instance_->tschchartinfodefaulttitlecolor_;
}
inline ::TSP::Color* ChartStyleArchive::mutable_tschchartinfodefaulttitlecolor() {
  set_has_tschchartinfodefaulttitlecolor();
  if (tschchartinfodefaulttitlecolor_ == NULL) tschchartinfodefaulttitlecolor_ = new ::TSP::Color;
  return tschchartinfodefaulttitlecolor_;
}
inline ::TSP::Color* ChartStyleArchive::release_tschchartinfodefaulttitlecolor() {
  clear_has_tschchartinfodefaulttitlecolor();
  ::TSP::Color* temp = tschchartinfodefaulttitlecolor_;
  tschchartinfodefaulttitlecolor_ = NULL;
  return temp;
}
inline void ChartStyleArchive::set_allocated_tschchartinfodefaulttitlecolor(::TSP::Color* tschchartinfodefaulttitlecolor) {
  delete tschchartinfodefaulttitlecolor_;
  tschchartinfodefaulttitlecolor_ = tschchartinfodefaulttitlecolor;
  if (tschchartinfodefaulttitlecolor) {
    set_has_tschchartinfodefaulttitlecolor();
  } else {
    clear_has_tschchartinfodefaulttitlecolor();
  }
}

// optional int32 tschchartinfodefaulttitleparagraphstyleindex = 20;
inline bool ChartStyleArchive::has_tschchartinfodefaulttitleparagraphstyleindex() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ChartStyleArchive::set_has_tschchartinfodefaulttitleparagraphstyleindex() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ChartStyleArchive::clear_has_tschchartinfodefaulttitleparagraphstyleindex() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ChartStyleArchive::clear_tschchartinfodefaulttitleparagraphstyleindex() {
  tschchartinfodefaulttitleparagraphstyleindex_ = 0;
  clear_has_tschchartinfodefaulttitleparagraphstyleindex();
}
inline ::google::protobuf::int32 ChartStyleArchive::tschchartinfodefaulttitleparagraphstyleindex() const {
  return tschchartinfodefaulttitleparagraphstyleindex_;
}
inline void ChartStyleArchive::set_tschchartinfodefaulttitleparagraphstyleindex(::google::protobuf::int32 value) {
  set_has_tschchartinfodefaulttitleparagraphstyleindex();
  tschchartinfodefaulttitleparagraphstyleindex_ = value;
}

// optional int32 tschchartinfodefaultdatasetnameparagraphstyleindex = 21;
inline bool ChartStyleArchive::has_tschchartinfodefaultdatasetnameparagraphstyleindex() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ChartStyleArchive::set_has_tschchartinfodefaultdatasetnameparagraphstyleindex() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ChartStyleArchive::clear_has_tschchartinfodefaultdatasetnameparagraphstyleindex() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ChartStyleArchive::clear_tschchartinfodefaultdatasetnameparagraphstyleindex() {
  tschchartinfodefaultdatasetnameparagraphstyleindex_ = 0;
  clear_has_tschchartinfodefaultdatasetnameparagraphstyleindex();
}
inline ::google::protobuf::int32 ChartStyleArchive::tschchartinfodefaultdatasetnameparagraphstyleindex() const {
  return tschchartinfodefaultdatasetnameparagraphstyleindex_;
}
inline void ChartStyleArchive::set_tschchartinfodefaultdatasetnameparagraphstyleindex(::google::protobuf::int32 value) {
  set_has_tschchartinfodefaultdatasetnameparagraphstyleindex();
  tschchartinfodefaultdatasetnameparagraphstyleindex_ = value;
}

// -------------------------------------------------------------------

// ChartNonStyleArchive

// optional int32 tschchartinfodefault3dbarshape = 1;
inline bool ChartNonStyleArchive::has_tschchartinfodefault3dbarshape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChartNonStyleArchive::set_has_tschchartinfodefault3dbarshape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChartNonStyleArchive::clear_has_tschchartinfodefault3dbarshape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChartNonStyleArchive::clear_tschchartinfodefault3dbarshape() {
  tschchartinfodefault3dbarshape_ = 0;
  clear_has_tschchartinfodefault3dbarshape();
}
inline ::google::protobuf::int32 ChartNonStyleArchive::tschchartinfodefault3dbarshape() const {
  return tschchartinfodefault3dbarshape_;
}
inline void ChartNonStyleArchive::set_tschchartinfodefault3dbarshape(::google::protobuf::int32 value) {
  set_has_tschchartinfodefault3dbarshape();
  tschchartinfodefault3dbarshape_ = value;
}

// optional bool tschchartinfodefault3dbeveledges = 2;
inline bool ChartNonStyleArchive::has_tschchartinfodefault3dbeveledges() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChartNonStyleArchive::set_has_tschchartinfodefault3dbeveledges() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChartNonStyleArchive::clear_has_tschchartinfodefault3dbeveledges() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChartNonStyleArchive::clear_tschchartinfodefault3dbeveledges() {
  tschchartinfodefault3dbeveledges_ = false;
  clear_has_tschchartinfodefault3dbeveledges();
}
inline bool ChartNonStyleArchive::tschchartinfodefault3dbeveledges() const {
  return tschchartinfodefault3dbeveledges_;
}
inline void ChartNonStyleArchive::set_tschchartinfodefault3dbeveledges(bool value) {
  set_has_tschchartinfodefault3dbeveledges();
  tschchartinfodefault3dbeveledges_ = value;
}

// optional float tschchartinfodefault3dintersetdepthgap = 3;
inline bool ChartNonStyleArchive::has_tschchartinfodefault3dintersetdepthgap() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChartNonStyleArchive::set_has_tschchartinfodefault3dintersetdepthgap() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChartNonStyleArchive::clear_has_tschchartinfodefault3dintersetdepthgap() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChartNonStyleArchive::clear_tschchartinfodefault3dintersetdepthgap() {
  tschchartinfodefault3dintersetdepthgap_ = 0;
  clear_has_tschchartinfodefault3dintersetdepthgap();
}
inline float ChartNonStyleArchive::tschchartinfodefault3dintersetdepthgap() const {
  return tschchartinfodefault3dintersetdepthgap_;
}
inline void ChartNonStyleArchive::set_tschchartinfodefault3dintersetdepthgap(float value) {
  set_has_tschchartinfodefault3dintersetdepthgap();
  tschchartinfodefault3dintersetdepthgap_ = value;
}

// optional .TSCH.Chart3DVectorArchive tschchartinfodefault3drotation = 4;
inline bool ChartNonStyleArchive::has_tschchartinfodefault3drotation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChartNonStyleArchive::set_has_tschchartinfodefault3drotation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChartNonStyleArchive::clear_has_tschchartinfodefault3drotation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChartNonStyleArchive::clear_tschchartinfodefault3drotation() {
  if (tschchartinfodefault3drotation_ != NULL) tschchartinfodefault3drotation_->::TSCH::Chart3DVectorArchive::Clear();
  clear_has_tschchartinfodefault3drotation();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfodefault3drotation() const {
  return tschchartinfodefault3drotation_ != NULL ? *tschchartinfodefault3drotation_ : *default_instance_->tschchartinfodefault3drotation_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfodefault3drotation() {
  set_has_tschchartinfodefault3drotation();
  if (tschchartinfodefault3drotation_ == NULL) tschchartinfodefault3drotation_ = new ::TSCH::Chart3DVectorArchive;
  return tschchartinfodefault3drotation_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfodefault3drotation() {
  clear_has_tschchartinfodefault3drotation();
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfodefault3drotation_;
  tschchartinfodefault3drotation_ = NULL;
  return temp;
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfodefault3drotation(::TSCH::Chart3DVectorArchive* tschchartinfodefault3drotation) {
  delete tschchartinfodefault3drotation_;
  tschchartinfodefault3drotation_ = tschchartinfodefault3drotation;
  if (tschchartinfodefault3drotation) {
    set_has_tschchartinfodefault3drotation();
  } else {
    clear_has_tschchartinfodefault3drotation();
  }
}

// optional .TSCH.Chart3DVectorArchive tschchartinfoarea3dscale = 5;
inline bool ChartNonStyleArchive::has_tschchartinfoarea3dscale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChartNonStyleArchive::set_has_tschchartinfoarea3dscale() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChartNonStyleArchive::clear_has_tschchartinfoarea3dscale() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChartNonStyleArchive::clear_tschchartinfoarea3dscale() {
  if (tschchartinfoarea3dscale_ != NULL) tschchartinfoarea3dscale_->::TSCH::Chart3DVectorArchive::Clear();
  clear_has_tschchartinfoarea3dscale();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfoarea3dscale() const {
  return tschchartinfoarea3dscale_ != NULL ? *tschchartinfoarea3dscale_ : *default_instance_->tschchartinfoarea3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfoarea3dscale() {
  set_has_tschchartinfoarea3dscale();
  if (tschchartinfoarea3dscale_ == NULL) tschchartinfoarea3dscale_ = new ::TSCH::Chart3DVectorArchive;
  return tschchartinfoarea3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfoarea3dscale() {
  clear_has_tschchartinfoarea3dscale();
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfoarea3dscale_;
  tschchartinfoarea3dscale_ = NULL;
  return temp;
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfoarea3dscale(::TSCH::Chart3DVectorArchive* tschchartinfoarea3dscale) {
  delete tschchartinfoarea3dscale_;
  tschchartinfoarea3dscale_ = tschchartinfoarea3dscale;
  if (tschchartinfoarea3dscale) {
    set_has_tschchartinfoarea3dscale();
  } else {
    clear_has_tschchartinfoarea3dscale();
  }
}

// optional .TSCH.Chart3DVectorArchive tschchartinfobar3dscale = 6;
inline bool ChartNonStyleArchive::has_tschchartinfobar3dscale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChartNonStyleArchive::set_has_tschchartinfobar3dscale() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChartNonStyleArchive::clear_has_tschchartinfobar3dscale() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChartNonStyleArchive::clear_tschchartinfobar3dscale() {
  if (tschchartinfobar3dscale_ != NULL) tschchartinfobar3dscale_->::TSCH::Chart3DVectorArchive::Clear();
  clear_has_tschchartinfobar3dscale();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfobar3dscale() const {
  return tschchartinfobar3dscale_ != NULL ? *tschchartinfobar3dscale_ : *default_instance_->tschchartinfobar3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfobar3dscale() {
  set_has_tschchartinfobar3dscale();
  if (tschchartinfobar3dscale_ == NULL) tschchartinfobar3dscale_ = new ::TSCH::Chart3DVectorArchive;
  return tschchartinfobar3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfobar3dscale() {
  clear_has_tschchartinfobar3dscale();
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfobar3dscale_;
  tschchartinfobar3dscale_ = NULL;
  return temp;
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfobar3dscale(::TSCH::Chart3DVectorArchive* tschchartinfobar3dscale) {
  delete tschchartinfobar3dscale_;
  tschchartinfobar3dscale_ = tschchartinfobar3dscale;
  if (tschchartinfobar3dscale) {
    set_has_tschchartinfobar3dscale();
  } else {
    clear_has_tschchartinfobar3dscale();
  }
}

// optional .TSCH.Chart3DVectorArchive tschchartinfocolumn3dscale = 7;
inline bool ChartNonStyleArchive::has_tschchartinfocolumn3dscale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChartNonStyleArchive::set_has_tschchartinfocolumn3dscale() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChartNonStyleArchive::clear_has_tschchartinfocolumn3dscale() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChartNonStyleArchive::clear_tschchartinfocolumn3dscale() {
  if (tschchartinfocolumn3dscale_ != NULL) tschchartinfocolumn3dscale_->::TSCH::Chart3DVectorArchive::Clear();
  clear_has_tschchartinfocolumn3dscale();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfocolumn3dscale() const {
  return tschchartinfocolumn3dscale_ != NULL ? *tschchartinfocolumn3dscale_ : *default_instance_->tschchartinfocolumn3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfocolumn3dscale() {
  set_has_tschchartinfocolumn3dscale();
  if (tschchartinfocolumn3dscale_ == NULL) tschchartinfocolumn3dscale_ = new ::TSCH::Chart3DVectorArchive;
  return tschchartinfocolumn3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfocolumn3dscale() {
  clear_has_tschchartinfocolumn3dscale();
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfocolumn3dscale_;
  tschchartinfocolumn3dscale_ = NULL;
  return temp;
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfocolumn3dscale(::TSCH::Chart3DVectorArchive* tschchartinfocolumn3dscale) {
  delete tschchartinfocolumn3dscale_;
  tschchartinfocolumn3dscale_ = tschchartinfocolumn3dscale;
  if (tschchartinfocolumn3dscale) {
    set_has_tschchartinfocolumn3dscale();
  } else {
    clear_has_tschchartinfocolumn3dscale();
  }
}

// optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dscale = 8;
inline bool ChartNonStyleArchive::has_tschchartinfodefault3dscale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChartNonStyleArchive::set_has_tschchartinfodefault3dscale() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChartNonStyleArchive::clear_has_tschchartinfodefault3dscale() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChartNonStyleArchive::clear_tschchartinfodefault3dscale() {
  if (tschchartinfodefault3dscale_ != NULL) tschchartinfodefault3dscale_->::TSCH::Chart3DVectorArchive::Clear();
  clear_has_tschchartinfodefault3dscale();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfodefault3dscale() const {
  return tschchartinfodefault3dscale_ != NULL ? *tschchartinfodefault3dscale_ : *default_instance_->tschchartinfodefault3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfodefault3dscale() {
  set_has_tschchartinfodefault3dscale();
  if (tschchartinfodefault3dscale_ == NULL) tschchartinfodefault3dscale_ = new ::TSCH::Chart3DVectorArchive;
  return tschchartinfodefault3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfodefault3dscale() {
  clear_has_tschchartinfodefault3dscale();
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfodefault3dscale_;
  tschchartinfodefault3dscale_ = NULL;
  return temp;
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfodefault3dscale(::TSCH::Chart3DVectorArchive* tschchartinfodefault3dscale) {
  delete tschchartinfodefault3dscale_;
  tschchartinfodefault3dscale_ = tschchartinfodefault3dscale;
  if (tschchartinfodefault3dscale) {
    set_has_tschchartinfodefault3dscale();
  } else {
    clear_has_tschchartinfodefault3dscale();
  }
}

// optional .TSCH.Chart3DVectorArchive tschchartinfoline3dscale = 9;
inline bool ChartNonStyleArchive::has_tschchartinfoline3dscale() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChartNonStyleArchive::set_has_tschchartinfoline3dscale() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChartNonStyleArchive::clear_has_tschchartinfoline3dscale() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChartNonStyleArchive::clear_tschchartinfoline3dscale() {
  if (tschchartinfoline3dscale_ != NULL) tschchartinfoline3dscale_->::TSCH::Chart3DVectorArchive::Clear();
  clear_has_tschchartinfoline3dscale();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfoline3dscale() const {
  return tschchartinfoline3dscale_ != NULL ? *tschchartinfoline3dscale_ : *default_instance_->tschchartinfoline3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfoline3dscale() {
  set_has_tschchartinfoline3dscale();
  if (tschchartinfoline3dscale_ == NULL) tschchartinfoline3dscale_ = new ::TSCH::Chart3DVectorArchive;
  return tschchartinfoline3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfoline3dscale() {
  clear_has_tschchartinfoline3dscale();
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfoline3dscale_;
  tschchartinfoline3dscale_ = NULL;
  return temp;
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfoline3dscale(::TSCH::Chart3DVectorArchive* tschchartinfoline3dscale) {
  delete tschchartinfoline3dscale_;
  tschchartinfoline3dscale_ = tschchartinfoline3dscale;
  if (tschchartinfoline3dscale) {
    set_has_tschchartinfoline3dscale();
  } else {
    clear_has_tschchartinfoline3dscale();
  }
}

// optional .TSCH.Chart3DVectorArchive tschchartinfopie3dscale = 10;
inline bool ChartNonStyleArchive::has_tschchartinfopie3dscale() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChartNonStyleArchive::set_has_tschchartinfopie3dscale() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ChartNonStyleArchive::clear_has_tschchartinfopie3dscale() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ChartNonStyleArchive::clear_tschchartinfopie3dscale() {
  if (tschchartinfopie3dscale_ != NULL) tschchartinfopie3dscale_->::TSCH::Chart3DVectorArchive::Clear();
  clear_has_tschchartinfopie3dscale();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfopie3dscale() const {
  return tschchartinfopie3dscale_ != NULL ? *tschchartinfopie3dscale_ : *default_instance_->tschchartinfopie3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfopie3dscale() {
  set_has_tschchartinfopie3dscale();
  if (tschchartinfopie3dscale_ == NULL) tschchartinfopie3dscale_ = new ::TSCH::Chart3DVectorArchive;
  return tschchartinfopie3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfopie3dscale() {
  clear_has_tschchartinfopie3dscale();
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfopie3dscale_;
  tschchartinfopie3dscale_ = NULL;
  return temp;
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfopie3dscale(::TSCH::Chart3DVectorArchive* tschchartinfopie3dscale) {
  delete tschchartinfopie3dscale_;
  tschchartinfopie3dscale_ = tschchartinfopie3dscale;
  if (tschchartinfopie3dscale) {
    set_has_tschchartinfopie3dscale();
  } else {
    clear_has_tschchartinfopie3dscale();
  }
}

// optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dviewport = 11;
inline bool ChartNonStyleArchive::has_tschchartinfodefault3dviewport() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChartNonStyleArchive::set_has_tschchartinfodefault3dviewport() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ChartNonStyleArchive::clear_has_tschchartinfodefault3dviewport() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ChartNonStyleArchive::clear_tschchartinfodefault3dviewport() {
  if (tschchartinfodefault3dviewport_ != NULL) tschchartinfodefault3dviewport_->::TSCH::Chart3DVectorArchive::Clear();
  clear_has_tschchartinfodefault3dviewport();
}
inline const ::TSCH::Chart3DVectorArchive& ChartNonStyleArchive::tschchartinfodefault3dviewport() const {
  return tschchartinfodefault3dviewport_ != NULL ? *tschchartinfodefault3dviewport_ : *default_instance_->tschchartinfodefault3dviewport_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::mutable_tschchartinfodefault3dviewport() {
  set_has_tschchartinfodefault3dviewport();
  if (tschchartinfodefault3dviewport_ == NULL) tschchartinfodefault3dviewport_ = new ::TSCH::Chart3DVectorArchive;
  return tschchartinfodefault3dviewport_;
}
inline ::TSCH::Chart3DVectorArchive* ChartNonStyleArchive::release_tschchartinfodefault3dviewport() {
  clear_has_tschchartinfodefault3dviewport();
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfodefault3dviewport_;
  tschchartinfodefault3dviewport_ = NULL;
  return temp;
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfodefault3dviewport(::TSCH::Chart3DVectorArchive* tschchartinfodefault3dviewport) {
  delete tschchartinfodefault3dviewport_;
  tschchartinfodefault3dviewport_ = tschchartinfodefault3dviewport;
  if (tschchartinfodefault3dviewport) {
    set_has_tschchartinfodefault3dviewport();
  } else {
    clear_has_tschchartinfodefault3dviewport();
  }
}

// optional float tschchartinfodefaultpiestartangle = 19;
inline bool ChartNonStyleArchive::has_tschchartinfodefaultpiestartangle() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ChartNonStyleArchive::set_has_tschchartinfodefaultpiestartangle() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ChartNonStyleArchive::clear_has_tschchartinfodefaultpiestartangle() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaultpiestartangle() {
  tschchartinfodefaultpiestartangle_ = 0;
  clear_has_tschchartinfodefaultpiestartangle();
}
inline float ChartNonStyleArchive::tschchartinfodefaultpiestartangle() const {
  return tschchartinfodefaultpiestartangle_;
}
inline void ChartNonStyleArchive::set_tschchartinfodefaultpiestartangle(float value) {
  set_has_tschchartinfodefaultpiestartangle();
  tschchartinfodefaultpiestartangle_ = value;
}

// optional bool tschchartinfodefaultshowlegend = 20;
inline bool ChartNonStyleArchive::has_tschchartinfodefaultshowlegend() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ChartNonStyleArchive::set_has_tschchartinfodefaultshowlegend() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ChartNonStyleArchive::clear_has_tschchartinfodefaultshowlegend() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaultshowlegend() {
  tschchartinfodefaultshowlegend_ = false;
  clear_has_tschchartinfodefaultshowlegend();
}
inline bool ChartNonStyleArchive::tschchartinfodefaultshowlegend() const {
  return tschchartinfodefaultshowlegend_;
}
inline void ChartNonStyleArchive::set_tschchartinfodefaultshowlegend(bool value) {
  set_has_tschchartinfodefaultshowlegend();
  tschchartinfodefaultshowlegend_ = value;
}

// optional bool tschchartinfodefaultshowtitle = 21;
inline bool ChartNonStyleArchive::has_tschchartinfodefaultshowtitle() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ChartNonStyleArchive::set_has_tschchartinfodefaultshowtitle() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ChartNonStyleArchive::clear_has_tschchartinfodefaultshowtitle() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaultshowtitle() {
  tschchartinfodefaultshowtitle_ = false;
  clear_has_tschchartinfodefaultshowtitle();
}
inline bool ChartNonStyleArchive::tschchartinfodefaultshowtitle() const {
  return tschchartinfodefaultshowtitle_;
}
inline void ChartNonStyleArchive::set_tschchartinfodefaultshowtitle(bool value) {
  set_has_tschchartinfodefaultshowtitle();
  tschchartinfodefaultshowtitle_ = value;
}

// optional bool tschchartinfodefaultskiphiddendata = 22;
inline bool ChartNonStyleArchive::has_tschchartinfodefaultskiphiddendata() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ChartNonStyleArchive::set_has_tschchartinfodefaultskiphiddendata() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ChartNonStyleArchive::clear_has_tschchartinfodefaultskiphiddendata() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaultskiphiddendata() {
  tschchartinfodefaultskiphiddendata_ = false;
  clear_has_tschchartinfodefaultskiphiddendata();
}
inline bool ChartNonStyleArchive::tschchartinfodefaultskiphiddendata() const {
  return tschchartinfodefaultskiphiddendata_;
}
inline void ChartNonStyleArchive::set_tschchartinfodefaultskiphiddendata(bool value) {
  set_has_tschchartinfodefaultskiphiddendata();
  tschchartinfodefaultskiphiddendata_ = value;
}

// optional string tschchartinfodefaulttitle = 23;
inline bool ChartNonStyleArchive::has_tschchartinfodefaulttitle() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ChartNonStyleArchive::set_has_tschchartinfodefaulttitle() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ChartNonStyleArchive::clear_has_tschchartinfodefaulttitle() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaulttitle() {
  if (tschchartinfodefaulttitle_ != &::google::protobuf::internal::kEmptyString) {
    tschchartinfodefaulttitle_->clear();
  }
  clear_has_tschchartinfodefaulttitle();
}
inline const ::std::string& ChartNonStyleArchive::tschchartinfodefaulttitle() const {
  return *tschchartinfodefaulttitle_;
}
inline void ChartNonStyleArchive::set_tschchartinfodefaulttitle(const ::std::string& value) {
  set_has_tschchartinfodefaulttitle();
  if (tschchartinfodefaulttitle_ == &::google::protobuf::internal::kEmptyString) {
    tschchartinfodefaulttitle_ = new ::std::string;
  }
  tschchartinfodefaulttitle_->assign(value);
}
inline void ChartNonStyleArchive::set_tschchartinfodefaulttitle(const char* value) {
  set_has_tschchartinfodefaulttitle();
  if (tschchartinfodefaulttitle_ == &::google::protobuf::internal::kEmptyString) {
    tschchartinfodefaulttitle_ = new ::std::string;
  }
  tschchartinfodefaulttitle_->assign(value);
}
inline void ChartNonStyleArchive::set_tschchartinfodefaulttitle(const char* value, size_t size) {
  set_has_tschchartinfodefaulttitle();
  if (tschchartinfodefaulttitle_ == &::google::protobuf::internal::kEmptyString) {
    tschchartinfodefaulttitle_ = new ::std::string;
  }
  tschchartinfodefaulttitle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChartNonStyleArchive::mutable_tschchartinfodefaulttitle() {
  set_has_tschchartinfodefaulttitle();
  if (tschchartinfodefaulttitle_ == &::google::protobuf::internal::kEmptyString) {
    tschchartinfodefaulttitle_ = new ::std::string;
  }
  return tschchartinfodefaulttitle_;
}
inline ::std::string* ChartNonStyleArchive::release_tschchartinfodefaulttitle() {
  clear_has_tschchartinfodefaulttitle();
  if (tschchartinfodefaulttitle_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tschchartinfodefaulttitle_;
    tschchartinfodefaulttitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChartNonStyleArchive::set_allocated_tschchartinfodefaulttitle(::std::string* tschchartinfodefaulttitle) {
  if (tschchartinfodefaulttitle_ != &::google::protobuf::internal::kEmptyString) {
    delete tschchartinfodefaulttitle_;
  }
  if (tschchartinfodefaulttitle) {
    set_has_tschchartinfodefaulttitle();
    tschchartinfodefaulttitle_ = tschchartinfodefaulttitle;
  } else {
    clear_has_tschchartinfodefaulttitle();
    tschchartinfodefaulttitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 tschchartinfodefaultdatasetnamelocation = 24;
inline bool ChartNonStyleArchive::has_tschchartinfodefaultdatasetnamelocation() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ChartNonStyleArchive::set_has_tschchartinfodefaultdatasetnamelocation() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ChartNonStyleArchive::clear_has_tschchartinfodefaultdatasetnamelocation() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaultdatasetnamelocation() {
  tschchartinfodefaultdatasetnamelocation_ = 0;
  clear_has_tschchartinfodefaultdatasetnamelocation();
}
inline ::google::protobuf::int32 ChartNonStyleArchive::tschchartinfodefaultdatasetnamelocation() const {
  return tschchartinfodefaultdatasetnamelocation_;
}
inline void ChartNonStyleArchive::set_tschchartinfodefaultdatasetnamelocation(::google::protobuf::int32 value) {
  set_has_tschchartinfodefaultdatasetnamelocation();
  tschchartinfodefaultdatasetnamelocation_ = value;
}

// optional int32 tschchartinfodefaultmultidatacontroltype = 25;
inline bool ChartNonStyleArchive::has_tschchartinfodefaultmultidatacontroltype() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ChartNonStyleArchive::set_has_tschchartinfodefaultmultidatacontroltype() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ChartNonStyleArchive::clear_has_tschchartinfodefaultmultidatacontroltype() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ChartNonStyleArchive::clear_tschchartinfodefaultmultidatacontroltype() {
  tschchartinfodefaultmultidatacontroltype_ = 0;
  clear_has_tschchartinfodefaultmultidatacontroltype();
}
inline ::google::protobuf::int32 ChartNonStyleArchive::tschchartinfodefaultmultidatacontroltype() const {
  return tschchartinfodefaultmultidatacontroltype_;
}
inline void ChartNonStyleArchive::set_tschchartinfodefaultmultidatacontroltype(::google::protobuf::int32 value) {
  set_has_tschchartinfodefaultmultidatacontroltype();
  tschchartinfodefaultmultidatacontroltype_ = value;
}

// -------------------------------------------------------------------

// LegendStyleArchive

// optional .TSD.FillArchive tschlegendmodeldefaultfill = 1;
inline bool LegendStyleArchive::has_tschlegendmodeldefaultfill() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LegendStyleArchive::set_has_tschlegendmodeldefaultfill() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LegendStyleArchive::clear_has_tschlegendmodeldefaultfill() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LegendStyleArchive::clear_tschlegendmodeldefaultfill() {
  if (tschlegendmodeldefaultfill_ != NULL) tschlegendmodeldefaultfill_->::TSD::FillArchive::Clear();
  clear_has_tschlegendmodeldefaultfill();
}
inline const ::TSD::FillArchive& LegendStyleArchive::tschlegendmodeldefaultfill() const {
  return tschlegendmodeldefaultfill_ != NULL ? *tschlegendmodeldefaultfill_ : *default_instance_->tschlegendmodeldefaultfill_;
}
inline ::TSD::FillArchive* LegendStyleArchive::mutable_tschlegendmodeldefaultfill() {
  set_has_tschlegendmodeldefaultfill();
  if (tschlegendmodeldefaultfill_ == NULL) tschlegendmodeldefaultfill_ = new ::TSD::FillArchive;
  return tschlegendmodeldefaultfill_;
}
inline ::TSD::FillArchive* LegendStyleArchive::release_tschlegendmodeldefaultfill() {
  clear_has_tschlegendmodeldefaultfill();
  ::TSD::FillArchive* temp = tschlegendmodeldefaultfill_;
  tschlegendmodeldefaultfill_ = NULL;
  return temp;
}
inline void LegendStyleArchive::set_allocated_tschlegendmodeldefaultfill(::TSD::FillArchive* tschlegendmodeldefaultfill) {
  delete tschlegendmodeldefaultfill_;
  tschlegendmodeldefaultfill_ = tschlegendmodeldefaultfill;
  if (tschlegendmodeldefaultfill) {
    set_has_tschlegendmodeldefaultfill();
  } else {
    clear_has_tschlegendmodeldefaultfill();
  }
}

// optional int32 tschlegendmodeldefaultlabelparagraphstyleindex = 2;
inline bool LegendStyleArchive::has_tschlegendmodeldefaultlabelparagraphstyleindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LegendStyleArchive::set_has_tschlegendmodeldefaultlabelparagraphstyleindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LegendStyleArchive::clear_has_tschlegendmodeldefaultlabelparagraphstyleindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LegendStyleArchive::clear_tschlegendmodeldefaultlabelparagraphstyleindex() {
  tschlegendmodeldefaultlabelparagraphstyleindex_ = 0;
  clear_has_tschlegendmodeldefaultlabelparagraphstyleindex();
}
inline ::google::protobuf::int32 LegendStyleArchive::tschlegendmodeldefaultlabelparagraphstyleindex() const {
  return tschlegendmodeldefaultlabelparagraphstyleindex_;
}
inline void LegendStyleArchive::set_tschlegendmodeldefaultlabelparagraphstyleindex(::google::protobuf::int32 value) {
  set_has_tschlegendmodeldefaultlabelparagraphstyleindex();
  tschlegendmodeldefaultlabelparagraphstyleindex_ = value;
}

// optional float tschlegendmodeldefaultopacity = 3;
inline bool LegendStyleArchive::has_tschlegendmodeldefaultopacity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LegendStyleArchive::set_has_tschlegendmodeldefaultopacity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LegendStyleArchive::clear_has_tschlegendmodeldefaultopacity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LegendStyleArchive::clear_tschlegendmodeldefaultopacity() {
  tschlegendmodeldefaultopacity_ = 0;
  clear_has_tschlegendmodeldefaultopacity();
}
inline float LegendStyleArchive::tschlegendmodeldefaultopacity() const {
  return tschlegendmodeldefaultopacity_;
}
inline void LegendStyleArchive::set_tschlegendmodeldefaultopacity(float value) {
  set_has_tschlegendmodeldefaultopacity();
  tschlegendmodeldefaultopacity_ = value;
}

// optional .TSD.ShadowArchive tschlegendmodeldefaultshadow = 4;
inline bool LegendStyleArchive::has_tschlegendmodeldefaultshadow() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LegendStyleArchive::set_has_tschlegendmodeldefaultshadow() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LegendStyleArchive::clear_has_tschlegendmodeldefaultshadow() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LegendStyleArchive::clear_tschlegendmodeldefaultshadow() {
  if (tschlegendmodeldefaultshadow_ != NULL) tschlegendmodeldefaultshadow_->::TSD::ShadowArchive::Clear();
  clear_has_tschlegendmodeldefaultshadow();
}
inline const ::TSD::ShadowArchive& LegendStyleArchive::tschlegendmodeldefaultshadow() const {
  return tschlegendmodeldefaultshadow_ != NULL ? *tschlegendmodeldefaultshadow_ : *default_instance_->tschlegendmodeldefaultshadow_;
}
inline ::TSD::ShadowArchive* LegendStyleArchive::mutable_tschlegendmodeldefaultshadow() {
  set_has_tschlegendmodeldefaultshadow();
  if (tschlegendmodeldefaultshadow_ == NULL) tschlegendmodeldefaultshadow_ = new ::TSD::ShadowArchive;
  return tschlegendmodeldefaultshadow_;
}
inline ::TSD::ShadowArchive* LegendStyleArchive::release_tschlegendmodeldefaultshadow() {
  clear_has_tschlegendmodeldefaultshadow();
  ::TSD::ShadowArchive* temp = tschlegendmodeldefaultshadow_;
  tschlegendmodeldefaultshadow_ = NULL;
  return temp;
}
inline void LegendStyleArchive::set_allocated_tschlegendmodeldefaultshadow(::TSD::ShadowArchive* tschlegendmodeldefaultshadow) {
  delete tschlegendmodeldefaultshadow_;
  tschlegendmodeldefaultshadow_ = tschlegendmodeldefaultshadow;
  if (tschlegendmodeldefaultshadow) {
    set_has_tschlegendmodeldefaultshadow();
  } else {
    clear_has_tschlegendmodeldefaultshadow();
  }
}

// optional .TSD.StrokeArchive tschlegendmodeldefaultstroke = 5;
inline bool LegendStyleArchive::has_tschlegendmodeldefaultstroke() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LegendStyleArchive::set_has_tschlegendmodeldefaultstroke() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LegendStyleArchive::clear_has_tschlegendmodeldefaultstroke() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LegendStyleArchive::clear_tschlegendmodeldefaultstroke() {
  if (tschlegendmodeldefaultstroke_ != NULL) tschlegendmodeldefaultstroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschlegendmodeldefaultstroke();
}
inline const ::TSD::StrokeArchive& LegendStyleArchive::tschlegendmodeldefaultstroke() const {
  return tschlegendmodeldefaultstroke_ != NULL ? *tschlegendmodeldefaultstroke_ : *default_instance_->tschlegendmodeldefaultstroke_;
}
inline ::TSD::StrokeArchive* LegendStyleArchive::mutable_tschlegendmodeldefaultstroke() {
  set_has_tschlegendmodeldefaultstroke();
  if (tschlegendmodeldefaultstroke_ == NULL) tschlegendmodeldefaultstroke_ = new ::TSD::StrokeArchive;
  return tschlegendmodeldefaultstroke_;
}
inline ::TSD::StrokeArchive* LegendStyleArchive::release_tschlegendmodeldefaultstroke() {
  clear_has_tschlegendmodeldefaultstroke();
  ::TSD::StrokeArchive* temp = tschlegendmodeldefaultstroke_;
  tschlegendmodeldefaultstroke_ = NULL;
  return temp;
}
inline void LegendStyleArchive::set_allocated_tschlegendmodeldefaultstroke(::TSD::StrokeArchive* tschlegendmodeldefaultstroke) {
  delete tschlegendmodeldefaultstroke_;
  tschlegendmodeldefaultstroke_ = tschlegendmodeldefaultstroke;
  if (tschlegendmodeldefaultstroke) {
    set_has_tschlegendmodeldefaultstroke();
  } else {
    clear_has_tschlegendmodeldefaultstroke();
  }
}

// -------------------------------------------------------------------

// LegendNonStyleArchive

// -------------------------------------------------------------------

// ChartAxisStyleArchive

// optional float tschchartaxiscategory3dgridlineopacity = 1;
inline bool ChartAxisStyleArchive::has_tschchartaxiscategory3dgridlineopacity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxiscategory3dgridlineopacity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxiscategory3dgridlineopacity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategory3dgridlineopacity() {
  tschchartaxiscategory3dgridlineopacity_ = 0;
  clear_has_tschchartaxiscategory3dgridlineopacity();
}
inline float ChartAxisStyleArchive::tschchartaxiscategory3dgridlineopacity() const {
  return tschchartaxiscategory3dgridlineopacity_;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategory3dgridlineopacity(float value) {
  set_has_tschchartaxiscategory3dgridlineopacity();
  tschchartaxiscategory3dgridlineopacity_ = value;
}

// optional float tschchartaxisvalue3dgridlineopacity = 2;
inline bool ChartAxisStyleArchive::has_tschchartaxisvalue3dgridlineopacity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxisvalue3dgridlineopacity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxisvalue3dgridlineopacity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalue3dgridlineopacity() {
  tschchartaxisvalue3dgridlineopacity_ = 0;
  clear_has_tschchartaxisvalue3dgridlineopacity();
}
inline float ChartAxisStyleArchive::tschchartaxisvalue3dgridlineopacity() const {
  return tschchartaxisvalue3dgridlineopacity_;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalue3dgridlineopacity(float value) {
  set_has_tschchartaxisvalue3dgridlineopacity();
  tschchartaxisvalue3dgridlineopacity_ = value;
}

// optional .TSD.StrokeArchive tschchartaxiscategory3dgridlinestroke = 3;
inline bool ChartAxisStyleArchive::has_tschchartaxiscategory3dgridlinestroke() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxiscategory3dgridlinestroke() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxiscategory3dgridlinestroke() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategory3dgridlinestroke() {
  if (tschchartaxiscategory3dgridlinestroke_ != NULL) tschchartaxiscategory3dgridlinestroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartaxiscategory3dgridlinestroke();
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::tschchartaxiscategory3dgridlinestroke() const {
  return tschchartaxiscategory3dgridlinestroke_ != NULL ? *tschchartaxiscategory3dgridlinestroke_ : *default_instance_->tschchartaxiscategory3dgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::mutable_tschchartaxiscategory3dgridlinestroke() {
  set_has_tschchartaxiscategory3dgridlinestroke();
  if (tschchartaxiscategory3dgridlinestroke_ == NULL) tschchartaxiscategory3dgridlinestroke_ = new ::TSD::StrokeArchive;
  return tschchartaxiscategory3dgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::release_tschchartaxiscategory3dgridlinestroke() {
  clear_has_tschchartaxiscategory3dgridlinestroke();
  ::TSD::StrokeArchive* temp = tschchartaxiscategory3dgridlinestroke_;
  tschchartaxiscategory3dgridlinestroke_ = NULL;
  return temp;
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxiscategory3dgridlinestroke(::TSD::StrokeArchive* tschchartaxiscategory3dgridlinestroke) {
  delete tschchartaxiscategory3dgridlinestroke_;
  tschchartaxiscategory3dgridlinestroke_ = tschchartaxiscategory3dgridlinestroke;
  if (tschchartaxiscategory3dgridlinestroke) {
    set_has_tschchartaxiscategory3dgridlinestroke();
  } else {
    clear_has_tschchartaxiscategory3dgridlinestroke();
  }
}

// optional .TSD.StrokeArchive tschchartaxisvalue3dgridlinestroke = 4;
inline bool ChartAxisStyleArchive::has_tschchartaxisvalue3dgridlinestroke() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxisvalue3dgridlinestroke() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxisvalue3dgridlinestroke() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalue3dgridlinestroke() {
  if (tschchartaxisvalue3dgridlinestroke_ != NULL) tschchartaxisvalue3dgridlinestroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartaxisvalue3dgridlinestroke();
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::tschchartaxisvalue3dgridlinestroke() const {
  return tschchartaxisvalue3dgridlinestroke_ != NULL ? *tschchartaxisvalue3dgridlinestroke_ : *default_instance_->tschchartaxisvalue3dgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::mutable_tschchartaxisvalue3dgridlinestroke() {
  set_has_tschchartaxisvalue3dgridlinestroke();
  if (tschchartaxisvalue3dgridlinestroke_ == NULL) tschchartaxisvalue3dgridlinestroke_ = new ::TSD::StrokeArchive;
  return tschchartaxisvalue3dgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::release_tschchartaxisvalue3dgridlinestroke() {
  clear_has_tschchartaxisvalue3dgridlinestroke();
  ::TSD::StrokeArchive* temp = tschchartaxisvalue3dgridlinestroke_;
  tschchartaxisvalue3dgridlinestroke_ = NULL;
  return temp;
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxisvalue3dgridlinestroke(::TSD::StrokeArchive* tschchartaxisvalue3dgridlinestroke) {
  delete tschchartaxisvalue3dgridlinestroke_;
  tschchartaxisvalue3dgridlinestroke_ = tschchartaxisvalue3dgridlinestroke;
  if (tschchartaxisvalue3dgridlinestroke) {
    set_has_tschchartaxisvalue3dgridlinestroke();
  } else {
    clear_has_tschchartaxisvalue3dgridlinestroke();
  }
}

// optional int32 tschchartaxiscategoryhorizontalspacing = 5;
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryhorizontalspacing() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxiscategoryhorizontalspacing() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxiscategoryhorizontalspacing() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryhorizontalspacing() {
  tschchartaxiscategoryhorizontalspacing_ = 0;
  clear_has_tschchartaxiscategoryhorizontalspacing();
}
inline ::google::protobuf::int32 ChartAxisStyleArchive::tschchartaxiscategoryhorizontalspacing() const {
  return tschchartaxiscategoryhorizontalspacing_;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryhorizontalspacing(::google::protobuf::int32 value) {
  set_has_tschchartaxiscategoryhorizontalspacing();
  tschchartaxiscategoryhorizontalspacing_ = value;
}

// optional int32 tschchartaxiscategorylabelparagraphstyleindex = 6;
inline bool ChartAxisStyleArchive::has_tschchartaxiscategorylabelparagraphstyleindex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxiscategorylabelparagraphstyleindex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxiscategorylabelparagraphstyleindex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategorylabelparagraphstyleindex() {
  tschchartaxiscategorylabelparagraphstyleindex_ = 0;
  clear_has_tschchartaxiscategorylabelparagraphstyleindex();
}
inline ::google::protobuf::int32 ChartAxisStyleArchive::tschchartaxiscategorylabelparagraphstyleindex() const {
  return tschchartaxiscategorylabelparagraphstyleindex_;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategorylabelparagraphstyleindex(::google::protobuf::int32 value) {
  set_has_tschchartaxiscategorylabelparagraphstyleindex();
  tschchartaxiscategorylabelparagraphstyleindex_ = value;
}

// optional int32 tschchartaxisdefaultlabelparagraphstyleindex = 7;
inline bool ChartAxisStyleArchive::has_tschchartaxisdefaultlabelparagraphstyleindex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxisdefaultlabelparagraphstyleindex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxisdefaultlabelparagraphstyleindex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxisdefaultlabelparagraphstyleindex() {
  tschchartaxisdefaultlabelparagraphstyleindex_ = 0;
  clear_has_tschchartaxisdefaultlabelparagraphstyleindex();
}
inline ::google::protobuf::int32 ChartAxisStyleArchive::tschchartaxisdefaultlabelparagraphstyleindex() const {
  return tschchartaxisdefaultlabelparagraphstyleindex_;
}
inline void ChartAxisStyleArchive::set_tschchartaxisdefaultlabelparagraphstyleindex(::google::protobuf::int32 value) {
  set_has_tschchartaxisdefaultlabelparagraphstyleindex();
  tschchartaxisdefaultlabelparagraphstyleindex_ = value;
}

// optional int32 tschchartaxisvaluelabelparagraphstyleindex = 8;
inline bool ChartAxisStyleArchive::has_tschchartaxisvaluelabelparagraphstyleindex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxisvaluelabelparagraphstyleindex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxisvaluelabelparagraphstyleindex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvaluelabelparagraphstyleindex() {
  tschchartaxisvaluelabelparagraphstyleindex_ = 0;
  clear_has_tschchartaxisvaluelabelparagraphstyleindex();
}
inline ::google::protobuf::int32 ChartAxisStyleArchive::tschchartaxisvaluelabelparagraphstyleindex() const {
  return tschchartaxisvaluelabelparagraphstyleindex_;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvaluelabelparagraphstyleindex(::google::protobuf::int32 value) {
  set_has_tschchartaxisvaluelabelparagraphstyleindex();
  tschchartaxisvaluelabelparagraphstyleindex_ = value;
}

// optional float tschchartaxiscategorylabelsorientation = 9;
inline bool ChartAxisStyleArchive::has_tschchartaxiscategorylabelsorientation() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxiscategorylabelsorientation() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxiscategorylabelsorientation() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategorylabelsorientation() {
  tschchartaxiscategorylabelsorientation_ = 0;
  clear_has_tschchartaxiscategorylabelsorientation();
}
inline float ChartAxisStyleArchive::tschchartaxiscategorylabelsorientation() const {
  return tschchartaxiscategorylabelsorientation_;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategorylabelsorientation(float value) {
  set_has_tschchartaxiscategorylabelsorientation();
  tschchartaxiscategorylabelsorientation_ = value;
}

// optional float tschchartaxisdefaultlabelsorientation = 10;
inline bool ChartAxisStyleArchive::has_tschchartaxisdefaultlabelsorientation() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxisdefaultlabelsorientation() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxisdefaultlabelsorientation() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxisdefaultlabelsorientation() {
  tschchartaxisdefaultlabelsorientation_ = 0;
  clear_has_tschchartaxisdefaultlabelsorientation();
}
inline float ChartAxisStyleArchive::tschchartaxisdefaultlabelsorientation() const {
  return tschchartaxisdefaultlabelsorientation_;
}
inline void ChartAxisStyleArchive::set_tschchartaxisdefaultlabelsorientation(float value) {
  set_has_tschchartaxisdefaultlabelsorientation();
  tschchartaxisdefaultlabelsorientation_ = value;
}

// optional float tschchartaxisvaluelabelsorientation = 11;
inline bool ChartAxisStyleArchive::has_tschchartaxisvaluelabelsorientation() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxisvaluelabelsorientation() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxisvaluelabelsorientation() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvaluelabelsorientation() {
  tschchartaxisvaluelabelsorientation_ = 0;
  clear_has_tschchartaxisvaluelabelsorientation();
}
inline float ChartAxisStyleArchive::tschchartaxisvaluelabelsorientation() const {
  return tschchartaxisvaluelabelsorientation_;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvaluelabelsorientation(float value) {
  set_has_tschchartaxisvaluelabelsorientation();
  tschchartaxisvaluelabelsorientation_ = value;
}

// optional float tschchartaxiscategorymajorgridlineopacity = 12;
inline bool ChartAxisStyleArchive::has_tschchartaxiscategorymajorgridlineopacity() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxiscategorymajorgridlineopacity() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxiscategorymajorgridlineopacity() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategorymajorgridlineopacity() {
  tschchartaxiscategorymajorgridlineopacity_ = 0;
  clear_has_tschchartaxiscategorymajorgridlineopacity();
}
inline float ChartAxisStyleArchive::tschchartaxiscategorymajorgridlineopacity() const {
  return tschchartaxiscategorymajorgridlineopacity_;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategorymajorgridlineopacity(float value) {
  set_has_tschchartaxiscategorymajorgridlineopacity();
  tschchartaxiscategorymajorgridlineopacity_ = value;
}

// optional float tschchartaxisvaluemajorgridlineopacity = 13;
inline bool ChartAxisStyleArchive::has_tschchartaxisvaluemajorgridlineopacity() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxisvaluemajorgridlineopacity() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxisvaluemajorgridlineopacity() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvaluemajorgridlineopacity() {
  tschchartaxisvaluemajorgridlineopacity_ = 0;
  clear_has_tschchartaxisvaluemajorgridlineopacity();
}
inline float ChartAxisStyleArchive::tschchartaxisvaluemajorgridlineopacity() const {
  return tschchartaxisvaluemajorgridlineopacity_;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvaluemajorgridlineopacity(float value) {
  set_has_tschchartaxisvaluemajorgridlineopacity();
  tschchartaxisvaluemajorgridlineopacity_ = value;
}

// optional .TSD.ShadowArchive tschchartaxiscategorymajorgridlineshadow = 14;
inline bool ChartAxisStyleArchive::has_tschchartaxiscategorymajorgridlineshadow() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxiscategorymajorgridlineshadow() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxiscategorymajorgridlineshadow() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategorymajorgridlineshadow() {
  if (tschchartaxiscategorymajorgridlineshadow_ != NULL) tschchartaxiscategorymajorgridlineshadow_->::TSD::ShadowArchive::Clear();
  clear_has_tschchartaxiscategorymajorgridlineshadow();
}
inline const ::TSD::ShadowArchive& ChartAxisStyleArchive::tschchartaxiscategorymajorgridlineshadow() const {
  return tschchartaxiscategorymajorgridlineshadow_ != NULL ? *tschchartaxiscategorymajorgridlineshadow_ : *default_instance_->tschchartaxiscategorymajorgridlineshadow_;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::mutable_tschchartaxiscategorymajorgridlineshadow() {
  set_has_tschchartaxiscategorymajorgridlineshadow();
  if (tschchartaxiscategorymajorgridlineshadow_ == NULL) tschchartaxiscategorymajorgridlineshadow_ = new ::TSD::ShadowArchive;
  return tschchartaxiscategorymajorgridlineshadow_;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::release_tschchartaxiscategorymajorgridlineshadow() {
  clear_has_tschchartaxiscategorymajorgridlineshadow();
  ::TSD::ShadowArchive* temp = tschchartaxiscategorymajorgridlineshadow_;
  tschchartaxiscategorymajorgridlineshadow_ = NULL;
  return temp;
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxiscategorymajorgridlineshadow(::TSD::ShadowArchive* tschchartaxiscategorymajorgridlineshadow) {
  delete tschchartaxiscategorymajorgridlineshadow_;
  tschchartaxiscategorymajorgridlineshadow_ = tschchartaxiscategorymajorgridlineshadow;
  if (tschchartaxiscategorymajorgridlineshadow) {
    set_has_tschchartaxiscategorymajorgridlineshadow();
  } else {
    clear_has_tschchartaxiscategorymajorgridlineshadow();
  }
}

// optional .TSD.ShadowArchive tschchartaxisvaluemajorgridlineshadow = 15;
inline bool ChartAxisStyleArchive::has_tschchartaxisvaluemajorgridlineshadow() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxisvaluemajorgridlineshadow() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxisvaluemajorgridlineshadow() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvaluemajorgridlineshadow() {
  if (tschchartaxisvaluemajorgridlineshadow_ != NULL) tschchartaxisvaluemajorgridlineshadow_->::TSD::ShadowArchive::Clear();
  clear_has_tschchartaxisvaluemajorgridlineshadow();
}
inline const ::TSD::ShadowArchive& ChartAxisStyleArchive::tschchartaxisvaluemajorgridlineshadow() const {
  return tschchartaxisvaluemajorgridlineshadow_ != NULL ? *tschchartaxisvaluemajorgridlineshadow_ : *default_instance_->tschchartaxisvaluemajorgridlineshadow_;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::mutable_tschchartaxisvaluemajorgridlineshadow() {
  set_has_tschchartaxisvaluemajorgridlineshadow();
  if (tschchartaxisvaluemajorgridlineshadow_ == NULL) tschchartaxisvaluemajorgridlineshadow_ = new ::TSD::ShadowArchive;
  return tschchartaxisvaluemajorgridlineshadow_;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::release_tschchartaxisvaluemajorgridlineshadow() {
  clear_has_tschchartaxisvaluemajorgridlineshadow();
  ::TSD::ShadowArchive* temp = tschchartaxisvaluemajorgridlineshadow_;
  tschchartaxisvaluemajorgridlineshadow_ = NULL;
  return temp;
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxisvaluemajorgridlineshadow(::TSD::ShadowArchive* tschchartaxisvaluemajorgridlineshadow) {
  delete tschchartaxisvaluemajorgridlineshadow_;
  tschchartaxisvaluemajorgridlineshadow_ = tschchartaxisvaluemajorgridlineshadow;
  if (tschchartaxisvaluemajorgridlineshadow) {
    set_has_tschchartaxisvaluemajorgridlineshadow();
  } else {
    clear_has_tschchartaxisvaluemajorgridlineshadow();
  }
}

// optional .TSD.StrokeArchive tschchartaxiscategorymajorgridlinestroke = 16;
inline bool ChartAxisStyleArchive::has_tschchartaxiscategorymajorgridlinestroke() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxiscategorymajorgridlinestroke() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxiscategorymajorgridlinestroke() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategorymajorgridlinestroke() {
  if (tschchartaxiscategorymajorgridlinestroke_ != NULL) tschchartaxiscategorymajorgridlinestroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartaxiscategorymajorgridlinestroke();
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::tschchartaxiscategorymajorgridlinestroke() const {
  return tschchartaxiscategorymajorgridlinestroke_ != NULL ? *tschchartaxiscategorymajorgridlinestroke_ : *default_instance_->tschchartaxiscategorymajorgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::mutable_tschchartaxiscategorymajorgridlinestroke() {
  set_has_tschchartaxiscategorymajorgridlinestroke();
  if (tschchartaxiscategorymajorgridlinestroke_ == NULL) tschchartaxiscategorymajorgridlinestroke_ = new ::TSD::StrokeArchive;
  return tschchartaxiscategorymajorgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::release_tschchartaxiscategorymajorgridlinestroke() {
  clear_has_tschchartaxiscategorymajorgridlinestroke();
  ::TSD::StrokeArchive* temp = tschchartaxiscategorymajorgridlinestroke_;
  tschchartaxiscategorymajorgridlinestroke_ = NULL;
  return temp;
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxiscategorymajorgridlinestroke(::TSD::StrokeArchive* tschchartaxiscategorymajorgridlinestroke) {
  delete tschchartaxiscategorymajorgridlinestroke_;
  tschchartaxiscategorymajorgridlinestroke_ = tschchartaxiscategorymajorgridlinestroke;
  if (tschchartaxiscategorymajorgridlinestroke) {
    set_has_tschchartaxiscategorymajorgridlinestroke();
  } else {
    clear_has_tschchartaxiscategorymajorgridlinestroke();
  }
}

// optional .TSD.StrokeArchive tschchartaxisvaluemajorgridlinestroke = 17;
inline bool ChartAxisStyleArchive::has_tschchartaxisvaluemajorgridlinestroke() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxisvaluemajorgridlinestroke() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxisvaluemajorgridlinestroke() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvaluemajorgridlinestroke() {
  if (tschchartaxisvaluemajorgridlinestroke_ != NULL) tschchartaxisvaluemajorgridlinestroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartaxisvaluemajorgridlinestroke();
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::tschchartaxisvaluemajorgridlinestroke() const {
  return tschchartaxisvaluemajorgridlinestroke_ != NULL ? *tschchartaxisvaluemajorgridlinestroke_ : *default_instance_->tschchartaxisvaluemajorgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::mutable_tschchartaxisvaluemajorgridlinestroke() {
  set_has_tschchartaxisvaluemajorgridlinestroke();
  if (tschchartaxisvaluemajorgridlinestroke_ == NULL) tschchartaxisvaluemajorgridlinestroke_ = new ::TSD::StrokeArchive;
  return tschchartaxisvaluemajorgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::release_tschchartaxisvaluemajorgridlinestroke() {
  clear_has_tschchartaxisvaluemajorgridlinestroke();
  ::TSD::StrokeArchive* temp = tschchartaxisvaluemajorgridlinestroke_;
  tschchartaxisvaluemajorgridlinestroke_ = NULL;
  return temp;
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxisvaluemajorgridlinestroke(::TSD::StrokeArchive* tschchartaxisvaluemajorgridlinestroke) {
  delete tschchartaxisvaluemajorgridlinestroke_;
  tschchartaxisvaluemajorgridlinestroke_ = tschchartaxisvaluemajorgridlinestroke;
  if (tschchartaxisvaluemajorgridlinestroke) {
    set_has_tschchartaxisvaluemajorgridlinestroke();
  } else {
    clear_has_tschchartaxisvaluemajorgridlinestroke();
  }
}

// optional float tschchartaxiscategoryminorgridlineopacity = 18;
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryminorgridlineopacity() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxiscategoryminorgridlineopacity() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxiscategoryminorgridlineopacity() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryminorgridlineopacity() {
  tschchartaxiscategoryminorgridlineopacity_ = 0;
  clear_has_tschchartaxiscategoryminorgridlineopacity();
}
inline float ChartAxisStyleArchive::tschchartaxiscategoryminorgridlineopacity() const {
  return tschchartaxiscategoryminorgridlineopacity_;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryminorgridlineopacity(float value) {
  set_has_tschchartaxiscategoryminorgridlineopacity();
  tschchartaxiscategoryminorgridlineopacity_ = value;
}

// optional float tschchartaxisvalueminorgridlineopacity = 19;
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueminorgridlineopacity() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxisvalueminorgridlineopacity() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxisvalueminorgridlineopacity() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalueminorgridlineopacity() {
  tschchartaxisvalueminorgridlineopacity_ = 0;
  clear_has_tschchartaxisvalueminorgridlineopacity();
}
inline float ChartAxisStyleArchive::tschchartaxisvalueminorgridlineopacity() const {
  return tschchartaxisvalueminorgridlineopacity_;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalueminorgridlineopacity(float value) {
  set_has_tschchartaxisvalueminorgridlineopacity();
  tschchartaxisvalueminorgridlineopacity_ = value;
}

// optional .TSD.ShadowArchive tschchartaxiscategoryminorgridlineshadow = 20;
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryminorgridlineshadow() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxiscategoryminorgridlineshadow() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxiscategoryminorgridlineshadow() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryminorgridlineshadow() {
  if (tschchartaxiscategoryminorgridlineshadow_ != NULL) tschchartaxiscategoryminorgridlineshadow_->::TSD::ShadowArchive::Clear();
  clear_has_tschchartaxiscategoryminorgridlineshadow();
}
inline const ::TSD::ShadowArchive& ChartAxisStyleArchive::tschchartaxiscategoryminorgridlineshadow() const {
  return tschchartaxiscategoryminorgridlineshadow_ != NULL ? *tschchartaxiscategoryminorgridlineshadow_ : *default_instance_->tschchartaxiscategoryminorgridlineshadow_;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::mutable_tschchartaxiscategoryminorgridlineshadow() {
  set_has_tschchartaxiscategoryminorgridlineshadow();
  if (tschchartaxiscategoryminorgridlineshadow_ == NULL) tschchartaxiscategoryminorgridlineshadow_ = new ::TSD::ShadowArchive;
  return tschchartaxiscategoryminorgridlineshadow_;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::release_tschchartaxiscategoryminorgridlineshadow() {
  clear_has_tschchartaxiscategoryminorgridlineshadow();
  ::TSD::ShadowArchive* temp = tschchartaxiscategoryminorgridlineshadow_;
  tschchartaxiscategoryminorgridlineshadow_ = NULL;
  return temp;
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxiscategoryminorgridlineshadow(::TSD::ShadowArchive* tschchartaxiscategoryminorgridlineshadow) {
  delete tschchartaxiscategoryminorgridlineshadow_;
  tschchartaxiscategoryminorgridlineshadow_ = tschchartaxiscategoryminorgridlineshadow;
  if (tschchartaxiscategoryminorgridlineshadow) {
    set_has_tschchartaxiscategoryminorgridlineshadow();
  } else {
    clear_has_tschchartaxiscategoryminorgridlineshadow();
  }
}

// optional .TSD.ShadowArchive tschchartaxisvalueminorgridlineshadow = 21;
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueminorgridlineshadow() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxisvalueminorgridlineshadow() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxisvalueminorgridlineshadow() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalueminorgridlineshadow() {
  if (tschchartaxisvalueminorgridlineshadow_ != NULL) tschchartaxisvalueminorgridlineshadow_->::TSD::ShadowArchive::Clear();
  clear_has_tschchartaxisvalueminorgridlineshadow();
}
inline const ::TSD::ShadowArchive& ChartAxisStyleArchive::tschchartaxisvalueminorgridlineshadow() const {
  return tschchartaxisvalueminorgridlineshadow_ != NULL ? *tschchartaxisvalueminorgridlineshadow_ : *default_instance_->tschchartaxisvalueminorgridlineshadow_;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::mutable_tschchartaxisvalueminorgridlineshadow() {
  set_has_tschchartaxisvalueminorgridlineshadow();
  if (tschchartaxisvalueminorgridlineshadow_ == NULL) tschchartaxisvalueminorgridlineshadow_ = new ::TSD::ShadowArchive;
  return tschchartaxisvalueminorgridlineshadow_;
}
inline ::TSD::ShadowArchive* ChartAxisStyleArchive::release_tschchartaxisvalueminorgridlineshadow() {
  clear_has_tschchartaxisvalueminorgridlineshadow();
  ::TSD::ShadowArchive* temp = tschchartaxisvalueminorgridlineshadow_;
  tschchartaxisvalueminorgridlineshadow_ = NULL;
  return temp;
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxisvalueminorgridlineshadow(::TSD::ShadowArchive* tschchartaxisvalueminorgridlineshadow) {
  delete tschchartaxisvalueminorgridlineshadow_;
  tschchartaxisvalueminorgridlineshadow_ = tschchartaxisvalueminorgridlineshadow;
  if (tschchartaxisvalueminorgridlineshadow) {
    set_has_tschchartaxisvalueminorgridlineshadow();
  } else {
    clear_has_tschchartaxisvalueminorgridlineshadow();
  }
}

// optional .TSD.StrokeArchive tschchartaxiscategoryminorgridlinestroke = 22;
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryminorgridlinestroke() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxiscategoryminorgridlinestroke() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxiscategoryminorgridlinestroke() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryminorgridlinestroke() {
  if (tschchartaxiscategoryminorgridlinestroke_ != NULL) tschchartaxiscategoryminorgridlinestroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartaxiscategoryminorgridlinestroke();
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::tschchartaxiscategoryminorgridlinestroke() const {
  return tschchartaxiscategoryminorgridlinestroke_ != NULL ? *tschchartaxiscategoryminorgridlinestroke_ : *default_instance_->tschchartaxiscategoryminorgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::mutable_tschchartaxiscategoryminorgridlinestroke() {
  set_has_tschchartaxiscategoryminorgridlinestroke();
  if (tschchartaxiscategoryminorgridlinestroke_ == NULL) tschchartaxiscategoryminorgridlinestroke_ = new ::TSD::StrokeArchive;
  return tschchartaxiscategoryminorgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::release_tschchartaxiscategoryminorgridlinestroke() {
  clear_has_tschchartaxiscategoryminorgridlinestroke();
  ::TSD::StrokeArchive* temp = tschchartaxiscategoryminorgridlinestroke_;
  tschchartaxiscategoryminorgridlinestroke_ = NULL;
  return temp;
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxiscategoryminorgridlinestroke(::TSD::StrokeArchive* tschchartaxiscategoryminorgridlinestroke) {
  delete tschchartaxiscategoryminorgridlinestroke_;
  tschchartaxiscategoryminorgridlinestroke_ = tschchartaxiscategoryminorgridlinestroke;
  if (tschchartaxiscategoryminorgridlinestroke) {
    set_has_tschchartaxiscategoryminorgridlinestroke();
  } else {
    clear_has_tschchartaxiscategoryminorgridlinestroke();
  }
}

// optional .TSD.StrokeArchive tschchartaxisvalueminorgridlinestroke = 23;
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueminorgridlinestroke() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxisvalueminorgridlinestroke() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxisvalueminorgridlinestroke() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalueminorgridlinestroke() {
  if (tschchartaxisvalueminorgridlinestroke_ != NULL) tschchartaxisvalueminorgridlinestroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartaxisvalueminorgridlinestroke();
}
inline const ::TSD::StrokeArchive& ChartAxisStyleArchive::tschchartaxisvalueminorgridlinestroke() const {
  return tschchartaxisvalueminorgridlinestroke_ != NULL ? *tschchartaxisvalueminorgridlinestroke_ : *default_instance_->tschchartaxisvalueminorgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::mutable_tschchartaxisvalueminorgridlinestroke() {
  set_has_tschchartaxisvalueminorgridlinestroke();
  if (tschchartaxisvalueminorgridlinestroke_ == NULL) tschchartaxisvalueminorgridlinestroke_ = new ::TSD::StrokeArchive;
  return tschchartaxisvalueminorgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisStyleArchive::release_tschchartaxisvalueminorgridlinestroke() {
  clear_has_tschchartaxisvalueminorgridlinestroke();
  ::TSD::StrokeArchive* temp = tschchartaxisvalueminorgridlinestroke_;
  tschchartaxisvalueminorgridlinestroke_ = NULL;
  return temp;
}
inline void ChartAxisStyleArchive::set_allocated_tschchartaxisvalueminorgridlinestroke(::TSD::StrokeArchive* tschchartaxisvalueminorgridlinestroke) {
  delete tschchartaxisvalueminorgridlinestroke_;
  tschchartaxisvalueminorgridlinestroke_ = tschchartaxisvalueminorgridlinestroke;
  if (tschchartaxisvalueminorgridlinestroke) {
    set_has_tschchartaxisvalueminorgridlinestroke();
  } else {
    clear_has_tschchartaxisvalueminorgridlinestroke();
  }
}

// optional bool tschchartaxiscategoryshowaxis = 24;
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryshowaxis() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxiscategoryshowaxis() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxiscategoryshowaxis() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryshowaxis() {
  tschchartaxiscategoryshowaxis_ = false;
  clear_has_tschchartaxiscategoryshowaxis();
}
inline bool ChartAxisStyleArchive::tschchartaxiscategoryshowaxis() const {
  return tschchartaxiscategoryshowaxis_;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryshowaxis(bool value) {
  set_has_tschchartaxiscategoryshowaxis();
  tschchartaxiscategoryshowaxis_ = value;
}

// optional bool tschchartaxisvalueshowaxis = 25;
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueshowaxis() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxisvalueshowaxis() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxisvalueshowaxis() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalueshowaxis() {
  tschchartaxisvalueshowaxis_ = false;
  clear_has_tschchartaxisvalueshowaxis();
}
inline bool ChartAxisStyleArchive::tschchartaxisvalueshowaxis() const {
  return tschchartaxisvalueshowaxis_;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalueshowaxis(bool value) {
  set_has_tschchartaxisvalueshowaxis();
  tschchartaxisvalueshowaxis_ = value;
}

// optional bool tschchartaxiscategoryshowlastlabel = 26;
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryshowlastlabel() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxiscategoryshowlastlabel() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxiscategoryshowlastlabel() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryshowlastlabel() {
  tschchartaxiscategoryshowlastlabel_ = false;
  clear_has_tschchartaxiscategoryshowlastlabel();
}
inline bool ChartAxisStyleArchive::tschchartaxiscategoryshowlastlabel() const {
  return tschchartaxiscategoryshowlastlabel_;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryshowlastlabel(bool value) {
  set_has_tschchartaxiscategoryshowlastlabel();
  tschchartaxiscategoryshowlastlabel_ = value;
}

// optional bool tschchartaxiscategoryshowmajorgridlines = 27;
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryshowmajorgridlines() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxiscategoryshowmajorgridlines() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxiscategoryshowmajorgridlines() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryshowmajorgridlines() {
  tschchartaxiscategoryshowmajorgridlines_ = false;
  clear_has_tschchartaxiscategoryshowmajorgridlines();
}
inline bool ChartAxisStyleArchive::tschchartaxiscategoryshowmajorgridlines() const {
  return tschchartaxiscategoryshowmajorgridlines_;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryshowmajorgridlines(bool value) {
  set_has_tschchartaxiscategoryshowmajorgridlines();
  tschchartaxiscategoryshowmajorgridlines_ = value;
}

// optional bool tschchartaxisvalueshowmajorgridlines = 28;
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueshowmajorgridlines() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxisvalueshowmajorgridlines() {
  _has_bits_[0] |= 0x08000000u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxisvalueshowmajorgridlines() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalueshowmajorgridlines() {
  tschchartaxisvalueshowmajorgridlines_ = false;
  clear_has_tschchartaxisvalueshowmajorgridlines();
}
inline bool ChartAxisStyleArchive::tschchartaxisvalueshowmajorgridlines() const {
  return tschchartaxisvalueshowmajorgridlines_;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalueshowmajorgridlines(bool value) {
  set_has_tschchartaxisvalueshowmajorgridlines();
  tschchartaxisvalueshowmajorgridlines_ = value;
}

// optional bool tschchartaxiscategoryshowmajortickmarks = 29;
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryshowmajortickmarks() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxiscategoryshowmajortickmarks() {
  _has_bits_[0] |= 0x10000000u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxiscategoryshowmajortickmarks() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryshowmajortickmarks() {
  tschchartaxiscategoryshowmajortickmarks_ = false;
  clear_has_tschchartaxiscategoryshowmajortickmarks();
}
inline bool ChartAxisStyleArchive::tschchartaxiscategoryshowmajortickmarks() const {
  return tschchartaxiscategoryshowmajortickmarks_;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryshowmajortickmarks(bool value) {
  set_has_tschchartaxiscategoryshowmajortickmarks();
  tschchartaxiscategoryshowmajortickmarks_ = value;
}

// optional bool tschchartaxisvalueshowmajortickmarks = 30;
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueshowmajortickmarks() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxisvalueshowmajortickmarks() {
  _has_bits_[0] |= 0x20000000u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxisvalueshowmajortickmarks() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalueshowmajortickmarks() {
  tschchartaxisvalueshowmajortickmarks_ = false;
  clear_has_tschchartaxisvalueshowmajortickmarks();
}
inline bool ChartAxisStyleArchive::tschchartaxisvalueshowmajortickmarks() const {
  return tschchartaxisvalueshowmajortickmarks_;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalueshowmajortickmarks(bool value) {
  set_has_tschchartaxisvalueshowmajortickmarks();
  tschchartaxisvalueshowmajortickmarks_ = value;
}

// optional bool tschchartaxisvalueshowminimumlabel = 31;
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueshowminimumlabel() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxisvalueshowminimumlabel() {
  _has_bits_[0] |= 0x40000000u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxisvalueshowminimumlabel() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalueshowminimumlabel() {
  tschchartaxisvalueshowminimumlabel_ = false;
  clear_has_tschchartaxisvalueshowminimumlabel();
}
inline bool ChartAxisStyleArchive::tschchartaxisvalueshowminimumlabel() const {
  return tschchartaxisvalueshowminimumlabel_;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalueshowminimumlabel(bool value) {
  set_has_tschchartaxisvalueshowminimumlabel();
  tschchartaxisvalueshowminimumlabel_ = value;
}

// optional bool tschchartaxiscategoryshowminorgridlines = 32;
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryshowminorgridlines() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxiscategoryshowminorgridlines() {
  _has_bits_[0] |= 0x80000000u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxiscategoryshowminorgridlines() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryshowminorgridlines() {
  tschchartaxiscategoryshowminorgridlines_ = false;
  clear_has_tschchartaxiscategoryshowminorgridlines();
}
inline bool ChartAxisStyleArchive::tschchartaxiscategoryshowminorgridlines() const {
  return tschchartaxiscategoryshowminorgridlines_;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryshowminorgridlines(bool value) {
  set_has_tschchartaxiscategoryshowminorgridlines();
  tschchartaxiscategoryshowminorgridlines_ = value;
}

// optional bool tschchartaxisvalueshowminorgridlines = 33;
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueshowminorgridlines() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxisvalueshowminorgridlines() {
  _has_bits_[1] |= 0x00000001u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxisvalueshowminorgridlines() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalueshowminorgridlines() {
  tschchartaxisvalueshowminorgridlines_ = false;
  clear_has_tschchartaxisvalueshowminorgridlines();
}
inline bool ChartAxisStyleArchive::tschchartaxisvalueshowminorgridlines() const {
  return tschchartaxisvalueshowminorgridlines_;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalueshowminorgridlines(bool value) {
  set_has_tschchartaxisvalueshowminorgridlines();
  tschchartaxisvalueshowminorgridlines_ = value;
}

// optional bool tschchartaxiscategoryshowminortickmarks = 34;
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryshowminortickmarks() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxiscategoryshowminortickmarks() {
  _has_bits_[1] |= 0x00000002u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxiscategoryshowminortickmarks() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryshowminortickmarks() {
  tschchartaxiscategoryshowminortickmarks_ = false;
  clear_has_tschchartaxiscategoryshowminortickmarks();
}
inline bool ChartAxisStyleArchive::tschchartaxiscategoryshowminortickmarks() const {
  return tschchartaxiscategoryshowminortickmarks_;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryshowminortickmarks(bool value) {
  set_has_tschchartaxiscategoryshowminortickmarks();
  tschchartaxiscategoryshowminortickmarks_ = value;
}

// optional bool tschchartaxisvalueshowminortickmarks = 35;
inline bool ChartAxisStyleArchive::has_tschchartaxisvalueshowminortickmarks() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxisvalueshowminortickmarks() {
  _has_bits_[1] |= 0x00000004u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxisvalueshowminortickmarks() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvalueshowminortickmarks() {
  tschchartaxisvalueshowminortickmarks_ = false;
  clear_has_tschchartaxisvalueshowminortickmarks();
}
inline bool ChartAxisStyleArchive::tschchartaxisvalueshowminortickmarks() const {
  return tschchartaxisvalueshowminortickmarks_;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvalueshowminortickmarks(bool value) {
  set_has_tschchartaxisvalueshowminortickmarks();
  tschchartaxisvalueshowminortickmarks_ = value;
}

// optional int32 tschchartaxiscategorytickmarklocation = 36;
inline bool ChartAxisStyleArchive::has_tschchartaxiscategorytickmarklocation() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxiscategorytickmarklocation() {
  _has_bits_[1] |= 0x00000008u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxiscategorytickmarklocation() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategorytickmarklocation() {
  tschchartaxiscategorytickmarklocation_ = 0;
  clear_has_tschchartaxiscategorytickmarklocation();
}
inline ::google::protobuf::int32 ChartAxisStyleArchive::tschchartaxiscategorytickmarklocation() const {
  return tschchartaxiscategorytickmarklocation_;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategorytickmarklocation(::google::protobuf::int32 value) {
  set_has_tschchartaxiscategorytickmarklocation();
  tschchartaxiscategorytickmarklocation_ = value;
}

// optional int32 tschchartaxisvaluetickmarklocation = 37;
inline bool ChartAxisStyleArchive::has_tschchartaxisvaluetickmarklocation() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxisvaluetickmarklocation() {
  _has_bits_[1] |= 0x00000010u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxisvaluetickmarklocation() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvaluetickmarklocation() {
  tschchartaxisvaluetickmarklocation_ = 0;
  clear_has_tschchartaxisvaluetickmarklocation();
}
inline ::google::protobuf::int32 ChartAxisStyleArchive::tschchartaxisvaluetickmarklocation() const {
  return tschchartaxisvaluetickmarklocation_;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvaluetickmarklocation(::google::protobuf::int32 value) {
  set_has_tschchartaxisvaluetickmarklocation();
  tschchartaxisvaluetickmarklocation_ = value;
}

// optional int32 tschchartaxiscategorytitleparagraphstyleindex = 38;
inline bool ChartAxisStyleArchive::has_tschchartaxiscategorytitleparagraphstyleindex() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxiscategorytitleparagraphstyleindex() {
  _has_bits_[1] |= 0x00000020u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxiscategorytitleparagraphstyleindex() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategorytitleparagraphstyleindex() {
  tschchartaxiscategorytitleparagraphstyleindex_ = 0;
  clear_has_tschchartaxiscategorytitleparagraphstyleindex();
}
inline ::google::protobuf::int32 ChartAxisStyleArchive::tschchartaxiscategorytitleparagraphstyleindex() const {
  return tschchartaxiscategorytitleparagraphstyleindex_;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategorytitleparagraphstyleindex(::google::protobuf::int32 value) {
  set_has_tschchartaxiscategorytitleparagraphstyleindex();
  tschchartaxiscategorytitleparagraphstyleindex_ = value;
}

// optional int32 tschchartaxisdefaulttitleparagraphstyleindex = 39;
inline bool ChartAxisStyleArchive::has_tschchartaxisdefaulttitleparagraphstyleindex() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxisdefaulttitleparagraphstyleindex() {
  _has_bits_[1] |= 0x00000040u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxisdefaulttitleparagraphstyleindex() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxisdefaulttitleparagraphstyleindex() {
  tschchartaxisdefaulttitleparagraphstyleindex_ = 0;
  clear_has_tschchartaxisdefaulttitleparagraphstyleindex();
}
inline ::google::protobuf::int32 ChartAxisStyleArchive::tschchartaxisdefaulttitleparagraphstyleindex() const {
  return tschchartaxisdefaulttitleparagraphstyleindex_;
}
inline void ChartAxisStyleArchive::set_tschchartaxisdefaulttitleparagraphstyleindex(::google::protobuf::int32 value) {
  set_has_tschchartaxisdefaulttitleparagraphstyleindex();
  tschchartaxisdefaulttitleparagraphstyleindex_ = value;
}

// optional int32 tschchartaxisvaluetitleparagraphstyleindex = 40;
inline bool ChartAxisStyleArchive::has_tschchartaxisvaluetitleparagraphstyleindex() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxisvaluetitleparagraphstyleindex() {
  _has_bits_[1] |= 0x00000080u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxisvaluetitleparagraphstyleindex() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxisvaluetitleparagraphstyleindex() {
  tschchartaxisvaluetitleparagraphstyleindex_ = 0;
  clear_has_tschchartaxisvaluetitleparagraphstyleindex();
}
inline ::google::protobuf::int32 ChartAxisStyleArchive::tschchartaxisvaluetitleparagraphstyleindex() const {
  return tschchartaxisvaluetitleparagraphstyleindex_;
}
inline void ChartAxisStyleArchive::set_tschchartaxisvaluetitleparagraphstyleindex(::google::protobuf::int32 value) {
  set_has_tschchartaxisvaluetitleparagraphstyleindex();
  tschchartaxisvaluetitleparagraphstyleindex_ = value;
}

// optional int32 tschchartaxiscategoryverticalspacing = 41;
inline bool ChartAxisStyleArchive::has_tschchartaxiscategoryverticalspacing() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void ChartAxisStyleArchive::set_has_tschchartaxiscategoryverticalspacing() {
  _has_bits_[1] |= 0x00000100u;
}
inline void ChartAxisStyleArchive::clear_has_tschchartaxiscategoryverticalspacing() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void ChartAxisStyleArchive::clear_tschchartaxiscategoryverticalspacing() {
  tschchartaxiscategoryverticalspacing_ = 0;
  clear_has_tschchartaxiscategoryverticalspacing();
}
inline ::google::protobuf::int32 ChartAxisStyleArchive::tschchartaxiscategoryverticalspacing() const {
  return tschchartaxiscategoryverticalspacing_;
}
inline void ChartAxisStyleArchive::set_tschchartaxiscategoryverticalspacing(::google::protobuf::int32 value) {
  set_has_tschchartaxiscategoryverticalspacing();
  tschchartaxiscategoryverticalspacing_ = value;
}

// -------------------------------------------------------------------

// ChartAxisNonStyleArchive

// optional int32 tschchartaxisdefault3dlabelposition = 1;
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefault3dlabelposition() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChartAxisNonStyleArchive::set_has_tschchartaxisdefault3dlabelposition() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChartAxisNonStyleArchive::clear_has_tschchartaxisdefault3dlabelposition() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisdefault3dlabelposition() {
  tschchartaxisdefault3dlabelposition_ = 0;
  clear_has_tschchartaxisdefault3dlabelposition();
}
inline ::google::protobuf::int32 ChartAxisNonStyleArchive::tschchartaxisdefault3dlabelposition() const {
  return tschchartaxisdefault3dlabelposition_;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisdefault3dlabelposition(::google::protobuf::int32 value) {
  set_has_tschchartaxisdefault3dlabelposition();
  tschchartaxisdefault3dlabelposition_ = value;
}

// optional .TSK.FormatStructArchive tschchartaxisdefault1_0numberformat = 2;
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefault1_0numberformat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChartAxisNonStyleArchive::set_has_tschchartaxisdefault1_0numberformat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChartAxisNonStyleArchive::clear_has_tschchartaxisdefault1_0numberformat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisdefault1_0numberformat() {
  if (tschchartaxisdefault1_0numberformat_ != NULL) tschchartaxisdefault1_0numberformat_->::TSK::FormatStructArchive::Clear();
  clear_has_tschchartaxisdefault1_0numberformat();
}
inline const ::TSK::FormatStructArchive& ChartAxisNonStyleArchive::tschchartaxisdefault1_0numberformat() const {
  return tschchartaxisdefault1_0numberformat_ != NULL ? *tschchartaxisdefault1_0numberformat_ : *default_instance_->tschchartaxisdefault1_0numberformat_;
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::mutable_tschchartaxisdefault1_0numberformat() {
  set_has_tschchartaxisdefault1_0numberformat();
  if (tschchartaxisdefault1_0numberformat_ == NULL) tschchartaxisdefault1_0numberformat_ = new ::TSK::FormatStructArchive;
  return tschchartaxisdefault1_0numberformat_;
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::release_tschchartaxisdefault1_0numberformat() {
  clear_has_tschchartaxisdefault1_0numberformat();
  ::TSK::FormatStructArchive* temp = tschchartaxisdefault1_0numberformat_;
  tschchartaxisdefault1_0numberformat_ = NULL;
  return temp;
}
inline void ChartAxisNonStyleArchive::set_allocated_tschchartaxisdefault1_0numberformat(::TSK::FormatStructArchive* tschchartaxisdefault1_0numberformat) {
  delete tschchartaxisdefault1_0numberformat_;
  tschchartaxisdefault1_0numberformat_ = tschchartaxisdefault1_0numberformat;
  if (tschchartaxisdefault1_0numberformat) {
    set_has_tschchartaxisdefault1_0numberformat();
  } else {
    clear_has_tschchartaxisdefault1_0numberformat();
  }
}

// optional .TSK.FormatStructArchive tschchartaxisdefaultnumberformat = 42;
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefaultnumberformat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChartAxisNonStyleArchive::set_has_tschchartaxisdefaultnumberformat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChartAxisNonStyleArchive::clear_has_tschchartaxisdefaultnumberformat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisdefaultnumberformat() {
  if (tschchartaxisdefaultnumberformat_ != NULL) tschchartaxisdefaultnumberformat_->::TSK::FormatStructArchive::Clear();
  clear_has_tschchartaxisdefaultnumberformat();
}
inline const ::TSK::FormatStructArchive& ChartAxisNonStyleArchive::tschchartaxisdefaultnumberformat() const {
  return tschchartaxisdefaultnumberformat_ != NULL ? *tschchartaxisdefaultnumberformat_ : *default_instance_->tschchartaxisdefaultnumberformat_;
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::mutable_tschchartaxisdefaultnumberformat() {
  set_has_tschchartaxisdefaultnumberformat();
  if (tschchartaxisdefaultnumberformat_ == NULL) tschchartaxisdefaultnumberformat_ = new ::TSK::FormatStructArchive;
  return tschchartaxisdefaultnumberformat_;
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::release_tschchartaxisdefaultnumberformat() {
  clear_has_tschchartaxisdefaultnumberformat();
  ::TSK::FormatStructArchive* temp = tschchartaxisdefaultnumberformat_;
  tschchartaxisdefaultnumberformat_ = NULL;
  return temp;
}
inline void ChartAxisNonStyleArchive::set_allocated_tschchartaxisdefaultnumberformat(::TSK::FormatStructArchive* tschchartaxisdefaultnumberformat) {
  delete tschchartaxisdefaultnumberformat_;
  tschchartaxisdefaultnumberformat_ = tschchartaxisdefaultnumberformat;
  if (tschchartaxisdefaultnumberformat) {
    set_has_tschchartaxisdefaultnumberformat();
  } else {
    clear_has_tschchartaxisdefaultnumberformat();
  }
}

// optional .TSK.FormatStructArchive tschchartaxisdefault1_0dateformat = 20;
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefault1_0dateformat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChartAxisNonStyleArchive::set_has_tschchartaxisdefault1_0dateformat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChartAxisNonStyleArchive::clear_has_tschchartaxisdefault1_0dateformat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisdefault1_0dateformat() {
  if (tschchartaxisdefault1_0dateformat_ != NULL) tschchartaxisdefault1_0dateformat_->::TSK::FormatStructArchive::Clear();
  clear_has_tschchartaxisdefault1_0dateformat();
}
inline const ::TSK::FormatStructArchive& ChartAxisNonStyleArchive::tschchartaxisdefault1_0dateformat() const {
  return tschchartaxisdefault1_0dateformat_ != NULL ? *tschchartaxisdefault1_0dateformat_ : *default_instance_->tschchartaxisdefault1_0dateformat_;
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::mutable_tschchartaxisdefault1_0dateformat() {
  set_has_tschchartaxisdefault1_0dateformat();
  if (tschchartaxisdefault1_0dateformat_ == NULL) tschchartaxisdefault1_0dateformat_ = new ::TSK::FormatStructArchive;
  return tschchartaxisdefault1_0dateformat_;
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::release_tschchartaxisdefault1_0dateformat() {
  clear_has_tschchartaxisdefault1_0dateformat();
  ::TSK::FormatStructArchive* temp = tschchartaxisdefault1_0dateformat_;
  tschchartaxisdefault1_0dateformat_ = NULL;
  return temp;
}
inline void ChartAxisNonStyleArchive::set_allocated_tschchartaxisdefault1_0dateformat(::TSK::FormatStructArchive* tschchartaxisdefault1_0dateformat) {
  delete tschchartaxisdefault1_0dateformat_;
  tschchartaxisdefault1_0dateformat_ = tschchartaxisdefault1_0dateformat;
  if (tschchartaxisdefault1_0dateformat) {
    set_has_tschchartaxisdefault1_0dateformat();
  } else {
    clear_has_tschchartaxisdefault1_0dateformat();
  }
}

// optional .TSK.FormatStructArchive tschchartaxisdefaultdurationformat = 21;
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefaultdurationformat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChartAxisNonStyleArchive::set_has_tschchartaxisdefaultdurationformat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChartAxisNonStyleArchive::clear_has_tschchartaxisdefaultdurationformat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisdefaultdurationformat() {
  if (tschchartaxisdefaultdurationformat_ != NULL) tschchartaxisdefaultdurationformat_->::TSK::FormatStructArchive::Clear();
  clear_has_tschchartaxisdefaultdurationformat();
}
inline const ::TSK::FormatStructArchive& ChartAxisNonStyleArchive::tschchartaxisdefaultdurationformat() const {
  return tschchartaxisdefaultdurationformat_ != NULL ? *tschchartaxisdefaultdurationformat_ : *default_instance_->tschchartaxisdefaultdurationformat_;
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::mutable_tschchartaxisdefaultdurationformat() {
  set_has_tschchartaxisdefaultdurationformat();
  if (tschchartaxisdefaultdurationformat_ == NULL) tschchartaxisdefaultdurationformat_ = new ::TSK::FormatStructArchive;
  return tschchartaxisdefaultdurationformat_;
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::release_tschchartaxisdefaultdurationformat() {
  clear_has_tschchartaxisdefaultdurationformat();
  ::TSK::FormatStructArchive* temp = tschchartaxisdefaultdurationformat_;
  tschchartaxisdefaultdurationformat_ = NULL;
  return temp;
}
inline void ChartAxisNonStyleArchive::set_allocated_tschchartaxisdefaultdurationformat(::TSK::FormatStructArchive* tschchartaxisdefaultdurationformat) {
  delete tschchartaxisdefaultdurationformat_;
  tschchartaxisdefaultdurationformat_ = tschchartaxisdefaultdurationformat;
  if (tschchartaxisdefaultdurationformat) {
    set_has_tschchartaxisdefaultdurationformat();
  } else {
    clear_has_tschchartaxisdefaultdurationformat();
  }
}

// optional .TSK.FormatStructArchive tschchartaxisdefaultdateformat = 22;
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefaultdateformat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChartAxisNonStyleArchive::set_has_tschchartaxisdefaultdateformat() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChartAxisNonStyleArchive::clear_has_tschchartaxisdefaultdateformat() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisdefaultdateformat() {
  if (tschchartaxisdefaultdateformat_ != NULL) tschchartaxisdefaultdateformat_->::TSK::FormatStructArchive::Clear();
  clear_has_tschchartaxisdefaultdateformat();
}
inline const ::TSK::FormatStructArchive& ChartAxisNonStyleArchive::tschchartaxisdefaultdateformat() const {
  return tschchartaxisdefaultdateformat_ != NULL ? *tschchartaxisdefaultdateformat_ : *default_instance_->tschchartaxisdefaultdateformat_;
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::mutable_tschchartaxisdefaultdateformat() {
  set_has_tschchartaxisdefaultdateformat();
  if (tschchartaxisdefaultdateformat_ == NULL) tschchartaxisdefaultdateformat_ = new ::TSK::FormatStructArchive;
  return tschchartaxisdefaultdateformat_;
}
inline ::TSK::FormatStructArchive* ChartAxisNonStyleArchive::release_tschchartaxisdefaultdateformat() {
  clear_has_tschchartaxisdefaultdateformat();
  ::TSK::FormatStructArchive* temp = tschchartaxisdefaultdateformat_;
  tschchartaxisdefaultdateformat_ = NULL;
  return temp;
}
inline void ChartAxisNonStyleArchive::set_allocated_tschchartaxisdefaultdateformat(::TSK::FormatStructArchive* tschchartaxisdefaultdateformat) {
  delete tschchartaxisdefaultdateformat_;
  tschchartaxisdefaultdateformat_ = tschchartaxisdefaultdateformat;
  if (tschchartaxisdefaultdateformat) {
    set_has_tschchartaxisdefaultdateformat();
  } else {
    clear_has_tschchartaxisdefaultdateformat();
  }
}

// optional int32 tschchartaxisdefaultnumberformattype = 3;
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefaultnumberformattype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChartAxisNonStyleArchive::set_has_tschchartaxisdefaultnumberformattype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChartAxisNonStyleArchive::clear_has_tschchartaxisdefaultnumberformattype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisdefaultnumberformattype() {
  tschchartaxisdefaultnumberformattype_ = 0;
  clear_has_tschchartaxisdefaultnumberformattype();
}
inline ::google::protobuf::int32 ChartAxisNonStyleArchive::tschchartaxisdefaultnumberformattype() const {
  return tschchartaxisdefaultnumberformattype_;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisdefaultnumberformattype(::google::protobuf::int32 value) {
  set_has_tschchartaxisdefaultnumberformattype();
  tschchartaxisdefaultnumberformattype_ = value;
}

// optional int32 tschchartaxisvaluenumberofdecades = 4;
inline bool ChartAxisNonStyleArchive::has_tschchartaxisvaluenumberofdecades() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChartAxisNonStyleArchive::set_has_tschchartaxisvaluenumberofdecades() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChartAxisNonStyleArchive::clear_has_tschchartaxisvaluenumberofdecades() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisvaluenumberofdecades() {
  tschchartaxisvaluenumberofdecades_ = 0;
  clear_has_tschchartaxisvaluenumberofdecades();
}
inline ::google::protobuf::int32 ChartAxisNonStyleArchive::tschchartaxisvaluenumberofdecades() const {
  return tschchartaxisvaluenumberofdecades_;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisvaluenumberofdecades(::google::protobuf::int32 value) {
  set_has_tschchartaxisvaluenumberofdecades();
  tschchartaxisvaluenumberofdecades_ = value;
}

// optional int32 tschchartaxisvaluenumberofmajorgridlines = 5;
inline bool ChartAxisNonStyleArchive::has_tschchartaxisvaluenumberofmajorgridlines() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChartAxisNonStyleArchive::set_has_tschchartaxisvaluenumberofmajorgridlines() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChartAxisNonStyleArchive::clear_has_tschchartaxisvaluenumberofmajorgridlines() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisvaluenumberofmajorgridlines() {
  tschchartaxisvaluenumberofmajorgridlines_ = 0;
  clear_has_tschchartaxisvaluenumberofmajorgridlines();
}
inline ::google::protobuf::int32 ChartAxisNonStyleArchive::tschchartaxisvaluenumberofmajorgridlines() const {
  return tschchartaxisvaluenumberofmajorgridlines_;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisvaluenumberofmajorgridlines(::google::protobuf::int32 value) {
  set_has_tschchartaxisvaluenumberofmajorgridlines();
  tschchartaxisvaluenumberofmajorgridlines_ = value;
}

// optional int32 tschchartaxisvaluenumberofminorgridlines = 6;
inline bool ChartAxisNonStyleArchive::has_tschchartaxisvaluenumberofminorgridlines() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChartAxisNonStyleArchive::set_has_tschchartaxisvaluenumberofminorgridlines() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ChartAxisNonStyleArchive::clear_has_tschchartaxisvaluenumberofminorgridlines() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisvaluenumberofminorgridlines() {
  tschchartaxisvaluenumberofminorgridlines_ = 0;
  clear_has_tschchartaxisvaluenumberofminorgridlines();
}
inline ::google::protobuf::int32 ChartAxisNonStyleArchive::tschchartaxisvaluenumberofminorgridlines() const {
  return tschchartaxisvaluenumberofminorgridlines_;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisvaluenumberofminorgridlines(::google::protobuf::int32 value) {
  set_has_tschchartaxisvaluenumberofminorgridlines();
  tschchartaxisvaluenumberofminorgridlines_ = value;
}

// optional bool tschchartaxiscategoryplottoedges = 7;
inline bool ChartAxisNonStyleArchive::has_tschchartaxiscategoryplottoedges() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChartAxisNonStyleArchive::set_has_tschchartaxiscategoryplottoedges() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ChartAxisNonStyleArchive::clear_has_tschchartaxiscategoryplottoedges() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxiscategoryplottoedges() {
  tschchartaxiscategoryplottoedges_ = false;
  clear_has_tschchartaxiscategoryplottoedges();
}
inline bool ChartAxisNonStyleArchive::tschchartaxiscategoryplottoedges() const {
  return tschchartaxiscategoryplottoedges_;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxiscategoryplottoedges(bool value) {
  set_has_tschchartaxiscategoryplottoedges();
  tschchartaxiscategoryplottoedges_ = value;
}

// optional int32 tschchartaxisvaluescale = 8;
inline bool ChartAxisNonStyleArchive::has_tschchartaxisvaluescale() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ChartAxisNonStyleArchive::set_has_tschchartaxisvaluescale() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ChartAxisNonStyleArchive::clear_has_tschchartaxisvaluescale() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisvaluescale() {
  tschchartaxisvaluescale_ = 0;
  clear_has_tschchartaxisvaluescale();
}
inline ::google::protobuf::int32 ChartAxisNonStyleArchive::tschchartaxisvaluescale() const {
  return tschchartaxisvaluescale_;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisvaluescale(::google::protobuf::int32 value) {
  set_has_tschchartaxisvaluescale();
  tschchartaxisvaluescale_ = value;
}

// optional bool tschchartaxiscategoryshowlabels = 9;
inline bool ChartAxisNonStyleArchive::has_tschchartaxiscategoryshowlabels() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ChartAxisNonStyleArchive::set_has_tschchartaxiscategoryshowlabels() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ChartAxisNonStyleArchive::clear_has_tschchartaxiscategoryshowlabels() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxiscategoryshowlabels() {
  tschchartaxiscategoryshowlabels_ = false;
  clear_has_tschchartaxiscategoryshowlabels();
}
inline bool ChartAxisNonStyleArchive::tschchartaxiscategoryshowlabels() const {
  return tschchartaxiscategoryshowlabels_;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxiscategoryshowlabels(bool value) {
  set_has_tschchartaxiscategoryshowlabels();
  tschchartaxiscategoryshowlabels_ = value;
}

// optional bool tschchartaxisdefaultshowlabels = 10;
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefaultshowlabels() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ChartAxisNonStyleArchive::set_has_tschchartaxisdefaultshowlabels() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ChartAxisNonStyleArchive::clear_has_tschchartaxisdefaultshowlabels() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisdefaultshowlabels() {
  tschchartaxisdefaultshowlabels_ = false;
  clear_has_tschchartaxisdefaultshowlabels();
}
inline bool ChartAxisNonStyleArchive::tschchartaxisdefaultshowlabels() const {
  return tschchartaxisdefaultshowlabels_;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisdefaultshowlabels(bool value) {
  set_has_tschchartaxisdefaultshowlabels();
  tschchartaxisdefaultshowlabels_ = value;
}

// optional bool tschchartaxisvalueshowlabels = 11;
inline bool ChartAxisNonStyleArchive::has_tschchartaxisvalueshowlabels() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ChartAxisNonStyleArchive::set_has_tschchartaxisvalueshowlabels() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ChartAxisNonStyleArchive::clear_has_tschchartaxisvalueshowlabels() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisvalueshowlabels() {
  tschchartaxisvalueshowlabels_ = false;
  clear_has_tschchartaxisvalueshowlabels();
}
inline bool ChartAxisNonStyleArchive::tschchartaxisvalueshowlabels() const {
  return tschchartaxisvalueshowlabels_;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisvalueshowlabels(bool value) {
  set_has_tschchartaxisvalueshowlabels();
  tschchartaxisvalueshowlabels_ = value;
}

// optional bool tschchartaxiscategoryshowserieslabels = 12;
inline bool ChartAxisNonStyleArchive::has_tschchartaxiscategoryshowserieslabels() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ChartAxisNonStyleArchive::set_has_tschchartaxiscategoryshowserieslabels() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ChartAxisNonStyleArchive::clear_has_tschchartaxiscategoryshowserieslabels() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxiscategoryshowserieslabels() {
  tschchartaxiscategoryshowserieslabels_ = false;
  clear_has_tschchartaxiscategoryshowserieslabels();
}
inline bool ChartAxisNonStyleArchive::tschchartaxiscategoryshowserieslabels() const {
  return tschchartaxiscategoryshowserieslabels_;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxiscategoryshowserieslabels(bool value) {
  set_has_tschchartaxiscategoryshowserieslabels();
  tschchartaxiscategoryshowserieslabels_ = value;
}

// optional bool tschchartaxismultidatashowserieslabels = 19;
inline bool ChartAxisNonStyleArchive::has_tschchartaxismultidatashowserieslabels() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ChartAxisNonStyleArchive::set_has_tschchartaxismultidatashowserieslabels() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ChartAxisNonStyleArchive::clear_has_tschchartaxismultidatashowserieslabels() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxismultidatashowserieslabels() {
  tschchartaxismultidatashowserieslabels_ = false;
  clear_has_tschchartaxismultidatashowserieslabels();
}
inline bool ChartAxisNonStyleArchive::tschchartaxismultidatashowserieslabels() const {
  return tschchartaxismultidatashowserieslabels_;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxismultidatashowserieslabels(bool value) {
  set_has_tschchartaxismultidatashowserieslabels();
  tschchartaxismultidatashowserieslabels_ = value;
}

// optional bool tschchartaxiscategoryshowtitle = 13;
inline bool ChartAxisNonStyleArchive::has_tschchartaxiscategoryshowtitle() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ChartAxisNonStyleArchive::set_has_tschchartaxiscategoryshowtitle() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ChartAxisNonStyleArchive::clear_has_tschchartaxiscategoryshowtitle() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxiscategoryshowtitle() {
  tschchartaxiscategoryshowtitle_ = false;
  clear_has_tschchartaxiscategoryshowtitle();
}
inline bool ChartAxisNonStyleArchive::tschchartaxiscategoryshowtitle() const {
  return tschchartaxiscategoryshowtitle_;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxiscategoryshowtitle(bool value) {
  set_has_tschchartaxiscategoryshowtitle();
  tschchartaxiscategoryshowtitle_ = value;
}

// optional bool tschchartaxisvalueshowtitle = 14;
inline bool ChartAxisNonStyleArchive::has_tschchartaxisvalueshowtitle() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ChartAxisNonStyleArchive::set_has_tschchartaxisvalueshowtitle() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ChartAxisNonStyleArchive::clear_has_tschchartaxisvalueshowtitle() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisvalueshowtitle() {
  tschchartaxisvalueshowtitle_ = false;
  clear_has_tschchartaxisvalueshowtitle();
}
inline bool ChartAxisNonStyleArchive::tschchartaxisvalueshowtitle() const {
  return tschchartaxisvalueshowtitle_;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisvalueshowtitle(bool value) {
  set_has_tschchartaxisvalueshowtitle();
  tschchartaxisvalueshowtitle_ = value;
}

// optional string tschchartaxiscategorytitle = 15;
inline bool ChartAxisNonStyleArchive::has_tschchartaxiscategorytitle() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ChartAxisNonStyleArchive::set_has_tschchartaxiscategorytitle() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ChartAxisNonStyleArchive::clear_has_tschchartaxiscategorytitle() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxiscategorytitle() {
  if (tschchartaxiscategorytitle_ != &::google::protobuf::internal::kEmptyString) {
    tschchartaxiscategorytitle_->clear();
  }
  clear_has_tschchartaxiscategorytitle();
}
inline const ::std::string& ChartAxisNonStyleArchive::tschchartaxiscategorytitle() const {
  return *tschchartaxiscategorytitle_;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxiscategorytitle(const ::std::string& value) {
  set_has_tschchartaxiscategorytitle();
  if (tschchartaxiscategorytitle_ == &::google::protobuf::internal::kEmptyString) {
    tschchartaxiscategorytitle_ = new ::std::string;
  }
  tschchartaxiscategorytitle_->assign(value);
}
inline void ChartAxisNonStyleArchive::set_tschchartaxiscategorytitle(const char* value) {
  set_has_tschchartaxiscategorytitle();
  if (tschchartaxiscategorytitle_ == &::google::protobuf::internal::kEmptyString) {
    tschchartaxiscategorytitle_ = new ::std::string;
  }
  tschchartaxiscategorytitle_->assign(value);
}
inline void ChartAxisNonStyleArchive::set_tschchartaxiscategorytitle(const char* value, size_t size) {
  set_has_tschchartaxiscategorytitle();
  if (tschchartaxiscategorytitle_ == &::google::protobuf::internal::kEmptyString) {
    tschchartaxiscategorytitle_ = new ::std::string;
  }
  tschchartaxiscategorytitle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChartAxisNonStyleArchive::mutable_tschchartaxiscategorytitle() {
  set_has_tschchartaxiscategorytitle();
  if (tschchartaxiscategorytitle_ == &::google::protobuf::internal::kEmptyString) {
    tschchartaxiscategorytitle_ = new ::std::string;
  }
  return tschchartaxiscategorytitle_;
}
inline ::std::string* ChartAxisNonStyleArchive::release_tschchartaxiscategorytitle() {
  clear_has_tschchartaxiscategorytitle();
  if (tschchartaxiscategorytitle_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tschchartaxiscategorytitle_;
    tschchartaxiscategorytitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChartAxisNonStyleArchive::set_allocated_tschchartaxiscategorytitle(::std::string* tschchartaxiscategorytitle) {
  if (tschchartaxiscategorytitle_ != &::google::protobuf::internal::kEmptyString) {
    delete tschchartaxiscategorytitle_;
  }
  if (tschchartaxiscategorytitle) {
    set_has_tschchartaxiscategorytitle();
    tschchartaxiscategorytitle_ = tschchartaxiscategorytitle;
  } else {
    clear_has_tschchartaxiscategorytitle();
    tschchartaxiscategorytitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string tschchartaxisvaluetitle = 16;
inline bool ChartAxisNonStyleArchive::has_tschchartaxisvaluetitle() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ChartAxisNonStyleArchive::set_has_tschchartaxisvaluetitle() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ChartAxisNonStyleArchive::clear_has_tschchartaxisvaluetitle() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisvaluetitle() {
  if (tschchartaxisvaluetitle_ != &::google::protobuf::internal::kEmptyString) {
    tschchartaxisvaluetitle_->clear();
  }
  clear_has_tschchartaxisvaluetitle();
}
inline const ::std::string& ChartAxisNonStyleArchive::tschchartaxisvaluetitle() const {
  return *tschchartaxisvaluetitle_;
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisvaluetitle(const ::std::string& value) {
  set_has_tschchartaxisvaluetitle();
  if (tschchartaxisvaluetitle_ == &::google::protobuf::internal::kEmptyString) {
    tschchartaxisvaluetitle_ = new ::std::string;
  }
  tschchartaxisvaluetitle_->assign(value);
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisvaluetitle(const char* value) {
  set_has_tschchartaxisvaluetitle();
  if (tschchartaxisvaluetitle_ == &::google::protobuf::internal::kEmptyString) {
    tschchartaxisvaluetitle_ = new ::std::string;
  }
  tschchartaxisvaluetitle_->assign(value);
}
inline void ChartAxisNonStyleArchive::set_tschchartaxisvaluetitle(const char* value, size_t size) {
  set_has_tschchartaxisvaluetitle();
  if (tschchartaxisvaluetitle_ == &::google::protobuf::internal::kEmptyString) {
    tschchartaxisvaluetitle_ = new ::std::string;
  }
  tschchartaxisvaluetitle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChartAxisNonStyleArchive::mutable_tschchartaxisvaluetitle() {
  set_has_tschchartaxisvaluetitle();
  if (tschchartaxisvaluetitle_ == &::google::protobuf::internal::kEmptyString) {
    tschchartaxisvaluetitle_ = new ::std::string;
  }
  return tschchartaxisvaluetitle_;
}
inline ::std::string* ChartAxisNonStyleArchive::release_tschchartaxisvaluetitle() {
  clear_has_tschchartaxisvaluetitle();
  if (tschchartaxisvaluetitle_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tschchartaxisvaluetitle_;
    tschchartaxisvaluetitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChartAxisNonStyleArchive::set_allocated_tschchartaxisvaluetitle(::std::string* tschchartaxisvaluetitle) {
  if (tschchartaxisvaluetitle_ != &::google::protobuf::internal::kEmptyString) {
    delete tschchartaxisvaluetitle_;
  }
  if (tschchartaxisvaluetitle) {
    set_has_tschchartaxisvaluetitle();
    tschchartaxisvaluetitle_ = tschchartaxisvaluetitle;
  } else {
    clear_has_tschchartaxisvaluetitle();
    tschchartaxisvaluetitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermax = 17;
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefaultusermax() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ChartAxisNonStyleArchive::set_has_tschchartaxisdefaultusermax() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ChartAxisNonStyleArchive::clear_has_tschchartaxisdefaultusermax() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisdefaultusermax() {
  if (tschchartaxisdefaultusermax_ != NULL) tschchartaxisdefaultusermax_->::TSCH::ChartsNSNumberDoubleArchive::Clear();
  clear_has_tschchartaxisdefaultusermax();
}
inline const ::TSCH::ChartsNSNumberDoubleArchive& ChartAxisNonStyleArchive::tschchartaxisdefaultusermax() const {
  return tschchartaxisdefaultusermax_ != NULL ? *tschchartaxisdefaultusermax_ : *default_instance_->tschchartaxisdefaultusermax_;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisNonStyleArchive::mutable_tschchartaxisdefaultusermax() {
  set_has_tschchartaxisdefaultusermax();
  if (tschchartaxisdefaultusermax_ == NULL) tschchartaxisdefaultusermax_ = new ::TSCH::ChartsNSNumberDoubleArchive;
  return tschchartaxisdefaultusermax_;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisNonStyleArchive::release_tschchartaxisdefaultusermax() {
  clear_has_tschchartaxisdefaultusermax();
  ::TSCH::ChartsNSNumberDoubleArchive* temp = tschchartaxisdefaultusermax_;
  tschchartaxisdefaultusermax_ = NULL;
  return temp;
}
inline void ChartAxisNonStyleArchive::set_allocated_tschchartaxisdefaultusermax(::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermax) {
  delete tschchartaxisdefaultusermax_;
  tschchartaxisdefaultusermax_ = tschchartaxisdefaultusermax;
  if (tschchartaxisdefaultusermax) {
    set_has_tschchartaxisdefaultusermax();
  } else {
    clear_has_tschchartaxisdefaultusermax();
  }
}

// optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermin = 18;
inline bool ChartAxisNonStyleArchive::has_tschchartaxisdefaultusermin() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ChartAxisNonStyleArchive::set_has_tschchartaxisdefaultusermin() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ChartAxisNonStyleArchive::clear_has_tschchartaxisdefaultusermin() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ChartAxisNonStyleArchive::clear_tschchartaxisdefaultusermin() {
  if (tschchartaxisdefaultusermin_ != NULL) tschchartaxisdefaultusermin_->::TSCH::ChartsNSNumberDoubleArchive::Clear();
  clear_has_tschchartaxisdefaultusermin();
}
inline const ::TSCH::ChartsNSNumberDoubleArchive& ChartAxisNonStyleArchive::tschchartaxisdefaultusermin() const {
  return tschchartaxisdefaultusermin_ != NULL ? *tschchartaxisdefaultusermin_ : *default_instance_->tschchartaxisdefaultusermin_;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisNonStyleArchive::mutable_tschchartaxisdefaultusermin() {
  set_has_tschchartaxisdefaultusermin();
  if (tschchartaxisdefaultusermin_ == NULL) tschchartaxisdefaultusermin_ = new ::TSCH::ChartsNSNumberDoubleArchive;
  return tschchartaxisdefaultusermin_;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisNonStyleArchive::release_tschchartaxisdefaultusermin() {
  clear_has_tschchartaxisdefaultusermin();
  ::TSCH::ChartsNSNumberDoubleArchive* temp = tschchartaxisdefaultusermin_;
  tschchartaxisdefaultusermin_ = NULL;
  return temp;
}
inline void ChartAxisNonStyleArchive::set_allocated_tschchartaxisdefaultusermin(::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisdefaultusermin) {
  delete tschchartaxisdefaultusermin_;
  tschchartaxisdefaultusermin_ = tschchartaxisdefaultusermin;
  if (tschchartaxisdefaultusermin) {
    set_has_tschchartaxisdefaultusermin();
  } else {
    clear_has_tschchartaxisdefaultusermin();
  }
}

// -------------------------------------------------------------------

// ChartSeriesStyleArchive

// optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineend = 1;
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulterrorbarlineend() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesdefaulterrorbarlineend() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesdefaulterrorbarlineend() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarlineend() {
  if (tschchartseriesdefaulterrorbarlineend_ != NULL) tschchartseriesdefaulterrorbarlineend_->::TSD::LineEndArchive::Clear();
  clear_has_tschchartseriesdefaulterrorbarlineend();
}
inline const ::TSD::LineEndArchive& ChartSeriesStyleArchive::tschchartseriesdefaulterrorbarlineend() const {
  return tschchartseriesdefaulterrorbarlineend_ != NULL ? *tschchartseriesdefaulterrorbarlineend_ : *default_instance_->tschchartseriesdefaulterrorbarlineend_;
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaulterrorbarlineend() {
  set_has_tschchartseriesdefaulterrorbarlineend();
  if (tschchartseriesdefaulterrorbarlineend_ == NULL) tschchartseriesdefaulterrorbarlineend_ = new ::TSD::LineEndArchive;
  return tschchartseriesdefaulterrorbarlineend_;
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaulterrorbarlineend() {
  clear_has_tschchartseriesdefaulterrorbarlineend();
  ::TSD::LineEndArchive* temp = tschchartseriesdefaulterrorbarlineend_;
  tschchartseriesdefaulterrorbarlineend_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaulterrorbarlineend(::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineend) {
  delete tschchartseriesdefaulterrorbarlineend_;
  tschchartseriesdefaulterrorbarlineend_ = tschchartseriesdefaulterrorbarlineend;
  if (tschchartseriesdefaulterrorbarlineend) {
    set_has_tschchartseriesdefaulterrorbarlineend();
  } else {
    clear_has_tschchartseriesdefaulterrorbarlineend();
  }
}

// optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineendscatterx = 2;
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulterrorbarlineendscatterx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesdefaulterrorbarlineendscatterx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesdefaulterrorbarlineendscatterx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarlineendscatterx() {
  if (tschchartseriesdefaulterrorbarlineendscatterx_ != NULL) tschchartseriesdefaulterrorbarlineendscatterx_->::TSD::LineEndArchive::Clear();
  clear_has_tschchartseriesdefaulterrorbarlineendscatterx();
}
inline const ::TSD::LineEndArchive& ChartSeriesStyleArchive::tschchartseriesdefaulterrorbarlineendscatterx() const {
  return tschchartseriesdefaulterrorbarlineendscatterx_ != NULL ? *tschchartseriesdefaulterrorbarlineendscatterx_ : *default_instance_->tschchartseriesdefaulterrorbarlineendscatterx_;
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaulterrorbarlineendscatterx() {
  set_has_tschchartseriesdefaulterrorbarlineendscatterx();
  if (tschchartseriesdefaulterrorbarlineendscatterx_ == NULL) tschchartseriesdefaulterrorbarlineendscatterx_ = new ::TSD::LineEndArchive;
  return tschchartseriesdefaulterrorbarlineendscatterx_;
}
inline ::TSD::LineEndArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaulterrorbarlineendscatterx() {
  clear_has_tschchartseriesdefaulterrorbarlineendscatterx();
  ::TSD::LineEndArchive* temp = tschchartseriesdefaulterrorbarlineendscatterx_;
  tschchartseriesdefaulterrorbarlineendscatterx_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaulterrorbarlineendscatterx(::TSD::LineEndArchive* tschchartseriesdefaulterrorbarlineendscatterx) {
  delete tschchartseriesdefaulterrorbarlineendscatterx_;
  tschchartseriesdefaulterrorbarlineendscatterx_ = tschchartseriesdefaulterrorbarlineendscatterx;
  if (tschchartseriesdefaulterrorbarlineendscatterx) {
    set_has_tschchartseriesdefaulterrorbarlineendscatterx();
  } else {
    clear_has_tschchartseriesdefaulterrorbarlineendscatterx();
  }
}

// optional .TSD.ShadowArchive tschchartseriesdefaulterrorbarshadow = 3;
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulterrorbarshadow() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesdefaulterrorbarshadow() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesdefaulterrorbarshadow() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarshadow() {
  if (tschchartseriesdefaulterrorbarshadow_ != NULL) tschchartseriesdefaulterrorbarshadow_->::TSD::ShadowArchive::Clear();
  clear_has_tschchartseriesdefaulterrorbarshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesdefaulterrorbarshadow() const {
  return tschchartseriesdefaulterrorbarshadow_ != NULL ? *tschchartseriesdefaulterrorbarshadow_ : *default_instance_->tschchartseriesdefaulterrorbarshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaulterrorbarshadow() {
  set_has_tschchartseriesdefaulterrorbarshadow();
  if (tschchartseriesdefaulterrorbarshadow_ == NULL) tschchartseriesdefaulterrorbarshadow_ = new ::TSD::ShadowArchive;
  return tschchartseriesdefaulterrorbarshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaulterrorbarshadow() {
  clear_has_tschchartseriesdefaulterrorbarshadow();
  ::TSD::ShadowArchive* temp = tschchartseriesdefaulterrorbarshadow_;
  tschchartseriesdefaulterrorbarshadow_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaulterrorbarshadow(::TSD::ShadowArchive* tschchartseriesdefaulterrorbarshadow) {
  delete tschchartseriesdefaulterrorbarshadow_;
  tschchartseriesdefaulterrorbarshadow_ = tschchartseriesdefaulterrorbarshadow;
  if (tschchartseriesdefaulterrorbarshadow) {
    set_has_tschchartseriesdefaulterrorbarshadow();
  } else {
    clear_has_tschchartseriesdefaulterrorbarshadow();
  }
}

// optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstroke = 4;
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulterrorbarstroke() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesdefaulterrorbarstroke() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesdefaulterrorbarstroke() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarstroke() {
  if (tschchartseriesdefaulterrorbarstroke_ != NULL) tschchartseriesdefaulterrorbarstroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartseriesdefaulterrorbarstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesdefaulterrorbarstroke() const {
  return tschchartseriesdefaulterrorbarstroke_ != NULL ? *tschchartseriesdefaulterrorbarstroke_ : *default_instance_->tschchartseriesdefaulterrorbarstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaulterrorbarstroke() {
  set_has_tschchartseriesdefaulterrorbarstroke();
  if (tschchartseriesdefaulterrorbarstroke_ == NULL) tschchartseriesdefaulterrorbarstroke_ = new ::TSD::StrokeArchive;
  return tschchartseriesdefaulterrorbarstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaulterrorbarstroke() {
  clear_has_tschchartseriesdefaulterrorbarstroke();
  ::TSD::StrokeArchive* temp = tschchartseriesdefaulterrorbarstroke_;
  tschchartseriesdefaulterrorbarstroke_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaulterrorbarstroke(::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstroke) {
  delete tschchartseriesdefaulterrorbarstroke_;
  tschchartseriesdefaulterrorbarstroke_ = tschchartseriesdefaulterrorbarstroke;
  if (tschchartseriesdefaulterrorbarstroke) {
    set_has_tschchartseriesdefaulterrorbarstroke();
  } else {
    clear_has_tschchartseriesdefaulterrorbarstroke();
  }
}

// optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstrokescatterx = 5;
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulterrorbarstrokescatterx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesdefaulterrorbarstrokescatterx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesdefaulterrorbarstrokescatterx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarstrokescatterx() {
  if (tschchartseriesdefaulterrorbarstrokescatterx_ != NULL) tschchartseriesdefaulterrorbarstrokescatterx_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartseriesdefaulterrorbarstrokescatterx();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesdefaulterrorbarstrokescatterx() const {
  return tschchartseriesdefaulterrorbarstrokescatterx_ != NULL ? *tschchartseriesdefaulterrorbarstrokescatterx_ : *default_instance_->tschchartseriesdefaulterrorbarstrokescatterx_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaulterrorbarstrokescatterx() {
  set_has_tschchartseriesdefaulterrorbarstrokescatterx();
  if (tschchartseriesdefaulterrorbarstrokescatterx_ == NULL) tschchartseriesdefaulterrorbarstrokescatterx_ = new ::TSD::StrokeArchive;
  return tschchartseriesdefaulterrorbarstrokescatterx_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaulterrorbarstrokescatterx() {
  clear_has_tschchartseriesdefaulterrorbarstrokescatterx();
  ::TSD::StrokeArchive* temp = tschchartseriesdefaulterrorbarstrokescatterx_;
  tschchartseriesdefaulterrorbarstrokescatterx_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaulterrorbarstrokescatterx(::TSD::StrokeArchive* tschchartseriesdefaulterrorbarstrokescatterx) {
  delete tschchartseriesdefaulterrorbarstrokescatterx_;
  tschchartseriesdefaulterrorbarstrokescatterx_ = tschchartseriesdefaulterrorbarstrokescatterx;
  if (tschchartseriesdefaulterrorbarstrokescatterx) {
    set_has_tschchartseriesdefaulterrorbarstrokescatterx();
  } else {
    clear_has_tschchartseriesdefaulterrorbarstrokescatterx();
  }
}

// optional .TSD.FillArchive tschchartseries3dareafill = 6;
inline bool ChartSeriesStyleArchive::has_tschchartseries3dareafill() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseries3dareafill() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseries3dareafill() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseries3dareafill() {
  if (tschchartseries3dareafill_ != NULL) tschchartseries3dareafill_->::TSD::FillArchive::Clear();
  clear_has_tschchartseries3dareafill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseries3dareafill() const {
  return tschchartseries3dareafill_ != NULL ? *tschchartseries3dareafill_ : *default_instance_->tschchartseries3dareafill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dareafill() {
  set_has_tschchartseries3dareafill();
  if (tschchartseries3dareafill_ == NULL) tschchartseries3dareafill_ = new ::TSD::FillArchive;
  return tschchartseries3dareafill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseries3dareafill() {
  clear_has_tschchartseries3dareafill();
  ::TSD::FillArchive* temp = tschchartseries3dareafill_;
  tschchartseries3dareafill_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dareafill(::TSD::FillArchive* tschchartseries3dareafill) {
  delete tschchartseries3dareafill_;
  tschchartseries3dareafill_ = tschchartseries3dareafill;
  if (tschchartseries3dareafill) {
    set_has_tschchartseries3dareafill();
  } else {
    clear_has_tschchartseries3dareafill();
  }
}

// optional .TSD.FillArchive tschchartseries3dbarfill = 7;
inline bool ChartSeriesStyleArchive::has_tschchartseries3dbarfill() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseries3dbarfill() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseries3dbarfill() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseries3dbarfill() {
  if (tschchartseries3dbarfill_ != NULL) tschchartseries3dbarfill_->::TSD::FillArchive::Clear();
  clear_has_tschchartseries3dbarfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseries3dbarfill() const {
  return tschchartseries3dbarfill_ != NULL ? *tschchartseries3dbarfill_ : *default_instance_->tschchartseries3dbarfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dbarfill() {
  set_has_tschchartseries3dbarfill();
  if (tschchartseries3dbarfill_ == NULL) tschchartseries3dbarfill_ = new ::TSD::FillArchive;
  return tschchartseries3dbarfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseries3dbarfill() {
  clear_has_tschchartseries3dbarfill();
  ::TSD::FillArchive* temp = tschchartseries3dbarfill_;
  tschchartseries3dbarfill_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dbarfill(::TSD::FillArchive* tschchartseries3dbarfill) {
  delete tschchartseries3dbarfill_;
  tschchartseries3dbarfill_ = tschchartseries3dbarfill;
  if (tschchartseries3dbarfill) {
    set_has_tschchartseries3dbarfill();
  } else {
    clear_has_tschchartseries3dbarfill();
  }
}

// optional .TSD.FillArchive tschchartseries3dcolumnfill = 8;
inline bool ChartSeriesStyleArchive::has_tschchartseries3dcolumnfill() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseries3dcolumnfill() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseries3dcolumnfill() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseries3dcolumnfill() {
  if (tschchartseries3dcolumnfill_ != NULL) tschchartseries3dcolumnfill_->::TSD::FillArchive::Clear();
  clear_has_tschchartseries3dcolumnfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseries3dcolumnfill() const {
  return tschchartseries3dcolumnfill_ != NULL ? *tschchartseries3dcolumnfill_ : *default_instance_->tschchartseries3dcolumnfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dcolumnfill() {
  set_has_tschchartseries3dcolumnfill();
  if (tschchartseries3dcolumnfill_ == NULL) tschchartseries3dcolumnfill_ = new ::TSD::FillArchive;
  return tschchartseries3dcolumnfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseries3dcolumnfill() {
  clear_has_tschchartseries3dcolumnfill();
  ::TSD::FillArchive* temp = tschchartseries3dcolumnfill_;
  tschchartseries3dcolumnfill_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dcolumnfill(::TSD::FillArchive* tschchartseries3dcolumnfill) {
  delete tschchartseries3dcolumnfill_;
  tschchartseries3dcolumnfill_ = tschchartseries3dcolumnfill;
  if (tschchartseries3dcolumnfill) {
    set_has_tschchartseries3dcolumnfill();
  } else {
    clear_has_tschchartseries3dcolumnfill();
  }
}

// optional .TSD.FillArchive tschchartseries3dlinefill = 9;
inline bool ChartSeriesStyleArchive::has_tschchartseries3dlinefill() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseries3dlinefill() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseries3dlinefill() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseries3dlinefill() {
  if (tschchartseries3dlinefill_ != NULL) tschchartseries3dlinefill_->::TSD::FillArchive::Clear();
  clear_has_tschchartseries3dlinefill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseries3dlinefill() const {
  return tschchartseries3dlinefill_ != NULL ? *tschchartseries3dlinefill_ : *default_instance_->tschchartseries3dlinefill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dlinefill() {
  set_has_tschchartseries3dlinefill();
  if (tschchartseries3dlinefill_ == NULL) tschchartseries3dlinefill_ = new ::TSD::FillArchive;
  return tschchartseries3dlinefill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseries3dlinefill() {
  clear_has_tschchartseries3dlinefill();
  ::TSD::FillArchive* temp = tschchartseries3dlinefill_;
  tschchartseries3dlinefill_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dlinefill(::TSD::FillArchive* tschchartseries3dlinefill) {
  delete tschchartseries3dlinefill_;
  tschchartseries3dlinefill_ = tschchartseries3dlinefill;
  if (tschchartseries3dlinefill) {
    set_has_tschchartseries3dlinefill();
  } else {
    clear_has_tschchartseries3dlinefill();
  }
}

// optional .TSD.FillArchive tschchartseries3dpiefill = 10;
inline bool ChartSeriesStyleArchive::has_tschchartseries3dpiefill() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseries3dpiefill() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseries3dpiefill() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseries3dpiefill() {
  if (tschchartseries3dpiefill_ != NULL) tschchartseries3dpiefill_->::TSD::FillArchive::Clear();
  clear_has_tschchartseries3dpiefill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseries3dpiefill() const {
  return tschchartseries3dpiefill_ != NULL ? *tschchartseries3dpiefill_ : *default_instance_->tschchartseries3dpiefill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dpiefill() {
  set_has_tschchartseries3dpiefill();
  if (tschchartseries3dpiefill_ == NULL) tschchartseries3dpiefill_ = new ::TSD::FillArchive;
  return tschchartseries3dpiefill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseries3dpiefill() {
  clear_has_tschchartseries3dpiefill();
  ::TSD::FillArchive* temp = tschchartseries3dpiefill_;
  tschchartseries3dpiefill_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dpiefill(::TSD::FillArchive* tschchartseries3dpiefill) {
  delete tschchartseries3dpiefill_;
  tschchartseries3dpiefill_ = tschchartseries3dpiefill;
  if (tschchartseries3dpiefill) {
    set_has_tschchartseries3dpiefill();
  } else {
    clear_has_tschchartseries3dpiefill();
  }
}

// optional .TSD.FillArchive tschchartseriesareafill = 11;
inline bool ChartSeriesStyleArchive::has_tschchartseriesareafill() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesareafill() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesareafill() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesareafill() {
  if (tschchartseriesareafill_ != NULL) tschchartseriesareafill_->::TSD::FillArchive::Clear();
  clear_has_tschchartseriesareafill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesareafill() const {
  return tschchartseriesareafill_ != NULL ? *tschchartseriesareafill_ : *default_instance_->tschchartseriesareafill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesareafill() {
  set_has_tschchartseriesareafill();
  if (tschchartseriesareafill_ == NULL) tschchartseriesareafill_ = new ::TSD::FillArchive;
  return tschchartseriesareafill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesareafill() {
  clear_has_tschchartseriesareafill();
  ::TSD::FillArchive* temp = tschchartseriesareafill_;
  tschchartseriesareafill_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesareafill(::TSD::FillArchive* tschchartseriesareafill) {
  delete tschchartseriesareafill_;
  tschchartseriesareafill_ = tschchartseriesareafill;
  if (tschchartseriesareafill) {
    set_has_tschchartseriesareafill();
  } else {
    clear_has_tschchartseriesareafill();
  }
}

// optional .TSD.FillArchive tschchartseriesbarfill = 12;
inline bool ChartSeriesStyleArchive::has_tschchartseriesbarfill() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesbarfill() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesbarfill() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesbarfill() {
  if (tschchartseriesbarfill_ != NULL) tschchartseriesbarfill_->::TSD::FillArchive::Clear();
  clear_has_tschchartseriesbarfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesbarfill() const {
  return tschchartseriesbarfill_ != NULL ? *tschchartseriesbarfill_ : *default_instance_->tschchartseriesbarfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesbarfill() {
  set_has_tschchartseriesbarfill();
  if (tschchartseriesbarfill_ == NULL) tschchartseriesbarfill_ = new ::TSD::FillArchive;
  return tschchartseriesbarfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesbarfill() {
  clear_has_tschchartseriesbarfill();
  ::TSD::FillArchive* temp = tschchartseriesbarfill_;
  tschchartseriesbarfill_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesbarfill(::TSD::FillArchive* tschchartseriesbarfill) {
  delete tschchartseriesbarfill_;
  tschchartseriesbarfill_ = tschchartseriesbarfill;
  if (tschchartseriesbarfill) {
    set_has_tschchartseriesbarfill();
  } else {
    clear_has_tschchartseriesbarfill();
  }
}

// optional .TSD.FillArchive tschchartseriescolumnfill = 13;
inline bool ChartSeriesStyleArchive::has_tschchartseriescolumnfill() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriescolumnfill() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriescolumnfill() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriescolumnfill() {
  if (tschchartseriescolumnfill_ != NULL) tschchartseriescolumnfill_->::TSD::FillArchive::Clear();
  clear_has_tschchartseriescolumnfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriescolumnfill() const {
  return tschchartseriescolumnfill_ != NULL ? *tschchartseriescolumnfill_ : *default_instance_->tschchartseriescolumnfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriescolumnfill() {
  set_has_tschchartseriescolumnfill();
  if (tschchartseriescolumnfill_ == NULL) tschchartseriescolumnfill_ = new ::TSD::FillArchive;
  return tschchartseriescolumnfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriescolumnfill() {
  clear_has_tschchartseriescolumnfill();
  ::TSD::FillArchive* temp = tschchartseriescolumnfill_;
  tschchartseriescolumnfill_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriescolumnfill(::TSD::FillArchive* tschchartseriescolumnfill) {
  delete tschchartseriescolumnfill_;
  tschchartseriescolumnfill_ = tschchartseriescolumnfill;
  if (tschchartseriescolumnfill) {
    set_has_tschchartseriescolumnfill();
  } else {
    clear_has_tschchartseriescolumnfill();
  }
}

// optional .TSD.FillArchive tschchartseriesdefaultfill = 14;
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaultfill() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesdefaultfill() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesdefaultfill() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaultfill() {
  if (tschchartseriesdefaultfill_ != NULL) tschchartseriesdefaultfill_->::TSD::FillArchive::Clear();
  clear_has_tschchartseriesdefaultfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesdefaultfill() const {
  return tschchartseriesdefaultfill_ != NULL ? *tschchartseriesdefaultfill_ : *default_instance_->tschchartseriesdefaultfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaultfill() {
  set_has_tschchartseriesdefaultfill();
  if (tschchartseriesdefaultfill_ == NULL) tschchartseriesdefaultfill_ = new ::TSD::FillArchive;
  return tschchartseriesdefaultfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaultfill() {
  clear_has_tschchartseriesdefaultfill();
  ::TSD::FillArchive* temp = tschchartseriesdefaultfill_;
  tschchartseriesdefaultfill_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaultfill(::TSD::FillArchive* tschchartseriesdefaultfill) {
  delete tschchartseriesdefaultfill_;
  tschchartseriesdefaultfill_ = tschchartseriesdefaultfill;
  if (tschchartseriesdefaultfill) {
    set_has_tschchartseriesdefaultfill();
  } else {
    clear_has_tschchartseriesdefaultfill();
  }
}

// optional .TSD.FillArchive tschchartseriesmixedareafill = 15;
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareafill() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesmixedareafill() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesmixedareafill() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedareafill() {
  if (tschchartseriesmixedareafill_ != NULL) tschchartseriesmixedareafill_->::TSD::FillArchive::Clear();
  clear_has_tschchartseriesmixedareafill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesmixedareafill() const {
  return tschchartseriesmixedareafill_ != NULL ? *tschchartseriesmixedareafill_ : *default_instance_->tschchartseriesmixedareafill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedareafill() {
  set_has_tschchartseriesmixedareafill();
  if (tschchartseriesmixedareafill_ == NULL) tschchartseriesmixedareafill_ = new ::TSD::FillArchive;
  return tschchartseriesmixedareafill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedareafill() {
  clear_has_tschchartseriesmixedareafill();
  ::TSD::FillArchive* temp = tschchartseriesmixedareafill_;
  tschchartseriesmixedareafill_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedareafill(::TSD::FillArchive* tschchartseriesmixedareafill) {
  delete tschchartseriesmixedareafill_;
  tschchartseriesmixedareafill_ = tschchartseriesmixedareafill;
  if (tschchartseriesmixedareafill) {
    set_has_tschchartseriesmixedareafill();
  } else {
    clear_has_tschchartseriesmixedareafill();
  }
}

// optional .TSD.FillArchive tschchartseriesmixedcolumnfill = 16;
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedcolumnfill() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesmixedcolumnfill() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesmixedcolumnfill() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedcolumnfill() {
  if (tschchartseriesmixedcolumnfill_ != NULL) tschchartseriesmixedcolumnfill_->::TSD::FillArchive::Clear();
  clear_has_tschchartseriesmixedcolumnfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesmixedcolumnfill() const {
  return tschchartseriesmixedcolumnfill_ != NULL ? *tschchartseriesmixedcolumnfill_ : *default_instance_->tschchartseriesmixedcolumnfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedcolumnfill() {
  set_has_tschchartseriesmixedcolumnfill();
  if (tschchartseriesmixedcolumnfill_ == NULL) tschchartseriesmixedcolumnfill_ = new ::TSD::FillArchive;
  return tschchartseriesmixedcolumnfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedcolumnfill() {
  clear_has_tschchartseriesmixedcolumnfill();
  ::TSD::FillArchive* temp = tschchartseriesmixedcolumnfill_;
  tschchartseriesmixedcolumnfill_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedcolumnfill(::TSD::FillArchive* tschchartseriesmixedcolumnfill) {
  delete tschchartseriesmixedcolumnfill_;
  tschchartseriesmixedcolumnfill_ = tschchartseriesmixedcolumnfill;
  if (tschchartseriesmixedcolumnfill) {
    set_has_tschchartseriesmixedcolumnfill();
  } else {
    clear_has_tschchartseriesmixedcolumnfill();
  }
}

// optional .TSD.FillArchive tschchartseriespiefill = 17;
inline bool ChartSeriesStyleArchive::has_tschchartseriespiefill() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriespiefill() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriespiefill() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriespiefill() {
  if (tschchartseriespiefill_ != NULL) tschchartseriespiefill_->::TSD::FillArchive::Clear();
  clear_has_tschchartseriespiefill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriespiefill() const {
  return tschchartseriespiefill_ != NULL ? *tschchartseriespiefill_ : *default_instance_->tschchartseriespiefill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriespiefill() {
  set_has_tschchartseriespiefill();
  if (tschchartseriespiefill_ == NULL) tschchartseriespiefill_ = new ::TSD::FillArchive;
  return tschchartseriespiefill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriespiefill() {
  clear_has_tschchartseriespiefill();
  ::TSD::FillArchive* temp = tschchartseriespiefill_;
  tschchartseriespiefill_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriespiefill(::TSD::FillArchive* tschchartseriespiefill) {
  delete tschchartseriespiefill_;
  tschchartseriespiefill_ = tschchartseriespiefill;
  if (tschchartseriespiefill) {
    set_has_tschchartseriespiefill();
  } else {
    clear_has_tschchartseriespiefill();
  }
}

// optional int32 tschchartseriesarealabelparagraphstyleindex = 18;
inline bool ChartSeriesStyleArchive::has_tschchartseriesarealabelparagraphstyleindex() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesarealabelparagraphstyleindex() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesarealabelparagraphstyleindex() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesarealabelparagraphstyleindex() {
  tschchartseriesarealabelparagraphstyleindex_ = 0;
  clear_has_tschchartseriesarealabelparagraphstyleindex();
}
inline ::google::protobuf::int32 ChartSeriesStyleArchive::tschchartseriesarealabelparagraphstyleindex() const {
  return tschchartseriesarealabelparagraphstyleindex_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesarealabelparagraphstyleindex(::google::protobuf::int32 value) {
  set_has_tschchartseriesarealabelparagraphstyleindex();
  tschchartseriesarealabelparagraphstyleindex_ = value;
}

// optional int32 tschchartseriesbarlabelparagraphstyleindex = 19;
inline bool ChartSeriesStyleArchive::has_tschchartseriesbarlabelparagraphstyleindex() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesbarlabelparagraphstyleindex() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesbarlabelparagraphstyleindex() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesbarlabelparagraphstyleindex() {
  tschchartseriesbarlabelparagraphstyleindex_ = 0;
  clear_has_tschchartseriesbarlabelparagraphstyleindex();
}
inline ::google::protobuf::int32 ChartSeriesStyleArchive::tschchartseriesbarlabelparagraphstyleindex() const {
  return tschchartseriesbarlabelparagraphstyleindex_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesbarlabelparagraphstyleindex(::google::protobuf::int32 value) {
  set_has_tschchartseriesbarlabelparagraphstyleindex();
  tschchartseriesbarlabelparagraphstyleindex_ = value;
}

// optional int32 tschchartseriesdefaultlabelparagraphstyleindex = 20;
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaultlabelparagraphstyleindex() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesdefaultlabelparagraphstyleindex() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesdefaultlabelparagraphstyleindex() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaultlabelparagraphstyleindex() {
  tschchartseriesdefaultlabelparagraphstyleindex_ = 0;
  clear_has_tschchartseriesdefaultlabelparagraphstyleindex();
}
inline ::google::protobuf::int32 ChartSeriesStyleArchive::tschchartseriesdefaultlabelparagraphstyleindex() const {
  return tschchartseriesdefaultlabelparagraphstyleindex_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaultlabelparagraphstyleindex(::google::protobuf::int32 value) {
  set_has_tschchartseriesdefaultlabelparagraphstyleindex();
  tschchartseriesdefaultlabelparagraphstyleindex_ = value;
}

// optional int32 tschchartserieslinelabelparagraphstyleindex = 21;
inline bool ChartSeriesStyleArchive::has_tschchartserieslinelabelparagraphstyleindex() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartserieslinelabelparagraphstyleindex() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartserieslinelabelparagraphstyleindex() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartserieslinelabelparagraphstyleindex() {
  tschchartserieslinelabelparagraphstyleindex_ = 0;
  clear_has_tschchartserieslinelabelparagraphstyleindex();
}
inline ::google::protobuf::int32 ChartSeriesStyleArchive::tschchartserieslinelabelparagraphstyleindex() const {
  return tschchartserieslinelabelparagraphstyleindex_;
}
inline void ChartSeriesStyleArchive::set_tschchartserieslinelabelparagraphstyleindex(::google::protobuf::int32 value) {
  set_has_tschchartserieslinelabelparagraphstyleindex();
  tschchartserieslinelabelparagraphstyleindex_ = value;
}

// optional int32 tschchartseriesmixedlabelparagraphstyleindex = 22;
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlabelparagraphstyleindex() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesmixedlabelparagraphstyleindex() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesmixedlabelparagraphstyleindex() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedlabelparagraphstyleindex() {
  tschchartseriesmixedlabelparagraphstyleindex_ = 0;
  clear_has_tschchartseriesmixedlabelparagraphstyleindex();
}
inline ::google::protobuf::int32 ChartSeriesStyleArchive::tschchartseriesmixedlabelparagraphstyleindex() const {
  return tschchartseriesmixedlabelparagraphstyleindex_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedlabelparagraphstyleindex(::google::protobuf::int32 value) {
  set_has_tschchartseriesmixedlabelparagraphstyleindex();
  tschchartseriesmixedlabelparagraphstyleindex_ = value;
}

// optional int32 tschchartseriespielabelparagraphstyleindex = 23;
inline bool ChartSeriesStyleArchive::has_tschchartseriespielabelparagraphstyleindex() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriespielabelparagraphstyleindex() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriespielabelparagraphstyleindex() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriespielabelparagraphstyleindex() {
  tschchartseriespielabelparagraphstyleindex_ = 0;
  clear_has_tschchartseriespielabelparagraphstyleindex();
}
inline ::google::protobuf::int32 ChartSeriesStyleArchive::tschchartseriespielabelparagraphstyleindex() const {
  return tschchartseriespielabelparagraphstyleindex_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriespielabelparagraphstyleindex(::google::protobuf::int32 value) {
  set_has_tschchartseriespielabelparagraphstyleindex();
  tschchartseriespielabelparagraphstyleindex_ = value;
}

// optional float tschchartseriesdefaultopacity = 24;
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaultopacity() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesdefaultopacity() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesdefaultopacity() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaultopacity() {
  tschchartseriesdefaultopacity_ = 0;
  clear_has_tschchartseriesdefaultopacity();
}
inline float ChartSeriesStyleArchive::tschchartseriesdefaultopacity() const {
  return tschchartseriesdefaultopacity_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaultopacity(float value) {
  set_has_tschchartseriesdefaultopacity();
  tschchartseriesdefaultopacity_ = value;
}

// optional int32 tschchartseriesareaoutsidelabelparagraphstyleindex = 25;
inline bool ChartSeriesStyleArchive::has_tschchartseriesareaoutsidelabelparagraphstyleindex() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesareaoutsidelabelparagraphstyleindex() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesareaoutsidelabelparagraphstyleindex() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesareaoutsidelabelparagraphstyleindex() {
  tschchartseriesareaoutsidelabelparagraphstyleindex_ = 0;
  clear_has_tschchartseriesareaoutsidelabelparagraphstyleindex();
}
inline ::google::protobuf::int32 ChartSeriesStyleArchive::tschchartseriesareaoutsidelabelparagraphstyleindex() const {
  return tschchartseriesareaoutsidelabelparagraphstyleindex_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesareaoutsidelabelparagraphstyleindex(::google::protobuf::int32 value) {
  set_has_tschchartseriesareaoutsidelabelparagraphstyleindex();
  tschchartseriesareaoutsidelabelparagraphstyleindex_ = value;
}

// optional int32 tschchartseriesbaroutsidelabelparagraphstyleindex = 26;
inline bool ChartSeriesStyleArchive::has_tschchartseriesbaroutsidelabelparagraphstyleindex() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesbaroutsidelabelparagraphstyleindex() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesbaroutsidelabelparagraphstyleindex() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesbaroutsidelabelparagraphstyleindex() {
  tschchartseriesbaroutsidelabelparagraphstyleindex_ = 0;
  clear_has_tschchartseriesbaroutsidelabelparagraphstyleindex();
}
inline ::google::protobuf::int32 ChartSeriesStyleArchive::tschchartseriesbaroutsidelabelparagraphstyleindex() const {
  return tschchartseriesbaroutsidelabelparagraphstyleindex_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesbaroutsidelabelparagraphstyleindex(::google::protobuf::int32 value) {
  set_has_tschchartseriesbaroutsidelabelparagraphstyleindex();
  tschchartseriesbaroutsidelabelparagraphstyleindex_ = value;
}

// optional int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex = 27;
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaultoutsidelabelparagraphstyleindex() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesdefaultoutsidelabelparagraphstyleindex() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesdefaultoutsidelabelparagraphstyleindex() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaultoutsidelabelparagraphstyleindex() {
  tschchartseriesdefaultoutsidelabelparagraphstyleindex_ = 0;
  clear_has_tschchartseriesdefaultoutsidelabelparagraphstyleindex();
}
inline ::google::protobuf::int32 ChartSeriesStyleArchive::tschchartseriesdefaultoutsidelabelparagraphstyleindex() const {
  return tschchartseriesdefaultoutsidelabelparagraphstyleindex_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaultoutsidelabelparagraphstyleindex(::google::protobuf::int32 value) {
  set_has_tschchartseriesdefaultoutsidelabelparagraphstyleindex();
  tschchartseriesdefaultoutsidelabelparagraphstyleindex_ = value;
}

// optional int32 tschchartseriesmixedoutsidelabelparagraphstyleindex = 28;
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedoutsidelabelparagraphstyleindex() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesmixedoutsidelabelparagraphstyleindex() {
  _has_bits_[0] |= 0x08000000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesmixedoutsidelabelparagraphstyleindex() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedoutsidelabelparagraphstyleindex() {
  tschchartseriesmixedoutsidelabelparagraphstyleindex_ = 0;
  clear_has_tschchartseriesmixedoutsidelabelparagraphstyleindex();
}
inline ::google::protobuf::int32 ChartSeriesStyleArchive::tschchartseriesmixedoutsidelabelparagraphstyleindex() const {
  return tschchartseriesmixedoutsidelabelparagraphstyleindex_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedoutsidelabelparagraphstyleindex(::google::protobuf::int32 value) {
  set_has_tschchartseriesmixedoutsidelabelparagraphstyleindex();
  tschchartseriesmixedoutsidelabelparagraphstyleindex_ = value;
}

// optional int32 tschchartseriespieoutsidelabelparagraphstyleindex = 29;
inline bool ChartSeriesStyleArchive::has_tschchartseriespieoutsidelabelparagraphstyleindex() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriespieoutsidelabelparagraphstyleindex() {
  _has_bits_[0] |= 0x10000000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriespieoutsidelabelparagraphstyleindex() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriespieoutsidelabelparagraphstyleindex() {
  tschchartseriespieoutsidelabelparagraphstyleindex_ = 0;
  clear_has_tschchartseriespieoutsidelabelparagraphstyleindex();
}
inline ::google::protobuf::int32 ChartSeriesStyleArchive::tschchartseriespieoutsidelabelparagraphstyleindex() const {
  return tschchartseriespieoutsidelabelparagraphstyleindex_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriespieoutsidelabelparagraphstyleindex(::google::protobuf::int32 value) {
  set_has_tschchartseriespieoutsidelabelparagraphstyleindex();
  tschchartseriespieoutsidelabelparagraphstyleindex_ = value;
}

// optional .TSD.ShadowArchive tschchartseries3dareashadow = 30;
inline bool ChartSeriesStyleArchive::has_tschchartseries3dareashadow() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseries3dareashadow() {
  _has_bits_[0] |= 0x20000000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseries3dareashadow() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseries3dareashadow() {
  if (tschchartseries3dareashadow_ != NULL) tschchartseries3dareashadow_->::TSD::ShadowArchive::Clear();
  clear_has_tschchartseries3dareashadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseries3dareashadow() const {
  return tschchartseries3dareashadow_ != NULL ? *tschchartseries3dareashadow_ : *default_instance_->tschchartseries3dareashadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dareashadow() {
  set_has_tschchartseries3dareashadow();
  if (tschchartseries3dareashadow_ == NULL) tschchartseries3dareashadow_ = new ::TSD::ShadowArchive;
  return tschchartseries3dareashadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseries3dareashadow() {
  clear_has_tschchartseries3dareashadow();
  ::TSD::ShadowArchive* temp = tschchartseries3dareashadow_;
  tschchartseries3dareashadow_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dareashadow(::TSD::ShadowArchive* tschchartseries3dareashadow) {
  delete tschchartseries3dareashadow_;
  tschchartseries3dareashadow_ = tschchartseries3dareashadow;
  if (tschchartseries3dareashadow) {
    set_has_tschchartseries3dareashadow();
  } else {
    clear_has_tschchartseries3dareashadow();
  }
}

// optional .TSD.ShadowArchive tschchartseries3dbarshadow = 31;
inline bool ChartSeriesStyleArchive::has_tschchartseries3dbarshadow() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseries3dbarshadow() {
  _has_bits_[0] |= 0x40000000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseries3dbarshadow() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseries3dbarshadow() {
  if (tschchartseries3dbarshadow_ != NULL) tschchartseries3dbarshadow_->::TSD::ShadowArchive::Clear();
  clear_has_tschchartseries3dbarshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseries3dbarshadow() const {
  return tschchartseries3dbarshadow_ != NULL ? *tschchartseries3dbarshadow_ : *default_instance_->tschchartseries3dbarshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dbarshadow() {
  set_has_tschchartseries3dbarshadow();
  if (tschchartseries3dbarshadow_ == NULL) tschchartseries3dbarshadow_ = new ::TSD::ShadowArchive;
  return tschchartseries3dbarshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseries3dbarshadow() {
  clear_has_tschchartseries3dbarshadow();
  ::TSD::ShadowArchive* temp = tschchartseries3dbarshadow_;
  tschchartseries3dbarshadow_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dbarshadow(::TSD::ShadowArchive* tschchartseries3dbarshadow) {
  delete tschchartseries3dbarshadow_;
  tschchartseries3dbarshadow_ = tschchartseries3dbarshadow;
  if (tschchartseries3dbarshadow) {
    set_has_tschchartseries3dbarshadow();
  } else {
    clear_has_tschchartseries3dbarshadow();
  }
}

// optional .TSD.ShadowArchive tschchartseries3dcolumnshadow = 32;
inline bool ChartSeriesStyleArchive::has_tschchartseries3dcolumnshadow() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseries3dcolumnshadow() {
  _has_bits_[0] |= 0x80000000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseries3dcolumnshadow() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseries3dcolumnshadow() {
  if (tschchartseries3dcolumnshadow_ != NULL) tschchartseries3dcolumnshadow_->::TSD::ShadowArchive::Clear();
  clear_has_tschchartseries3dcolumnshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseries3dcolumnshadow() const {
  return tschchartseries3dcolumnshadow_ != NULL ? *tschchartseries3dcolumnshadow_ : *default_instance_->tschchartseries3dcolumnshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dcolumnshadow() {
  set_has_tschchartseries3dcolumnshadow();
  if (tschchartseries3dcolumnshadow_ == NULL) tschchartseries3dcolumnshadow_ = new ::TSD::ShadowArchive;
  return tschchartseries3dcolumnshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseries3dcolumnshadow() {
  clear_has_tschchartseries3dcolumnshadow();
  ::TSD::ShadowArchive* temp = tschchartseries3dcolumnshadow_;
  tschchartseries3dcolumnshadow_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dcolumnshadow(::TSD::ShadowArchive* tschchartseries3dcolumnshadow) {
  delete tschchartseries3dcolumnshadow_;
  tschchartseries3dcolumnshadow_ = tschchartseries3dcolumnshadow;
  if (tschchartseries3dcolumnshadow) {
    set_has_tschchartseries3dcolumnshadow();
  } else {
    clear_has_tschchartseries3dcolumnshadow();
  }
}

// optional .TSD.ShadowArchive tschchartseries3dlineshadow = 33;
inline bool ChartSeriesStyleArchive::has_tschchartseries3dlineshadow() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseries3dlineshadow() {
  _has_bits_[1] |= 0x00000001u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseries3dlineshadow() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseries3dlineshadow() {
  if (tschchartseries3dlineshadow_ != NULL) tschchartseries3dlineshadow_->::TSD::ShadowArchive::Clear();
  clear_has_tschchartseries3dlineshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseries3dlineshadow() const {
  return tschchartseries3dlineshadow_ != NULL ? *tschchartseries3dlineshadow_ : *default_instance_->tschchartseries3dlineshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dlineshadow() {
  set_has_tschchartseries3dlineshadow();
  if (tschchartseries3dlineshadow_ == NULL) tschchartseries3dlineshadow_ = new ::TSD::ShadowArchive;
  return tschchartseries3dlineshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseries3dlineshadow() {
  clear_has_tschchartseries3dlineshadow();
  ::TSD::ShadowArchive* temp = tschchartseries3dlineshadow_;
  tschchartseries3dlineshadow_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dlineshadow(::TSD::ShadowArchive* tschchartseries3dlineshadow) {
  delete tschchartseries3dlineshadow_;
  tschchartseries3dlineshadow_ = tschchartseries3dlineshadow;
  if (tschchartseries3dlineshadow) {
    set_has_tschchartseries3dlineshadow();
  } else {
    clear_has_tschchartseries3dlineshadow();
  }
}

// optional .TSD.ShadowArchive tschchartseries3dpieshadow = 34;
inline bool ChartSeriesStyleArchive::has_tschchartseries3dpieshadow() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseries3dpieshadow() {
  _has_bits_[1] |= 0x00000002u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseries3dpieshadow() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseries3dpieshadow() {
  if (tschchartseries3dpieshadow_ != NULL) tschchartseries3dpieshadow_->::TSD::ShadowArchive::Clear();
  clear_has_tschchartseries3dpieshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseries3dpieshadow() const {
  return tschchartseries3dpieshadow_ != NULL ? *tschchartseries3dpieshadow_ : *default_instance_->tschchartseries3dpieshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseries3dpieshadow() {
  set_has_tschchartseries3dpieshadow();
  if (tschchartseries3dpieshadow_ == NULL) tschchartseries3dpieshadow_ = new ::TSD::ShadowArchive;
  return tschchartseries3dpieshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseries3dpieshadow() {
  clear_has_tschchartseries3dpieshadow();
  ::TSD::ShadowArchive* temp = tschchartseries3dpieshadow_;
  tschchartseries3dpieshadow_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseries3dpieshadow(::TSD::ShadowArchive* tschchartseries3dpieshadow) {
  delete tschchartseries3dpieshadow_;
  tschchartseries3dpieshadow_ = tschchartseries3dpieshadow;
  if (tschchartseries3dpieshadow) {
    set_has_tschchartseries3dpieshadow();
  } else {
    clear_has_tschchartseries3dpieshadow();
  }
}

// optional .TSD.ShadowArchive tschchartseriesareashadow = 35;
inline bool ChartSeriesStyleArchive::has_tschchartseriesareashadow() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesareashadow() {
  _has_bits_[1] |= 0x00000004u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesareashadow() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesareashadow() {
  if (tschchartseriesareashadow_ != NULL) tschchartseriesareashadow_->::TSD::ShadowArchive::Clear();
  clear_has_tschchartseriesareashadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesareashadow() const {
  return tschchartseriesareashadow_ != NULL ? *tschchartseriesareashadow_ : *default_instance_->tschchartseriesareashadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesareashadow() {
  set_has_tschchartseriesareashadow();
  if (tschchartseriesareashadow_ == NULL) tschchartseriesareashadow_ = new ::TSD::ShadowArchive;
  return tschchartseriesareashadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesareashadow() {
  clear_has_tschchartseriesareashadow();
  ::TSD::ShadowArchive* temp = tschchartseriesareashadow_;
  tschchartseriesareashadow_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesareashadow(::TSD::ShadowArchive* tschchartseriesareashadow) {
  delete tschchartseriesareashadow_;
  tschchartseriesareashadow_ = tschchartseriesareashadow;
  if (tschchartseriesareashadow) {
    set_has_tschchartseriesareashadow();
  } else {
    clear_has_tschchartseriesareashadow();
  }
}

// optional .TSD.ShadowArchive tschchartseriesbarshadow = 36;
inline bool ChartSeriesStyleArchive::has_tschchartseriesbarshadow() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesbarshadow() {
  _has_bits_[1] |= 0x00000008u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesbarshadow() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesbarshadow() {
  if (tschchartseriesbarshadow_ != NULL) tschchartseriesbarshadow_->::TSD::ShadowArchive::Clear();
  clear_has_tschchartseriesbarshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesbarshadow() const {
  return tschchartseriesbarshadow_ != NULL ? *tschchartseriesbarshadow_ : *default_instance_->tschchartseriesbarshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesbarshadow() {
  set_has_tschchartseriesbarshadow();
  if (tschchartseriesbarshadow_ == NULL) tschchartseriesbarshadow_ = new ::TSD::ShadowArchive;
  return tschchartseriesbarshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesbarshadow() {
  clear_has_tschchartseriesbarshadow();
  ::TSD::ShadowArchive* temp = tschchartseriesbarshadow_;
  tschchartseriesbarshadow_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesbarshadow(::TSD::ShadowArchive* tschchartseriesbarshadow) {
  delete tschchartseriesbarshadow_;
  tschchartseriesbarshadow_ = tschchartseriesbarshadow;
  if (tschchartseriesbarshadow) {
    set_has_tschchartseriesbarshadow();
  } else {
    clear_has_tschchartseriesbarshadow();
  }
}

// optional .TSD.ShadowArchive tschchartseriesbubbleshadow = 37;
inline bool ChartSeriesStyleArchive::has_tschchartseriesbubbleshadow() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesbubbleshadow() {
  _has_bits_[1] |= 0x00000010u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesbubbleshadow() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesbubbleshadow() {
  if (tschchartseriesbubbleshadow_ != NULL) tschchartseriesbubbleshadow_->::TSD::ShadowArchive::Clear();
  clear_has_tschchartseriesbubbleshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesbubbleshadow() const {
  return tschchartseriesbubbleshadow_ != NULL ? *tschchartseriesbubbleshadow_ : *default_instance_->tschchartseriesbubbleshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesbubbleshadow() {
  set_has_tschchartseriesbubbleshadow();
  if (tschchartseriesbubbleshadow_ == NULL) tschchartseriesbubbleshadow_ = new ::TSD::ShadowArchive;
  return tschchartseriesbubbleshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesbubbleshadow() {
  clear_has_tschchartseriesbubbleshadow();
  ::TSD::ShadowArchive* temp = tschchartseriesbubbleshadow_;
  tschchartseriesbubbleshadow_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesbubbleshadow(::TSD::ShadowArchive* tschchartseriesbubbleshadow) {
  delete tschchartseriesbubbleshadow_;
  tschchartseriesbubbleshadow_ = tschchartseriesbubbleshadow;
  if (tschchartseriesbubbleshadow) {
    set_has_tschchartseriesbubbleshadow();
  } else {
    clear_has_tschchartseriesbubbleshadow();
  }
}

// optional .TSD.ShadowArchive tschchartseriesdefaultshadow = 38;
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaultshadow() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesdefaultshadow() {
  _has_bits_[1] |= 0x00000020u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesdefaultshadow() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaultshadow() {
  if (tschchartseriesdefaultshadow_ != NULL) tschchartseriesdefaultshadow_->::TSD::ShadowArchive::Clear();
  clear_has_tschchartseriesdefaultshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesdefaultshadow() const {
  return tschchartseriesdefaultshadow_ != NULL ? *tschchartseriesdefaultshadow_ : *default_instance_->tschchartseriesdefaultshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaultshadow() {
  set_has_tschchartseriesdefaultshadow();
  if (tschchartseriesdefaultshadow_ == NULL) tschchartseriesdefaultshadow_ = new ::TSD::ShadowArchive;
  return tschchartseriesdefaultshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaultshadow() {
  clear_has_tschchartseriesdefaultshadow();
  ::TSD::ShadowArchive* temp = tschchartseriesdefaultshadow_;
  tschchartseriesdefaultshadow_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaultshadow(::TSD::ShadowArchive* tschchartseriesdefaultshadow) {
  delete tschchartseriesdefaultshadow_;
  tschchartseriesdefaultshadow_ = tschchartseriesdefaultshadow;
  if (tschchartseriesdefaultshadow) {
    set_has_tschchartseriesdefaultshadow();
  } else {
    clear_has_tschchartseriesdefaultshadow();
  }
}

// optional .TSD.ShadowArchive tschchartserieslineshadow = 39;
inline bool ChartSeriesStyleArchive::has_tschchartserieslineshadow() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartserieslineshadow() {
  _has_bits_[1] |= 0x00000040u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartserieslineshadow() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void ChartSeriesStyleArchive::clear_tschchartserieslineshadow() {
  if (tschchartserieslineshadow_ != NULL) tschchartserieslineshadow_->::TSD::ShadowArchive::Clear();
  clear_has_tschchartserieslineshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartserieslineshadow() const {
  return tschchartserieslineshadow_ != NULL ? *tschchartserieslineshadow_ : *default_instance_->tschchartserieslineshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartserieslineshadow() {
  set_has_tschchartserieslineshadow();
  if (tschchartserieslineshadow_ == NULL) tschchartserieslineshadow_ = new ::TSD::ShadowArchive;
  return tschchartserieslineshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartserieslineshadow() {
  clear_has_tschchartserieslineshadow();
  ::TSD::ShadowArchive* temp = tschchartserieslineshadow_;
  tschchartserieslineshadow_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartserieslineshadow(::TSD::ShadowArchive* tschchartserieslineshadow) {
  delete tschchartserieslineshadow_;
  tschchartserieslineshadow_ = tschchartserieslineshadow;
  if (tschchartserieslineshadow) {
    set_has_tschchartserieslineshadow();
  } else {
    clear_has_tschchartserieslineshadow();
  }
}

// optional .TSD.ShadowArchive tschchartseriesmixedareashadow = 40;
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareashadow() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesmixedareashadow() {
  _has_bits_[1] |= 0x00000080u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesmixedareashadow() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedareashadow() {
  if (tschchartseriesmixedareashadow_ != NULL) tschchartseriesmixedareashadow_->::TSD::ShadowArchive::Clear();
  clear_has_tschchartseriesmixedareashadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesmixedareashadow() const {
  return tschchartseriesmixedareashadow_ != NULL ? *tschchartseriesmixedareashadow_ : *default_instance_->tschchartseriesmixedareashadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedareashadow() {
  set_has_tschchartseriesmixedareashadow();
  if (tschchartseriesmixedareashadow_ == NULL) tschchartseriesmixedareashadow_ = new ::TSD::ShadowArchive;
  return tschchartseriesmixedareashadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedareashadow() {
  clear_has_tschchartseriesmixedareashadow();
  ::TSD::ShadowArchive* temp = tschchartseriesmixedareashadow_;
  tschchartseriesmixedareashadow_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedareashadow(::TSD::ShadowArchive* tschchartseriesmixedareashadow) {
  delete tschchartseriesmixedareashadow_;
  tschchartseriesmixedareashadow_ = tschchartseriesmixedareashadow;
  if (tschchartseriesmixedareashadow) {
    set_has_tschchartseriesmixedareashadow();
  } else {
    clear_has_tschchartseriesmixedareashadow();
  }
}

// optional .TSD.ShadowArchive tschchartseriesmixedcolumnshadow = 41;
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedcolumnshadow() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesmixedcolumnshadow() {
  _has_bits_[1] |= 0x00000100u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesmixedcolumnshadow() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedcolumnshadow() {
  if (tschchartseriesmixedcolumnshadow_ != NULL) tschchartseriesmixedcolumnshadow_->::TSD::ShadowArchive::Clear();
  clear_has_tschchartseriesmixedcolumnshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesmixedcolumnshadow() const {
  return tschchartseriesmixedcolumnshadow_ != NULL ? *tschchartseriesmixedcolumnshadow_ : *default_instance_->tschchartseriesmixedcolumnshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedcolumnshadow() {
  set_has_tschchartseriesmixedcolumnshadow();
  if (tschchartseriesmixedcolumnshadow_ == NULL) tschchartseriesmixedcolumnshadow_ = new ::TSD::ShadowArchive;
  return tschchartseriesmixedcolumnshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedcolumnshadow() {
  clear_has_tschchartseriesmixedcolumnshadow();
  ::TSD::ShadowArchive* temp = tschchartseriesmixedcolumnshadow_;
  tschchartseriesmixedcolumnshadow_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedcolumnshadow(::TSD::ShadowArchive* tschchartseriesmixedcolumnshadow) {
  delete tschchartseriesmixedcolumnshadow_;
  tschchartseriesmixedcolumnshadow_ = tschchartseriesmixedcolumnshadow;
  if (tschchartseriesmixedcolumnshadow) {
    set_has_tschchartseriesmixedcolumnshadow();
  } else {
    clear_has_tschchartseriesmixedcolumnshadow();
  }
}

// optional .TSD.ShadowArchive tschchartseriesmixedlineshadow = 42;
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlineshadow() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesmixedlineshadow() {
  _has_bits_[1] |= 0x00000200u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesmixedlineshadow() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedlineshadow() {
  if (tschchartseriesmixedlineshadow_ != NULL) tschchartseriesmixedlineshadow_->::TSD::ShadowArchive::Clear();
  clear_has_tschchartseriesmixedlineshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesmixedlineshadow() const {
  return tschchartseriesmixedlineshadow_ != NULL ? *tschchartseriesmixedlineshadow_ : *default_instance_->tschchartseriesmixedlineshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedlineshadow() {
  set_has_tschchartseriesmixedlineshadow();
  if (tschchartseriesmixedlineshadow_ == NULL) tschchartseriesmixedlineshadow_ = new ::TSD::ShadowArchive;
  return tschchartseriesmixedlineshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedlineshadow() {
  clear_has_tschchartseriesmixedlineshadow();
  ::TSD::ShadowArchive* temp = tschchartseriesmixedlineshadow_;
  tschchartseriesmixedlineshadow_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedlineshadow(::TSD::ShadowArchive* tschchartseriesmixedlineshadow) {
  delete tschchartseriesmixedlineshadow_;
  tschchartseriesmixedlineshadow_ = tschchartseriesmixedlineshadow;
  if (tschchartseriesmixedlineshadow) {
    set_has_tschchartseriesmixedlineshadow();
  } else {
    clear_has_tschchartseriesmixedlineshadow();
  }
}

// optional .TSD.ShadowArchive tschchartseriespieshadow = 43;
inline bool ChartSeriesStyleArchive::has_tschchartseriespieshadow() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriespieshadow() {
  _has_bits_[1] |= 0x00000400u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriespieshadow() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriespieshadow() {
  if (tschchartseriespieshadow_ != NULL) tschchartseriespieshadow_->::TSD::ShadowArchive::Clear();
  clear_has_tschchartseriespieshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriespieshadow() const {
  return tschchartseriespieshadow_ != NULL ? *tschchartseriespieshadow_ : *default_instance_->tschchartseriespieshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriespieshadow() {
  set_has_tschchartseriespieshadow();
  if (tschchartseriespieshadow_ == NULL) tschchartseriespieshadow_ = new ::TSD::ShadowArchive;
  return tschchartseriespieshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriespieshadow() {
  clear_has_tschchartseriespieshadow();
  ::TSD::ShadowArchive* temp = tschchartseriespieshadow_;
  tschchartseriespieshadow_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriespieshadow(::TSD::ShadowArchive* tschchartseriespieshadow) {
  delete tschchartseriespieshadow_;
  tschchartseriespieshadow_ = tschchartseriespieshadow;
  if (tschchartseriespieshadow) {
    set_has_tschchartseriespieshadow();
  } else {
    clear_has_tschchartseriespieshadow();
  }
}

// optional .TSD.ShadowArchive tschchartseriesscattershadow = 44;
inline bool ChartSeriesStyleArchive::has_tschchartseriesscattershadow() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesscattershadow() {
  _has_bits_[1] |= 0x00000800u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesscattershadow() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesscattershadow() {
  if (tschchartseriesscattershadow_ != NULL) tschchartseriesscattershadow_->::TSD::ShadowArchive::Clear();
  clear_has_tschchartseriesscattershadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesscattershadow() const {
  return tschchartseriesscattershadow_ != NULL ? *tschchartseriesscattershadow_ : *default_instance_->tschchartseriesscattershadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesscattershadow() {
  set_has_tschchartseriesscattershadow();
  if (tschchartseriesscattershadow_ == NULL) tschchartseriesscattershadow_ = new ::TSD::ShadowArchive;
  return tschchartseriesscattershadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesscattershadow() {
  clear_has_tschchartseriesscattershadow();
  ::TSD::ShadowArchive* temp = tschchartseriesscattershadow_;
  tschchartseriesscattershadow_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesscattershadow(::TSD::ShadowArchive* tschchartseriesscattershadow) {
  delete tschchartseriesscattershadow_;
  tschchartseriesscattershadow_ = tschchartseriesscattershadow;
  if (tschchartseriesscattershadow) {
    set_has_tschchartseriesscattershadow();
  } else {
    clear_has_tschchartseriesscattershadow();
  }
}

// optional .TSD.StrokeArchive tschchartseriesareastroke = 45;
inline bool ChartSeriesStyleArchive::has_tschchartseriesareastroke() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesareastroke() {
  _has_bits_[1] |= 0x00001000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesareastroke() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesareastroke() {
  if (tschchartseriesareastroke_ != NULL) tschchartseriesareastroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartseriesareastroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesareastroke() const {
  return tschchartseriesareastroke_ != NULL ? *tschchartseriesareastroke_ : *default_instance_->tschchartseriesareastroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesareastroke() {
  set_has_tschchartseriesareastroke();
  if (tschchartseriesareastroke_ == NULL) tschchartseriesareastroke_ = new ::TSD::StrokeArchive;
  return tschchartseriesareastroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesareastroke() {
  clear_has_tschchartseriesareastroke();
  ::TSD::StrokeArchive* temp = tschchartseriesareastroke_;
  tschchartseriesareastroke_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesareastroke(::TSD::StrokeArchive* tschchartseriesareastroke) {
  delete tschchartseriesareastroke_;
  tschchartseriesareastroke_ = tschchartseriesareastroke;
  if (tschchartseriesareastroke) {
    set_has_tschchartseriesareastroke();
  } else {
    clear_has_tschchartseriesareastroke();
  }
}

// optional .TSD.StrokeArchive tschchartseriesbarstroke = 46;
inline bool ChartSeriesStyleArchive::has_tschchartseriesbarstroke() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesbarstroke() {
  _has_bits_[1] |= 0x00002000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesbarstroke() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesbarstroke() {
  if (tschchartseriesbarstroke_ != NULL) tschchartseriesbarstroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartseriesbarstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesbarstroke() const {
  return tschchartseriesbarstroke_ != NULL ? *tschchartseriesbarstroke_ : *default_instance_->tschchartseriesbarstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesbarstroke() {
  set_has_tschchartseriesbarstroke();
  if (tschchartseriesbarstroke_ == NULL) tschchartseriesbarstroke_ = new ::TSD::StrokeArchive;
  return tschchartseriesbarstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesbarstroke() {
  clear_has_tschchartseriesbarstroke();
  ::TSD::StrokeArchive* temp = tschchartseriesbarstroke_;
  tschchartseriesbarstroke_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesbarstroke(::TSD::StrokeArchive* tschchartseriesbarstroke) {
  delete tschchartseriesbarstroke_;
  tschchartseriesbarstroke_ = tschchartseriesbarstroke;
  if (tschchartseriesbarstroke) {
    set_has_tschchartseriesbarstroke();
  } else {
    clear_has_tschchartseriesbarstroke();
  }
}

// optional .TSD.StrokeArchive tschchartseriesbubblestroke = 47;
inline bool ChartSeriesStyleArchive::has_tschchartseriesbubblestroke() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesbubblestroke() {
  _has_bits_[1] |= 0x00004000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesbubblestroke() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesbubblestroke() {
  if (tschchartseriesbubblestroke_ != NULL) tschchartseriesbubblestroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartseriesbubblestroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesbubblestroke() const {
  return tschchartseriesbubblestroke_ != NULL ? *tschchartseriesbubblestroke_ : *default_instance_->tschchartseriesbubblestroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesbubblestroke() {
  set_has_tschchartseriesbubblestroke();
  if (tschchartseriesbubblestroke_ == NULL) tschchartseriesbubblestroke_ = new ::TSD::StrokeArchive;
  return tschchartseriesbubblestroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesbubblestroke() {
  clear_has_tschchartseriesbubblestroke();
  ::TSD::StrokeArchive* temp = tschchartseriesbubblestroke_;
  tschchartseriesbubblestroke_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesbubblestroke(::TSD::StrokeArchive* tschchartseriesbubblestroke) {
  delete tschchartseriesbubblestroke_;
  tschchartseriesbubblestroke_ = tschchartseriesbubblestroke;
  if (tschchartseriesbubblestroke) {
    set_has_tschchartseriesbubblestroke();
  } else {
    clear_has_tschchartseriesbubblestroke();
  }
}

// optional .TSD.StrokeArchive tschchartserieslinestroke = 48;
inline bool ChartSeriesStyleArchive::has_tschchartserieslinestroke() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartserieslinestroke() {
  _has_bits_[1] |= 0x00008000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartserieslinestroke() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartserieslinestroke() {
  if (tschchartserieslinestroke_ != NULL) tschchartserieslinestroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartserieslinestroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartserieslinestroke() const {
  return tschchartserieslinestroke_ != NULL ? *tschchartserieslinestroke_ : *default_instance_->tschchartserieslinestroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartserieslinestroke() {
  set_has_tschchartserieslinestroke();
  if (tschchartserieslinestroke_ == NULL) tschchartserieslinestroke_ = new ::TSD::StrokeArchive;
  return tschchartserieslinestroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartserieslinestroke() {
  clear_has_tschchartserieslinestroke();
  ::TSD::StrokeArchive* temp = tschchartserieslinestroke_;
  tschchartserieslinestroke_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartserieslinestroke(::TSD::StrokeArchive* tschchartserieslinestroke) {
  delete tschchartserieslinestroke_;
  tschchartserieslinestroke_ = tschchartserieslinestroke;
  if (tschchartserieslinestroke) {
    set_has_tschchartserieslinestroke();
  } else {
    clear_has_tschchartserieslinestroke();
  }
}

// optional .TSD.StrokeArchive tschchartseriesmixedareastroke = 49;
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareastroke() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesmixedareastroke() {
  _has_bits_[1] |= 0x00010000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesmixedareastroke() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedareastroke() {
  if (tschchartseriesmixedareastroke_ != NULL) tschchartseriesmixedareastroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartseriesmixedareastroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesmixedareastroke() const {
  return tschchartseriesmixedareastroke_ != NULL ? *tschchartseriesmixedareastroke_ : *default_instance_->tschchartseriesmixedareastroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedareastroke() {
  set_has_tschchartseriesmixedareastroke();
  if (tschchartseriesmixedareastroke_ == NULL) tschchartseriesmixedareastroke_ = new ::TSD::StrokeArchive;
  return tschchartseriesmixedareastroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedareastroke() {
  clear_has_tschchartseriesmixedareastroke();
  ::TSD::StrokeArchive* temp = tschchartseriesmixedareastroke_;
  tschchartseriesmixedareastroke_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedareastroke(::TSD::StrokeArchive* tschchartseriesmixedareastroke) {
  delete tschchartseriesmixedareastroke_;
  tschchartseriesmixedareastroke_ = tschchartseriesmixedareastroke;
  if (tschchartseriesmixedareastroke) {
    set_has_tschchartseriesmixedareastroke();
  } else {
    clear_has_tschchartseriesmixedareastroke();
  }
}

// optional .TSD.StrokeArchive tschchartseriesmixedcolumnstroke = 50;
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedcolumnstroke() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesmixedcolumnstroke() {
  _has_bits_[1] |= 0x00020000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesmixedcolumnstroke() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedcolumnstroke() {
  if (tschchartseriesmixedcolumnstroke_ != NULL) tschchartseriesmixedcolumnstroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartseriesmixedcolumnstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesmixedcolumnstroke() const {
  return tschchartseriesmixedcolumnstroke_ != NULL ? *tschchartseriesmixedcolumnstroke_ : *default_instance_->tschchartseriesmixedcolumnstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedcolumnstroke() {
  set_has_tschchartseriesmixedcolumnstroke();
  if (tschchartseriesmixedcolumnstroke_ == NULL) tschchartseriesmixedcolumnstroke_ = new ::TSD::StrokeArchive;
  return tschchartseriesmixedcolumnstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedcolumnstroke() {
  clear_has_tschchartseriesmixedcolumnstroke();
  ::TSD::StrokeArchive* temp = tschchartseriesmixedcolumnstroke_;
  tschchartseriesmixedcolumnstroke_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedcolumnstroke(::TSD::StrokeArchive* tschchartseriesmixedcolumnstroke) {
  delete tschchartseriesmixedcolumnstroke_;
  tschchartseriesmixedcolumnstroke_ = tschchartseriesmixedcolumnstroke;
  if (tschchartseriesmixedcolumnstroke) {
    set_has_tschchartseriesmixedcolumnstroke();
  } else {
    clear_has_tschchartseriesmixedcolumnstroke();
  }
}

// optional .TSD.StrokeArchive tschchartseriesmixedlinestroke = 51;
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlinestroke() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesmixedlinestroke() {
  _has_bits_[1] |= 0x00040000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesmixedlinestroke() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinestroke() {
  if (tschchartseriesmixedlinestroke_ != NULL) tschchartseriesmixedlinestroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartseriesmixedlinestroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesmixedlinestroke() const {
  return tschchartseriesmixedlinestroke_ != NULL ? *tschchartseriesmixedlinestroke_ : *default_instance_->tschchartseriesmixedlinestroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedlinestroke() {
  set_has_tschchartseriesmixedlinestroke();
  if (tschchartseriesmixedlinestroke_ == NULL) tschchartseriesmixedlinestroke_ = new ::TSD::StrokeArchive;
  return tschchartseriesmixedlinestroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedlinestroke() {
  clear_has_tschchartseriesmixedlinestroke();
  ::TSD::StrokeArchive* temp = tschchartseriesmixedlinestroke_;
  tschchartseriesmixedlinestroke_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedlinestroke(::TSD::StrokeArchive* tschchartseriesmixedlinestroke) {
  delete tschchartseriesmixedlinestroke_;
  tschchartseriesmixedlinestroke_ = tschchartseriesmixedlinestroke;
  if (tschchartseriesmixedlinestroke) {
    set_has_tschchartseriesmixedlinestroke();
  } else {
    clear_has_tschchartseriesmixedlinestroke();
  }
}

// optional .TSD.StrokeArchive tschchartseriespiestroke = 52;
inline bool ChartSeriesStyleArchive::has_tschchartseriespiestroke() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriespiestroke() {
  _has_bits_[1] |= 0x00080000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriespiestroke() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriespiestroke() {
  if (tschchartseriespiestroke_ != NULL) tschchartseriespiestroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartseriespiestroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriespiestroke() const {
  return tschchartseriespiestroke_ != NULL ? *tschchartseriespiestroke_ : *default_instance_->tschchartseriespiestroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriespiestroke() {
  set_has_tschchartseriespiestroke();
  if (tschchartseriespiestroke_ == NULL) tschchartseriespiestroke_ = new ::TSD::StrokeArchive;
  return tschchartseriespiestroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriespiestroke() {
  clear_has_tschchartseriespiestroke();
  ::TSD::StrokeArchive* temp = tschchartseriespiestroke_;
  tschchartseriespiestroke_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriespiestroke(::TSD::StrokeArchive* tschchartseriespiestroke) {
  delete tschchartseriespiestroke_;
  tschchartseriespiestroke_ = tschchartseriespiestroke;
  if (tschchartseriespiestroke) {
    set_has_tschchartseriespiestroke();
  } else {
    clear_has_tschchartseriespiestroke();
  }
}

// optional .TSD.StrokeArchive tschchartseriesscatterstroke = 53;
inline bool ChartSeriesStyleArchive::has_tschchartseriesscatterstroke() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesscatterstroke() {
  _has_bits_[1] |= 0x00100000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesscatterstroke() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesscatterstroke() {
  if (tschchartseriesscatterstroke_ != NULL) tschchartseriesscatterstroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartseriesscatterstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesscatterstroke() const {
  return tschchartseriesscatterstroke_ != NULL ? *tschchartseriesscatterstroke_ : *default_instance_->tschchartseriesscatterstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesscatterstroke() {
  set_has_tschchartseriesscatterstroke();
  if (tschchartseriesscatterstroke_ == NULL) tschchartseriesscatterstroke_ = new ::TSD::StrokeArchive;
  return tschchartseriesscatterstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesscatterstroke() {
  clear_has_tschchartseriesscatterstroke();
  ::TSD::StrokeArchive* temp = tschchartseriesscatterstroke_;
  tschchartseriesscatterstroke_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesscatterstroke(::TSD::StrokeArchive* tschchartseriesscatterstroke) {
  delete tschchartseriesscatterstroke_;
  tschchartseriesscatterstroke_ = tschchartseriesscatterstroke;
  if (tschchartseriesscatterstroke) {
    set_has_tschchartseriesscatterstroke();
  } else {
    clear_has_tschchartseriesscatterstroke();
  }
}

// optional .TSD.FillArchive tschchartseriesareasymbolfill = 54;
inline bool ChartSeriesStyleArchive::has_tschchartseriesareasymbolfill() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesareasymbolfill() {
  _has_bits_[1] |= 0x00200000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesareasymbolfill() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesareasymbolfill() {
  if (tschchartseriesareasymbolfill_ != NULL) tschchartseriesareasymbolfill_->::TSD::FillArchive::Clear();
  clear_has_tschchartseriesareasymbolfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesareasymbolfill() const {
  return tschchartseriesareasymbolfill_ != NULL ? *tschchartseriesareasymbolfill_ : *default_instance_->tschchartseriesareasymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesareasymbolfill() {
  set_has_tschchartseriesareasymbolfill();
  if (tschchartseriesareasymbolfill_ == NULL) tschchartseriesareasymbolfill_ = new ::TSD::FillArchive;
  return tschchartseriesareasymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesareasymbolfill() {
  clear_has_tschchartseriesareasymbolfill();
  ::TSD::FillArchive* temp = tschchartseriesareasymbolfill_;
  tschchartseriesareasymbolfill_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesareasymbolfill(::TSD::FillArchive* tschchartseriesareasymbolfill) {
  delete tschchartseriesareasymbolfill_;
  tschchartseriesareasymbolfill_ = tschchartseriesareasymbolfill;
  if (tschchartseriesareasymbolfill) {
    set_has_tschchartseriesareasymbolfill();
  } else {
    clear_has_tschchartseriesareasymbolfill();
  }
}

// optional .TSD.FillArchive tschchartseriesbubblesymbolfill = 55;
inline bool ChartSeriesStyleArchive::has_tschchartseriesbubblesymbolfill() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesbubblesymbolfill() {
  _has_bits_[1] |= 0x00400000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesbubblesymbolfill() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesbubblesymbolfill() {
  if (tschchartseriesbubblesymbolfill_ != NULL) tschchartseriesbubblesymbolfill_->::TSD::FillArchive::Clear();
  clear_has_tschchartseriesbubblesymbolfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesbubblesymbolfill() const {
  return tschchartseriesbubblesymbolfill_ != NULL ? *tschchartseriesbubblesymbolfill_ : *default_instance_->tschchartseriesbubblesymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesbubblesymbolfill() {
  set_has_tschchartseriesbubblesymbolfill();
  if (tschchartseriesbubblesymbolfill_ == NULL) tschchartseriesbubblesymbolfill_ = new ::TSD::FillArchive;
  return tschchartseriesbubblesymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesbubblesymbolfill() {
  clear_has_tschchartseriesbubblesymbolfill();
  ::TSD::FillArchive* temp = tschchartseriesbubblesymbolfill_;
  tschchartseriesbubblesymbolfill_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesbubblesymbolfill(::TSD::FillArchive* tschchartseriesbubblesymbolfill) {
  delete tschchartseriesbubblesymbolfill_;
  tschchartseriesbubblesymbolfill_ = tschchartseriesbubblesymbolfill;
  if (tschchartseriesbubblesymbolfill) {
    set_has_tschchartseriesbubblesymbolfill();
  } else {
    clear_has_tschchartseriesbubblesymbolfill();
  }
}

// optional .TSD.FillArchive tschchartserieslinesymbolfill = 56;
inline bool ChartSeriesStyleArchive::has_tschchartserieslinesymbolfill() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartserieslinesymbolfill() {
  _has_bits_[1] |= 0x00800000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartserieslinesymbolfill() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartserieslinesymbolfill() {
  if (tschchartserieslinesymbolfill_ != NULL) tschchartserieslinesymbolfill_->::TSD::FillArchive::Clear();
  clear_has_tschchartserieslinesymbolfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartserieslinesymbolfill() const {
  return tschchartserieslinesymbolfill_ != NULL ? *tschchartserieslinesymbolfill_ : *default_instance_->tschchartserieslinesymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartserieslinesymbolfill() {
  set_has_tschchartserieslinesymbolfill();
  if (tschchartserieslinesymbolfill_ == NULL) tschchartserieslinesymbolfill_ = new ::TSD::FillArchive;
  return tschchartserieslinesymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartserieslinesymbolfill() {
  clear_has_tschchartserieslinesymbolfill();
  ::TSD::FillArchive* temp = tschchartserieslinesymbolfill_;
  tschchartserieslinesymbolfill_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartserieslinesymbolfill(::TSD::FillArchive* tschchartserieslinesymbolfill) {
  delete tschchartserieslinesymbolfill_;
  tschchartserieslinesymbolfill_ = tschchartserieslinesymbolfill;
  if (tschchartserieslinesymbolfill) {
    set_has_tschchartserieslinesymbolfill();
  } else {
    clear_has_tschchartserieslinesymbolfill();
  }
}

// optional .TSD.FillArchive tschchartseriesmixedareasymbolfill = 57;
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareasymbolfill() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesmixedareasymbolfill() {
  _has_bits_[1] |= 0x01000000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesmixedareasymbolfill() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedareasymbolfill() {
  if (tschchartseriesmixedareasymbolfill_ != NULL) tschchartseriesmixedareasymbolfill_->::TSD::FillArchive::Clear();
  clear_has_tschchartseriesmixedareasymbolfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesmixedareasymbolfill() const {
  return tschchartseriesmixedareasymbolfill_ != NULL ? *tschchartseriesmixedareasymbolfill_ : *default_instance_->tschchartseriesmixedareasymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedareasymbolfill() {
  set_has_tschchartseriesmixedareasymbolfill();
  if (tschchartseriesmixedareasymbolfill_ == NULL) tschchartseriesmixedareasymbolfill_ = new ::TSD::FillArchive;
  return tschchartseriesmixedareasymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedareasymbolfill() {
  clear_has_tschchartseriesmixedareasymbolfill();
  ::TSD::FillArchive* temp = tschchartseriesmixedareasymbolfill_;
  tschchartseriesmixedareasymbolfill_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedareasymbolfill(::TSD::FillArchive* tschchartseriesmixedareasymbolfill) {
  delete tschchartseriesmixedareasymbolfill_;
  tschchartseriesmixedareasymbolfill_ = tschchartseriesmixedareasymbolfill;
  if (tschchartseriesmixedareasymbolfill) {
    set_has_tschchartseriesmixedareasymbolfill();
  } else {
    clear_has_tschchartseriesmixedareasymbolfill();
  }
}

// optional .TSD.FillArchive tschchartseriesmixedlinesymbolfill = 58;
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlinesymbolfill() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesmixedlinesymbolfill() {
  _has_bits_[1] |= 0x02000000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesmixedlinesymbolfill() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinesymbolfill() {
  if (tschchartseriesmixedlinesymbolfill_ != NULL) tschchartseriesmixedlinesymbolfill_->::TSD::FillArchive::Clear();
  clear_has_tschchartseriesmixedlinesymbolfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesmixedlinesymbolfill() const {
  return tschchartseriesmixedlinesymbolfill_ != NULL ? *tschchartseriesmixedlinesymbolfill_ : *default_instance_->tschchartseriesmixedlinesymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedlinesymbolfill() {
  set_has_tschchartseriesmixedlinesymbolfill();
  if (tschchartseriesmixedlinesymbolfill_ == NULL) tschchartseriesmixedlinesymbolfill_ = new ::TSD::FillArchive;
  return tschchartseriesmixedlinesymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedlinesymbolfill() {
  clear_has_tschchartseriesmixedlinesymbolfill();
  ::TSD::FillArchive* temp = tschchartseriesmixedlinesymbolfill_;
  tschchartseriesmixedlinesymbolfill_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedlinesymbolfill(::TSD::FillArchive* tschchartseriesmixedlinesymbolfill) {
  delete tschchartseriesmixedlinesymbolfill_;
  tschchartseriesmixedlinesymbolfill_ = tschchartseriesmixedlinesymbolfill;
  if (tschchartseriesmixedlinesymbolfill) {
    set_has_tschchartseriesmixedlinesymbolfill();
  } else {
    clear_has_tschchartseriesmixedlinesymbolfill();
  }
}

// optional .TSD.FillArchive tschchartseriesscattersymbolfill = 59;
inline bool ChartSeriesStyleArchive::has_tschchartseriesscattersymbolfill() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesscattersymbolfill() {
  _has_bits_[1] |= 0x04000000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesscattersymbolfill() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesscattersymbolfill() {
  if (tschchartseriesscattersymbolfill_ != NULL) tschchartseriesscattersymbolfill_->::TSD::FillArchive::Clear();
  clear_has_tschchartseriesscattersymbolfill();
}
inline const ::TSD::FillArchive& ChartSeriesStyleArchive::tschchartseriesscattersymbolfill() const {
  return tschchartseriesscattersymbolfill_ != NULL ? *tschchartseriesscattersymbolfill_ : *default_instance_->tschchartseriesscattersymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::mutable_tschchartseriesscattersymbolfill() {
  set_has_tschchartseriesscattersymbolfill();
  if (tschchartseriesscattersymbolfill_ == NULL) tschchartseriesscattersymbolfill_ = new ::TSD::FillArchive;
  return tschchartseriesscattersymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesStyleArchive::release_tschchartseriesscattersymbolfill() {
  clear_has_tschchartseriesscattersymbolfill();
  ::TSD::FillArchive* temp = tschchartseriesscattersymbolfill_;
  tschchartseriesscattersymbolfill_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesscattersymbolfill(::TSD::FillArchive* tschchartseriesscattersymbolfill) {
  delete tschchartseriesscattersymbolfill_;
  tschchartseriesscattersymbolfill_ = tschchartseriesscattersymbolfill;
  if (tschchartseriesscattersymbolfill) {
    set_has_tschchartseriesscattersymbolfill();
  } else {
    clear_has_tschchartseriesscattersymbolfill();
  }
}

// optional bool tschchartseriesareasymbolfilluseseriesfill = 60;
inline bool ChartSeriesStyleArchive::has_tschchartseriesareasymbolfilluseseriesfill() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesareasymbolfilluseseriesfill() {
  _has_bits_[1] |= 0x08000000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesareasymbolfilluseseriesfill() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesareasymbolfilluseseriesfill() {
  tschchartseriesareasymbolfilluseseriesfill_ = false;
  clear_has_tschchartseriesareasymbolfilluseseriesfill();
}
inline bool ChartSeriesStyleArchive::tschchartseriesareasymbolfilluseseriesfill() const {
  return tschchartseriesareasymbolfilluseseriesfill_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesareasymbolfilluseseriesfill(bool value) {
  set_has_tschchartseriesareasymbolfilluseseriesfill();
  tschchartseriesareasymbolfilluseseriesfill_ = value;
}

// optional bool tschchartserieslinesymbolfilluseseriesfill = 61;
inline bool ChartSeriesStyleArchive::has_tschchartserieslinesymbolfilluseseriesfill() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartserieslinesymbolfilluseseriesfill() {
  _has_bits_[1] |= 0x10000000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartserieslinesymbolfilluseseriesfill() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartserieslinesymbolfilluseseriesfill() {
  tschchartserieslinesymbolfilluseseriesfill_ = false;
  clear_has_tschchartserieslinesymbolfilluseseriesfill();
}
inline bool ChartSeriesStyleArchive::tschchartserieslinesymbolfilluseseriesfill() const {
  return tschchartserieslinesymbolfilluseseriesfill_;
}
inline void ChartSeriesStyleArchive::set_tschchartserieslinesymbolfilluseseriesfill(bool value) {
  set_has_tschchartserieslinesymbolfilluseseriesfill();
  tschchartserieslinesymbolfilluseseriesfill_ = value;
}

// optional bool tschchartseriesmixedareasymbolfilluseseriesfill = 62;
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareasymbolfilluseseriesfill() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesmixedareasymbolfilluseseriesfill() {
  _has_bits_[1] |= 0x20000000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesmixedareasymbolfilluseseriesfill() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedareasymbolfilluseseriesfill() {
  tschchartseriesmixedareasymbolfilluseseriesfill_ = false;
  clear_has_tschchartseriesmixedareasymbolfilluseseriesfill();
}
inline bool ChartSeriesStyleArchive::tschchartseriesmixedareasymbolfilluseseriesfill() const {
  return tschchartseriesmixedareasymbolfilluseseriesfill_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedareasymbolfilluseseriesfill(bool value) {
  set_has_tschchartseriesmixedareasymbolfilluseseriesfill();
  tschchartseriesmixedareasymbolfilluseseriesfill_ = value;
}

// optional bool tschchartseriesmixedlinesymbolfilluseseriesfill = 63;
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlinesymbolfilluseseriesfill() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesmixedlinesymbolfilluseseriesfill() {
  _has_bits_[1] |= 0x40000000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesmixedlinesymbolfilluseseriesfill() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinesymbolfilluseseriesfill() {
  tschchartseriesmixedlinesymbolfilluseseriesfill_ = false;
  clear_has_tschchartseriesmixedlinesymbolfilluseseriesfill();
}
inline bool ChartSeriesStyleArchive::tschchartseriesmixedlinesymbolfilluseseriesfill() const {
  return tschchartseriesmixedlinesymbolfilluseseriesfill_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedlinesymbolfilluseseriesfill(bool value) {
  set_has_tschchartseriesmixedlinesymbolfilluseseriesfill();
  tschchartseriesmixedlinesymbolfilluseseriesfill_ = value;
}

// optional bool tschchartseriesareasymbolfilluseseriesstroke = 64;
inline bool ChartSeriesStyleArchive::has_tschchartseriesareasymbolfilluseseriesstroke() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesareasymbolfilluseseriesstroke() {
  _has_bits_[1] |= 0x80000000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesareasymbolfilluseseriesstroke() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesareasymbolfilluseseriesstroke() {
  tschchartseriesareasymbolfilluseseriesstroke_ = false;
  clear_has_tschchartseriesareasymbolfilluseseriesstroke();
}
inline bool ChartSeriesStyleArchive::tschchartseriesareasymbolfilluseseriesstroke() const {
  return tschchartseriesareasymbolfilluseseriesstroke_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesareasymbolfilluseseriesstroke(bool value) {
  set_has_tschchartseriesareasymbolfilluseseriesstroke();
  tschchartseriesareasymbolfilluseseriesstroke_ = value;
}

// optional bool tschchartseriesbubblesymbolfilluseseriesstroke = 65;
inline bool ChartSeriesStyleArchive::has_tschchartseriesbubblesymbolfilluseseriesstroke() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesbubblesymbolfilluseseriesstroke() {
  _has_bits_[2] |= 0x00000001u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesbubblesymbolfilluseseriesstroke() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesbubblesymbolfilluseseriesstroke() {
  tschchartseriesbubblesymbolfilluseseriesstroke_ = false;
  clear_has_tschchartseriesbubblesymbolfilluseseriesstroke();
}
inline bool ChartSeriesStyleArchive::tschchartseriesbubblesymbolfilluseseriesstroke() const {
  return tschchartseriesbubblesymbolfilluseseriesstroke_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesbubblesymbolfilluseseriesstroke(bool value) {
  set_has_tschchartseriesbubblesymbolfilluseseriesstroke();
  tschchartseriesbubblesymbolfilluseseriesstroke_ = value;
}

// optional bool tschchartserieslinesymbolfilluseseriesstroke = 66;
inline bool ChartSeriesStyleArchive::has_tschchartserieslinesymbolfilluseseriesstroke() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartserieslinesymbolfilluseseriesstroke() {
  _has_bits_[2] |= 0x00000002u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartserieslinesymbolfilluseseriesstroke() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void ChartSeriesStyleArchive::clear_tschchartserieslinesymbolfilluseseriesstroke() {
  tschchartserieslinesymbolfilluseseriesstroke_ = false;
  clear_has_tschchartserieslinesymbolfilluseseriesstroke();
}
inline bool ChartSeriesStyleArchive::tschchartserieslinesymbolfilluseseriesstroke() const {
  return tschchartserieslinesymbolfilluseseriesstroke_;
}
inline void ChartSeriesStyleArchive::set_tschchartserieslinesymbolfilluseseriesstroke(bool value) {
  set_has_tschchartserieslinesymbolfilluseseriesstroke();
  tschchartserieslinesymbolfilluseseriesstroke_ = value;
}

// optional bool tschchartseriesmixedareasymbolfilluseseriesstroke = 67;
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareasymbolfilluseseriesstroke() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesmixedareasymbolfilluseseriesstroke() {
  _has_bits_[2] |= 0x00000004u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesmixedareasymbolfilluseseriesstroke() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedareasymbolfilluseseriesstroke() {
  tschchartseriesmixedareasymbolfilluseseriesstroke_ = false;
  clear_has_tschchartseriesmixedareasymbolfilluseseriesstroke();
}
inline bool ChartSeriesStyleArchive::tschchartseriesmixedareasymbolfilluseseriesstroke() const {
  return tschchartseriesmixedareasymbolfilluseseriesstroke_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedareasymbolfilluseseriesstroke(bool value) {
  set_has_tschchartseriesmixedareasymbolfilluseseriesstroke();
  tschchartseriesmixedareasymbolfilluseseriesstroke_ = value;
}

// optional bool tschchartseriesmixedlinesymbolfilluseseriesstroke = 68;
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlinesymbolfilluseseriesstroke() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesmixedlinesymbolfilluseseriesstroke() {
  _has_bits_[2] |= 0x00000008u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesmixedlinesymbolfilluseseriesstroke() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinesymbolfilluseseriesstroke() {
  tschchartseriesmixedlinesymbolfilluseseriesstroke_ = false;
  clear_has_tschchartseriesmixedlinesymbolfilluseseriesstroke();
}
inline bool ChartSeriesStyleArchive::tschchartseriesmixedlinesymbolfilluseseriesstroke() const {
  return tschchartseriesmixedlinesymbolfilluseseriesstroke_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedlinesymbolfilluseseriesstroke(bool value) {
  set_has_tschchartseriesmixedlinesymbolfilluseseriesstroke();
  tschchartseriesmixedlinesymbolfilluseseriesstroke_ = value;
}

// optional bool tschchartseriesscattersymbolfilluseseriesstroke = 69;
inline bool ChartSeriesStyleArchive::has_tschchartseriesscattersymbolfilluseseriesstroke() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesscattersymbolfilluseseriesstroke() {
  _has_bits_[2] |= 0x00000010u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesscattersymbolfilluseseriesstroke() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesscattersymbolfilluseseriesstroke() {
  tschchartseriesscattersymbolfilluseseriesstroke_ = false;
  clear_has_tschchartseriesscattersymbolfilluseseriesstroke();
}
inline bool ChartSeriesStyleArchive::tschchartseriesscattersymbolfilluseseriesstroke() const {
  return tschchartseriesscattersymbolfilluseseriesstroke_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesscattersymbolfilluseseriesstroke(bool value) {
  set_has_tschchartseriesscattersymbolfilluseseriesstroke();
  tschchartseriesscattersymbolfilluseseriesstroke_ = value;
}

// optional float tschchartseriesareasymbolsize = 70;
inline bool ChartSeriesStyleArchive::has_tschchartseriesareasymbolsize() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesareasymbolsize() {
  _has_bits_[2] |= 0x00000020u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesareasymbolsize() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesareasymbolsize() {
  tschchartseriesareasymbolsize_ = 0;
  clear_has_tschchartseriesareasymbolsize();
}
inline float ChartSeriesStyleArchive::tschchartseriesareasymbolsize() const {
  return tschchartseriesareasymbolsize_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesareasymbolsize(float value) {
  set_has_tschchartseriesareasymbolsize();
  tschchartseriesareasymbolsize_ = value;
}

// optional float tschchartserieslinesymbolsize = 71;
inline bool ChartSeriesStyleArchive::has_tschchartserieslinesymbolsize() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartserieslinesymbolsize() {
  _has_bits_[2] |= 0x00000040u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartserieslinesymbolsize() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void ChartSeriesStyleArchive::clear_tschchartserieslinesymbolsize() {
  tschchartserieslinesymbolsize_ = 0;
  clear_has_tschchartserieslinesymbolsize();
}
inline float ChartSeriesStyleArchive::tschchartserieslinesymbolsize() const {
  return tschchartserieslinesymbolsize_;
}
inline void ChartSeriesStyleArchive::set_tschchartserieslinesymbolsize(float value) {
  set_has_tschchartserieslinesymbolsize();
  tschchartserieslinesymbolsize_ = value;
}

// optional float tschchartseriesmixedareasymbolsize = 72;
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareasymbolsize() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesmixedareasymbolsize() {
  _has_bits_[2] |= 0x00000080u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesmixedareasymbolsize() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedareasymbolsize() {
  tschchartseriesmixedareasymbolsize_ = 0;
  clear_has_tschchartseriesmixedareasymbolsize();
}
inline float ChartSeriesStyleArchive::tschchartseriesmixedareasymbolsize() const {
  return tschchartseriesmixedareasymbolsize_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedareasymbolsize(float value) {
  set_has_tschchartseriesmixedareasymbolsize();
  tschchartseriesmixedareasymbolsize_ = value;
}

// optional float tschchartseriesmixedlinesymbolsize = 73;
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlinesymbolsize() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesmixedlinesymbolsize() {
  _has_bits_[2] |= 0x00000100u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesmixedlinesymbolsize() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinesymbolsize() {
  tschchartseriesmixedlinesymbolsize_ = 0;
  clear_has_tschchartseriesmixedlinesymbolsize();
}
inline float ChartSeriesStyleArchive::tschchartseriesmixedlinesymbolsize() const {
  return tschchartseriesmixedlinesymbolsize_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedlinesymbolsize(float value) {
  set_has_tschchartseriesmixedlinesymbolsize();
  tschchartseriesmixedlinesymbolsize_ = value;
}

// optional float tschchartseriesscattersymbolsize = 74;
inline bool ChartSeriesStyleArchive::has_tschchartseriesscattersymbolsize() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesscattersymbolsize() {
  _has_bits_[2] |= 0x00000200u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesscattersymbolsize() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesscattersymbolsize() {
  tschchartseriesscattersymbolsize_ = 0;
  clear_has_tschchartseriesscattersymbolsize();
}
inline float ChartSeriesStyleArchive::tschchartseriesscattersymbolsize() const {
  return tschchartseriesscattersymbolsize_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesscattersymbolsize(float value) {
  set_has_tschchartseriesscattersymbolsize();
  tschchartseriesscattersymbolsize_ = value;
}

// optional .TSD.StrokeArchive tschchartseriesareasymbolstroke = 75;
inline bool ChartSeriesStyleArchive::has_tschchartseriesareasymbolstroke() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesareasymbolstroke() {
  _has_bits_[2] |= 0x00000400u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesareasymbolstroke() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesareasymbolstroke() {
  if (tschchartseriesareasymbolstroke_ != NULL) tschchartseriesareasymbolstroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartseriesareasymbolstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesareasymbolstroke() const {
  return tschchartseriesareasymbolstroke_ != NULL ? *tschchartseriesareasymbolstroke_ : *default_instance_->tschchartseriesareasymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesareasymbolstroke() {
  set_has_tschchartseriesareasymbolstroke();
  if (tschchartseriesareasymbolstroke_ == NULL) tschchartseriesareasymbolstroke_ = new ::TSD::StrokeArchive;
  return tschchartseriesareasymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesareasymbolstroke() {
  clear_has_tschchartseriesareasymbolstroke();
  ::TSD::StrokeArchive* temp = tschchartseriesareasymbolstroke_;
  tschchartseriesareasymbolstroke_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesareasymbolstroke(::TSD::StrokeArchive* tschchartseriesareasymbolstroke) {
  delete tschchartseriesareasymbolstroke_;
  tschchartseriesareasymbolstroke_ = tschchartseriesareasymbolstroke;
  if (tschchartseriesareasymbolstroke) {
    set_has_tschchartseriesareasymbolstroke();
  } else {
    clear_has_tschchartseriesareasymbolstroke();
  }
}

// optional .TSD.StrokeArchive tschchartseriesbubblesymbolstroke = 76;
inline bool ChartSeriesStyleArchive::has_tschchartseriesbubblesymbolstroke() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesbubblesymbolstroke() {
  _has_bits_[2] |= 0x00000800u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesbubblesymbolstroke() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesbubblesymbolstroke() {
  if (tschchartseriesbubblesymbolstroke_ != NULL) tschchartseriesbubblesymbolstroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartseriesbubblesymbolstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesbubblesymbolstroke() const {
  return tschchartseriesbubblesymbolstroke_ != NULL ? *tschchartseriesbubblesymbolstroke_ : *default_instance_->tschchartseriesbubblesymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesbubblesymbolstroke() {
  set_has_tschchartseriesbubblesymbolstroke();
  if (tschchartseriesbubblesymbolstroke_ == NULL) tschchartseriesbubblesymbolstroke_ = new ::TSD::StrokeArchive;
  return tschchartseriesbubblesymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesbubblesymbolstroke() {
  clear_has_tschchartseriesbubblesymbolstroke();
  ::TSD::StrokeArchive* temp = tschchartseriesbubblesymbolstroke_;
  tschchartseriesbubblesymbolstroke_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesbubblesymbolstroke(::TSD::StrokeArchive* tschchartseriesbubblesymbolstroke) {
  delete tschchartseriesbubblesymbolstroke_;
  tschchartseriesbubblesymbolstroke_ = tschchartseriesbubblesymbolstroke;
  if (tschchartseriesbubblesymbolstroke) {
    set_has_tschchartseriesbubblesymbolstroke();
  } else {
    clear_has_tschchartseriesbubblesymbolstroke();
  }
}

// optional .TSD.StrokeArchive tschchartserieslinesymbolstroke = 77;
inline bool ChartSeriesStyleArchive::has_tschchartserieslinesymbolstroke() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartserieslinesymbolstroke() {
  _has_bits_[2] |= 0x00001000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartserieslinesymbolstroke() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartserieslinesymbolstroke() {
  if (tschchartserieslinesymbolstroke_ != NULL) tschchartserieslinesymbolstroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartserieslinesymbolstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartserieslinesymbolstroke() const {
  return tschchartserieslinesymbolstroke_ != NULL ? *tschchartserieslinesymbolstroke_ : *default_instance_->tschchartserieslinesymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartserieslinesymbolstroke() {
  set_has_tschchartserieslinesymbolstroke();
  if (tschchartserieslinesymbolstroke_ == NULL) tschchartserieslinesymbolstroke_ = new ::TSD::StrokeArchive;
  return tschchartserieslinesymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartserieslinesymbolstroke() {
  clear_has_tschchartserieslinesymbolstroke();
  ::TSD::StrokeArchive* temp = tschchartserieslinesymbolstroke_;
  tschchartserieslinesymbolstroke_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartserieslinesymbolstroke(::TSD::StrokeArchive* tschchartserieslinesymbolstroke) {
  delete tschchartserieslinesymbolstroke_;
  tschchartserieslinesymbolstroke_ = tschchartserieslinesymbolstroke;
  if (tschchartserieslinesymbolstroke) {
    set_has_tschchartserieslinesymbolstroke();
  } else {
    clear_has_tschchartserieslinesymbolstroke();
  }
}

// optional .TSD.StrokeArchive tschchartseriesmixedareasymbolstroke = 78;
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareasymbolstroke() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesmixedareasymbolstroke() {
  _has_bits_[2] |= 0x00002000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesmixedareasymbolstroke() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedareasymbolstroke() {
  if (tschchartseriesmixedareasymbolstroke_ != NULL) tschchartseriesmixedareasymbolstroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartseriesmixedareasymbolstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesmixedareasymbolstroke() const {
  return tschchartseriesmixedareasymbolstroke_ != NULL ? *tschchartseriesmixedareasymbolstroke_ : *default_instance_->tschchartseriesmixedareasymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedareasymbolstroke() {
  set_has_tschchartseriesmixedareasymbolstroke();
  if (tschchartseriesmixedareasymbolstroke_ == NULL) tschchartseriesmixedareasymbolstroke_ = new ::TSD::StrokeArchive;
  return tschchartseriesmixedareasymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedareasymbolstroke() {
  clear_has_tschchartseriesmixedareasymbolstroke();
  ::TSD::StrokeArchive* temp = tschchartseriesmixedareasymbolstroke_;
  tschchartseriesmixedareasymbolstroke_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedareasymbolstroke(::TSD::StrokeArchive* tschchartseriesmixedareasymbolstroke) {
  delete tschchartseriesmixedareasymbolstroke_;
  tschchartseriesmixedareasymbolstroke_ = tschchartseriesmixedareasymbolstroke;
  if (tschchartseriesmixedareasymbolstroke) {
    set_has_tschchartseriesmixedareasymbolstroke();
  } else {
    clear_has_tschchartseriesmixedareasymbolstroke();
  }
}

// optional .TSD.StrokeArchive tschchartseriesmixedlinesymbolstroke = 79;
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlinesymbolstroke() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesmixedlinesymbolstroke() {
  _has_bits_[2] |= 0x00004000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesmixedlinesymbolstroke() {
  _has_bits_[2] &= ~0x00004000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinesymbolstroke() {
  if (tschchartseriesmixedlinesymbolstroke_ != NULL) tschchartseriesmixedlinesymbolstroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartseriesmixedlinesymbolstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesmixedlinesymbolstroke() const {
  return tschchartseriesmixedlinesymbolstroke_ != NULL ? *tschchartseriesmixedlinesymbolstroke_ : *default_instance_->tschchartseriesmixedlinesymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesmixedlinesymbolstroke() {
  set_has_tschchartseriesmixedlinesymbolstroke();
  if (tschchartseriesmixedlinesymbolstroke_ == NULL) tschchartseriesmixedlinesymbolstroke_ = new ::TSD::StrokeArchive;
  return tschchartseriesmixedlinesymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesmixedlinesymbolstroke() {
  clear_has_tschchartseriesmixedlinesymbolstroke();
  ::TSD::StrokeArchive* temp = tschchartseriesmixedlinesymbolstroke_;
  tschchartseriesmixedlinesymbolstroke_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesmixedlinesymbolstroke(::TSD::StrokeArchive* tschchartseriesmixedlinesymbolstroke) {
  delete tschchartseriesmixedlinesymbolstroke_;
  tschchartseriesmixedlinesymbolstroke_ = tschchartseriesmixedlinesymbolstroke;
  if (tschchartseriesmixedlinesymbolstroke) {
    set_has_tschchartseriesmixedlinesymbolstroke();
  } else {
    clear_has_tschchartseriesmixedlinesymbolstroke();
  }
}

// optional .TSD.StrokeArchive tschchartseriesscattersymbolstroke = 80;
inline bool ChartSeriesStyleArchive::has_tschchartseriesscattersymbolstroke() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesscattersymbolstroke() {
  _has_bits_[2] |= 0x00008000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesscattersymbolstroke() {
  _has_bits_[2] &= ~0x00008000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesscattersymbolstroke() {
  if (tschchartseriesscattersymbolstroke_ != NULL) tschchartseriesscattersymbolstroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartseriesscattersymbolstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesscattersymbolstroke() const {
  return tschchartseriesscattersymbolstroke_ != NULL ? *tschchartseriesscattersymbolstroke_ : *default_instance_->tschchartseriesscattersymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesscattersymbolstroke() {
  set_has_tschchartseriesscattersymbolstroke();
  if (tschchartseriesscattersymbolstroke_ == NULL) tschchartseriesscattersymbolstroke_ = new ::TSD::StrokeArchive;
  return tschchartseriesscattersymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesscattersymbolstroke() {
  clear_has_tschchartseriesscattersymbolstroke();
  ::TSD::StrokeArchive* temp = tschchartseriesscattersymbolstroke_;
  tschchartseriesscattersymbolstroke_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesscattersymbolstroke(::TSD::StrokeArchive* tschchartseriesscattersymbolstroke) {
  delete tschchartseriesscattersymbolstroke_;
  tschchartseriesscattersymbolstroke_ = tschchartseriesscattersymbolstroke;
  if (tschchartseriesscattersymbolstroke) {
    set_has_tschchartseriesscattersymbolstroke();
  } else {
    clear_has_tschchartseriesscattersymbolstroke();
  }
}

// optional float tschchartseriesdefaulttrendlineequationopacity = 81;
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulttrendlineequationopacity() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesdefaulttrendlineequationopacity() {
  _has_bits_[2] |= 0x00010000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesdefaulttrendlineequationopacity() {
  _has_bits_[2] &= ~0x00010000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaulttrendlineequationopacity() {
  tschchartseriesdefaulttrendlineequationopacity_ = 0;
  clear_has_tschchartseriesdefaulttrendlineequationopacity();
}
inline float ChartSeriesStyleArchive::tschchartseriesdefaulttrendlineequationopacity() const {
  return tschchartseriesdefaulttrendlineequationopacity_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaulttrendlineequationopacity(float value) {
  set_has_tschchartseriesdefaulttrendlineequationopacity();
  tschchartseriesdefaulttrendlineequationopacity_ = value;
}

// optional int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex = 82;
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulttrendlineequationparagraphstyleindex() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesdefaulttrendlineequationparagraphstyleindex() {
  _has_bits_[2] |= 0x00020000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesdefaulttrendlineequationparagraphstyleindex() {
  _has_bits_[2] &= ~0x00020000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaulttrendlineequationparagraphstyleindex() {
  tschchartseriesdefaulttrendlineequationparagraphstyleindex_ = 0;
  clear_has_tschchartseriesdefaulttrendlineequationparagraphstyleindex();
}
inline ::google::protobuf::int32 ChartSeriesStyleArchive::tschchartseriesdefaulttrendlineequationparagraphstyleindex() const {
  return tschchartseriesdefaulttrendlineequationparagraphstyleindex_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaulttrendlineequationparagraphstyleindex(::google::protobuf::int32 value) {
  set_has_tschchartseriesdefaulttrendlineequationparagraphstyleindex();
  tschchartseriesdefaulttrendlineequationparagraphstyleindex_ = value;
}

// optional float tschchartseriesdefaulttrendlinersquaredopacity = 83;
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulttrendlinersquaredopacity() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesdefaulttrendlinersquaredopacity() {
  _has_bits_[2] |= 0x00040000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesdefaulttrendlinersquaredopacity() {
  _has_bits_[2] &= ~0x00040000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaulttrendlinersquaredopacity() {
  tschchartseriesdefaulttrendlinersquaredopacity_ = 0;
  clear_has_tschchartseriesdefaulttrendlinersquaredopacity();
}
inline float ChartSeriesStyleArchive::tschchartseriesdefaulttrendlinersquaredopacity() const {
  return tschchartseriesdefaulttrendlinersquaredopacity_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaulttrendlinersquaredopacity(float value) {
  set_has_tschchartseriesdefaulttrendlinersquaredopacity();
  tschchartseriesdefaulttrendlinersquaredopacity_ = value;
}

// optional int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex = 84;
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() {
  _has_bits_[2] |= 0x00080000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() {
  _has_bits_[2] &= ~0x00080000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() {
  tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_ = 0;
  clear_has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex();
}
inline ::google::protobuf::int32 ChartSeriesStyleArchive::tschchartseriesdefaulttrendlinersquaredparagraphstyleindex() const {
  return tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(::google::protobuf::int32 value) {
  set_has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex();
  tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_ = value;
}

// optional .TSD.ShadowArchive tschchartseriesdefaulttrendlineshadow = 85;
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulttrendlineshadow() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesdefaulttrendlineshadow() {
  _has_bits_[2] |= 0x00100000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesdefaulttrendlineshadow() {
  _has_bits_[2] &= ~0x00100000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaulttrendlineshadow() {
  if (tschchartseriesdefaulttrendlineshadow_ != NULL) tschchartseriesdefaulttrendlineshadow_->::TSD::ShadowArchive::Clear();
  clear_has_tschchartseriesdefaulttrendlineshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesStyleArchive::tschchartseriesdefaulttrendlineshadow() const {
  return tschchartseriesdefaulttrendlineshadow_ != NULL ? *tschchartseriesdefaulttrendlineshadow_ : *default_instance_->tschchartseriesdefaulttrendlineshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaulttrendlineshadow() {
  set_has_tschchartseriesdefaulttrendlineshadow();
  if (tschchartseriesdefaulttrendlineshadow_ == NULL) tschchartseriesdefaulttrendlineshadow_ = new ::TSD::ShadowArchive;
  return tschchartseriesdefaulttrendlineshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaulttrendlineshadow() {
  clear_has_tschchartseriesdefaulttrendlineshadow();
  ::TSD::ShadowArchive* temp = tschchartseriesdefaulttrendlineshadow_;
  tschchartseriesdefaulttrendlineshadow_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaulttrendlineshadow(::TSD::ShadowArchive* tschchartseriesdefaulttrendlineshadow) {
  delete tschchartseriesdefaulttrendlineshadow_;
  tschchartseriesdefaulttrendlineshadow_ = tschchartseriesdefaulttrendlineshadow;
  if (tschchartseriesdefaulttrendlineshadow) {
    set_has_tschchartseriesdefaulttrendlineshadow();
  } else {
    clear_has_tschchartseriesdefaulttrendlineshadow();
  }
}

// optional .TSD.StrokeArchive tschchartseriesdefaulttrendlinestroke = 86;
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaulttrendlinestroke() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesdefaulttrendlinestroke() {
  _has_bits_[2] |= 0x00200000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesdefaulttrendlinestroke() {
  _has_bits_[2] &= ~0x00200000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaulttrendlinestroke() {
  if (tschchartseriesdefaulttrendlinestroke_ != NULL) tschchartseriesdefaulttrendlinestroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartseriesdefaulttrendlinestroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesStyleArchive::tschchartseriesdefaulttrendlinestroke() const {
  return tschchartseriesdefaulttrendlinestroke_ != NULL ? *tschchartseriesdefaulttrendlinestroke_ : *default_instance_->tschchartseriesdefaulttrendlinestroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::mutable_tschchartseriesdefaulttrendlinestroke() {
  set_has_tschchartseriesdefaulttrendlinestroke();
  if (tschchartseriesdefaulttrendlinestroke_ == NULL) tschchartseriesdefaulttrendlinestroke_ = new ::TSD::StrokeArchive;
  return tschchartseriesdefaulttrendlinestroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesStyleArchive::release_tschchartseriesdefaulttrendlinestroke() {
  clear_has_tschchartseriesdefaulttrendlinestroke();
  ::TSD::StrokeArchive* temp = tschchartseriesdefaulttrendlinestroke_;
  tschchartseriesdefaulttrendlinestroke_ = NULL;
  return temp;
}
inline void ChartSeriesStyleArchive::set_allocated_tschchartseriesdefaulttrendlinestroke(::TSD::StrokeArchive* tschchartseriesdefaulttrendlinestroke) {
  delete tschchartseriesdefaulttrendlinestroke_;
  tschchartseriesdefaulttrendlinestroke_ = tschchartseriesdefaulttrendlinestroke;
  if (tschchartseriesdefaulttrendlinestroke) {
    set_has_tschchartseriesdefaulttrendlinestroke();
  } else {
    clear_has_tschchartseriesdefaulttrendlinestroke();
  }
}

// optional int32 tschchartseriesareavaluelabelposition = 87;
inline bool ChartSeriesStyleArchive::has_tschchartseriesareavaluelabelposition() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesareavaluelabelposition() {
  _has_bits_[2] |= 0x00400000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesareavaluelabelposition() {
  _has_bits_[2] &= ~0x00400000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesareavaluelabelposition() {
  tschchartseriesareavaluelabelposition_ = 0;
  clear_has_tschchartseriesareavaluelabelposition();
}
inline ::google::protobuf::int32 ChartSeriesStyleArchive::tschchartseriesareavaluelabelposition() const {
  return tschchartseriesareavaluelabelposition_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesareavaluelabelposition(::google::protobuf::int32 value) {
  set_has_tschchartseriesareavaluelabelposition();
  tschchartseriesareavaluelabelposition_ = value;
}

// optional int32 tschchartseriesbarvaluelabelposition = 88;
inline bool ChartSeriesStyleArchive::has_tschchartseriesbarvaluelabelposition() const {
  return (_has_bits_[2] & 0x00800000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesbarvaluelabelposition() {
  _has_bits_[2] |= 0x00800000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesbarvaluelabelposition() {
  _has_bits_[2] &= ~0x00800000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesbarvaluelabelposition() {
  tschchartseriesbarvaluelabelposition_ = 0;
  clear_has_tschchartseriesbarvaluelabelposition();
}
inline ::google::protobuf::int32 ChartSeriesStyleArchive::tschchartseriesbarvaluelabelposition() const {
  return tschchartseriesbarvaluelabelposition_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesbarvaluelabelposition(::google::protobuf::int32 value) {
  set_has_tschchartseriesbarvaluelabelposition();
  tschchartseriesbarvaluelabelposition_ = value;
}

// optional int32 tschchartseriesbubblevaluelabelposition = 89;
inline bool ChartSeriesStyleArchive::has_tschchartseriesbubblevaluelabelposition() const {
  return (_has_bits_[2] & 0x01000000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesbubblevaluelabelposition() {
  _has_bits_[2] |= 0x01000000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesbubblevaluelabelposition() {
  _has_bits_[2] &= ~0x01000000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesbubblevaluelabelposition() {
  tschchartseriesbubblevaluelabelposition_ = 0;
  clear_has_tschchartseriesbubblevaluelabelposition();
}
inline ::google::protobuf::int32 ChartSeriesStyleArchive::tschchartseriesbubblevaluelabelposition() const {
  return tschchartseriesbubblevaluelabelposition_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesbubblevaluelabelposition(::google::protobuf::int32 value) {
  set_has_tschchartseriesbubblevaluelabelposition();
  tschchartseriesbubblevaluelabelposition_ = value;
}

// optional int32 tschchartseriesdefaultvaluelabelposition = 90;
inline bool ChartSeriesStyleArchive::has_tschchartseriesdefaultvaluelabelposition() const {
  return (_has_bits_[2] & 0x02000000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesdefaultvaluelabelposition() {
  _has_bits_[2] |= 0x02000000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesdefaultvaluelabelposition() {
  _has_bits_[2] &= ~0x02000000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesdefaultvaluelabelposition() {
  tschchartseriesdefaultvaluelabelposition_ = 0;
  clear_has_tschchartseriesdefaultvaluelabelposition();
}
inline ::google::protobuf::int32 ChartSeriesStyleArchive::tschchartseriesdefaultvaluelabelposition() const {
  return tschchartseriesdefaultvaluelabelposition_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesdefaultvaluelabelposition(::google::protobuf::int32 value) {
  set_has_tschchartseriesdefaultvaluelabelposition();
  tschchartseriesdefaultvaluelabelposition_ = value;
}

// optional int32 tschchartserieslinevaluelabelposition = 91;
inline bool ChartSeriesStyleArchive::has_tschchartserieslinevaluelabelposition() const {
  return (_has_bits_[2] & 0x04000000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartserieslinevaluelabelposition() {
  _has_bits_[2] |= 0x04000000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartserieslinevaluelabelposition() {
  _has_bits_[2] &= ~0x04000000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartserieslinevaluelabelposition() {
  tschchartserieslinevaluelabelposition_ = 0;
  clear_has_tschchartserieslinevaluelabelposition();
}
inline ::google::protobuf::int32 ChartSeriesStyleArchive::tschchartserieslinevaluelabelposition() const {
  return tschchartserieslinevaluelabelposition_;
}
inline void ChartSeriesStyleArchive::set_tschchartserieslinevaluelabelposition(::google::protobuf::int32 value) {
  set_has_tschchartserieslinevaluelabelposition();
  tschchartserieslinevaluelabelposition_ = value;
}

// optional int32 tschchartseriesmixedareavaluelabelposition = 92;
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedareavaluelabelposition() const {
  return (_has_bits_[2] & 0x08000000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesmixedareavaluelabelposition() {
  _has_bits_[2] |= 0x08000000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesmixedareavaluelabelposition() {
  _has_bits_[2] &= ~0x08000000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedareavaluelabelposition() {
  tschchartseriesmixedareavaluelabelposition_ = 0;
  clear_has_tschchartseriesmixedareavaluelabelposition();
}
inline ::google::protobuf::int32 ChartSeriesStyleArchive::tschchartseriesmixedareavaluelabelposition() const {
  return tschchartseriesmixedareavaluelabelposition_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedareavaluelabelposition(::google::protobuf::int32 value) {
  set_has_tschchartseriesmixedareavaluelabelposition();
  tschchartseriesmixedareavaluelabelposition_ = value;
}

// optional int32 tschchartseriesmixedcolumnvaluelabelposition = 93;
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedcolumnvaluelabelposition() const {
  return (_has_bits_[2] & 0x10000000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesmixedcolumnvaluelabelposition() {
  _has_bits_[2] |= 0x10000000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesmixedcolumnvaluelabelposition() {
  _has_bits_[2] &= ~0x10000000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedcolumnvaluelabelposition() {
  tschchartseriesmixedcolumnvaluelabelposition_ = 0;
  clear_has_tschchartseriesmixedcolumnvaluelabelposition();
}
inline ::google::protobuf::int32 ChartSeriesStyleArchive::tschchartseriesmixedcolumnvaluelabelposition() const {
  return tschchartseriesmixedcolumnvaluelabelposition_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedcolumnvaluelabelposition(::google::protobuf::int32 value) {
  set_has_tschchartseriesmixedcolumnvaluelabelposition();
  tschchartseriesmixedcolumnvaluelabelposition_ = value;
}

// optional int32 tschchartseriesmixedlinevaluelabelposition = 94;
inline bool ChartSeriesStyleArchive::has_tschchartseriesmixedlinevaluelabelposition() const {
  return (_has_bits_[2] & 0x20000000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesmixedlinevaluelabelposition() {
  _has_bits_[2] |= 0x20000000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesmixedlinevaluelabelposition() {
  _has_bits_[2] &= ~0x20000000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinevaluelabelposition() {
  tschchartseriesmixedlinevaluelabelposition_ = 0;
  clear_has_tschchartseriesmixedlinevaluelabelposition();
}
inline ::google::protobuf::int32 ChartSeriesStyleArchive::tschchartseriesmixedlinevaluelabelposition() const {
  return tschchartseriesmixedlinevaluelabelposition_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesmixedlinevaluelabelposition(::google::protobuf::int32 value) {
  set_has_tschchartseriesmixedlinevaluelabelposition();
  tschchartseriesmixedlinevaluelabelposition_ = value;
}

// optional int32 tschchartseriesscattervaluelabelposition = 95;
inline bool ChartSeriesStyleArchive::has_tschchartseriesscattervaluelabelposition() const {
  return (_has_bits_[2] & 0x40000000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesscattervaluelabelposition() {
  _has_bits_[2] |= 0x40000000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesscattervaluelabelposition() {
  _has_bits_[2] &= ~0x40000000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesscattervaluelabelposition() {
  tschchartseriesscattervaluelabelposition_ = 0;
  clear_has_tschchartseriesscattervaluelabelposition();
}
inline ::google::protobuf::int32 ChartSeriesStyleArchive::tschchartseriesscattervaluelabelposition() const {
  return tschchartseriesscattervaluelabelposition_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesscattervaluelabelposition(::google::protobuf::int32 value) {
  set_has_tschchartseriesscattervaluelabelposition();
  tschchartseriesscattervaluelabelposition_ = value;
}

// optional int32 tschchartseriesstackedareavaluelabelposition = 96;
inline bool ChartSeriesStyleArchive::has_tschchartseriesstackedareavaluelabelposition() const {
  return (_has_bits_[2] & 0x80000000u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesstackedareavaluelabelposition() {
  _has_bits_[2] |= 0x80000000u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesstackedareavaluelabelposition() {
  _has_bits_[2] &= ~0x80000000u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesstackedareavaluelabelposition() {
  tschchartseriesstackedareavaluelabelposition_ = 0;
  clear_has_tschchartseriesstackedareavaluelabelposition();
}
inline ::google::protobuf::int32 ChartSeriesStyleArchive::tschchartseriesstackedareavaluelabelposition() const {
  return tschchartseriesstackedareavaluelabelposition_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesstackedareavaluelabelposition(::google::protobuf::int32 value) {
  set_has_tschchartseriesstackedareavaluelabelposition();
  tschchartseriesstackedareavaluelabelposition_ = value;
}

// optional int32 tschchartseriesstackedbarvaluelabelposition = 97;
inline bool ChartSeriesStyleArchive::has_tschchartseriesstackedbarvaluelabelposition() const {
  return (_has_bits_[3] & 0x00000001u) != 0;
}
inline void ChartSeriesStyleArchive::set_has_tschchartseriesstackedbarvaluelabelposition() {
  _has_bits_[3] |= 0x00000001u;
}
inline void ChartSeriesStyleArchive::clear_has_tschchartseriesstackedbarvaluelabelposition() {
  _has_bits_[3] &= ~0x00000001u;
}
inline void ChartSeriesStyleArchive::clear_tschchartseriesstackedbarvaluelabelposition() {
  tschchartseriesstackedbarvaluelabelposition_ = 0;
  clear_has_tschchartseriesstackedbarvaluelabelposition();
}
inline ::google::protobuf::int32 ChartSeriesStyleArchive::tschchartseriesstackedbarvaluelabelposition() const {
  return tschchartseriesstackedbarvaluelabelposition_;
}
inline void ChartSeriesStyleArchive::set_tschchartseriesstackedbarvaluelabelposition(::google::protobuf::int32 value) {
  set_has_tschchartseriesstackedbarvaluelabelposition();
  tschchartseriesstackedbarvaluelabelposition_ = value;
}

// -------------------------------------------------------------------

// ChartSeriesNonStyleArchive

// optional float tschchartseriesbubbleadjustmentscale = 1;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbubbleadjustmentscale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesbubbleadjustmentscale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesbubbleadjustmentscale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbubbleadjustmentscale() {
  tschchartseriesbubbleadjustmentscale_ = 0;
  clear_has_tschchartseriesbubbleadjustmentscale();
}
inline float ChartSeriesNonStyleArchive::tschchartseriesbubbleadjustmentscale() const {
  return tschchartseriesbubbleadjustmentscale_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbubbleadjustmentscale(float value) {
  set_has_tschchartseriesbubbleadjustmentscale();
  tschchartseriesbubbleadjustmentscale_ = value;
}

// optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedata = 2;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarcustomnegativedata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaulterrorbarcustomnegativedata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaulterrorbarcustomnegativedata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarcustomnegativedata() {
  if (tschchartseriesdefaulterrorbarcustomnegativedata_ != NULL) tschchartseriesdefaulterrorbarcustomnegativedata_->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::Clear();
  clear_has_tschchartseriesdefaulterrorbarcustomnegativedata();
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarcustomnegativedata() const {
  return tschchartseriesdefaulterrorbarcustomnegativedata_ != NULL ? *tschchartseriesdefaulterrorbarcustomnegativedata_ : *default_instance_->tschchartseriesdefaulterrorbarcustomnegativedata_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefaulterrorbarcustomnegativedata() {
  set_has_tschchartseriesdefaulterrorbarcustomnegativedata();
  if (tschchartseriesdefaulterrorbarcustomnegativedata_ == NULL) tschchartseriesdefaulterrorbarcustomnegativedata_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive;
  return tschchartseriesdefaulterrorbarcustomnegativedata_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::release_tschchartseriesdefaulterrorbarcustomnegativedata() {
  clear_has_tschchartseriesdefaulterrorbarcustomnegativedata();
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartseriesdefaulterrorbarcustomnegativedata_;
  tschchartseriesdefaulterrorbarcustomnegativedata_ = NULL;
  return temp;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefaulterrorbarcustomnegativedata(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedata) {
  delete tschchartseriesdefaulterrorbarcustomnegativedata_;
  tschchartseriesdefaulterrorbarcustomnegativedata_ = tschchartseriesdefaulterrorbarcustomnegativedata;
  if (tschchartseriesdefaulterrorbarcustomnegativedata) {
    set_has_tschchartseriesdefaulterrorbarcustomnegativedata();
  } else {
    clear_has_tschchartseriesdefaulterrorbarcustomnegativedata();
  }
}

// optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedatascatterx = 3;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() {
  if (tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ != NULL) tschchartseriesdefaulterrorbarcustomnegativedatascatterx_->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::Clear();
  clear_has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarcustomnegativedatascatterx() const {
  return tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ != NULL ? *tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ : *default_instance_->tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() {
  set_has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();
  if (tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ == NULL) tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive;
  return tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::release_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() {
  clear_has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
  tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ = NULL;
  return temp;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefaulterrorbarcustomnegativedatascatterx(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustomnegativedatascatterx) {
  delete tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
  tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ = tschchartseriesdefaulterrorbarcustomnegativedatascatterx;
  if (tschchartseriesdefaulterrorbarcustomnegativedatascatterx) {
    set_has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();
  } else {
    clear_has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx();
  }
}

// optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedata = 4;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarcustompositivedata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaulterrorbarcustompositivedata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaulterrorbarcustompositivedata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarcustompositivedata() {
  if (tschchartseriesdefaulterrorbarcustompositivedata_ != NULL) tschchartseriesdefaulterrorbarcustompositivedata_->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::Clear();
  clear_has_tschchartseriesdefaulterrorbarcustompositivedata();
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarcustompositivedata() const {
  return tschchartseriesdefaulterrorbarcustompositivedata_ != NULL ? *tschchartseriesdefaulterrorbarcustompositivedata_ : *default_instance_->tschchartseriesdefaulterrorbarcustompositivedata_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefaulterrorbarcustompositivedata() {
  set_has_tschchartseriesdefaulterrorbarcustompositivedata();
  if (tschchartseriesdefaulterrorbarcustompositivedata_ == NULL) tschchartseriesdefaulterrorbarcustompositivedata_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive;
  return tschchartseriesdefaulterrorbarcustompositivedata_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::release_tschchartseriesdefaulterrorbarcustompositivedata() {
  clear_has_tschchartseriesdefaulterrorbarcustompositivedata();
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartseriesdefaulterrorbarcustompositivedata_;
  tschchartseriesdefaulterrorbarcustompositivedata_ = NULL;
  return temp;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefaulterrorbarcustompositivedata(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedata) {
  delete tschchartseriesdefaulterrorbarcustompositivedata_;
  tschchartseriesdefaulterrorbarcustompositivedata_ = tschchartseriesdefaulterrorbarcustompositivedata;
  if (tschchartseriesdefaulterrorbarcustompositivedata) {
    set_has_tschchartseriesdefaulterrorbarcustompositivedata();
  } else {
    clear_has_tschchartseriesdefaulterrorbarcustompositivedata();
  }
}

// optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedatascatterx = 5;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarcustompositivedatascatterx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaulterrorbarcustompositivedatascatterx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaulterrorbarcustompositivedatascatterx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarcustompositivedatascatterx() {
  if (tschchartseriesdefaulterrorbarcustompositivedatascatterx_ != NULL) tschchartseriesdefaulterrorbarcustompositivedatascatterx_->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::Clear();
  clear_has_tschchartseriesdefaulterrorbarcustompositivedatascatterx();
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarcustompositivedatascatterx() const {
  return tschchartseriesdefaulterrorbarcustompositivedatascatterx_ != NULL ? *tschchartseriesdefaulterrorbarcustompositivedatascatterx_ : *default_instance_->tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefaulterrorbarcustompositivedatascatterx() {
  set_has_tschchartseriesdefaulterrorbarcustompositivedatascatterx();
  if (tschchartseriesdefaulterrorbarcustompositivedatascatterx_ == NULL) tschchartseriesdefaulterrorbarcustompositivedatascatterx_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive;
  return tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesNonStyleArchive::release_tschchartseriesdefaulterrorbarcustompositivedatascatterx() {
  clear_has_tschchartseriesdefaulterrorbarcustompositivedatascatterx();
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
  tschchartseriesdefaulterrorbarcustompositivedatascatterx_ = NULL;
  return temp;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefaulterrorbarcustompositivedatascatterx(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartseriesdefaulterrorbarcustompositivedatascatterx) {
  delete tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
  tschchartseriesdefaulterrorbarcustompositivedatascatterx_ = tschchartseriesdefaulterrorbarcustompositivedatascatterx;
  if (tschchartseriesdefaulterrorbarcustompositivedatascatterx) {
    set_has_tschchartseriesdefaulterrorbarcustompositivedatascatterx();
  } else {
    clear_has_tschchartseriesdefaulterrorbarcustompositivedatascatterx();
  }
}

// optional float tschchartseriesdefaulterrorbarfixedvalue = 6;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarfixedvalue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaulterrorbarfixedvalue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaulterrorbarfixedvalue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarfixedvalue() {
  tschchartseriesdefaulterrorbarfixedvalue_ = 0;
  clear_has_tschchartseriesdefaulterrorbarfixedvalue();
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarfixedvalue() const {
  return tschchartseriesdefaulterrorbarfixedvalue_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarfixedvalue(float value) {
  set_has_tschchartseriesdefaulterrorbarfixedvalue();
  tschchartseriesdefaulterrorbarfixedvalue_ = value;
}

// optional float tschchartseriesdefaulterrorbarfixedvaluescatterx = 7;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarfixedvaluescatterx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaulterrorbarfixedvaluescatterx() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaulterrorbarfixedvaluescatterx() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarfixedvaluescatterx() {
  tschchartseriesdefaulterrorbarfixedvaluescatterx_ = 0;
  clear_has_tschchartseriesdefaulterrorbarfixedvaluescatterx();
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarfixedvaluescatterx() const {
  return tschchartseriesdefaulterrorbarfixedvaluescatterx_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarfixedvaluescatterx(float value) {
  set_has_tschchartseriesdefaulterrorbarfixedvaluescatterx();
  tschchartseriesdefaulterrorbarfixedvaluescatterx_ = value;
}

// optional float tschchartseriesdefaulterrorbarpercentvalue = 8;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarpercentvalue() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaulterrorbarpercentvalue() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaulterrorbarpercentvalue() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarpercentvalue() {
  tschchartseriesdefaulterrorbarpercentvalue_ = 0;
  clear_has_tschchartseriesdefaulterrorbarpercentvalue();
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarpercentvalue() const {
  return tschchartseriesdefaulterrorbarpercentvalue_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarpercentvalue(float value) {
  set_has_tschchartseriesdefaulterrorbarpercentvalue();
  tschchartseriesdefaulterrorbarpercentvalue_ = value;
}

// optional float tschchartseriesdefaulterrorbarpercentvaluescatterx = 9;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarpercentvaluescatterx() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaulterrorbarpercentvaluescatterx() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaulterrorbarpercentvaluescatterx() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarpercentvaluescatterx() {
  tschchartseriesdefaulterrorbarpercentvaluescatterx_ = 0;
  clear_has_tschchartseriesdefaulterrorbarpercentvaluescatterx();
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarpercentvaluescatterx() const {
  return tschchartseriesdefaulterrorbarpercentvaluescatterx_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarpercentvaluescatterx(float value) {
  set_has_tschchartseriesdefaulterrorbarpercentvaluescatterx();
  tschchartseriesdefaulterrorbarpercentvaluescatterx_ = value;
}

// optional int32 tschchartseriesdefaulterrorbarsetting = 10;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarsetting() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaulterrorbarsetting() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaulterrorbarsetting() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarsetting() {
  tschchartseriesdefaulterrorbarsetting_ = 0;
  clear_has_tschchartseriesdefaulterrorbarsetting();
}
inline ::google::protobuf::int32 ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarsetting() const {
  return tschchartseriesdefaulterrorbarsetting_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarsetting(::google::protobuf::int32 value) {
  set_has_tschchartseriesdefaulterrorbarsetting();
  tschchartseriesdefaulterrorbarsetting_ = value;
}

// optional int32 tschchartseriesdefaulterrorbarsettingscatterx = 11;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarsettingscatterx() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaulterrorbarsettingscatterx() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaulterrorbarsettingscatterx() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarsettingscatterx() {
  tschchartseriesdefaulterrorbarsettingscatterx_ = 0;
  clear_has_tschchartseriesdefaulterrorbarsettingscatterx();
}
inline ::google::protobuf::int32 ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarsettingscatterx() const {
  return tschchartseriesdefaulterrorbarsettingscatterx_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarsettingscatterx(::google::protobuf::int32 value) {
  set_has_tschchartseriesdefaulterrorbarsettingscatterx();
  tschchartseriesdefaulterrorbarsettingscatterx_ = value;
}

// optional float tschchartseriesdefaulterrorbarstddevvalue = 12;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarstddevvalue() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaulterrorbarstddevvalue() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaulterrorbarstddevvalue() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarstddevvalue() {
  tschchartseriesdefaulterrorbarstddevvalue_ = 0;
  clear_has_tschchartseriesdefaulterrorbarstddevvalue();
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarstddevvalue() const {
  return tschchartseriesdefaulterrorbarstddevvalue_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarstddevvalue(float value) {
  set_has_tschchartseriesdefaulterrorbarstddevvalue();
  tschchartseriesdefaulterrorbarstddevvalue_ = value;
}

// optional float tschchartseriesdefaulterrorbarstddevvaluescatterx = 13;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbarstddevvaluescatterx() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaulterrorbarstddevvaluescatterx() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaulterrorbarstddevvaluescatterx() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarstddevvaluescatterx() {
  tschchartseriesdefaulterrorbarstddevvaluescatterx_ = 0;
  clear_has_tschchartseriesdefaulterrorbarstddevvaluescatterx();
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbarstddevvaluescatterx() const {
  return tschchartseriesdefaulterrorbarstddevvaluescatterx_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbarstddevvaluescatterx(float value) {
  set_has_tschchartseriesdefaulterrorbarstddevvaluescatterx();
  tschchartseriesdefaulterrorbarstddevvaluescatterx_ = value;
}

// optional int32 tschchartseriesdefaulterrorbartype = 14;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbartype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaulterrorbartype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaulterrorbartype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbartype() {
  tschchartseriesdefaulterrorbartype_ = 0;
  clear_has_tschchartseriesdefaulterrorbartype();
}
inline ::google::protobuf::int32 ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbartype() const {
  return tschchartseriesdefaulterrorbartype_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbartype(::google::protobuf::int32 value) {
  set_has_tschchartseriesdefaulterrorbartype();
  tschchartseriesdefaulterrorbartype_ = value;
}

// optional int32 tschchartseriesdefaulterrorbartypescatterx = 15;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulterrorbartypescatterx() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaulterrorbartypescatterx() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaulterrorbartypescatterx() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbartypescatterx() {
  tschchartseriesdefaulterrorbartypescatterx_ = 0;
  clear_has_tschchartseriesdefaulterrorbartypescatterx();
}
inline ::google::protobuf::int32 ChartSeriesNonStyleArchive::tschchartseriesdefaulterrorbartypescatterx() const {
  return tschchartseriesdefaulterrorbartypescatterx_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulterrorbartypescatterx(::google::protobuf::int32 value) {
  set_has_tschchartseriesdefaulterrorbartypescatterx();
  tschchartseriesdefaulterrorbartypescatterx_ = value;
}

// optional float tschchartseriespielabelexplosion = 16;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriespielabelexplosion() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriespielabelexplosion() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriespielabelexplosion() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriespielabelexplosion() {
  tschchartseriespielabelexplosion_ = 0;
  clear_has_tschchartseriespielabelexplosion();
}
inline float ChartSeriesNonStyleArchive::tschchartseriespielabelexplosion() const {
  return tschchartseriespielabelexplosion_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriespielabelexplosion(float value) {
  set_has_tschchartseriespielabelexplosion();
  tschchartseriespielabelexplosion_ = value;
}

// optional int32 tschchartseriesbubblelinetype = 17;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbubblelinetype() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesbubblelinetype() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesbubblelinetype() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbubblelinetype() {
  tschchartseriesbubblelinetype_ = 0;
  clear_has_tschchartseriesbubblelinetype();
}
inline ::google::protobuf::int32 ChartSeriesNonStyleArchive::tschchartseriesbubblelinetype() const {
  return tschchartseriesbubblelinetype_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbubblelinetype(::google::protobuf::int32 value) {
  set_has_tschchartseriesbubblelinetype();
  tschchartseriesbubblelinetype_ = value;
}

// optional int32 tschchartserieslinelinetype = 18;
inline bool ChartSeriesNonStyleArchive::has_tschchartserieslinelinetype() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartserieslinelinetype() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartserieslinelinetype() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartserieslinelinetype() {
  tschchartserieslinelinetype_ = 0;
  clear_has_tschchartserieslinelinetype();
}
inline ::google::protobuf::int32 ChartSeriesNonStyleArchive::tschchartserieslinelinetype() const {
  return tschchartserieslinelinetype_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartserieslinelinetype(::google::protobuf::int32 value) {
  set_has_tschchartserieslinelinetype();
  tschchartserieslinelinetype_ = value;
}

// optional int32 tschchartseriesmixedlinelinetype = 19;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesmixedlinelinetype() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesmixedlinelinetype() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesmixedlinelinetype() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesmixedlinelinetype() {
  tschchartseriesmixedlinelinetype_ = 0;
  clear_has_tschchartseriesmixedlinelinetype();
}
inline ::google::protobuf::int32 ChartSeriesNonStyleArchive::tschchartseriesmixedlinelinetype() const {
  return tschchartseriesmixedlinelinetype_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesmixedlinelinetype(::google::protobuf::int32 value) {
  set_has_tschchartseriesmixedlinelinetype();
  tschchartseriesmixedlinelinetype_ = value;
}

// optional int32 tschchartseriesscatterlinetype = 20;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesscatterlinetype() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesscatterlinetype() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesscatterlinetype() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesscatterlinetype() {
  tschchartseriesscatterlinetype_ = 0;
  clear_has_tschchartseriesscatterlinetype();
}
inline ::google::protobuf::int32 ChartSeriesNonStyleArchive::tschchartseriesscatterlinetype() const {
  return tschchartseriesscatterlinetype_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesscatterlinetype(::google::protobuf::int32 value) {
  set_has_tschchartseriesscatterlinetype();
  tschchartseriesscatterlinetype_ = value;
}

// optional .TSK.FormatStructArchive tschchartseriesdefault1_0numberformat = 21;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefault1_0numberformat() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefault1_0numberformat() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefault1_0numberformat() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefault1_0numberformat() {
  if (tschchartseriesdefault1_0numberformat_ != NULL) tschchartseriesdefault1_0numberformat_->::TSK::FormatStructArchive::Clear();
  clear_has_tschchartseriesdefault1_0numberformat();
}
inline const ::TSK::FormatStructArchive& ChartSeriesNonStyleArchive::tschchartseriesdefault1_0numberformat() const {
  return tschchartseriesdefault1_0numberformat_ != NULL ? *tschchartseriesdefault1_0numberformat_ : *default_instance_->tschchartseriesdefault1_0numberformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefault1_0numberformat() {
  set_has_tschchartseriesdefault1_0numberformat();
  if (tschchartseriesdefault1_0numberformat_ == NULL) tschchartseriesdefault1_0numberformat_ = new ::TSK::FormatStructArchive;
  return tschchartseriesdefault1_0numberformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::release_tschchartseriesdefault1_0numberformat() {
  clear_has_tschchartseriesdefault1_0numberformat();
  ::TSK::FormatStructArchive* temp = tschchartseriesdefault1_0numberformat_;
  tschchartseriesdefault1_0numberformat_ = NULL;
  return temp;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefault1_0numberformat(::TSK::FormatStructArchive* tschchartseriesdefault1_0numberformat) {
  delete tschchartseriesdefault1_0numberformat_;
  tschchartseriesdefault1_0numberformat_ = tschchartseriesdefault1_0numberformat;
  if (tschchartseriesdefault1_0numberformat) {
    set_has_tschchartseriesdefault1_0numberformat();
  } else {
    clear_has_tschchartseriesdefault1_0numberformat();
  }
}

// optional .TSK.FormatStructArchive tschchartseriesdefaultnumberformat = 98;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultnumberformat() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaultnumberformat() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaultnumberformat() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultnumberformat() {
  if (tschchartseriesdefaultnumberformat_ != NULL) tschchartseriesdefaultnumberformat_->::TSK::FormatStructArchive::Clear();
  clear_has_tschchartseriesdefaultnumberformat();
}
inline const ::TSK::FormatStructArchive& ChartSeriesNonStyleArchive::tschchartseriesdefaultnumberformat() const {
  return tschchartseriesdefaultnumberformat_ != NULL ? *tschchartseriesdefaultnumberformat_ : *default_instance_->tschchartseriesdefaultnumberformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefaultnumberformat() {
  set_has_tschchartseriesdefaultnumberformat();
  if (tschchartseriesdefaultnumberformat_ == NULL) tschchartseriesdefaultnumberformat_ = new ::TSK::FormatStructArchive;
  return tschchartseriesdefaultnumberformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::release_tschchartseriesdefaultnumberformat() {
  clear_has_tschchartseriesdefaultnumberformat();
  ::TSK::FormatStructArchive* temp = tschchartseriesdefaultnumberformat_;
  tschchartseriesdefaultnumberformat_ = NULL;
  return temp;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefaultnumberformat(::TSK::FormatStructArchive* tschchartseriesdefaultnumberformat) {
  delete tschchartseriesdefaultnumberformat_;
  tschchartseriesdefaultnumberformat_ = tschchartseriesdefaultnumberformat;
  if (tschchartseriesdefaultnumberformat) {
    set_has_tschchartseriesdefaultnumberformat();
  } else {
    clear_has_tschchartseriesdefaultnumberformat();
  }
}

// optional .TSK.FormatStructArchive tschchartseriesdefault1_0dateformat = 69;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefault1_0dateformat() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefault1_0dateformat() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefault1_0dateformat() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefault1_0dateformat() {
  if (tschchartseriesdefault1_0dateformat_ != NULL) tschchartseriesdefault1_0dateformat_->::TSK::FormatStructArchive::Clear();
  clear_has_tschchartseriesdefault1_0dateformat();
}
inline const ::TSK::FormatStructArchive& ChartSeriesNonStyleArchive::tschchartseriesdefault1_0dateformat() const {
  return tschchartseriesdefault1_0dateformat_ != NULL ? *tschchartseriesdefault1_0dateformat_ : *default_instance_->tschchartseriesdefault1_0dateformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefault1_0dateformat() {
  set_has_tschchartseriesdefault1_0dateformat();
  if (tschchartseriesdefault1_0dateformat_ == NULL) tschchartseriesdefault1_0dateformat_ = new ::TSK::FormatStructArchive;
  return tschchartseriesdefault1_0dateformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::release_tschchartseriesdefault1_0dateformat() {
  clear_has_tschchartseriesdefault1_0dateformat();
  ::TSK::FormatStructArchive* temp = tschchartseriesdefault1_0dateformat_;
  tschchartseriesdefault1_0dateformat_ = NULL;
  return temp;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefault1_0dateformat(::TSK::FormatStructArchive* tschchartseriesdefault1_0dateformat) {
  delete tschchartseriesdefault1_0dateformat_;
  tschchartseriesdefault1_0dateformat_ = tschchartseriesdefault1_0dateformat;
  if (tschchartseriesdefault1_0dateformat) {
    set_has_tschchartseriesdefault1_0dateformat();
  } else {
    clear_has_tschchartseriesdefault1_0dateformat();
  }
}

// optional .TSK.FormatStructArchive tschchartseriesdefaultdurationformat = 70;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultdurationformat() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaultdurationformat() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaultdurationformat() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultdurationformat() {
  if (tschchartseriesdefaultdurationformat_ != NULL) tschchartseriesdefaultdurationformat_->::TSK::FormatStructArchive::Clear();
  clear_has_tschchartseriesdefaultdurationformat();
}
inline const ::TSK::FormatStructArchive& ChartSeriesNonStyleArchive::tschchartseriesdefaultdurationformat() const {
  return tschchartseriesdefaultdurationformat_ != NULL ? *tschchartseriesdefaultdurationformat_ : *default_instance_->tschchartseriesdefaultdurationformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefaultdurationformat() {
  set_has_tschchartseriesdefaultdurationformat();
  if (tschchartseriesdefaultdurationformat_ == NULL) tschchartseriesdefaultdurationformat_ = new ::TSK::FormatStructArchive;
  return tschchartseriesdefaultdurationformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::release_tschchartseriesdefaultdurationformat() {
  clear_has_tschchartseriesdefaultdurationformat();
  ::TSK::FormatStructArchive* temp = tschchartseriesdefaultdurationformat_;
  tschchartseriesdefaultdurationformat_ = NULL;
  return temp;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefaultdurationformat(::TSK::FormatStructArchive* tschchartseriesdefaultdurationformat) {
  delete tschchartseriesdefaultdurationformat_;
  tschchartseriesdefaultdurationformat_ = tschchartseriesdefaultdurationformat;
  if (tschchartseriesdefaultdurationformat) {
    set_has_tschchartseriesdefaultdurationformat();
  } else {
    clear_has_tschchartseriesdefaultdurationformat();
  }
}

// optional .TSK.FormatStructArchive tschchartseriesdefaultdateformat = 71;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultdateformat() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaultdateformat() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaultdateformat() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultdateformat() {
  if (tschchartseriesdefaultdateformat_ != NULL) tschchartseriesdefaultdateformat_->::TSK::FormatStructArchive::Clear();
  clear_has_tschchartseriesdefaultdateformat();
}
inline const ::TSK::FormatStructArchive& ChartSeriesNonStyleArchive::tschchartseriesdefaultdateformat() const {
  return tschchartseriesdefaultdateformat_ != NULL ? *tschchartseriesdefaultdateformat_ : *default_instance_->tschchartseriesdefaultdateformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefaultdateformat() {
  set_has_tschchartseriesdefaultdateformat();
  if (tschchartseriesdefaultdateformat_ == NULL) tschchartseriesdefaultdateformat_ = new ::TSK::FormatStructArchive;
  return tschchartseriesdefaultdateformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::release_tschchartseriesdefaultdateformat() {
  clear_has_tschchartseriesdefaultdateformat();
  ::TSK::FormatStructArchive* temp = tschchartseriesdefaultdateformat_;
  tschchartseriesdefaultdateformat_ = NULL;
  return temp;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefaultdateformat(::TSK::FormatStructArchive* tschchartseriesdefaultdateformat) {
  delete tschchartseriesdefaultdateformat_;
  tschchartseriesdefaultdateformat_ = tschchartseriesdefaultdateformat;
  if (tschchartseriesdefaultdateformat) {
    set_has_tschchartseriesdefaultdateformat();
  } else {
    clear_has_tschchartseriesdefaultdateformat();
  }
}

// optional .TSK.FormatStructArchive tschchartseriespie1_0numberformat = 22;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriespie1_0numberformat() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriespie1_0numberformat() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriespie1_0numberformat() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriespie1_0numberformat() {
  if (tschchartseriespie1_0numberformat_ != NULL) tschchartseriespie1_0numberformat_->::TSK::FormatStructArchive::Clear();
  clear_has_tschchartseriespie1_0numberformat();
}
inline const ::TSK::FormatStructArchive& ChartSeriesNonStyleArchive::tschchartseriespie1_0numberformat() const {
  return tschchartseriespie1_0numberformat_ != NULL ? *tschchartseriespie1_0numberformat_ : *default_instance_->tschchartseriespie1_0numberformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriespie1_0numberformat() {
  set_has_tschchartseriespie1_0numberformat();
  if (tschchartseriespie1_0numberformat_ == NULL) tschchartseriespie1_0numberformat_ = new ::TSK::FormatStructArchive;
  return tschchartseriespie1_0numberformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::release_tschchartseriespie1_0numberformat() {
  clear_has_tschchartseriespie1_0numberformat();
  ::TSK::FormatStructArchive* temp = tschchartseriespie1_0numberformat_;
  tschchartseriespie1_0numberformat_ = NULL;
  return temp;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriespie1_0numberformat(::TSK::FormatStructArchive* tschchartseriespie1_0numberformat) {
  delete tschchartseriespie1_0numberformat_;
  tschchartseriespie1_0numberformat_ = tschchartseriespie1_0numberformat;
  if (tschchartseriespie1_0numberformat) {
    set_has_tschchartseriespie1_0numberformat();
  } else {
    clear_has_tschchartseriespie1_0numberformat();
  }
}

// optional .TSK.FormatStructArchive tschchartseriespienumberformat = 99;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriespienumberformat() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriespienumberformat() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriespienumberformat() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriespienumberformat() {
  if (tschchartseriespienumberformat_ != NULL) tschchartseriespienumberformat_->::TSK::FormatStructArchive::Clear();
  clear_has_tschchartseriespienumberformat();
}
inline const ::TSK::FormatStructArchive& ChartSeriesNonStyleArchive::tschchartseriespienumberformat() const {
  return tschchartseriespienumberformat_ != NULL ? *tschchartseriespienumberformat_ : *default_instance_->tschchartseriespienumberformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriespienumberformat() {
  set_has_tschchartseriespienumberformat();
  if (tschchartseriespienumberformat_ == NULL) tschchartseriespienumberformat_ = new ::TSK::FormatStructArchive;
  return tschchartseriespienumberformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::release_tschchartseriespienumberformat() {
  clear_has_tschchartseriespienumberformat();
  ::TSK::FormatStructArchive* temp = tschchartseriespienumberformat_;
  tschchartseriespienumberformat_ = NULL;
  return temp;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriespienumberformat(::TSK::FormatStructArchive* tschchartseriespienumberformat) {
  delete tschchartseriespienumberformat_;
  tschchartseriespienumberformat_ = tschchartseriespienumberformat;
  if (tschchartseriespienumberformat) {
    set_has_tschchartseriespienumberformat();
  } else {
    clear_has_tschchartseriespienumberformat();
  }
}

// optional int32 tschchartseriesdefaultnumberformattype = 23;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultnumberformattype() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaultnumberformattype() {
  _has_bits_[0] |= 0x08000000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaultnumberformattype() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultnumberformattype() {
  tschchartseriesdefaultnumberformattype_ = 0;
  clear_has_tschchartseriesdefaultnumberformattype();
}
inline ::google::protobuf::int32 ChartSeriesNonStyleArchive::tschchartseriesdefaultnumberformattype() const {
  return tschchartseriesdefaultnumberformattype_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultnumberformattype(::google::protobuf::int32 value) {
  set_has_tschchartseriesdefaultnumberformattype();
  tschchartseriesdefaultnumberformattype_ = value;
}

// optional int32 tschchartseriespienumberformattype = 24;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriespienumberformattype() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriespienumberformattype() {
  _has_bits_[0] |= 0x10000000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriespienumberformattype() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriespienumberformattype() {
  tschchartseriespienumberformattype_ = 0;
  clear_has_tschchartseriespienumberformattype();
}
inline ::google::protobuf::int32 ChartSeriesNonStyleArchive::tschchartseriespienumberformattype() const {
  return tschchartseriespienumberformattype_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriespienumberformattype(::google::protobuf::int32 value) {
  set_has_tschchartseriespienumberformattype();
  tschchartseriespienumberformattype_ = value;
}

// optional .TSK.FormatStructArchive tschchartseriesstackedpercentnumberformat = 25;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesstackedpercentnumberformat() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesstackedpercentnumberformat() {
  _has_bits_[0] |= 0x20000000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesstackedpercentnumberformat() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesstackedpercentnumberformat() {
  if (tschchartseriesstackedpercentnumberformat_ != NULL) tschchartseriesstackedpercentnumberformat_->::TSK::FormatStructArchive::Clear();
  clear_has_tschchartseriesstackedpercentnumberformat();
}
inline const ::TSK::FormatStructArchive& ChartSeriesNonStyleArchive::tschchartseriesstackedpercentnumberformat() const {
  return tschchartseriesstackedpercentnumberformat_ != NULL ? *tschchartseriesstackedpercentnumberformat_ : *default_instance_->tschchartseriesstackedpercentnumberformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::mutable_tschchartseriesstackedpercentnumberformat() {
  set_has_tschchartseriesstackedpercentnumberformat();
  if (tschchartseriesstackedpercentnumberformat_ == NULL) tschchartseriesstackedpercentnumberformat_ = new ::TSK::FormatStructArchive;
  return tschchartseriesstackedpercentnumberformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesNonStyleArchive::release_tschchartseriesstackedpercentnumberformat() {
  clear_has_tschchartseriesstackedpercentnumberformat();
  ::TSK::FormatStructArchive* temp = tschchartseriesstackedpercentnumberformat_;
  tschchartseriesstackedpercentnumberformat_ = NULL;
  return temp;
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesstackedpercentnumberformat(::TSK::FormatStructArchive* tschchartseriesstackedpercentnumberformat) {
  delete tschchartseriesstackedpercentnumberformat_;
  tschchartseriesstackedpercentnumberformat_ = tschchartseriesstackedpercentnumberformat;
  if (tschchartseriesstackedpercentnumberformat) {
    set_has_tschchartseriesstackedpercentnumberformat();
  } else {
    clear_has_tschchartseriesstackedpercentnumberformat();
  }
}

// optional int32 tschchartseriesdefaultseriestype = 26;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultseriestype() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaultseriestype() {
  _has_bits_[0] |= 0x40000000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaultseriestype() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultseriestype() {
  tschchartseriesdefaultseriestype_ = 0;
  clear_has_tschchartseriesdefaultseriestype();
}
inline ::google::protobuf::int32 ChartSeriesNonStyleArchive::tschchartseriesdefaultseriestype() const {
  return tschchartseriesdefaultseriestype_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultseriestype(::google::protobuf::int32 value) {
  set_has_tschchartseriesdefaultseriestype();
  tschchartseriesdefaultseriestype_ = value;
}

// optional bool tschchartseriesdefaultshowerrorbar = 27;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultshowerrorbar() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaultshowerrorbar() {
  _has_bits_[0] |= 0x80000000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaultshowerrorbar() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultshowerrorbar() {
  tschchartseriesdefaultshowerrorbar_ = false;
  clear_has_tschchartseriesdefaultshowerrorbar();
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesdefaultshowerrorbar() const {
  return tschchartseriesdefaultshowerrorbar_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultshowerrorbar(bool value) {
  set_has_tschchartseriesdefaultshowerrorbar();
  tschchartseriesdefaultshowerrorbar_ = value;
}

// optional bool tschchartseriesdefaultshowerrorbarscatterx = 28;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultshowerrorbarscatterx() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaultshowerrorbarscatterx() {
  _has_bits_[1] |= 0x00000001u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaultshowerrorbarscatterx() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultshowerrorbarscatterx() {
  tschchartseriesdefaultshowerrorbarscatterx_ = false;
  clear_has_tschchartseriesdefaultshowerrorbarscatterx();
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesdefaultshowerrorbarscatterx() const {
  return tschchartseriesdefaultshowerrorbarscatterx_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultshowerrorbarscatterx(bool value) {
  set_has_tschchartseriesdefaultshowerrorbarscatterx();
  tschchartseriesdefaultshowerrorbarscatterx_ = value;
}

// optional bool tschchartseriesscattershowline = 29;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesscattershowline() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesscattershowline() {
  _has_bits_[1] |= 0x00000002u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesscattershowline() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesscattershowline() {
  tschchartseriesscattershowline_ = false;
  clear_has_tschchartseriesscattershowline();
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesscattershowline() const {
  return tschchartseriesscattershowline_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesscattershowline(bool value) {
  set_has_tschchartseriesscattershowline();
  tschchartseriesscattershowline_ = value;
}

// optional bool tschchartseriesbubbleshownegativedata = 30;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbubbleshownegativedata() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesbubbleshownegativedata() {
  _has_bits_[1] |= 0x00000004u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesbubbleshownegativedata() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbubbleshownegativedata() {
  tschchartseriesbubbleshownegativedata_ = false;
  clear_has_tschchartseriesbubbleshownegativedata();
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesbubbleshownegativedata() const {
  return tschchartseriesbubbleshownegativedata_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbubbleshownegativedata(bool value) {
  set_has_tschchartseriesbubbleshownegativedata();
  tschchartseriesbubbleshownegativedata_ = value;
}

// optional bool tschchartseriespieshowserieslabels = 31;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriespieshowserieslabels() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriespieshowserieslabels() {
  _has_bits_[1] |= 0x00000008u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriespieshowserieslabels() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriespieshowserieslabels() {
  tschchartseriespieshowserieslabels_ = false;
  clear_has_tschchartseriespieshowserieslabels();
}
inline bool ChartSeriesNonStyleArchive::tschchartseriespieshowserieslabels() const {
  return tschchartseriespieshowserieslabels_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriespieshowserieslabels(bool value) {
  set_has_tschchartseriespieshowserieslabels();
  tschchartseriespieshowserieslabels_ = value;
}

// optional bool tschchartseriesareashowsymbol = 32;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesareashowsymbol() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesareashowsymbol() {
  _has_bits_[1] |= 0x00000010u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesareashowsymbol() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesareashowsymbol() {
  tschchartseriesareashowsymbol_ = false;
  clear_has_tschchartseriesareashowsymbol();
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesareashowsymbol() const {
  return tschchartseriesareashowsymbol_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesareashowsymbol(bool value) {
  set_has_tschchartseriesareashowsymbol();
  tschchartseriesareashowsymbol_ = value;
}

// optional bool tschchartserieslineshowsymbol = 33;
inline bool ChartSeriesNonStyleArchive::has_tschchartserieslineshowsymbol() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartserieslineshowsymbol() {
  _has_bits_[1] |= 0x00000020u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartserieslineshowsymbol() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartserieslineshowsymbol() {
  tschchartserieslineshowsymbol_ = false;
  clear_has_tschchartserieslineshowsymbol();
}
inline bool ChartSeriesNonStyleArchive::tschchartserieslineshowsymbol() const {
  return tschchartserieslineshowsymbol_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartserieslineshowsymbol(bool value) {
  set_has_tschchartserieslineshowsymbol();
  tschchartserieslineshowsymbol_ = value;
}

// optional bool tschchartseriesmixedareashowsymbol = 34;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesmixedareashowsymbol() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesmixedareashowsymbol() {
  _has_bits_[1] |= 0x00000040u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesmixedareashowsymbol() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesmixedareashowsymbol() {
  tschchartseriesmixedareashowsymbol_ = false;
  clear_has_tschchartseriesmixedareashowsymbol();
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesmixedareashowsymbol() const {
  return tschchartseriesmixedareashowsymbol_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesmixedareashowsymbol(bool value) {
  set_has_tschchartseriesmixedareashowsymbol();
  tschchartseriesmixedareashowsymbol_ = value;
}

// optional bool tschchartseriesmixedlineshowsymbol = 35;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesmixedlineshowsymbol() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesmixedlineshowsymbol() {
  _has_bits_[1] |= 0x00000080u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesmixedlineshowsymbol() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesmixedlineshowsymbol() {
  tschchartseriesmixedlineshowsymbol_ = false;
  clear_has_tschchartseriesmixedlineshowsymbol();
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesmixedlineshowsymbol() const {
  return tschchartseriesmixedlineshowsymbol_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesmixedlineshowsymbol(bool value) {
  set_has_tschchartseriesmixedlineshowsymbol();
  tschchartseriesmixedlineshowsymbol_ = value;
}

// optional bool tschchartseriesscattershowsymbol = 36;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesscattershowsymbol() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesscattershowsymbol() {
  _has_bits_[1] |= 0x00000100u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesscattershowsymbol() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesscattershowsymbol() {
  tschchartseriesscattershowsymbol_ = false;
  clear_has_tschchartseriesscattershowsymbol();
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesscattershowsymbol() const {
  return tschchartseriesscattershowsymbol_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesscattershowsymbol(bool value) {
  set_has_tschchartseriesscattershowsymbol();
  tschchartseriesscattershowsymbol_ = value;
}

// optional bool tschchartseriesdefaultshowtrendline = 37;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultshowtrendline() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaultshowtrendline() {
  _has_bits_[1] |= 0x00000200u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaultshowtrendline() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultshowtrendline() {
  tschchartseriesdefaultshowtrendline_ = false;
  clear_has_tschchartseriesdefaultshowtrendline();
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesdefaultshowtrendline() const {
  return tschchartseriesdefaultshowtrendline_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultshowtrendline(bool value) {
  set_has_tschchartseriesdefaultshowtrendline();
  tschchartseriesdefaultshowtrendline_ = value;
}

// optional bool tschchartseriesareashowvaluelabels = 38;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesareashowvaluelabels() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesareashowvaluelabels() {
  _has_bits_[1] |= 0x00000400u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesareashowvaluelabels() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesareashowvaluelabels() {
  tschchartseriesareashowvaluelabels_ = false;
  clear_has_tschchartseriesareashowvaluelabels();
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesareashowvaluelabels() const {
  return tschchartseriesareashowvaluelabels_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesareashowvaluelabels(bool value) {
  set_has_tschchartseriesareashowvaluelabels();
  tschchartseriesareashowvaluelabels_ = value;
}

// optional bool tschchartseriesbarshowvaluelabels = 39;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbarshowvaluelabels() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesbarshowvaluelabels() {
  _has_bits_[1] |= 0x00000800u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesbarshowvaluelabels() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbarshowvaluelabels() {
  tschchartseriesbarshowvaluelabels_ = false;
  clear_has_tschchartseriesbarshowvaluelabels();
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesbarshowvaluelabels() const {
  return tschchartseriesbarshowvaluelabels_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbarshowvaluelabels(bool value) {
  set_has_tschchartseriesbarshowvaluelabels();
  tschchartseriesbarshowvaluelabels_ = value;
}

// optional bool tschchartseriesbubbleshowvaluelabels = 40;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbubbleshowvaluelabels() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesbubbleshowvaluelabels() {
  _has_bits_[1] |= 0x00001000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesbubbleshowvaluelabels() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbubbleshowvaluelabels() {
  tschchartseriesbubbleshowvaluelabels_ = false;
  clear_has_tschchartseriesbubbleshowvaluelabels();
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesbubbleshowvaluelabels() const {
  return tschchartseriesbubbleshowvaluelabels_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbubbleshowvaluelabels(bool value) {
  set_has_tschchartseriesbubbleshowvaluelabels();
  tschchartseriesbubbleshowvaluelabels_ = value;
}

// optional bool tschchartseriesdefaultshowvaluelabels = 41;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultshowvaluelabels() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaultshowvaluelabels() {
  _has_bits_[1] |= 0x00002000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaultshowvaluelabels() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultshowvaluelabels() {
  tschchartseriesdefaultshowvaluelabels_ = false;
  clear_has_tschchartseriesdefaultshowvaluelabels();
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesdefaultshowvaluelabels() const {
  return tschchartseriesdefaultshowvaluelabels_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultshowvaluelabels(bool value) {
  set_has_tschchartseriesdefaultshowvaluelabels();
  tschchartseriesdefaultshowvaluelabels_ = value;
}

// optional bool tschchartserieslineshowvaluelabels = 42;
inline bool ChartSeriesNonStyleArchive::has_tschchartserieslineshowvaluelabels() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartserieslineshowvaluelabels() {
  _has_bits_[1] |= 0x00004000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartserieslineshowvaluelabels() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartserieslineshowvaluelabels() {
  tschchartserieslineshowvaluelabels_ = false;
  clear_has_tschchartserieslineshowvaluelabels();
}
inline bool ChartSeriesNonStyleArchive::tschchartserieslineshowvaluelabels() const {
  return tschchartserieslineshowvaluelabels_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartserieslineshowvaluelabels(bool value) {
  set_has_tschchartserieslineshowvaluelabels();
  tschchartserieslineshowvaluelabels_ = value;
}

// optional bool tschchartseriesmixedshowvaluelabels = 43;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesmixedshowvaluelabels() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesmixedshowvaluelabels() {
  _has_bits_[1] |= 0x00008000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesmixedshowvaluelabels() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesmixedshowvaluelabels() {
  tschchartseriesmixedshowvaluelabels_ = false;
  clear_has_tschchartseriesmixedshowvaluelabels();
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesmixedshowvaluelabels() const {
  return tschchartseriesmixedshowvaluelabels_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesmixedshowvaluelabels(bool value) {
  set_has_tschchartseriesmixedshowvaluelabels();
  tschchartseriesmixedshowvaluelabels_ = value;
}

// optional bool tschchartseriespieshowvaluelabels = 44;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriespieshowvaluelabels() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriespieshowvaluelabels() {
  _has_bits_[1] |= 0x00010000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriespieshowvaluelabels() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriespieshowvaluelabels() {
  tschchartseriespieshowvaluelabels_ = false;
  clear_has_tschchartseriespieshowvaluelabels();
}
inline bool ChartSeriesNonStyleArchive::tschchartseriespieshowvaluelabels() const {
  return tschchartseriespieshowvaluelabels_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriespieshowvaluelabels(bool value) {
  set_has_tschchartseriespieshowvaluelabels();
  tschchartseriespieshowvaluelabels_ = value;
}

// optional bool tschchartseriesscattershowvaluelabels = 45;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesscattershowvaluelabels() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesscattershowvaluelabels() {
  _has_bits_[1] |= 0x00020000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesscattershowvaluelabels() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesscattershowvaluelabels() {
  tschchartseriesscattershowvaluelabels_ = false;
  clear_has_tschchartseriesscattershowvaluelabels();
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesscattershowvaluelabels() const {
  return tschchartseriesscattershowvaluelabels_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesscattershowvaluelabels(bool value) {
  set_has_tschchartseriesscattershowvaluelabels();
  tschchartseriesscattershowvaluelabels_ = value;
}

// optional int32 tschchartseriesbubblesizedimension = 46;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbubblesizedimension() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesbubblesizedimension() {
  _has_bits_[1] |= 0x00040000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesbubblesizedimension() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbubblesizedimension() {
  tschchartseriesbubblesizedimension_ = 0;
  clear_has_tschchartseriesbubblesizedimension();
}
inline ::google::protobuf::int32 ChartSeriesNonStyleArchive::tschchartseriesbubblesizedimension() const {
  return tschchartseriesbubblesizedimension_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbubblesizedimension(::google::protobuf::int32 value) {
  set_has_tschchartseriesbubblesizedimension();
  tschchartseriesbubblesizedimension_ = value;
}

// optional int32 tschchartseriesareasymboltype = 47;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesareasymboltype() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesareasymboltype() {
  _has_bits_[1] |= 0x00080000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesareasymboltype() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesareasymboltype() {
  tschchartseriesareasymboltype_ = 0;
  clear_has_tschchartseriesareasymboltype();
}
inline ::google::protobuf::int32 ChartSeriesNonStyleArchive::tschchartseriesareasymboltype() const {
  return tschchartseriesareasymboltype_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesareasymboltype(::google::protobuf::int32 value) {
  set_has_tschchartseriesareasymboltype();
  tschchartseriesareasymboltype_ = value;
}

// optional int32 tschchartserieslinesymboltype = 48;
inline bool ChartSeriesNonStyleArchive::has_tschchartserieslinesymboltype() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartserieslinesymboltype() {
  _has_bits_[1] |= 0x00100000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartserieslinesymboltype() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartserieslinesymboltype() {
  tschchartserieslinesymboltype_ = 0;
  clear_has_tschchartserieslinesymboltype();
}
inline ::google::protobuf::int32 ChartSeriesNonStyleArchive::tschchartserieslinesymboltype() const {
  return tschchartserieslinesymboltype_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartserieslinesymboltype(::google::protobuf::int32 value) {
  set_has_tschchartserieslinesymboltype();
  tschchartserieslinesymboltype_ = value;
}

// optional int32 tschchartseriesmixedareasymboltype = 49;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesmixedareasymboltype() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesmixedareasymboltype() {
  _has_bits_[1] |= 0x00200000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesmixedareasymboltype() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesmixedareasymboltype() {
  tschchartseriesmixedareasymboltype_ = 0;
  clear_has_tschchartseriesmixedareasymboltype();
}
inline ::google::protobuf::int32 ChartSeriesNonStyleArchive::tschchartseriesmixedareasymboltype() const {
  return tschchartseriesmixedareasymboltype_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesmixedareasymboltype(::google::protobuf::int32 value) {
  set_has_tschchartseriesmixedareasymboltype();
  tschchartseriesmixedareasymboltype_ = value;
}

// optional int32 tschchartseriesmixedlinesymboltype = 50;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesmixedlinesymboltype() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesmixedlinesymboltype() {
  _has_bits_[1] |= 0x00400000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesmixedlinesymboltype() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesmixedlinesymboltype() {
  tschchartseriesmixedlinesymboltype_ = 0;
  clear_has_tschchartseriesmixedlinesymboltype();
}
inline ::google::protobuf::int32 ChartSeriesNonStyleArchive::tschchartseriesmixedlinesymboltype() const {
  return tschchartseriesmixedlinesymboltype_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesmixedlinesymboltype(::google::protobuf::int32 value) {
  set_has_tschchartseriesmixedlinesymboltype();
  tschchartseriesmixedlinesymboltype_ = value;
}

// optional int32 tschchartseriesscattersymboltype = 51;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesscattersymboltype() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesscattersymboltype() {
  _has_bits_[1] |= 0x00800000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesscattersymboltype() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesscattersymboltype() {
  tschchartseriesscattersymboltype_ = 0;
  clear_has_tschchartseriesscattersymboltype();
}
inline ::google::protobuf::int32 ChartSeriesNonStyleArchive::tschchartseriesscattersymboltype() const {
  return tschchartseriesscattersymboltype_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesscattersymboltype(::google::protobuf::int32 value) {
  set_has_tschchartseriesscattersymboltype();
  tschchartseriesscattersymboltype_ = value;
}

// optional float tschchartseriesdefaulttrendlineequationoffsetx = 52;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlineequationoffsetx() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaulttrendlineequationoffsetx() {
  _has_bits_[1] |= 0x01000000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaulttrendlineequationoffsetx() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlineequationoffsetx() {
  tschchartseriesdefaulttrendlineequationoffsetx_ = 0;
  clear_has_tschchartseriesdefaulttrendlineequationoffsetx();
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlineequationoffsetx() const {
  return tschchartseriesdefaulttrendlineequationoffsetx_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlineequationoffsetx(float value) {
  set_has_tschchartseriesdefaulttrendlineequationoffsetx();
  tschchartseriesdefaulttrendlineequationoffsetx_ = value;
}

// optional float tschchartseriesdefaulttrendlineequationoffsety = 53;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlineequationoffsety() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaulttrendlineequationoffsety() {
  _has_bits_[1] |= 0x02000000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaulttrendlineequationoffsety() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlineequationoffsety() {
  tschchartseriesdefaulttrendlineequationoffsety_ = 0;
  clear_has_tschchartseriesdefaulttrendlineequationoffsety();
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlineequationoffsety() const {
  return tschchartseriesdefaulttrendlineequationoffsety_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlineequationoffsety(float value) {
  set_has_tschchartseriesdefaulttrendlineequationoffsety();
  tschchartseriesdefaulttrendlineequationoffsety_ = value;
}

// optional string tschchartseriesdefaulttrendlinelabelstring = 54;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlinelabelstring() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaulttrendlinelabelstring() {
  _has_bits_[1] |= 0x04000000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaulttrendlinelabelstring() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlinelabelstring() {
  if (tschchartseriesdefaulttrendlinelabelstring_ != &::google::protobuf::internal::kEmptyString) {
    tschchartseriesdefaulttrendlinelabelstring_->clear();
  }
  clear_has_tschchartseriesdefaulttrendlinelabelstring();
}
inline const ::std::string& ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlinelabelstring() const {
  return *tschchartseriesdefaulttrendlinelabelstring_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlinelabelstring(const ::std::string& value) {
  set_has_tschchartseriesdefaulttrendlinelabelstring();
  if (tschchartseriesdefaulttrendlinelabelstring_ == &::google::protobuf::internal::kEmptyString) {
    tschchartseriesdefaulttrendlinelabelstring_ = new ::std::string;
  }
  tschchartseriesdefaulttrendlinelabelstring_->assign(value);
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlinelabelstring(const char* value) {
  set_has_tschchartseriesdefaulttrendlinelabelstring();
  if (tschchartseriesdefaulttrendlinelabelstring_ == &::google::protobuf::internal::kEmptyString) {
    tschchartseriesdefaulttrendlinelabelstring_ = new ::std::string;
  }
  tschchartseriesdefaulttrendlinelabelstring_->assign(value);
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlinelabelstring(const char* value, size_t size) {
  set_has_tschchartseriesdefaulttrendlinelabelstring();
  if (tschchartseriesdefaulttrendlinelabelstring_ == &::google::protobuf::internal::kEmptyString) {
    tschchartseriesdefaulttrendlinelabelstring_ = new ::std::string;
  }
  tschchartseriesdefaulttrendlinelabelstring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChartSeriesNonStyleArchive::mutable_tschchartseriesdefaulttrendlinelabelstring() {
  set_has_tschchartseriesdefaulttrendlinelabelstring();
  if (tschchartseriesdefaulttrendlinelabelstring_ == &::google::protobuf::internal::kEmptyString) {
    tschchartseriesdefaulttrendlinelabelstring_ = new ::std::string;
  }
  return tschchartseriesdefaulttrendlinelabelstring_;
}
inline ::std::string* ChartSeriesNonStyleArchive::release_tschchartseriesdefaulttrendlinelabelstring() {
  clear_has_tschchartseriesdefaulttrendlinelabelstring();
  if (tschchartseriesdefaulttrendlinelabelstring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tschchartseriesdefaulttrendlinelabelstring_;
    tschchartseriesdefaulttrendlinelabelstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChartSeriesNonStyleArchive::set_allocated_tschchartseriesdefaulttrendlinelabelstring(::std::string* tschchartseriesdefaulttrendlinelabelstring) {
  if (tschchartseriesdefaulttrendlinelabelstring_ != &::google::protobuf::internal::kEmptyString) {
    delete tschchartseriesdefaulttrendlinelabelstring_;
  }
  if (tschchartseriesdefaulttrendlinelabelstring) {
    set_has_tschchartseriesdefaulttrendlinelabelstring();
    tschchartseriesdefaulttrendlinelabelstring_ = tschchartseriesdefaulttrendlinelabelstring;
  } else {
    clear_has_tschchartseriesdefaulttrendlinelabelstring();
    tschchartseriesdefaulttrendlinelabelstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 tschchartseriesdefaulttrendlineorder = 55;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlineorder() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaulttrendlineorder() {
  _has_bits_[1] |= 0x08000000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaulttrendlineorder() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlineorder() {
  tschchartseriesdefaulttrendlineorder_ = 0;
  clear_has_tschchartseriesdefaulttrendlineorder();
}
inline ::google::protobuf::int32 ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlineorder() const {
  return tschchartseriesdefaulttrendlineorder_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlineorder(::google::protobuf::int32 value) {
  set_has_tschchartseriesdefaulttrendlineorder();
  tschchartseriesdefaulttrendlineorder_ = value;
}

// optional int32 tschchartseriesdefaulttrendlineperiod = 56;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlineperiod() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaulttrendlineperiod() {
  _has_bits_[1] |= 0x10000000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaulttrendlineperiod() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlineperiod() {
  tschchartseriesdefaulttrendlineperiod_ = 0;
  clear_has_tschchartseriesdefaulttrendlineperiod();
}
inline ::google::protobuf::int32 ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlineperiod() const {
  return tschchartseriesdefaulttrendlineperiod_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlineperiod(::google::protobuf::int32 value) {
  set_has_tschchartseriesdefaulttrendlineperiod();
  tschchartseriesdefaulttrendlineperiod_ = value;
}

// optional float tschchartseriesdefaulttrendlinersquaredoffsetx = 57;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlinersquaredoffsetx() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaulttrendlinersquaredoffsetx() {
  _has_bits_[1] |= 0x20000000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaulttrendlinersquaredoffsetx() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlinersquaredoffsetx() {
  tschchartseriesdefaulttrendlinersquaredoffsetx_ = 0;
  clear_has_tschchartseriesdefaulttrendlinersquaredoffsetx();
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlinersquaredoffsetx() const {
  return tschchartseriesdefaulttrendlinersquaredoffsetx_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlinersquaredoffsetx(float value) {
  set_has_tschchartseriesdefaulttrendlinersquaredoffsetx();
  tschchartseriesdefaulttrendlinersquaredoffsetx_ = value;
}

// optional float tschchartseriesdefaulttrendlinersquaredoffsety = 58;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlinersquaredoffsety() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaulttrendlinersquaredoffsety() {
  _has_bits_[1] |= 0x40000000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaulttrendlinersquaredoffsety() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlinersquaredoffsety() {
  tschchartseriesdefaulttrendlinersquaredoffsety_ = 0;
  clear_has_tschchartseriesdefaulttrendlinersquaredoffsety();
}
inline float ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlinersquaredoffsety() const {
  return tschchartseriesdefaulttrendlinersquaredoffsety_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlinersquaredoffsety(float value) {
  set_has_tschchartseriesdefaulttrendlinersquaredoffsety();
  tschchartseriesdefaulttrendlinersquaredoffsety_ = value;
}

// optional bool tschchartseriesdefaulttrendlineshowequation = 59;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlineshowequation() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaulttrendlineshowequation() {
  _has_bits_[1] |= 0x80000000u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaulttrendlineshowequation() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlineshowequation() {
  tschchartseriesdefaulttrendlineshowequation_ = false;
  clear_has_tschchartseriesdefaulttrendlineshowequation();
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlineshowequation() const {
  return tschchartseriesdefaulttrendlineshowequation_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlineshowequation(bool value) {
  set_has_tschchartseriesdefaulttrendlineshowequation();
  tschchartseriesdefaulttrendlineshowequation_ = value;
}

// optional bool tschchartseriesdefaulttrendlineshowlabel = 60;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlineshowlabel() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaulttrendlineshowlabel() {
  _has_bits_[2] |= 0x00000001u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaulttrendlineshowlabel() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlineshowlabel() {
  tschchartseriesdefaulttrendlineshowlabel_ = false;
  clear_has_tschchartseriesdefaulttrendlineshowlabel();
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlineshowlabel() const {
  return tschchartseriesdefaulttrendlineshowlabel_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlineshowlabel(bool value) {
  set_has_tschchartseriesdefaulttrendlineshowlabel();
  tschchartseriesdefaulttrendlineshowlabel_ = value;
}

// optional bool tschchartseriesdefaulttrendlineshowr2value = 61;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlineshowr2value() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaulttrendlineshowr2value() {
  _has_bits_[2] |= 0x00000002u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaulttrendlineshowr2value() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlineshowr2value() {
  tschchartseriesdefaulttrendlineshowr2value_ = false;
  clear_has_tschchartseriesdefaulttrendlineshowr2value();
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlineshowr2value() const {
  return tschchartseriesdefaulttrendlineshowr2value_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlineshowr2value(bool value) {
  set_has_tschchartseriesdefaulttrendlineshowr2value();
  tschchartseriesdefaulttrendlineshowr2value_ = value;
}

// optional int32 tschchartseriesdefaulttrendlinetype = 62;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaulttrendlinetype() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaulttrendlinetype() {
  _has_bits_[2] |= 0x00000004u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaulttrendlinetype() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulttrendlinetype() {
  tschchartseriesdefaulttrendlinetype_ = 0;
  clear_has_tschchartseriesdefaulttrendlinetype();
}
inline ::google::protobuf::int32 ChartSeriesNonStyleArchive::tschchartseriesdefaulttrendlinetype() const {
  return tschchartseriesdefaulttrendlinetype_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaulttrendlinetype(::google::protobuf::int32 value) {
  set_has_tschchartseriesdefaulttrendlinetype();
  tschchartseriesdefaulttrendlinetype_ = value;
}

// optional float tschchartseriespiewedgeexplosion = 63;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriespiewedgeexplosion() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriespiewedgeexplosion() {
  _has_bits_[2] |= 0x00000008u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriespiewedgeexplosion() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriespiewedgeexplosion() {
  tschchartseriespiewedgeexplosion_ = 0;
  clear_has_tschchartseriespiewedgeexplosion();
}
inline float ChartSeriesNonStyleArchive::tschchartseriespiewedgeexplosion() const {
  return tschchartseriespiewedgeexplosion_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriespiewedgeexplosion(float value) {
  set_has_tschchartseriespiewedgeexplosion();
  tschchartseriespiewedgeexplosion_ = value;
}

// optional int32 tschchartseriesdefaultyaxisordinal = 64;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultyaxisordinal() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaultyaxisordinal() {
  _has_bits_[2] |= 0x00000010u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaultyaxisordinal() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultyaxisordinal() {
  tschchartseriesdefaultyaxisordinal_ = 0;
  clear_has_tschchartseriesdefaultyaxisordinal();
}
inline ::google::protobuf::int32 ChartSeriesNonStyleArchive::tschchartseriesdefaultyaxisordinal() const {
  return tschchartseriesdefaultyaxisordinal_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultyaxisordinal(::google::protobuf::int32 value) {
  set_has_tschchartseriesdefaultyaxisordinal();
  tschchartseriesdefaultyaxisordinal_ = value;
}

// optional bool tschchartseriesbubbleshowserieslabels = 65;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbubbleshowserieslabels() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesbubbleshowserieslabels() {
  _has_bits_[2] |= 0x00000020u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesbubbleshowserieslabels() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbubbleshowserieslabels() {
  tschchartseriesbubbleshowserieslabels_ = false;
  clear_has_tschchartseriesbubbleshowserieslabels();
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesbubbleshowserieslabels() const {
  return tschchartseriesbubbleshowserieslabels_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbubbleshowserieslabels(bool value) {
  set_has_tschchartseriesbubbleshowserieslabels();
  tschchartseriesbubbleshowserieslabels_ = value;
}

// optional int32 tschchartseriesbubblevaluelabelsaxis = 66;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbubblevaluelabelsaxis() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesbubblevaluelabelsaxis() {
  _has_bits_[2] |= 0x00000040u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesbubblevaluelabelsaxis() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbubblevaluelabelsaxis() {
  tschchartseriesbubblevaluelabelsaxis_ = 0;
  clear_has_tschchartseriesbubblevaluelabelsaxis();
}
inline ::google::protobuf::int32 ChartSeriesNonStyleArchive::tschchartseriesbubblevaluelabelsaxis() const {
  return tschchartseriesbubblevaluelabelsaxis_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbubblevaluelabelsaxis(::google::protobuf::int32 value) {
  set_has_tschchartseriesbubblevaluelabelsaxis();
  tschchartseriesbubblevaluelabelsaxis_ = value;
}

// optional bool tschchartseriesscattershowserieslabels = 67;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesscattershowserieslabels() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesscattershowserieslabels() {
  _has_bits_[2] |= 0x00000080u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesscattershowserieslabels() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesscattershowserieslabels() {
  tschchartseriesscattershowserieslabels_ = false;
  clear_has_tschchartseriesscattershowserieslabels();
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesscattershowserieslabels() const {
  return tschchartseriesscattershowserieslabels_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesscattershowserieslabels(bool value) {
  set_has_tschchartseriesscattershowserieslabels();
  tschchartseriesscattershowserieslabels_ = value;
}

// optional int32 tschchartseriesscattervaluelabelsaxis = 68;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesscattervaluelabelsaxis() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesscattervaluelabelsaxis() {
  _has_bits_[2] |= 0x00000100u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesscattervaluelabelsaxis() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesscattervaluelabelsaxis() {
  tschchartseriesscattervaluelabelsaxis_ = 0;
  clear_has_tschchartseriesscattervaluelabelsaxis();
}
inline ::google::protobuf::int32 ChartSeriesNonStyleArchive::tschchartseriesscattervaluelabelsaxis() const {
  return tschchartseriesscattervaluelabelsaxis_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesscattervaluelabelsaxis(::google::protobuf::int32 value) {
  set_has_tschchartseriesscattervaluelabelsaxis();
  tschchartseriesscattervaluelabelsaxis_ = value;
}

// optional bool tschchartseriesdefaultshowlabelsinfront = 100;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesdefaultshowlabelsinfront() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesdefaultshowlabelsinfront() {
  _has_bits_[2] |= 0x00000200u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesdefaultshowlabelsinfront() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultshowlabelsinfront() {
  tschchartseriesdefaultshowlabelsinfront_ = false;
  clear_has_tschchartseriesdefaultshowlabelsinfront();
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesdefaultshowlabelsinfront() const {
  return tschchartseriesdefaultshowlabelsinfront_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesdefaultshowlabelsinfront(bool value) {
  set_has_tschchartseriesdefaultshowlabelsinfront();
  tschchartseriesdefaultshowlabelsinfront_ = value;
}

// optional bool tschchartseriesbubbleshowlabelsinfront = 101;
inline bool ChartSeriesNonStyleArchive::has_tschchartseriesbubbleshowlabelsinfront() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void ChartSeriesNonStyleArchive::set_has_tschchartseriesbubbleshowlabelsinfront() {
  _has_bits_[2] |= 0x00000400u;
}
inline void ChartSeriesNonStyleArchive::clear_has_tschchartseriesbubbleshowlabelsinfront() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void ChartSeriesNonStyleArchive::clear_tschchartseriesbubbleshowlabelsinfront() {
  tschchartseriesbubbleshowlabelsinfront_ = false;
  clear_has_tschchartseriesbubbleshowlabelsinfront();
}
inline bool ChartSeriesNonStyleArchive::tschchartseriesbubbleshowlabelsinfront() const {
  return tschchartseriesbubbleshowlabelsinfront_;
}
inline void ChartSeriesNonStyleArchive::set_tschchartseriesbubbleshowlabelsinfront(bool value) {
  set_has_tschchartseriesbubbleshowlabelsinfront();
  tschchartseriesbubbleshowlabelsinfront_ = value;
}

// -------------------------------------------------------------------

// ChartGenericPropertyMapArchive

// optional int32 tschchartinfo3dbarshape = 1;
inline bool ChartGenericPropertyMapArchive::has_tschchartinfo3dbarshape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChartGenericPropertyMapArchive::set_has_tschchartinfo3dbarshape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChartGenericPropertyMapArchive::clear_has_tschchartinfo3dbarshape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfo3dbarshape() {
  tschchartinfo3dbarshape_ = 0;
  clear_has_tschchartinfo3dbarshape();
}
inline ::google::protobuf::int32 ChartGenericPropertyMapArchive::tschchartinfo3dbarshape() const {
  return tschchartinfo3dbarshape_;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfo3dbarshape(::google::protobuf::int32 value) {
  set_has_tschchartinfo3dbarshape();
  tschchartinfo3dbarshape_ = value;
}

// optional bool tschchartinfo3dbeveledges = 2;
inline bool ChartGenericPropertyMapArchive::has_tschchartinfo3dbeveledges() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChartGenericPropertyMapArchive::set_has_tschchartinfo3dbeveledges() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChartGenericPropertyMapArchive::clear_has_tschchartinfo3dbeveledges() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfo3dbeveledges() {
  tschchartinfo3dbeveledges_ = false;
  clear_has_tschchartinfo3dbeveledges();
}
inline bool ChartGenericPropertyMapArchive::tschchartinfo3dbeveledges() const {
  return tschchartinfo3dbeveledges_;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfo3dbeveledges(bool value) {
  set_has_tschchartinfo3dbeveledges();
  tschchartinfo3dbeveledges_ = value;
}

// optional float tschchartinfo3dintersetdepthgap = 3;
inline bool ChartGenericPropertyMapArchive::has_tschchartinfo3dintersetdepthgap() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChartGenericPropertyMapArchive::set_has_tschchartinfo3dintersetdepthgap() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChartGenericPropertyMapArchive::clear_has_tschchartinfo3dintersetdepthgap() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfo3dintersetdepthgap() {
  tschchartinfo3dintersetdepthgap_ = 0;
  clear_has_tschchartinfo3dintersetdepthgap();
}
inline float ChartGenericPropertyMapArchive::tschchartinfo3dintersetdepthgap() const {
  return tschchartinfo3dintersetdepthgap_;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfo3dintersetdepthgap(float value) {
  set_has_tschchartinfo3dintersetdepthgap();
  tschchartinfo3dintersetdepthgap_ = value;
}

// optional .TSCH.Chart3DVectorArchive tschchartinfo3drotation = 4;
inline bool ChartGenericPropertyMapArchive::has_tschchartinfo3drotation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChartGenericPropertyMapArchive::set_has_tschchartinfo3drotation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChartGenericPropertyMapArchive::clear_has_tschchartinfo3drotation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfo3drotation() {
  if (tschchartinfo3drotation_ != NULL) tschchartinfo3drotation_->::TSCH::Chart3DVectorArchive::Clear();
  clear_has_tschchartinfo3drotation();
}
inline const ::TSCH::Chart3DVectorArchive& ChartGenericPropertyMapArchive::tschchartinfo3drotation() const {
  return tschchartinfo3drotation_ != NULL ? *tschchartinfo3drotation_ : *default_instance_->tschchartinfo3drotation_;
}
inline ::TSCH::Chart3DVectorArchive* ChartGenericPropertyMapArchive::mutable_tschchartinfo3drotation() {
  set_has_tschchartinfo3drotation();
  if (tschchartinfo3drotation_ == NULL) tschchartinfo3drotation_ = new ::TSCH::Chart3DVectorArchive;
  return tschchartinfo3drotation_;
}
inline ::TSCH::Chart3DVectorArchive* ChartGenericPropertyMapArchive::release_tschchartinfo3drotation() {
  clear_has_tschchartinfo3drotation();
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfo3drotation_;
  tschchartinfo3drotation_ = NULL;
  return temp;
}
inline void ChartGenericPropertyMapArchive::set_allocated_tschchartinfo3drotation(::TSCH::Chart3DVectorArchive* tschchartinfo3drotation) {
  delete tschchartinfo3drotation_;
  tschchartinfo3drotation_ = tschchartinfo3drotation;
  if (tschchartinfo3drotation) {
    set_has_tschchartinfo3drotation();
  } else {
    clear_has_tschchartinfo3drotation();
  }
}

// optional .TSCH.Chart3DVectorArchive tschchartinfo3dscale = 5;
inline bool ChartGenericPropertyMapArchive::has_tschchartinfo3dscale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChartGenericPropertyMapArchive::set_has_tschchartinfo3dscale() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChartGenericPropertyMapArchive::clear_has_tschchartinfo3dscale() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfo3dscale() {
  if (tschchartinfo3dscale_ != NULL) tschchartinfo3dscale_->::TSCH::Chart3DVectorArchive::Clear();
  clear_has_tschchartinfo3dscale();
}
inline const ::TSCH::Chart3DVectorArchive& ChartGenericPropertyMapArchive::tschchartinfo3dscale() const {
  return tschchartinfo3dscale_ != NULL ? *tschchartinfo3dscale_ : *default_instance_->tschchartinfo3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartGenericPropertyMapArchive::mutable_tschchartinfo3dscale() {
  set_has_tschchartinfo3dscale();
  if (tschchartinfo3dscale_ == NULL) tschchartinfo3dscale_ = new ::TSCH::Chart3DVectorArchive;
  return tschchartinfo3dscale_;
}
inline ::TSCH::Chart3DVectorArchive* ChartGenericPropertyMapArchive::release_tschchartinfo3dscale() {
  clear_has_tschchartinfo3dscale();
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfo3dscale_;
  tschchartinfo3dscale_ = NULL;
  return temp;
}
inline void ChartGenericPropertyMapArchive::set_allocated_tschchartinfo3dscale(::TSCH::Chart3DVectorArchive* tschchartinfo3dscale) {
  delete tschchartinfo3dscale_;
  tschchartinfo3dscale_ = tschchartinfo3dscale;
  if (tschchartinfo3dscale) {
    set_has_tschchartinfo3dscale();
  } else {
    clear_has_tschchartinfo3dscale();
  }
}

// optional .TSCH.Chart3DVectorArchive tschchartinfo3dviewport = 6;
inline bool ChartGenericPropertyMapArchive::has_tschchartinfo3dviewport() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChartGenericPropertyMapArchive::set_has_tschchartinfo3dviewport() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChartGenericPropertyMapArchive::clear_has_tschchartinfo3dviewport() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfo3dviewport() {
  if (tschchartinfo3dviewport_ != NULL) tschchartinfo3dviewport_->::TSCH::Chart3DVectorArchive::Clear();
  clear_has_tschchartinfo3dviewport();
}
inline const ::TSCH::Chart3DVectorArchive& ChartGenericPropertyMapArchive::tschchartinfo3dviewport() const {
  return tschchartinfo3dviewport_ != NULL ? *tschchartinfo3dviewport_ : *default_instance_->tschchartinfo3dviewport_;
}
inline ::TSCH::Chart3DVectorArchive* ChartGenericPropertyMapArchive::mutable_tschchartinfo3dviewport() {
  set_has_tschchartinfo3dviewport();
  if (tschchartinfo3dviewport_ == NULL) tschchartinfo3dviewport_ = new ::TSCH::Chart3DVectorArchive;
  return tschchartinfo3dviewport_;
}
inline ::TSCH::Chart3DVectorArchive* ChartGenericPropertyMapArchive::release_tschchartinfo3dviewport() {
  clear_has_tschchartinfo3dviewport();
  ::TSCH::Chart3DVectorArchive* temp = tschchartinfo3dviewport_;
  tschchartinfo3dviewport_ = NULL;
  return temp;
}
inline void ChartGenericPropertyMapArchive::set_allocated_tschchartinfo3dviewport(::TSCH::Chart3DVectorArchive* tschchartinfo3dviewport) {
  delete tschchartinfo3dviewport_;
  tschchartinfo3dviewport_ = tschchartinfo3dviewport;
  if (tschchartinfo3dviewport) {
    set_has_tschchartinfo3dviewport();
  } else {
    clear_has_tschchartinfo3dviewport();
  }
}

// optional float tschchartinfopiestartangle = 7;
inline bool ChartGenericPropertyMapArchive::has_tschchartinfopiestartangle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChartGenericPropertyMapArchive::set_has_tschchartinfopiestartangle() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChartGenericPropertyMapArchive::clear_has_tschchartinfopiestartangle() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfopiestartangle() {
  tschchartinfopiestartangle_ = 0;
  clear_has_tschchartinfopiestartangle();
}
inline float ChartGenericPropertyMapArchive::tschchartinfopiestartangle() const {
  return tschchartinfopiestartangle_;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfopiestartangle(float value) {
  set_has_tschchartinfopiestartangle();
  tschchartinfopiestartangle_ = value;
}

// optional bool tschchartinfoshowlegend = 8;
inline bool ChartGenericPropertyMapArchive::has_tschchartinfoshowlegend() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChartGenericPropertyMapArchive::set_has_tschchartinfoshowlegend() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChartGenericPropertyMapArchive::clear_has_tschchartinfoshowlegend() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfoshowlegend() {
  tschchartinfoshowlegend_ = false;
  clear_has_tschchartinfoshowlegend();
}
inline bool ChartGenericPropertyMapArchive::tschchartinfoshowlegend() const {
  return tschchartinfoshowlegend_;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfoshowlegend(bool value) {
  set_has_tschchartinfoshowlegend();
  tschchartinfoshowlegend_ = value;
}

// optional bool tschchartinfoshowtitle = 9;
inline bool ChartGenericPropertyMapArchive::has_tschchartinfoshowtitle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChartGenericPropertyMapArchive::set_has_tschchartinfoshowtitle() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChartGenericPropertyMapArchive::clear_has_tschchartinfoshowtitle() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfoshowtitle() {
  tschchartinfoshowtitle_ = false;
  clear_has_tschchartinfoshowtitle();
}
inline bool ChartGenericPropertyMapArchive::tschchartinfoshowtitle() const {
  return tschchartinfoshowtitle_;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfoshowtitle(bool value) {
  set_has_tschchartinfoshowtitle();
  tschchartinfoshowtitle_ = value;
}

// optional bool tschchartinfoskiphiddendata = 10;
inline bool ChartGenericPropertyMapArchive::has_tschchartinfoskiphiddendata() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChartGenericPropertyMapArchive::set_has_tschchartinfoskiphiddendata() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ChartGenericPropertyMapArchive::clear_has_tschchartinfoskiphiddendata() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfoskiphiddendata() {
  tschchartinfoskiphiddendata_ = false;
  clear_has_tschchartinfoskiphiddendata();
}
inline bool ChartGenericPropertyMapArchive::tschchartinfoskiphiddendata() const {
  return tschchartinfoskiphiddendata_;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfoskiphiddendata(bool value) {
  set_has_tschchartinfoskiphiddendata();
  tschchartinfoskiphiddendata_ = value;
}

// optional string tschchartinfotitle = 11;
inline bool ChartGenericPropertyMapArchive::has_tschchartinfotitle() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChartGenericPropertyMapArchive::set_has_tschchartinfotitle() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ChartGenericPropertyMapArchive::clear_has_tschchartinfotitle() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfotitle() {
  if (tschchartinfotitle_ != &::google::protobuf::internal::kEmptyString) {
    tschchartinfotitle_->clear();
  }
  clear_has_tschchartinfotitle();
}
inline const ::std::string& ChartGenericPropertyMapArchive::tschchartinfotitle() const {
  return *tschchartinfotitle_;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfotitle(const ::std::string& value) {
  set_has_tschchartinfotitle();
  if (tschchartinfotitle_ == &::google::protobuf::internal::kEmptyString) {
    tschchartinfotitle_ = new ::std::string;
  }
  tschchartinfotitle_->assign(value);
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfotitle(const char* value) {
  set_has_tschchartinfotitle();
  if (tschchartinfotitle_ == &::google::protobuf::internal::kEmptyString) {
    tschchartinfotitle_ = new ::std::string;
  }
  tschchartinfotitle_->assign(value);
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfotitle(const char* value, size_t size) {
  set_has_tschchartinfotitle();
  if (tschchartinfotitle_ == &::google::protobuf::internal::kEmptyString) {
    tschchartinfotitle_ = new ::std::string;
  }
  tschchartinfotitle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChartGenericPropertyMapArchive::mutable_tschchartinfotitle() {
  set_has_tschchartinfotitle();
  if (tschchartinfotitle_ == &::google::protobuf::internal::kEmptyString) {
    tschchartinfotitle_ = new ::std::string;
  }
  return tschchartinfotitle_;
}
inline ::std::string* ChartGenericPropertyMapArchive::release_tschchartinfotitle() {
  clear_has_tschchartinfotitle();
  if (tschchartinfotitle_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tschchartinfotitle_;
    tschchartinfotitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChartGenericPropertyMapArchive::set_allocated_tschchartinfotitle(::std::string* tschchartinfotitle) {
  if (tschchartinfotitle_ != &::google::protobuf::internal::kEmptyString) {
    delete tschchartinfotitle_;
  }
  if (tschchartinfotitle) {
    set_has_tschchartinfotitle();
    tschchartinfotitle_ = tschchartinfotitle;
  } else {
    clear_has_tschchartinfotitle();
    tschchartinfotitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 tschchartinfodatasetnamelocation = 12;
inline bool ChartGenericPropertyMapArchive::has_tschchartinfodatasetnamelocation() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ChartGenericPropertyMapArchive::set_has_tschchartinfodatasetnamelocation() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ChartGenericPropertyMapArchive::clear_has_tschchartinfodatasetnamelocation() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfodatasetnamelocation() {
  tschchartinfodatasetnamelocation_ = 0;
  clear_has_tschchartinfodatasetnamelocation();
}
inline ::google::protobuf::int32 ChartGenericPropertyMapArchive::tschchartinfodatasetnamelocation() const {
  return tschchartinfodatasetnamelocation_;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfodatasetnamelocation(::google::protobuf::int32 value) {
  set_has_tschchartinfodatasetnamelocation();
  tschchartinfodatasetnamelocation_ = value;
}

// optional int32 tschchartinfomultidatacontroltype = 13;
inline bool ChartGenericPropertyMapArchive::has_tschchartinfomultidatacontroltype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ChartGenericPropertyMapArchive::set_has_tschchartinfomultidatacontroltype() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ChartGenericPropertyMapArchive::clear_has_tschchartinfomultidatacontroltype() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfomultidatacontroltype() {
  tschchartinfomultidatacontroltype_ = 0;
  clear_has_tschchartinfomultidatacontroltype();
}
inline ::google::protobuf::int32 ChartGenericPropertyMapArchive::tschchartinfomultidatacontroltype() const {
  return tschchartinfomultidatacontroltype_;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfomultidatacontroltype(::google::protobuf::int32 value) {
  set_has_tschchartinfomultidatacontroltype();
  tschchartinfomultidatacontroltype_ = value;
}

// optional float tschchartinfo3dchartopacity = 14;
inline bool ChartGenericPropertyMapArchive::has_tschchartinfo3dchartopacity() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ChartGenericPropertyMapArchive::set_has_tschchartinfo3dchartopacity() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ChartGenericPropertyMapArchive::clear_has_tschchartinfo3dchartopacity() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfo3dchartopacity() {
  tschchartinfo3dchartopacity_ = 0;
  clear_has_tschchartinfo3dchartopacity();
}
inline float ChartGenericPropertyMapArchive::tschchartinfo3dchartopacity() const {
  return tschchartinfo3dchartopacity_;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfo3dchartopacity(float value) {
  set_has_tschchartinfo3dchartopacity();
  tschchartinfo3dchartopacity_ = value;
}

// optional .TSCH.Chart3DLightingPackageArchive tschchartinfo3dlightingpackage = 15;
inline bool ChartGenericPropertyMapArchive::has_tschchartinfo3dlightingpackage() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ChartGenericPropertyMapArchive::set_has_tschchartinfo3dlightingpackage() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ChartGenericPropertyMapArchive::clear_has_tschchartinfo3dlightingpackage() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfo3dlightingpackage() {
  if (tschchartinfo3dlightingpackage_ != NULL) tschchartinfo3dlightingpackage_->::TSCH::Chart3DLightingPackageArchive::Clear();
  clear_has_tschchartinfo3dlightingpackage();
}
inline const ::TSCH::Chart3DLightingPackageArchive& ChartGenericPropertyMapArchive::tschchartinfo3dlightingpackage() const {
  return tschchartinfo3dlightingpackage_ != NULL ? *tschchartinfo3dlightingpackage_ : *default_instance_->tschchartinfo3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartGenericPropertyMapArchive::mutable_tschchartinfo3dlightingpackage() {
  set_has_tschchartinfo3dlightingpackage();
  if (tschchartinfo3dlightingpackage_ == NULL) tschchartinfo3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive;
  return tschchartinfo3dlightingpackage_;
}
inline ::TSCH::Chart3DLightingPackageArchive* ChartGenericPropertyMapArchive::release_tschchartinfo3dlightingpackage() {
  clear_has_tschchartinfo3dlightingpackage();
  ::TSCH::Chart3DLightingPackageArchive* temp = tschchartinfo3dlightingpackage_;
  tschchartinfo3dlightingpackage_ = NULL;
  return temp;
}
inline void ChartGenericPropertyMapArchive::set_allocated_tschchartinfo3dlightingpackage(::TSCH::Chart3DLightingPackageArchive* tschchartinfo3dlightingpackage) {
  delete tschchartinfo3dlightingpackage_;
  tschchartinfo3dlightingpackage_ = tschchartinfo3dlightingpackage;
  if (tschchartinfo3dlightingpackage) {
    set_has_tschchartinfo3dlightingpackage();
  } else {
    clear_has_tschchartinfo3dlightingpackage();
  }
}

// optional .TSD.FillArchive tschchartinfobackgroundfill = 16;
inline bool ChartGenericPropertyMapArchive::has_tschchartinfobackgroundfill() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ChartGenericPropertyMapArchive::set_has_tschchartinfobackgroundfill() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ChartGenericPropertyMapArchive::clear_has_tschchartinfobackgroundfill() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfobackgroundfill() {
  if (tschchartinfobackgroundfill_ != NULL) tschchartinfobackgroundfill_->::TSD::FillArchive::Clear();
  clear_has_tschchartinfobackgroundfill();
}
inline const ::TSD::FillArchive& ChartGenericPropertyMapArchive::tschchartinfobackgroundfill() const {
  return tschchartinfobackgroundfill_ != NULL ? *tschchartinfobackgroundfill_ : *default_instance_->tschchartinfobackgroundfill_;
}
inline ::TSD::FillArchive* ChartGenericPropertyMapArchive::mutable_tschchartinfobackgroundfill() {
  set_has_tschchartinfobackgroundfill();
  if (tschchartinfobackgroundfill_ == NULL) tschchartinfobackgroundfill_ = new ::TSD::FillArchive;
  return tschchartinfobackgroundfill_;
}
inline ::TSD::FillArchive* ChartGenericPropertyMapArchive::release_tschchartinfobackgroundfill() {
  clear_has_tschchartinfobackgroundfill();
  ::TSD::FillArchive* temp = tschchartinfobackgroundfill_;
  tschchartinfobackgroundfill_ = NULL;
  return temp;
}
inline void ChartGenericPropertyMapArchive::set_allocated_tschchartinfobackgroundfill(::TSD::FillArchive* tschchartinfobackgroundfill) {
  delete tschchartinfobackgroundfill_;
  tschchartinfobackgroundfill_ = tschchartinfobackgroundfill;
  if (tschchartinfobackgroundfill) {
    set_has_tschchartinfobackgroundfill();
  } else {
    clear_has_tschchartinfobackgroundfill();
  }
}

// optional .TSD.StrokeArchive tschchartinfobackgroundstroke = 17;
inline bool ChartGenericPropertyMapArchive::has_tschchartinfobackgroundstroke() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ChartGenericPropertyMapArchive::set_has_tschchartinfobackgroundstroke() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ChartGenericPropertyMapArchive::clear_has_tschchartinfobackgroundstroke() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfobackgroundstroke() {
  if (tschchartinfobackgroundstroke_ != NULL) tschchartinfobackgroundstroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartinfobackgroundstroke();
}
inline const ::TSD::StrokeArchive& ChartGenericPropertyMapArchive::tschchartinfobackgroundstroke() const {
  return tschchartinfobackgroundstroke_ != NULL ? *tschchartinfobackgroundstroke_ : *default_instance_->tschchartinfobackgroundstroke_;
}
inline ::TSD::StrokeArchive* ChartGenericPropertyMapArchive::mutable_tschchartinfobackgroundstroke() {
  set_has_tschchartinfobackgroundstroke();
  if (tschchartinfobackgroundstroke_ == NULL) tschchartinfobackgroundstroke_ = new ::TSD::StrokeArchive;
  return tschchartinfobackgroundstroke_;
}
inline ::TSD::StrokeArchive* ChartGenericPropertyMapArchive::release_tschchartinfobackgroundstroke() {
  clear_has_tschchartinfobackgroundstroke();
  ::TSD::StrokeArchive* temp = tschchartinfobackgroundstroke_;
  tschchartinfobackgroundstroke_ = NULL;
  return temp;
}
inline void ChartGenericPropertyMapArchive::set_allocated_tschchartinfobackgroundstroke(::TSD::StrokeArchive* tschchartinfobackgroundstroke) {
  delete tschchartinfobackgroundstroke_;
  tschchartinfobackgroundstroke_ = tschchartinfobackgroundstroke;
  if (tschchartinfobackgroundstroke) {
    set_has_tschchartinfobackgroundstroke();
  } else {
    clear_has_tschchartinfobackgroundstroke();
  }
}

// optional float tschchartinfoborderopacity = 18;
inline bool ChartGenericPropertyMapArchive::has_tschchartinfoborderopacity() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ChartGenericPropertyMapArchive::set_has_tschchartinfoborderopacity() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ChartGenericPropertyMapArchive::clear_has_tschchartinfoborderopacity() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfoborderopacity() {
  tschchartinfoborderopacity_ = 0;
  clear_has_tschchartinfoborderopacity();
}
inline float ChartGenericPropertyMapArchive::tschchartinfoborderopacity() const {
  return tschchartinfoborderopacity_;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfoborderopacity(float value) {
  set_has_tschchartinfoborderopacity();
  tschchartinfoborderopacity_ = value;
}

// optional .TSD.ShadowArchive tschchartinfobordershadow = 19;
inline bool ChartGenericPropertyMapArchive::has_tschchartinfobordershadow() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ChartGenericPropertyMapArchive::set_has_tschchartinfobordershadow() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ChartGenericPropertyMapArchive::clear_has_tschchartinfobordershadow() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfobordershadow() {
  if (tschchartinfobordershadow_ != NULL) tschchartinfobordershadow_->::TSD::ShadowArchive::Clear();
  clear_has_tschchartinfobordershadow();
}
inline const ::TSD::ShadowArchive& ChartGenericPropertyMapArchive::tschchartinfobordershadow() const {
  return tschchartinfobordershadow_ != NULL ? *tschchartinfobordershadow_ : *default_instance_->tschchartinfobordershadow_;
}
inline ::TSD::ShadowArchive* ChartGenericPropertyMapArchive::mutable_tschchartinfobordershadow() {
  set_has_tschchartinfobordershadow();
  if (tschchartinfobordershadow_ == NULL) tschchartinfobordershadow_ = new ::TSD::ShadowArchive;
  return tschchartinfobordershadow_;
}
inline ::TSD::ShadowArchive* ChartGenericPropertyMapArchive::release_tschchartinfobordershadow() {
  clear_has_tschchartinfobordershadow();
  ::TSD::ShadowArchive* temp = tschchartinfobordershadow_;
  tschchartinfobordershadow_ = NULL;
  return temp;
}
inline void ChartGenericPropertyMapArchive::set_allocated_tschchartinfobordershadow(::TSD::ShadowArchive* tschchartinfobordershadow) {
  delete tschchartinfobordershadow_;
  tschchartinfobordershadow_ = tschchartinfobordershadow;
  if (tschchartinfobordershadow) {
    set_has_tschchartinfobordershadow();
  } else {
    clear_has_tschchartinfobordershadow();
  }
}

// optional .TSD.StrokeArchive tschchartinfoborderstroke = 20;
inline bool ChartGenericPropertyMapArchive::has_tschchartinfoborderstroke() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ChartGenericPropertyMapArchive::set_has_tschchartinfoborderstroke() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ChartGenericPropertyMapArchive::clear_has_tschchartinfoborderstroke() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfoborderstroke() {
  if (tschchartinfoborderstroke_ != NULL) tschchartinfoborderstroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartinfoborderstroke();
}
inline const ::TSD::StrokeArchive& ChartGenericPropertyMapArchive::tschchartinfoborderstroke() const {
  return tschchartinfoborderstroke_ != NULL ? *tschchartinfoborderstroke_ : *default_instance_->tschchartinfoborderstroke_;
}
inline ::TSD::StrokeArchive* ChartGenericPropertyMapArchive::mutable_tschchartinfoborderstroke() {
  set_has_tschchartinfoborderstroke();
  if (tschchartinfoborderstroke_ == NULL) tschchartinfoborderstroke_ = new ::TSD::StrokeArchive;
  return tschchartinfoborderstroke_;
}
inline ::TSD::StrokeArchive* ChartGenericPropertyMapArchive::release_tschchartinfoborderstroke() {
  clear_has_tschchartinfoborderstroke();
  ::TSD::StrokeArchive* temp = tschchartinfoborderstroke_;
  tschchartinfoborderstroke_ = NULL;
  return temp;
}
inline void ChartGenericPropertyMapArchive::set_allocated_tschchartinfoborderstroke(::TSD::StrokeArchive* tschchartinfoborderstroke) {
  delete tschchartinfoborderstroke_;
  tschchartinfoborderstroke_ = tschchartinfoborderstroke;
  if (tschchartinfoborderstroke) {
    set_has_tschchartinfoborderstroke();
  } else {
    clear_has_tschchartinfoborderstroke();
  }
}

// optional bool tschchartinfocombinelayers = 21;
inline bool ChartGenericPropertyMapArchive::has_tschchartinfocombinelayers() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ChartGenericPropertyMapArchive::set_has_tschchartinfocombinelayers() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ChartGenericPropertyMapArchive::clear_has_tschchartinfocombinelayers() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfocombinelayers() {
  tschchartinfocombinelayers_ = false;
  clear_has_tschchartinfocombinelayers();
}
inline bool ChartGenericPropertyMapArchive::tschchartinfocombinelayers() const {
  return tschchartinfocombinelayers_;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfocombinelayers(bool value) {
  set_has_tschchartinfocombinelayers();
  tschchartinfocombinelayers_ = value;
}

// optional .TSD.FillArchive tschchartinfogridbackgroundfill = 22;
inline bool ChartGenericPropertyMapArchive::has_tschchartinfogridbackgroundfill() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ChartGenericPropertyMapArchive::set_has_tschchartinfogridbackgroundfill() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ChartGenericPropertyMapArchive::clear_has_tschchartinfogridbackgroundfill() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfogridbackgroundfill() {
  if (tschchartinfogridbackgroundfill_ != NULL) tschchartinfogridbackgroundfill_->::TSD::FillArchive::Clear();
  clear_has_tschchartinfogridbackgroundfill();
}
inline const ::TSD::FillArchive& ChartGenericPropertyMapArchive::tschchartinfogridbackgroundfill() const {
  return tschchartinfogridbackgroundfill_ != NULL ? *tschchartinfogridbackgroundfill_ : *default_instance_->tschchartinfogridbackgroundfill_;
}
inline ::TSD::FillArchive* ChartGenericPropertyMapArchive::mutable_tschchartinfogridbackgroundfill() {
  set_has_tschchartinfogridbackgroundfill();
  if (tschchartinfogridbackgroundfill_ == NULL) tschchartinfogridbackgroundfill_ = new ::TSD::FillArchive;
  return tschchartinfogridbackgroundfill_;
}
inline ::TSD::FillArchive* ChartGenericPropertyMapArchive::release_tschchartinfogridbackgroundfill() {
  clear_has_tschchartinfogridbackgroundfill();
  ::TSD::FillArchive* temp = tschchartinfogridbackgroundfill_;
  tschchartinfogridbackgroundfill_ = NULL;
  return temp;
}
inline void ChartGenericPropertyMapArchive::set_allocated_tschchartinfogridbackgroundfill(::TSD::FillArchive* tschchartinfogridbackgroundfill) {
  delete tschchartinfogridbackgroundfill_;
  tschchartinfogridbackgroundfill_ = tschchartinfogridbackgroundfill;
  if (tschchartinfogridbackgroundfill) {
    set_has_tschchartinfogridbackgroundfill();
  } else {
    clear_has_tschchartinfogridbackgroundfill();
  }
}

// optional float tschchartinfogridbackgroundopacity = 23;
inline bool ChartGenericPropertyMapArchive::has_tschchartinfogridbackgroundopacity() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ChartGenericPropertyMapArchive::set_has_tschchartinfogridbackgroundopacity() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ChartGenericPropertyMapArchive::clear_has_tschchartinfogridbackgroundopacity() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfogridbackgroundopacity() {
  tschchartinfogridbackgroundopacity_ = 0;
  clear_has_tschchartinfogridbackgroundopacity();
}
inline float ChartGenericPropertyMapArchive::tschchartinfogridbackgroundopacity() const {
  return tschchartinfogridbackgroundopacity_;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfogridbackgroundopacity(float value) {
  set_has_tschchartinfogridbackgroundopacity();
  tschchartinfogridbackgroundopacity_ = value;
}

// optional float tschchartinfointerbargap = 24;
inline bool ChartGenericPropertyMapArchive::has_tschchartinfointerbargap() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ChartGenericPropertyMapArchive::set_has_tschchartinfointerbargap() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ChartGenericPropertyMapArchive::clear_has_tschchartinfointerbargap() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfointerbargap() {
  tschchartinfointerbargap_ = 0;
  clear_has_tschchartinfointerbargap();
}
inline float ChartGenericPropertyMapArchive::tschchartinfointerbargap() const {
  return tschchartinfointerbargap_;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfointerbargap(float value) {
  set_has_tschchartinfointerbargap();
  tschchartinfointerbargap_ = value;
}

// optional float tschchartinfointersetgap = 25;
inline bool ChartGenericPropertyMapArchive::has_tschchartinfointersetgap() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ChartGenericPropertyMapArchive::set_has_tschchartinfointersetgap() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ChartGenericPropertyMapArchive::clear_has_tschchartinfointersetgap() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfointersetgap() {
  tschchartinfointersetgap_ = 0;
  clear_has_tschchartinfointersetgap();
}
inline float ChartGenericPropertyMapArchive::tschchartinfointersetgap() const {
  return tschchartinfointersetgap_;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfointersetgap(float value) {
  set_has_tschchartinfointersetgap();
  tschchartinfointersetgap_ = value;
}

// optional bool tschchartinfoshowborder = 26;
inline bool ChartGenericPropertyMapArchive::has_tschchartinfoshowborder() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ChartGenericPropertyMapArchive::set_has_tschchartinfoshowborder() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ChartGenericPropertyMapArchive::clear_has_tschchartinfoshowborder() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfoshowborder() {
  tschchartinfoshowborder_ = false;
  clear_has_tschchartinfoshowborder();
}
inline bool ChartGenericPropertyMapArchive::tschchartinfoshowborder() const {
  return tschchartinfoshowborder_;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfoshowborder(bool value) {
  set_has_tschchartinfoshowborder();
  tschchartinfoshowborder_ = value;
}

// optional .TSP.Color tschchartinfotitlecolor = 27;
inline bool ChartGenericPropertyMapArchive::has_tschchartinfotitlecolor() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ChartGenericPropertyMapArchive::set_has_tschchartinfotitlecolor() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ChartGenericPropertyMapArchive::clear_has_tschchartinfotitlecolor() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfotitlecolor() {
  if (tschchartinfotitlecolor_ != NULL) tschchartinfotitlecolor_->::TSP::Color::Clear();
  clear_has_tschchartinfotitlecolor();
}
inline const ::TSP::Color& ChartGenericPropertyMapArchive::tschchartinfotitlecolor() const {
  return tschchartinfotitlecolor_ != NULL ? *tschchartinfotitlecolor_ : *default_instance_->tschchartinfotitlecolor_;
}
inline ::TSP::Color* ChartGenericPropertyMapArchive::mutable_tschchartinfotitlecolor() {
  set_has_tschchartinfotitlecolor();
  if (tschchartinfotitlecolor_ == NULL) tschchartinfotitlecolor_ = new ::TSP::Color;
  return tschchartinfotitlecolor_;
}
inline ::TSP::Color* ChartGenericPropertyMapArchive::release_tschchartinfotitlecolor() {
  clear_has_tschchartinfotitlecolor();
  ::TSP::Color* temp = tschchartinfotitlecolor_;
  tschchartinfotitlecolor_ = NULL;
  return temp;
}
inline void ChartGenericPropertyMapArchive::set_allocated_tschchartinfotitlecolor(::TSP::Color* tschchartinfotitlecolor) {
  delete tschchartinfotitlecolor_;
  tschchartinfotitlecolor_ = tschchartinfotitlecolor;
  if (tschchartinfotitlecolor) {
    set_has_tschchartinfotitlecolor();
  } else {
    clear_has_tschchartinfotitlecolor();
  }
}

// optional int32 tschchartinfotitleparagraphstyleindex = 28;
inline bool ChartGenericPropertyMapArchive::has_tschchartinfotitleparagraphstyleindex() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ChartGenericPropertyMapArchive::set_has_tschchartinfotitleparagraphstyleindex() {
  _has_bits_[0] |= 0x08000000u;
}
inline void ChartGenericPropertyMapArchive::clear_has_tschchartinfotitleparagraphstyleindex() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfotitleparagraphstyleindex() {
  tschchartinfotitleparagraphstyleindex_ = 0;
  clear_has_tschchartinfotitleparagraphstyleindex();
}
inline ::google::protobuf::int32 ChartGenericPropertyMapArchive::tschchartinfotitleparagraphstyleindex() const {
  return tschchartinfotitleparagraphstyleindex_;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfotitleparagraphstyleindex(::google::protobuf::int32 value) {
  set_has_tschchartinfotitleparagraphstyleindex();
  tschchartinfotitleparagraphstyleindex_ = value;
}

// optional int32 tschchartinfodatasetnameparagraphstyleindex = 29;
inline bool ChartGenericPropertyMapArchive::has_tschchartinfodatasetnameparagraphstyleindex() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void ChartGenericPropertyMapArchive::set_has_tschchartinfodatasetnameparagraphstyleindex() {
  _has_bits_[0] |= 0x10000000u;
}
inline void ChartGenericPropertyMapArchive::clear_has_tschchartinfodatasetnameparagraphstyleindex() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void ChartGenericPropertyMapArchive::clear_tschchartinfodatasetnameparagraphstyleindex() {
  tschchartinfodatasetnameparagraphstyleindex_ = 0;
  clear_has_tschchartinfodatasetnameparagraphstyleindex();
}
inline ::google::protobuf::int32 ChartGenericPropertyMapArchive::tschchartinfodatasetnameparagraphstyleindex() const {
  return tschchartinfodatasetnameparagraphstyleindex_;
}
inline void ChartGenericPropertyMapArchive::set_tschchartinfodatasetnameparagraphstyleindex(::google::protobuf::int32 value) {
  set_has_tschchartinfodatasetnameparagraphstyleindex();
  tschchartinfodatasetnameparagraphstyleindex_ = value;
}

// -------------------------------------------------------------------

// LegendGenericPropertyMapArchive

// optional .TSD.FillArchive tschlegendmodelfill = 1;
inline bool LegendGenericPropertyMapArchive::has_tschlegendmodelfill() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LegendGenericPropertyMapArchive::set_has_tschlegendmodelfill() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LegendGenericPropertyMapArchive::clear_has_tschlegendmodelfill() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LegendGenericPropertyMapArchive::clear_tschlegendmodelfill() {
  if (tschlegendmodelfill_ != NULL) tschlegendmodelfill_->::TSD::FillArchive::Clear();
  clear_has_tschlegendmodelfill();
}
inline const ::TSD::FillArchive& LegendGenericPropertyMapArchive::tschlegendmodelfill() const {
  return tschlegendmodelfill_ != NULL ? *tschlegendmodelfill_ : *default_instance_->tschlegendmodelfill_;
}
inline ::TSD::FillArchive* LegendGenericPropertyMapArchive::mutable_tschlegendmodelfill() {
  set_has_tschlegendmodelfill();
  if (tschlegendmodelfill_ == NULL) tschlegendmodelfill_ = new ::TSD::FillArchive;
  return tschlegendmodelfill_;
}
inline ::TSD::FillArchive* LegendGenericPropertyMapArchive::release_tschlegendmodelfill() {
  clear_has_tschlegendmodelfill();
  ::TSD::FillArchive* temp = tschlegendmodelfill_;
  tschlegendmodelfill_ = NULL;
  return temp;
}
inline void LegendGenericPropertyMapArchive::set_allocated_tschlegendmodelfill(::TSD::FillArchive* tschlegendmodelfill) {
  delete tschlegendmodelfill_;
  tschlegendmodelfill_ = tschlegendmodelfill;
  if (tschlegendmodelfill) {
    set_has_tschlegendmodelfill();
  } else {
    clear_has_tschlegendmodelfill();
  }
}

// optional int32 tschlegendmodellabelparagraphstyleindex = 2;
inline bool LegendGenericPropertyMapArchive::has_tschlegendmodellabelparagraphstyleindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LegendGenericPropertyMapArchive::set_has_tschlegendmodellabelparagraphstyleindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LegendGenericPropertyMapArchive::clear_has_tschlegendmodellabelparagraphstyleindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LegendGenericPropertyMapArchive::clear_tschlegendmodellabelparagraphstyleindex() {
  tschlegendmodellabelparagraphstyleindex_ = 0;
  clear_has_tschlegendmodellabelparagraphstyleindex();
}
inline ::google::protobuf::int32 LegendGenericPropertyMapArchive::tschlegendmodellabelparagraphstyleindex() const {
  return tschlegendmodellabelparagraphstyleindex_;
}
inline void LegendGenericPropertyMapArchive::set_tschlegendmodellabelparagraphstyleindex(::google::protobuf::int32 value) {
  set_has_tschlegendmodellabelparagraphstyleindex();
  tschlegendmodellabelparagraphstyleindex_ = value;
}

// optional float tschlegendmodelopacity = 3;
inline bool LegendGenericPropertyMapArchive::has_tschlegendmodelopacity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LegendGenericPropertyMapArchive::set_has_tschlegendmodelopacity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LegendGenericPropertyMapArchive::clear_has_tschlegendmodelopacity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LegendGenericPropertyMapArchive::clear_tschlegendmodelopacity() {
  tschlegendmodelopacity_ = 0;
  clear_has_tschlegendmodelopacity();
}
inline float LegendGenericPropertyMapArchive::tschlegendmodelopacity() const {
  return tschlegendmodelopacity_;
}
inline void LegendGenericPropertyMapArchive::set_tschlegendmodelopacity(float value) {
  set_has_tschlegendmodelopacity();
  tschlegendmodelopacity_ = value;
}

// optional .TSD.ShadowArchive tschlegendmodelshadow = 4;
inline bool LegendGenericPropertyMapArchive::has_tschlegendmodelshadow() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LegendGenericPropertyMapArchive::set_has_tschlegendmodelshadow() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LegendGenericPropertyMapArchive::clear_has_tschlegendmodelshadow() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LegendGenericPropertyMapArchive::clear_tschlegendmodelshadow() {
  if (tschlegendmodelshadow_ != NULL) tschlegendmodelshadow_->::TSD::ShadowArchive::Clear();
  clear_has_tschlegendmodelshadow();
}
inline const ::TSD::ShadowArchive& LegendGenericPropertyMapArchive::tschlegendmodelshadow() const {
  return tschlegendmodelshadow_ != NULL ? *tschlegendmodelshadow_ : *default_instance_->tschlegendmodelshadow_;
}
inline ::TSD::ShadowArchive* LegendGenericPropertyMapArchive::mutable_tschlegendmodelshadow() {
  set_has_tschlegendmodelshadow();
  if (tschlegendmodelshadow_ == NULL) tschlegendmodelshadow_ = new ::TSD::ShadowArchive;
  return tschlegendmodelshadow_;
}
inline ::TSD::ShadowArchive* LegendGenericPropertyMapArchive::release_tschlegendmodelshadow() {
  clear_has_tschlegendmodelshadow();
  ::TSD::ShadowArchive* temp = tschlegendmodelshadow_;
  tschlegendmodelshadow_ = NULL;
  return temp;
}
inline void LegendGenericPropertyMapArchive::set_allocated_tschlegendmodelshadow(::TSD::ShadowArchive* tschlegendmodelshadow) {
  delete tschlegendmodelshadow_;
  tschlegendmodelshadow_ = tschlegendmodelshadow;
  if (tschlegendmodelshadow) {
    set_has_tschlegendmodelshadow();
  } else {
    clear_has_tschlegendmodelshadow();
  }
}

// optional .TSD.StrokeArchive tschlegendmodelstroke = 5;
inline bool LegendGenericPropertyMapArchive::has_tschlegendmodelstroke() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LegendGenericPropertyMapArchive::set_has_tschlegendmodelstroke() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LegendGenericPropertyMapArchive::clear_has_tschlegendmodelstroke() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LegendGenericPropertyMapArchive::clear_tschlegendmodelstroke() {
  if (tschlegendmodelstroke_ != NULL) tschlegendmodelstroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschlegendmodelstroke();
}
inline const ::TSD::StrokeArchive& LegendGenericPropertyMapArchive::tschlegendmodelstroke() const {
  return tschlegendmodelstroke_ != NULL ? *tschlegendmodelstroke_ : *default_instance_->tschlegendmodelstroke_;
}
inline ::TSD::StrokeArchive* LegendGenericPropertyMapArchive::mutable_tschlegendmodelstroke() {
  set_has_tschlegendmodelstroke();
  if (tschlegendmodelstroke_ == NULL) tschlegendmodelstroke_ = new ::TSD::StrokeArchive;
  return tschlegendmodelstroke_;
}
inline ::TSD::StrokeArchive* LegendGenericPropertyMapArchive::release_tschlegendmodelstroke() {
  clear_has_tschlegendmodelstroke();
  ::TSD::StrokeArchive* temp = tschlegendmodelstroke_;
  tschlegendmodelstroke_ = NULL;
  return temp;
}
inline void LegendGenericPropertyMapArchive::set_allocated_tschlegendmodelstroke(::TSD::StrokeArchive* tschlegendmodelstroke) {
  delete tschlegendmodelstroke_;
  tschlegendmodelstroke_ = tschlegendmodelstroke;
  if (tschlegendmodelstroke) {
    set_has_tschlegendmodelstroke();
  } else {
    clear_has_tschlegendmodelstroke();
  }
}

// -------------------------------------------------------------------

// ChartAxisGenericPropertyMapArchive

// optional int32 tschchartaxis3dlabelposition = 1;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxis3dlabelposition() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxis3dlabelposition() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxis3dlabelposition() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxis3dlabelposition() {
  tschchartaxis3dlabelposition_ = 0;
  clear_has_tschchartaxis3dlabelposition();
}
inline ::google::protobuf::int32 ChartAxisGenericPropertyMapArchive::tschchartaxis3dlabelposition() const {
  return tschchartaxis3dlabelposition_;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxis3dlabelposition(::google::protobuf::int32 value) {
  set_has_tschchartaxis3dlabelposition();
  tschchartaxis3dlabelposition_ = value;
}

// optional .TSK.FormatStructArchive tschchartaxis1_0numberformat = 2;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxis1_0numberformat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxis1_0numberformat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxis1_0numberformat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxis1_0numberformat() {
  if (tschchartaxis1_0numberformat_ != NULL) tschchartaxis1_0numberformat_->::TSK::FormatStructArchive::Clear();
  clear_has_tschchartaxis1_0numberformat();
}
inline const ::TSK::FormatStructArchive& ChartAxisGenericPropertyMapArchive::tschchartaxis1_0numberformat() const {
  return tschchartaxis1_0numberformat_ != NULL ? *tschchartaxis1_0numberformat_ : *default_instance_->tschchartaxis1_0numberformat_;
}
inline ::TSK::FormatStructArchive* ChartAxisGenericPropertyMapArchive::mutable_tschchartaxis1_0numberformat() {
  set_has_tschchartaxis1_0numberformat();
  if (tschchartaxis1_0numberformat_ == NULL) tschchartaxis1_0numberformat_ = new ::TSK::FormatStructArchive;
  return tschchartaxis1_0numberformat_;
}
inline ::TSK::FormatStructArchive* ChartAxisGenericPropertyMapArchive::release_tschchartaxis1_0numberformat() {
  clear_has_tschchartaxis1_0numberformat();
  ::TSK::FormatStructArchive* temp = tschchartaxis1_0numberformat_;
  tschchartaxis1_0numberformat_ = NULL;
  return temp;
}
inline void ChartAxisGenericPropertyMapArchive::set_allocated_tschchartaxis1_0numberformat(::TSK::FormatStructArchive* tschchartaxis1_0numberformat) {
  delete tschchartaxis1_0numberformat_;
  tschchartaxis1_0numberformat_ = tschchartaxis1_0numberformat;
  if (tschchartaxis1_0numberformat) {
    set_has_tschchartaxis1_0numberformat();
  } else {
    clear_has_tschchartaxis1_0numberformat();
  }
}

// optional .TSK.FormatStructArchive tschchartaxisnumberformat = 3;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisnumberformat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxisnumberformat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxisnumberformat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisnumberformat() {
  if (tschchartaxisnumberformat_ != NULL) tschchartaxisnumberformat_->::TSK::FormatStructArchive::Clear();
  clear_has_tschchartaxisnumberformat();
}
inline const ::TSK::FormatStructArchive& ChartAxisGenericPropertyMapArchive::tschchartaxisnumberformat() const {
  return tschchartaxisnumberformat_ != NULL ? *tschchartaxisnumberformat_ : *default_instance_->tschchartaxisnumberformat_;
}
inline ::TSK::FormatStructArchive* ChartAxisGenericPropertyMapArchive::mutable_tschchartaxisnumberformat() {
  set_has_tschchartaxisnumberformat();
  if (tschchartaxisnumberformat_ == NULL) tschchartaxisnumberformat_ = new ::TSK::FormatStructArchive;
  return tschchartaxisnumberformat_;
}
inline ::TSK::FormatStructArchive* ChartAxisGenericPropertyMapArchive::release_tschchartaxisnumberformat() {
  clear_has_tschchartaxisnumberformat();
  ::TSK::FormatStructArchive* temp = tschchartaxisnumberformat_;
  tschchartaxisnumberformat_ = NULL;
  return temp;
}
inline void ChartAxisGenericPropertyMapArchive::set_allocated_tschchartaxisnumberformat(::TSK::FormatStructArchive* tschchartaxisnumberformat) {
  delete tschchartaxisnumberformat_;
  tschchartaxisnumberformat_ = tschchartaxisnumberformat;
  if (tschchartaxisnumberformat) {
    set_has_tschchartaxisnumberformat();
  } else {
    clear_has_tschchartaxisnumberformat();
  }
}

// optional .TSK.FormatStructArchive tschchartaxis1_0dateformat = 4;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxis1_0dateformat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxis1_0dateformat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxis1_0dateformat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxis1_0dateformat() {
  if (tschchartaxis1_0dateformat_ != NULL) tschchartaxis1_0dateformat_->::TSK::FormatStructArchive::Clear();
  clear_has_tschchartaxis1_0dateformat();
}
inline const ::TSK::FormatStructArchive& ChartAxisGenericPropertyMapArchive::tschchartaxis1_0dateformat() const {
  return tschchartaxis1_0dateformat_ != NULL ? *tschchartaxis1_0dateformat_ : *default_instance_->tschchartaxis1_0dateformat_;
}
inline ::TSK::FormatStructArchive* ChartAxisGenericPropertyMapArchive::mutable_tschchartaxis1_0dateformat() {
  set_has_tschchartaxis1_0dateformat();
  if (tschchartaxis1_0dateformat_ == NULL) tschchartaxis1_0dateformat_ = new ::TSK::FormatStructArchive;
  return tschchartaxis1_0dateformat_;
}
inline ::TSK::FormatStructArchive* ChartAxisGenericPropertyMapArchive::release_tschchartaxis1_0dateformat() {
  clear_has_tschchartaxis1_0dateformat();
  ::TSK::FormatStructArchive* temp = tschchartaxis1_0dateformat_;
  tschchartaxis1_0dateformat_ = NULL;
  return temp;
}
inline void ChartAxisGenericPropertyMapArchive::set_allocated_tschchartaxis1_0dateformat(::TSK::FormatStructArchive* tschchartaxis1_0dateformat) {
  delete tschchartaxis1_0dateformat_;
  tschchartaxis1_0dateformat_ = tschchartaxis1_0dateformat;
  if (tschchartaxis1_0dateformat) {
    set_has_tschchartaxis1_0dateformat();
  } else {
    clear_has_tschchartaxis1_0dateformat();
  }
}

// optional .TSK.FormatStructArchive tschchartaxisdurationformat = 5;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisdurationformat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxisdurationformat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxisdurationformat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisdurationformat() {
  if (tschchartaxisdurationformat_ != NULL) tschchartaxisdurationformat_->::TSK::FormatStructArchive::Clear();
  clear_has_tschchartaxisdurationformat();
}
inline const ::TSK::FormatStructArchive& ChartAxisGenericPropertyMapArchive::tschchartaxisdurationformat() const {
  return tschchartaxisdurationformat_ != NULL ? *tschchartaxisdurationformat_ : *default_instance_->tschchartaxisdurationformat_;
}
inline ::TSK::FormatStructArchive* ChartAxisGenericPropertyMapArchive::mutable_tschchartaxisdurationformat() {
  set_has_tschchartaxisdurationformat();
  if (tschchartaxisdurationformat_ == NULL) tschchartaxisdurationformat_ = new ::TSK::FormatStructArchive;
  return tschchartaxisdurationformat_;
}
inline ::TSK::FormatStructArchive* ChartAxisGenericPropertyMapArchive::release_tschchartaxisdurationformat() {
  clear_has_tschchartaxisdurationformat();
  ::TSK::FormatStructArchive* temp = tschchartaxisdurationformat_;
  tschchartaxisdurationformat_ = NULL;
  return temp;
}
inline void ChartAxisGenericPropertyMapArchive::set_allocated_tschchartaxisdurationformat(::TSK::FormatStructArchive* tschchartaxisdurationformat) {
  delete tschchartaxisdurationformat_;
  tschchartaxisdurationformat_ = tschchartaxisdurationformat;
  if (tschchartaxisdurationformat) {
    set_has_tschchartaxisdurationformat();
  } else {
    clear_has_tschchartaxisdurationformat();
  }
}

// optional .TSK.FormatStructArchive tschchartaxisdateformat = 6;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisdateformat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxisdateformat() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxisdateformat() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisdateformat() {
  if (tschchartaxisdateformat_ != NULL) tschchartaxisdateformat_->::TSK::FormatStructArchive::Clear();
  clear_has_tschchartaxisdateformat();
}
inline const ::TSK::FormatStructArchive& ChartAxisGenericPropertyMapArchive::tschchartaxisdateformat() const {
  return tschchartaxisdateformat_ != NULL ? *tschchartaxisdateformat_ : *default_instance_->tschchartaxisdateformat_;
}
inline ::TSK::FormatStructArchive* ChartAxisGenericPropertyMapArchive::mutable_tschchartaxisdateformat() {
  set_has_tschchartaxisdateformat();
  if (tschchartaxisdateformat_ == NULL) tschchartaxisdateformat_ = new ::TSK::FormatStructArchive;
  return tschchartaxisdateformat_;
}
inline ::TSK::FormatStructArchive* ChartAxisGenericPropertyMapArchive::release_tschchartaxisdateformat() {
  clear_has_tschchartaxisdateformat();
  ::TSK::FormatStructArchive* temp = tschchartaxisdateformat_;
  tschchartaxisdateformat_ = NULL;
  return temp;
}
inline void ChartAxisGenericPropertyMapArchive::set_allocated_tschchartaxisdateformat(::TSK::FormatStructArchive* tschchartaxisdateformat) {
  delete tschchartaxisdateformat_;
  tschchartaxisdateformat_ = tschchartaxisdateformat;
  if (tschchartaxisdateformat) {
    set_has_tschchartaxisdateformat();
  } else {
    clear_has_tschchartaxisdateformat();
  }
}

// optional int32 tschchartaxisnumberformattype = 7;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisnumberformattype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxisnumberformattype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxisnumberformattype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisnumberformattype() {
  tschchartaxisnumberformattype_ = 0;
  clear_has_tschchartaxisnumberformattype();
}
inline ::google::protobuf::int32 ChartAxisGenericPropertyMapArchive::tschchartaxisnumberformattype() const {
  return tschchartaxisnumberformattype_;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisnumberformattype(::google::protobuf::int32 value) {
  set_has_tschchartaxisnumberformattype();
  tschchartaxisnumberformattype_ = value;
}

// optional int32 tschchartaxisnumberofdecades = 8;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisnumberofdecades() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxisnumberofdecades() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxisnumberofdecades() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisnumberofdecades() {
  tschchartaxisnumberofdecades_ = 0;
  clear_has_tschchartaxisnumberofdecades();
}
inline ::google::protobuf::int32 ChartAxisGenericPropertyMapArchive::tschchartaxisnumberofdecades() const {
  return tschchartaxisnumberofdecades_;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisnumberofdecades(::google::protobuf::int32 value) {
  set_has_tschchartaxisnumberofdecades();
  tschchartaxisnumberofdecades_ = value;
}

// optional int32 tschchartaxisnumberofmajorgridlines = 9;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisnumberofmajorgridlines() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxisnumberofmajorgridlines() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxisnumberofmajorgridlines() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisnumberofmajorgridlines() {
  tschchartaxisnumberofmajorgridlines_ = 0;
  clear_has_tschchartaxisnumberofmajorgridlines();
}
inline ::google::protobuf::int32 ChartAxisGenericPropertyMapArchive::tschchartaxisnumberofmajorgridlines() const {
  return tschchartaxisnumberofmajorgridlines_;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisnumberofmajorgridlines(::google::protobuf::int32 value) {
  set_has_tschchartaxisnumberofmajorgridlines();
  tschchartaxisnumberofmajorgridlines_ = value;
}

// optional int32 tschchartaxisnumberofminorgridlines = 10;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisnumberofminorgridlines() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxisnumberofminorgridlines() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxisnumberofminorgridlines() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisnumberofminorgridlines() {
  tschchartaxisnumberofminorgridlines_ = 0;
  clear_has_tschchartaxisnumberofminorgridlines();
}
inline ::google::protobuf::int32 ChartAxisGenericPropertyMapArchive::tschchartaxisnumberofminorgridlines() const {
  return tschchartaxisnumberofminorgridlines_;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisnumberofminorgridlines(::google::protobuf::int32 value) {
  set_has_tschchartaxisnumberofminorgridlines();
  tschchartaxisnumberofminorgridlines_ = value;
}

// optional bool tschchartaxisplottoedges = 11;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisplottoedges() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxisplottoedges() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxisplottoedges() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisplottoedges() {
  tschchartaxisplottoedges_ = false;
  clear_has_tschchartaxisplottoedges();
}
inline bool ChartAxisGenericPropertyMapArchive::tschchartaxisplottoedges() const {
  return tschchartaxisplottoedges_;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisplottoedges(bool value) {
  set_has_tschchartaxisplottoedges();
  tschchartaxisplottoedges_ = value;
}

// optional int32 tschchartaxisscale = 12;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisscale() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxisscale() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxisscale() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisscale() {
  tschchartaxisscale_ = 0;
  clear_has_tschchartaxisscale();
}
inline ::google::protobuf::int32 ChartAxisGenericPropertyMapArchive::tschchartaxisscale() const {
  return tschchartaxisscale_;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisscale(::google::protobuf::int32 value) {
  set_has_tschchartaxisscale();
  tschchartaxisscale_ = value;
}

// optional bool tschchartaxisshowlabels = 13;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisshowlabels() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxisshowlabels() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxisshowlabels() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisshowlabels() {
  tschchartaxisshowlabels_ = false;
  clear_has_tschchartaxisshowlabels();
}
inline bool ChartAxisGenericPropertyMapArchive::tschchartaxisshowlabels() const {
  return tschchartaxisshowlabels_;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisshowlabels(bool value) {
  set_has_tschchartaxisshowlabels();
  tschchartaxisshowlabels_ = value;
}

// optional bool tschchartaxisshowserieslabels = 14;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisshowserieslabels() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxisshowserieslabels() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxisshowserieslabels() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisshowserieslabels() {
  tschchartaxisshowserieslabels_ = false;
  clear_has_tschchartaxisshowserieslabels();
}
inline bool ChartAxisGenericPropertyMapArchive::tschchartaxisshowserieslabels() const {
  return tschchartaxisshowserieslabels_;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisshowserieslabels(bool value) {
  set_has_tschchartaxisshowserieslabels();
  tschchartaxisshowserieslabels_ = value;
}

// optional bool tschchartaxisshowtitle = 15;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisshowtitle() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxisshowtitle() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxisshowtitle() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisshowtitle() {
  tschchartaxisshowtitle_ = false;
  clear_has_tschchartaxisshowtitle();
}
inline bool ChartAxisGenericPropertyMapArchive::tschchartaxisshowtitle() const {
  return tschchartaxisshowtitle_;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisshowtitle(bool value) {
  set_has_tschchartaxisshowtitle();
  tschchartaxisshowtitle_ = value;
}

// optional string tschchartaxistitle = 16;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxistitle() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxistitle() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxistitle() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxistitle() {
  if (tschchartaxistitle_ != &::google::protobuf::internal::kEmptyString) {
    tschchartaxistitle_->clear();
  }
  clear_has_tschchartaxistitle();
}
inline const ::std::string& ChartAxisGenericPropertyMapArchive::tschchartaxistitle() const {
  return *tschchartaxistitle_;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxistitle(const ::std::string& value) {
  set_has_tschchartaxistitle();
  if (tschchartaxistitle_ == &::google::protobuf::internal::kEmptyString) {
    tschchartaxistitle_ = new ::std::string;
  }
  tschchartaxistitle_->assign(value);
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxistitle(const char* value) {
  set_has_tschchartaxistitle();
  if (tschchartaxistitle_ == &::google::protobuf::internal::kEmptyString) {
    tschchartaxistitle_ = new ::std::string;
  }
  tschchartaxistitle_->assign(value);
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxistitle(const char* value, size_t size) {
  set_has_tschchartaxistitle();
  if (tschchartaxistitle_ == &::google::protobuf::internal::kEmptyString) {
    tschchartaxistitle_ = new ::std::string;
  }
  tschchartaxistitle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChartAxisGenericPropertyMapArchive::mutable_tschchartaxistitle() {
  set_has_tschchartaxistitle();
  if (tschchartaxistitle_ == &::google::protobuf::internal::kEmptyString) {
    tschchartaxistitle_ = new ::std::string;
  }
  return tschchartaxistitle_;
}
inline ::std::string* ChartAxisGenericPropertyMapArchive::release_tschchartaxistitle() {
  clear_has_tschchartaxistitle();
  if (tschchartaxistitle_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tschchartaxistitle_;
    tschchartaxistitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChartAxisGenericPropertyMapArchive::set_allocated_tschchartaxistitle(::std::string* tschchartaxistitle) {
  if (tschchartaxistitle_ != &::google::protobuf::internal::kEmptyString) {
    delete tschchartaxistitle_;
  }
  if (tschchartaxistitle) {
    set_has_tschchartaxistitle();
    tschchartaxistitle_ = tschchartaxistitle;
  } else {
    clear_has_tschchartaxistitle();
    tschchartaxistitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisusermax = 17;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisusermax() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxisusermax() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxisusermax() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisusermax() {
  if (tschchartaxisusermax_ != NULL) tschchartaxisusermax_->::TSCH::ChartsNSNumberDoubleArchive::Clear();
  clear_has_tschchartaxisusermax();
}
inline const ::TSCH::ChartsNSNumberDoubleArchive& ChartAxisGenericPropertyMapArchive::tschchartaxisusermax() const {
  return tschchartaxisusermax_ != NULL ? *tschchartaxisusermax_ : *default_instance_->tschchartaxisusermax_;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisGenericPropertyMapArchive::mutable_tschchartaxisusermax() {
  set_has_tschchartaxisusermax();
  if (tschchartaxisusermax_ == NULL) tschchartaxisusermax_ = new ::TSCH::ChartsNSNumberDoubleArchive;
  return tschchartaxisusermax_;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisGenericPropertyMapArchive::release_tschchartaxisusermax() {
  clear_has_tschchartaxisusermax();
  ::TSCH::ChartsNSNumberDoubleArchive* temp = tschchartaxisusermax_;
  tschchartaxisusermax_ = NULL;
  return temp;
}
inline void ChartAxisGenericPropertyMapArchive::set_allocated_tschchartaxisusermax(::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisusermax) {
  delete tschchartaxisusermax_;
  tschchartaxisusermax_ = tschchartaxisusermax;
  if (tschchartaxisusermax) {
    set_has_tschchartaxisusermax();
  } else {
    clear_has_tschchartaxisusermax();
  }
}

// optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisusermin = 18;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisusermin() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxisusermin() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxisusermin() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisusermin() {
  if (tschchartaxisusermin_ != NULL) tschchartaxisusermin_->::TSCH::ChartsNSNumberDoubleArchive::Clear();
  clear_has_tschchartaxisusermin();
}
inline const ::TSCH::ChartsNSNumberDoubleArchive& ChartAxisGenericPropertyMapArchive::tschchartaxisusermin() const {
  return tschchartaxisusermin_ != NULL ? *tschchartaxisusermin_ : *default_instance_->tschchartaxisusermin_;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisGenericPropertyMapArchive::mutable_tschchartaxisusermin() {
  set_has_tschchartaxisusermin();
  if (tschchartaxisusermin_ == NULL) tschchartaxisusermin_ = new ::TSCH::ChartsNSNumberDoubleArchive;
  return tschchartaxisusermin_;
}
inline ::TSCH::ChartsNSNumberDoubleArchive* ChartAxisGenericPropertyMapArchive::release_tschchartaxisusermin() {
  clear_has_tschchartaxisusermin();
  ::TSCH::ChartsNSNumberDoubleArchive* temp = tschchartaxisusermin_;
  tschchartaxisusermin_ = NULL;
  return temp;
}
inline void ChartAxisGenericPropertyMapArchive::set_allocated_tschchartaxisusermin(::TSCH::ChartsNSNumberDoubleArchive* tschchartaxisusermin) {
  delete tschchartaxisusermin_;
  tschchartaxisusermin_ = tschchartaxisusermin;
  if (tschchartaxisusermin) {
    set_has_tschchartaxisusermin();
  } else {
    clear_has_tschchartaxisusermin();
  }
}

// optional float tschchartaxis3dgridlineopacity = 19;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxis3dgridlineopacity() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxis3dgridlineopacity() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxis3dgridlineopacity() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxis3dgridlineopacity() {
  tschchartaxis3dgridlineopacity_ = 0;
  clear_has_tschchartaxis3dgridlineopacity();
}
inline float ChartAxisGenericPropertyMapArchive::tschchartaxis3dgridlineopacity() const {
  return tschchartaxis3dgridlineopacity_;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxis3dgridlineopacity(float value) {
  set_has_tschchartaxis3dgridlineopacity();
  tschchartaxis3dgridlineopacity_ = value;
}

// optional .TSD.StrokeArchive tschchartaxis3dgridlinestroke = 20;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxis3dgridlinestroke() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxis3dgridlinestroke() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxis3dgridlinestroke() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxis3dgridlinestroke() {
  if (tschchartaxis3dgridlinestroke_ != NULL) tschchartaxis3dgridlinestroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartaxis3dgridlinestroke();
}
inline const ::TSD::StrokeArchive& ChartAxisGenericPropertyMapArchive::tschchartaxis3dgridlinestroke() const {
  return tschchartaxis3dgridlinestroke_ != NULL ? *tschchartaxis3dgridlinestroke_ : *default_instance_->tschchartaxis3dgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisGenericPropertyMapArchive::mutable_tschchartaxis3dgridlinestroke() {
  set_has_tschchartaxis3dgridlinestroke();
  if (tschchartaxis3dgridlinestroke_ == NULL) tschchartaxis3dgridlinestroke_ = new ::TSD::StrokeArchive;
  return tschchartaxis3dgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisGenericPropertyMapArchive::release_tschchartaxis3dgridlinestroke() {
  clear_has_tschchartaxis3dgridlinestroke();
  ::TSD::StrokeArchive* temp = tschchartaxis3dgridlinestroke_;
  tschchartaxis3dgridlinestroke_ = NULL;
  return temp;
}
inline void ChartAxisGenericPropertyMapArchive::set_allocated_tschchartaxis3dgridlinestroke(::TSD::StrokeArchive* tschchartaxis3dgridlinestroke) {
  delete tschchartaxis3dgridlinestroke_;
  tschchartaxis3dgridlinestroke_ = tschchartaxis3dgridlinestroke;
  if (tschchartaxis3dgridlinestroke) {
    set_has_tschchartaxis3dgridlinestroke();
  } else {
    clear_has_tschchartaxis3dgridlinestroke();
  }
}

// optional int32 tschchartaxishorizontalspacing = 21;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxishorizontalspacing() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxishorizontalspacing() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxishorizontalspacing() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxishorizontalspacing() {
  tschchartaxishorizontalspacing_ = 0;
  clear_has_tschchartaxishorizontalspacing();
}
inline ::google::protobuf::int32 ChartAxisGenericPropertyMapArchive::tschchartaxishorizontalspacing() const {
  return tschchartaxishorizontalspacing_;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxishorizontalspacing(::google::protobuf::int32 value) {
  set_has_tschchartaxishorizontalspacing();
  tschchartaxishorizontalspacing_ = value;
}

// optional int32 tschchartaxislabelparagraphstyleindex = 22;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxislabelparagraphstyleindex() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxislabelparagraphstyleindex() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxislabelparagraphstyleindex() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxislabelparagraphstyleindex() {
  tschchartaxislabelparagraphstyleindex_ = 0;
  clear_has_tschchartaxislabelparagraphstyleindex();
}
inline ::google::protobuf::int32 ChartAxisGenericPropertyMapArchive::tschchartaxislabelparagraphstyleindex() const {
  return tschchartaxislabelparagraphstyleindex_;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxislabelparagraphstyleindex(::google::protobuf::int32 value) {
  set_has_tschchartaxislabelparagraphstyleindex();
  tschchartaxislabelparagraphstyleindex_ = value;
}

// optional float tschchartaxislabelsorientation = 23;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxislabelsorientation() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxislabelsorientation() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxislabelsorientation() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxislabelsorientation() {
  tschchartaxislabelsorientation_ = 0;
  clear_has_tschchartaxislabelsorientation();
}
inline float ChartAxisGenericPropertyMapArchive::tschchartaxislabelsorientation() const {
  return tschchartaxislabelsorientation_;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxislabelsorientation(float value) {
  set_has_tschchartaxislabelsorientation();
  tschchartaxislabelsorientation_ = value;
}

// optional float tschchartaxismajorgridlineopacity = 24;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxismajorgridlineopacity() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxismajorgridlineopacity() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxismajorgridlineopacity() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxismajorgridlineopacity() {
  tschchartaxismajorgridlineopacity_ = 0;
  clear_has_tschchartaxismajorgridlineopacity();
}
inline float ChartAxisGenericPropertyMapArchive::tschchartaxismajorgridlineopacity() const {
  return tschchartaxismajorgridlineopacity_;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxismajorgridlineopacity(float value) {
  set_has_tschchartaxismajorgridlineopacity();
  tschchartaxismajorgridlineopacity_ = value;
}

// optional .TSD.ShadowArchive tschchartaxismajorgridlineshadow = 25;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxismajorgridlineshadow() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxismajorgridlineshadow() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxismajorgridlineshadow() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxismajorgridlineshadow() {
  if (tschchartaxismajorgridlineshadow_ != NULL) tschchartaxismajorgridlineshadow_->::TSD::ShadowArchive::Clear();
  clear_has_tschchartaxismajorgridlineshadow();
}
inline const ::TSD::ShadowArchive& ChartAxisGenericPropertyMapArchive::tschchartaxismajorgridlineshadow() const {
  return tschchartaxismajorgridlineshadow_ != NULL ? *tschchartaxismajorgridlineshadow_ : *default_instance_->tschchartaxismajorgridlineshadow_;
}
inline ::TSD::ShadowArchive* ChartAxisGenericPropertyMapArchive::mutable_tschchartaxismajorgridlineshadow() {
  set_has_tschchartaxismajorgridlineshadow();
  if (tschchartaxismajorgridlineshadow_ == NULL) tschchartaxismajorgridlineshadow_ = new ::TSD::ShadowArchive;
  return tschchartaxismajorgridlineshadow_;
}
inline ::TSD::ShadowArchive* ChartAxisGenericPropertyMapArchive::release_tschchartaxismajorgridlineshadow() {
  clear_has_tschchartaxismajorgridlineshadow();
  ::TSD::ShadowArchive* temp = tschchartaxismajorgridlineshadow_;
  tschchartaxismajorgridlineshadow_ = NULL;
  return temp;
}
inline void ChartAxisGenericPropertyMapArchive::set_allocated_tschchartaxismajorgridlineshadow(::TSD::ShadowArchive* tschchartaxismajorgridlineshadow) {
  delete tschchartaxismajorgridlineshadow_;
  tschchartaxismajorgridlineshadow_ = tschchartaxismajorgridlineshadow;
  if (tschchartaxismajorgridlineshadow) {
    set_has_tschchartaxismajorgridlineshadow();
  } else {
    clear_has_tschchartaxismajorgridlineshadow();
  }
}

// optional .TSD.StrokeArchive tschchartaxismajorgridlinestroke = 26;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxismajorgridlinestroke() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxismajorgridlinestroke() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxismajorgridlinestroke() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxismajorgridlinestroke() {
  if (tschchartaxismajorgridlinestroke_ != NULL) tschchartaxismajorgridlinestroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartaxismajorgridlinestroke();
}
inline const ::TSD::StrokeArchive& ChartAxisGenericPropertyMapArchive::tschchartaxismajorgridlinestroke() const {
  return tschchartaxismajorgridlinestroke_ != NULL ? *tschchartaxismajorgridlinestroke_ : *default_instance_->tschchartaxismajorgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisGenericPropertyMapArchive::mutable_tschchartaxismajorgridlinestroke() {
  set_has_tschchartaxismajorgridlinestroke();
  if (tschchartaxismajorgridlinestroke_ == NULL) tschchartaxismajorgridlinestroke_ = new ::TSD::StrokeArchive;
  return tschchartaxismajorgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisGenericPropertyMapArchive::release_tschchartaxismajorgridlinestroke() {
  clear_has_tschchartaxismajorgridlinestroke();
  ::TSD::StrokeArchive* temp = tschchartaxismajorgridlinestroke_;
  tschchartaxismajorgridlinestroke_ = NULL;
  return temp;
}
inline void ChartAxisGenericPropertyMapArchive::set_allocated_tschchartaxismajorgridlinestroke(::TSD::StrokeArchive* tschchartaxismajorgridlinestroke) {
  delete tschchartaxismajorgridlinestroke_;
  tschchartaxismajorgridlinestroke_ = tschchartaxismajorgridlinestroke;
  if (tschchartaxismajorgridlinestroke) {
    set_has_tschchartaxismajorgridlinestroke();
  } else {
    clear_has_tschchartaxismajorgridlinestroke();
  }
}

// optional float tschchartaxisminorgridlineopacity = 27;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisminorgridlineopacity() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxisminorgridlineopacity() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxisminorgridlineopacity() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisminorgridlineopacity() {
  tschchartaxisminorgridlineopacity_ = 0;
  clear_has_tschchartaxisminorgridlineopacity();
}
inline float ChartAxisGenericPropertyMapArchive::tschchartaxisminorgridlineopacity() const {
  return tschchartaxisminorgridlineopacity_;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisminorgridlineopacity(float value) {
  set_has_tschchartaxisminorgridlineopacity();
  tschchartaxisminorgridlineopacity_ = value;
}

// optional .TSD.ShadowArchive tschchartaxisminorgridlineshadow = 28;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisminorgridlineshadow() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxisminorgridlineshadow() {
  _has_bits_[0] |= 0x08000000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxisminorgridlineshadow() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisminorgridlineshadow() {
  if (tschchartaxisminorgridlineshadow_ != NULL) tschchartaxisminorgridlineshadow_->::TSD::ShadowArchive::Clear();
  clear_has_tschchartaxisminorgridlineshadow();
}
inline const ::TSD::ShadowArchive& ChartAxisGenericPropertyMapArchive::tschchartaxisminorgridlineshadow() const {
  return tschchartaxisminorgridlineshadow_ != NULL ? *tschchartaxisminorgridlineshadow_ : *default_instance_->tschchartaxisminorgridlineshadow_;
}
inline ::TSD::ShadowArchive* ChartAxisGenericPropertyMapArchive::mutable_tschchartaxisminorgridlineshadow() {
  set_has_tschchartaxisminorgridlineshadow();
  if (tschchartaxisminorgridlineshadow_ == NULL) tschchartaxisminorgridlineshadow_ = new ::TSD::ShadowArchive;
  return tschchartaxisminorgridlineshadow_;
}
inline ::TSD::ShadowArchive* ChartAxisGenericPropertyMapArchive::release_tschchartaxisminorgridlineshadow() {
  clear_has_tschchartaxisminorgridlineshadow();
  ::TSD::ShadowArchive* temp = tschchartaxisminorgridlineshadow_;
  tschchartaxisminorgridlineshadow_ = NULL;
  return temp;
}
inline void ChartAxisGenericPropertyMapArchive::set_allocated_tschchartaxisminorgridlineshadow(::TSD::ShadowArchive* tschchartaxisminorgridlineshadow) {
  delete tschchartaxisminorgridlineshadow_;
  tschchartaxisminorgridlineshadow_ = tschchartaxisminorgridlineshadow;
  if (tschchartaxisminorgridlineshadow) {
    set_has_tschchartaxisminorgridlineshadow();
  } else {
    clear_has_tschchartaxisminorgridlineshadow();
  }
}

// optional .TSD.StrokeArchive tschchartaxisminorgridlinestroke = 29;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisminorgridlinestroke() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxisminorgridlinestroke() {
  _has_bits_[0] |= 0x10000000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxisminorgridlinestroke() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisminorgridlinestroke() {
  if (tschchartaxisminorgridlinestroke_ != NULL) tschchartaxisminorgridlinestroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartaxisminorgridlinestroke();
}
inline const ::TSD::StrokeArchive& ChartAxisGenericPropertyMapArchive::tschchartaxisminorgridlinestroke() const {
  return tschchartaxisminorgridlinestroke_ != NULL ? *tschchartaxisminorgridlinestroke_ : *default_instance_->tschchartaxisminorgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisGenericPropertyMapArchive::mutable_tschchartaxisminorgridlinestroke() {
  set_has_tschchartaxisminorgridlinestroke();
  if (tschchartaxisminorgridlinestroke_ == NULL) tschchartaxisminorgridlinestroke_ = new ::TSD::StrokeArchive;
  return tschchartaxisminorgridlinestroke_;
}
inline ::TSD::StrokeArchive* ChartAxisGenericPropertyMapArchive::release_tschchartaxisminorgridlinestroke() {
  clear_has_tschchartaxisminorgridlinestroke();
  ::TSD::StrokeArchive* temp = tschchartaxisminorgridlinestroke_;
  tschchartaxisminorgridlinestroke_ = NULL;
  return temp;
}
inline void ChartAxisGenericPropertyMapArchive::set_allocated_tschchartaxisminorgridlinestroke(::TSD::StrokeArchive* tschchartaxisminorgridlinestroke) {
  delete tschchartaxisminorgridlinestroke_;
  tschchartaxisminorgridlinestroke_ = tschchartaxisminorgridlinestroke;
  if (tschchartaxisminorgridlinestroke) {
    set_has_tschchartaxisminorgridlinestroke();
  } else {
    clear_has_tschchartaxisminorgridlinestroke();
  }
}

// optional bool tschchartaxisshowaxis = 30;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisshowaxis() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxisshowaxis() {
  _has_bits_[0] |= 0x20000000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxisshowaxis() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisshowaxis() {
  tschchartaxisshowaxis_ = false;
  clear_has_tschchartaxisshowaxis();
}
inline bool ChartAxisGenericPropertyMapArchive::tschchartaxisshowaxis() const {
  return tschchartaxisshowaxis_;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisshowaxis(bool value) {
  set_has_tschchartaxisshowaxis();
  tschchartaxisshowaxis_ = value;
}

// optional bool tschchartaxisshowlastlabel = 31;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisshowlastlabel() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxisshowlastlabel() {
  _has_bits_[0] |= 0x40000000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxisshowlastlabel() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisshowlastlabel() {
  tschchartaxisshowlastlabel_ = false;
  clear_has_tschchartaxisshowlastlabel();
}
inline bool ChartAxisGenericPropertyMapArchive::tschchartaxisshowlastlabel() const {
  return tschchartaxisshowlastlabel_;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisshowlastlabel(bool value) {
  set_has_tschchartaxisshowlastlabel();
  tschchartaxisshowlastlabel_ = value;
}

// optional bool tschchartaxisshowmajorgridlines = 32;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisshowmajorgridlines() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxisshowmajorgridlines() {
  _has_bits_[0] |= 0x80000000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxisshowmajorgridlines() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisshowmajorgridlines() {
  tschchartaxisshowmajorgridlines_ = false;
  clear_has_tschchartaxisshowmajorgridlines();
}
inline bool ChartAxisGenericPropertyMapArchive::tschchartaxisshowmajorgridlines() const {
  return tschchartaxisshowmajorgridlines_;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisshowmajorgridlines(bool value) {
  set_has_tschchartaxisshowmajorgridlines();
  tschchartaxisshowmajorgridlines_ = value;
}

// optional bool tschchartaxisshowmajortickmarks = 33;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisshowmajortickmarks() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxisshowmajortickmarks() {
  _has_bits_[1] |= 0x00000001u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxisshowmajortickmarks() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisshowmajortickmarks() {
  tschchartaxisshowmajortickmarks_ = false;
  clear_has_tschchartaxisshowmajortickmarks();
}
inline bool ChartAxisGenericPropertyMapArchive::tschchartaxisshowmajortickmarks() const {
  return tschchartaxisshowmajortickmarks_;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisshowmajortickmarks(bool value) {
  set_has_tschchartaxisshowmajortickmarks();
  tschchartaxisshowmajortickmarks_ = value;
}

// optional bool tschchartaxisshowminimumlabel = 34;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisshowminimumlabel() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxisshowminimumlabel() {
  _has_bits_[1] |= 0x00000002u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxisshowminimumlabel() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisshowminimumlabel() {
  tschchartaxisshowminimumlabel_ = false;
  clear_has_tschchartaxisshowminimumlabel();
}
inline bool ChartAxisGenericPropertyMapArchive::tschchartaxisshowminimumlabel() const {
  return tschchartaxisshowminimumlabel_;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisshowminimumlabel(bool value) {
  set_has_tschchartaxisshowminimumlabel();
  tschchartaxisshowminimumlabel_ = value;
}

// optional bool tschchartaxisshowminorgridlines = 35;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisshowminorgridlines() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxisshowminorgridlines() {
  _has_bits_[1] |= 0x00000004u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxisshowminorgridlines() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisshowminorgridlines() {
  tschchartaxisshowminorgridlines_ = false;
  clear_has_tschchartaxisshowminorgridlines();
}
inline bool ChartAxisGenericPropertyMapArchive::tschchartaxisshowminorgridlines() const {
  return tschchartaxisshowminorgridlines_;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisshowminorgridlines(bool value) {
  set_has_tschchartaxisshowminorgridlines();
  tschchartaxisshowminorgridlines_ = value;
}

// optional bool tschchartaxisshowminortickmarks = 36;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisshowminortickmarks() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxisshowminortickmarks() {
  _has_bits_[1] |= 0x00000008u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxisshowminortickmarks() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisshowminortickmarks() {
  tschchartaxisshowminortickmarks_ = false;
  clear_has_tschchartaxisshowminortickmarks();
}
inline bool ChartAxisGenericPropertyMapArchive::tschchartaxisshowminortickmarks() const {
  return tschchartaxisshowminortickmarks_;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisshowminortickmarks(bool value) {
  set_has_tschchartaxisshowminortickmarks();
  tschchartaxisshowminortickmarks_ = value;
}

// optional int32 tschchartaxistickmarklocation = 37;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxistickmarklocation() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxistickmarklocation() {
  _has_bits_[1] |= 0x00000010u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxistickmarklocation() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxistickmarklocation() {
  tschchartaxistickmarklocation_ = 0;
  clear_has_tschchartaxistickmarklocation();
}
inline ::google::protobuf::int32 ChartAxisGenericPropertyMapArchive::tschchartaxistickmarklocation() const {
  return tschchartaxistickmarklocation_;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxistickmarklocation(::google::protobuf::int32 value) {
  set_has_tschchartaxistickmarklocation();
  tschchartaxistickmarklocation_ = value;
}

// optional int32 tschchartaxistitleparagraphstyleindex = 38;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxistitleparagraphstyleindex() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxistitleparagraphstyleindex() {
  _has_bits_[1] |= 0x00000020u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxistitleparagraphstyleindex() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxistitleparagraphstyleindex() {
  tschchartaxistitleparagraphstyleindex_ = 0;
  clear_has_tschchartaxistitleparagraphstyleindex();
}
inline ::google::protobuf::int32 ChartAxisGenericPropertyMapArchive::tschchartaxistitleparagraphstyleindex() const {
  return tschchartaxistitleparagraphstyleindex_;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxistitleparagraphstyleindex(::google::protobuf::int32 value) {
  set_has_tschchartaxistitleparagraphstyleindex();
  tschchartaxistitleparagraphstyleindex_ = value;
}

// optional int32 tschchartaxisverticalspacing = 39;
inline bool ChartAxisGenericPropertyMapArchive::has_tschchartaxisverticalspacing() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void ChartAxisGenericPropertyMapArchive::set_has_tschchartaxisverticalspacing() {
  _has_bits_[1] |= 0x00000040u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_has_tschchartaxisverticalspacing() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisverticalspacing() {
  tschchartaxisverticalspacing_ = 0;
  clear_has_tschchartaxisverticalspacing();
}
inline ::google::protobuf::int32 ChartAxisGenericPropertyMapArchive::tschchartaxisverticalspacing() const {
  return tschchartaxisverticalspacing_;
}
inline void ChartAxisGenericPropertyMapArchive::set_tschchartaxisverticalspacing(::google::protobuf::int32 value) {
  set_has_tschchartaxisverticalspacing();
  tschchartaxisverticalspacing_ = value;
}

// -------------------------------------------------------------------

// ChartSeriesGenericPropertyMapArchive

// optional float tschchartseriesadjustmentscale = 1;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesadjustmentscale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriesadjustmentscale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriesadjustmentscale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesadjustmentscale() {
  tschchartseriesadjustmentscale_ = 0;
  clear_has_tschchartseriesadjustmentscale();
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartseriesadjustmentscale() const {
  return tschchartseriesadjustmentscale_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesadjustmentscale(float value) {
  set_has_tschchartseriesadjustmentscale();
  tschchartseriesadjustmentscale_ = value;
}

// optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustomnegativedata = 2;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarcustomnegativedata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartserieserrorbarcustomnegativedata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartserieserrorbarcustomnegativedata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarcustomnegativedata() {
  if (tschchartserieserrorbarcustomnegativedata_ != NULL) tschchartserieserrorbarcustomnegativedata_->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::Clear();
  clear_has_tschchartserieserrorbarcustomnegativedata();
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarcustomnegativedata() const {
  return tschchartserieserrorbarcustomnegativedata_ != NULL ? *tschchartserieserrorbarcustomnegativedata_ : *default_instance_->tschchartserieserrorbarcustomnegativedata_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartserieserrorbarcustomnegativedata() {
  set_has_tschchartserieserrorbarcustomnegativedata();
  if (tschchartserieserrorbarcustomnegativedata_ == NULL) tschchartserieserrorbarcustomnegativedata_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive;
  return tschchartserieserrorbarcustomnegativedata_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartserieserrorbarcustomnegativedata() {
  clear_has_tschchartserieserrorbarcustomnegativedata();
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartserieserrorbarcustomnegativedata_;
  tschchartserieserrorbarcustomnegativedata_ = NULL;
  return temp;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartserieserrorbarcustomnegativedata(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustomnegativedata) {
  delete tschchartserieserrorbarcustomnegativedata_;
  tschchartserieserrorbarcustomnegativedata_ = tschchartserieserrorbarcustomnegativedata;
  if (tschchartserieserrorbarcustomnegativedata) {
    set_has_tschchartserieserrorbarcustomnegativedata();
  } else {
    clear_has_tschchartserieserrorbarcustomnegativedata();
  }
}

// optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustomnegativedatascatterx = 3;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarcustomnegativedatascatterx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartserieserrorbarcustomnegativedatascatterx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartserieserrorbarcustomnegativedatascatterx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarcustomnegativedatascatterx() {
  if (tschchartserieserrorbarcustomnegativedatascatterx_ != NULL) tschchartserieserrorbarcustomnegativedatascatterx_->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::Clear();
  clear_has_tschchartserieserrorbarcustomnegativedatascatterx();
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarcustomnegativedatascatterx() const {
  return tschchartserieserrorbarcustomnegativedatascatterx_ != NULL ? *tschchartserieserrorbarcustomnegativedatascatterx_ : *default_instance_->tschchartserieserrorbarcustomnegativedatascatterx_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartserieserrorbarcustomnegativedatascatterx() {
  set_has_tschchartserieserrorbarcustomnegativedatascatterx();
  if (tschchartserieserrorbarcustomnegativedatascatterx_ == NULL) tschchartserieserrorbarcustomnegativedatascatterx_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive;
  return tschchartserieserrorbarcustomnegativedatascatterx_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartserieserrorbarcustomnegativedatascatterx() {
  clear_has_tschchartserieserrorbarcustomnegativedatascatterx();
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartserieserrorbarcustomnegativedatascatterx_;
  tschchartserieserrorbarcustomnegativedatascatterx_ = NULL;
  return temp;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartserieserrorbarcustomnegativedatascatterx(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustomnegativedatascatterx) {
  delete tschchartserieserrorbarcustomnegativedatascatterx_;
  tschchartserieserrorbarcustomnegativedatascatterx_ = tschchartserieserrorbarcustomnegativedatascatterx;
  if (tschchartserieserrorbarcustomnegativedatascatterx) {
    set_has_tschchartserieserrorbarcustomnegativedatascatterx();
  } else {
    clear_has_tschchartserieserrorbarcustomnegativedatascatterx();
  }
}

// optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustompositivedata = 4;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarcustompositivedata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartserieserrorbarcustompositivedata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartserieserrorbarcustompositivedata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarcustompositivedata() {
  if (tschchartserieserrorbarcustompositivedata_ != NULL) tschchartserieserrorbarcustompositivedata_->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::Clear();
  clear_has_tschchartserieserrorbarcustompositivedata();
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarcustompositivedata() const {
  return tschchartserieserrorbarcustompositivedata_ != NULL ? *tschchartserieserrorbarcustompositivedata_ : *default_instance_->tschchartserieserrorbarcustompositivedata_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartserieserrorbarcustompositivedata() {
  set_has_tschchartserieserrorbarcustompositivedata();
  if (tschchartserieserrorbarcustompositivedata_ == NULL) tschchartserieserrorbarcustompositivedata_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive;
  return tschchartserieserrorbarcustompositivedata_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartserieserrorbarcustompositivedata() {
  clear_has_tschchartserieserrorbarcustompositivedata();
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartserieserrorbarcustompositivedata_;
  tschchartserieserrorbarcustompositivedata_ = NULL;
  return temp;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartserieserrorbarcustompositivedata(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustompositivedata) {
  delete tschchartserieserrorbarcustompositivedata_;
  tschchartserieserrorbarcustompositivedata_ = tschchartserieserrorbarcustompositivedata;
  if (tschchartserieserrorbarcustompositivedata) {
    set_has_tschchartserieserrorbarcustompositivedata();
  } else {
    clear_has_tschchartserieserrorbarcustompositivedata();
  }
}

// optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustompositivedatascatterx = 5;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarcustompositivedatascatterx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartserieserrorbarcustompositivedatascatterx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartserieserrorbarcustompositivedatascatterx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarcustompositivedatascatterx() {
  if (tschchartserieserrorbarcustompositivedatascatterx_ != NULL) tschchartserieserrorbarcustompositivedatascatterx_->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::Clear();
  clear_has_tschchartserieserrorbarcustompositivedatascatterx();
}
inline const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarcustompositivedatascatterx() const {
  return tschchartserieserrorbarcustompositivedatascatterx_ != NULL ? *tschchartserieserrorbarcustompositivedatascatterx_ : *default_instance_->tschchartserieserrorbarcustompositivedatascatterx_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartserieserrorbarcustompositivedatascatterx() {
  set_has_tschchartserieserrorbarcustompositivedatascatterx();
  if (tschchartserieserrorbarcustompositivedatascatterx_ == NULL) tschchartserieserrorbarcustompositivedatascatterx_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive;
  return tschchartserieserrorbarcustompositivedatascatterx_;
}
inline ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartserieserrorbarcustompositivedatascatterx() {
  clear_has_tschchartserieserrorbarcustompositivedatascatterx();
  ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* temp = tschchartserieserrorbarcustompositivedatascatterx_;
  tschchartserieserrorbarcustompositivedatascatterx_ = NULL;
  return temp;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartserieserrorbarcustompositivedatascatterx(::TSCH::ChartsNSArrayOfNSNumberDoubleArchive* tschchartserieserrorbarcustompositivedatascatterx) {
  delete tschchartserieserrorbarcustompositivedatascatterx_;
  tschchartserieserrorbarcustompositivedatascatterx_ = tschchartserieserrorbarcustompositivedatascatterx;
  if (tschchartserieserrorbarcustompositivedatascatterx) {
    set_has_tschchartserieserrorbarcustompositivedatascatterx();
  } else {
    clear_has_tschchartserieserrorbarcustompositivedatascatterx();
  }
}

// optional float tschchartserieserrorbarfixedvalue = 6;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarfixedvalue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartserieserrorbarfixedvalue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartserieserrorbarfixedvalue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarfixedvalue() {
  tschchartserieserrorbarfixedvalue_ = 0;
  clear_has_tschchartserieserrorbarfixedvalue();
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarfixedvalue() const {
  return tschchartserieserrorbarfixedvalue_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartserieserrorbarfixedvalue(float value) {
  set_has_tschchartserieserrorbarfixedvalue();
  tschchartserieserrorbarfixedvalue_ = value;
}

// optional float tschchartserieserrorbarfixedvaluescatterx = 7;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarfixedvaluescatterx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartserieserrorbarfixedvaluescatterx() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartserieserrorbarfixedvaluescatterx() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarfixedvaluescatterx() {
  tschchartserieserrorbarfixedvaluescatterx_ = 0;
  clear_has_tschchartserieserrorbarfixedvaluescatterx();
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarfixedvaluescatterx() const {
  return tschchartserieserrorbarfixedvaluescatterx_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartserieserrorbarfixedvaluescatterx(float value) {
  set_has_tschchartserieserrorbarfixedvaluescatterx();
  tschchartserieserrorbarfixedvaluescatterx_ = value;
}

// optional float tschchartserieserrorbarpercentvalue = 8;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarpercentvalue() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartserieserrorbarpercentvalue() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartserieserrorbarpercentvalue() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarpercentvalue() {
  tschchartserieserrorbarpercentvalue_ = 0;
  clear_has_tschchartserieserrorbarpercentvalue();
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarpercentvalue() const {
  return tschchartserieserrorbarpercentvalue_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartserieserrorbarpercentvalue(float value) {
  set_has_tschchartserieserrorbarpercentvalue();
  tschchartserieserrorbarpercentvalue_ = value;
}

// optional float tschchartserieserrorbarpercentvaluescatterx = 9;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarpercentvaluescatterx() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartserieserrorbarpercentvaluescatterx() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartserieserrorbarpercentvaluescatterx() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarpercentvaluescatterx() {
  tschchartserieserrorbarpercentvaluescatterx_ = 0;
  clear_has_tschchartserieserrorbarpercentvaluescatterx();
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarpercentvaluescatterx() const {
  return tschchartserieserrorbarpercentvaluescatterx_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartserieserrorbarpercentvaluescatterx(float value) {
  set_has_tschchartserieserrorbarpercentvaluescatterx();
  tschchartserieserrorbarpercentvaluescatterx_ = value;
}

// optional int32 tschchartserieserrorbarsetting = 10;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarsetting() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartserieserrorbarsetting() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartserieserrorbarsetting() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarsetting() {
  tschchartserieserrorbarsetting_ = 0;
  clear_has_tschchartserieserrorbarsetting();
}
inline ::google::protobuf::int32 ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarsetting() const {
  return tschchartserieserrorbarsetting_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartserieserrorbarsetting(::google::protobuf::int32 value) {
  set_has_tschchartserieserrorbarsetting();
  tschchartserieserrorbarsetting_ = value;
}

// optional int32 tschchartserieserrorbarsettingscatterx = 11;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarsettingscatterx() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartserieserrorbarsettingscatterx() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartserieserrorbarsettingscatterx() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarsettingscatterx() {
  tschchartserieserrorbarsettingscatterx_ = 0;
  clear_has_tschchartserieserrorbarsettingscatterx();
}
inline ::google::protobuf::int32 ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarsettingscatterx() const {
  return tschchartserieserrorbarsettingscatterx_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartserieserrorbarsettingscatterx(::google::protobuf::int32 value) {
  set_has_tschchartserieserrorbarsettingscatterx();
  tschchartserieserrorbarsettingscatterx_ = value;
}

// optional float tschchartserieserrorbarstddevvalue = 12;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarstddevvalue() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartserieserrorbarstddevvalue() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartserieserrorbarstddevvalue() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarstddevvalue() {
  tschchartserieserrorbarstddevvalue_ = 0;
  clear_has_tschchartserieserrorbarstddevvalue();
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarstddevvalue() const {
  return tschchartserieserrorbarstddevvalue_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartserieserrorbarstddevvalue(float value) {
  set_has_tschchartserieserrorbarstddevvalue();
  tschchartserieserrorbarstddevvalue_ = value;
}

// optional float tschchartserieserrorbarstddevvaluescatterx = 13;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarstddevvaluescatterx() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartserieserrorbarstddevvaluescatterx() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartserieserrorbarstddevvaluescatterx() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarstddevvaluescatterx() {
  tschchartserieserrorbarstddevvaluescatterx_ = 0;
  clear_has_tschchartserieserrorbarstddevvaluescatterx();
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarstddevvaluescatterx() const {
  return tschchartserieserrorbarstddevvaluescatterx_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartserieserrorbarstddevvaluescatterx(float value) {
  set_has_tschchartserieserrorbarstddevvaluescatterx();
  tschchartserieserrorbarstddevvaluescatterx_ = value;
}

// optional int32 tschchartserieserrorbartype = 14;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbartype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartserieserrorbartype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartserieserrorbartype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbartype() {
  tschchartserieserrorbartype_ = 0;
  clear_has_tschchartserieserrorbartype();
}
inline ::google::protobuf::int32 ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbartype() const {
  return tschchartserieserrorbartype_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartserieserrorbartype(::google::protobuf::int32 value) {
  set_has_tschchartserieserrorbartype();
  tschchartserieserrorbartype_ = value;
}

// optional int32 tschchartserieserrorbartypescatterx = 15;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbartypescatterx() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartserieserrorbartypescatterx() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartserieserrorbartypescatterx() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbartypescatterx() {
  tschchartserieserrorbartypescatterx_ = 0;
  clear_has_tschchartserieserrorbartypescatterx();
}
inline ::google::protobuf::int32 ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbartypescatterx() const {
  return tschchartserieserrorbartypescatterx_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartserieserrorbartypescatterx(::google::protobuf::int32 value) {
  set_has_tschchartserieserrorbartypescatterx();
  tschchartserieserrorbartypescatterx_ = value;
}

// optional float tschchartserieslabelexplosion = 16;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieslabelexplosion() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartserieslabelexplosion() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartserieslabelexplosion() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieslabelexplosion() {
  tschchartserieslabelexplosion_ = 0;
  clear_has_tschchartserieslabelexplosion();
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartserieslabelexplosion() const {
  return tschchartserieslabelexplosion_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartserieslabelexplosion(float value) {
  set_has_tschchartserieslabelexplosion();
  tschchartserieslabelexplosion_ = value;
}

// optional int32 tschchartserieslinetype = 17;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieslinetype() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartserieslinetype() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartserieslinetype() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieslinetype() {
  tschchartserieslinetype_ = 0;
  clear_has_tschchartserieslinetype();
}
inline ::google::protobuf::int32 ChartSeriesGenericPropertyMapArchive::tschchartserieslinetype() const {
  return tschchartserieslinetype_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartserieslinetype(::google::protobuf::int32 value) {
  set_has_tschchartserieslinetype();
  tschchartserieslinetype_ = value;
}

// optional .TSK.FormatStructArchive tschchartseries1_0numberformat = 18;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseries1_0numberformat() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseries1_0numberformat() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseries1_0numberformat() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseries1_0numberformat() {
  if (tschchartseries1_0numberformat_ != NULL) tschchartseries1_0numberformat_->::TSK::FormatStructArchive::Clear();
  clear_has_tschchartseries1_0numberformat();
}
inline const ::TSK::FormatStructArchive& ChartSeriesGenericPropertyMapArchive::tschchartseries1_0numberformat() const {
  return tschchartseries1_0numberformat_ != NULL ? *tschchartseries1_0numberformat_ : *default_instance_->tschchartseries1_0numberformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartseries1_0numberformat() {
  set_has_tschchartseries1_0numberformat();
  if (tschchartseries1_0numberformat_ == NULL) tschchartseries1_0numberformat_ = new ::TSK::FormatStructArchive;
  return tschchartseries1_0numberformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartseries1_0numberformat() {
  clear_has_tschchartseries1_0numberformat();
  ::TSK::FormatStructArchive* temp = tschchartseries1_0numberformat_;
  tschchartseries1_0numberformat_ = NULL;
  return temp;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartseries1_0numberformat(::TSK::FormatStructArchive* tschchartseries1_0numberformat) {
  delete tschchartseries1_0numberformat_;
  tschchartseries1_0numberformat_ = tschchartseries1_0numberformat;
  if (tschchartseries1_0numberformat) {
    set_has_tschchartseries1_0numberformat();
  } else {
    clear_has_tschchartseries1_0numberformat();
  }
}

// optional .TSK.FormatStructArchive tschchartseriesnumberformat = 19;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesnumberformat() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriesnumberformat() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriesnumberformat() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesnumberformat() {
  if (tschchartseriesnumberformat_ != NULL) tschchartseriesnumberformat_->::TSK::FormatStructArchive::Clear();
  clear_has_tschchartseriesnumberformat();
}
inline const ::TSK::FormatStructArchive& ChartSeriesGenericPropertyMapArchive::tschchartseriesnumberformat() const {
  return tschchartseriesnumberformat_ != NULL ? *tschchartseriesnumberformat_ : *default_instance_->tschchartseriesnumberformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartseriesnumberformat() {
  set_has_tschchartseriesnumberformat();
  if (tschchartseriesnumberformat_ == NULL) tschchartseriesnumberformat_ = new ::TSK::FormatStructArchive;
  return tschchartseriesnumberformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartseriesnumberformat() {
  clear_has_tschchartseriesnumberformat();
  ::TSK::FormatStructArchive* temp = tschchartseriesnumberformat_;
  tschchartseriesnumberformat_ = NULL;
  return temp;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartseriesnumberformat(::TSK::FormatStructArchive* tschchartseriesnumberformat) {
  delete tschchartseriesnumberformat_;
  tschchartseriesnumberformat_ = tschchartseriesnumberformat;
  if (tschchartseriesnumberformat) {
    set_has_tschchartseriesnumberformat();
  } else {
    clear_has_tschchartseriesnumberformat();
  }
}

// optional .TSK.FormatStructArchive tschchartseries1_0dateformat = 20;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseries1_0dateformat() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseries1_0dateformat() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseries1_0dateformat() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseries1_0dateformat() {
  if (tschchartseries1_0dateformat_ != NULL) tschchartseries1_0dateformat_->::TSK::FormatStructArchive::Clear();
  clear_has_tschchartseries1_0dateformat();
}
inline const ::TSK::FormatStructArchive& ChartSeriesGenericPropertyMapArchive::tschchartseries1_0dateformat() const {
  return tschchartseries1_0dateformat_ != NULL ? *tschchartseries1_0dateformat_ : *default_instance_->tschchartseries1_0dateformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartseries1_0dateformat() {
  set_has_tschchartseries1_0dateformat();
  if (tschchartseries1_0dateformat_ == NULL) tschchartseries1_0dateformat_ = new ::TSK::FormatStructArchive;
  return tschchartseries1_0dateformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartseries1_0dateformat() {
  clear_has_tschchartseries1_0dateformat();
  ::TSK::FormatStructArchive* temp = tschchartseries1_0dateformat_;
  tschchartseries1_0dateformat_ = NULL;
  return temp;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartseries1_0dateformat(::TSK::FormatStructArchive* tschchartseries1_0dateformat) {
  delete tschchartseries1_0dateformat_;
  tschchartseries1_0dateformat_ = tschchartseries1_0dateformat;
  if (tschchartseries1_0dateformat) {
    set_has_tschchartseries1_0dateformat();
  } else {
    clear_has_tschchartseries1_0dateformat();
  }
}

// optional .TSK.FormatStructArchive tschchartseriesdurationformat = 21;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesdurationformat() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriesdurationformat() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriesdurationformat() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesdurationformat() {
  if (tschchartseriesdurationformat_ != NULL) tschchartseriesdurationformat_->::TSK::FormatStructArchive::Clear();
  clear_has_tschchartseriesdurationformat();
}
inline const ::TSK::FormatStructArchive& ChartSeriesGenericPropertyMapArchive::tschchartseriesdurationformat() const {
  return tschchartseriesdurationformat_ != NULL ? *tschchartseriesdurationformat_ : *default_instance_->tschchartseriesdurationformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartseriesdurationformat() {
  set_has_tschchartseriesdurationformat();
  if (tschchartseriesdurationformat_ == NULL) tschchartseriesdurationformat_ = new ::TSK::FormatStructArchive;
  return tschchartseriesdurationformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartseriesdurationformat() {
  clear_has_tschchartseriesdurationformat();
  ::TSK::FormatStructArchive* temp = tschchartseriesdurationformat_;
  tschchartseriesdurationformat_ = NULL;
  return temp;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartseriesdurationformat(::TSK::FormatStructArchive* tschchartseriesdurationformat) {
  delete tschchartseriesdurationformat_;
  tschchartseriesdurationformat_ = tschchartseriesdurationformat;
  if (tschchartseriesdurationformat) {
    set_has_tschchartseriesdurationformat();
  } else {
    clear_has_tschchartseriesdurationformat();
  }
}

// optional .TSK.FormatStructArchive tschchartseriesdateformat = 22;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesdateformat() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriesdateformat() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriesdateformat() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesdateformat() {
  if (tschchartseriesdateformat_ != NULL) tschchartseriesdateformat_->::TSK::FormatStructArchive::Clear();
  clear_has_tschchartseriesdateformat();
}
inline const ::TSK::FormatStructArchive& ChartSeriesGenericPropertyMapArchive::tschchartseriesdateformat() const {
  return tschchartseriesdateformat_ != NULL ? *tschchartseriesdateformat_ : *default_instance_->tschchartseriesdateformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartseriesdateformat() {
  set_has_tschchartseriesdateformat();
  if (tschchartseriesdateformat_ == NULL) tschchartseriesdateformat_ = new ::TSK::FormatStructArchive;
  return tschchartseriesdateformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartseriesdateformat() {
  clear_has_tschchartseriesdateformat();
  ::TSK::FormatStructArchive* temp = tschchartseriesdateformat_;
  tschchartseriesdateformat_ = NULL;
  return temp;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartseriesdateformat(::TSK::FormatStructArchive* tschchartseriesdateformat) {
  delete tschchartseriesdateformat_;
  tschchartseriesdateformat_ = tschchartseriesdateformat;
  if (tschchartseriesdateformat) {
    set_has_tschchartseriesdateformat();
  } else {
    clear_has_tschchartseriesdateformat();
  }
}

// optional int32 tschchartseriesnumberformattype = 23;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesnumberformattype() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriesnumberformattype() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriesnumberformattype() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesnumberformattype() {
  tschchartseriesnumberformattype_ = 0;
  clear_has_tschchartseriesnumberformattype();
}
inline ::google::protobuf::int32 ChartSeriesGenericPropertyMapArchive::tschchartseriesnumberformattype() const {
  return tschchartseriesnumberformattype_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesnumberformattype(::google::protobuf::int32 value) {
  set_has_tschchartseriesnumberformattype();
  tschchartseriesnumberformattype_ = value;
}

// optional .TSK.FormatStructArchive tschchartseriespercentnumberformat = 24;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriespercentnumberformat() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriespercentnumberformat() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriespercentnumberformat() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriespercentnumberformat() {
  if (tschchartseriespercentnumberformat_ != NULL) tschchartseriespercentnumberformat_->::TSK::FormatStructArchive::Clear();
  clear_has_tschchartseriespercentnumberformat();
}
inline const ::TSK::FormatStructArchive& ChartSeriesGenericPropertyMapArchive::tschchartseriespercentnumberformat() const {
  return tschchartseriespercentnumberformat_ != NULL ? *tschchartseriespercentnumberformat_ : *default_instance_->tschchartseriespercentnumberformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartseriespercentnumberformat() {
  set_has_tschchartseriespercentnumberformat();
  if (tschchartseriespercentnumberformat_ == NULL) tschchartseriespercentnumberformat_ = new ::TSK::FormatStructArchive;
  return tschchartseriespercentnumberformat_;
}
inline ::TSK::FormatStructArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartseriespercentnumberformat() {
  clear_has_tschchartseriespercentnumberformat();
  ::TSK::FormatStructArchive* temp = tschchartseriespercentnumberformat_;
  tschchartseriespercentnumberformat_ = NULL;
  return temp;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartseriespercentnumberformat(::TSK::FormatStructArchive* tschchartseriespercentnumberformat) {
  delete tschchartseriespercentnumberformat_;
  tschchartseriespercentnumberformat_ = tschchartseriespercentnumberformat;
  if (tschchartseriespercentnumberformat) {
    set_has_tschchartseriespercentnumberformat();
  } else {
    clear_has_tschchartseriespercentnumberformat();
  }
}

// optional int32 tschchartseriesseriestype = 25;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesseriestype() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriesseriestype() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriesseriestype() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesseriestype() {
  tschchartseriesseriestype_ = 0;
  clear_has_tschchartseriesseriestype();
}
inline ::google::protobuf::int32 ChartSeriesGenericPropertyMapArchive::tschchartseriesseriestype() const {
  return tschchartseriesseriestype_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesseriestype(::google::protobuf::int32 value) {
  set_has_tschchartseriesseriestype();
  tschchartseriesseriestype_ = value;
}

// optional bool tschchartseriesshowerrorbar = 26;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesshowerrorbar() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriesshowerrorbar() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriesshowerrorbar() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesshowerrorbar() {
  tschchartseriesshowerrorbar_ = false;
  clear_has_tschchartseriesshowerrorbar();
}
inline bool ChartSeriesGenericPropertyMapArchive::tschchartseriesshowerrorbar() const {
  return tschchartseriesshowerrorbar_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesshowerrorbar(bool value) {
  set_has_tschchartseriesshowerrorbar();
  tschchartseriesshowerrorbar_ = value;
}

// optional bool tschchartseriesshowerrorbarscatterx = 27;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesshowerrorbarscatterx() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriesshowerrorbarscatterx() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriesshowerrorbarscatterx() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesshowerrorbarscatterx() {
  tschchartseriesshowerrorbarscatterx_ = false;
  clear_has_tschchartseriesshowerrorbarscatterx();
}
inline bool ChartSeriesGenericPropertyMapArchive::tschchartseriesshowerrorbarscatterx() const {
  return tschchartseriesshowerrorbarscatterx_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesshowerrorbarscatterx(bool value) {
  set_has_tschchartseriesshowerrorbarscatterx();
  tschchartseriesshowerrorbarscatterx_ = value;
}

// optional bool tschchartseriesshowline = 28;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesshowline() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriesshowline() {
  _has_bits_[0] |= 0x08000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriesshowline() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesshowline() {
  tschchartseriesshowline_ = false;
  clear_has_tschchartseriesshowline();
}
inline bool ChartSeriesGenericPropertyMapArchive::tschchartseriesshowline() const {
  return tschchartseriesshowline_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesshowline(bool value) {
  set_has_tschchartseriesshowline();
  tschchartseriesshowline_ = value;
}

// optional bool tschchartseriesshownegativedata = 29;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesshownegativedata() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriesshownegativedata() {
  _has_bits_[0] |= 0x10000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriesshownegativedata() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesshownegativedata() {
  tschchartseriesshownegativedata_ = false;
  clear_has_tschchartseriesshownegativedata();
}
inline bool ChartSeriesGenericPropertyMapArchive::tschchartseriesshownegativedata() const {
  return tschchartseriesshownegativedata_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesshownegativedata(bool value) {
  set_has_tschchartseriesshownegativedata();
  tschchartseriesshownegativedata_ = value;
}

// optional bool tschchartseriesshowserieslabels = 30;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesshowserieslabels() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriesshowserieslabels() {
  _has_bits_[0] |= 0x20000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriesshowserieslabels() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesshowserieslabels() {
  tschchartseriesshowserieslabels_ = false;
  clear_has_tschchartseriesshowserieslabels();
}
inline bool ChartSeriesGenericPropertyMapArchive::tschchartseriesshowserieslabels() const {
  return tschchartseriesshowserieslabels_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesshowserieslabels(bool value) {
  set_has_tschchartseriesshowserieslabels();
  tschchartseriesshowserieslabels_ = value;
}

// optional bool tschchartseriesshowsymbol = 31;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesshowsymbol() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriesshowsymbol() {
  _has_bits_[0] |= 0x40000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriesshowsymbol() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesshowsymbol() {
  tschchartseriesshowsymbol_ = false;
  clear_has_tschchartseriesshowsymbol();
}
inline bool ChartSeriesGenericPropertyMapArchive::tschchartseriesshowsymbol() const {
  return tschchartseriesshowsymbol_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesshowsymbol(bool value) {
  set_has_tschchartseriesshowsymbol();
  tschchartseriesshowsymbol_ = value;
}

// optional bool tschchartseriesshowtrendline = 32;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesshowtrendline() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriesshowtrendline() {
  _has_bits_[0] |= 0x80000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriesshowtrendline() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesshowtrendline() {
  tschchartseriesshowtrendline_ = false;
  clear_has_tschchartseriesshowtrendline();
}
inline bool ChartSeriesGenericPropertyMapArchive::tschchartseriesshowtrendline() const {
  return tschchartseriesshowtrendline_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesshowtrendline(bool value) {
  set_has_tschchartseriesshowtrendline();
  tschchartseriesshowtrendline_ = value;
}

// optional bool tschchartseriesshowvaluelabels = 33;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesshowvaluelabels() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriesshowvaluelabels() {
  _has_bits_[1] |= 0x00000001u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriesshowvaluelabels() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesshowvaluelabels() {
  tschchartseriesshowvaluelabels_ = false;
  clear_has_tschchartseriesshowvaluelabels();
}
inline bool ChartSeriesGenericPropertyMapArchive::tschchartseriesshowvaluelabels() const {
  return tschchartseriesshowvaluelabels_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesshowvaluelabels(bool value) {
  set_has_tschchartseriesshowvaluelabels();
  tschchartseriesshowvaluelabels_ = value;
}

// optional int32 tschchartseriessizedimension = 34;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriessizedimension() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriessizedimension() {
  _has_bits_[1] |= 0x00000002u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriessizedimension() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriessizedimension() {
  tschchartseriessizedimension_ = 0;
  clear_has_tschchartseriessizedimension();
}
inline ::google::protobuf::int32 ChartSeriesGenericPropertyMapArchive::tschchartseriessizedimension() const {
  return tschchartseriessizedimension_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriessizedimension(::google::protobuf::int32 value) {
  set_has_tschchartseriessizedimension();
  tschchartseriessizedimension_ = value;
}

// optional int32 tschchartseriessymboltype = 35;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriessymboltype() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriessymboltype() {
  _has_bits_[1] |= 0x00000004u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriessymboltype() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriessymboltype() {
  tschchartseriessymboltype_ = 0;
  clear_has_tschchartseriessymboltype();
}
inline ::google::protobuf::int32 ChartSeriesGenericPropertyMapArchive::tschchartseriessymboltype() const {
  return tschchartseriessymboltype_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriessymboltype(::google::protobuf::int32 value) {
  set_has_tschchartseriessymboltype();
  tschchartseriessymboltype_ = value;
}

// optional float tschchartseriestrendlineequationoffsetx = 36;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlineequationoffsetx() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriestrendlineequationoffsetx() {
  _has_bits_[1] |= 0x00000008u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriestrendlineequationoffsetx() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlineequationoffsetx() {
  tschchartseriestrendlineequationoffsetx_ = 0;
  clear_has_tschchartseriestrendlineequationoffsetx();
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlineequationoffsetx() const {
  return tschchartseriestrendlineequationoffsetx_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlineequationoffsetx(float value) {
  set_has_tschchartseriestrendlineequationoffsetx();
  tschchartseriestrendlineequationoffsetx_ = value;
}

// optional float tschchartseriestrendlineequationoffsety = 37;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlineequationoffsety() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriestrendlineequationoffsety() {
  _has_bits_[1] |= 0x00000010u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriestrendlineequationoffsety() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlineequationoffsety() {
  tschchartseriestrendlineequationoffsety_ = 0;
  clear_has_tschchartseriestrendlineequationoffsety();
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlineequationoffsety() const {
  return tschchartseriestrendlineequationoffsety_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlineequationoffsety(float value) {
  set_has_tschchartseriestrendlineequationoffsety();
  tschchartseriestrendlineequationoffsety_ = value;
}

// optional string tschchartseriestrendlinelabelstring = 38;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlinelabelstring() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriestrendlinelabelstring() {
  _has_bits_[1] |= 0x00000020u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriestrendlinelabelstring() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlinelabelstring() {
  if (tschchartseriestrendlinelabelstring_ != &::google::protobuf::internal::kEmptyString) {
    tschchartseriestrendlinelabelstring_->clear();
  }
  clear_has_tschchartseriestrendlinelabelstring();
}
inline const ::std::string& ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlinelabelstring() const {
  return *tschchartseriestrendlinelabelstring_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlinelabelstring(const ::std::string& value) {
  set_has_tschchartseriestrendlinelabelstring();
  if (tschchartseriestrendlinelabelstring_ == &::google::protobuf::internal::kEmptyString) {
    tschchartseriestrendlinelabelstring_ = new ::std::string;
  }
  tschchartseriestrendlinelabelstring_->assign(value);
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlinelabelstring(const char* value) {
  set_has_tschchartseriestrendlinelabelstring();
  if (tschchartseriestrendlinelabelstring_ == &::google::protobuf::internal::kEmptyString) {
    tschchartseriestrendlinelabelstring_ = new ::std::string;
  }
  tschchartseriestrendlinelabelstring_->assign(value);
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlinelabelstring(const char* value, size_t size) {
  set_has_tschchartseriestrendlinelabelstring();
  if (tschchartseriestrendlinelabelstring_ == &::google::protobuf::internal::kEmptyString) {
    tschchartseriestrendlinelabelstring_ = new ::std::string;
  }
  tschchartseriestrendlinelabelstring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChartSeriesGenericPropertyMapArchive::mutable_tschchartseriestrendlinelabelstring() {
  set_has_tschchartseriestrendlinelabelstring();
  if (tschchartseriestrendlinelabelstring_ == &::google::protobuf::internal::kEmptyString) {
    tschchartseriestrendlinelabelstring_ = new ::std::string;
  }
  return tschchartseriestrendlinelabelstring_;
}
inline ::std::string* ChartSeriesGenericPropertyMapArchive::release_tschchartseriestrendlinelabelstring() {
  clear_has_tschchartseriestrendlinelabelstring();
  if (tschchartseriestrendlinelabelstring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tschchartseriestrendlinelabelstring_;
    tschchartseriestrendlinelabelstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartseriestrendlinelabelstring(::std::string* tschchartseriestrendlinelabelstring) {
  if (tschchartseriestrendlinelabelstring_ != &::google::protobuf::internal::kEmptyString) {
    delete tschchartseriestrendlinelabelstring_;
  }
  if (tschchartseriestrendlinelabelstring) {
    set_has_tschchartseriestrendlinelabelstring();
    tschchartseriestrendlinelabelstring_ = tschchartseriestrendlinelabelstring;
  } else {
    clear_has_tschchartseriestrendlinelabelstring();
    tschchartseriestrendlinelabelstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 tschchartseriestrendlineorder = 39;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlineorder() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriestrendlineorder() {
  _has_bits_[1] |= 0x00000040u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriestrendlineorder() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlineorder() {
  tschchartseriestrendlineorder_ = 0;
  clear_has_tschchartseriestrendlineorder();
}
inline ::google::protobuf::int32 ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlineorder() const {
  return tschchartseriestrendlineorder_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlineorder(::google::protobuf::int32 value) {
  set_has_tschchartseriestrendlineorder();
  tschchartseriestrendlineorder_ = value;
}

// optional int32 tschchartseriestrendlineperiod = 40;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlineperiod() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriestrendlineperiod() {
  _has_bits_[1] |= 0x00000080u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriestrendlineperiod() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlineperiod() {
  tschchartseriestrendlineperiod_ = 0;
  clear_has_tschchartseriestrendlineperiod();
}
inline ::google::protobuf::int32 ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlineperiod() const {
  return tschchartseriestrendlineperiod_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlineperiod(::google::protobuf::int32 value) {
  set_has_tschchartseriestrendlineperiod();
  tschchartseriestrendlineperiod_ = value;
}

// optional float tschchartseriestrendlinersquaredoffsetx = 41;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlinersquaredoffsetx() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriestrendlinersquaredoffsetx() {
  _has_bits_[1] |= 0x00000100u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriestrendlinersquaredoffsetx() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlinersquaredoffsetx() {
  tschchartseriestrendlinersquaredoffsetx_ = 0;
  clear_has_tschchartseriestrendlinersquaredoffsetx();
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlinersquaredoffsetx() const {
  return tschchartseriestrendlinersquaredoffsetx_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlinersquaredoffsetx(float value) {
  set_has_tschchartseriestrendlinersquaredoffsetx();
  tschchartseriestrendlinersquaredoffsetx_ = value;
}

// optional float tschchartseriestrendlinersquaredoffsety = 42;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlinersquaredoffsety() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriestrendlinersquaredoffsety() {
  _has_bits_[1] |= 0x00000200u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriestrendlinersquaredoffsety() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlinersquaredoffsety() {
  tschchartseriestrendlinersquaredoffsety_ = 0;
  clear_has_tschchartseriestrendlinersquaredoffsety();
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlinersquaredoffsety() const {
  return tschchartseriestrendlinersquaredoffsety_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlinersquaredoffsety(float value) {
  set_has_tschchartseriestrendlinersquaredoffsety();
  tschchartseriestrendlinersquaredoffsety_ = value;
}

// optional bool tschchartseriestrendlineshowequation = 43;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlineshowequation() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriestrendlineshowequation() {
  _has_bits_[1] |= 0x00000400u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriestrendlineshowequation() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlineshowequation() {
  tschchartseriestrendlineshowequation_ = false;
  clear_has_tschchartseriestrendlineshowequation();
}
inline bool ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlineshowequation() const {
  return tschchartseriestrendlineshowequation_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlineshowequation(bool value) {
  set_has_tschchartseriestrendlineshowequation();
  tschchartseriestrendlineshowequation_ = value;
}

// optional bool tschchartseriestrendlineshowlabel = 44;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlineshowlabel() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriestrendlineshowlabel() {
  _has_bits_[1] |= 0x00000800u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriestrendlineshowlabel() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlineshowlabel() {
  tschchartseriestrendlineshowlabel_ = false;
  clear_has_tschchartseriestrendlineshowlabel();
}
inline bool ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlineshowlabel() const {
  return tschchartseriestrendlineshowlabel_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlineshowlabel(bool value) {
  set_has_tschchartseriestrendlineshowlabel();
  tschchartseriestrendlineshowlabel_ = value;
}

// optional bool tschchartseriestrendlineshowr2value = 45;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlineshowr2value() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriestrendlineshowr2value() {
  _has_bits_[1] |= 0x00001000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriestrendlineshowr2value() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlineshowr2value() {
  tschchartseriestrendlineshowr2value_ = false;
  clear_has_tschchartseriestrendlineshowr2value();
}
inline bool ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlineshowr2value() const {
  return tschchartseriestrendlineshowr2value_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlineshowr2value(bool value) {
  set_has_tschchartseriestrendlineshowr2value();
  tschchartseriestrendlineshowr2value_ = value;
}

// optional int32 tschchartseriestrendlinetype = 46;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlinetype() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriestrendlinetype() {
  _has_bits_[1] |= 0x00002000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriestrendlinetype() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlinetype() {
  tschchartseriestrendlinetype_ = 0;
  clear_has_tschchartseriestrendlinetype();
}
inline ::google::protobuf::int32 ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlinetype() const {
  return tschchartseriestrendlinetype_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlinetype(::google::protobuf::int32 value) {
  set_has_tschchartseriestrendlinetype();
  tschchartseriestrendlinetype_ = value;
}

// optional float tschchartserieswedgeexplosion = 47;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieswedgeexplosion() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartserieswedgeexplosion() {
  _has_bits_[1] |= 0x00004000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartserieswedgeexplosion() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieswedgeexplosion() {
  tschchartserieswedgeexplosion_ = 0;
  clear_has_tschchartserieswedgeexplosion();
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartserieswedgeexplosion() const {
  return tschchartserieswedgeexplosion_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartserieswedgeexplosion(float value) {
  set_has_tschchartserieswedgeexplosion();
  tschchartserieswedgeexplosion_ = value;
}

// optional int32 tschchartseriesyaxisordinal = 48;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesyaxisordinal() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriesyaxisordinal() {
  _has_bits_[1] |= 0x00008000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriesyaxisordinal() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesyaxisordinal() {
  tschchartseriesyaxisordinal_ = 0;
  clear_has_tschchartseriesyaxisordinal();
}
inline ::google::protobuf::int32 ChartSeriesGenericPropertyMapArchive::tschchartseriesyaxisordinal() const {
  return tschchartseriesyaxisordinal_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesyaxisordinal(::google::protobuf::int32 value) {
  set_has_tschchartseriesyaxisordinal();
  tschchartseriesyaxisordinal_ = value;
}

// optional int32 tschchartseriesvaluelabelsaxis = 49;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesvaluelabelsaxis() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriesvaluelabelsaxis() {
  _has_bits_[1] |= 0x00010000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriesvaluelabelsaxis() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesvaluelabelsaxis() {
  tschchartseriesvaluelabelsaxis_ = 0;
  clear_has_tschchartseriesvaluelabelsaxis();
}
inline ::google::protobuf::int32 ChartSeriesGenericPropertyMapArchive::tschchartseriesvaluelabelsaxis() const {
  return tschchartseriesvaluelabelsaxis_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesvaluelabelsaxis(::google::protobuf::int32 value) {
  set_has_tschchartseriesvaluelabelsaxis();
  tschchartseriesvaluelabelsaxis_ = value;
}

// optional .TSD.LineEndArchive tschchartserieserrorbarlineend = 50;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarlineend() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartserieserrorbarlineend() {
  _has_bits_[1] |= 0x00020000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartserieserrorbarlineend() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarlineend() {
  if (tschchartserieserrorbarlineend_ != NULL) tschchartserieserrorbarlineend_->::TSD::LineEndArchive::Clear();
  clear_has_tschchartserieserrorbarlineend();
}
inline const ::TSD::LineEndArchive& ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarlineend() const {
  return tschchartserieserrorbarlineend_ != NULL ? *tschchartserieserrorbarlineend_ : *default_instance_->tschchartserieserrorbarlineend_;
}
inline ::TSD::LineEndArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartserieserrorbarlineend() {
  set_has_tschchartserieserrorbarlineend();
  if (tschchartserieserrorbarlineend_ == NULL) tschchartserieserrorbarlineend_ = new ::TSD::LineEndArchive;
  return tschchartserieserrorbarlineend_;
}
inline ::TSD::LineEndArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartserieserrorbarlineend() {
  clear_has_tschchartserieserrorbarlineend();
  ::TSD::LineEndArchive* temp = tschchartserieserrorbarlineend_;
  tschchartserieserrorbarlineend_ = NULL;
  return temp;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartserieserrorbarlineend(::TSD::LineEndArchive* tschchartserieserrorbarlineend) {
  delete tschchartserieserrorbarlineend_;
  tschchartserieserrorbarlineend_ = tschchartserieserrorbarlineend;
  if (tschchartserieserrorbarlineend) {
    set_has_tschchartserieserrorbarlineend();
  } else {
    clear_has_tschchartserieserrorbarlineend();
  }
}

// optional .TSD.LineEndArchive tschchartserieserrorbarlineendscatterx = 51;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarlineendscatterx() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartserieserrorbarlineendscatterx() {
  _has_bits_[1] |= 0x00040000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartserieserrorbarlineendscatterx() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarlineendscatterx() {
  if (tschchartserieserrorbarlineendscatterx_ != NULL) tschchartserieserrorbarlineendscatterx_->::TSD::LineEndArchive::Clear();
  clear_has_tschchartserieserrorbarlineendscatterx();
}
inline const ::TSD::LineEndArchive& ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarlineendscatterx() const {
  return tschchartserieserrorbarlineendscatterx_ != NULL ? *tschchartserieserrorbarlineendscatterx_ : *default_instance_->tschchartserieserrorbarlineendscatterx_;
}
inline ::TSD::LineEndArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartserieserrorbarlineendscatterx() {
  set_has_tschchartserieserrorbarlineendscatterx();
  if (tschchartserieserrorbarlineendscatterx_ == NULL) tschchartserieserrorbarlineendscatterx_ = new ::TSD::LineEndArchive;
  return tschchartserieserrorbarlineendscatterx_;
}
inline ::TSD::LineEndArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartserieserrorbarlineendscatterx() {
  clear_has_tschchartserieserrorbarlineendscatterx();
  ::TSD::LineEndArchive* temp = tschchartserieserrorbarlineendscatterx_;
  tschchartserieserrorbarlineendscatterx_ = NULL;
  return temp;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartserieserrorbarlineendscatterx(::TSD::LineEndArchive* tschchartserieserrorbarlineendscatterx) {
  delete tschchartserieserrorbarlineendscatterx_;
  tschchartserieserrorbarlineendscatterx_ = tschchartserieserrorbarlineendscatterx;
  if (tschchartserieserrorbarlineendscatterx) {
    set_has_tschchartserieserrorbarlineendscatterx();
  } else {
    clear_has_tschchartserieserrorbarlineendscatterx();
  }
}

// optional .TSD.ShadowArchive tschchartserieserrorbarshadow = 52;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarshadow() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartserieserrorbarshadow() {
  _has_bits_[1] |= 0x00080000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartserieserrorbarshadow() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarshadow() {
  if (tschchartserieserrorbarshadow_ != NULL) tschchartserieserrorbarshadow_->::TSD::ShadowArchive::Clear();
  clear_has_tschchartserieserrorbarshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarshadow() const {
  return tschchartserieserrorbarshadow_ != NULL ? *tschchartserieserrorbarshadow_ : *default_instance_->tschchartserieserrorbarshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartserieserrorbarshadow() {
  set_has_tschchartserieserrorbarshadow();
  if (tschchartserieserrorbarshadow_ == NULL) tschchartserieserrorbarshadow_ = new ::TSD::ShadowArchive;
  return tschchartserieserrorbarshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartserieserrorbarshadow() {
  clear_has_tschchartserieserrorbarshadow();
  ::TSD::ShadowArchive* temp = tschchartserieserrorbarshadow_;
  tschchartserieserrorbarshadow_ = NULL;
  return temp;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartserieserrorbarshadow(::TSD::ShadowArchive* tschchartserieserrorbarshadow) {
  delete tschchartserieserrorbarshadow_;
  tschchartserieserrorbarshadow_ = tschchartserieserrorbarshadow;
  if (tschchartserieserrorbarshadow) {
    set_has_tschchartserieserrorbarshadow();
  } else {
    clear_has_tschchartserieserrorbarshadow();
  }
}

// optional .TSD.StrokeArchive tschchartserieserrorbarstroke = 53;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarstroke() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartserieserrorbarstroke() {
  _has_bits_[1] |= 0x00100000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartserieserrorbarstroke() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarstroke() {
  if (tschchartserieserrorbarstroke_ != NULL) tschchartserieserrorbarstroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartserieserrorbarstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarstroke() const {
  return tschchartserieserrorbarstroke_ != NULL ? *tschchartserieserrorbarstroke_ : *default_instance_->tschchartserieserrorbarstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartserieserrorbarstroke() {
  set_has_tschchartserieserrorbarstroke();
  if (tschchartserieserrorbarstroke_ == NULL) tschchartserieserrorbarstroke_ = new ::TSD::StrokeArchive;
  return tschchartserieserrorbarstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartserieserrorbarstroke() {
  clear_has_tschchartserieserrorbarstroke();
  ::TSD::StrokeArchive* temp = tschchartserieserrorbarstroke_;
  tschchartserieserrorbarstroke_ = NULL;
  return temp;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartserieserrorbarstroke(::TSD::StrokeArchive* tschchartserieserrorbarstroke) {
  delete tschchartserieserrorbarstroke_;
  tschchartserieserrorbarstroke_ = tschchartserieserrorbarstroke;
  if (tschchartserieserrorbarstroke) {
    set_has_tschchartserieserrorbarstroke();
  } else {
    clear_has_tschchartserieserrorbarstroke();
  }
}

// optional .TSD.StrokeArchive tschchartserieserrorbarstrokescatterx = 54;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieserrorbarstrokescatterx() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartserieserrorbarstrokescatterx() {
  _has_bits_[1] |= 0x00200000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartserieserrorbarstrokescatterx() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarstrokescatterx() {
  if (tschchartserieserrorbarstrokescatterx_ != NULL) tschchartserieserrorbarstrokescatterx_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartserieserrorbarstrokescatterx();
}
inline const ::TSD::StrokeArchive& ChartSeriesGenericPropertyMapArchive::tschchartserieserrorbarstrokescatterx() const {
  return tschchartserieserrorbarstrokescatterx_ != NULL ? *tschchartserieserrorbarstrokescatterx_ : *default_instance_->tschchartserieserrorbarstrokescatterx_;
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartserieserrorbarstrokescatterx() {
  set_has_tschchartserieserrorbarstrokescatterx();
  if (tschchartserieserrorbarstrokescatterx_ == NULL) tschchartserieserrorbarstrokescatterx_ = new ::TSD::StrokeArchive;
  return tschchartserieserrorbarstrokescatterx_;
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartserieserrorbarstrokescatterx() {
  clear_has_tschchartserieserrorbarstrokescatterx();
  ::TSD::StrokeArchive* temp = tschchartserieserrorbarstrokescatterx_;
  tschchartserieserrorbarstrokescatterx_ = NULL;
  return temp;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartserieserrorbarstrokescatterx(::TSD::StrokeArchive* tschchartserieserrorbarstrokescatterx) {
  delete tschchartserieserrorbarstrokescatterx_;
  tschchartserieserrorbarstrokescatterx_ = tschchartserieserrorbarstrokescatterx;
  if (tschchartserieserrorbarstrokescatterx) {
    set_has_tschchartserieserrorbarstrokescatterx();
  } else {
    clear_has_tschchartserieserrorbarstrokescatterx();
  }
}

// optional .TSD.FillArchive tschchartseriesfill = 55;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesfill() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriesfill() {
  _has_bits_[1] |= 0x00400000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriesfill() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesfill() {
  if (tschchartseriesfill_ != NULL) tschchartseriesfill_->::TSD::FillArchive::Clear();
  clear_has_tschchartseriesfill();
}
inline const ::TSD::FillArchive& ChartSeriesGenericPropertyMapArchive::tschchartseriesfill() const {
  return tschchartseriesfill_ != NULL ? *tschchartseriesfill_ : *default_instance_->tschchartseriesfill_;
}
inline ::TSD::FillArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartseriesfill() {
  set_has_tschchartseriesfill();
  if (tschchartseriesfill_ == NULL) tschchartseriesfill_ = new ::TSD::FillArchive;
  return tschchartseriesfill_;
}
inline ::TSD::FillArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartseriesfill() {
  clear_has_tschchartseriesfill();
  ::TSD::FillArchive* temp = tschchartseriesfill_;
  tschchartseriesfill_ = NULL;
  return temp;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartseriesfill(::TSD::FillArchive* tschchartseriesfill) {
  delete tschchartseriesfill_;
  tschchartseriesfill_ = tschchartseriesfill;
  if (tschchartseriesfill) {
    set_has_tschchartseriesfill();
  } else {
    clear_has_tschchartseriesfill();
  }
}

// optional int32 tschchartserieslabelparagraphstyleindex = 56;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartserieslabelparagraphstyleindex() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartserieslabelparagraphstyleindex() {
  _has_bits_[1] |= 0x00800000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartserieslabelparagraphstyleindex() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieslabelparagraphstyleindex() {
  tschchartserieslabelparagraphstyleindex_ = 0;
  clear_has_tschchartserieslabelparagraphstyleindex();
}
inline ::google::protobuf::int32 ChartSeriesGenericPropertyMapArchive::tschchartserieslabelparagraphstyleindex() const {
  return tschchartserieslabelparagraphstyleindex_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartserieslabelparagraphstyleindex(::google::protobuf::int32 value) {
  set_has_tschchartserieslabelparagraphstyleindex();
  tschchartserieslabelparagraphstyleindex_ = value;
}

// optional float tschchartseriesopacity = 57;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesopacity() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriesopacity() {
  _has_bits_[1] |= 0x01000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriesopacity() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesopacity() {
  tschchartseriesopacity_ = 0;
  clear_has_tschchartseriesopacity();
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartseriesopacity() const {
  return tschchartseriesopacity_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesopacity(float value) {
  set_has_tschchartseriesopacity();
  tschchartseriesopacity_ = value;
}

// optional int32 tschchartseriesoutsidelabelparagraphstyleindex = 58;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesoutsidelabelparagraphstyleindex() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriesoutsidelabelparagraphstyleindex() {
  _has_bits_[1] |= 0x02000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriesoutsidelabelparagraphstyleindex() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesoutsidelabelparagraphstyleindex() {
  tschchartseriesoutsidelabelparagraphstyleindex_ = 0;
  clear_has_tschchartseriesoutsidelabelparagraphstyleindex();
}
inline ::google::protobuf::int32 ChartSeriesGenericPropertyMapArchive::tschchartseriesoutsidelabelparagraphstyleindex() const {
  return tschchartseriesoutsidelabelparagraphstyleindex_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesoutsidelabelparagraphstyleindex(::google::protobuf::int32 value) {
  set_has_tschchartseriesoutsidelabelparagraphstyleindex();
  tschchartseriesoutsidelabelparagraphstyleindex_ = value;
}

// optional .TSD.ShadowArchive tschchartseriesshadow = 59;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesshadow() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriesshadow() {
  _has_bits_[1] |= 0x04000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriesshadow() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesshadow() {
  if (tschchartseriesshadow_ != NULL) tschchartseriesshadow_->::TSD::ShadowArchive::Clear();
  clear_has_tschchartseriesshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesGenericPropertyMapArchive::tschchartseriesshadow() const {
  return tschchartseriesshadow_ != NULL ? *tschchartseriesshadow_ : *default_instance_->tschchartseriesshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartseriesshadow() {
  set_has_tschchartseriesshadow();
  if (tschchartseriesshadow_ == NULL) tschchartseriesshadow_ = new ::TSD::ShadowArchive;
  return tschchartseriesshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartseriesshadow() {
  clear_has_tschchartseriesshadow();
  ::TSD::ShadowArchive* temp = tschchartseriesshadow_;
  tschchartseriesshadow_ = NULL;
  return temp;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartseriesshadow(::TSD::ShadowArchive* tschchartseriesshadow) {
  delete tschchartseriesshadow_;
  tschchartseriesshadow_ = tschchartseriesshadow;
  if (tschchartseriesshadow) {
    set_has_tschchartseriesshadow();
  } else {
    clear_has_tschchartseriesshadow();
  }
}

// optional .TSD.StrokeArchive tschchartseriesstroke = 60;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesstroke() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriesstroke() {
  _has_bits_[1] |= 0x08000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriesstroke() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesstroke() {
  if (tschchartseriesstroke_ != NULL) tschchartseriesstroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartseriesstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesGenericPropertyMapArchive::tschchartseriesstroke() const {
  return tschchartseriesstroke_ != NULL ? *tschchartseriesstroke_ : *default_instance_->tschchartseriesstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartseriesstroke() {
  set_has_tschchartseriesstroke();
  if (tschchartseriesstroke_ == NULL) tschchartseriesstroke_ = new ::TSD::StrokeArchive;
  return tschchartseriesstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartseriesstroke() {
  clear_has_tschchartseriesstroke();
  ::TSD::StrokeArchive* temp = tschchartseriesstroke_;
  tschchartseriesstroke_ = NULL;
  return temp;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartseriesstroke(::TSD::StrokeArchive* tschchartseriesstroke) {
  delete tschchartseriesstroke_;
  tschchartseriesstroke_ = tschchartseriesstroke;
  if (tschchartseriesstroke) {
    set_has_tschchartseriesstroke();
  } else {
    clear_has_tschchartseriesstroke();
  }
}

// optional .TSD.FillArchive tschchartseriessymbolfill = 61;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriessymbolfill() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriessymbolfill() {
  _has_bits_[1] |= 0x10000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriessymbolfill() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriessymbolfill() {
  if (tschchartseriessymbolfill_ != NULL) tschchartseriessymbolfill_->::TSD::FillArchive::Clear();
  clear_has_tschchartseriessymbolfill();
}
inline const ::TSD::FillArchive& ChartSeriesGenericPropertyMapArchive::tschchartseriessymbolfill() const {
  return tschchartseriessymbolfill_ != NULL ? *tschchartseriessymbolfill_ : *default_instance_->tschchartseriessymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartseriessymbolfill() {
  set_has_tschchartseriessymbolfill();
  if (tschchartseriessymbolfill_ == NULL) tschchartseriessymbolfill_ = new ::TSD::FillArchive;
  return tschchartseriessymbolfill_;
}
inline ::TSD::FillArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartseriessymbolfill() {
  clear_has_tschchartseriessymbolfill();
  ::TSD::FillArchive* temp = tschchartseriessymbolfill_;
  tschchartseriessymbolfill_ = NULL;
  return temp;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartseriessymbolfill(::TSD::FillArchive* tschchartseriessymbolfill) {
  delete tschchartseriessymbolfill_;
  tschchartseriessymbolfill_ = tschchartseriessymbolfill;
  if (tschchartseriessymbolfill) {
    set_has_tschchartseriessymbolfill();
  } else {
    clear_has_tschchartseriessymbolfill();
  }
}

// optional bool tschchartseriessymbolfilluseseriesfill = 62;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriessymbolfilluseseriesfill() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriessymbolfilluseseriesfill() {
  _has_bits_[1] |= 0x20000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriessymbolfilluseseriesfill() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriessymbolfilluseseriesfill() {
  tschchartseriessymbolfilluseseriesfill_ = false;
  clear_has_tschchartseriessymbolfilluseseriesfill();
}
inline bool ChartSeriesGenericPropertyMapArchive::tschchartseriessymbolfilluseseriesfill() const {
  return tschchartseriessymbolfilluseseriesfill_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriessymbolfilluseseriesfill(bool value) {
  set_has_tschchartseriessymbolfilluseseriesfill();
  tschchartseriessymbolfilluseseriesfill_ = value;
}

// optional bool tschchartseriessymbolfilluseseriesstroke = 63;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriessymbolfilluseseriesstroke() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriessymbolfilluseseriesstroke() {
  _has_bits_[1] |= 0x40000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriessymbolfilluseseriesstroke() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriessymbolfilluseseriesstroke() {
  tschchartseriessymbolfilluseseriesstroke_ = false;
  clear_has_tschchartseriessymbolfilluseseriesstroke();
}
inline bool ChartSeriesGenericPropertyMapArchive::tschchartseriessymbolfilluseseriesstroke() const {
  return tschchartseriessymbolfilluseseriesstroke_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriessymbolfilluseseriesstroke(bool value) {
  set_has_tschchartseriessymbolfilluseseriesstroke();
  tschchartseriessymbolfilluseseriesstroke_ = value;
}

// optional float tschchartseriessymbolsize = 64;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriessymbolsize() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriessymbolsize() {
  _has_bits_[1] |= 0x80000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriessymbolsize() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriessymbolsize() {
  tschchartseriessymbolsize_ = 0;
  clear_has_tschchartseriessymbolsize();
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartseriessymbolsize() const {
  return tschchartseriessymbolsize_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriessymbolsize(float value) {
  set_has_tschchartseriessymbolsize();
  tschchartseriessymbolsize_ = value;
}

// optional .TSD.StrokeArchive tschchartseriessymbolstroke = 65;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriessymbolstroke() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriessymbolstroke() {
  _has_bits_[2] |= 0x00000001u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriessymbolstroke() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriessymbolstroke() {
  if (tschchartseriessymbolstroke_ != NULL) tschchartseriessymbolstroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartseriessymbolstroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesGenericPropertyMapArchive::tschchartseriessymbolstroke() const {
  return tschchartseriessymbolstroke_ != NULL ? *tschchartseriessymbolstroke_ : *default_instance_->tschchartseriessymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartseriessymbolstroke() {
  set_has_tschchartseriessymbolstroke();
  if (tschchartseriessymbolstroke_ == NULL) tschchartseriessymbolstroke_ = new ::TSD::StrokeArchive;
  return tschchartseriessymbolstroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartseriessymbolstroke() {
  clear_has_tschchartseriessymbolstroke();
  ::TSD::StrokeArchive* temp = tschchartseriessymbolstroke_;
  tschchartseriessymbolstroke_ = NULL;
  return temp;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartseriessymbolstroke(::TSD::StrokeArchive* tschchartseriessymbolstroke) {
  delete tschchartseriessymbolstroke_;
  tschchartseriessymbolstroke_ = tschchartseriessymbolstroke;
  if (tschchartseriessymbolstroke) {
    set_has_tschchartseriessymbolstroke();
  } else {
    clear_has_tschchartseriessymbolstroke();
  }
}

// optional float tschchartseriestrendlineequationopacity = 66;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlineequationopacity() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriestrendlineequationopacity() {
  _has_bits_[2] |= 0x00000002u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriestrendlineequationopacity() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlineequationopacity() {
  tschchartseriestrendlineequationopacity_ = 0;
  clear_has_tschchartseriestrendlineequationopacity();
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlineequationopacity() const {
  return tschchartseriestrendlineequationopacity_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlineequationopacity(float value) {
  set_has_tschchartseriestrendlineequationopacity();
  tschchartseriestrendlineequationopacity_ = value;
}

// optional int32 tschchartseriestrendlineequationparagraphstyleindex = 67;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlineequationparagraphstyleindex() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriestrendlineequationparagraphstyleindex() {
  _has_bits_[2] |= 0x00000004u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriestrendlineequationparagraphstyleindex() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlineequationparagraphstyleindex() {
  tschchartseriestrendlineequationparagraphstyleindex_ = 0;
  clear_has_tschchartseriestrendlineequationparagraphstyleindex();
}
inline ::google::protobuf::int32 ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlineequationparagraphstyleindex() const {
  return tschchartseriestrendlineequationparagraphstyleindex_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlineequationparagraphstyleindex(::google::protobuf::int32 value) {
  set_has_tschchartseriestrendlineequationparagraphstyleindex();
  tschchartseriestrendlineequationparagraphstyleindex_ = value;
}

// optional float tschchartseriestrendlinersquaredopacity = 68;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlinersquaredopacity() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriestrendlinersquaredopacity() {
  _has_bits_[2] |= 0x00000008u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriestrendlinersquaredopacity() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlinersquaredopacity() {
  tschchartseriestrendlinersquaredopacity_ = 0;
  clear_has_tschchartseriestrendlinersquaredopacity();
}
inline float ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlinersquaredopacity() const {
  return tschchartseriestrendlinersquaredopacity_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlinersquaredopacity(float value) {
  set_has_tschchartseriestrendlinersquaredopacity();
  tschchartseriestrendlinersquaredopacity_ = value;
}

// optional int32 tschchartseriestrendlinersquaredparagraphstyleindex = 69;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlinersquaredparagraphstyleindex() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriestrendlinersquaredparagraphstyleindex() {
  _has_bits_[2] |= 0x00000010u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriestrendlinersquaredparagraphstyleindex() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlinersquaredparagraphstyleindex() {
  tschchartseriestrendlinersquaredparagraphstyleindex_ = 0;
  clear_has_tschchartseriestrendlinersquaredparagraphstyleindex();
}
inline ::google::protobuf::int32 ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlinersquaredparagraphstyleindex() const {
  return tschchartseriestrendlinersquaredparagraphstyleindex_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriestrendlinersquaredparagraphstyleindex(::google::protobuf::int32 value) {
  set_has_tschchartseriestrendlinersquaredparagraphstyleindex();
  tschchartseriestrendlinersquaredparagraphstyleindex_ = value;
}

// optional .TSD.ShadowArchive tschchartseriestrendlineshadow = 70;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlineshadow() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriestrendlineshadow() {
  _has_bits_[2] |= 0x00000020u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriestrendlineshadow() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlineshadow() {
  if (tschchartseriestrendlineshadow_ != NULL) tschchartseriestrendlineshadow_->::TSD::ShadowArchive::Clear();
  clear_has_tschchartseriestrendlineshadow();
}
inline const ::TSD::ShadowArchive& ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlineshadow() const {
  return tschchartseriestrendlineshadow_ != NULL ? *tschchartseriestrendlineshadow_ : *default_instance_->tschchartseriestrendlineshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartseriestrendlineshadow() {
  set_has_tschchartseriestrendlineshadow();
  if (tschchartseriestrendlineshadow_ == NULL) tschchartseriestrendlineshadow_ = new ::TSD::ShadowArchive;
  return tschchartseriestrendlineshadow_;
}
inline ::TSD::ShadowArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartseriestrendlineshadow() {
  clear_has_tschchartseriestrendlineshadow();
  ::TSD::ShadowArchive* temp = tschchartseriestrendlineshadow_;
  tschchartseriestrendlineshadow_ = NULL;
  return temp;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartseriestrendlineshadow(::TSD::ShadowArchive* tschchartseriestrendlineshadow) {
  delete tschchartseriestrendlineshadow_;
  tschchartseriestrendlineshadow_ = tschchartseriestrendlineshadow;
  if (tschchartseriestrendlineshadow) {
    set_has_tschchartseriestrendlineshadow();
  } else {
    clear_has_tschchartseriestrendlineshadow();
  }
}

// optional .TSD.StrokeArchive tschchartseriestrendlinestroke = 71;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriestrendlinestroke() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriestrendlinestroke() {
  _has_bits_[2] |= 0x00000040u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriestrendlinestroke() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlinestroke() {
  if (tschchartseriestrendlinestroke_ != NULL) tschchartseriestrendlinestroke_->::TSD::StrokeArchive::Clear();
  clear_has_tschchartseriestrendlinestroke();
}
inline const ::TSD::StrokeArchive& ChartSeriesGenericPropertyMapArchive::tschchartseriestrendlinestroke() const {
  return tschchartseriestrendlinestroke_ != NULL ? *tschchartseriestrendlinestroke_ : *default_instance_->tschchartseriestrendlinestroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::mutable_tschchartseriestrendlinestroke() {
  set_has_tschchartseriestrendlinestroke();
  if (tschchartseriestrendlinestroke_ == NULL) tschchartseriestrendlinestroke_ = new ::TSD::StrokeArchive;
  return tschchartseriestrendlinestroke_;
}
inline ::TSD::StrokeArchive* ChartSeriesGenericPropertyMapArchive::release_tschchartseriestrendlinestroke() {
  clear_has_tschchartseriestrendlinestroke();
  ::TSD::StrokeArchive* temp = tschchartseriestrendlinestroke_;
  tschchartseriestrendlinestroke_ = NULL;
  return temp;
}
inline void ChartSeriesGenericPropertyMapArchive::set_allocated_tschchartseriestrendlinestroke(::TSD::StrokeArchive* tschchartseriestrendlinestroke) {
  delete tschchartseriestrendlinestroke_;
  tschchartseriestrendlinestroke_ = tschchartseriestrendlinestroke;
  if (tschchartseriestrendlinestroke) {
    set_has_tschchartseriestrendlinestroke();
  } else {
    clear_has_tschchartseriestrendlinestroke();
  }
}

// optional int32 tschchartseriesvaluelabelposition = 72;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesvaluelabelposition() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriesvaluelabelposition() {
  _has_bits_[2] |= 0x00000080u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriesvaluelabelposition() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesvaluelabelposition() {
  tschchartseriesvaluelabelposition_ = 0;
  clear_has_tschchartseriesvaluelabelposition();
}
inline ::google::protobuf::int32 ChartSeriesGenericPropertyMapArchive::tschchartseriesvaluelabelposition() const {
  return tschchartseriesvaluelabelposition_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesvaluelabelposition(::google::protobuf::int32 value) {
  set_has_tschchartseriesvaluelabelposition();
  tschchartseriesvaluelabelposition_ = value;
}

// optional bool tschchartseriesshowlabelsinfront = 73;
inline bool ChartSeriesGenericPropertyMapArchive::has_tschchartseriesshowlabelsinfront() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void ChartSeriesGenericPropertyMapArchive::set_has_tschchartseriesshowlabelsinfront() {
  _has_bits_[2] |= 0x00000100u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_has_tschchartseriesshowlabelsinfront() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesshowlabelsinfront() {
  tschchartseriesshowlabelsinfront_ = false;
  clear_has_tschchartseriesshowlabelsinfront();
}
inline bool ChartSeriesGenericPropertyMapArchive::tschchartseriesshowlabelsinfront() const {
  return tschchartseriesshowlabelsinfront_;
}
inline void ChartSeriesGenericPropertyMapArchive::set_tschchartseriesshowlabelsinfront(bool value) {
  set_has_tschchartseriesshowlabelsinfront();
  tschchartseriesshowlabelsinfront_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Generated
}  // namespace TSCH

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TSCHArchives_2eGEN_2eproto__INCLUDED
