// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCHArchives.GEN.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TSCHArchives.GEN.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TSCH {
namespace Generated {

namespace {

const ::google::protobuf::Descriptor* ChartStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartNonStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartNonStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* LegendStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LegendStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* LegendNonStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LegendNonStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartAxisStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartAxisStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartAxisNonStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartAxisNonStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartSeriesStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartSeriesStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartSeriesNonStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartSeriesNonStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartGenericPropertyMapArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartGenericPropertyMapArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* LegendGenericPropertyMapArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LegendGenericPropertyMapArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartAxisGenericPropertyMapArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartAxisGenericPropertyMapArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartSeriesGenericPropertyMapArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartSeriesGenericPropertyMapArchive_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TSCHArchives_2eGEN_2eproto() {
  protobuf_AddDesc_TSCHArchives_2eGEN_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TSCHArchives.GEN.proto");
  GOOGLE_CHECK(file != NULL);
  ChartStyleArchive_descriptor_ = file->message_type(0);
  static const int ChartStyleArchive_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefault3dchartopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfoarea3dlightingpackage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfobar3dlightingpackage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfocolumn3dlightingpackage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefault3dlightingpackage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfoline3dlightingpackage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfopie3dlightingpackage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultbackgroundfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultbackgroundstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultborderopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultbordershadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultborderstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultcombinelayers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultgridbackgroundfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultgridbackgroundopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultinterbargap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultintersetgap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultshowborder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaulttitlecolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaulttitleparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, tschchartinfodefaultdatasetnameparagraphstyleindex_),
  };
  ChartStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartStyleArchive_descriptor_,
      ChartStyleArchive::default_instance_,
      ChartStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartStyleArchive));
  ChartNonStyleArchive_descriptor_ = file->message_type(1);
  static const int ChartNonStyleArchive_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfodefault3dbarshape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfodefault3dbeveledges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfodefault3dintersetdepthgap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfodefault3drotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfoarea3dscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfobar3dscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfocolumn3dscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfodefault3dscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfoline3dscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfopie3dscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfodefault3dviewport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfodefaultpiestartangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfodefaultshowlegend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfodefaultshowtitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfodefaultskiphiddendata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfodefaulttitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfodefaultdatasetnamelocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, tschchartinfodefaultmultidatacontroltype_),
  };
  ChartNonStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartNonStyleArchive_descriptor_,
      ChartNonStyleArchive::default_instance_,
      ChartNonStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartNonStyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartNonStyleArchive));
  LegendStyleArchive_descriptor_ = file->message_type(2);
  static const int LegendStyleArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendStyleArchive, tschlegendmodeldefaultfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendStyleArchive, tschlegendmodeldefaultlabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendStyleArchive, tschlegendmodeldefaultopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendStyleArchive, tschlegendmodeldefaultshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendStyleArchive, tschlegendmodeldefaultstroke_),
  };
  LegendStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LegendStyleArchive_descriptor_,
      LegendStyleArchive::default_instance_,
      LegendStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendStyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LegendStyleArchive));
  LegendNonStyleArchive_descriptor_ = file->message_type(3);
  static const int LegendNonStyleArchive_offsets_[1] = {
  };
  LegendNonStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LegendNonStyleArchive_descriptor_,
      LegendNonStyleArchive::default_instance_,
      LegendNonStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendNonStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendNonStyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LegendNonStyleArchive));
  ChartAxisStyleArchive_descriptor_ = file->message_type(4);
  static const int ChartAxisStyleArchive_offsets_[41] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategory3dgridlineopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvalue3dgridlineopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategory3dgridlinestroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvalue3dgridlinestroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategoryhorizontalspacing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategorylabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisdefaultlabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvaluelabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategorylabelsorientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisdefaultlabelsorientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvaluelabelsorientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategorymajorgridlineopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvaluemajorgridlineopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategorymajorgridlineshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvaluemajorgridlineshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategorymajorgridlinestroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvaluemajorgridlinestroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategoryminorgridlineopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvalueminorgridlineopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategoryminorgridlineshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvalueminorgridlineshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategoryminorgridlinestroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvalueminorgridlinestroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategoryshowaxis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvalueshowaxis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategoryshowlastlabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategoryshowmajorgridlines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvalueshowmajorgridlines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategoryshowmajortickmarks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvalueshowmajortickmarks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvalueshowminimumlabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategoryshowminorgridlines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvalueshowminorgridlines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategoryshowminortickmarks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvalueshowminortickmarks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategorytickmarklocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvaluetickmarklocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategorytitleparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisdefaulttitleparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxisvaluetitleparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, tschchartaxiscategoryverticalspacing_),
  };
  ChartAxisStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartAxisStyleArchive_descriptor_,
      ChartAxisStyleArchive::default_instance_,
      ChartAxisStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisStyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartAxisStyleArchive));
  ChartAxisNonStyleArchive_descriptor_ = file->message_type(5);
  static const int ChartAxisNonStyleArchive_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisdefault3dlabelposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisdefault1_0numberformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisdefaultnumberformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisdefault1_0dateformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisdefaultdurationformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisdefaultdateformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisdefaultnumberformattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisvaluenumberofdecades_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisvaluenumberofmajorgridlines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisvaluenumberofminorgridlines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxiscategoryplottoedges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisvaluescale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxiscategoryshowlabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisdefaultshowlabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisvalueshowlabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxiscategoryshowserieslabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxismultidatashowserieslabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxiscategoryshowtitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisvalueshowtitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxiscategorytitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisvaluetitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisdefaultusermax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, tschchartaxisdefaultusermin_),
  };
  ChartAxisNonStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartAxisNonStyleArchive_descriptor_,
      ChartAxisNonStyleArchive::default_instance_,
      ChartAxisNonStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisNonStyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartAxisNonStyleArchive));
  ChartSeriesStyleArchive_descriptor_ = file->message_type(6);
  static const int ChartSeriesStyleArchive_offsets_[97] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaulterrorbarlineend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaulterrorbarlineendscatterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaulterrorbarshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaulterrorbarstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaulterrorbarstrokescatterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseries3dareafill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseries3dbarfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseries3dcolumnfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseries3dlinefill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseries3dpiefill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesareafill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesbarfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriescolumnfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaultfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedareafill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedcolumnfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriespiefill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesarealabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesbarlabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaultlabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartserieslinelabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedlabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriespielabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaultopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesareaoutsidelabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesbaroutsidelabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaultoutsidelabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedoutsidelabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriespieoutsidelabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseries3dareashadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseries3dbarshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseries3dcolumnshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseries3dlineshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseries3dpieshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesareashadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesbarshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesbubbleshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaultshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartserieslineshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedareashadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedcolumnshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedlineshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriespieshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesscattershadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesareastroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesbarstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesbubblestroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartserieslinestroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedareastroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedcolumnstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedlinestroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriespiestroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesscatterstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesareasymbolfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesbubblesymbolfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartserieslinesymbolfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedareasymbolfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedlinesymbolfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesscattersymbolfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesareasymbolfilluseseriesfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartserieslinesymbolfilluseseriesfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedareasymbolfilluseseriesfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedlinesymbolfilluseseriesfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesareasymbolfilluseseriesstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesbubblesymbolfilluseseriesstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartserieslinesymbolfilluseseriesstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedareasymbolfilluseseriesstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedlinesymbolfilluseseriesstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesscattersymbolfilluseseriesstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesareasymbolsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartserieslinesymbolsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedareasymbolsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedlinesymbolsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesscattersymbolsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesareasymbolstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesbubblesymbolstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartserieslinesymbolstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedareasymbolstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedlinesymbolstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesscattersymbolstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaulttrendlineequationopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaulttrendlineequationparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaulttrendlinersquaredopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaulttrendlineshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaulttrendlinestroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesareavaluelabelposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesbarvaluelabelposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesbubblevaluelabelposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesdefaultvaluelabelposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartserieslinevaluelabelposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedareavaluelabelposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedcolumnvaluelabelposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesmixedlinevaluelabelposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesscattervaluelabelposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesstackedareavaluelabelposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, tschchartseriesstackedbarvaluelabelposition_),
  };
  ChartSeriesStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartSeriesStyleArchive_descriptor_,
      ChartSeriesStyleArchive::default_instance_,
      ChartSeriesStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesStyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartSeriesStyleArchive));
  ChartSeriesNonStyleArchive_descriptor_ = file->message_type(7);
  static const int ChartSeriesNonStyleArchive_offsets_[75] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesbubbleadjustmentscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarcustomnegativedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarcustomnegativedatascatterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarcustompositivedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarcustompositivedatascatterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarfixedvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarfixedvaluescatterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarpercentvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarpercentvaluescatterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarsetting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarsettingscatterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarstddevvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbarstddevvaluescatterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbartype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulterrorbartypescatterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriespielabelexplosion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesbubblelinetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartserieslinelinetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesmixedlinelinetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesscatterlinetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefault1_0numberformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaultnumberformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefault1_0dateformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaultdurationformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaultdateformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriespie1_0numberformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriespienumberformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaultnumberformattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriespienumberformattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesstackedpercentnumberformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaultseriestype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaultshowerrorbar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaultshowerrorbarscatterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesscattershowline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesbubbleshownegativedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriespieshowserieslabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesareashowsymbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartserieslineshowsymbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesmixedareashowsymbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesmixedlineshowsymbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesscattershowsymbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaultshowtrendline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesareashowvaluelabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesbarshowvaluelabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesbubbleshowvaluelabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaultshowvaluelabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartserieslineshowvaluelabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesmixedshowvaluelabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriespieshowvaluelabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesscattershowvaluelabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesbubblesizedimension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesareasymboltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartserieslinesymboltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesmixedareasymboltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesmixedlinesymboltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesscattersymboltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlineequationoffsetx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlineequationoffsety_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlinelabelstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlineorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlineperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlinersquaredoffsetx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlinersquaredoffsety_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlineshowequation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlineshowlabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlineshowr2value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaulttrendlinetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriespiewedgeexplosion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaultyaxisordinal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesbubbleshowserieslabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesbubblevaluelabelsaxis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesscattershowserieslabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesscattervaluelabelsaxis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesdefaultshowlabelsinfront_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, tschchartseriesbubbleshowlabelsinfront_),
  };
  ChartSeriesNonStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartSeriesNonStyleArchive_descriptor_,
      ChartSeriesNonStyleArchive::default_instance_,
      ChartSeriesNonStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesNonStyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartSeriesNonStyleArchive));
  ChartGenericPropertyMapArchive_descriptor_ = file->message_type(8);
  static const int ChartGenericPropertyMapArchive_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGenericPropertyMapArchive, tschchartinfo3dbarshape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGenericPropertyMapArchive, tschchartinfo3dbeveledges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGenericPropertyMapArchive, tschchartinfo3dintersetdepthgap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGenericPropertyMapArchive, tschchartinfo3drotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGenericPropertyMapArchive, tschchartinfo3dscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGenericPropertyMapArchive, tschchartinfo3dviewport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGenericPropertyMapArchive, tschchartinfopiestartangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGenericPropertyMapArchive, tschchartinfoshowlegend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGenericPropertyMapArchive, tschchartinfoshowtitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGenericPropertyMapArchive, tschchartinfoskiphiddendata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGenericPropertyMapArchive, tschchartinfotitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGenericPropertyMapArchive, tschchartinfodatasetnamelocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGenericPropertyMapArchive, tschchartinfomultidatacontroltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGenericPropertyMapArchive, tschchartinfo3dchartopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGenericPropertyMapArchive, tschchartinfo3dlightingpackage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGenericPropertyMapArchive, tschchartinfobackgroundfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGenericPropertyMapArchive, tschchartinfobackgroundstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGenericPropertyMapArchive, tschchartinfoborderopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGenericPropertyMapArchive, tschchartinfobordershadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGenericPropertyMapArchive, tschchartinfoborderstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGenericPropertyMapArchive, tschchartinfocombinelayers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGenericPropertyMapArchive, tschchartinfogridbackgroundfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGenericPropertyMapArchive, tschchartinfogridbackgroundopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGenericPropertyMapArchive, tschchartinfointerbargap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGenericPropertyMapArchive, tschchartinfointersetgap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGenericPropertyMapArchive, tschchartinfoshowborder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGenericPropertyMapArchive, tschchartinfotitlecolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGenericPropertyMapArchive, tschchartinfotitleparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGenericPropertyMapArchive, tschchartinfodatasetnameparagraphstyleindex_),
  };
  ChartGenericPropertyMapArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartGenericPropertyMapArchive_descriptor_,
      ChartGenericPropertyMapArchive::default_instance_,
      ChartGenericPropertyMapArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGenericPropertyMapArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGenericPropertyMapArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartGenericPropertyMapArchive));
  LegendGenericPropertyMapArchive_descriptor_ = file->message_type(9);
  static const int LegendGenericPropertyMapArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendGenericPropertyMapArchive, tschlegendmodelfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendGenericPropertyMapArchive, tschlegendmodellabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendGenericPropertyMapArchive, tschlegendmodelopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendGenericPropertyMapArchive, tschlegendmodelshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendGenericPropertyMapArchive, tschlegendmodelstroke_),
  };
  LegendGenericPropertyMapArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LegendGenericPropertyMapArchive_descriptor_,
      LegendGenericPropertyMapArchive::default_instance_,
      LegendGenericPropertyMapArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendGenericPropertyMapArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegendGenericPropertyMapArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LegendGenericPropertyMapArchive));
  ChartAxisGenericPropertyMapArchive_descriptor_ = file->message_type(10);
  static const int ChartAxisGenericPropertyMapArchive_offsets_[39] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxis3dlabelposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxis1_0numberformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxisnumberformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxis1_0dateformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxisdurationformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxisdateformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxisnumberformattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxisnumberofdecades_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxisnumberofmajorgridlines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxisnumberofminorgridlines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxisplottoedges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxisscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxisshowlabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxisshowserieslabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxisshowtitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxistitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxisusermax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxisusermin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxis3dgridlineopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxis3dgridlinestroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxishorizontalspacing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxislabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxislabelsorientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxismajorgridlineopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxismajorgridlineshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxismajorgridlinestroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxisminorgridlineopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxisminorgridlineshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxisminorgridlinestroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxisshowaxis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxisshowlastlabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxisshowmajorgridlines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxisshowmajortickmarks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxisshowminimumlabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxisshowminorgridlines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxisshowminortickmarks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxistickmarklocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxistitleparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, tschchartaxisverticalspacing_),
  };
  ChartAxisGenericPropertyMapArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartAxisGenericPropertyMapArchive_descriptor_,
      ChartAxisGenericPropertyMapArchive::default_instance_,
      ChartAxisGenericPropertyMapArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartAxisGenericPropertyMapArchive));
  ChartSeriesGenericPropertyMapArchive_descriptor_ = file->message_type(11);
  static const int ChartSeriesGenericPropertyMapArchive_offsets_[73] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriesadjustmentscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarcustomnegativedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarcustomnegativedatascatterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarcustompositivedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarcustompositivedatascatterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarfixedvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarfixedvaluescatterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarpercentvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarpercentvaluescatterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarsetting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarsettingscatterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarstddevvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarstddevvaluescatterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbartype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbartypescatterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartserieslabelexplosion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartserieslinetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseries1_0numberformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriesnumberformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseries1_0dateformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriesdurationformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriesdateformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriesnumberformattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriespercentnumberformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriesseriestype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriesshowerrorbar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriesshowerrorbarscatterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriesshowline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriesshownegativedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriesshowserieslabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriesshowsymbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriesshowtrendline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriesshowvaluelabels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriessizedimension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriessymboltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlineequationoffsetx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlineequationoffsety_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlinelabelstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlineorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlineperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlinersquaredoffsetx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlinersquaredoffsety_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlineshowequation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlineshowlabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlineshowr2value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlinetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartserieswedgeexplosion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriesyaxisordinal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriesvaluelabelsaxis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarlineend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarlineendscatterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartserieserrorbarstrokescatterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriesfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartserieslabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriesopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriesoutsidelabelparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriesshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriesstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriessymbolfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriessymbolfilluseseriesfill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriessymbolfilluseseriesstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriessymbolsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriessymbolstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlineequationopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlineequationparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlinersquaredopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlinersquaredparagraphstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlineshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriestrendlinestroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriesvaluelabelposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, tschchartseriesshowlabelsinfront_),
  };
  ChartSeriesGenericPropertyMapArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartSeriesGenericPropertyMapArchive_descriptor_,
      ChartSeriesGenericPropertyMapArchive::default_instance_,
      ChartSeriesGenericPropertyMapArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartSeriesGenericPropertyMapArchive));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TSCHArchives_2eGEN_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartStyleArchive_descriptor_, &ChartStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartNonStyleArchive_descriptor_, &ChartNonStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LegendStyleArchive_descriptor_, &LegendStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LegendNonStyleArchive_descriptor_, &LegendNonStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartAxisStyleArchive_descriptor_, &ChartAxisStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartAxisNonStyleArchive_descriptor_, &ChartAxisNonStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartSeriesStyleArchive_descriptor_, &ChartSeriesStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartSeriesNonStyleArchive_descriptor_, &ChartSeriesNonStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartGenericPropertyMapArchive_descriptor_, &ChartGenericPropertyMapArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LegendGenericPropertyMapArchive_descriptor_, &LegendGenericPropertyMapArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartAxisGenericPropertyMapArchive_descriptor_, &ChartAxisGenericPropertyMapArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartSeriesGenericPropertyMapArchive_descriptor_, &ChartSeriesGenericPropertyMapArchive::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TSCHArchives_2eGEN_2eproto() {
  delete ChartStyleArchive::default_instance_;
  delete ChartStyleArchive_reflection_;
  delete ChartNonStyleArchive::default_instance_;
  delete ChartNonStyleArchive_reflection_;
  delete LegendStyleArchive::default_instance_;
  delete LegendStyleArchive_reflection_;
  delete LegendNonStyleArchive::default_instance_;
  delete LegendNonStyleArchive_reflection_;
  delete ChartAxisStyleArchive::default_instance_;
  delete ChartAxisStyleArchive_reflection_;
  delete ChartAxisNonStyleArchive::default_instance_;
  delete ChartAxisNonStyleArchive_reflection_;
  delete ChartSeriesStyleArchive::default_instance_;
  delete ChartSeriesStyleArchive_reflection_;
  delete ChartSeriesNonStyleArchive::default_instance_;
  delete ChartSeriesNonStyleArchive_reflection_;
  delete ChartGenericPropertyMapArchive::default_instance_;
  delete ChartGenericPropertyMapArchive_reflection_;
  delete LegendGenericPropertyMapArchive::default_instance_;
  delete LegendGenericPropertyMapArchive_reflection_;
  delete ChartAxisGenericPropertyMapArchive::default_instance_;
  delete ChartAxisGenericPropertyMapArchive_reflection_;
  delete ChartSeriesGenericPropertyMapArchive::default_instance_;
  delete ChartSeriesGenericPropertyMapArchive_reflection_;
}

void protobuf_AddDesc_TSCHArchives_2eGEN_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::TSP::protobuf_AddDesc_TSPMessages_2eproto();
  ::TSK::protobuf_AddDesc_TSKArchives_2eproto();
  ::TSD::protobuf_AddDesc_TSDArchives_2eproto();
  ::TSS::protobuf_AddDesc_TSSArchives_2eproto();
  ::TSCH::protobuf_AddDesc_TSCHArchives_2eCommon_2eproto();
  ::TSCH::protobuf_AddDesc_TSCH3DArchives_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026TSCHArchives.GEN.proto\022\016TSCH.Generated"
    "\032\021TSPMessages.proto\032\021TSKArchives.proto\032\021"
    "TSDArchives.proto\032\021TSSArchives.proto\032\031TS"
    "CHArchives.Common.proto\032\024TSCH3DArchives."
    "proto\"\335\n\n\021ChartStyleArchive\022*\n\"tschchart"
    "infodefault3dchartopacity\030\001 \001(\002\022O\n\"tschc"
    "hartinfoarea3dlightingpackage\030\002 \001(\0132#.TS"
    "CH.Chart3DLightingPackageArchive\022N\n!tsch"
    "chartinfobar3dlightingpackage\030\003 \001(\0132#.TS"
    "CH.Chart3DLightingPackageArchive\022Q\n$tsch"
    "chartinfocolumn3dlightingpackage\030\004 \001(\0132#"
    ".TSCH.Chart3DLightingPackageArchive\022R\n%t"
    "schchartinfodefault3dlightingpackage\030\005 \001"
    "(\0132#.TSCH.Chart3DLightingPackageArchive\022"
    "O\n\"tschchartinfoline3dlightingpackage\030\006 "
    "\001(\0132#.TSCH.Chart3DLightingPackageArchive"
    "\022N\n!tschchartinfopie3dlightingpackage\030\007 "
    "\001(\0132#.TSCH.Chart3DLightingPackageArchive"
    "\022<\n\"tschchartinfodefaultbackgroundfill\030\010"
    " \001(\0132\020.TSD.FillArchive\022@\n$tschchartinfod"
    "efaultbackgroundstroke\030\t \001(\0132\022.TSD.Strok"
    "eArchive\022)\n!tschchartinfodefaultborderop"
    "acity\030\n \001(\002\022<\n tschchartinfodefaultborde"
    "rshadow\030\013 \001(\0132\022.TSD.ShadowArchive\022<\n tsc"
    "hchartinfodefaultborderstroke\030\014 \001(\0132\022.TS"
    "D.StrokeArchive\022)\n!tschchartinfodefaultc"
    "ombinelayers\030\r \001(\010\022@\n&tschchartinfodefau"
    "ltgridbackgroundfill\030\016 \001(\0132\020.TSD.FillArc"
    "hive\0221\n)tschchartinfodefaultgridbackgrou"
    "ndopacity\030\017 \001(\002\022\'\n\037tschchartinfodefaulti"
    "nterbargap\030\020 \001(\002\022\'\n\037tschchartinfodefault"
    "intersetgap\030\021 \001(\002\022&\n\036tschchartinfodefaul"
    "tshowborder\030\022 \001(\010\0222\n\036tschchartinfodefaul"
    "ttitlecolor\030\023 \001(\0132\n.TSP.Color\0224\n,tschcha"
    "rtinfodefaulttitleparagraphstyleindex\030\024 "
    "\001(\005\022:\n2tschchartinfodefaultdatasetnamepa"
    "ragraphstyleindex\030\025 \001(\0052L\n\007current\022\027.TSC"
    "H.ChartStyleArchive\030\220N \001(\0132!.TSCH.Genera"
    "ted.ChartStyleArchive\"\227\010\n\024ChartNonStyleA"
    "rchive\022&\n\036tschchartinfodefault3dbarshape"
    "\030\001 \001(\005\022(\n tschchartinfodefault3dbeveledg"
    "es\030\002 \001(\010\022.\n&tschchartinfodefault3dinters"
    "etdepthgap\030\003 \001(\002\022B\n\036tschchartinfodefault"
    "3drotation\030\004 \001(\0132\032.TSCH.Chart3DVectorArc"
    "hive\022<\n\030tschchartinfoarea3dscale\030\005 \001(\0132\032"
    ".TSCH.Chart3DVectorArchive\022;\n\027tschcharti"
    "nfobar3dscale\030\006 \001(\0132\032.TSCH.Chart3DVector"
    "Archive\022>\n\032tschchartinfocolumn3dscale\030\007 "
    "\001(\0132\032.TSCH.Chart3DVectorArchive\022\?\n\033tschc"
    "hartinfodefault3dscale\030\010 \001(\0132\032.TSCH.Char"
    "t3DVectorArchive\022<\n\030tschchartinfoline3ds"
    "cale\030\t \001(\0132\032.TSCH.Chart3DVectorArchive\022;"
    "\n\027tschchartinfopie3dscale\030\n \001(\0132\032.TSCH.C"
    "hart3DVectorArchive\022B\n\036tschchartinfodefa"
    "ult3dviewport\030\013 \001(\0132\032.TSCH.Chart3DVector"
    "Archive\022)\n!tschchartinfodefaultpiestarta"
    "ngle\030\023 \001(\002\022&\n\036tschchartinfodefaultshowle"
    "gend\030\024 \001(\010\022%\n\035tschchartinfodefaultshowti"
    "tle\030\025 \001(\010\022*\n\"tschchartinfodefaultskiphid"
    "dendata\030\026 \001(\010\022!\n\031tschchartinfodefaulttit"
    "le\030\027 \001(\t\022/\n\'tschchartinfodefaultdatasetn"
    "amelocation\030\030 \001(\005\0220\n(tschchartinfodefaul"
    "tmultidatacontroltype\030\031 \001(\0052R\n\007current\022\032"
    ".TSCH.ChartNonStyleArchive\030\220N \001(\0132$.TSCH"
    ".Generated.ChartNonStyleArchive\"\355\002\n\022Lege"
    "ndStyleArchive\0224\n\032tschlegendmodeldefault"
    "fill\030\001 \001(\0132\020.TSD.FillArchive\0226\n.tschlege"
    "ndmodeldefaultlabelparagraphstyleindex\030\002"
    " \001(\005\022%\n\035tschlegendmodeldefaultopacity\030\003 "
    "\001(\002\0228\n\034tschlegendmodeldefaultshadow\030\004 \001("
    "\0132\022.TSD.ShadowArchive\0228\n\034tschlegendmodel"
    "defaultstroke\030\005 \001(\0132\022.TSD.StrokeArchive2"
    "N\n\007current\022\030.TSCH.LegendStyleArchive\030\220N "
    "\001(\0132\".TSCH.Generated.LegendStyleArchive\""
    "m\n\025LegendNonStyleArchive2T\n\007current\022\033.TS"
    "CH.LegendNonStyleArchive\030\220N \001(\0132%.TSCH.G"
    "enerated.LegendNonStyleArchive\"\335\021\n\025Chart"
    "AxisStyleArchive\022.\n&tschchartaxiscategor"
    "y3dgridlineopacity\030\001 \001(\002\022+\n#tschchartaxi"
    "svalue3dgridlineopacity\030\002 \001(\002\022A\n%tschcha"
    "rtaxiscategory3dgridlinestroke\030\003 \001(\0132\022.T"
    "SD.StrokeArchive\022>\n\"tschchartaxisvalue3d"
    "gridlinestroke\030\004 \001(\0132\022.TSD.StrokeArchive"
    "\022.\n&tschchartaxiscategoryhorizontalspaci"
    "ng\030\005 \001(\005\0225\n-tschchartaxiscategorylabelpa"
    "ragraphstyleindex\030\006 \001(\005\0224\n,tschchartaxis"
    "defaultlabelparagraphstyleindex\030\007 \001(\005\0222\n"
    "*tschchartaxisvaluelabelparagraphstylein"
    "dex\030\010 \001(\005\022.\n&tschchartaxiscategorylabels"
    "orientation\030\t \001(\002\022-\n%tschchartaxisdefaul"
    "tlabelsorientation\030\n \001(\002\022+\n#tschchartaxi"
    "svaluelabelsorientation\030\013 \001(\002\0221\n)tschcha"
    "rtaxiscategorymajorgridlineopacity\030\014 \001(\002"
    "\022.\n&tschchartaxisvaluemajorgridlineopaci"
    "ty\030\r \001(\002\022D\n(tschchartaxiscategorymajorgr"
    "idlineshadow\030\016 \001(\0132\022.TSD.ShadowArchive\022A"
    "\n%tschchartaxisvaluemajorgridlineshadow\030"
    "\017 \001(\0132\022.TSD.ShadowArchive\022D\n(tschchartax"
    "iscategorymajorgridlinestroke\030\020 \001(\0132\022.TS"
    "D.StrokeArchive\022A\n%tschchartaxisvaluemaj"
    "orgridlinestroke\030\021 \001(\0132\022.TSD.StrokeArchi"
    "ve\0221\n)tschchartaxiscategoryminorgridline"
    "opacity\030\022 \001(\002\022.\n&tschchartaxisvalueminor"
    "gridlineopacity\030\023 \001(\002\022D\n(tschchartaxisca"
    "tegoryminorgridlineshadow\030\024 \001(\0132\022.TSD.Sh"
    "adowArchive\022A\n%tschchartaxisvalueminorgr"
    "idlineshadow\030\025 \001(\0132\022.TSD.ShadowArchive\022D"
    "\n(tschchartaxiscategoryminorgridlinestro"
    "ke\030\026 \001(\0132\022.TSD.StrokeArchive\022A\n%tschchar"
    "taxisvalueminorgridlinestroke\030\027 \001(\0132\022.TS"
    "D.StrokeArchive\022%\n\035tschchartaxiscategory"
    "showaxis\030\030 \001(\010\022\"\n\032tschchartaxisvalueshow"
    "axis\030\031 \001(\010\022*\n\"tschchartaxiscategoryshowl"
    "astlabel\030\032 \001(\010\022/\n\'tschchartaxiscategorys"
    "howmajorgridlines\030\033 \001(\010\022,\n$tschchartaxis"
    "valueshowmajorgridlines\030\034 \001(\010\022/\n\'tschcha"
    "rtaxiscategoryshowmajortickmarks\030\035 \001(\010\022,"
    "\n$tschchartaxisvalueshowmajortickmarks\030\036"
    " \001(\010\022*\n\"tschchartaxisvalueshowminimumlab"
    "el\030\037 \001(\010\022/\n\'tschchartaxiscategoryshowmin"
    "orgridlines\030  \001(\010\022,\n$tschchartaxisvalues"
    "howminorgridlines\030! \001(\010\022/\n\'tschchartaxis"
    "categoryshowminortickmarks\030\" \001(\010\022,\n$tsch"
    "chartaxisvalueshowminortickmarks\030# \001(\010\022-"
    "\n%tschchartaxiscategorytickmarklocation\030"
    "$ \001(\005\022*\n\"tschchartaxisvaluetickmarklocat"
    "ion\030% \001(\005\0225\n-tschchartaxiscategorytitlep"
    "aragraphstyleindex\030& \001(\005\0224\n,tschchartaxi"
    "sdefaulttitleparagraphstyleindex\030\' \001(\005\0222"
    "\n*tschchartaxisvaluetitleparagraphstylei"
    "ndex\030( \001(\005\022,\n$tschchartaxiscategoryverti"
    "calspacing\030) \001(\0052T\n\007current\022\033.TSCH.Chart"
    "AxisStyleArchive\030\220N \001(\0132%.TSCH.Generated"
    ".ChartAxisStyleArchive\"\373\t\n\030ChartAxisNonS"
    "tyleArchive\022+\n#tschchartaxisdefault3dlab"
    "elposition\030\001 \001(\005\022E\n#tschchartaxisdefault"
    "1_0numberformat\030\002 \001(\0132\030.TSK.FormatStruct"
    "Archive\022B\n tschchartaxisdefaultnumberfor"
    "mat\030* \001(\0132\030.TSK.FormatStructArchive\022C\n!t"
    "schchartaxisdefault1_0dateformat\030\024 \001(\0132\030"
    ".TSK.FormatStructArchive\022D\n\"tschchartaxi"
    "sdefaultdurationformat\030\025 \001(\0132\030.TSK.Forma"
    "tStructArchive\022@\n\036tschchartaxisdefaultda"
    "teformat\030\026 \001(\0132\030.TSK.FormatStructArchive"
    "\022,\n$tschchartaxisdefaultnumberformattype"
    "\030\003 \001(\005\022)\n!tschchartaxisvaluenumberofdeca"
    "des\030\004 \001(\005\0220\n(tschchartaxisvaluenumberofm"
    "ajorgridlines\030\005 \001(\005\0220\n(tschchartaxisvalu"
    "enumberofminorgridlines\030\006 \001(\005\022(\n tschcha"
    "rtaxiscategoryplottoedges\030\007 \001(\010\022\037\n\027tschc"
    "hartaxisvaluescale\030\010 \001(\005\022\'\n\037tschchartaxi"
    "scategoryshowlabels\030\t \001(\010\022&\n\036tschchartax"
    "isdefaultshowlabels\030\n \001(\010\022$\n\034tschchartax"
    "isvalueshowlabels\030\013 \001(\010\022-\n%tschchartaxis"
    "categoryshowserieslabels\030\014 \001(\010\022.\n&tschch"
    "artaxismultidatashowserieslabels\030\023 \001(\010\022&"
    "\n\036tschchartaxiscategoryshowtitle\030\r \001(\010\022#"
    "\n\033tschchartaxisvalueshowtitle\030\016 \001(\010\022\"\n\032t"
    "schchartaxiscategorytitle\030\017 \001(\t\022\037\n\027tschc"
    "hartaxisvaluetitle\030\020 \001(\t\022F\n\033tschchartaxi"
    "sdefaultusermax\030\021 \001(\0132!.TSCH.ChartsNSNum"
    "berDoubleArchive\022F\n\033tschchartaxisdefault"
    "usermin\030\022 \001(\0132!.TSCH.ChartsNSNumberDoubl"
    "eArchive2Z\n\007current\022\036.TSCH.ChartAxisNonS"
    "tyleArchive\030\220N \001(\0132(.TSCH.Generated.Char"
    "tAxisNonStyleArchive\"\307+\n\027ChartSeriesStyl"
    "eArchive\022B\n%tschchartseriesdefaulterrorb"
    "arlineend\030\001 \001(\0132\023.TSD.LineEndArchive\022J\n-"
    "tschchartseriesdefaulterrorbarlineendsca"
    "tterx\030\002 \001(\0132\023.TSD.LineEndArchive\022@\n$tsch"
    "chartseriesdefaulterrorbarshadow\030\003 \001(\0132\022"
    ".TSD.ShadowArchive\022@\n$tschchartseriesdef"
    "aulterrorbarstroke\030\004 \001(\0132\022.TSD.StrokeArc"
    "hive\022H\n,tschchartseriesdefaulterrorbarst"
    "rokescatterx\030\005 \001(\0132\022.TSD.StrokeArchive\0223"
    "\n\031tschchartseries3dareafill\030\006 \001(\0132\020.TSD."
    "FillArchive\0222\n\030tschchartseries3dbarfill\030"
    "\007 \001(\0132\020.TSD.FillArchive\0225\n\033tschchartseri"
    "es3dcolumnfill\030\010 \001(\0132\020.TSD.FillArchive\0223"
    "\n\031tschchartseries3dlinefill\030\t \001(\0132\020.TSD."
    "FillArchive\0222\n\030tschchartseries3dpiefill\030"
    "\n \001(\0132\020.TSD.FillArchive\0221\n\027tschchartseri"
    "esareafill\030\013 \001(\0132\020.TSD.FillArchive\0220\n\026ts"
    "chchartseriesbarfill\030\014 \001(\0132\020.TSD.FillArc"
    "hive\0223\n\031tschchartseriescolumnfill\030\r \001(\0132"
    "\020.TSD.FillArchive\0224\n\032tschchartseriesdefa"
    "ultfill\030\016 \001(\0132\020.TSD.FillArchive\0226\n\034tschc"
    "hartseriesmixedareafill\030\017 \001(\0132\020.TSD.Fill"
    "Archive\0228\n\036tschchartseriesmixedcolumnfil"
    "l\030\020 \001(\0132\020.TSD.FillArchive\0220\n\026tschchartse"
    "riespiefill\030\021 \001(\0132\020.TSD.FillArchive\0223\n+t"
    "schchartseriesarealabelparagraphstyleind"
    "ex\030\022 \001(\005\0222\n*tschchartseriesbarlabelparag"
    "raphstyleindex\030\023 \001(\005\0226\n.tschchartseriesd"
    "efaultlabelparagraphstyleindex\030\024 \001(\005\0223\n+"
    "tschchartserieslinelabelparagraphstylein"
    "dex\030\025 \001(\005\0224\n,tschchartseriesmixedlabelpa"
    "ragraphstyleindex\030\026 \001(\005\0222\n*tschchartseri"
    "espielabelparagraphstyleindex\030\027 \001(\005\022%\n\035t"
    "schchartseriesdefaultopacity\030\030 \001(\002\022:\n2ts"
    "chchartseriesareaoutsidelabelparagraphst"
    "yleindex\030\031 \001(\005\0229\n1tschchartseriesbarouts"
    "idelabelparagraphstyleindex\030\032 \001(\005\022=\n5tsc"
    "hchartseriesdefaultoutsidelabelparagraph"
    "styleindex\030\033 \001(\005\022;\n3tschchartseriesmixed"
    "outsidelabelparagraphstyleindex\030\034 \001(\005\0229\n"
    "1tschchartseriespieoutsidelabelparagraph"
    "styleindex\030\035 \001(\005\0227\n\033tschchartseries3dare"
    "ashadow\030\036 \001(\0132\022.TSD.ShadowArchive\0226\n\032tsc"
    "hchartseries3dbarshadow\030\037 \001(\0132\022.TSD.Shad"
    "owArchive\0229\n\035tschchartseries3dcolumnshad"
    "ow\030  \001(\0132\022.TSD.ShadowArchive\0227\n\033tschchar"
    "tseries3dlineshadow\030! \001(\0132\022.TSD.ShadowAr"
    "chive\0226\n\032tschchartseries3dpieshadow\030\" \001("
    "\0132\022.TSD.ShadowArchive\0225\n\031tschchartseries"
    "areashadow\030# \001(\0132\022.TSD.ShadowArchive\0224\n\030"
    "tschchartseriesbarshadow\030$ \001(\0132\022.TSD.Sha"
    "dowArchive\0227\n\033tschchartseriesbubbleshado"
    "w\030% \001(\0132\022.TSD.ShadowArchive\0228\n\034tschchart"
    "seriesdefaultshadow\030& \001(\0132\022.TSD.ShadowAr"
    "chive\0225\n\031tschchartserieslineshadow\030\' \001(\013"
    "2\022.TSD.ShadowArchive\022:\n\036tschchartseriesm"
    "ixedareashadow\030( \001(\0132\022.TSD.ShadowArchive"
    "\022<\n tschchartseriesmixedcolumnshadow\030) \001"
    "(\0132\022.TSD.ShadowArchive\022:\n\036tschchartserie"
    "smixedlineshadow\030* \001(\0132\022.TSD.ShadowArchi"
    "ve\0224\n\030tschchartseriespieshadow\030+ \001(\0132\022.T"
    "SD.ShadowArchive\0228\n\034tschchartseriesscatt"
    "ershadow\030, \001(\0132\022.TSD.ShadowArchive\0225\n\031ts"
    "chchartseriesareastroke\030- \001(\0132\022.TSD.Stro"
    "keArchive\0224\n\030tschchartseriesbarstroke\030. "
    "\001(\0132\022.TSD.StrokeArchive\0227\n\033tschchartseri"
    "esbubblestroke\030/ \001(\0132\022.TSD.StrokeArchive"
    "\0225\n\031tschchartserieslinestroke\0300 \001(\0132\022.TS"
    "D.StrokeArchive\022:\n\036tschchartseriesmixeda"
    "reastroke\0301 \001(\0132\022.TSD.StrokeArchive\022<\n t"
    "schchartseriesmixedcolumnstroke\0302 \001(\0132\022."
    "TSD.StrokeArchive\022:\n\036tschchartseriesmixe"
    "dlinestroke\0303 \001(\0132\022.TSD.StrokeArchive\0224\n"
    "\030tschchartseriespiestroke\0304 \001(\0132\022.TSD.St"
    "rokeArchive\0228\n\034tschchartseriesscatterstr"
    "oke\0305 \001(\0132\022.TSD.StrokeArchive\0227\n\035tschcha"
    "rtseriesareasymbolfill\0306 \001(\0132\020.TSD.FillA"
    "rchive\0229\n\037tschchartseriesbubblesymbolfil"
    "l\0307 \001(\0132\020.TSD.FillArchive\0227\n\035tschchartse"
    "rieslinesymbolfill\0308 \001(\0132\020.TSD.FillArchi"
    "ve\022<\n\"tschchartseriesmixedareasymbolfill"
    "\0309 \001(\0132\020.TSD.FillArchive\022<\n\"tschchartser"
    "iesmixedlinesymbolfill\030: \001(\0132\020.TSD.FillA"
    "rchive\022:\n tschchartseriesscattersymbolfi"
    "ll\030; \001(\0132\020.TSD.FillArchive\0222\n*tschcharts"
    "eriesareasymbolfilluseseriesfill\030< \001(\010\0222"
    "\n*tschchartserieslinesymbolfilluseseries"
    "fill\030= \001(\010\0227\n/tschchartseriesmixedareasy"
    "mbolfilluseseriesfill\030> \001(\010\0227\n/tschchart"
    "seriesmixedlinesymbolfilluseseriesfill\030\?"
    " \001(\010\0224\n,tschchartseriesareasymbolfilluse"
    "seriesstroke\030@ \001(\010\0226\n.tschchartseriesbub"
    "blesymbolfilluseseriesstroke\030A \001(\010\0224\n,ts"
    "chchartserieslinesymbolfilluseseriesstro"
    "ke\030B \001(\010\0229\n1tschchartseriesmixedareasymb"
    "olfilluseseriesstroke\030C \001(\010\0229\n1tschchart"
    "seriesmixedlinesymbolfilluseseriesstroke"
    "\030D \001(\010\0227\n/tschchartseriesscattersymbolfi"
    "lluseseriesstroke\030E \001(\010\022%\n\035tschchartseri"
    "esareasymbolsize\030F \001(\002\022%\n\035tschchartserie"
    "slinesymbolsize\030G \001(\002\022*\n\"tschchartseries"
    "mixedareasymbolsize\030H \001(\002\022*\n\"tschchartse"
    "riesmixedlinesymbolsize\030I \001(\002\022(\n tschcha"
    "rtseriesscattersymbolsize\030J \001(\002\022;\n\037tschc"
    "hartseriesareasymbolstroke\030K \001(\0132\022.TSD.S"
    "trokeArchive\022=\n!tschchartseriesbubblesym"
    "bolstroke\030L \001(\0132\022.TSD.StrokeArchive\022;\n\037t"
    "schchartserieslinesymbolstroke\030M \001(\0132\022.T"
    "SD.StrokeArchive\022@\n$tschchartseriesmixed"
    "areasymbolstroke\030N \001(\0132\022.TSD.StrokeArchi"
    "ve\022@\n$tschchartseriesmixedlinesymbolstro"
    "ke\030O \001(\0132\022.TSD.StrokeArchive\022>\n\"tschchar"
    "tseriesscattersymbolstroke\030P \001(\0132\022.TSD.S"
    "trokeArchive\0226\n.tschchartseriesdefaulttr"
    "endlineequationopacity\030Q \001(\002\022B\n:tschchar"
    "tseriesdefaulttrendlineequationparagraph"
    "styleindex\030R \001(\005\0226\n.tschchartseriesdefau"
    "lttrendlinersquaredopacity\030S \001(\002\022B\n:tsch"
    "chartseriesdefaulttrendlinersquaredparag"
    "raphstyleindex\030T \001(\005\022A\n%tschchartseriesd"
    "efaulttrendlineshadow\030U \001(\0132\022.TSD.Shadow"
    "Archive\022A\n%tschchartseriesdefaulttrendli"
    "nestroke\030V \001(\0132\022.TSD.StrokeArchive\022-\n%ts"
    "chchartseriesareavaluelabelposition\030W \001("
    "\005\022,\n$tschchartseriesbarvaluelabelpositio"
    "n\030X \001(\005\022/\n\'tschchartseriesbubblevaluelab"
    "elposition\030Y \001(\005\0220\n(tschchartseriesdefau"
    "ltvaluelabelposition\030Z \001(\005\022-\n%tschcharts"
    "erieslinevaluelabelposition\030[ \001(\005\0222\n*tsc"
    "hchartseriesmixedareavaluelabelposition\030"
    "\\ \001(\005\0224\n,tschchartseriesmixedcolumnvalue"
    "labelposition\030] \001(\005\0222\n*tschchartseriesmi"
    "xedlinevaluelabelposition\030^ \001(\005\0220\n(tschc"
    "hartseriesscattervaluelabelposition\030_ \001("
    "\005\0224\n,tschchartseriesstackedareavaluelabe"
    "lposition\030` \001(\005\0223\n+tschchartseriesstacke"
    "dbarvaluelabelposition\030a \001(\0052X\n\007current\022"
    "\035.TSCH.ChartSeriesStyleArchive\030\220N \001(\0132\'."
    "TSCH.Generated.ChartSeriesStyleArchive\"\325"
    "\037\n\032ChartSeriesNonStyleArchive\022,\n$tschcha"
    "rtseriesbubbleadjustmentscale\030\001 \001(\002\022d\n0t"
    "schchartseriesdefaulterrorbarcustomnegat"
    "ivedata\030\002 \001(\0132*.TSCH.ChartsNSArrayOfNSNu"
    "mberDoubleArchive\022l\n8tschchartseriesdefa"
    "ulterrorbarcustomnegativedatascatterx\030\003 "
    "\001(\0132*.TSCH.ChartsNSArrayOfNSNumberDouble"
    "Archive\022d\n0tschchartseriesdefaulterrorba"
    "rcustompositivedata\030\004 \001(\0132*.TSCH.ChartsN"
    "SArrayOfNSNumberDoubleArchive\022l\n8tschcha"
    "rtseriesdefaulterrorbarcustompositivedat"
    "ascatterx\030\005 \001(\0132*.TSCH.ChartsNSArrayOfNS"
    "NumberDoubleArchive\0220\n(tschchartseriesde"
    "faulterrorbarfixedvalue\030\006 \001(\002\0228\n0tschcha"
    "rtseriesdefaulterrorbarfixedvaluescatter"
    "x\030\007 \001(\002\0222\n*tschchartseriesdefaulterrorba"
    "rpercentvalue\030\010 \001(\002\022:\n2tschchartseriesde"
    "faulterrorbarpercentvaluescatterx\030\t \001(\002\022"
    "-\n%tschchartseriesdefaulterrorbarsetting"
    "\030\n \001(\005\0225\n-tschchartseriesdefaulterrorbar"
    "settingscatterx\030\013 \001(\005\0221\n)tschchartseries"
    "defaulterrorbarstddevvalue\030\014 \001(\002\0229\n1tsch"
    "chartseriesdefaulterrorbarstddevvaluesca"
    "tterx\030\r \001(\002\022*\n\"tschchartseriesdefaulterr"
    "orbartype\030\016 \001(\005\0222\n*tschchartseriesdefaul"
    "terrorbartypescatterx\030\017 \001(\005\022(\n tschchart"
    "seriespielabelexplosion\030\020 \001(\002\022%\n\035tschcha"
    "rtseriesbubblelinetype\030\021 \001(\005\022#\n\033tschchar"
    "tserieslinelinetype\030\022 \001(\005\022(\n tschchartse"
    "riesmixedlinelinetype\030\023 \001(\005\022&\n\036tschchart"
    "seriesscatterlinetype\030\024 \001(\005\022G\n%tschchart"
    "seriesdefault1_0numberformat\030\025 \001(\0132\030.TSK"
    ".FormatStructArchive\022D\n\"tschchartseriesd"
    "efaultnumberformat\030b \001(\0132\030.TSK.FormatStr"
    "uctArchive\022E\n#tschchartseriesdefault1_0d"
    "ateformat\030E \001(\0132\030.TSK.FormatStructArchiv"
    "e\022F\n$tschchartseriesdefaultdurationforma"
    "t\030F \001(\0132\030.TSK.FormatStructArchive\022B\n tsc"
    "hchartseriesdefaultdateformat\030G \001(\0132\030.TS"
    "K.FormatStructArchive\022C\n!tschchartseries"
    "pie1_0numberformat\030\026 \001(\0132\030.TSK.FormatStr"
    "uctArchive\022@\n\036tschchartseriespienumberfo"
    "rmat\030c \001(\0132\030.TSK.FormatStructArchive\022.\n&"
    "tschchartseriesdefaultnumberformattype\030\027"
    " \001(\005\022*\n\"tschchartseriespienumberformatty"
    "pe\030\030 \001(\005\022K\n)tschchartseriesstackedpercen"
    "tnumberformat\030\031 \001(\0132\030.TSK.FormatStructAr"
    "chive\022(\n tschchartseriesdefaultseriestyp"
    "e\030\032 \001(\005\022*\n\"tschchartseriesdefaultshowerr"
    "orbar\030\033 \001(\010\0222\n*tschchartseriesdefaultsho"
    "werrorbarscatterx\030\034 \001(\010\022&\n\036tschchartseri"
    "esscattershowline\030\035 \001(\010\022-\n%tschchartseri"
    "esbubbleshownegativedata\030\036 \001(\010\022*\n\"tschch"
    "artseriespieshowserieslabels\030\037 \001(\010\022%\n\035ts"
    "chchartseriesareashowsymbol\030  \001(\010\022%\n\035tsc"
    "hchartserieslineshowsymbol\030! \001(\010\022*\n\"tsch"
    "chartseriesmixedareashowsymbol\030\" \001(\010\022*\n\""
    "tschchartseriesmixedlineshowsymbol\030# \001(\010"
    "\022(\n tschchartseriesscattershowsymbol\030$ \001"
    "(\010\022+\n#tschchartseriesdefaultshowtrendlin"
    "e\030% \001(\010\022*\n\"tschchartseriesareashowvaluel"
    "abels\030& \001(\010\022)\n!tschchartseriesbarshowval"
    "uelabels\030\' \001(\010\022,\n$tschchartseriesbubbles"
    "howvaluelabels\030( \001(\010\022-\n%tschchartseriesd"
    "efaultshowvaluelabels\030) \001(\010\022*\n\"tschchart"
    "serieslineshowvaluelabels\030* \001(\010\022+\n#tschc"
    "hartseriesmixedshowvaluelabels\030+ \001(\010\022)\n!"
    "tschchartseriespieshowvaluelabels\030, \001(\010\022"
    "-\n%tschchartseriesscattershowvaluelabels"
    "\030- \001(\010\022*\n\"tschchartseriesbubblesizedimen"
    "sion\030. \001(\005\022%\n\035tschchartseriesareasymbolt"
    "ype\030/ \001(\005\022%\n\035tschchartserieslinesymbolty"
    "pe\0300 \001(\005\022*\n\"tschchartseriesmixedareasymb"
    "oltype\0301 \001(\005\022*\n\"tschchartseriesmixedline"
    "symboltype\0302 \001(\005\022(\n tschchartseriesscatt"
    "ersymboltype\0303 \001(\005\0226\n.tschchartseriesdef"
    "aulttrendlineequationoffsetx\0304 \001(\002\0226\n.ts"
    "chchartseriesdefaulttrendlineequationoff"
    "sety\0305 \001(\002\0222\n*tschchartseriesdefaulttren"
    "dlinelabelstring\0306 \001(\t\022,\n$tschchartserie"
    "sdefaulttrendlineorder\0307 \001(\005\022-\n%tschchar"
    "tseriesdefaulttrendlineperiod\0308 \001(\005\0226\n.t"
    "schchartseriesdefaulttrendlinersquaredof"
    "fsetx\0309 \001(\002\0226\n.tschchartseriesdefaulttre"
    "ndlinersquaredoffsety\030: \001(\002\0223\n+tschchart"
    "seriesdefaulttrendlineshowequation\030; \001(\010"
    "\0220\n(tschchartseriesdefaulttrendlineshowl"
    "abel\030< \001(\010\0222\n*tschchartseriesdefaulttren"
    "dlineshowr2value\030= \001(\010\022+\n#tschchartserie"
    "sdefaulttrendlinetype\030> \001(\005\022(\n tschchart"
    "seriespiewedgeexplosion\030\? \001(\002\022*\n\"tschcha"
    "rtseriesdefaultyaxisordinal\030@ \001(\005\022-\n%tsc"
    "hchartseriesbubbleshowserieslabels\030A \001(\010"
    "\022,\n$tschchartseriesbubblevaluelabelsaxis"
    "\030B \001(\005\022.\n&tschchartseriesscattershowseri"
    "eslabels\030C \001(\010\022-\n%tschchartseriesscatter"
    "valuelabelsaxis\030D \001(\005\022/\n\'tschchartseries"
    "defaultshowlabelsinfront\030d \001(\010\022.\n&tschch"
    "artseriesbubbleshowlabelsinfront\030e \001(\0102^"
    "\n\007current\022 .TSCH.ChartSeriesNonStyleArch"
    "ive\030\220N \001(\0132*.TSCH.Generated.ChartSeriesN"
    "onStyleArchive\"\263\n\n\036ChartGenericPropertyM"
    "apArchive\022\037\n\027tschchartinfo3dbarshape\030\001 \001"
    "(\005\022!\n\031tschchartinfo3dbeveledges\030\002 \001(\010\022\'\n"
    "\037tschchartinfo3dintersetdepthgap\030\003 \001(\002\022;"
    "\n\027tschchartinfo3drotation\030\004 \001(\0132\032.TSCH.C"
    "hart3DVectorArchive\0228\n\024tschchartinfo3dsc"
    "ale\030\005 \001(\0132\032.TSCH.Chart3DVectorArchive\022;\n"
    "\027tschchartinfo3dviewport\030\006 \001(\0132\032.TSCH.Ch"
    "art3DVectorArchive\022\"\n\032tschchartinfopiest"
    "artangle\030\007 \001(\002\022\037\n\027tschchartinfoshowlegen"
    "d\030\010 \001(\010\022\036\n\026tschchartinfoshowtitle\030\t \001(\010\022"
    "#\n\033tschchartinfoskiphiddendata\030\n \001(\010\022\032\n\022"
    "tschchartinfotitle\030\013 \001(\t\022(\n tschchartinf"
    "odatasetnamelocation\030\014 \001(\005\022)\n!tschcharti"
    "nfomultidatacontroltype\030\r \001(\005\022#\n\033tschcha"
    "rtinfo3dchartopacity\030\016 \001(\002\022K\n\036tschcharti"
    "nfo3dlightingpackage\030\017 \001(\0132#.TSCH.Chart3"
    "DLightingPackageArchive\0225\n\033tschchartinfo"
    "backgroundfill\030\020 \001(\0132\020.TSD.FillArchive\0229"
    "\n\035tschchartinfobackgroundstroke\030\021 \001(\0132\022."
    "TSD.StrokeArchive\022\"\n\032tschchartinfoborder"
    "opacity\030\022 \001(\002\0225\n\031tschchartinfobordershad"
    "ow\030\023 \001(\0132\022.TSD.ShadowArchive\0225\n\031tschchar"
    "tinfoborderstroke\030\024 \001(\0132\022.TSD.StrokeArch"
    "ive\022\"\n\032tschchartinfocombinelayers\030\025 \001(\010\022"
    "9\n\037tschchartinfogridbackgroundfill\030\026 \001(\013"
    "2\020.TSD.FillArchive\022*\n\"tschchartinfogridb"
    "ackgroundopacity\030\027 \001(\002\022 \n\030tschchartinfoi"
    "nterbargap\030\030 \001(\002\022 \n\030tschchartinfointerse"
    "tgap\030\031 \001(\002\022\037\n\027tschchartinfoshowborder\030\032 "
    "\001(\010\022+\n\027tschchartinfotitlecolor\030\033 \001(\0132\n.T"
    "SP.Color\022-\n%tschchartinfotitleparagraphs"
    "tyleindex\030\034 \001(\005\0223\n+tschchartinfodatasetn"
    "ameparagraphstyleindex\030\035 \001(\005\"\207\002\n\037LegendG"
    "enericPropertyMapArchive\022-\n\023tschlegendmo"
    "delfill\030\001 \001(\0132\020.TSD.FillArchive\022/\n\'tschl"
    "egendmodellabelparagraphstyleindex\030\002 \001(\005"
    "\022\036\n\026tschlegendmodelopacity\030\003 \001(\002\0221\n\025tsch"
    "legendmodelshadow\030\004 \001(\0132\022.TSD.ShadowArch"
    "ive\0221\n\025tschlegendmodelstroke\030\005 \001(\0132\022.TSD"
    ".StrokeArchive\"\244\016\n\"ChartAxisGenericPrope"
    "rtyMapArchive\022$\n\034tschchartaxis3dlabelpos"
    "ition\030\001 \001(\005\022>\n\034tschchartaxis1_0numberfor"
    "mat\030\002 \001(\0132\030.TSK.FormatStructArchive\022;\n\031t"
    "schchartaxisnumberformat\030\003 \001(\0132\030.TSK.For"
    "matStructArchive\022<\n\032tschchartaxis1_0date"
    "format\030\004 \001(\0132\030.TSK.FormatStructArchive\022="
    "\n\033tschchartaxisdurationformat\030\005 \001(\0132\030.TS"
    "K.FormatStructArchive\0229\n\027tschchartaxisda"
    "teformat\030\006 \001(\0132\030.TSK.FormatStructArchive"
    "\022%\n\035tschchartaxisnumberformattype\030\007 \001(\005\022"
    "$\n\034tschchartaxisnumberofdecades\030\010 \001(\005\022+\n"
    "#tschchartaxisnumberofmajorgridlines\030\t \001"
    "(\005\022+\n#tschchartaxisnumberofminorgridline"
    "s\030\n \001(\005\022 \n\030tschchartaxisplottoedges\030\013 \001("
    "\010\022\032\n\022tschchartaxisscale\030\014 \001(\005\022\037\n\027tschcha"
    "rtaxisshowlabels\030\r \001(\010\022%\n\035tschchartaxiss"
    "howserieslabels\030\016 \001(\010\022\036\n\026tschchartaxissh"
    "owtitle\030\017 \001(\010\022\032\n\022tschchartaxistitle\030\020 \001("
    "\t\022\?\n\024tschchartaxisusermax\030\021 \001(\0132!.TSCH.C"
    "hartsNSNumberDoubleArchive\022\?\n\024tschcharta"
    "xisusermin\030\022 \001(\0132!.TSCH.ChartsNSNumberDo"
    "ubleArchive\022&\n\036tschchartaxis3dgridlineop"
    "acity\030\023 \001(\002\0229\n\035tschchartaxis3dgridlinest"
    "roke\030\024 \001(\0132\022.TSD.StrokeArchive\022&\n\036tschch"
    "artaxishorizontalspacing\030\025 \001(\005\022-\n%tschch"
    "artaxislabelparagraphstyleindex\030\026 \001(\005\022&\n"
    "\036tschchartaxislabelsorientation\030\027 \001(\002\022)\n"
    "!tschchartaxismajorgridlineopacity\030\030 \001(\002"
    "\022<\n tschchartaxismajorgridlineshadow\030\031 \001"
    "(\0132\022.TSD.ShadowArchive\022<\n tschchartaxism"
    "ajorgridlinestroke\030\032 \001(\0132\022.TSD.StrokeArc"
    "hive\022)\n!tschchartaxisminorgridlineopacit"
    "y\030\033 \001(\002\022<\n tschchartaxisminorgridlinesha"
    "dow\030\034 \001(\0132\022.TSD.ShadowArchive\022<\n tschcha"
    "rtaxisminorgridlinestroke\030\035 \001(\0132\022.TSD.St"
    "rokeArchive\022\035\n\025tschchartaxisshowaxis\030\036 \001"
    "(\010\022\"\n\032tschchartaxisshowlastlabel\030\037 \001(\010\022\'"
    "\n\037tschchartaxisshowmajorgridlines\030  \001(\010\022"
    "\'\n\037tschchartaxisshowmajortickmarks\030! \001(\010"
    "\022%\n\035tschchartaxisshowminimumlabel\030\" \001(\010\022"
    "\'\n\037tschchartaxisshowminorgridlines\030# \001(\010"
    "\022\'\n\037tschchartaxisshowminortickmarks\030$ \001("
    "\010\022%\n\035tschchartaxistickmarklocation\030% \001(\005"
    "\022-\n%tschchartaxistitleparagraphstyleinde"
    "x\030& \001(\005\022$\n\034tschchartaxisverticalspacing\030"
    "\' \001(\005\"\221\035\n$ChartSeriesGenericPropertyMapA"
    "rchive\022&\n\036tschchartseriesadjustmentscale"
    "\030\001 \001(\002\022]\n)tschchartserieserrorbarcustomn"
    "egativedata\030\002 \001(\0132*.TSCH.ChartsNSArrayOf"
    "NSNumberDoubleArchive\022e\n1tschchartseries"
    "errorbarcustomnegativedatascatterx\030\003 \001(\013"
    "2*.TSCH.ChartsNSArrayOfNSNumberDoubleArc"
    "hive\022]\n)tschchartserieserrorbarcustompos"
    "itivedata\030\004 \001(\0132*.TSCH.ChartsNSArrayOfNS"
    "NumberDoubleArchive\022e\n1tschchartserieser"
    "rorbarcustompositivedatascatterx\030\005 \001(\0132*"
    ".TSCH.ChartsNSArrayOfNSNumberDoubleArchi"
    "ve\022)\n!tschchartserieserrorbarfixedvalue\030"
    "\006 \001(\002\0221\n)tschchartserieserrorbarfixedval"
    "uescatterx\030\007 \001(\002\022+\n#tschchartserieserror"
    "barpercentvalue\030\010 \001(\002\0223\n+tschchartseries"
    "errorbarpercentvaluescatterx\030\t \001(\002\022&\n\036ts"
    "chchartserieserrorbarsetting\030\n \001(\005\022.\n&ts"
    "chchartserieserrorbarsettingscatterx\030\013 \001"
    "(\005\022*\n\"tschchartserieserrorbarstddevvalue"
    "\030\014 \001(\002\0222\n*tschchartserieserrorbarstddevv"
    "aluescatterx\030\r \001(\002\022#\n\033tschchartserieserr"
    "orbartype\030\016 \001(\005\022+\n#tschchartserieserrorb"
    "artypescatterx\030\017 \001(\005\022%\n\035tschchartseriesl"
    "abelexplosion\030\020 \001(\002\022\037\n\027tschchartseriesli"
    "netype\030\021 \001(\005\022@\n\036tschchartseries1_0number"
    "format\030\022 \001(\0132\030.TSK.FormatStructArchive\022="
    "\n\033tschchartseriesnumberformat\030\023 \001(\0132\030.TS"
    "K.FormatStructArchive\022>\n\034tschchartseries"
    "1_0dateformat\030\024 \001(\0132\030.TSK.FormatStructAr"
    "chive\022\?\n\035tschchartseriesdurationformat\030\025"
    " \001(\0132\030.TSK.FormatStructArchive\022;\n\031tschch"
    "artseriesdateformat\030\026 \001(\0132\030.TSK.FormatSt"
    "ructArchive\022\'\n\037tschchartseriesnumberform"
    "attype\030\027 \001(\005\022D\n\"tschchartseriespercentnu"
    "mberformat\030\030 \001(\0132\030.TSK.FormatStructArchi"
    "ve\022!\n\031tschchartseriesseriestype\030\031 \001(\005\022#\n"
    "\033tschchartseriesshowerrorbar\030\032 \001(\010\022+\n#ts"
    "chchartseriesshowerrorbarscatterx\030\033 \001(\010\022"
    "\037\n\027tschchartseriesshowline\030\034 \001(\010\022\'\n\037tsch"
    "chartseriesshownegativedata\030\035 \001(\010\022\'\n\037tsc"
    "hchartseriesshowserieslabels\030\036 \001(\010\022!\n\031ts"
    "chchartseriesshowsymbol\030\037 \001(\010\022$\n\034tschcha"
    "rtseriesshowtrendline\030  \001(\010\022&\n\036tschchart"
    "seriesshowvaluelabels\030! \001(\010\022$\n\034tschchart"
    "seriessizedimension\030\" \001(\005\022!\n\031tschchartse"
    "riessymboltype\030# \001(\005\022/\n\'tschchartseriest"
    "rendlineequationoffsetx\030$ \001(\002\022/\n\'tschcha"
    "rtseriestrendlineequationoffsety\030% \001(\002\022+"
    "\n#tschchartseriestrendlinelabelstring\030& "
    "\001(\t\022%\n\035tschchartseriestrendlineorder\030\' \001"
    "(\005\022&\n\036tschchartseriestrendlineperiod\030( \001"
    "(\005\022/\n\'tschchartseriestrendlinersquaredof"
    "fsetx\030) \001(\002\022/\n\'tschchartseriestrendliner"
    "squaredoffsety\030* \001(\002\022,\n$tschchartseriest"
    "rendlineshowequation\030+ \001(\010\022)\n!tschcharts"
    "eriestrendlineshowlabel\030, \001(\010\022+\n#tschcha"
    "rtseriestrendlineshowr2value\030- \001(\010\022$\n\034ts"
    "chchartseriestrendlinetype\030. \001(\005\022%\n\035tsch"
    "chartserieswedgeexplosion\030/ \001(\002\022#\n\033tschc"
    "hartseriesyaxisordinal\0300 \001(\005\022&\n\036tschchar"
    "tseriesvaluelabelsaxis\0301 \001(\005\022;\n\036tschchar"
    "tserieserrorbarlineend\0302 \001(\0132\023.TSD.LineE"
    "ndArchive\022C\n&tschchartserieserrorbarline"
    "endscatterx\0303 \001(\0132\023.TSD.LineEndArchive\0229"
    "\n\035tschchartserieserrorbarshadow\0304 \001(\0132\022."
    "TSD.ShadowArchive\0229\n\035tschchartserieserro"
    "rbarstroke\0305 \001(\0132\022.TSD.StrokeArchive\022A\n%"
    "tschchartserieserrorbarstrokescatterx\0306 "
    "\001(\0132\022.TSD.StrokeArchive\022-\n\023tschchartseri"
    "esfill\0307 \001(\0132\020.TSD.FillArchive\022/\n\'tschch"
    "artserieslabelparagraphstyleindex\0308 \001(\005\022"
    "\036\n\026tschchartseriesopacity\0309 \001(\002\0226\n.tschc"
    "hartseriesoutsidelabelparagraphstyleinde"
    "x\030: \001(\005\0221\n\025tschchartseriesshadow\030; \001(\0132\022"
    ".TSD.ShadowArchive\0221\n\025tschchartseriesstr"
    "oke\030< \001(\0132\022.TSD.StrokeArchive\0223\n\031tschcha"
    "rtseriessymbolfill\030= \001(\0132\020.TSD.FillArchi"
    "ve\022.\n&tschchartseriessymbolfilluseseries"
    "fill\030> \001(\010\0220\n(tschchartseriessymbolfillu"
    "seseriesstroke\030\? \001(\010\022!\n\031tschchartseriess"
    "ymbolsize\030@ \001(\002\0227\n\033tschchartseriessymbol"
    "stroke\030A \001(\0132\022.TSD.StrokeArchive\022/\n\'tsch"
    "chartseriestrendlineequationopacity\030B \001("
    "\002\022;\n3tschchartseriestrendlineequationpar"
    "agraphstyleindex\030C \001(\005\022/\n\'tschchartserie"
    "strendlinersquaredopacity\030D \001(\002\022;\n3tschc"
    "hartseriestrendlinersquaredparagraphstyl"
    "eindex\030E \001(\005\022:\n\036tschchartseriestrendline"
    "shadow\030F \001(\0132\022.TSD.ShadowArchive\022:\n\036tsch"
    "chartseriestrendlinestroke\030G \001(\0132\022.TSD.S"
    "trokeArchive\022)\n!tschchartseriesvaluelabe"
    "lposition\030H \001(\005\022(\n tschchartseriesshowla"
    "belsinfront\030I \001(\010", 23417);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TSCHArchives.GEN.proto", &protobuf_RegisterTypes);
  ChartStyleArchive::default_instance_ = new ChartStyleArchive();
  ChartNonStyleArchive::default_instance_ = new ChartNonStyleArchive();
  LegendStyleArchive::default_instance_ = new LegendStyleArchive();
  LegendNonStyleArchive::default_instance_ = new LegendNonStyleArchive();
  ChartAxisStyleArchive::default_instance_ = new ChartAxisStyleArchive();
  ChartAxisNonStyleArchive::default_instance_ = new ChartAxisNonStyleArchive();
  ChartSeriesStyleArchive::default_instance_ = new ChartSeriesStyleArchive();
  ChartSeriesNonStyleArchive::default_instance_ = new ChartSeriesNonStyleArchive();
  ChartGenericPropertyMapArchive::default_instance_ = new ChartGenericPropertyMapArchive();
  LegendGenericPropertyMapArchive::default_instance_ = new LegendGenericPropertyMapArchive();
  ChartAxisGenericPropertyMapArchive::default_instance_ = new ChartAxisGenericPropertyMapArchive();
  ChartSeriesGenericPropertyMapArchive::default_instance_ = new ChartSeriesGenericPropertyMapArchive();
  ChartStyleArchive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::TSCH::ChartStyleArchive::default_instance(),
    10000, 11, false, false,
    &::TSCH::Generated::ChartStyleArchive::default_instance());
  ChartNonStyleArchive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::TSCH::ChartNonStyleArchive::default_instance(),
    10000, 11, false, false,
    &::TSCH::Generated::ChartNonStyleArchive::default_instance());
  LegendStyleArchive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::TSCH::LegendStyleArchive::default_instance(),
    10000, 11, false, false,
    &::TSCH::Generated::LegendStyleArchive::default_instance());
  LegendNonStyleArchive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::TSCH::LegendNonStyleArchive::default_instance(),
    10000, 11, false, false,
    &::TSCH::Generated::LegendNonStyleArchive::default_instance());
  ChartAxisStyleArchive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::TSCH::ChartAxisStyleArchive::default_instance(),
    10000, 11, false, false,
    &::TSCH::Generated::ChartAxisStyleArchive::default_instance());
  ChartAxisNonStyleArchive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::TSCH::ChartAxisNonStyleArchive::default_instance(),
    10000, 11, false, false,
    &::TSCH::Generated::ChartAxisNonStyleArchive::default_instance());
  ChartSeriesStyleArchive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::TSCH::ChartSeriesStyleArchive::default_instance(),
    10000, 11, false, false,
    &::TSCH::Generated::ChartSeriesStyleArchive::default_instance());
  ChartSeriesNonStyleArchive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::TSCH::ChartSeriesNonStyleArchive::default_instance(),
    10000, 11, false, false,
    &::TSCH::Generated::ChartSeriesNonStyleArchive::default_instance());
  ChartGenericPropertyMapArchive::default_instance_->InitAsDefaultInstance();
  LegendGenericPropertyMapArchive::default_instance_->InitAsDefaultInstance();
  ChartAxisGenericPropertyMapArchive::default_instance_->InitAsDefaultInstance();
  ChartSeriesGenericPropertyMapArchive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TSCHArchives_2eGEN_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TSCHArchives_2eGEN_2eproto {
  StaticDescriptorInitializer_TSCHArchives_2eGEN_2eproto() {
    protobuf_AddDesc_TSCHArchives_2eGEN_2eproto();
  }
} static_descriptor_initializer_TSCHArchives_2eGEN_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ChartStyleArchive::kTschchartinfodefault3DchartopacityFieldNumber;
const int ChartStyleArchive::kTschchartinfoarea3DlightingpackageFieldNumber;
const int ChartStyleArchive::kTschchartinfobar3DlightingpackageFieldNumber;
const int ChartStyleArchive::kTschchartinfocolumn3DlightingpackageFieldNumber;
const int ChartStyleArchive::kTschchartinfodefault3DlightingpackageFieldNumber;
const int ChartStyleArchive::kTschchartinfoline3DlightingpackageFieldNumber;
const int ChartStyleArchive::kTschchartinfopie3DlightingpackageFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultbackgroundfillFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultbackgroundstrokeFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultborderopacityFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultbordershadowFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultborderstrokeFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultcombinelayersFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultgridbackgroundfillFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultgridbackgroundopacityFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultinterbargapFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultintersetgapFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultshowborderFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaulttitlecolorFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaulttitleparagraphstyleindexFieldNumber;
const int ChartStyleArchive::kTschchartinfodefaultdatasetnameparagraphstyleindexFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ChartStyleArchive::kCurrentFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartStyleArchive,
    ::google::protobuf::internal::MessageTypeTraits< ::TSCH::Generated::ChartStyleArchive >, 11, false >
  ChartStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::ChartStyleArchive::default_instance());
ChartStyleArchive::ChartStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartStyleArchive::InitAsDefaultInstance() {
  tschchartinfoarea3dlightingpackage_ = const_cast< ::TSCH::Chart3DLightingPackageArchive*>(&::TSCH::Chart3DLightingPackageArchive::default_instance());
  tschchartinfobar3dlightingpackage_ = const_cast< ::TSCH::Chart3DLightingPackageArchive*>(&::TSCH::Chart3DLightingPackageArchive::default_instance());
  tschchartinfocolumn3dlightingpackage_ = const_cast< ::TSCH::Chart3DLightingPackageArchive*>(&::TSCH::Chart3DLightingPackageArchive::default_instance());
  tschchartinfodefault3dlightingpackage_ = const_cast< ::TSCH::Chart3DLightingPackageArchive*>(&::TSCH::Chart3DLightingPackageArchive::default_instance());
  tschchartinfoline3dlightingpackage_ = const_cast< ::TSCH::Chart3DLightingPackageArchive*>(&::TSCH::Chart3DLightingPackageArchive::default_instance());
  tschchartinfopie3dlightingpackage_ = const_cast< ::TSCH::Chart3DLightingPackageArchive*>(&::TSCH::Chart3DLightingPackageArchive::default_instance());
  tschchartinfodefaultbackgroundfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartinfodefaultbackgroundstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartinfodefaultbordershadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartinfodefaultborderstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartinfodefaultgridbackgroundfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartinfodefaulttitlecolor_ = const_cast< ::TSP::Color*>(&::TSP::Color::default_instance());
}

ChartStyleArchive::ChartStyleArchive(const ChartStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  tschchartinfodefault3dchartopacity_ = 0;
  tschchartinfoarea3dlightingpackage_ = NULL;
  tschchartinfobar3dlightingpackage_ = NULL;
  tschchartinfocolumn3dlightingpackage_ = NULL;
  tschchartinfodefault3dlightingpackage_ = NULL;
  tschchartinfoline3dlightingpackage_ = NULL;
  tschchartinfopie3dlightingpackage_ = NULL;
  tschchartinfodefaultbackgroundfill_ = NULL;
  tschchartinfodefaultbackgroundstroke_ = NULL;
  tschchartinfodefaultborderopacity_ = 0;
  tschchartinfodefaultbordershadow_ = NULL;
  tschchartinfodefaultborderstroke_ = NULL;
  tschchartinfodefaultcombinelayers_ = false;
  tschchartinfodefaultgridbackgroundfill_ = NULL;
  tschchartinfodefaultgridbackgroundopacity_ = 0;
  tschchartinfodefaultinterbargap_ = 0;
  tschchartinfodefaultintersetgap_ = 0;
  tschchartinfodefaultshowborder_ = false;
  tschchartinfodefaulttitlecolor_ = NULL;
  tschchartinfodefaulttitleparagraphstyleindex_ = 0;
  tschchartinfodefaultdatasetnameparagraphstyleindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartStyleArchive::~ChartStyleArchive() {
  SharedDtor();
}

void ChartStyleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete tschchartinfoarea3dlightingpackage_;
    delete tschchartinfobar3dlightingpackage_;
    delete tschchartinfocolumn3dlightingpackage_;
    delete tschchartinfodefault3dlightingpackage_;
    delete tschchartinfoline3dlightingpackage_;
    delete tschchartinfopie3dlightingpackage_;
    delete tschchartinfodefaultbackgroundfill_;
    delete tschchartinfodefaultbackgroundstroke_;
    delete tschchartinfodefaultbordershadow_;
    delete tschchartinfodefaultborderstroke_;
    delete tschchartinfodefaultgridbackgroundfill_;
    delete tschchartinfodefaulttitlecolor_;
  }
}

void ChartStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartStyleArchive_descriptor_;
}

const ChartStyleArchive& ChartStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eGEN_2eproto();
  return *default_instance_;
}

ChartStyleArchive* ChartStyleArchive::default_instance_ = NULL;

ChartStyleArchive* ChartStyleArchive::New() const {
  return new ChartStyleArchive;
}

void ChartStyleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tschchartinfodefault3dchartopacity_ = 0;
    if (has_tschchartinfoarea3dlightingpackage()) {
      if (tschchartinfoarea3dlightingpackage_ != NULL) tschchartinfoarea3dlightingpackage_->::TSCH::Chart3DLightingPackageArchive::Clear();
    }
    if (has_tschchartinfobar3dlightingpackage()) {
      if (tschchartinfobar3dlightingpackage_ != NULL) tschchartinfobar3dlightingpackage_->::TSCH::Chart3DLightingPackageArchive::Clear();
    }
    if (has_tschchartinfocolumn3dlightingpackage()) {
      if (tschchartinfocolumn3dlightingpackage_ != NULL) tschchartinfocolumn3dlightingpackage_->::TSCH::Chart3DLightingPackageArchive::Clear();
    }
    if (has_tschchartinfodefault3dlightingpackage()) {
      if (tschchartinfodefault3dlightingpackage_ != NULL) tschchartinfodefault3dlightingpackage_->::TSCH::Chart3DLightingPackageArchive::Clear();
    }
    if (has_tschchartinfoline3dlightingpackage()) {
      if (tschchartinfoline3dlightingpackage_ != NULL) tschchartinfoline3dlightingpackage_->::TSCH::Chart3DLightingPackageArchive::Clear();
    }
    if (has_tschchartinfopie3dlightingpackage()) {
      if (tschchartinfopie3dlightingpackage_ != NULL) tschchartinfopie3dlightingpackage_->::TSCH::Chart3DLightingPackageArchive::Clear();
    }
    if (has_tschchartinfodefaultbackgroundfill()) {
      if (tschchartinfodefaultbackgroundfill_ != NULL) tschchartinfodefaultbackgroundfill_->::TSD::FillArchive::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_tschchartinfodefaultbackgroundstroke()) {
      if (tschchartinfodefaultbackgroundstroke_ != NULL) tschchartinfodefaultbackgroundstroke_->::TSD::StrokeArchive::Clear();
    }
    tschchartinfodefaultborderopacity_ = 0;
    if (has_tschchartinfodefaultbordershadow()) {
      if (tschchartinfodefaultbordershadow_ != NULL) tschchartinfodefaultbordershadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartinfodefaultborderstroke()) {
      if (tschchartinfodefaultborderstroke_ != NULL) tschchartinfodefaultborderstroke_->::TSD::StrokeArchive::Clear();
    }
    tschchartinfodefaultcombinelayers_ = false;
    if (has_tschchartinfodefaultgridbackgroundfill()) {
      if (tschchartinfodefaultgridbackgroundfill_ != NULL) tschchartinfodefaultgridbackgroundfill_->::TSD::FillArchive::Clear();
    }
    tschchartinfodefaultgridbackgroundopacity_ = 0;
    tschchartinfodefaultinterbargap_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    tschchartinfodefaultintersetgap_ = 0;
    tschchartinfodefaultshowborder_ = false;
    if (has_tschchartinfodefaulttitlecolor()) {
      if (tschchartinfodefaulttitlecolor_ != NULL) tschchartinfodefaulttitlecolor_->::TSP::Color::Clear();
    }
    tschchartinfodefaulttitleparagraphstyleindex_ = 0;
    tschchartinfodefaultdatasetnameparagraphstyleindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float tschchartinfodefault3dchartopacity = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartinfodefault3dchartopacity_)));
          set_has_tschchartinfodefault3dchartopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tschchartinfoarea3dlightingpackage;
        break;
      }

      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoarea3dlightingpackage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfoarea3dlightingpackage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfoarea3dlightingpackage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tschchartinfobar3dlightingpackage;
        break;
      }

      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobar3dlightingpackage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfobar3dlightingpackage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfobar3dlightingpackage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tschchartinfocolumn3dlightingpackage;
        break;
      }

      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumn3dlightingpackage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfocolumn3dlightingpackage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfocolumn3dlightingpackage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tschchartinfodefault3dlightingpackage;
        break;
      }

      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefault3dlightingpackage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfodefault3dlightingpackage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfodefault3dlightingpackage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_tschchartinfoline3dlightingpackage;
        break;
      }

      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoline3dlightingpackage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfoline3dlightingpackage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfoline3dlightingpackage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_tschchartinfopie3dlightingpackage;
        break;
      }

      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopie3dlightingpackage = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfopie3dlightingpackage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfopie3dlightingpackage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_tschchartinfodefaultbackgroundfill;
        break;
      }

      // optional .TSD.FillArchive tschchartinfodefaultbackgroundfill = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfodefaultbackgroundfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfodefaultbackgroundfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_tschchartinfodefaultbackgroundstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartinfodefaultbackgroundstroke = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfodefaultbackgroundstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfodefaultbackgroundstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_tschchartinfodefaultborderopacity;
        break;
      }

      // optional float tschchartinfodefaultborderopacity = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartinfodefaultborderopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartinfodefaultborderopacity_)));
          set_has_tschchartinfodefaultborderopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_tschchartinfodefaultbordershadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartinfodefaultbordershadow = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfodefaultbordershadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfodefaultbordershadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_tschchartinfodefaultborderstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartinfodefaultborderstroke = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfodefaultborderstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfodefaultborderstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tschchartinfodefaultcombinelayers;
        break;
      }

      // optional bool tschchartinfodefaultcombinelayers = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfodefaultcombinelayers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartinfodefaultcombinelayers_)));
          set_has_tschchartinfodefaultcombinelayers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_tschchartinfodefaultgridbackgroundfill;
        break;
      }

      // optional .TSD.FillArchive tschchartinfodefaultgridbackgroundfill = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfodefaultgridbackgroundfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfodefaultgridbackgroundfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_tschchartinfodefaultgridbackgroundopacity;
        break;
      }

      // optional float tschchartinfodefaultgridbackgroundopacity = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartinfodefaultgridbackgroundopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartinfodefaultgridbackgroundopacity_)));
          set_has_tschchartinfodefaultgridbackgroundopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_tschchartinfodefaultinterbargap;
        break;
      }

      // optional float tschchartinfodefaultinterbargap = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartinfodefaultinterbargap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartinfodefaultinterbargap_)));
          set_has_tschchartinfodefaultinterbargap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_tschchartinfodefaultintersetgap;
        break;
      }

      // optional float tschchartinfodefaultintersetgap = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartinfodefaultintersetgap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartinfodefaultintersetgap_)));
          set_has_tschchartinfodefaultintersetgap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_tschchartinfodefaultshowborder;
        break;
      }

      // optional bool tschchartinfodefaultshowborder = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfodefaultshowborder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartinfodefaultshowborder_)));
          set_has_tschchartinfodefaultshowborder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_tschchartinfodefaulttitlecolor;
        break;
      }

      // optional .TSP.Color tschchartinfodefaulttitlecolor = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfodefaulttitlecolor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfodefaulttitlecolor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_tschchartinfodefaulttitleparagraphstyleindex;
        break;
      }

      // optional int32 tschchartinfodefaulttitleparagraphstyleindex = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfodefaulttitleparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartinfodefaulttitleparagraphstyleindex_)));
          set_has_tschchartinfodefaulttitleparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_tschchartinfodefaultdatasetnameparagraphstyleindex;
        break;
      }

      // optional int32 tschchartinfodefaultdatasetnameparagraphstyleindex = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfodefaultdatasetnameparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartinfodefaultdatasetnameparagraphstyleindex_)));
          set_has_tschchartinfodefaultdatasetnameparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float tschchartinfodefault3dchartopacity = 1;
  if (has_tschchartinfodefault3dchartopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->tschchartinfodefault3dchartopacity(), output);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoarea3dlightingpackage = 2;
  if (has_tschchartinfoarea3dlightingpackage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tschchartinfoarea3dlightingpackage(), output);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobar3dlightingpackage = 3;
  if (has_tschchartinfobar3dlightingpackage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tschchartinfobar3dlightingpackage(), output);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumn3dlightingpackage = 4;
  if (has_tschchartinfocolumn3dlightingpackage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tschchartinfocolumn3dlightingpackage(), output);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefault3dlightingpackage = 5;
  if (has_tschchartinfodefault3dlightingpackage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tschchartinfodefault3dlightingpackage(), output);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoline3dlightingpackage = 6;
  if (has_tschchartinfoline3dlightingpackage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->tschchartinfoline3dlightingpackage(), output);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopie3dlightingpackage = 7;
  if (has_tschchartinfopie3dlightingpackage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tschchartinfopie3dlightingpackage(), output);
  }

  // optional .TSD.FillArchive tschchartinfodefaultbackgroundfill = 8;
  if (has_tschchartinfodefaultbackgroundfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->tschchartinfodefaultbackgroundfill(), output);
  }

  // optional .TSD.StrokeArchive tschchartinfodefaultbackgroundstroke = 9;
  if (has_tschchartinfodefaultbackgroundstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->tschchartinfodefaultbackgroundstroke(), output);
  }

  // optional float tschchartinfodefaultborderopacity = 10;
  if (has_tschchartinfodefaultborderopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->tschchartinfodefaultborderopacity(), output);
  }

  // optional .TSD.ShadowArchive tschchartinfodefaultbordershadow = 11;
  if (has_tschchartinfodefaultbordershadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->tschchartinfodefaultbordershadow(), output);
  }

  // optional .TSD.StrokeArchive tschchartinfodefaultborderstroke = 12;
  if (has_tschchartinfodefaultborderstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->tschchartinfodefaultborderstroke(), output);
  }

  // optional bool tschchartinfodefaultcombinelayers = 13;
  if (has_tschchartinfodefaultcombinelayers()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->tschchartinfodefaultcombinelayers(), output);
  }

  // optional .TSD.FillArchive tschchartinfodefaultgridbackgroundfill = 14;
  if (has_tschchartinfodefaultgridbackgroundfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->tschchartinfodefaultgridbackgroundfill(), output);
  }

  // optional float tschchartinfodefaultgridbackgroundopacity = 15;
  if (has_tschchartinfodefaultgridbackgroundopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->tschchartinfodefaultgridbackgroundopacity(), output);
  }

  // optional float tschchartinfodefaultinterbargap = 16;
  if (has_tschchartinfodefaultinterbargap()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->tschchartinfodefaultinterbargap(), output);
  }

  // optional float tschchartinfodefaultintersetgap = 17;
  if (has_tschchartinfodefaultintersetgap()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->tschchartinfodefaultintersetgap(), output);
  }

  // optional bool tschchartinfodefaultshowborder = 18;
  if (has_tschchartinfodefaultshowborder()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->tschchartinfodefaultshowborder(), output);
  }

  // optional .TSP.Color tschchartinfodefaulttitlecolor = 19;
  if (has_tschchartinfodefaulttitlecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->tschchartinfodefaulttitlecolor(), output);
  }

  // optional int32 tschchartinfodefaulttitleparagraphstyleindex = 20;
  if (has_tschchartinfodefaulttitleparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->tschchartinfodefaulttitleparagraphstyleindex(), output);
  }

  // optional int32 tschchartinfodefaultdatasetnameparagraphstyleindex = 21;
  if (has_tschchartinfodefaultdatasetnameparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->tschchartinfodefaultdatasetnameparagraphstyleindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float tschchartinfodefault3dchartopacity = 1;
  if (has_tschchartinfodefault3dchartopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->tschchartinfodefault3dchartopacity(), target);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoarea3dlightingpackage = 2;
  if (has_tschchartinfoarea3dlightingpackage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tschchartinfoarea3dlightingpackage(), target);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobar3dlightingpackage = 3;
  if (has_tschchartinfobar3dlightingpackage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tschchartinfobar3dlightingpackage(), target);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumn3dlightingpackage = 4;
  if (has_tschchartinfocolumn3dlightingpackage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tschchartinfocolumn3dlightingpackage(), target);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefault3dlightingpackage = 5;
  if (has_tschchartinfodefault3dlightingpackage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tschchartinfodefault3dlightingpackage(), target);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoline3dlightingpackage = 6;
  if (has_tschchartinfoline3dlightingpackage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->tschchartinfoline3dlightingpackage(), target);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopie3dlightingpackage = 7;
  if (has_tschchartinfopie3dlightingpackage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->tschchartinfopie3dlightingpackage(), target);
  }

  // optional .TSD.FillArchive tschchartinfodefaultbackgroundfill = 8;
  if (has_tschchartinfodefaultbackgroundfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->tschchartinfodefaultbackgroundfill(), target);
  }

  // optional .TSD.StrokeArchive tschchartinfodefaultbackgroundstroke = 9;
  if (has_tschchartinfodefaultbackgroundstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->tschchartinfodefaultbackgroundstroke(), target);
  }

  // optional float tschchartinfodefaultborderopacity = 10;
  if (has_tschchartinfodefaultborderopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->tschchartinfodefaultborderopacity(), target);
  }

  // optional .TSD.ShadowArchive tschchartinfodefaultbordershadow = 11;
  if (has_tschchartinfodefaultbordershadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->tschchartinfodefaultbordershadow(), target);
  }

  // optional .TSD.StrokeArchive tschchartinfodefaultborderstroke = 12;
  if (has_tschchartinfodefaultborderstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->tschchartinfodefaultborderstroke(), target);
  }

  // optional bool tschchartinfodefaultcombinelayers = 13;
  if (has_tschchartinfodefaultcombinelayers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->tschchartinfodefaultcombinelayers(), target);
  }

  // optional .TSD.FillArchive tschchartinfodefaultgridbackgroundfill = 14;
  if (has_tschchartinfodefaultgridbackgroundfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->tschchartinfodefaultgridbackgroundfill(), target);
  }

  // optional float tschchartinfodefaultgridbackgroundopacity = 15;
  if (has_tschchartinfodefaultgridbackgroundopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->tschchartinfodefaultgridbackgroundopacity(), target);
  }

  // optional float tschchartinfodefaultinterbargap = 16;
  if (has_tschchartinfodefaultinterbargap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->tschchartinfodefaultinterbargap(), target);
  }

  // optional float tschchartinfodefaultintersetgap = 17;
  if (has_tschchartinfodefaultintersetgap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->tschchartinfodefaultintersetgap(), target);
  }

  // optional bool tschchartinfodefaultshowborder = 18;
  if (has_tschchartinfodefaultshowborder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->tschchartinfodefaultshowborder(), target);
  }

  // optional .TSP.Color tschchartinfodefaulttitlecolor = 19;
  if (has_tschchartinfodefaulttitlecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->tschchartinfodefaulttitlecolor(), target);
  }

  // optional int32 tschchartinfodefaulttitleparagraphstyleindex = 20;
  if (has_tschchartinfodefaulttitleparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->tschchartinfodefaulttitleparagraphstyleindex(), target);
  }

  // optional int32 tschchartinfodefaultdatasetnameparagraphstyleindex = 21;
  if (has_tschchartinfodefaultdatasetnameparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->tschchartinfodefaultdatasetnameparagraphstyleindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float tschchartinfodefault3dchartopacity = 1;
    if (has_tschchartinfodefault3dchartopacity()) {
      total_size += 1 + 4;
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoarea3dlightingpackage = 2;
    if (has_tschchartinfoarea3dlightingpackage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfoarea3dlightingpackage());
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobar3dlightingpackage = 3;
    if (has_tschchartinfobar3dlightingpackage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfobar3dlightingpackage());
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumn3dlightingpackage = 4;
    if (has_tschchartinfocolumn3dlightingpackage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfocolumn3dlightingpackage());
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefault3dlightingpackage = 5;
    if (has_tschchartinfodefault3dlightingpackage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfodefault3dlightingpackage());
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoline3dlightingpackage = 6;
    if (has_tschchartinfoline3dlightingpackage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfoline3dlightingpackage());
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopie3dlightingpackage = 7;
    if (has_tschchartinfopie3dlightingpackage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfopie3dlightingpackage());
    }

    // optional .TSD.FillArchive tschchartinfodefaultbackgroundfill = 8;
    if (has_tschchartinfodefaultbackgroundfill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfodefaultbackgroundfill());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TSD.StrokeArchive tschchartinfodefaultbackgroundstroke = 9;
    if (has_tschchartinfodefaultbackgroundstroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfodefaultbackgroundstroke());
    }

    // optional float tschchartinfodefaultborderopacity = 10;
    if (has_tschchartinfodefaultborderopacity()) {
      total_size += 1 + 4;
    }

    // optional .TSD.ShadowArchive tschchartinfodefaultbordershadow = 11;
    if (has_tschchartinfodefaultbordershadow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfodefaultbordershadow());
    }

    // optional .TSD.StrokeArchive tschchartinfodefaultborderstroke = 12;
    if (has_tschchartinfodefaultborderstroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfodefaultborderstroke());
    }

    // optional bool tschchartinfodefaultcombinelayers = 13;
    if (has_tschchartinfodefaultcombinelayers()) {
      total_size += 1 + 1;
    }

    // optional .TSD.FillArchive tschchartinfodefaultgridbackgroundfill = 14;
    if (has_tschchartinfodefaultgridbackgroundfill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfodefaultgridbackgroundfill());
    }

    // optional float tschchartinfodefaultgridbackgroundopacity = 15;
    if (has_tschchartinfodefaultgridbackgroundopacity()) {
      total_size += 1 + 4;
    }

    // optional float tschchartinfodefaultinterbargap = 16;
    if (has_tschchartinfodefaultinterbargap()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float tschchartinfodefaultintersetgap = 17;
    if (has_tschchartinfodefaultintersetgap()) {
      total_size += 2 + 4;
    }

    // optional bool tschchartinfodefaultshowborder = 18;
    if (has_tschchartinfodefaultshowborder()) {
      total_size += 2 + 1;
    }

    // optional .TSP.Color tschchartinfodefaulttitlecolor = 19;
    if (has_tschchartinfodefaulttitlecolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfodefaulttitlecolor());
    }

    // optional int32 tschchartinfodefaulttitleparagraphstyleindex = 20;
    if (has_tschchartinfodefaulttitleparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartinfodefaulttitleparagraphstyleindex());
    }

    // optional int32 tschchartinfodefaultdatasetnameparagraphstyleindex = 21;
    if (has_tschchartinfodefaultdatasetnameparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartinfodefaultdatasetnameparagraphstyleindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartStyleArchive::MergeFrom(const ChartStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tschchartinfodefault3dchartopacity()) {
      set_tschchartinfodefault3dchartopacity(from.tschchartinfodefault3dchartopacity());
    }
    if (from.has_tschchartinfoarea3dlightingpackage()) {
      mutable_tschchartinfoarea3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from.tschchartinfoarea3dlightingpackage());
    }
    if (from.has_tschchartinfobar3dlightingpackage()) {
      mutable_tschchartinfobar3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from.tschchartinfobar3dlightingpackage());
    }
    if (from.has_tschchartinfocolumn3dlightingpackage()) {
      mutable_tschchartinfocolumn3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from.tschchartinfocolumn3dlightingpackage());
    }
    if (from.has_tschchartinfodefault3dlightingpackage()) {
      mutable_tschchartinfodefault3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from.tschchartinfodefault3dlightingpackage());
    }
    if (from.has_tschchartinfoline3dlightingpackage()) {
      mutable_tschchartinfoline3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from.tschchartinfoline3dlightingpackage());
    }
    if (from.has_tschchartinfopie3dlightingpackage()) {
      mutable_tschchartinfopie3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from.tschchartinfopie3dlightingpackage());
    }
    if (from.has_tschchartinfodefaultbackgroundfill()) {
      mutable_tschchartinfodefaultbackgroundfill()->::TSD::FillArchive::MergeFrom(from.tschchartinfodefaultbackgroundfill());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tschchartinfodefaultbackgroundstroke()) {
      mutable_tschchartinfodefaultbackgroundstroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartinfodefaultbackgroundstroke());
    }
    if (from.has_tschchartinfodefaultborderopacity()) {
      set_tschchartinfodefaultborderopacity(from.tschchartinfodefaultborderopacity());
    }
    if (from.has_tschchartinfodefaultbordershadow()) {
      mutable_tschchartinfodefaultbordershadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartinfodefaultbordershadow());
    }
    if (from.has_tschchartinfodefaultborderstroke()) {
      mutable_tschchartinfodefaultborderstroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartinfodefaultborderstroke());
    }
    if (from.has_tschchartinfodefaultcombinelayers()) {
      set_tschchartinfodefaultcombinelayers(from.tschchartinfodefaultcombinelayers());
    }
    if (from.has_tschchartinfodefaultgridbackgroundfill()) {
      mutable_tschchartinfodefaultgridbackgroundfill()->::TSD::FillArchive::MergeFrom(from.tschchartinfodefaultgridbackgroundfill());
    }
    if (from.has_tschchartinfodefaultgridbackgroundopacity()) {
      set_tschchartinfodefaultgridbackgroundopacity(from.tschchartinfodefaultgridbackgroundopacity());
    }
    if (from.has_tschchartinfodefaultinterbargap()) {
      set_tschchartinfodefaultinterbargap(from.tschchartinfodefaultinterbargap());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tschchartinfodefaultintersetgap()) {
      set_tschchartinfodefaultintersetgap(from.tschchartinfodefaultintersetgap());
    }
    if (from.has_tschchartinfodefaultshowborder()) {
      set_tschchartinfodefaultshowborder(from.tschchartinfodefaultshowborder());
    }
    if (from.has_tschchartinfodefaulttitlecolor()) {
      mutable_tschchartinfodefaulttitlecolor()->::TSP::Color::MergeFrom(from.tschchartinfodefaulttitlecolor());
    }
    if (from.has_tschchartinfodefaulttitleparagraphstyleindex()) {
      set_tschchartinfodefaulttitleparagraphstyleindex(from.tschchartinfodefaulttitleparagraphstyleindex());
    }
    if (from.has_tschchartinfodefaultdatasetnameparagraphstyleindex()) {
      set_tschchartinfodefaultdatasetnameparagraphstyleindex(from.tschchartinfodefaultdatasetnameparagraphstyleindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartStyleArchive::CopyFrom(const ChartStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartStyleArchive::IsInitialized() const {

  if (has_tschchartinfoarea3dlightingpackage()) {
    if (!this->tschchartinfoarea3dlightingpackage().IsInitialized()) return false;
  }
  if (has_tschchartinfobar3dlightingpackage()) {
    if (!this->tschchartinfobar3dlightingpackage().IsInitialized()) return false;
  }
  if (has_tschchartinfocolumn3dlightingpackage()) {
    if (!this->tschchartinfocolumn3dlightingpackage().IsInitialized()) return false;
  }
  if (has_tschchartinfodefault3dlightingpackage()) {
    if (!this->tschchartinfodefault3dlightingpackage().IsInitialized()) return false;
  }
  if (has_tschchartinfoline3dlightingpackage()) {
    if (!this->tschchartinfoline3dlightingpackage().IsInitialized()) return false;
  }
  if (has_tschchartinfopie3dlightingpackage()) {
    if (!this->tschchartinfopie3dlightingpackage().IsInitialized()) return false;
  }
  if (has_tschchartinfodefaultbackgroundfill()) {
    if (!this->tschchartinfodefaultbackgroundfill().IsInitialized()) return false;
  }
  if (has_tschchartinfodefaultbackgroundstroke()) {
    if (!this->tschchartinfodefaultbackgroundstroke().IsInitialized()) return false;
  }
  if (has_tschchartinfodefaultbordershadow()) {
    if (!this->tschchartinfodefaultbordershadow().IsInitialized()) return false;
  }
  if (has_tschchartinfodefaultborderstroke()) {
    if (!this->tschchartinfodefaultborderstroke().IsInitialized()) return false;
  }
  if (has_tschchartinfodefaultgridbackgroundfill()) {
    if (!this->tschchartinfodefaultgridbackgroundfill().IsInitialized()) return false;
  }
  if (has_tschchartinfodefaulttitlecolor()) {
    if (!this->tschchartinfodefaulttitlecolor().IsInitialized()) return false;
  }
  return true;
}

void ChartStyleArchive::Swap(ChartStyleArchive* other) {
  if (other != this) {
    std::swap(tschchartinfodefault3dchartopacity_, other->tschchartinfodefault3dchartopacity_);
    std::swap(tschchartinfoarea3dlightingpackage_, other->tschchartinfoarea3dlightingpackage_);
    std::swap(tschchartinfobar3dlightingpackage_, other->tschchartinfobar3dlightingpackage_);
    std::swap(tschchartinfocolumn3dlightingpackage_, other->tschchartinfocolumn3dlightingpackage_);
    std::swap(tschchartinfodefault3dlightingpackage_, other->tschchartinfodefault3dlightingpackage_);
    std::swap(tschchartinfoline3dlightingpackage_, other->tschchartinfoline3dlightingpackage_);
    std::swap(tschchartinfopie3dlightingpackage_, other->tschchartinfopie3dlightingpackage_);
    std::swap(tschchartinfodefaultbackgroundfill_, other->tschchartinfodefaultbackgroundfill_);
    std::swap(tschchartinfodefaultbackgroundstroke_, other->tschchartinfodefaultbackgroundstroke_);
    std::swap(tschchartinfodefaultborderopacity_, other->tschchartinfodefaultborderopacity_);
    std::swap(tschchartinfodefaultbordershadow_, other->tschchartinfodefaultbordershadow_);
    std::swap(tschchartinfodefaultborderstroke_, other->tschchartinfodefaultborderstroke_);
    std::swap(tschchartinfodefaultcombinelayers_, other->tschchartinfodefaultcombinelayers_);
    std::swap(tschchartinfodefaultgridbackgroundfill_, other->tschchartinfodefaultgridbackgroundfill_);
    std::swap(tschchartinfodefaultgridbackgroundopacity_, other->tschchartinfodefaultgridbackgroundopacity_);
    std::swap(tschchartinfodefaultinterbargap_, other->tschchartinfodefaultinterbargap_);
    std::swap(tschchartinfodefaultintersetgap_, other->tschchartinfodefaultintersetgap_);
    std::swap(tschchartinfodefaultshowborder_, other->tschchartinfodefaultshowborder_);
    std::swap(tschchartinfodefaulttitlecolor_, other->tschchartinfodefaulttitlecolor_);
    std::swap(tschchartinfodefaulttitleparagraphstyleindex_, other->tschchartinfodefaulttitleparagraphstyleindex_);
    std::swap(tschchartinfodefaultdatasetnameparagraphstyleindex_, other->tschchartinfodefaultdatasetnameparagraphstyleindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartStyleArchive_descriptor_;
  metadata.reflection = ChartStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartNonStyleArchive::kTschchartinfodefault3DbarshapeFieldNumber;
const int ChartNonStyleArchive::kTschchartinfodefault3DbeveledgesFieldNumber;
const int ChartNonStyleArchive::kTschchartinfodefault3DintersetdepthgapFieldNumber;
const int ChartNonStyleArchive::kTschchartinfodefault3DrotationFieldNumber;
const int ChartNonStyleArchive::kTschchartinfoarea3DscaleFieldNumber;
const int ChartNonStyleArchive::kTschchartinfobar3DscaleFieldNumber;
const int ChartNonStyleArchive::kTschchartinfocolumn3DscaleFieldNumber;
const int ChartNonStyleArchive::kTschchartinfodefault3DscaleFieldNumber;
const int ChartNonStyleArchive::kTschchartinfoline3DscaleFieldNumber;
const int ChartNonStyleArchive::kTschchartinfopie3DscaleFieldNumber;
const int ChartNonStyleArchive::kTschchartinfodefault3DviewportFieldNumber;
const int ChartNonStyleArchive::kTschchartinfodefaultpiestartangleFieldNumber;
const int ChartNonStyleArchive::kTschchartinfodefaultshowlegendFieldNumber;
const int ChartNonStyleArchive::kTschchartinfodefaultshowtitleFieldNumber;
const int ChartNonStyleArchive::kTschchartinfodefaultskiphiddendataFieldNumber;
const int ChartNonStyleArchive::kTschchartinfodefaulttitleFieldNumber;
const int ChartNonStyleArchive::kTschchartinfodefaultdatasetnamelocationFieldNumber;
const int ChartNonStyleArchive::kTschchartinfodefaultmultidatacontroltypeFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ChartNonStyleArchive::kCurrentFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartNonStyleArchive,
    ::google::protobuf::internal::MessageTypeTraits< ::TSCH::Generated::ChartNonStyleArchive >, 11, false >
  ChartNonStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::ChartNonStyleArchive::default_instance());
ChartNonStyleArchive::ChartNonStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartNonStyleArchive::InitAsDefaultInstance() {
  tschchartinfodefault3drotation_ = const_cast< ::TSCH::Chart3DVectorArchive*>(&::TSCH::Chart3DVectorArchive::default_instance());
  tschchartinfoarea3dscale_ = const_cast< ::TSCH::Chart3DVectorArchive*>(&::TSCH::Chart3DVectorArchive::default_instance());
  tschchartinfobar3dscale_ = const_cast< ::TSCH::Chart3DVectorArchive*>(&::TSCH::Chart3DVectorArchive::default_instance());
  tschchartinfocolumn3dscale_ = const_cast< ::TSCH::Chart3DVectorArchive*>(&::TSCH::Chart3DVectorArchive::default_instance());
  tschchartinfodefault3dscale_ = const_cast< ::TSCH::Chart3DVectorArchive*>(&::TSCH::Chart3DVectorArchive::default_instance());
  tschchartinfoline3dscale_ = const_cast< ::TSCH::Chart3DVectorArchive*>(&::TSCH::Chart3DVectorArchive::default_instance());
  tschchartinfopie3dscale_ = const_cast< ::TSCH::Chart3DVectorArchive*>(&::TSCH::Chart3DVectorArchive::default_instance());
  tschchartinfodefault3dviewport_ = const_cast< ::TSCH::Chart3DVectorArchive*>(&::TSCH::Chart3DVectorArchive::default_instance());
}

ChartNonStyleArchive::ChartNonStyleArchive(const ChartNonStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartNonStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  tschchartinfodefault3dbarshape_ = 0;
  tschchartinfodefault3dbeveledges_ = false;
  tschchartinfodefault3dintersetdepthgap_ = 0;
  tschchartinfodefault3drotation_ = NULL;
  tschchartinfoarea3dscale_ = NULL;
  tschchartinfobar3dscale_ = NULL;
  tschchartinfocolumn3dscale_ = NULL;
  tschchartinfodefault3dscale_ = NULL;
  tschchartinfoline3dscale_ = NULL;
  tschchartinfopie3dscale_ = NULL;
  tschchartinfodefault3dviewport_ = NULL;
  tschchartinfodefaultpiestartangle_ = 0;
  tschchartinfodefaultshowlegend_ = false;
  tschchartinfodefaultshowtitle_ = false;
  tschchartinfodefaultskiphiddendata_ = false;
  tschchartinfodefaulttitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tschchartinfodefaultdatasetnamelocation_ = 0;
  tschchartinfodefaultmultidatacontroltype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartNonStyleArchive::~ChartNonStyleArchive() {
  SharedDtor();
}

void ChartNonStyleArchive::SharedDtor() {
  if (tschchartinfodefaulttitle_ != &::google::protobuf::internal::kEmptyString) {
    delete tschchartinfodefaulttitle_;
  }
  if (this != default_instance_) {
    delete tschchartinfodefault3drotation_;
    delete tschchartinfoarea3dscale_;
    delete tschchartinfobar3dscale_;
    delete tschchartinfocolumn3dscale_;
    delete tschchartinfodefault3dscale_;
    delete tschchartinfoline3dscale_;
    delete tschchartinfopie3dscale_;
    delete tschchartinfodefault3dviewport_;
  }
}

void ChartNonStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartNonStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartNonStyleArchive_descriptor_;
}

const ChartNonStyleArchive& ChartNonStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eGEN_2eproto();
  return *default_instance_;
}

ChartNonStyleArchive* ChartNonStyleArchive::default_instance_ = NULL;

ChartNonStyleArchive* ChartNonStyleArchive::New() const {
  return new ChartNonStyleArchive;
}

void ChartNonStyleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tschchartinfodefault3dbarshape_ = 0;
    tschchartinfodefault3dbeveledges_ = false;
    tschchartinfodefault3dintersetdepthgap_ = 0;
    if (has_tschchartinfodefault3drotation()) {
      if (tschchartinfodefault3drotation_ != NULL) tschchartinfodefault3drotation_->::TSCH::Chart3DVectorArchive::Clear();
    }
    if (has_tschchartinfoarea3dscale()) {
      if (tschchartinfoarea3dscale_ != NULL) tschchartinfoarea3dscale_->::TSCH::Chart3DVectorArchive::Clear();
    }
    if (has_tschchartinfobar3dscale()) {
      if (tschchartinfobar3dscale_ != NULL) tschchartinfobar3dscale_->::TSCH::Chart3DVectorArchive::Clear();
    }
    if (has_tschchartinfocolumn3dscale()) {
      if (tschchartinfocolumn3dscale_ != NULL) tschchartinfocolumn3dscale_->::TSCH::Chart3DVectorArchive::Clear();
    }
    if (has_tschchartinfodefault3dscale()) {
      if (tschchartinfodefault3dscale_ != NULL) tschchartinfodefault3dscale_->::TSCH::Chart3DVectorArchive::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_tschchartinfoline3dscale()) {
      if (tschchartinfoline3dscale_ != NULL) tschchartinfoline3dscale_->::TSCH::Chart3DVectorArchive::Clear();
    }
    if (has_tschchartinfopie3dscale()) {
      if (tschchartinfopie3dscale_ != NULL) tschchartinfopie3dscale_->::TSCH::Chart3DVectorArchive::Clear();
    }
    if (has_tschchartinfodefault3dviewport()) {
      if (tschchartinfodefault3dviewport_ != NULL) tschchartinfodefault3dviewport_->::TSCH::Chart3DVectorArchive::Clear();
    }
    tschchartinfodefaultpiestartangle_ = 0;
    tschchartinfodefaultshowlegend_ = false;
    tschchartinfodefaultshowtitle_ = false;
    tschchartinfodefaultskiphiddendata_ = false;
    if (has_tschchartinfodefaulttitle()) {
      if (tschchartinfodefaulttitle_ != &::google::protobuf::internal::kEmptyString) {
        tschchartinfodefaulttitle_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    tschchartinfodefaultdatasetnamelocation_ = 0;
    tschchartinfodefaultmultidatacontroltype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartNonStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tschchartinfodefault3dbarshape = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartinfodefault3dbarshape_)));
          set_has_tschchartinfodefault3dbarshape();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tschchartinfodefault3dbeveledges;
        break;
      }

      // optional bool tschchartinfodefault3dbeveledges = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfodefault3dbeveledges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartinfodefault3dbeveledges_)));
          set_has_tschchartinfodefault3dbeveledges();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_tschchartinfodefault3dintersetdepthgap;
        break;
      }

      // optional float tschchartinfodefault3dintersetdepthgap = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartinfodefault3dintersetdepthgap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartinfodefault3dintersetdepthgap_)));
          set_has_tschchartinfodefault3dintersetdepthgap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tschchartinfodefault3drotation;
        break;
      }

      // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3drotation = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfodefault3drotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfodefault3drotation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tschchartinfoarea3dscale;
        break;
      }

      // optional .TSCH.Chart3DVectorArchive tschchartinfoarea3dscale = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfoarea3dscale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfoarea3dscale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_tschchartinfobar3dscale;
        break;
      }

      // optional .TSCH.Chart3DVectorArchive tschchartinfobar3dscale = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfobar3dscale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfobar3dscale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_tschchartinfocolumn3dscale;
        break;
      }

      // optional .TSCH.Chart3DVectorArchive tschchartinfocolumn3dscale = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfocolumn3dscale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfocolumn3dscale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_tschchartinfodefault3dscale;
        break;
      }

      // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dscale = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfodefault3dscale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfodefault3dscale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_tschchartinfoline3dscale;
        break;
      }

      // optional .TSCH.Chart3DVectorArchive tschchartinfoline3dscale = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfoline3dscale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfoline3dscale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_tschchartinfopie3dscale;
        break;
      }

      // optional .TSCH.Chart3DVectorArchive tschchartinfopie3dscale = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfopie3dscale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfopie3dscale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_tschchartinfodefault3dviewport;
        break;
      }

      // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dviewport = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfodefault3dviewport:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfodefault3dviewport()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_tschchartinfodefaultpiestartangle;
        break;
      }

      // optional float tschchartinfodefaultpiestartangle = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartinfodefaultpiestartangle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartinfodefaultpiestartangle_)));
          set_has_tschchartinfodefaultpiestartangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_tschchartinfodefaultshowlegend;
        break;
      }

      // optional bool tschchartinfodefaultshowlegend = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfodefaultshowlegend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartinfodefaultshowlegend_)));
          set_has_tschchartinfodefaultshowlegend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_tschchartinfodefaultshowtitle;
        break;
      }

      // optional bool tschchartinfodefaultshowtitle = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfodefaultshowtitle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartinfodefaultshowtitle_)));
          set_has_tschchartinfodefaultshowtitle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_tschchartinfodefaultskiphiddendata;
        break;
      }

      // optional bool tschchartinfodefaultskiphiddendata = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfodefaultskiphiddendata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartinfodefaultskiphiddendata_)));
          set_has_tschchartinfodefaultskiphiddendata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_tschchartinfodefaulttitle;
        break;
      }

      // optional string tschchartinfodefaulttitle = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfodefaulttitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tschchartinfodefaulttitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tschchartinfodefaulttitle().data(), this->tschchartinfodefaulttitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_tschchartinfodefaultdatasetnamelocation;
        break;
      }

      // optional int32 tschchartinfodefaultdatasetnamelocation = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfodefaultdatasetnamelocation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartinfodefaultdatasetnamelocation_)));
          set_has_tschchartinfodefaultdatasetnamelocation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_tschchartinfodefaultmultidatacontroltype;
        break;
      }

      // optional int32 tschchartinfodefaultmultidatacontroltype = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfodefaultmultidatacontroltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartinfodefaultmultidatacontroltype_)));
          set_has_tschchartinfodefaultmultidatacontroltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartNonStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tschchartinfodefault3dbarshape = 1;
  if (has_tschchartinfodefault3dbarshape()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tschchartinfodefault3dbarshape(), output);
  }

  // optional bool tschchartinfodefault3dbeveledges = 2;
  if (has_tschchartinfodefault3dbeveledges()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->tschchartinfodefault3dbeveledges(), output);
  }

  // optional float tschchartinfodefault3dintersetdepthgap = 3;
  if (has_tschchartinfodefault3dintersetdepthgap()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->tschchartinfodefault3dintersetdepthgap(), output);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3drotation = 4;
  if (has_tschchartinfodefault3drotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tschchartinfodefault3drotation(), output);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfoarea3dscale = 5;
  if (has_tschchartinfoarea3dscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tschchartinfoarea3dscale(), output);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfobar3dscale = 6;
  if (has_tschchartinfobar3dscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->tschchartinfobar3dscale(), output);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfocolumn3dscale = 7;
  if (has_tschchartinfocolumn3dscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tschchartinfocolumn3dscale(), output);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dscale = 8;
  if (has_tschchartinfodefault3dscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->tschchartinfodefault3dscale(), output);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfoline3dscale = 9;
  if (has_tschchartinfoline3dscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->tschchartinfoline3dscale(), output);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfopie3dscale = 10;
  if (has_tschchartinfopie3dscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->tschchartinfopie3dscale(), output);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dviewport = 11;
  if (has_tschchartinfodefault3dviewport()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->tschchartinfodefault3dviewport(), output);
  }

  // optional float tschchartinfodefaultpiestartangle = 19;
  if (has_tschchartinfodefaultpiestartangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->tschchartinfodefaultpiestartangle(), output);
  }

  // optional bool tschchartinfodefaultshowlegend = 20;
  if (has_tschchartinfodefaultshowlegend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->tschchartinfodefaultshowlegend(), output);
  }

  // optional bool tschchartinfodefaultshowtitle = 21;
  if (has_tschchartinfodefaultshowtitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->tschchartinfodefaultshowtitle(), output);
  }

  // optional bool tschchartinfodefaultskiphiddendata = 22;
  if (has_tschchartinfodefaultskiphiddendata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->tschchartinfodefaultskiphiddendata(), output);
  }

  // optional string tschchartinfodefaulttitle = 23;
  if (has_tschchartinfodefaulttitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tschchartinfodefaulttitle().data(), this->tschchartinfodefaulttitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->tschchartinfodefaulttitle(), output);
  }

  // optional int32 tschchartinfodefaultdatasetnamelocation = 24;
  if (has_tschchartinfodefaultdatasetnamelocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->tschchartinfodefaultdatasetnamelocation(), output);
  }

  // optional int32 tschchartinfodefaultmultidatacontroltype = 25;
  if (has_tschchartinfodefaultmultidatacontroltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->tschchartinfodefaultmultidatacontroltype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartNonStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tschchartinfodefault3dbarshape = 1;
  if (has_tschchartinfodefault3dbarshape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tschchartinfodefault3dbarshape(), target);
  }

  // optional bool tschchartinfodefault3dbeveledges = 2;
  if (has_tschchartinfodefault3dbeveledges()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->tschchartinfodefault3dbeveledges(), target);
  }

  // optional float tschchartinfodefault3dintersetdepthgap = 3;
  if (has_tschchartinfodefault3dintersetdepthgap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->tschchartinfodefault3dintersetdepthgap(), target);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3drotation = 4;
  if (has_tschchartinfodefault3drotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tschchartinfodefault3drotation(), target);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfoarea3dscale = 5;
  if (has_tschchartinfoarea3dscale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tschchartinfoarea3dscale(), target);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfobar3dscale = 6;
  if (has_tschchartinfobar3dscale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->tschchartinfobar3dscale(), target);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfocolumn3dscale = 7;
  if (has_tschchartinfocolumn3dscale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->tschchartinfocolumn3dscale(), target);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dscale = 8;
  if (has_tschchartinfodefault3dscale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->tschchartinfodefault3dscale(), target);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfoline3dscale = 9;
  if (has_tschchartinfoline3dscale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->tschchartinfoline3dscale(), target);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfopie3dscale = 10;
  if (has_tschchartinfopie3dscale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->tschchartinfopie3dscale(), target);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dviewport = 11;
  if (has_tschchartinfodefault3dviewport()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->tschchartinfodefault3dviewport(), target);
  }

  // optional float tschchartinfodefaultpiestartangle = 19;
  if (has_tschchartinfodefaultpiestartangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->tschchartinfodefaultpiestartangle(), target);
  }

  // optional bool tschchartinfodefaultshowlegend = 20;
  if (has_tschchartinfodefaultshowlegend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->tschchartinfodefaultshowlegend(), target);
  }

  // optional bool tschchartinfodefaultshowtitle = 21;
  if (has_tschchartinfodefaultshowtitle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->tschchartinfodefaultshowtitle(), target);
  }

  // optional bool tschchartinfodefaultskiphiddendata = 22;
  if (has_tschchartinfodefaultskiphiddendata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->tschchartinfodefaultskiphiddendata(), target);
  }

  // optional string tschchartinfodefaulttitle = 23;
  if (has_tschchartinfodefaulttitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tschchartinfodefaulttitle().data(), this->tschchartinfodefaulttitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->tschchartinfodefaulttitle(), target);
  }

  // optional int32 tschchartinfodefaultdatasetnamelocation = 24;
  if (has_tschchartinfodefaultdatasetnamelocation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->tschchartinfodefaultdatasetnamelocation(), target);
  }

  // optional int32 tschchartinfodefaultmultidatacontroltype = 25;
  if (has_tschchartinfodefaultmultidatacontroltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->tschchartinfodefaultmultidatacontroltype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartNonStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tschchartinfodefault3dbarshape = 1;
    if (has_tschchartinfodefault3dbarshape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartinfodefault3dbarshape());
    }

    // optional bool tschchartinfodefault3dbeveledges = 2;
    if (has_tschchartinfodefault3dbeveledges()) {
      total_size += 1 + 1;
    }

    // optional float tschchartinfodefault3dintersetdepthgap = 3;
    if (has_tschchartinfodefault3dintersetdepthgap()) {
      total_size += 1 + 4;
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3drotation = 4;
    if (has_tschchartinfodefault3drotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfodefault3drotation());
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfoarea3dscale = 5;
    if (has_tschchartinfoarea3dscale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfoarea3dscale());
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfobar3dscale = 6;
    if (has_tschchartinfobar3dscale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfobar3dscale());
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfocolumn3dscale = 7;
    if (has_tschchartinfocolumn3dscale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfocolumn3dscale());
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dscale = 8;
    if (has_tschchartinfodefault3dscale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfodefault3dscale());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TSCH.Chart3DVectorArchive tschchartinfoline3dscale = 9;
    if (has_tschchartinfoline3dscale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfoline3dscale());
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfopie3dscale = 10;
    if (has_tschchartinfopie3dscale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfopie3dscale());
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dviewport = 11;
    if (has_tschchartinfodefault3dviewport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfodefault3dviewport());
    }

    // optional float tschchartinfodefaultpiestartangle = 19;
    if (has_tschchartinfodefaultpiestartangle()) {
      total_size += 2 + 4;
    }

    // optional bool tschchartinfodefaultshowlegend = 20;
    if (has_tschchartinfodefaultshowlegend()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfodefaultshowtitle = 21;
    if (has_tschchartinfodefaultshowtitle()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfodefaultskiphiddendata = 22;
    if (has_tschchartinfodefaultskiphiddendata()) {
      total_size += 2 + 1;
    }

    // optional string tschchartinfodefaulttitle = 23;
    if (has_tschchartinfodefaulttitle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tschchartinfodefaulttitle());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 tschchartinfodefaultdatasetnamelocation = 24;
    if (has_tschchartinfodefaultdatasetnamelocation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartinfodefaultdatasetnamelocation());
    }

    // optional int32 tschchartinfodefaultmultidatacontroltype = 25;
    if (has_tschchartinfodefaultmultidatacontroltype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartinfodefaultmultidatacontroltype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartNonStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartNonStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartNonStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartNonStyleArchive::MergeFrom(const ChartNonStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tschchartinfodefault3dbarshape()) {
      set_tschchartinfodefault3dbarshape(from.tschchartinfodefault3dbarshape());
    }
    if (from.has_tschchartinfodefault3dbeveledges()) {
      set_tschchartinfodefault3dbeveledges(from.tschchartinfodefault3dbeveledges());
    }
    if (from.has_tschchartinfodefault3dintersetdepthgap()) {
      set_tschchartinfodefault3dintersetdepthgap(from.tschchartinfodefault3dintersetdepthgap());
    }
    if (from.has_tschchartinfodefault3drotation()) {
      mutable_tschchartinfodefault3drotation()->::TSCH::Chart3DVectorArchive::MergeFrom(from.tschchartinfodefault3drotation());
    }
    if (from.has_tschchartinfoarea3dscale()) {
      mutable_tschchartinfoarea3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(from.tschchartinfoarea3dscale());
    }
    if (from.has_tschchartinfobar3dscale()) {
      mutable_tschchartinfobar3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(from.tschchartinfobar3dscale());
    }
    if (from.has_tschchartinfocolumn3dscale()) {
      mutable_tschchartinfocolumn3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(from.tschchartinfocolumn3dscale());
    }
    if (from.has_tschchartinfodefault3dscale()) {
      mutable_tschchartinfodefault3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(from.tschchartinfodefault3dscale());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tschchartinfoline3dscale()) {
      mutable_tschchartinfoline3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(from.tschchartinfoline3dscale());
    }
    if (from.has_tschchartinfopie3dscale()) {
      mutable_tschchartinfopie3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(from.tschchartinfopie3dscale());
    }
    if (from.has_tschchartinfodefault3dviewport()) {
      mutable_tschchartinfodefault3dviewport()->::TSCH::Chart3DVectorArchive::MergeFrom(from.tschchartinfodefault3dviewport());
    }
    if (from.has_tschchartinfodefaultpiestartangle()) {
      set_tschchartinfodefaultpiestartangle(from.tschchartinfodefaultpiestartangle());
    }
    if (from.has_tschchartinfodefaultshowlegend()) {
      set_tschchartinfodefaultshowlegend(from.tschchartinfodefaultshowlegend());
    }
    if (from.has_tschchartinfodefaultshowtitle()) {
      set_tschchartinfodefaultshowtitle(from.tschchartinfodefaultshowtitle());
    }
    if (from.has_tschchartinfodefaultskiphiddendata()) {
      set_tschchartinfodefaultskiphiddendata(from.tschchartinfodefaultskiphiddendata());
    }
    if (from.has_tschchartinfodefaulttitle()) {
      set_tschchartinfodefaulttitle(from.tschchartinfodefaulttitle());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tschchartinfodefaultdatasetnamelocation()) {
      set_tschchartinfodefaultdatasetnamelocation(from.tschchartinfodefaultdatasetnamelocation());
    }
    if (from.has_tschchartinfodefaultmultidatacontroltype()) {
      set_tschchartinfodefaultmultidatacontroltype(from.tschchartinfodefaultmultidatacontroltype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartNonStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartNonStyleArchive::CopyFrom(const ChartNonStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartNonStyleArchive::IsInitialized() const {

  if (has_tschchartinfodefault3drotation()) {
    if (!this->tschchartinfodefault3drotation().IsInitialized()) return false;
  }
  if (has_tschchartinfoarea3dscale()) {
    if (!this->tschchartinfoarea3dscale().IsInitialized()) return false;
  }
  if (has_tschchartinfobar3dscale()) {
    if (!this->tschchartinfobar3dscale().IsInitialized()) return false;
  }
  if (has_tschchartinfocolumn3dscale()) {
    if (!this->tschchartinfocolumn3dscale().IsInitialized()) return false;
  }
  if (has_tschchartinfodefault3dscale()) {
    if (!this->tschchartinfodefault3dscale().IsInitialized()) return false;
  }
  if (has_tschchartinfoline3dscale()) {
    if (!this->tschchartinfoline3dscale().IsInitialized()) return false;
  }
  if (has_tschchartinfopie3dscale()) {
    if (!this->tschchartinfopie3dscale().IsInitialized()) return false;
  }
  if (has_tschchartinfodefault3dviewport()) {
    if (!this->tschchartinfodefault3dviewport().IsInitialized()) return false;
  }
  return true;
}

void ChartNonStyleArchive::Swap(ChartNonStyleArchive* other) {
  if (other != this) {
    std::swap(tschchartinfodefault3dbarshape_, other->tschchartinfodefault3dbarshape_);
    std::swap(tschchartinfodefault3dbeveledges_, other->tschchartinfodefault3dbeveledges_);
    std::swap(tschchartinfodefault3dintersetdepthgap_, other->tschchartinfodefault3dintersetdepthgap_);
    std::swap(tschchartinfodefault3drotation_, other->tschchartinfodefault3drotation_);
    std::swap(tschchartinfoarea3dscale_, other->tschchartinfoarea3dscale_);
    std::swap(tschchartinfobar3dscale_, other->tschchartinfobar3dscale_);
    std::swap(tschchartinfocolumn3dscale_, other->tschchartinfocolumn3dscale_);
    std::swap(tschchartinfodefault3dscale_, other->tschchartinfodefault3dscale_);
    std::swap(tschchartinfoline3dscale_, other->tschchartinfoline3dscale_);
    std::swap(tschchartinfopie3dscale_, other->tschchartinfopie3dscale_);
    std::swap(tschchartinfodefault3dviewport_, other->tschchartinfodefault3dviewport_);
    std::swap(tschchartinfodefaultpiestartangle_, other->tschchartinfodefaultpiestartangle_);
    std::swap(tschchartinfodefaultshowlegend_, other->tschchartinfodefaultshowlegend_);
    std::swap(tschchartinfodefaultshowtitle_, other->tschchartinfodefaultshowtitle_);
    std::swap(tschchartinfodefaultskiphiddendata_, other->tschchartinfodefaultskiphiddendata_);
    std::swap(tschchartinfodefaulttitle_, other->tschchartinfodefaulttitle_);
    std::swap(tschchartinfodefaultdatasetnamelocation_, other->tschchartinfodefaultdatasetnamelocation_);
    std::swap(tschchartinfodefaultmultidatacontroltype_, other->tschchartinfodefaultmultidatacontroltype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartNonStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartNonStyleArchive_descriptor_;
  metadata.reflection = ChartNonStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LegendStyleArchive::kTschlegendmodeldefaultfillFieldNumber;
const int LegendStyleArchive::kTschlegendmodeldefaultlabelparagraphstyleindexFieldNumber;
const int LegendStyleArchive::kTschlegendmodeldefaultopacityFieldNumber;
const int LegendStyleArchive::kTschlegendmodeldefaultshadowFieldNumber;
const int LegendStyleArchive::kTschlegendmodeldefaultstrokeFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int LegendStyleArchive::kCurrentFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::TSCH::LegendStyleArchive,
    ::google::protobuf::internal::MessageTypeTraits< ::TSCH::Generated::LegendStyleArchive >, 11, false >
  LegendStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::LegendStyleArchive::default_instance());
LegendStyleArchive::LegendStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LegendStyleArchive::InitAsDefaultInstance() {
  tschlegendmodeldefaultfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschlegendmodeldefaultshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschlegendmodeldefaultstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
}

LegendStyleArchive::LegendStyleArchive(const LegendStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LegendStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  tschlegendmodeldefaultfill_ = NULL;
  tschlegendmodeldefaultlabelparagraphstyleindex_ = 0;
  tschlegendmodeldefaultopacity_ = 0;
  tschlegendmodeldefaultshadow_ = NULL;
  tschlegendmodeldefaultstroke_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LegendStyleArchive::~LegendStyleArchive() {
  SharedDtor();
}

void LegendStyleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete tschlegendmodeldefaultfill_;
    delete tschlegendmodeldefaultshadow_;
    delete tschlegendmodeldefaultstroke_;
  }
}

void LegendStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LegendStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LegendStyleArchive_descriptor_;
}

const LegendStyleArchive& LegendStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eGEN_2eproto();
  return *default_instance_;
}

LegendStyleArchive* LegendStyleArchive::default_instance_ = NULL;

LegendStyleArchive* LegendStyleArchive::New() const {
  return new LegendStyleArchive;
}

void LegendStyleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tschlegendmodeldefaultfill()) {
      if (tschlegendmodeldefaultfill_ != NULL) tschlegendmodeldefaultfill_->::TSD::FillArchive::Clear();
    }
    tschlegendmodeldefaultlabelparagraphstyleindex_ = 0;
    tschlegendmodeldefaultopacity_ = 0;
    if (has_tschlegendmodeldefaultshadow()) {
      if (tschlegendmodeldefaultshadow_ != NULL) tschlegendmodeldefaultshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschlegendmodeldefaultstroke()) {
      if (tschlegendmodeldefaultstroke_ != NULL) tschlegendmodeldefaultstroke_->::TSD::StrokeArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LegendStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSD.FillArchive tschlegendmodeldefaultfill = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschlegendmodeldefaultfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tschlegendmodeldefaultlabelparagraphstyleindex;
        break;
      }

      // optional int32 tschlegendmodeldefaultlabelparagraphstyleindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschlegendmodeldefaultlabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschlegendmodeldefaultlabelparagraphstyleindex_)));
          set_has_tschlegendmodeldefaultlabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_tschlegendmodeldefaultopacity;
        break;
      }

      // optional float tschlegendmodeldefaultopacity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschlegendmodeldefaultopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschlegendmodeldefaultopacity_)));
          set_has_tschlegendmodeldefaultopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tschlegendmodeldefaultshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschlegendmodeldefaultshadow = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschlegendmodeldefaultshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschlegendmodeldefaultshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tschlegendmodeldefaultstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschlegendmodeldefaultstroke = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschlegendmodeldefaultstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschlegendmodeldefaultstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LegendStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSD.FillArchive tschlegendmodeldefaultfill = 1;
  if (has_tschlegendmodeldefaultfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tschlegendmodeldefaultfill(), output);
  }

  // optional int32 tschlegendmodeldefaultlabelparagraphstyleindex = 2;
  if (has_tschlegendmodeldefaultlabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tschlegendmodeldefaultlabelparagraphstyleindex(), output);
  }

  // optional float tschlegendmodeldefaultopacity = 3;
  if (has_tschlegendmodeldefaultopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->tschlegendmodeldefaultopacity(), output);
  }

  // optional .TSD.ShadowArchive tschlegendmodeldefaultshadow = 4;
  if (has_tschlegendmodeldefaultshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tschlegendmodeldefaultshadow(), output);
  }

  // optional .TSD.StrokeArchive tschlegendmodeldefaultstroke = 5;
  if (has_tschlegendmodeldefaultstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tschlegendmodeldefaultstroke(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LegendStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSD.FillArchive tschlegendmodeldefaultfill = 1;
  if (has_tschlegendmodeldefaultfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tschlegendmodeldefaultfill(), target);
  }

  // optional int32 tschlegendmodeldefaultlabelparagraphstyleindex = 2;
  if (has_tschlegendmodeldefaultlabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tschlegendmodeldefaultlabelparagraphstyleindex(), target);
  }

  // optional float tschlegendmodeldefaultopacity = 3;
  if (has_tschlegendmodeldefaultopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->tschlegendmodeldefaultopacity(), target);
  }

  // optional .TSD.ShadowArchive tschlegendmodeldefaultshadow = 4;
  if (has_tschlegendmodeldefaultshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tschlegendmodeldefaultshadow(), target);
  }

  // optional .TSD.StrokeArchive tschlegendmodeldefaultstroke = 5;
  if (has_tschlegendmodeldefaultstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tschlegendmodeldefaultstroke(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LegendStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSD.FillArchive tschlegendmodeldefaultfill = 1;
    if (has_tschlegendmodeldefaultfill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschlegendmodeldefaultfill());
    }

    // optional int32 tschlegendmodeldefaultlabelparagraphstyleindex = 2;
    if (has_tschlegendmodeldefaultlabelparagraphstyleindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschlegendmodeldefaultlabelparagraphstyleindex());
    }

    // optional float tschlegendmodeldefaultopacity = 3;
    if (has_tschlegendmodeldefaultopacity()) {
      total_size += 1 + 4;
    }

    // optional .TSD.ShadowArchive tschlegendmodeldefaultshadow = 4;
    if (has_tschlegendmodeldefaultshadow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschlegendmodeldefaultshadow());
    }

    // optional .TSD.StrokeArchive tschlegendmodeldefaultstroke = 5;
    if (has_tschlegendmodeldefaultstroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschlegendmodeldefaultstroke());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LegendStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LegendStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LegendStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LegendStyleArchive::MergeFrom(const LegendStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tschlegendmodeldefaultfill()) {
      mutable_tschlegendmodeldefaultfill()->::TSD::FillArchive::MergeFrom(from.tschlegendmodeldefaultfill());
    }
    if (from.has_tschlegendmodeldefaultlabelparagraphstyleindex()) {
      set_tschlegendmodeldefaultlabelparagraphstyleindex(from.tschlegendmodeldefaultlabelparagraphstyleindex());
    }
    if (from.has_tschlegendmodeldefaultopacity()) {
      set_tschlegendmodeldefaultopacity(from.tschlegendmodeldefaultopacity());
    }
    if (from.has_tschlegendmodeldefaultshadow()) {
      mutable_tschlegendmodeldefaultshadow()->::TSD::ShadowArchive::MergeFrom(from.tschlegendmodeldefaultshadow());
    }
    if (from.has_tschlegendmodeldefaultstroke()) {
      mutable_tschlegendmodeldefaultstroke()->::TSD::StrokeArchive::MergeFrom(from.tschlegendmodeldefaultstroke());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LegendStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegendStyleArchive::CopyFrom(const LegendStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegendStyleArchive::IsInitialized() const {

  if (has_tschlegendmodeldefaultfill()) {
    if (!this->tschlegendmodeldefaultfill().IsInitialized()) return false;
  }
  if (has_tschlegendmodeldefaultshadow()) {
    if (!this->tschlegendmodeldefaultshadow().IsInitialized()) return false;
  }
  if (has_tschlegendmodeldefaultstroke()) {
    if (!this->tschlegendmodeldefaultstroke().IsInitialized()) return false;
  }
  return true;
}

void LegendStyleArchive::Swap(LegendStyleArchive* other) {
  if (other != this) {
    std::swap(tschlegendmodeldefaultfill_, other->tschlegendmodeldefaultfill_);
    std::swap(tschlegendmodeldefaultlabelparagraphstyleindex_, other->tschlegendmodeldefaultlabelparagraphstyleindex_);
    std::swap(tschlegendmodeldefaultopacity_, other->tschlegendmodeldefaultopacity_);
    std::swap(tschlegendmodeldefaultshadow_, other->tschlegendmodeldefaultshadow_);
    std::swap(tschlegendmodeldefaultstroke_, other->tschlegendmodeldefaultstroke_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LegendStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LegendStyleArchive_descriptor_;
  metadata.reflection = LegendStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int LegendNonStyleArchive::kCurrentFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::TSCH::LegendNonStyleArchive,
    ::google::protobuf::internal::MessageTypeTraits< ::TSCH::Generated::LegendNonStyleArchive >, 11, false >
  LegendNonStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::LegendNonStyleArchive::default_instance());
LegendNonStyleArchive::LegendNonStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LegendNonStyleArchive::InitAsDefaultInstance() {
}

LegendNonStyleArchive::LegendNonStyleArchive(const LegendNonStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LegendNonStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LegendNonStyleArchive::~LegendNonStyleArchive() {
  SharedDtor();
}

void LegendNonStyleArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LegendNonStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LegendNonStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LegendNonStyleArchive_descriptor_;
}

const LegendNonStyleArchive& LegendNonStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eGEN_2eproto();
  return *default_instance_;
}

LegendNonStyleArchive* LegendNonStyleArchive::default_instance_ = NULL;

LegendNonStyleArchive* LegendNonStyleArchive::New() const {
  return new LegendNonStyleArchive;
}

void LegendNonStyleArchive::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LegendNonStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void LegendNonStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LegendNonStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LegendNonStyleArchive::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LegendNonStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LegendNonStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LegendNonStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LegendNonStyleArchive::MergeFrom(const LegendNonStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LegendNonStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegendNonStyleArchive::CopyFrom(const LegendNonStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegendNonStyleArchive::IsInitialized() const {

  return true;
}

void LegendNonStyleArchive::Swap(LegendNonStyleArchive* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LegendNonStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LegendNonStyleArchive_descriptor_;
  metadata.reflection = LegendNonStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartAxisStyleArchive::kTschchartaxiscategory3DgridlineopacityFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvalue3DgridlineopacityFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategory3DgridlinestrokeFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvalue3DgridlinestrokeFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategoryhorizontalspacingFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategorylabelparagraphstyleindexFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisdefaultlabelparagraphstyleindexFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvaluelabelparagraphstyleindexFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategorylabelsorientationFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisdefaultlabelsorientationFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvaluelabelsorientationFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategorymajorgridlineopacityFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvaluemajorgridlineopacityFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategorymajorgridlineshadowFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvaluemajorgridlineshadowFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategorymajorgridlinestrokeFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvaluemajorgridlinestrokeFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategoryminorgridlineopacityFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvalueminorgridlineopacityFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategoryminorgridlineshadowFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvalueminorgridlineshadowFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategoryminorgridlinestrokeFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvalueminorgridlinestrokeFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategoryshowaxisFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvalueshowaxisFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategoryshowlastlabelFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategoryshowmajorgridlinesFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvalueshowmajorgridlinesFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategoryshowmajortickmarksFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvalueshowmajortickmarksFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvalueshowminimumlabelFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategoryshowminorgridlinesFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvalueshowminorgridlinesFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategoryshowminortickmarksFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvalueshowminortickmarksFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategorytickmarklocationFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvaluetickmarklocationFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategorytitleparagraphstyleindexFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisdefaulttitleparagraphstyleindexFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxisvaluetitleparagraphstyleindexFieldNumber;
const int ChartAxisStyleArchive::kTschchartaxiscategoryverticalspacingFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ChartAxisStyleArchive::kCurrentFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartAxisStyleArchive,
    ::google::protobuf::internal::MessageTypeTraits< ::TSCH::Generated::ChartAxisStyleArchive >, 11, false >
  ChartAxisStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::ChartAxisStyleArchive::default_instance());
ChartAxisStyleArchive::ChartAxisStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartAxisStyleArchive::InitAsDefaultInstance() {
  tschchartaxiscategory3dgridlinestroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartaxisvalue3dgridlinestroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartaxiscategorymajorgridlineshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartaxisvaluemajorgridlineshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartaxiscategorymajorgridlinestroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartaxisvaluemajorgridlinestroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartaxiscategoryminorgridlineshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartaxisvalueminorgridlineshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartaxiscategoryminorgridlinestroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartaxisvalueminorgridlinestroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
}

ChartAxisStyleArchive::ChartAxisStyleArchive(const ChartAxisStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartAxisStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  tschchartaxiscategory3dgridlineopacity_ = 0;
  tschchartaxisvalue3dgridlineopacity_ = 0;
  tschchartaxiscategory3dgridlinestroke_ = NULL;
  tschchartaxisvalue3dgridlinestroke_ = NULL;
  tschchartaxiscategoryhorizontalspacing_ = 0;
  tschchartaxiscategorylabelparagraphstyleindex_ = 0;
  tschchartaxisdefaultlabelparagraphstyleindex_ = 0;
  tschchartaxisvaluelabelparagraphstyleindex_ = 0;
  tschchartaxiscategorylabelsorientation_ = 0;
  tschchartaxisdefaultlabelsorientation_ = 0;
  tschchartaxisvaluelabelsorientation_ = 0;
  tschchartaxiscategorymajorgridlineopacity_ = 0;
  tschchartaxisvaluemajorgridlineopacity_ = 0;
  tschchartaxiscategorymajorgridlineshadow_ = NULL;
  tschchartaxisvaluemajorgridlineshadow_ = NULL;
  tschchartaxiscategorymajorgridlinestroke_ = NULL;
  tschchartaxisvaluemajorgridlinestroke_ = NULL;
  tschchartaxiscategoryminorgridlineopacity_ = 0;
  tschchartaxisvalueminorgridlineopacity_ = 0;
  tschchartaxiscategoryminorgridlineshadow_ = NULL;
  tschchartaxisvalueminorgridlineshadow_ = NULL;
  tschchartaxiscategoryminorgridlinestroke_ = NULL;
  tschchartaxisvalueminorgridlinestroke_ = NULL;
  tschchartaxiscategoryshowaxis_ = false;
  tschchartaxisvalueshowaxis_ = false;
  tschchartaxiscategoryshowlastlabel_ = false;
  tschchartaxiscategoryshowmajorgridlines_ = false;
  tschchartaxisvalueshowmajorgridlines_ = false;
  tschchartaxiscategoryshowmajortickmarks_ = false;
  tschchartaxisvalueshowmajortickmarks_ = false;
  tschchartaxisvalueshowminimumlabel_ = false;
  tschchartaxiscategoryshowminorgridlines_ = false;
  tschchartaxisvalueshowminorgridlines_ = false;
  tschchartaxiscategoryshowminortickmarks_ = false;
  tschchartaxisvalueshowminortickmarks_ = false;
  tschchartaxiscategorytickmarklocation_ = 0;
  tschchartaxisvaluetickmarklocation_ = 0;
  tschchartaxiscategorytitleparagraphstyleindex_ = 0;
  tschchartaxisdefaulttitleparagraphstyleindex_ = 0;
  tschchartaxisvaluetitleparagraphstyleindex_ = 0;
  tschchartaxiscategoryverticalspacing_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartAxisStyleArchive::~ChartAxisStyleArchive() {
  SharedDtor();
}

void ChartAxisStyleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete tschchartaxiscategory3dgridlinestroke_;
    delete tschchartaxisvalue3dgridlinestroke_;
    delete tschchartaxiscategorymajorgridlineshadow_;
    delete tschchartaxisvaluemajorgridlineshadow_;
    delete tschchartaxiscategorymajorgridlinestroke_;
    delete tschchartaxisvaluemajorgridlinestroke_;
    delete tschchartaxiscategoryminorgridlineshadow_;
    delete tschchartaxisvalueminorgridlineshadow_;
    delete tschchartaxiscategoryminorgridlinestroke_;
    delete tschchartaxisvalueminorgridlinestroke_;
  }
}

void ChartAxisStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartAxisStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartAxisStyleArchive_descriptor_;
}

const ChartAxisStyleArchive& ChartAxisStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eGEN_2eproto();
  return *default_instance_;
}

ChartAxisStyleArchive* ChartAxisStyleArchive::default_instance_ = NULL;

ChartAxisStyleArchive* ChartAxisStyleArchive::New() const {
  return new ChartAxisStyleArchive;
}

void ChartAxisStyleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tschchartaxiscategory3dgridlineopacity_ = 0;
    tschchartaxisvalue3dgridlineopacity_ = 0;
    if (has_tschchartaxiscategory3dgridlinestroke()) {
      if (tschchartaxiscategory3dgridlinestroke_ != NULL) tschchartaxiscategory3dgridlinestroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartaxisvalue3dgridlinestroke()) {
      if (tschchartaxisvalue3dgridlinestroke_ != NULL) tschchartaxisvalue3dgridlinestroke_->::TSD::StrokeArchive::Clear();
    }
    tschchartaxiscategoryhorizontalspacing_ = 0;
    tschchartaxiscategorylabelparagraphstyleindex_ = 0;
    tschchartaxisdefaultlabelparagraphstyleindex_ = 0;
    tschchartaxisvaluelabelparagraphstyleindex_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    tschchartaxiscategorylabelsorientation_ = 0;
    tschchartaxisdefaultlabelsorientation_ = 0;
    tschchartaxisvaluelabelsorientation_ = 0;
    tschchartaxiscategorymajorgridlineopacity_ = 0;
    tschchartaxisvaluemajorgridlineopacity_ = 0;
    if (has_tschchartaxiscategorymajorgridlineshadow()) {
      if (tschchartaxiscategorymajorgridlineshadow_ != NULL) tschchartaxiscategorymajorgridlineshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartaxisvaluemajorgridlineshadow()) {
      if (tschchartaxisvaluemajorgridlineshadow_ != NULL) tschchartaxisvaluemajorgridlineshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartaxiscategorymajorgridlinestroke()) {
      if (tschchartaxiscategorymajorgridlinestroke_ != NULL) tschchartaxiscategorymajorgridlinestroke_->::TSD::StrokeArchive::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_tschchartaxisvaluemajorgridlinestroke()) {
      if (tschchartaxisvaluemajorgridlinestroke_ != NULL) tschchartaxisvaluemajorgridlinestroke_->::TSD::StrokeArchive::Clear();
    }
    tschchartaxiscategoryminorgridlineopacity_ = 0;
    tschchartaxisvalueminorgridlineopacity_ = 0;
    if (has_tschchartaxiscategoryminorgridlineshadow()) {
      if (tschchartaxiscategoryminorgridlineshadow_ != NULL) tschchartaxiscategoryminorgridlineshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartaxisvalueminorgridlineshadow()) {
      if (tschchartaxisvalueminorgridlineshadow_ != NULL) tschchartaxisvalueminorgridlineshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartaxiscategoryminorgridlinestroke()) {
      if (tschchartaxiscategoryminorgridlinestroke_ != NULL) tschchartaxiscategoryminorgridlinestroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartaxisvalueminorgridlinestroke()) {
      if (tschchartaxisvalueminorgridlinestroke_ != NULL) tschchartaxisvalueminorgridlinestroke_->::TSD::StrokeArchive::Clear();
    }
    tschchartaxiscategoryshowaxis_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    tschchartaxisvalueshowaxis_ = false;
    tschchartaxiscategoryshowlastlabel_ = false;
    tschchartaxiscategoryshowmajorgridlines_ = false;
    tschchartaxisvalueshowmajorgridlines_ = false;
    tschchartaxiscategoryshowmajortickmarks_ = false;
    tschchartaxisvalueshowmajortickmarks_ = false;
    tschchartaxisvalueshowminimumlabel_ = false;
    tschchartaxiscategoryshowminorgridlines_ = false;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    tschchartaxisvalueshowminorgridlines_ = false;
    tschchartaxiscategoryshowminortickmarks_ = false;
    tschchartaxisvalueshowminortickmarks_ = false;
    tschchartaxiscategorytickmarklocation_ = 0;
    tschchartaxisvaluetickmarklocation_ = 0;
    tschchartaxiscategorytitleparagraphstyleindex_ = 0;
    tschchartaxisdefaulttitleparagraphstyleindex_ = 0;
    tschchartaxisvaluetitleparagraphstyleindex_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    tschchartaxiscategoryverticalspacing_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartAxisStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float tschchartaxiscategory3dgridlineopacity = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartaxiscategory3dgridlineopacity_)));
          set_has_tschchartaxiscategory3dgridlineopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_tschchartaxisvalue3dgridlineopacity;
        break;
      }

      // optional float tschchartaxisvalue3dgridlineopacity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartaxisvalue3dgridlineopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartaxisvalue3dgridlineopacity_)));
          set_has_tschchartaxisvalue3dgridlineopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tschchartaxiscategory3dgridlinestroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartaxiscategory3dgridlinestroke = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxiscategory3dgridlinestroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxiscategory3dgridlinestroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tschchartaxisvalue3dgridlinestroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartaxisvalue3dgridlinestroke = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxisvalue3dgridlinestroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxisvalue3dgridlinestroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tschchartaxiscategoryhorizontalspacing;
        break;
      }

      // optional int32 tschchartaxiscategoryhorizontalspacing = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxiscategoryhorizontalspacing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxiscategoryhorizontalspacing_)));
          set_has_tschchartaxiscategoryhorizontalspacing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tschchartaxiscategorylabelparagraphstyleindex;
        break;
      }

      // optional int32 tschchartaxiscategorylabelparagraphstyleindex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxiscategorylabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxiscategorylabelparagraphstyleindex_)));
          set_has_tschchartaxiscategorylabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_tschchartaxisdefaultlabelparagraphstyleindex;
        break;
      }

      // optional int32 tschchartaxisdefaultlabelparagraphstyleindex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisdefaultlabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxisdefaultlabelparagraphstyleindex_)));
          set_has_tschchartaxisdefaultlabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_tschchartaxisvaluelabelparagraphstyleindex;
        break;
      }

      // optional int32 tschchartaxisvaluelabelparagraphstyleindex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisvaluelabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxisvaluelabelparagraphstyleindex_)));
          set_has_tschchartaxisvaluelabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_tschchartaxiscategorylabelsorientation;
        break;
      }

      // optional float tschchartaxiscategorylabelsorientation = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartaxiscategorylabelsorientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartaxiscategorylabelsorientation_)));
          set_has_tschchartaxiscategorylabelsorientation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_tschchartaxisdefaultlabelsorientation;
        break;
      }

      // optional float tschchartaxisdefaultlabelsorientation = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartaxisdefaultlabelsorientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartaxisdefaultlabelsorientation_)));
          set_has_tschchartaxisdefaultlabelsorientation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_tschchartaxisvaluelabelsorientation;
        break;
      }

      // optional float tschchartaxisvaluelabelsorientation = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartaxisvaluelabelsorientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartaxisvaluelabelsorientation_)));
          set_has_tschchartaxisvaluelabelsorientation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_tschchartaxiscategorymajorgridlineopacity;
        break;
      }

      // optional float tschchartaxiscategorymajorgridlineopacity = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartaxiscategorymajorgridlineopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartaxiscategorymajorgridlineopacity_)));
          set_has_tschchartaxiscategorymajorgridlineopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_tschchartaxisvaluemajorgridlineopacity;
        break;
      }

      // optional float tschchartaxisvaluemajorgridlineopacity = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartaxisvaluemajorgridlineopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartaxisvaluemajorgridlineopacity_)));
          set_has_tschchartaxisvaluemajorgridlineopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_tschchartaxiscategorymajorgridlineshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartaxiscategorymajorgridlineshadow = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxiscategorymajorgridlineshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxiscategorymajorgridlineshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_tschchartaxisvaluemajorgridlineshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartaxisvaluemajorgridlineshadow = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxisvaluemajorgridlineshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxisvaluemajorgridlineshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_tschchartaxiscategorymajorgridlinestroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartaxiscategorymajorgridlinestroke = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxiscategorymajorgridlinestroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxiscategorymajorgridlinestroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_tschchartaxisvaluemajorgridlinestroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartaxisvaluemajorgridlinestroke = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxisvaluemajorgridlinestroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxisvaluemajorgridlinestroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_tschchartaxiscategoryminorgridlineopacity;
        break;
      }

      // optional float tschchartaxiscategoryminorgridlineopacity = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartaxiscategoryminorgridlineopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartaxiscategoryminorgridlineopacity_)));
          set_has_tschchartaxiscategoryminorgridlineopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_tschchartaxisvalueminorgridlineopacity;
        break;
      }

      // optional float tschchartaxisvalueminorgridlineopacity = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartaxisvalueminorgridlineopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartaxisvalueminorgridlineopacity_)));
          set_has_tschchartaxisvalueminorgridlineopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_tschchartaxiscategoryminorgridlineshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartaxiscategoryminorgridlineshadow = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxiscategoryminorgridlineshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxiscategoryminorgridlineshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_tschchartaxisvalueminorgridlineshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartaxisvalueminorgridlineshadow = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxisvalueminorgridlineshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxisvalueminorgridlineshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_tschchartaxiscategoryminorgridlinestroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartaxiscategoryminorgridlinestroke = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxiscategoryminorgridlinestroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxiscategoryminorgridlinestroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_tschchartaxisvalueminorgridlinestroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartaxisvalueminorgridlinestroke = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxisvalueminorgridlinestroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxisvalueminorgridlinestroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_tschchartaxiscategoryshowaxis;
        break;
      }

      // optional bool tschchartaxiscategoryshowaxis = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxiscategoryshowaxis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxiscategoryshowaxis_)));
          set_has_tschchartaxiscategoryshowaxis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_tschchartaxisvalueshowaxis;
        break;
      }

      // optional bool tschchartaxisvalueshowaxis = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisvalueshowaxis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxisvalueshowaxis_)));
          set_has_tschchartaxisvalueshowaxis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_tschchartaxiscategoryshowlastlabel;
        break;
      }

      // optional bool tschchartaxiscategoryshowlastlabel = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxiscategoryshowlastlabel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxiscategoryshowlastlabel_)));
          set_has_tschchartaxiscategoryshowlastlabel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_tschchartaxiscategoryshowmajorgridlines;
        break;
      }

      // optional bool tschchartaxiscategoryshowmajorgridlines = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxiscategoryshowmajorgridlines:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxiscategoryshowmajorgridlines_)));
          set_has_tschchartaxiscategoryshowmajorgridlines();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_tschchartaxisvalueshowmajorgridlines;
        break;
      }

      // optional bool tschchartaxisvalueshowmajorgridlines = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisvalueshowmajorgridlines:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxisvalueshowmajorgridlines_)));
          set_has_tschchartaxisvalueshowmajorgridlines();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_tschchartaxiscategoryshowmajortickmarks;
        break;
      }

      // optional bool tschchartaxiscategoryshowmajortickmarks = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxiscategoryshowmajortickmarks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxiscategoryshowmajortickmarks_)));
          set_has_tschchartaxiscategoryshowmajortickmarks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_tschchartaxisvalueshowmajortickmarks;
        break;
      }

      // optional bool tschchartaxisvalueshowmajortickmarks = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisvalueshowmajortickmarks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxisvalueshowmajortickmarks_)));
          set_has_tschchartaxisvalueshowmajortickmarks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_tschchartaxisvalueshowminimumlabel;
        break;
      }

      // optional bool tschchartaxisvalueshowminimumlabel = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisvalueshowminimumlabel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxisvalueshowminimumlabel_)));
          set_has_tschchartaxisvalueshowminimumlabel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_tschchartaxiscategoryshowminorgridlines;
        break;
      }

      // optional bool tschchartaxiscategoryshowminorgridlines = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxiscategoryshowminorgridlines:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxiscategoryshowminorgridlines_)));
          set_has_tschchartaxiscategoryshowminorgridlines();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_tschchartaxisvalueshowminorgridlines;
        break;
      }

      // optional bool tschchartaxisvalueshowminorgridlines = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisvalueshowminorgridlines:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxisvalueshowminorgridlines_)));
          set_has_tschchartaxisvalueshowminorgridlines();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_tschchartaxiscategoryshowminortickmarks;
        break;
      }

      // optional bool tschchartaxiscategoryshowminortickmarks = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxiscategoryshowminortickmarks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxiscategoryshowminortickmarks_)));
          set_has_tschchartaxiscategoryshowminortickmarks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_tschchartaxisvalueshowminortickmarks;
        break;
      }

      // optional bool tschchartaxisvalueshowminortickmarks = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisvalueshowminortickmarks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxisvalueshowminortickmarks_)));
          set_has_tschchartaxisvalueshowminortickmarks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_tschchartaxiscategorytickmarklocation;
        break;
      }

      // optional int32 tschchartaxiscategorytickmarklocation = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxiscategorytickmarklocation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxiscategorytickmarklocation_)));
          set_has_tschchartaxiscategorytickmarklocation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_tschchartaxisvaluetickmarklocation;
        break;
      }

      // optional int32 tschchartaxisvaluetickmarklocation = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisvaluetickmarklocation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxisvaluetickmarklocation_)));
          set_has_tschchartaxisvaluetickmarklocation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_tschchartaxiscategorytitleparagraphstyleindex;
        break;
      }

      // optional int32 tschchartaxiscategorytitleparagraphstyleindex = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxiscategorytitleparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxiscategorytitleparagraphstyleindex_)));
          set_has_tschchartaxiscategorytitleparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_tschchartaxisdefaulttitleparagraphstyleindex;
        break;
      }

      // optional int32 tschchartaxisdefaulttitleparagraphstyleindex = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisdefaulttitleparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxisdefaulttitleparagraphstyleindex_)));
          set_has_tschchartaxisdefaulttitleparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_tschchartaxisvaluetitleparagraphstyleindex;
        break;
      }

      // optional int32 tschchartaxisvaluetitleparagraphstyleindex = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisvaluetitleparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxisvaluetitleparagraphstyleindex_)));
          set_has_tschchartaxisvaluetitleparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_tschchartaxiscategoryverticalspacing;
        break;
      }

      // optional int32 tschchartaxiscategoryverticalspacing = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxiscategoryverticalspacing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxiscategoryverticalspacing_)));
          set_has_tschchartaxiscategoryverticalspacing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartAxisStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float tschchartaxiscategory3dgridlineopacity = 1;
  if (has_tschchartaxiscategory3dgridlineopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->tschchartaxiscategory3dgridlineopacity(), output);
  }

  // optional float tschchartaxisvalue3dgridlineopacity = 2;
  if (has_tschchartaxisvalue3dgridlineopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->tschchartaxisvalue3dgridlineopacity(), output);
  }

  // optional .TSD.StrokeArchive tschchartaxiscategory3dgridlinestroke = 3;
  if (has_tschchartaxiscategory3dgridlinestroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tschchartaxiscategory3dgridlinestroke(), output);
  }

  // optional .TSD.StrokeArchive tschchartaxisvalue3dgridlinestroke = 4;
  if (has_tschchartaxisvalue3dgridlinestroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tschchartaxisvalue3dgridlinestroke(), output);
  }

  // optional int32 tschchartaxiscategoryhorizontalspacing = 5;
  if (has_tschchartaxiscategoryhorizontalspacing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tschchartaxiscategoryhorizontalspacing(), output);
  }

  // optional int32 tschchartaxiscategorylabelparagraphstyleindex = 6;
  if (has_tschchartaxiscategorylabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tschchartaxiscategorylabelparagraphstyleindex(), output);
  }

  // optional int32 tschchartaxisdefaultlabelparagraphstyleindex = 7;
  if (has_tschchartaxisdefaultlabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->tschchartaxisdefaultlabelparagraphstyleindex(), output);
  }

  // optional int32 tschchartaxisvaluelabelparagraphstyleindex = 8;
  if (has_tschchartaxisvaluelabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tschchartaxisvaluelabelparagraphstyleindex(), output);
  }

  // optional float tschchartaxiscategorylabelsorientation = 9;
  if (has_tschchartaxiscategorylabelsorientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->tschchartaxiscategorylabelsorientation(), output);
  }

  // optional float tschchartaxisdefaultlabelsorientation = 10;
  if (has_tschchartaxisdefaultlabelsorientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->tschchartaxisdefaultlabelsorientation(), output);
  }

  // optional float tschchartaxisvaluelabelsorientation = 11;
  if (has_tschchartaxisvaluelabelsorientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->tschchartaxisvaluelabelsorientation(), output);
  }

  // optional float tschchartaxiscategorymajorgridlineopacity = 12;
  if (has_tschchartaxiscategorymajorgridlineopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->tschchartaxiscategorymajorgridlineopacity(), output);
  }

  // optional float tschchartaxisvaluemajorgridlineopacity = 13;
  if (has_tschchartaxisvaluemajorgridlineopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->tschchartaxisvaluemajorgridlineopacity(), output);
  }

  // optional .TSD.ShadowArchive tschchartaxiscategorymajorgridlineshadow = 14;
  if (has_tschchartaxiscategorymajorgridlineshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->tschchartaxiscategorymajorgridlineshadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartaxisvaluemajorgridlineshadow = 15;
  if (has_tschchartaxisvaluemajorgridlineshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->tschchartaxisvaluemajorgridlineshadow(), output);
  }

  // optional .TSD.StrokeArchive tschchartaxiscategorymajorgridlinestroke = 16;
  if (has_tschchartaxiscategorymajorgridlinestroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->tschchartaxiscategorymajorgridlinestroke(), output);
  }

  // optional .TSD.StrokeArchive tschchartaxisvaluemajorgridlinestroke = 17;
  if (has_tschchartaxisvaluemajorgridlinestroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->tschchartaxisvaluemajorgridlinestroke(), output);
  }

  // optional float tschchartaxiscategoryminorgridlineopacity = 18;
  if (has_tschchartaxiscategoryminorgridlineopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->tschchartaxiscategoryminorgridlineopacity(), output);
  }

  // optional float tschchartaxisvalueminorgridlineopacity = 19;
  if (has_tschchartaxisvalueminorgridlineopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->tschchartaxisvalueminorgridlineopacity(), output);
  }

  // optional .TSD.ShadowArchive tschchartaxiscategoryminorgridlineshadow = 20;
  if (has_tschchartaxiscategoryminorgridlineshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->tschchartaxiscategoryminorgridlineshadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartaxisvalueminorgridlineshadow = 21;
  if (has_tschchartaxisvalueminorgridlineshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->tschchartaxisvalueminorgridlineshadow(), output);
  }

  // optional .TSD.StrokeArchive tschchartaxiscategoryminorgridlinestroke = 22;
  if (has_tschchartaxiscategoryminorgridlinestroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->tschchartaxiscategoryminorgridlinestroke(), output);
  }

  // optional .TSD.StrokeArchive tschchartaxisvalueminorgridlinestroke = 23;
  if (has_tschchartaxisvalueminorgridlinestroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->tschchartaxisvalueminorgridlinestroke(), output);
  }

  // optional bool tschchartaxiscategoryshowaxis = 24;
  if (has_tschchartaxiscategoryshowaxis()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->tschchartaxiscategoryshowaxis(), output);
  }

  // optional bool tschchartaxisvalueshowaxis = 25;
  if (has_tschchartaxisvalueshowaxis()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->tschchartaxisvalueshowaxis(), output);
  }

  // optional bool tschchartaxiscategoryshowlastlabel = 26;
  if (has_tschchartaxiscategoryshowlastlabel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->tschchartaxiscategoryshowlastlabel(), output);
  }

  // optional bool tschchartaxiscategoryshowmajorgridlines = 27;
  if (has_tschchartaxiscategoryshowmajorgridlines()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->tschchartaxiscategoryshowmajorgridlines(), output);
  }

  // optional bool tschchartaxisvalueshowmajorgridlines = 28;
  if (has_tschchartaxisvalueshowmajorgridlines()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->tschchartaxisvalueshowmajorgridlines(), output);
  }

  // optional bool tschchartaxiscategoryshowmajortickmarks = 29;
  if (has_tschchartaxiscategoryshowmajortickmarks()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->tschchartaxiscategoryshowmajortickmarks(), output);
  }

  // optional bool tschchartaxisvalueshowmajortickmarks = 30;
  if (has_tschchartaxisvalueshowmajortickmarks()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->tschchartaxisvalueshowmajortickmarks(), output);
  }

  // optional bool tschchartaxisvalueshowminimumlabel = 31;
  if (has_tschchartaxisvalueshowminimumlabel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->tschchartaxisvalueshowminimumlabel(), output);
  }

  // optional bool tschchartaxiscategoryshowminorgridlines = 32;
  if (has_tschchartaxiscategoryshowminorgridlines()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->tschchartaxiscategoryshowminorgridlines(), output);
  }

  // optional bool tschchartaxisvalueshowminorgridlines = 33;
  if (has_tschchartaxisvalueshowminorgridlines()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->tschchartaxisvalueshowminorgridlines(), output);
  }

  // optional bool tschchartaxiscategoryshowminortickmarks = 34;
  if (has_tschchartaxiscategoryshowminortickmarks()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->tschchartaxiscategoryshowminortickmarks(), output);
  }

  // optional bool tschchartaxisvalueshowminortickmarks = 35;
  if (has_tschchartaxisvalueshowminortickmarks()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->tschchartaxisvalueshowminortickmarks(), output);
  }

  // optional int32 tschchartaxiscategorytickmarklocation = 36;
  if (has_tschchartaxiscategorytickmarklocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->tschchartaxiscategorytickmarklocation(), output);
  }

  // optional int32 tschchartaxisvaluetickmarklocation = 37;
  if (has_tschchartaxisvaluetickmarklocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->tschchartaxisvaluetickmarklocation(), output);
  }

  // optional int32 tschchartaxiscategorytitleparagraphstyleindex = 38;
  if (has_tschchartaxiscategorytitleparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->tschchartaxiscategorytitleparagraphstyleindex(), output);
  }

  // optional int32 tschchartaxisdefaulttitleparagraphstyleindex = 39;
  if (has_tschchartaxisdefaulttitleparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->tschchartaxisdefaulttitleparagraphstyleindex(), output);
  }

  // optional int32 tschchartaxisvaluetitleparagraphstyleindex = 40;
  if (has_tschchartaxisvaluetitleparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->tschchartaxisvaluetitleparagraphstyleindex(), output);
  }

  // optional int32 tschchartaxiscategoryverticalspacing = 41;
  if (has_tschchartaxiscategoryverticalspacing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->tschchartaxiscategoryverticalspacing(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartAxisStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float tschchartaxiscategory3dgridlineopacity = 1;
  if (has_tschchartaxiscategory3dgridlineopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->tschchartaxiscategory3dgridlineopacity(), target);
  }

  // optional float tschchartaxisvalue3dgridlineopacity = 2;
  if (has_tschchartaxisvalue3dgridlineopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->tschchartaxisvalue3dgridlineopacity(), target);
  }

  // optional .TSD.StrokeArchive tschchartaxiscategory3dgridlinestroke = 3;
  if (has_tschchartaxiscategory3dgridlinestroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tschchartaxiscategory3dgridlinestroke(), target);
  }

  // optional .TSD.StrokeArchive tschchartaxisvalue3dgridlinestroke = 4;
  if (has_tschchartaxisvalue3dgridlinestroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tschchartaxisvalue3dgridlinestroke(), target);
  }

  // optional int32 tschchartaxiscategoryhorizontalspacing = 5;
  if (has_tschchartaxiscategoryhorizontalspacing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tschchartaxiscategoryhorizontalspacing(), target);
  }

  // optional int32 tschchartaxiscategorylabelparagraphstyleindex = 6;
  if (has_tschchartaxiscategorylabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tschchartaxiscategorylabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxisdefaultlabelparagraphstyleindex = 7;
  if (has_tschchartaxisdefaultlabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->tschchartaxisdefaultlabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxisvaluelabelparagraphstyleindex = 8;
  if (has_tschchartaxisvaluelabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->tschchartaxisvaluelabelparagraphstyleindex(), target);
  }

  // optional float tschchartaxiscategorylabelsorientation = 9;
  if (has_tschchartaxiscategorylabelsorientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->tschchartaxiscategorylabelsorientation(), target);
  }

  // optional float tschchartaxisdefaultlabelsorientation = 10;
  if (has_tschchartaxisdefaultlabelsorientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->tschchartaxisdefaultlabelsorientation(), target);
  }

  // optional float tschchartaxisvaluelabelsorientation = 11;
  if (has_tschchartaxisvaluelabelsorientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->tschchartaxisvaluelabelsorientation(), target);
  }

  // optional float tschchartaxiscategorymajorgridlineopacity = 12;
  if (has_tschchartaxiscategorymajorgridlineopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->tschchartaxiscategorymajorgridlineopacity(), target);
  }

  // optional float tschchartaxisvaluemajorgridlineopacity = 13;
  if (has_tschchartaxisvaluemajorgridlineopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->tschchartaxisvaluemajorgridlineopacity(), target);
  }

  // optional .TSD.ShadowArchive tschchartaxiscategorymajorgridlineshadow = 14;
  if (has_tschchartaxiscategorymajorgridlineshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->tschchartaxiscategorymajorgridlineshadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartaxisvaluemajorgridlineshadow = 15;
  if (has_tschchartaxisvaluemajorgridlineshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->tschchartaxisvaluemajorgridlineshadow(), target);
  }

  // optional .TSD.StrokeArchive tschchartaxiscategorymajorgridlinestroke = 16;
  if (has_tschchartaxiscategorymajorgridlinestroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->tschchartaxiscategorymajorgridlinestroke(), target);
  }

  // optional .TSD.StrokeArchive tschchartaxisvaluemajorgridlinestroke = 17;
  if (has_tschchartaxisvaluemajorgridlinestroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->tschchartaxisvaluemajorgridlinestroke(), target);
  }

  // optional float tschchartaxiscategoryminorgridlineopacity = 18;
  if (has_tschchartaxiscategoryminorgridlineopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->tschchartaxiscategoryminorgridlineopacity(), target);
  }

  // optional float tschchartaxisvalueminorgridlineopacity = 19;
  if (has_tschchartaxisvalueminorgridlineopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->tschchartaxisvalueminorgridlineopacity(), target);
  }

  // optional .TSD.ShadowArchive tschchartaxiscategoryminorgridlineshadow = 20;
  if (has_tschchartaxiscategoryminorgridlineshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->tschchartaxiscategoryminorgridlineshadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartaxisvalueminorgridlineshadow = 21;
  if (has_tschchartaxisvalueminorgridlineshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->tschchartaxisvalueminorgridlineshadow(), target);
  }

  // optional .TSD.StrokeArchive tschchartaxiscategoryminorgridlinestroke = 22;
  if (has_tschchartaxiscategoryminorgridlinestroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->tschchartaxiscategoryminorgridlinestroke(), target);
  }

  // optional .TSD.StrokeArchive tschchartaxisvalueminorgridlinestroke = 23;
  if (has_tschchartaxisvalueminorgridlinestroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->tschchartaxisvalueminorgridlinestroke(), target);
  }

  // optional bool tschchartaxiscategoryshowaxis = 24;
  if (has_tschchartaxiscategoryshowaxis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->tschchartaxiscategoryshowaxis(), target);
  }

  // optional bool tschchartaxisvalueshowaxis = 25;
  if (has_tschchartaxisvalueshowaxis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->tschchartaxisvalueshowaxis(), target);
  }

  // optional bool tschchartaxiscategoryshowlastlabel = 26;
  if (has_tschchartaxiscategoryshowlastlabel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->tschchartaxiscategoryshowlastlabel(), target);
  }

  // optional bool tschchartaxiscategoryshowmajorgridlines = 27;
  if (has_tschchartaxiscategoryshowmajorgridlines()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->tschchartaxiscategoryshowmajorgridlines(), target);
  }

  // optional bool tschchartaxisvalueshowmajorgridlines = 28;
  if (has_tschchartaxisvalueshowmajorgridlines()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->tschchartaxisvalueshowmajorgridlines(), target);
  }

  // optional bool tschchartaxiscategoryshowmajortickmarks = 29;
  if (has_tschchartaxiscategoryshowmajortickmarks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->tschchartaxiscategoryshowmajortickmarks(), target);
  }

  // optional bool tschchartaxisvalueshowmajortickmarks = 30;
  if (has_tschchartaxisvalueshowmajortickmarks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->tschchartaxisvalueshowmajortickmarks(), target);
  }

  // optional bool tschchartaxisvalueshowminimumlabel = 31;
  if (has_tschchartaxisvalueshowminimumlabel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->tschchartaxisvalueshowminimumlabel(), target);
  }

  // optional bool tschchartaxiscategoryshowminorgridlines = 32;
  if (has_tschchartaxiscategoryshowminorgridlines()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->tschchartaxiscategoryshowminorgridlines(), target);
  }

  // optional bool tschchartaxisvalueshowminorgridlines = 33;
  if (has_tschchartaxisvalueshowminorgridlines()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->tschchartaxisvalueshowminorgridlines(), target);
  }

  // optional bool tschchartaxiscategoryshowminortickmarks = 34;
  if (has_tschchartaxiscategoryshowminortickmarks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->tschchartaxiscategoryshowminortickmarks(), target);
  }

  // optional bool tschchartaxisvalueshowminortickmarks = 35;
  if (has_tschchartaxisvalueshowminortickmarks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->tschchartaxisvalueshowminortickmarks(), target);
  }

  // optional int32 tschchartaxiscategorytickmarklocation = 36;
  if (has_tschchartaxiscategorytickmarklocation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->tschchartaxiscategorytickmarklocation(), target);
  }

  // optional int32 tschchartaxisvaluetickmarklocation = 37;
  if (has_tschchartaxisvaluetickmarklocation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->tschchartaxisvaluetickmarklocation(), target);
  }

  // optional int32 tschchartaxiscategorytitleparagraphstyleindex = 38;
  if (has_tschchartaxiscategorytitleparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->tschchartaxiscategorytitleparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxisdefaulttitleparagraphstyleindex = 39;
  if (has_tschchartaxisdefaulttitleparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->tschchartaxisdefaulttitleparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxisvaluetitleparagraphstyleindex = 40;
  if (has_tschchartaxisvaluetitleparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->tschchartaxisvaluetitleparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxiscategoryverticalspacing = 41;
  if (has_tschchartaxiscategoryverticalspacing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->tschchartaxiscategoryverticalspacing(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartAxisStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float tschchartaxiscategory3dgridlineopacity = 1;
    if (has_tschchartaxiscategory3dgridlineopacity()) {
      total_size += 1 + 4;
    }

    // optional float tschchartaxisvalue3dgridlineopacity = 2;
    if (has_tschchartaxisvalue3dgridlineopacity()) {
      total_size += 1 + 4;
    }

    // optional .TSD.StrokeArchive tschchartaxiscategory3dgridlinestroke = 3;
    if (has_tschchartaxiscategory3dgridlinestroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxiscategory3dgridlinestroke());
    }

    // optional .TSD.StrokeArchive tschchartaxisvalue3dgridlinestroke = 4;
    if (has_tschchartaxisvalue3dgridlinestroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxisvalue3dgridlinestroke());
    }

    // optional int32 tschchartaxiscategoryhorizontalspacing = 5;
    if (has_tschchartaxiscategoryhorizontalspacing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxiscategoryhorizontalspacing());
    }

    // optional int32 tschchartaxiscategorylabelparagraphstyleindex = 6;
    if (has_tschchartaxiscategorylabelparagraphstyleindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxiscategorylabelparagraphstyleindex());
    }

    // optional int32 tschchartaxisdefaultlabelparagraphstyleindex = 7;
    if (has_tschchartaxisdefaultlabelparagraphstyleindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxisdefaultlabelparagraphstyleindex());
    }

    // optional int32 tschchartaxisvaluelabelparagraphstyleindex = 8;
    if (has_tschchartaxisvaluelabelparagraphstyleindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxisvaluelabelparagraphstyleindex());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float tschchartaxiscategorylabelsorientation = 9;
    if (has_tschchartaxiscategorylabelsorientation()) {
      total_size += 1 + 4;
    }

    // optional float tschchartaxisdefaultlabelsorientation = 10;
    if (has_tschchartaxisdefaultlabelsorientation()) {
      total_size += 1 + 4;
    }

    // optional float tschchartaxisvaluelabelsorientation = 11;
    if (has_tschchartaxisvaluelabelsorientation()) {
      total_size += 1 + 4;
    }

    // optional float tschchartaxiscategorymajorgridlineopacity = 12;
    if (has_tschchartaxiscategorymajorgridlineopacity()) {
      total_size += 1 + 4;
    }

    // optional float tschchartaxisvaluemajorgridlineopacity = 13;
    if (has_tschchartaxisvaluemajorgridlineopacity()) {
      total_size += 1 + 4;
    }

    // optional .TSD.ShadowArchive tschchartaxiscategorymajorgridlineshadow = 14;
    if (has_tschchartaxiscategorymajorgridlineshadow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxiscategorymajorgridlineshadow());
    }

    // optional .TSD.ShadowArchive tschchartaxisvaluemajorgridlineshadow = 15;
    if (has_tschchartaxisvaluemajorgridlineshadow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxisvaluemajorgridlineshadow());
    }

    // optional .TSD.StrokeArchive tschchartaxiscategorymajorgridlinestroke = 16;
    if (has_tschchartaxiscategorymajorgridlinestroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxiscategorymajorgridlinestroke());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .TSD.StrokeArchive tschchartaxisvaluemajorgridlinestroke = 17;
    if (has_tschchartaxisvaluemajorgridlinestroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxisvaluemajorgridlinestroke());
    }

    // optional float tschchartaxiscategoryminorgridlineopacity = 18;
    if (has_tschchartaxiscategoryminorgridlineopacity()) {
      total_size += 2 + 4;
    }

    // optional float tschchartaxisvalueminorgridlineopacity = 19;
    if (has_tschchartaxisvalueminorgridlineopacity()) {
      total_size += 2 + 4;
    }

    // optional .TSD.ShadowArchive tschchartaxiscategoryminorgridlineshadow = 20;
    if (has_tschchartaxiscategoryminorgridlineshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxiscategoryminorgridlineshadow());
    }

    // optional .TSD.ShadowArchive tschchartaxisvalueminorgridlineshadow = 21;
    if (has_tschchartaxisvalueminorgridlineshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxisvalueminorgridlineshadow());
    }

    // optional .TSD.StrokeArchive tschchartaxiscategoryminorgridlinestroke = 22;
    if (has_tschchartaxiscategoryminorgridlinestroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxiscategoryminorgridlinestroke());
    }

    // optional .TSD.StrokeArchive tschchartaxisvalueminorgridlinestroke = 23;
    if (has_tschchartaxisvalueminorgridlinestroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxisvalueminorgridlinestroke());
    }

    // optional bool tschchartaxiscategoryshowaxis = 24;
    if (has_tschchartaxiscategoryshowaxis()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool tschchartaxisvalueshowaxis = 25;
    if (has_tschchartaxisvalueshowaxis()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowlastlabel = 26;
    if (has_tschchartaxiscategoryshowlastlabel()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowmajorgridlines = 27;
    if (has_tschchartaxiscategoryshowmajorgridlines()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisvalueshowmajorgridlines = 28;
    if (has_tschchartaxisvalueshowmajorgridlines()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowmajortickmarks = 29;
    if (has_tschchartaxiscategoryshowmajortickmarks()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisvalueshowmajortickmarks = 30;
    if (has_tschchartaxisvalueshowmajortickmarks()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisvalueshowminimumlabel = 31;
    if (has_tschchartaxisvalueshowminimumlabel()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowminorgridlines = 32;
    if (has_tschchartaxiscategoryshowminorgridlines()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional bool tschchartaxisvalueshowminorgridlines = 33;
    if (has_tschchartaxisvalueshowminorgridlines()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowminortickmarks = 34;
    if (has_tschchartaxiscategoryshowminortickmarks()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisvalueshowminortickmarks = 35;
    if (has_tschchartaxisvalueshowminortickmarks()) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartaxiscategorytickmarklocation = 36;
    if (has_tschchartaxiscategorytickmarklocation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxiscategorytickmarklocation());
    }

    // optional int32 tschchartaxisvaluetickmarklocation = 37;
    if (has_tschchartaxisvaluetickmarklocation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxisvaluetickmarklocation());
    }

    // optional int32 tschchartaxiscategorytitleparagraphstyleindex = 38;
    if (has_tschchartaxiscategorytitleparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxiscategorytitleparagraphstyleindex());
    }

    // optional int32 tschchartaxisdefaulttitleparagraphstyleindex = 39;
    if (has_tschchartaxisdefaulttitleparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxisdefaulttitleparagraphstyleindex());
    }

    // optional int32 tschchartaxisvaluetitleparagraphstyleindex = 40;
    if (has_tschchartaxisvaluetitleparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxisvaluetitleparagraphstyleindex());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 tschchartaxiscategoryverticalspacing = 41;
    if (has_tschchartaxiscategoryverticalspacing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxiscategoryverticalspacing());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartAxisStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartAxisStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartAxisStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartAxisStyleArchive::MergeFrom(const ChartAxisStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tschchartaxiscategory3dgridlineopacity()) {
      set_tschchartaxiscategory3dgridlineopacity(from.tschchartaxiscategory3dgridlineopacity());
    }
    if (from.has_tschchartaxisvalue3dgridlineopacity()) {
      set_tschchartaxisvalue3dgridlineopacity(from.tschchartaxisvalue3dgridlineopacity());
    }
    if (from.has_tschchartaxiscategory3dgridlinestroke()) {
      mutable_tschchartaxiscategory3dgridlinestroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartaxiscategory3dgridlinestroke());
    }
    if (from.has_tschchartaxisvalue3dgridlinestroke()) {
      mutable_tschchartaxisvalue3dgridlinestroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartaxisvalue3dgridlinestroke());
    }
    if (from.has_tschchartaxiscategoryhorizontalspacing()) {
      set_tschchartaxiscategoryhorizontalspacing(from.tschchartaxiscategoryhorizontalspacing());
    }
    if (from.has_tschchartaxiscategorylabelparagraphstyleindex()) {
      set_tschchartaxiscategorylabelparagraphstyleindex(from.tschchartaxiscategorylabelparagraphstyleindex());
    }
    if (from.has_tschchartaxisdefaultlabelparagraphstyleindex()) {
      set_tschchartaxisdefaultlabelparagraphstyleindex(from.tschchartaxisdefaultlabelparagraphstyleindex());
    }
    if (from.has_tschchartaxisvaluelabelparagraphstyleindex()) {
      set_tschchartaxisvaluelabelparagraphstyleindex(from.tschchartaxisvaluelabelparagraphstyleindex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tschchartaxiscategorylabelsorientation()) {
      set_tschchartaxiscategorylabelsorientation(from.tschchartaxiscategorylabelsorientation());
    }
    if (from.has_tschchartaxisdefaultlabelsorientation()) {
      set_tschchartaxisdefaultlabelsorientation(from.tschchartaxisdefaultlabelsorientation());
    }
    if (from.has_tschchartaxisvaluelabelsorientation()) {
      set_tschchartaxisvaluelabelsorientation(from.tschchartaxisvaluelabelsorientation());
    }
    if (from.has_tschchartaxiscategorymajorgridlineopacity()) {
      set_tschchartaxiscategorymajorgridlineopacity(from.tschchartaxiscategorymajorgridlineopacity());
    }
    if (from.has_tschchartaxisvaluemajorgridlineopacity()) {
      set_tschchartaxisvaluemajorgridlineopacity(from.tschchartaxisvaluemajorgridlineopacity());
    }
    if (from.has_tschchartaxiscategorymajorgridlineshadow()) {
      mutable_tschchartaxiscategorymajorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartaxiscategorymajorgridlineshadow());
    }
    if (from.has_tschchartaxisvaluemajorgridlineshadow()) {
      mutable_tschchartaxisvaluemajorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartaxisvaluemajorgridlineshadow());
    }
    if (from.has_tschchartaxiscategorymajorgridlinestroke()) {
      mutable_tschchartaxiscategorymajorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartaxiscategorymajorgridlinestroke());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tschchartaxisvaluemajorgridlinestroke()) {
      mutable_tschchartaxisvaluemajorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartaxisvaluemajorgridlinestroke());
    }
    if (from.has_tschchartaxiscategoryminorgridlineopacity()) {
      set_tschchartaxiscategoryminorgridlineopacity(from.tschchartaxiscategoryminorgridlineopacity());
    }
    if (from.has_tschchartaxisvalueminorgridlineopacity()) {
      set_tschchartaxisvalueminorgridlineopacity(from.tschchartaxisvalueminorgridlineopacity());
    }
    if (from.has_tschchartaxiscategoryminorgridlineshadow()) {
      mutable_tschchartaxiscategoryminorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartaxiscategoryminorgridlineshadow());
    }
    if (from.has_tschchartaxisvalueminorgridlineshadow()) {
      mutable_tschchartaxisvalueminorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartaxisvalueminorgridlineshadow());
    }
    if (from.has_tschchartaxiscategoryminorgridlinestroke()) {
      mutable_tschchartaxiscategoryminorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartaxiscategoryminorgridlinestroke());
    }
    if (from.has_tschchartaxisvalueminorgridlinestroke()) {
      mutable_tschchartaxisvalueminorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartaxisvalueminorgridlinestroke());
    }
    if (from.has_tschchartaxiscategoryshowaxis()) {
      set_tschchartaxiscategoryshowaxis(from.tschchartaxiscategoryshowaxis());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_tschchartaxisvalueshowaxis()) {
      set_tschchartaxisvalueshowaxis(from.tschchartaxisvalueshowaxis());
    }
    if (from.has_tschchartaxiscategoryshowlastlabel()) {
      set_tschchartaxiscategoryshowlastlabel(from.tschchartaxiscategoryshowlastlabel());
    }
    if (from.has_tschchartaxiscategoryshowmajorgridlines()) {
      set_tschchartaxiscategoryshowmajorgridlines(from.tschchartaxiscategoryshowmajorgridlines());
    }
    if (from.has_tschchartaxisvalueshowmajorgridlines()) {
      set_tschchartaxisvalueshowmajorgridlines(from.tschchartaxisvalueshowmajorgridlines());
    }
    if (from.has_tschchartaxiscategoryshowmajortickmarks()) {
      set_tschchartaxiscategoryshowmajortickmarks(from.tschchartaxiscategoryshowmajortickmarks());
    }
    if (from.has_tschchartaxisvalueshowmajortickmarks()) {
      set_tschchartaxisvalueshowmajortickmarks(from.tschchartaxisvalueshowmajortickmarks());
    }
    if (from.has_tschchartaxisvalueshowminimumlabel()) {
      set_tschchartaxisvalueshowminimumlabel(from.tschchartaxisvalueshowminimumlabel());
    }
    if (from.has_tschchartaxiscategoryshowminorgridlines()) {
      set_tschchartaxiscategoryshowminorgridlines(from.tschchartaxiscategoryshowminorgridlines());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_tschchartaxisvalueshowminorgridlines()) {
      set_tschchartaxisvalueshowminorgridlines(from.tschchartaxisvalueshowminorgridlines());
    }
    if (from.has_tschchartaxiscategoryshowminortickmarks()) {
      set_tschchartaxiscategoryshowminortickmarks(from.tschchartaxiscategoryshowminortickmarks());
    }
    if (from.has_tschchartaxisvalueshowminortickmarks()) {
      set_tschchartaxisvalueshowminortickmarks(from.tschchartaxisvalueshowminortickmarks());
    }
    if (from.has_tschchartaxiscategorytickmarklocation()) {
      set_tschchartaxiscategorytickmarklocation(from.tschchartaxiscategorytickmarklocation());
    }
    if (from.has_tschchartaxisvaluetickmarklocation()) {
      set_tschchartaxisvaluetickmarklocation(from.tschchartaxisvaluetickmarklocation());
    }
    if (from.has_tschchartaxiscategorytitleparagraphstyleindex()) {
      set_tschchartaxiscategorytitleparagraphstyleindex(from.tschchartaxiscategorytitleparagraphstyleindex());
    }
    if (from.has_tschchartaxisdefaulttitleparagraphstyleindex()) {
      set_tschchartaxisdefaulttitleparagraphstyleindex(from.tschchartaxisdefaulttitleparagraphstyleindex());
    }
    if (from.has_tschchartaxisvaluetitleparagraphstyleindex()) {
      set_tschchartaxisvaluetitleparagraphstyleindex(from.tschchartaxisvaluetitleparagraphstyleindex());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_tschchartaxiscategoryverticalspacing()) {
      set_tschchartaxiscategoryverticalspacing(from.tschchartaxiscategoryverticalspacing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartAxisStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartAxisStyleArchive::CopyFrom(const ChartAxisStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartAxisStyleArchive::IsInitialized() const {

  if (has_tschchartaxiscategory3dgridlinestroke()) {
    if (!this->tschchartaxiscategory3dgridlinestroke().IsInitialized()) return false;
  }
  if (has_tschchartaxisvalue3dgridlinestroke()) {
    if (!this->tschchartaxisvalue3dgridlinestroke().IsInitialized()) return false;
  }
  if (has_tschchartaxiscategorymajorgridlineshadow()) {
    if (!this->tschchartaxiscategorymajorgridlineshadow().IsInitialized()) return false;
  }
  if (has_tschchartaxisvaluemajorgridlineshadow()) {
    if (!this->tschchartaxisvaluemajorgridlineshadow().IsInitialized()) return false;
  }
  if (has_tschchartaxiscategorymajorgridlinestroke()) {
    if (!this->tschchartaxiscategorymajorgridlinestroke().IsInitialized()) return false;
  }
  if (has_tschchartaxisvaluemajorgridlinestroke()) {
    if (!this->tschchartaxisvaluemajorgridlinestroke().IsInitialized()) return false;
  }
  if (has_tschchartaxiscategoryminorgridlineshadow()) {
    if (!this->tschchartaxiscategoryminorgridlineshadow().IsInitialized()) return false;
  }
  if (has_tschchartaxisvalueminorgridlineshadow()) {
    if (!this->tschchartaxisvalueminorgridlineshadow().IsInitialized()) return false;
  }
  if (has_tschchartaxiscategoryminorgridlinestroke()) {
    if (!this->tschchartaxiscategoryminorgridlinestroke().IsInitialized()) return false;
  }
  if (has_tschchartaxisvalueminorgridlinestroke()) {
    if (!this->tschchartaxisvalueminorgridlinestroke().IsInitialized()) return false;
  }
  return true;
}

void ChartAxisStyleArchive::Swap(ChartAxisStyleArchive* other) {
  if (other != this) {
    std::swap(tschchartaxiscategory3dgridlineopacity_, other->tschchartaxiscategory3dgridlineopacity_);
    std::swap(tschchartaxisvalue3dgridlineopacity_, other->tschchartaxisvalue3dgridlineopacity_);
    std::swap(tschchartaxiscategory3dgridlinestroke_, other->tschchartaxiscategory3dgridlinestroke_);
    std::swap(tschchartaxisvalue3dgridlinestroke_, other->tschchartaxisvalue3dgridlinestroke_);
    std::swap(tschchartaxiscategoryhorizontalspacing_, other->tschchartaxiscategoryhorizontalspacing_);
    std::swap(tschchartaxiscategorylabelparagraphstyleindex_, other->tschchartaxiscategorylabelparagraphstyleindex_);
    std::swap(tschchartaxisdefaultlabelparagraphstyleindex_, other->tschchartaxisdefaultlabelparagraphstyleindex_);
    std::swap(tschchartaxisvaluelabelparagraphstyleindex_, other->tschchartaxisvaluelabelparagraphstyleindex_);
    std::swap(tschchartaxiscategorylabelsorientation_, other->tschchartaxiscategorylabelsorientation_);
    std::swap(tschchartaxisdefaultlabelsorientation_, other->tschchartaxisdefaultlabelsorientation_);
    std::swap(tschchartaxisvaluelabelsorientation_, other->tschchartaxisvaluelabelsorientation_);
    std::swap(tschchartaxiscategorymajorgridlineopacity_, other->tschchartaxiscategorymajorgridlineopacity_);
    std::swap(tschchartaxisvaluemajorgridlineopacity_, other->tschchartaxisvaluemajorgridlineopacity_);
    std::swap(tschchartaxiscategorymajorgridlineshadow_, other->tschchartaxiscategorymajorgridlineshadow_);
    std::swap(tschchartaxisvaluemajorgridlineshadow_, other->tschchartaxisvaluemajorgridlineshadow_);
    std::swap(tschchartaxiscategorymajorgridlinestroke_, other->tschchartaxiscategorymajorgridlinestroke_);
    std::swap(tschchartaxisvaluemajorgridlinestroke_, other->tschchartaxisvaluemajorgridlinestroke_);
    std::swap(tschchartaxiscategoryminorgridlineopacity_, other->tschchartaxiscategoryminorgridlineopacity_);
    std::swap(tschchartaxisvalueminorgridlineopacity_, other->tschchartaxisvalueminorgridlineopacity_);
    std::swap(tschchartaxiscategoryminorgridlineshadow_, other->tschchartaxiscategoryminorgridlineshadow_);
    std::swap(tschchartaxisvalueminorgridlineshadow_, other->tschchartaxisvalueminorgridlineshadow_);
    std::swap(tschchartaxiscategoryminorgridlinestroke_, other->tschchartaxiscategoryminorgridlinestroke_);
    std::swap(tschchartaxisvalueminorgridlinestroke_, other->tschchartaxisvalueminorgridlinestroke_);
    std::swap(tschchartaxiscategoryshowaxis_, other->tschchartaxiscategoryshowaxis_);
    std::swap(tschchartaxisvalueshowaxis_, other->tschchartaxisvalueshowaxis_);
    std::swap(tschchartaxiscategoryshowlastlabel_, other->tschchartaxiscategoryshowlastlabel_);
    std::swap(tschchartaxiscategoryshowmajorgridlines_, other->tschchartaxiscategoryshowmajorgridlines_);
    std::swap(tschchartaxisvalueshowmajorgridlines_, other->tschchartaxisvalueshowmajorgridlines_);
    std::swap(tschchartaxiscategoryshowmajortickmarks_, other->tschchartaxiscategoryshowmajortickmarks_);
    std::swap(tschchartaxisvalueshowmajortickmarks_, other->tschchartaxisvalueshowmajortickmarks_);
    std::swap(tschchartaxisvalueshowminimumlabel_, other->tschchartaxisvalueshowminimumlabel_);
    std::swap(tschchartaxiscategoryshowminorgridlines_, other->tschchartaxiscategoryshowminorgridlines_);
    std::swap(tschchartaxisvalueshowminorgridlines_, other->tschchartaxisvalueshowminorgridlines_);
    std::swap(tschchartaxiscategoryshowminortickmarks_, other->tschchartaxiscategoryshowminortickmarks_);
    std::swap(tschchartaxisvalueshowminortickmarks_, other->tschchartaxisvalueshowminortickmarks_);
    std::swap(tschchartaxiscategorytickmarklocation_, other->tschchartaxiscategorytickmarklocation_);
    std::swap(tschchartaxisvaluetickmarklocation_, other->tschchartaxisvaluetickmarklocation_);
    std::swap(tschchartaxiscategorytitleparagraphstyleindex_, other->tschchartaxiscategorytitleparagraphstyleindex_);
    std::swap(tschchartaxisdefaulttitleparagraphstyleindex_, other->tschchartaxisdefaulttitleparagraphstyleindex_);
    std::swap(tschchartaxisvaluetitleparagraphstyleindex_, other->tschchartaxisvaluetitleparagraphstyleindex_);
    std::swap(tschchartaxiscategoryverticalspacing_, other->tschchartaxiscategoryverticalspacing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartAxisStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartAxisStyleArchive_descriptor_;
  metadata.reflection = ChartAxisStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartAxisNonStyleArchive::kTschchartaxisdefault3DlabelpositionFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxisdefault10NumberformatFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxisdefaultnumberformatFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxisdefault10DateformatFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxisdefaultdurationformatFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxisdefaultdateformatFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxisdefaultnumberformattypeFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxisvaluenumberofdecadesFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxisvaluenumberofmajorgridlinesFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxisvaluenumberofminorgridlinesFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxiscategoryplottoedgesFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxisvaluescaleFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxiscategoryshowlabelsFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxisdefaultshowlabelsFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxisvalueshowlabelsFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxiscategoryshowserieslabelsFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxismultidatashowserieslabelsFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxiscategoryshowtitleFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxisvalueshowtitleFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxiscategorytitleFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxisvaluetitleFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxisdefaultusermaxFieldNumber;
const int ChartAxisNonStyleArchive::kTschchartaxisdefaultuserminFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ChartAxisNonStyleArchive::kCurrentFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartAxisNonStyleArchive,
    ::google::protobuf::internal::MessageTypeTraits< ::TSCH::Generated::ChartAxisNonStyleArchive >, 11, false >
  ChartAxisNonStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::ChartAxisNonStyleArchive::default_instance());
ChartAxisNonStyleArchive::ChartAxisNonStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartAxisNonStyleArchive::InitAsDefaultInstance() {
  tschchartaxisdefault1_0numberformat_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  tschchartaxisdefaultnumberformat_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  tschchartaxisdefault1_0dateformat_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  tschchartaxisdefaultdurationformat_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  tschchartaxisdefaultdateformat_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  tschchartaxisdefaultusermax_ = const_cast< ::TSCH::ChartsNSNumberDoubleArchive*>(&::TSCH::ChartsNSNumberDoubleArchive::default_instance());
  tschchartaxisdefaultusermin_ = const_cast< ::TSCH::ChartsNSNumberDoubleArchive*>(&::TSCH::ChartsNSNumberDoubleArchive::default_instance());
}

ChartAxisNonStyleArchive::ChartAxisNonStyleArchive(const ChartAxisNonStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartAxisNonStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  tschchartaxisdefault3dlabelposition_ = 0;
  tschchartaxisdefault1_0numberformat_ = NULL;
  tschchartaxisdefaultnumberformat_ = NULL;
  tschchartaxisdefault1_0dateformat_ = NULL;
  tschchartaxisdefaultdurationformat_ = NULL;
  tschchartaxisdefaultdateformat_ = NULL;
  tschchartaxisdefaultnumberformattype_ = 0;
  tschchartaxisvaluenumberofdecades_ = 0;
  tschchartaxisvaluenumberofmajorgridlines_ = 0;
  tschchartaxisvaluenumberofminorgridlines_ = 0;
  tschchartaxiscategoryplottoedges_ = false;
  tschchartaxisvaluescale_ = 0;
  tschchartaxiscategoryshowlabels_ = false;
  tschchartaxisdefaultshowlabels_ = false;
  tschchartaxisvalueshowlabels_ = false;
  tschchartaxiscategoryshowserieslabels_ = false;
  tschchartaxismultidatashowserieslabels_ = false;
  tschchartaxiscategoryshowtitle_ = false;
  tschchartaxisvalueshowtitle_ = false;
  tschchartaxiscategorytitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tschchartaxisvaluetitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tschchartaxisdefaultusermax_ = NULL;
  tschchartaxisdefaultusermin_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartAxisNonStyleArchive::~ChartAxisNonStyleArchive() {
  SharedDtor();
}

void ChartAxisNonStyleArchive::SharedDtor() {
  if (tschchartaxiscategorytitle_ != &::google::protobuf::internal::kEmptyString) {
    delete tschchartaxiscategorytitle_;
  }
  if (tschchartaxisvaluetitle_ != &::google::protobuf::internal::kEmptyString) {
    delete tschchartaxisvaluetitle_;
  }
  if (this != default_instance_) {
    delete tschchartaxisdefault1_0numberformat_;
    delete tschchartaxisdefaultnumberformat_;
    delete tschchartaxisdefault1_0dateformat_;
    delete tschchartaxisdefaultdurationformat_;
    delete tschchartaxisdefaultdateformat_;
    delete tschchartaxisdefaultusermax_;
    delete tschchartaxisdefaultusermin_;
  }
}

void ChartAxisNonStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartAxisNonStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartAxisNonStyleArchive_descriptor_;
}

const ChartAxisNonStyleArchive& ChartAxisNonStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eGEN_2eproto();
  return *default_instance_;
}

ChartAxisNonStyleArchive* ChartAxisNonStyleArchive::default_instance_ = NULL;

ChartAxisNonStyleArchive* ChartAxisNonStyleArchive::New() const {
  return new ChartAxisNonStyleArchive;
}

void ChartAxisNonStyleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tschchartaxisdefault3dlabelposition_ = 0;
    if (has_tschchartaxisdefault1_0numberformat()) {
      if (tschchartaxisdefault1_0numberformat_ != NULL) tschchartaxisdefault1_0numberformat_->::TSK::FormatStructArchive::Clear();
    }
    if (has_tschchartaxisdefaultnumberformat()) {
      if (tschchartaxisdefaultnumberformat_ != NULL) tschchartaxisdefaultnumberformat_->::TSK::FormatStructArchive::Clear();
    }
    if (has_tschchartaxisdefault1_0dateformat()) {
      if (tschchartaxisdefault1_0dateformat_ != NULL) tschchartaxisdefault1_0dateformat_->::TSK::FormatStructArchive::Clear();
    }
    if (has_tschchartaxisdefaultdurationformat()) {
      if (tschchartaxisdefaultdurationformat_ != NULL) tschchartaxisdefaultdurationformat_->::TSK::FormatStructArchive::Clear();
    }
    if (has_tschchartaxisdefaultdateformat()) {
      if (tschchartaxisdefaultdateformat_ != NULL) tschchartaxisdefaultdateformat_->::TSK::FormatStructArchive::Clear();
    }
    tschchartaxisdefaultnumberformattype_ = 0;
    tschchartaxisvaluenumberofdecades_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    tschchartaxisvaluenumberofmajorgridlines_ = 0;
    tschchartaxisvaluenumberofminorgridlines_ = 0;
    tschchartaxiscategoryplottoedges_ = false;
    tschchartaxisvaluescale_ = 0;
    tschchartaxiscategoryshowlabels_ = false;
    tschchartaxisdefaultshowlabels_ = false;
    tschchartaxisvalueshowlabels_ = false;
    tschchartaxiscategoryshowserieslabels_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    tschchartaxismultidatashowserieslabels_ = false;
    tschchartaxiscategoryshowtitle_ = false;
    tschchartaxisvalueshowtitle_ = false;
    if (has_tschchartaxiscategorytitle()) {
      if (tschchartaxiscategorytitle_ != &::google::protobuf::internal::kEmptyString) {
        tschchartaxiscategorytitle_->clear();
      }
    }
    if (has_tschchartaxisvaluetitle()) {
      if (tschchartaxisvaluetitle_ != &::google::protobuf::internal::kEmptyString) {
        tschchartaxisvaluetitle_->clear();
      }
    }
    if (has_tschchartaxisdefaultusermax()) {
      if (tschchartaxisdefaultusermax_ != NULL) tschchartaxisdefaultusermax_->::TSCH::ChartsNSNumberDoubleArchive::Clear();
    }
    if (has_tschchartaxisdefaultusermin()) {
      if (tschchartaxisdefaultusermin_ != NULL) tschchartaxisdefaultusermin_->::TSCH::ChartsNSNumberDoubleArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartAxisNonStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tschchartaxisdefault3dlabelposition = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxisdefault3dlabelposition_)));
          set_has_tschchartaxisdefault3dlabelposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tschchartaxisdefault1_0numberformat;
        break;
      }

      // optional .TSK.FormatStructArchive tschchartaxisdefault1_0numberformat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxisdefault1_0numberformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxisdefault1_0numberformat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tschchartaxisdefaultnumberformattype;
        break;
      }

      // optional int32 tschchartaxisdefaultnumberformattype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisdefaultnumberformattype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxisdefaultnumberformattype_)));
          set_has_tschchartaxisdefaultnumberformattype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tschchartaxisvaluenumberofdecades;
        break;
      }

      // optional int32 tschchartaxisvaluenumberofdecades = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisvaluenumberofdecades:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxisvaluenumberofdecades_)));
          set_has_tschchartaxisvaluenumberofdecades();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tschchartaxisvaluenumberofmajorgridlines;
        break;
      }

      // optional int32 tschchartaxisvaluenumberofmajorgridlines = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisvaluenumberofmajorgridlines:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxisvaluenumberofmajorgridlines_)));
          set_has_tschchartaxisvaluenumberofmajorgridlines();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tschchartaxisvaluenumberofminorgridlines;
        break;
      }

      // optional int32 tschchartaxisvaluenumberofminorgridlines = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisvaluenumberofminorgridlines:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxisvaluenumberofminorgridlines_)));
          set_has_tschchartaxisvaluenumberofminorgridlines();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_tschchartaxiscategoryplottoedges;
        break;
      }

      // optional bool tschchartaxiscategoryplottoedges = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxiscategoryplottoedges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxiscategoryplottoedges_)));
          set_has_tschchartaxiscategoryplottoedges();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_tschchartaxisvaluescale;
        break;
      }

      // optional int32 tschchartaxisvaluescale = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisvaluescale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxisvaluescale_)));
          set_has_tschchartaxisvaluescale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_tschchartaxiscategoryshowlabels;
        break;
      }

      // optional bool tschchartaxiscategoryshowlabels = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxiscategoryshowlabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxiscategoryshowlabels_)));
          set_has_tschchartaxiscategoryshowlabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_tschchartaxisdefaultshowlabels;
        break;
      }

      // optional bool tschchartaxisdefaultshowlabels = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisdefaultshowlabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxisdefaultshowlabels_)));
          set_has_tschchartaxisdefaultshowlabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_tschchartaxisvalueshowlabels;
        break;
      }

      // optional bool tschchartaxisvalueshowlabels = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisvalueshowlabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxisvalueshowlabels_)));
          set_has_tschchartaxisvalueshowlabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_tschchartaxiscategoryshowserieslabels;
        break;
      }

      // optional bool tschchartaxiscategoryshowserieslabels = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxiscategoryshowserieslabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxiscategoryshowserieslabels_)));
          set_has_tschchartaxiscategoryshowserieslabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tschchartaxiscategoryshowtitle;
        break;
      }

      // optional bool tschchartaxiscategoryshowtitle = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxiscategoryshowtitle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxiscategoryshowtitle_)));
          set_has_tschchartaxiscategoryshowtitle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_tschchartaxisvalueshowtitle;
        break;
      }

      // optional bool tschchartaxisvalueshowtitle = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisvalueshowtitle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxisvalueshowtitle_)));
          set_has_tschchartaxisvalueshowtitle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_tschchartaxiscategorytitle;
        break;
      }

      // optional string tschchartaxiscategorytitle = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxiscategorytitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tschchartaxiscategorytitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tschchartaxiscategorytitle().data(), this->tschchartaxiscategorytitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_tschchartaxisvaluetitle;
        break;
      }

      // optional string tschchartaxisvaluetitle = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxisvaluetitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tschchartaxisvaluetitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tschchartaxisvaluetitle().data(), this->tschchartaxisvaluetitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_tschchartaxisdefaultusermax;
        break;
      }

      // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermax = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxisdefaultusermax:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxisdefaultusermax()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_tschchartaxisdefaultusermin;
        break;
      }

      // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermin = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxisdefaultusermin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxisdefaultusermin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_tschchartaxismultidatashowserieslabels;
        break;
      }

      // optional bool tschchartaxismultidatashowserieslabels = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxismultidatashowserieslabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxismultidatashowserieslabels_)));
          set_has_tschchartaxismultidatashowserieslabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_tschchartaxisdefault1_0dateformat;
        break;
      }

      // optional .TSK.FormatStructArchive tschchartaxisdefault1_0dateformat = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxisdefault1_0dateformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxisdefault1_0dateformat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_tschchartaxisdefaultdurationformat;
        break;
      }

      // optional .TSK.FormatStructArchive tschchartaxisdefaultdurationformat = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxisdefaultdurationformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxisdefaultdurationformat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_tschchartaxisdefaultdateformat;
        break;
      }

      // optional .TSK.FormatStructArchive tschchartaxisdefaultdateformat = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxisdefaultdateformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxisdefaultdateformat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_tschchartaxisdefaultnumberformat;
        break;
      }

      // optional .TSK.FormatStructArchive tschchartaxisdefaultnumberformat = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxisdefaultnumberformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxisdefaultnumberformat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartAxisNonStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tschchartaxisdefault3dlabelposition = 1;
  if (has_tschchartaxisdefault3dlabelposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tschchartaxisdefault3dlabelposition(), output);
  }

  // optional .TSK.FormatStructArchive tschchartaxisdefault1_0numberformat = 2;
  if (has_tschchartaxisdefault1_0numberformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tschchartaxisdefault1_0numberformat(), output);
  }

  // optional int32 tschchartaxisdefaultnumberformattype = 3;
  if (has_tschchartaxisdefaultnumberformattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tschchartaxisdefaultnumberformattype(), output);
  }

  // optional int32 tschchartaxisvaluenumberofdecades = 4;
  if (has_tschchartaxisvaluenumberofdecades()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tschchartaxisvaluenumberofdecades(), output);
  }

  // optional int32 tschchartaxisvaluenumberofmajorgridlines = 5;
  if (has_tschchartaxisvaluenumberofmajorgridlines()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tschchartaxisvaluenumberofmajorgridlines(), output);
  }

  // optional int32 tschchartaxisvaluenumberofminorgridlines = 6;
  if (has_tschchartaxisvaluenumberofminorgridlines()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tschchartaxisvaluenumberofminorgridlines(), output);
  }

  // optional bool tschchartaxiscategoryplottoedges = 7;
  if (has_tschchartaxiscategoryplottoedges()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->tschchartaxiscategoryplottoedges(), output);
  }

  // optional int32 tschchartaxisvaluescale = 8;
  if (has_tschchartaxisvaluescale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tschchartaxisvaluescale(), output);
  }

  // optional bool tschchartaxiscategoryshowlabels = 9;
  if (has_tschchartaxiscategoryshowlabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->tschchartaxiscategoryshowlabels(), output);
  }

  // optional bool tschchartaxisdefaultshowlabels = 10;
  if (has_tschchartaxisdefaultshowlabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->tschchartaxisdefaultshowlabels(), output);
  }

  // optional bool tschchartaxisvalueshowlabels = 11;
  if (has_tschchartaxisvalueshowlabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->tschchartaxisvalueshowlabels(), output);
  }

  // optional bool tschchartaxiscategoryshowserieslabels = 12;
  if (has_tschchartaxiscategoryshowserieslabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->tschchartaxiscategoryshowserieslabels(), output);
  }

  // optional bool tschchartaxiscategoryshowtitle = 13;
  if (has_tschchartaxiscategoryshowtitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->tschchartaxiscategoryshowtitle(), output);
  }

  // optional bool tschchartaxisvalueshowtitle = 14;
  if (has_tschchartaxisvalueshowtitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->tschchartaxisvalueshowtitle(), output);
  }

  // optional string tschchartaxiscategorytitle = 15;
  if (has_tschchartaxiscategorytitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tschchartaxiscategorytitle().data(), this->tschchartaxiscategorytitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->tschchartaxiscategorytitle(), output);
  }

  // optional string tschchartaxisvaluetitle = 16;
  if (has_tschchartaxisvaluetitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tschchartaxisvaluetitle().data(), this->tschchartaxisvaluetitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->tschchartaxisvaluetitle(), output);
  }

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermax = 17;
  if (has_tschchartaxisdefaultusermax()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->tschchartaxisdefaultusermax(), output);
  }

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermin = 18;
  if (has_tschchartaxisdefaultusermin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->tschchartaxisdefaultusermin(), output);
  }

  // optional bool tschchartaxismultidatashowserieslabels = 19;
  if (has_tschchartaxismultidatashowserieslabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->tschchartaxismultidatashowserieslabels(), output);
  }

  // optional .TSK.FormatStructArchive tschchartaxisdefault1_0dateformat = 20;
  if (has_tschchartaxisdefault1_0dateformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->tschchartaxisdefault1_0dateformat(), output);
  }

  // optional .TSK.FormatStructArchive tschchartaxisdefaultdurationformat = 21;
  if (has_tschchartaxisdefaultdurationformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->tschchartaxisdefaultdurationformat(), output);
  }

  // optional .TSK.FormatStructArchive tschchartaxisdefaultdateformat = 22;
  if (has_tschchartaxisdefaultdateformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->tschchartaxisdefaultdateformat(), output);
  }

  // optional .TSK.FormatStructArchive tschchartaxisdefaultnumberformat = 42;
  if (has_tschchartaxisdefaultnumberformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->tschchartaxisdefaultnumberformat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartAxisNonStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tschchartaxisdefault3dlabelposition = 1;
  if (has_tschchartaxisdefault3dlabelposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tschchartaxisdefault3dlabelposition(), target);
  }

  // optional .TSK.FormatStructArchive tschchartaxisdefault1_0numberformat = 2;
  if (has_tschchartaxisdefault1_0numberformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tschchartaxisdefault1_0numberformat(), target);
  }

  // optional int32 tschchartaxisdefaultnumberformattype = 3;
  if (has_tschchartaxisdefaultnumberformattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tschchartaxisdefaultnumberformattype(), target);
  }

  // optional int32 tschchartaxisvaluenumberofdecades = 4;
  if (has_tschchartaxisvaluenumberofdecades()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tschchartaxisvaluenumberofdecades(), target);
  }

  // optional int32 tschchartaxisvaluenumberofmajorgridlines = 5;
  if (has_tschchartaxisvaluenumberofmajorgridlines()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tschchartaxisvaluenumberofmajorgridlines(), target);
  }

  // optional int32 tschchartaxisvaluenumberofminorgridlines = 6;
  if (has_tschchartaxisvaluenumberofminorgridlines()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tschchartaxisvaluenumberofminorgridlines(), target);
  }

  // optional bool tschchartaxiscategoryplottoedges = 7;
  if (has_tschchartaxiscategoryplottoedges()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->tschchartaxiscategoryplottoedges(), target);
  }

  // optional int32 tschchartaxisvaluescale = 8;
  if (has_tschchartaxisvaluescale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->tschchartaxisvaluescale(), target);
  }

  // optional bool tschchartaxiscategoryshowlabels = 9;
  if (has_tschchartaxiscategoryshowlabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->tschchartaxiscategoryshowlabels(), target);
  }

  // optional bool tschchartaxisdefaultshowlabels = 10;
  if (has_tschchartaxisdefaultshowlabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->tschchartaxisdefaultshowlabels(), target);
  }

  // optional bool tschchartaxisvalueshowlabels = 11;
  if (has_tschchartaxisvalueshowlabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->tschchartaxisvalueshowlabels(), target);
  }

  // optional bool tschchartaxiscategoryshowserieslabels = 12;
  if (has_tschchartaxiscategoryshowserieslabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->tschchartaxiscategoryshowserieslabels(), target);
  }

  // optional bool tschchartaxiscategoryshowtitle = 13;
  if (has_tschchartaxiscategoryshowtitle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->tschchartaxiscategoryshowtitle(), target);
  }

  // optional bool tschchartaxisvalueshowtitle = 14;
  if (has_tschchartaxisvalueshowtitle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->tschchartaxisvalueshowtitle(), target);
  }

  // optional string tschchartaxiscategorytitle = 15;
  if (has_tschchartaxiscategorytitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tschchartaxiscategorytitle().data(), this->tschchartaxiscategorytitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->tschchartaxiscategorytitle(), target);
  }

  // optional string tschchartaxisvaluetitle = 16;
  if (has_tschchartaxisvaluetitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tschchartaxisvaluetitle().data(), this->tschchartaxisvaluetitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->tschchartaxisvaluetitle(), target);
  }

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermax = 17;
  if (has_tschchartaxisdefaultusermax()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->tschchartaxisdefaultusermax(), target);
  }

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermin = 18;
  if (has_tschchartaxisdefaultusermin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->tschchartaxisdefaultusermin(), target);
  }

  // optional bool tschchartaxismultidatashowserieslabels = 19;
  if (has_tschchartaxismultidatashowserieslabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->tschchartaxismultidatashowserieslabels(), target);
  }

  // optional .TSK.FormatStructArchive tschchartaxisdefault1_0dateformat = 20;
  if (has_tschchartaxisdefault1_0dateformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->tschchartaxisdefault1_0dateformat(), target);
  }

  // optional .TSK.FormatStructArchive tschchartaxisdefaultdurationformat = 21;
  if (has_tschchartaxisdefaultdurationformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->tschchartaxisdefaultdurationformat(), target);
  }

  // optional .TSK.FormatStructArchive tschchartaxisdefaultdateformat = 22;
  if (has_tschchartaxisdefaultdateformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->tschchartaxisdefaultdateformat(), target);
  }

  // optional .TSK.FormatStructArchive tschchartaxisdefaultnumberformat = 42;
  if (has_tschchartaxisdefaultnumberformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->tschchartaxisdefaultnumberformat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartAxisNonStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tschchartaxisdefault3dlabelposition = 1;
    if (has_tschchartaxisdefault3dlabelposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxisdefault3dlabelposition());
    }

    // optional .TSK.FormatStructArchive tschchartaxisdefault1_0numberformat = 2;
    if (has_tschchartaxisdefault1_0numberformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxisdefault1_0numberformat());
    }

    // optional .TSK.FormatStructArchive tschchartaxisdefaultnumberformat = 42;
    if (has_tschchartaxisdefaultnumberformat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxisdefaultnumberformat());
    }

    // optional .TSK.FormatStructArchive tschchartaxisdefault1_0dateformat = 20;
    if (has_tschchartaxisdefault1_0dateformat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxisdefault1_0dateformat());
    }

    // optional .TSK.FormatStructArchive tschchartaxisdefaultdurationformat = 21;
    if (has_tschchartaxisdefaultdurationformat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxisdefaultdurationformat());
    }

    // optional .TSK.FormatStructArchive tschchartaxisdefaultdateformat = 22;
    if (has_tschchartaxisdefaultdateformat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxisdefaultdateformat());
    }

    // optional int32 tschchartaxisdefaultnumberformattype = 3;
    if (has_tschchartaxisdefaultnumberformattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxisdefaultnumberformattype());
    }

    // optional int32 tschchartaxisvaluenumberofdecades = 4;
    if (has_tschchartaxisvaluenumberofdecades()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxisvaluenumberofdecades());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 tschchartaxisvaluenumberofmajorgridlines = 5;
    if (has_tschchartaxisvaluenumberofmajorgridlines()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxisvaluenumberofmajorgridlines());
    }

    // optional int32 tschchartaxisvaluenumberofminorgridlines = 6;
    if (has_tschchartaxisvaluenumberofminorgridlines()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxisvaluenumberofminorgridlines());
    }

    // optional bool tschchartaxiscategoryplottoedges = 7;
    if (has_tschchartaxiscategoryplottoedges()) {
      total_size += 1 + 1;
    }

    // optional int32 tschchartaxisvaluescale = 8;
    if (has_tschchartaxisvaluescale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxisvaluescale());
    }

    // optional bool tschchartaxiscategoryshowlabels = 9;
    if (has_tschchartaxiscategoryshowlabels()) {
      total_size += 1 + 1;
    }

    // optional bool tschchartaxisdefaultshowlabels = 10;
    if (has_tschchartaxisdefaultshowlabels()) {
      total_size += 1 + 1;
    }

    // optional bool tschchartaxisvalueshowlabels = 11;
    if (has_tschchartaxisvalueshowlabels()) {
      total_size += 1 + 1;
    }

    // optional bool tschchartaxiscategoryshowserieslabels = 12;
    if (has_tschchartaxiscategoryshowserieslabels()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool tschchartaxismultidatashowserieslabels = 19;
    if (has_tschchartaxismultidatashowserieslabels()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowtitle = 13;
    if (has_tschchartaxiscategoryshowtitle()) {
      total_size += 1 + 1;
    }

    // optional bool tschchartaxisvalueshowtitle = 14;
    if (has_tschchartaxisvalueshowtitle()) {
      total_size += 1 + 1;
    }

    // optional string tschchartaxiscategorytitle = 15;
    if (has_tschchartaxiscategorytitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tschchartaxiscategorytitle());
    }

    // optional string tschchartaxisvaluetitle = 16;
    if (has_tschchartaxisvaluetitle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tschchartaxisvaluetitle());
    }

    // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermax = 17;
    if (has_tschchartaxisdefaultusermax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxisdefaultusermax());
    }

    // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermin = 18;
    if (has_tschchartaxisdefaultusermin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxisdefaultusermin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartAxisNonStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartAxisNonStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartAxisNonStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartAxisNonStyleArchive::MergeFrom(const ChartAxisNonStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tschchartaxisdefault3dlabelposition()) {
      set_tschchartaxisdefault3dlabelposition(from.tschchartaxisdefault3dlabelposition());
    }
    if (from.has_tschchartaxisdefault1_0numberformat()) {
      mutable_tschchartaxisdefault1_0numberformat()->::TSK::FormatStructArchive::MergeFrom(from.tschchartaxisdefault1_0numberformat());
    }
    if (from.has_tschchartaxisdefaultnumberformat()) {
      mutable_tschchartaxisdefaultnumberformat()->::TSK::FormatStructArchive::MergeFrom(from.tschchartaxisdefaultnumberformat());
    }
    if (from.has_tschchartaxisdefault1_0dateformat()) {
      mutable_tschchartaxisdefault1_0dateformat()->::TSK::FormatStructArchive::MergeFrom(from.tschchartaxisdefault1_0dateformat());
    }
    if (from.has_tschchartaxisdefaultdurationformat()) {
      mutable_tschchartaxisdefaultdurationformat()->::TSK::FormatStructArchive::MergeFrom(from.tschchartaxisdefaultdurationformat());
    }
    if (from.has_tschchartaxisdefaultdateformat()) {
      mutable_tschchartaxisdefaultdateformat()->::TSK::FormatStructArchive::MergeFrom(from.tschchartaxisdefaultdateformat());
    }
    if (from.has_tschchartaxisdefaultnumberformattype()) {
      set_tschchartaxisdefaultnumberformattype(from.tschchartaxisdefaultnumberformattype());
    }
    if (from.has_tschchartaxisvaluenumberofdecades()) {
      set_tschchartaxisvaluenumberofdecades(from.tschchartaxisvaluenumberofdecades());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tschchartaxisvaluenumberofmajorgridlines()) {
      set_tschchartaxisvaluenumberofmajorgridlines(from.tschchartaxisvaluenumberofmajorgridlines());
    }
    if (from.has_tschchartaxisvaluenumberofminorgridlines()) {
      set_tschchartaxisvaluenumberofminorgridlines(from.tschchartaxisvaluenumberofminorgridlines());
    }
    if (from.has_tschchartaxiscategoryplottoedges()) {
      set_tschchartaxiscategoryplottoedges(from.tschchartaxiscategoryplottoedges());
    }
    if (from.has_tschchartaxisvaluescale()) {
      set_tschchartaxisvaluescale(from.tschchartaxisvaluescale());
    }
    if (from.has_tschchartaxiscategoryshowlabels()) {
      set_tschchartaxiscategoryshowlabels(from.tschchartaxiscategoryshowlabels());
    }
    if (from.has_tschchartaxisdefaultshowlabels()) {
      set_tschchartaxisdefaultshowlabels(from.tschchartaxisdefaultshowlabels());
    }
    if (from.has_tschchartaxisvalueshowlabels()) {
      set_tschchartaxisvalueshowlabels(from.tschchartaxisvalueshowlabels());
    }
    if (from.has_tschchartaxiscategoryshowserieslabels()) {
      set_tschchartaxiscategoryshowserieslabels(from.tschchartaxiscategoryshowserieslabels());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tschchartaxismultidatashowserieslabels()) {
      set_tschchartaxismultidatashowserieslabels(from.tschchartaxismultidatashowserieslabels());
    }
    if (from.has_tschchartaxiscategoryshowtitle()) {
      set_tschchartaxiscategoryshowtitle(from.tschchartaxiscategoryshowtitle());
    }
    if (from.has_tschchartaxisvalueshowtitle()) {
      set_tschchartaxisvalueshowtitle(from.tschchartaxisvalueshowtitle());
    }
    if (from.has_tschchartaxiscategorytitle()) {
      set_tschchartaxiscategorytitle(from.tschchartaxiscategorytitle());
    }
    if (from.has_tschchartaxisvaluetitle()) {
      set_tschchartaxisvaluetitle(from.tschchartaxisvaluetitle());
    }
    if (from.has_tschchartaxisdefaultusermax()) {
      mutable_tschchartaxisdefaultusermax()->::TSCH::ChartsNSNumberDoubleArchive::MergeFrom(from.tschchartaxisdefaultusermax());
    }
    if (from.has_tschchartaxisdefaultusermin()) {
      mutable_tschchartaxisdefaultusermin()->::TSCH::ChartsNSNumberDoubleArchive::MergeFrom(from.tschchartaxisdefaultusermin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartAxisNonStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartAxisNonStyleArchive::CopyFrom(const ChartAxisNonStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartAxisNonStyleArchive::IsInitialized() const {

  if (has_tschchartaxisdefault1_0numberformat()) {
    if (!this->tschchartaxisdefault1_0numberformat().IsInitialized()) return false;
  }
  if (has_tschchartaxisdefaultnumberformat()) {
    if (!this->tschchartaxisdefaultnumberformat().IsInitialized()) return false;
  }
  if (has_tschchartaxisdefault1_0dateformat()) {
    if (!this->tschchartaxisdefault1_0dateformat().IsInitialized()) return false;
  }
  if (has_tschchartaxisdefaultdurationformat()) {
    if (!this->tschchartaxisdefaultdurationformat().IsInitialized()) return false;
  }
  if (has_tschchartaxisdefaultdateformat()) {
    if (!this->tschchartaxisdefaultdateformat().IsInitialized()) return false;
  }
  return true;
}

void ChartAxisNonStyleArchive::Swap(ChartAxisNonStyleArchive* other) {
  if (other != this) {
    std::swap(tschchartaxisdefault3dlabelposition_, other->tschchartaxisdefault3dlabelposition_);
    std::swap(tschchartaxisdefault1_0numberformat_, other->tschchartaxisdefault1_0numberformat_);
    std::swap(tschchartaxisdefaultnumberformat_, other->tschchartaxisdefaultnumberformat_);
    std::swap(tschchartaxisdefault1_0dateformat_, other->tschchartaxisdefault1_0dateformat_);
    std::swap(tschchartaxisdefaultdurationformat_, other->tschchartaxisdefaultdurationformat_);
    std::swap(tschchartaxisdefaultdateformat_, other->tschchartaxisdefaultdateformat_);
    std::swap(tschchartaxisdefaultnumberformattype_, other->tschchartaxisdefaultnumberformattype_);
    std::swap(tschchartaxisvaluenumberofdecades_, other->tschchartaxisvaluenumberofdecades_);
    std::swap(tschchartaxisvaluenumberofmajorgridlines_, other->tschchartaxisvaluenumberofmajorgridlines_);
    std::swap(tschchartaxisvaluenumberofminorgridlines_, other->tschchartaxisvaluenumberofminorgridlines_);
    std::swap(tschchartaxiscategoryplottoedges_, other->tschchartaxiscategoryplottoedges_);
    std::swap(tschchartaxisvaluescale_, other->tschchartaxisvaluescale_);
    std::swap(tschchartaxiscategoryshowlabels_, other->tschchartaxiscategoryshowlabels_);
    std::swap(tschchartaxisdefaultshowlabels_, other->tschchartaxisdefaultshowlabels_);
    std::swap(tschchartaxisvalueshowlabels_, other->tschchartaxisvalueshowlabels_);
    std::swap(tschchartaxiscategoryshowserieslabels_, other->tschchartaxiscategoryshowserieslabels_);
    std::swap(tschchartaxismultidatashowserieslabels_, other->tschchartaxismultidatashowserieslabels_);
    std::swap(tschchartaxiscategoryshowtitle_, other->tschchartaxiscategoryshowtitle_);
    std::swap(tschchartaxisvalueshowtitle_, other->tschchartaxisvalueshowtitle_);
    std::swap(tschchartaxiscategorytitle_, other->tschchartaxiscategorytitle_);
    std::swap(tschchartaxisvaluetitle_, other->tschchartaxisvaluetitle_);
    std::swap(tschchartaxisdefaultusermax_, other->tschchartaxisdefaultusermax_);
    std::swap(tschchartaxisdefaultusermin_, other->tschchartaxisdefaultusermin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartAxisNonStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartAxisNonStyleArchive_descriptor_;
  metadata.reflection = ChartAxisNonStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartSeriesStyleArchive::kTschchartseriesdefaulterrorbarlineendFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaulterrorbarlineendscatterxFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaulterrorbarshadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaulterrorbarstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaulterrorbarstrokescatterxFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseries3DareafillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseries3DbarfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseries3DcolumnfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseries3DlinefillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseries3DpiefillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesareafillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesbarfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriescolumnfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaultfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedareafillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedcolumnfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriespiefillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesarealabelparagraphstyleindexFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesbarlabelparagraphstyleindexFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaultlabelparagraphstyleindexFieldNumber;
const int ChartSeriesStyleArchive::kTschchartserieslinelabelparagraphstyleindexFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedlabelparagraphstyleindexFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriespielabelparagraphstyleindexFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaultopacityFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesareaoutsidelabelparagraphstyleindexFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesbaroutsidelabelparagraphstyleindexFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaultoutsidelabelparagraphstyleindexFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedoutsidelabelparagraphstyleindexFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriespieoutsidelabelparagraphstyleindexFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseries3DareashadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseries3DbarshadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseries3DcolumnshadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseries3DlineshadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseries3DpieshadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesareashadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesbarshadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesbubbleshadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaultshadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartserieslineshadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedareashadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedcolumnshadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedlineshadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriespieshadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesscattershadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesareastrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesbarstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesbubblestrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartserieslinestrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedareastrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedcolumnstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedlinestrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriespiestrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesscatterstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesareasymbolfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesbubblesymbolfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartserieslinesymbolfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedareasymbolfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedlinesymbolfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesscattersymbolfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesareasymbolfilluseseriesfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartserieslinesymbolfilluseseriesfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedareasymbolfilluseseriesfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedlinesymbolfilluseseriesfillFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesareasymbolfilluseseriesstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesbubblesymbolfilluseseriesstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartserieslinesymbolfilluseseriesstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedareasymbolfilluseseriesstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedlinesymbolfilluseseriesstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesscattersymbolfilluseseriesstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesareasymbolsizeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartserieslinesymbolsizeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedareasymbolsizeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedlinesymbolsizeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesscattersymbolsizeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesareasymbolstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesbubblesymbolstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartserieslinesymbolstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedareasymbolstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedlinesymbolstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesscattersymbolstrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaulttrendlineequationopacityFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaulttrendlineequationparagraphstyleindexFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaulttrendlinersquaredopacityFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaulttrendlinersquaredparagraphstyleindexFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaulttrendlineshadowFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaulttrendlinestrokeFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesareavaluelabelpositionFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesbarvaluelabelpositionFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesbubblevaluelabelpositionFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesdefaultvaluelabelpositionFieldNumber;
const int ChartSeriesStyleArchive::kTschchartserieslinevaluelabelpositionFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedareavaluelabelpositionFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedcolumnvaluelabelpositionFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesmixedlinevaluelabelpositionFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesscattervaluelabelpositionFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesstackedareavaluelabelpositionFieldNumber;
const int ChartSeriesStyleArchive::kTschchartseriesstackedbarvaluelabelpositionFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ChartSeriesStyleArchive::kCurrentFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartSeriesStyleArchive,
    ::google::protobuf::internal::MessageTypeTraits< ::TSCH::Generated::ChartSeriesStyleArchive >, 11, false >
  ChartSeriesStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::ChartSeriesStyleArchive::default_instance());
ChartSeriesStyleArchive::ChartSeriesStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartSeriesStyleArchive::InitAsDefaultInstance() {
  tschchartseriesdefaulterrorbarlineend_ = const_cast< ::TSD::LineEndArchive*>(&::TSD::LineEndArchive::default_instance());
  tschchartseriesdefaulterrorbarlineendscatterx_ = const_cast< ::TSD::LineEndArchive*>(&::TSD::LineEndArchive::default_instance());
  tschchartseriesdefaulterrorbarshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseriesdefaulterrorbarstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriesdefaulterrorbarstrokescatterx_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseries3dareafill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseries3dbarfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseries3dcolumnfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseries3dlinefill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseries3dpiefill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseriesareafill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseriesbarfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseriescolumnfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseriesdefaultfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseriesmixedareafill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseriesmixedcolumnfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseriespiefill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseries3dareashadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseries3dbarshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseries3dcolumnshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseries3dlineshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseries3dpieshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseriesareashadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseriesbarshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseriesbubbleshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseriesdefaultshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartserieslineshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseriesmixedareashadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseriesmixedcolumnshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseriesmixedlineshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseriespieshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseriesscattershadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseriesareastroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriesbarstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriesbubblestroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartserieslinestroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriesmixedareastroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriesmixedcolumnstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriesmixedlinestroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriespiestroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriesscatterstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriesareasymbolfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseriesbubblesymbolfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartserieslinesymbolfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseriesmixedareasymbolfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseriesmixedlinesymbolfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseriesscattersymbolfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseriesareasymbolstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriesbubblesymbolstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartserieslinesymbolstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriesmixedareasymbolstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriesmixedlinesymbolstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriesscattersymbolstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriesdefaulttrendlineshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseriesdefaulttrendlinestroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
}

ChartSeriesStyleArchive::ChartSeriesStyleArchive(const ChartSeriesStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartSeriesStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  tschchartseriesdefaulterrorbarlineend_ = NULL;
  tschchartseriesdefaulterrorbarlineendscatterx_ = NULL;
  tschchartseriesdefaulterrorbarshadow_ = NULL;
  tschchartseriesdefaulterrorbarstroke_ = NULL;
  tschchartseriesdefaulterrorbarstrokescatterx_ = NULL;
  tschchartseries3dareafill_ = NULL;
  tschchartseries3dbarfill_ = NULL;
  tschchartseries3dcolumnfill_ = NULL;
  tschchartseries3dlinefill_ = NULL;
  tschchartseries3dpiefill_ = NULL;
  tschchartseriesareafill_ = NULL;
  tschchartseriesbarfill_ = NULL;
  tschchartseriescolumnfill_ = NULL;
  tschchartseriesdefaultfill_ = NULL;
  tschchartseriesmixedareafill_ = NULL;
  tschchartseriesmixedcolumnfill_ = NULL;
  tschchartseriespiefill_ = NULL;
  tschchartseriesarealabelparagraphstyleindex_ = 0;
  tschchartseriesbarlabelparagraphstyleindex_ = 0;
  tschchartseriesdefaultlabelparagraphstyleindex_ = 0;
  tschchartserieslinelabelparagraphstyleindex_ = 0;
  tschchartseriesmixedlabelparagraphstyleindex_ = 0;
  tschchartseriespielabelparagraphstyleindex_ = 0;
  tschchartseriesdefaultopacity_ = 0;
  tschchartseriesareaoutsidelabelparagraphstyleindex_ = 0;
  tschchartseriesbaroutsidelabelparagraphstyleindex_ = 0;
  tschchartseriesdefaultoutsidelabelparagraphstyleindex_ = 0;
  tschchartseriesmixedoutsidelabelparagraphstyleindex_ = 0;
  tschchartseriespieoutsidelabelparagraphstyleindex_ = 0;
  tschchartseries3dareashadow_ = NULL;
  tschchartseries3dbarshadow_ = NULL;
  tschchartseries3dcolumnshadow_ = NULL;
  tschchartseries3dlineshadow_ = NULL;
  tschchartseries3dpieshadow_ = NULL;
  tschchartseriesareashadow_ = NULL;
  tschchartseriesbarshadow_ = NULL;
  tschchartseriesbubbleshadow_ = NULL;
  tschchartseriesdefaultshadow_ = NULL;
  tschchartserieslineshadow_ = NULL;
  tschchartseriesmixedareashadow_ = NULL;
  tschchartseriesmixedcolumnshadow_ = NULL;
  tschchartseriesmixedlineshadow_ = NULL;
  tschchartseriespieshadow_ = NULL;
  tschchartseriesscattershadow_ = NULL;
  tschchartseriesareastroke_ = NULL;
  tschchartseriesbarstroke_ = NULL;
  tschchartseriesbubblestroke_ = NULL;
  tschchartserieslinestroke_ = NULL;
  tschchartseriesmixedareastroke_ = NULL;
  tschchartseriesmixedcolumnstroke_ = NULL;
  tschchartseriesmixedlinestroke_ = NULL;
  tschchartseriespiestroke_ = NULL;
  tschchartseriesscatterstroke_ = NULL;
  tschchartseriesareasymbolfill_ = NULL;
  tschchartseriesbubblesymbolfill_ = NULL;
  tschchartserieslinesymbolfill_ = NULL;
  tschchartseriesmixedareasymbolfill_ = NULL;
  tschchartseriesmixedlinesymbolfill_ = NULL;
  tschchartseriesscattersymbolfill_ = NULL;
  tschchartseriesareasymbolfilluseseriesfill_ = false;
  tschchartserieslinesymbolfilluseseriesfill_ = false;
  tschchartseriesmixedareasymbolfilluseseriesfill_ = false;
  tschchartseriesmixedlinesymbolfilluseseriesfill_ = false;
  tschchartseriesareasymbolfilluseseriesstroke_ = false;
  tschchartseriesbubblesymbolfilluseseriesstroke_ = false;
  tschchartserieslinesymbolfilluseseriesstroke_ = false;
  tschchartseriesmixedareasymbolfilluseseriesstroke_ = false;
  tschchartseriesmixedlinesymbolfilluseseriesstroke_ = false;
  tschchartseriesscattersymbolfilluseseriesstroke_ = false;
  tschchartseriesareasymbolsize_ = 0;
  tschchartserieslinesymbolsize_ = 0;
  tschchartseriesmixedareasymbolsize_ = 0;
  tschchartseriesmixedlinesymbolsize_ = 0;
  tschchartseriesscattersymbolsize_ = 0;
  tschchartseriesareasymbolstroke_ = NULL;
  tschchartseriesbubblesymbolstroke_ = NULL;
  tschchartserieslinesymbolstroke_ = NULL;
  tschchartseriesmixedareasymbolstroke_ = NULL;
  tschchartseriesmixedlinesymbolstroke_ = NULL;
  tschchartseriesscattersymbolstroke_ = NULL;
  tschchartseriesdefaulttrendlineequationopacity_ = 0;
  tschchartseriesdefaulttrendlineequationparagraphstyleindex_ = 0;
  tschchartseriesdefaulttrendlinersquaredopacity_ = 0;
  tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_ = 0;
  tschchartseriesdefaulttrendlineshadow_ = NULL;
  tschchartseriesdefaulttrendlinestroke_ = NULL;
  tschchartseriesareavaluelabelposition_ = 0;
  tschchartseriesbarvaluelabelposition_ = 0;
  tschchartseriesbubblevaluelabelposition_ = 0;
  tschchartseriesdefaultvaluelabelposition_ = 0;
  tschchartserieslinevaluelabelposition_ = 0;
  tschchartseriesmixedareavaluelabelposition_ = 0;
  tschchartseriesmixedcolumnvaluelabelposition_ = 0;
  tschchartseriesmixedlinevaluelabelposition_ = 0;
  tschchartseriesscattervaluelabelposition_ = 0;
  tschchartseriesstackedareavaluelabelposition_ = 0;
  tschchartseriesstackedbarvaluelabelposition_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartSeriesStyleArchive::~ChartSeriesStyleArchive() {
  SharedDtor();
}

void ChartSeriesStyleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete tschchartseriesdefaulterrorbarlineend_;
    delete tschchartseriesdefaulterrorbarlineendscatterx_;
    delete tschchartseriesdefaulterrorbarshadow_;
    delete tschchartseriesdefaulterrorbarstroke_;
    delete tschchartseriesdefaulterrorbarstrokescatterx_;
    delete tschchartseries3dareafill_;
    delete tschchartseries3dbarfill_;
    delete tschchartseries3dcolumnfill_;
    delete tschchartseries3dlinefill_;
    delete tschchartseries3dpiefill_;
    delete tschchartseriesareafill_;
    delete tschchartseriesbarfill_;
    delete tschchartseriescolumnfill_;
    delete tschchartseriesdefaultfill_;
    delete tschchartseriesmixedareafill_;
    delete tschchartseriesmixedcolumnfill_;
    delete tschchartseriespiefill_;
    delete tschchartseries3dareashadow_;
    delete tschchartseries3dbarshadow_;
    delete tschchartseries3dcolumnshadow_;
    delete tschchartseries3dlineshadow_;
    delete tschchartseries3dpieshadow_;
    delete tschchartseriesareashadow_;
    delete tschchartseriesbarshadow_;
    delete tschchartseriesbubbleshadow_;
    delete tschchartseriesdefaultshadow_;
    delete tschchartserieslineshadow_;
    delete tschchartseriesmixedareashadow_;
    delete tschchartseriesmixedcolumnshadow_;
    delete tschchartseriesmixedlineshadow_;
    delete tschchartseriespieshadow_;
    delete tschchartseriesscattershadow_;
    delete tschchartseriesareastroke_;
    delete tschchartseriesbarstroke_;
    delete tschchartseriesbubblestroke_;
    delete tschchartserieslinestroke_;
    delete tschchartseriesmixedareastroke_;
    delete tschchartseriesmixedcolumnstroke_;
    delete tschchartseriesmixedlinestroke_;
    delete tschchartseriespiestroke_;
    delete tschchartseriesscatterstroke_;
    delete tschchartseriesareasymbolfill_;
    delete tschchartseriesbubblesymbolfill_;
    delete tschchartserieslinesymbolfill_;
    delete tschchartseriesmixedareasymbolfill_;
    delete tschchartseriesmixedlinesymbolfill_;
    delete tschchartseriesscattersymbolfill_;
    delete tschchartseriesareasymbolstroke_;
    delete tschchartseriesbubblesymbolstroke_;
    delete tschchartserieslinesymbolstroke_;
    delete tschchartseriesmixedareasymbolstroke_;
    delete tschchartseriesmixedlinesymbolstroke_;
    delete tschchartseriesscattersymbolstroke_;
    delete tschchartseriesdefaulttrendlineshadow_;
    delete tschchartseriesdefaulttrendlinestroke_;
  }
}

void ChartSeriesStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartSeriesStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartSeriesStyleArchive_descriptor_;
}

const ChartSeriesStyleArchive& ChartSeriesStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eGEN_2eproto();
  return *default_instance_;
}

ChartSeriesStyleArchive* ChartSeriesStyleArchive::default_instance_ = NULL;

ChartSeriesStyleArchive* ChartSeriesStyleArchive::New() const {
  return new ChartSeriesStyleArchive;
}

void ChartSeriesStyleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tschchartseriesdefaulterrorbarlineend()) {
      if (tschchartseriesdefaulterrorbarlineend_ != NULL) tschchartseriesdefaulterrorbarlineend_->::TSD::LineEndArchive::Clear();
    }
    if (has_tschchartseriesdefaulterrorbarlineendscatterx()) {
      if (tschchartseriesdefaulterrorbarlineendscatterx_ != NULL) tschchartseriesdefaulterrorbarlineendscatterx_->::TSD::LineEndArchive::Clear();
    }
    if (has_tschchartseriesdefaulterrorbarshadow()) {
      if (tschchartseriesdefaulterrorbarshadow_ != NULL) tschchartseriesdefaulterrorbarshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartseriesdefaulterrorbarstroke()) {
      if (tschchartseriesdefaulterrorbarstroke_ != NULL) tschchartseriesdefaulterrorbarstroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartseriesdefaulterrorbarstrokescatterx()) {
      if (tschchartseriesdefaulterrorbarstrokescatterx_ != NULL) tschchartseriesdefaulterrorbarstrokescatterx_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartseries3dareafill()) {
      if (tschchartseries3dareafill_ != NULL) tschchartseries3dareafill_->::TSD::FillArchive::Clear();
    }
    if (has_tschchartseries3dbarfill()) {
      if (tschchartseries3dbarfill_ != NULL) tschchartseries3dbarfill_->::TSD::FillArchive::Clear();
    }
    if (has_tschchartseries3dcolumnfill()) {
      if (tschchartseries3dcolumnfill_ != NULL) tschchartseries3dcolumnfill_->::TSD::FillArchive::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_tschchartseries3dlinefill()) {
      if (tschchartseries3dlinefill_ != NULL) tschchartseries3dlinefill_->::TSD::FillArchive::Clear();
    }
    if (has_tschchartseries3dpiefill()) {
      if (tschchartseries3dpiefill_ != NULL) tschchartseries3dpiefill_->::TSD::FillArchive::Clear();
    }
    if (has_tschchartseriesareafill()) {
      if (tschchartseriesareafill_ != NULL) tschchartseriesareafill_->::TSD::FillArchive::Clear();
    }
    if (has_tschchartseriesbarfill()) {
      if (tschchartseriesbarfill_ != NULL) tschchartseriesbarfill_->::TSD::FillArchive::Clear();
    }
    if (has_tschchartseriescolumnfill()) {
      if (tschchartseriescolumnfill_ != NULL) tschchartseriescolumnfill_->::TSD::FillArchive::Clear();
    }
    if (has_tschchartseriesdefaultfill()) {
      if (tschchartseriesdefaultfill_ != NULL) tschchartseriesdefaultfill_->::TSD::FillArchive::Clear();
    }
    if (has_tschchartseriesmixedareafill()) {
      if (tschchartseriesmixedareafill_ != NULL) tschchartseriesmixedareafill_->::TSD::FillArchive::Clear();
    }
    if (has_tschchartseriesmixedcolumnfill()) {
      if (tschchartseriesmixedcolumnfill_ != NULL) tschchartseriesmixedcolumnfill_->::TSD::FillArchive::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_tschchartseriespiefill()) {
      if (tschchartseriespiefill_ != NULL) tschchartseriespiefill_->::TSD::FillArchive::Clear();
    }
    tschchartseriesarealabelparagraphstyleindex_ = 0;
    tschchartseriesbarlabelparagraphstyleindex_ = 0;
    tschchartseriesdefaultlabelparagraphstyleindex_ = 0;
    tschchartserieslinelabelparagraphstyleindex_ = 0;
    tschchartseriesmixedlabelparagraphstyleindex_ = 0;
    tschchartseriespielabelparagraphstyleindex_ = 0;
    tschchartseriesdefaultopacity_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    tschchartseriesareaoutsidelabelparagraphstyleindex_ = 0;
    tschchartseriesbaroutsidelabelparagraphstyleindex_ = 0;
    tschchartseriesdefaultoutsidelabelparagraphstyleindex_ = 0;
    tschchartseriesmixedoutsidelabelparagraphstyleindex_ = 0;
    tschchartseriespieoutsidelabelparagraphstyleindex_ = 0;
    if (has_tschchartseries3dareashadow()) {
      if (tschchartseries3dareashadow_ != NULL) tschchartseries3dareashadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartseries3dbarshadow()) {
      if (tschchartseries3dbarshadow_ != NULL) tschchartseries3dbarshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartseries3dcolumnshadow()) {
      if (tschchartseries3dcolumnshadow_ != NULL) tschchartseries3dcolumnshadow_->::TSD::ShadowArchive::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_tschchartseries3dlineshadow()) {
      if (tschchartseries3dlineshadow_ != NULL) tschchartseries3dlineshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartseries3dpieshadow()) {
      if (tschchartseries3dpieshadow_ != NULL) tschchartseries3dpieshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartseriesareashadow()) {
      if (tschchartseriesareashadow_ != NULL) tschchartseriesareashadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartseriesbarshadow()) {
      if (tschchartseriesbarshadow_ != NULL) tschchartseriesbarshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartseriesbubbleshadow()) {
      if (tschchartseriesbubbleshadow_ != NULL) tschchartseriesbubbleshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartseriesdefaultshadow()) {
      if (tschchartseriesdefaultshadow_ != NULL) tschchartseriesdefaultshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartserieslineshadow()) {
      if (tschchartserieslineshadow_ != NULL) tschchartserieslineshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartseriesmixedareashadow()) {
      if (tschchartseriesmixedareashadow_ != NULL) tschchartseriesmixedareashadow_->::TSD::ShadowArchive::Clear();
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_tschchartseriesmixedcolumnshadow()) {
      if (tschchartseriesmixedcolumnshadow_ != NULL) tschchartseriesmixedcolumnshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartseriesmixedlineshadow()) {
      if (tschchartseriesmixedlineshadow_ != NULL) tschchartseriesmixedlineshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartseriespieshadow()) {
      if (tschchartseriespieshadow_ != NULL) tschchartseriespieshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartseriesscattershadow()) {
      if (tschchartseriesscattershadow_ != NULL) tschchartseriesscattershadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartseriesareastroke()) {
      if (tschchartseriesareastroke_ != NULL) tschchartseriesareastroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartseriesbarstroke()) {
      if (tschchartseriesbarstroke_ != NULL) tschchartseriesbarstroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartseriesbubblestroke()) {
      if (tschchartseriesbubblestroke_ != NULL) tschchartseriesbubblestroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartserieslinestroke()) {
      if (tschchartserieslinestroke_ != NULL) tschchartserieslinestroke_->::TSD::StrokeArchive::Clear();
    }
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (has_tschchartseriesmixedareastroke()) {
      if (tschchartseriesmixedareastroke_ != NULL) tschchartseriesmixedareastroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartseriesmixedcolumnstroke()) {
      if (tschchartseriesmixedcolumnstroke_ != NULL) tschchartseriesmixedcolumnstroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartseriesmixedlinestroke()) {
      if (tschchartseriesmixedlinestroke_ != NULL) tschchartseriesmixedlinestroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartseriespiestroke()) {
      if (tschchartseriespiestroke_ != NULL) tschchartseriespiestroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartseriesscatterstroke()) {
      if (tschchartseriesscatterstroke_ != NULL) tschchartseriesscatterstroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartseriesareasymbolfill()) {
      if (tschchartseriesareasymbolfill_ != NULL) tschchartseriesareasymbolfill_->::TSD::FillArchive::Clear();
    }
    if (has_tschchartseriesbubblesymbolfill()) {
      if (tschchartseriesbubblesymbolfill_ != NULL) tschchartseriesbubblesymbolfill_->::TSD::FillArchive::Clear();
    }
    if (has_tschchartserieslinesymbolfill()) {
      if (tschchartserieslinesymbolfill_ != NULL) tschchartserieslinesymbolfill_->::TSD::FillArchive::Clear();
    }
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (has_tschchartseriesmixedareasymbolfill()) {
      if (tschchartseriesmixedareasymbolfill_ != NULL) tschchartseriesmixedareasymbolfill_->::TSD::FillArchive::Clear();
    }
    if (has_tschchartseriesmixedlinesymbolfill()) {
      if (tschchartseriesmixedlinesymbolfill_ != NULL) tschchartseriesmixedlinesymbolfill_->::TSD::FillArchive::Clear();
    }
    if (has_tschchartseriesscattersymbolfill()) {
      if (tschchartseriesscattersymbolfill_ != NULL) tschchartseriesscattersymbolfill_->::TSD::FillArchive::Clear();
    }
    tschchartseriesareasymbolfilluseseriesfill_ = false;
    tschchartserieslinesymbolfilluseseriesfill_ = false;
    tschchartseriesmixedareasymbolfilluseseriesfill_ = false;
    tschchartseriesmixedlinesymbolfilluseseriesfill_ = false;
    tschchartseriesareasymbolfilluseseriesstroke_ = false;
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    tschchartseriesbubblesymbolfilluseseriesstroke_ = false;
    tschchartserieslinesymbolfilluseseriesstroke_ = false;
    tschchartseriesmixedareasymbolfilluseseriesstroke_ = false;
    tschchartseriesmixedlinesymbolfilluseseriesstroke_ = false;
    tschchartseriesscattersymbolfilluseseriesstroke_ = false;
    tschchartseriesareasymbolsize_ = 0;
    tschchartserieslinesymbolsize_ = 0;
    tschchartseriesmixedareasymbolsize_ = 0;
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    tschchartseriesmixedlinesymbolsize_ = 0;
    tschchartseriesscattersymbolsize_ = 0;
    if (has_tschchartseriesareasymbolstroke()) {
      if (tschchartseriesareasymbolstroke_ != NULL) tschchartseriesareasymbolstroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartseriesbubblesymbolstroke()) {
      if (tschchartseriesbubblesymbolstroke_ != NULL) tschchartseriesbubblesymbolstroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartserieslinesymbolstroke()) {
      if (tschchartserieslinesymbolstroke_ != NULL) tschchartserieslinesymbolstroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartseriesmixedareasymbolstroke()) {
      if (tschchartseriesmixedareasymbolstroke_ != NULL) tschchartseriesmixedareasymbolstroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartseriesmixedlinesymbolstroke()) {
      if (tschchartseriesmixedlinesymbolstroke_ != NULL) tschchartseriesmixedlinesymbolstroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartseriesscattersymbolstroke()) {
      if (tschchartseriesscattersymbolstroke_ != NULL) tschchartseriesscattersymbolstroke_->::TSD::StrokeArchive::Clear();
    }
  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    tschchartseriesdefaulttrendlineequationopacity_ = 0;
    tschchartseriesdefaulttrendlineequationparagraphstyleindex_ = 0;
    tschchartseriesdefaulttrendlinersquaredopacity_ = 0;
    tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_ = 0;
    if (has_tschchartseriesdefaulttrendlineshadow()) {
      if (tschchartseriesdefaulttrendlineshadow_ != NULL) tschchartseriesdefaulttrendlineshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartseriesdefaulttrendlinestroke()) {
      if (tschchartseriesdefaulttrendlinestroke_ != NULL) tschchartseriesdefaulttrendlinestroke_->::TSD::StrokeArchive::Clear();
    }
    tschchartseriesareavaluelabelposition_ = 0;
    tschchartseriesbarvaluelabelposition_ = 0;
  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    tschchartseriesbubblevaluelabelposition_ = 0;
    tschchartseriesdefaultvaluelabelposition_ = 0;
    tschchartserieslinevaluelabelposition_ = 0;
    tschchartseriesmixedareavaluelabelposition_ = 0;
    tschchartseriesmixedcolumnvaluelabelposition_ = 0;
    tschchartseriesmixedlinevaluelabelposition_ = 0;
    tschchartseriesscattervaluelabelposition_ = 0;
    tschchartseriesstackedareavaluelabelposition_ = 0;
  }
  if (_has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    tschchartseriesstackedbarvaluelabelposition_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartSeriesStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineend = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefaulterrorbarlineend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tschchartseriesdefaulterrorbarlineendscatterx;
        break;
      }

      // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineendscatterx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaulterrorbarlineendscatterx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefaulterrorbarlineendscatterx()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tschchartseriesdefaulterrorbarshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseriesdefaulterrorbarshadow = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaulterrorbarshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefaulterrorbarshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tschchartseriesdefaulterrorbarstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstroke = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaulterrorbarstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefaulterrorbarstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tschchartseriesdefaulterrorbarstrokescatterx;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstrokescatterx = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaulterrorbarstrokescatterx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefaulterrorbarstrokescatterx()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_tschchartseries3dareafill;
        break;
      }

      // optional .TSD.FillArchive tschchartseries3dareafill = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseries3dareafill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseries3dareafill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_tschchartseries3dbarfill;
        break;
      }

      // optional .TSD.FillArchive tschchartseries3dbarfill = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseries3dbarfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseries3dbarfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_tschchartseries3dcolumnfill;
        break;
      }

      // optional .TSD.FillArchive tschchartseries3dcolumnfill = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseries3dcolumnfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseries3dcolumnfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_tschchartseries3dlinefill;
        break;
      }

      // optional .TSD.FillArchive tschchartseries3dlinefill = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseries3dlinefill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseries3dlinefill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_tschchartseries3dpiefill;
        break;
      }

      // optional .TSD.FillArchive tschchartseries3dpiefill = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseries3dpiefill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseries3dpiefill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_tschchartseriesareafill;
        break;
      }

      // optional .TSD.FillArchive tschchartseriesareafill = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesareafill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesareafill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_tschchartseriesbarfill;
        break;
      }

      // optional .TSD.FillArchive tschchartseriesbarfill = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesbarfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesbarfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_tschchartseriescolumnfill;
        break;
      }

      // optional .TSD.FillArchive tschchartseriescolumnfill = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriescolumnfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriescolumnfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_tschchartseriesdefaultfill;
        break;
      }

      // optional .TSD.FillArchive tschchartseriesdefaultfill = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaultfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefaultfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_tschchartseriesmixedareafill;
        break;
      }

      // optional .TSD.FillArchive tschchartseriesmixedareafill = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesmixedareafill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesmixedareafill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_tschchartseriesmixedcolumnfill;
        break;
      }

      // optional .TSD.FillArchive tschchartseriesmixedcolumnfill = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesmixedcolumnfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesmixedcolumnfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_tschchartseriespiefill;
        break;
      }

      // optional .TSD.FillArchive tschchartseriespiefill = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriespiefill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriespiefill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_tschchartseriesarealabelparagraphstyleindex;
        break;
      }

      // optional int32 tschchartseriesarealabelparagraphstyleindex = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesarealabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesarealabelparagraphstyleindex_)));
          set_has_tschchartseriesarealabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_tschchartseriesbarlabelparagraphstyleindex;
        break;
      }

      // optional int32 tschchartseriesbarlabelparagraphstyleindex = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesbarlabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesbarlabelparagraphstyleindex_)));
          set_has_tschchartseriesbarlabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_tschchartseriesdefaultlabelparagraphstyleindex;
        break;
      }

      // optional int32 tschchartseriesdefaultlabelparagraphstyleindex = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaultlabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesdefaultlabelparagraphstyleindex_)));
          set_has_tschchartseriesdefaultlabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_tschchartserieslinelabelparagraphstyleindex;
        break;
      }

      // optional int32 tschchartserieslinelabelparagraphstyleindex = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartserieslinelabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartserieslinelabelparagraphstyleindex_)));
          set_has_tschchartserieslinelabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_tschchartseriesmixedlabelparagraphstyleindex;
        break;
      }

      // optional int32 tschchartseriesmixedlabelparagraphstyleindex = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesmixedlabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesmixedlabelparagraphstyleindex_)));
          set_has_tschchartseriesmixedlabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_tschchartseriespielabelparagraphstyleindex;
        break;
      }

      // optional int32 tschchartseriespielabelparagraphstyleindex = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriespielabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriespielabelparagraphstyleindex_)));
          set_has_tschchartseriespielabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_tschchartseriesdefaultopacity;
        break;
      }

      // optional float tschchartseriesdefaultopacity = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesdefaultopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesdefaultopacity_)));
          set_has_tschchartseriesdefaultopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_tschchartseriesareaoutsidelabelparagraphstyleindex;
        break;
      }

      // optional int32 tschchartseriesareaoutsidelabelparagraphstyleindex = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesareaoutsidelabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesareaoutsidelabelparagraphstyleindex_)));
          set_has_tschchartseriesareaoutsidelabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_tschchartseriesbaroutsidelabelparagraphstyleindex;
        break;
      }

      // optional int32 tschchartseriesbaroutsidelabelparagraphstyleindex = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesbaroutsidelabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesbaroutsidelabelparagraphstyleindex_)));
          set_has_tschchartseriesbaroutsidelabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_tschchartseriesdefaultoutsidelabelparagraphstyleindex;
        break;
      }

      // optional int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaultoutsidelabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesdefaultoutsidelabelparagraphstyleindex_)));
          set_has_tschchartseriesdefaultoutsidelabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_tschchartseriesmixedoutsidelabelparagraphstyleindex;
        break;
      }

      // optional int32 tschchartseriesmixedoutsidelabelparagraphstyleindex = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesmixedoutsidelabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesmixedoutsidelabelparagraphstyleindex_)));
          set_has_tschchartseriesmixedoutsidelabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_tschchartseriespieoutsidelabelparagraphstyleindex;
        break;
      }

      // optional int32 tschchartseriespieoutsidelabelparagraphstyleindex = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriespieoutsidelabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriespieoutsidelabelparagraphstyleindex_)));
          set_has_tschchartseriespieoutsidelabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_tschchartseries3dareashadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseries3dareashadow = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseries3dareashadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseries3dareashadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_tschchartseries3dbarshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseries3dbarshadow = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseries3dbarshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseries3dbarshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_tschchartseries3dcolumnshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseries3dcolumnshadow = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseries3dcolumnshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseries3dcolumnshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_tschchartseries3dlineshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseries3dlineshadow = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseries3dlineshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseries3dlineshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_tschchartseries3dpieshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseries3dpieshadow = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseries3dpieshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseries3dpieshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_tschchartseriesareashadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseriesareashadow = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesareashadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesareashadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_tschchartseriesbarshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseriesbarshadow = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesbarshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesbarshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_tschchartseriesbubbleshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseriesbubbleshadow = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesbubbleshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesbubbleshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_tschchartseriesdefaultshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseriesdefaultshadow = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaultshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefaultshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_tschchartserieslineshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartserieslineshadow = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartserieslineshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartserieslineshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_tschchartseriesmixedareashadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseriesmixedareashadow = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesmixedareashadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesmixedareashadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_tschchartseriesmixedcolumnshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseriesmixedcolumnshadow = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesmixedcolumnshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesmixedcolumnshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_tschchartseriesmixedlineshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseriesmixedlineshadow = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesmixedlineshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesmixedlineshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_tschchartseriespieshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseriespieshadow = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriespieshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriespieshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_tschchartseriesscattershadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseriesscattershadow = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesscattershadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesscattershadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(362)) goto parse_tschchartseriesareastroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriesareastroke = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesareastroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesareastroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_tschchartseriesbarstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriesbarstroke = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesbarstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesbarstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_tschchartseriesbubblestroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriesbubblestroke = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesbubblestroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesbubblestroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(386)) goto parse_tschchartserieslinestroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartserieslinestroke = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartserieslinestroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartserieslinestroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(394)) goto parse_tschchartseriesmixedareastroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriesmixedareastroke = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesmixedareastroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesmixedareastroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_tschchartseriesmixedcolumnstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriesmixedcolumnstroke = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesmixedcolumnstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesmixedcolumnstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_tschchartseriesmixedlinestroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriesmixedlinestroke = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesmixedlinestroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesmixedlinestroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_tschchartseriespiestroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriespiestroke = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriespiestroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriespiestroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_tschchartseriesscatterstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriesscatterstroke = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesscatterstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesscatterstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(434)) goto parse_tschchartseriesareasymbolfill;
        break;
      }

      // optional .TSD.FillArchive tschchartseriesareasymbolfill = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesareasymbolfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesareasymbolfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(442)) goto parse_tschchartseriesbubblesymbolfill;
        break;
      }

      // optional .TSD.FillArchive tschchartseriesbubblesymbolfill = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesbubblesymbolfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesbubblesymbolfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(450)) goto parse_tschchartserieslinesymbolfill;
        break;
      }

      // optional .TSD.FillArchive tschchartserieslinesymbolfill = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartserieslinesymbolfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartserieslinesymbolfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(458)) goto parse_tschchartseriesmixedareasymbolfill;
        break;
      }

      // optional .TSD.FillArchive tschchartseriesmixedareasymbolfill = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesmixedareasymbolfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesmixedareasymbolfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(466)) goto parse_tschchartseriesmixedlinesymbolfill;
        break;
      }

      // optional .TSD.FillArchive tschchartseriesmixedlinesymbolfill = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesmixedlinesymbolfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesmixedlinesymbolfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(474)) goto parse_tschchartseriesscattersymbolfill;
        break;
      }

      // optional .TSD.FillArchive tschchartseriesscattersymbolfill = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesscattersymbolfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesscattersymbolfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_tschchartseriesareasymbolfilluseseriesfill;
        break;
      }

      // optional bool tschchartseriesareasymbolfilluseseriesfill = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesareasymbolfilluseseriesfill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesareasymbolfilluseseriesfill_)));
          set_has_tschchartseriesareasymbolfilluseseriesfill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_tschchartserieslinesymbolfilluseseriesfill;
        break;
      }

      // optional bool tschchartserieslinesymbolfilluseseriesfill = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartserieslinesymbolfilluseseriesfill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartserieslinesymbolfilluseseriesfill_)));
          set_has_tschchartserieslinesymbolfilluseseriesfill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_tschchartseriesmixedareasymbolfilluseseriesfill;
        break;
      }

      // optional bool tschchartseriesmixedareasymbolfilluseseriesfill = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesmixedareasymbolfilluseseriesfill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesmixedareasymbolfilluseseriesfill_)));
          set_has_tschchartseriesmixedareasymbolfilluseseriesfill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_tschchartseriesmixedlinesymbolfilluseseriesfill;
        break;
      }

      // optional bool tschchartseriesmixedlinesymbolfilluseseriesfill = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesmixedlinesymbolfilluseseriesfill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesmixedlinesymbolfilluseseriesfill_)));
          set_has_tschchartseriesmixedlinesymbolfilluseseriesfill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_tschchartseriesareasymbolfilluseseriesstroke;
        break;
      }

      // optional bool tschchartseriesareasymbolfilluseseriesstroke = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesareasymbolfilluseseriesstroke:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesareasymbolfilluseseriesstroke_)));
          set_has_tschchartseriesareasymbolfilluseseriesstroke();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(520)) goto parse_tschchartseriesbubblesymbolfilluseseriesstroke;
        break;
      }

      // optional bool tschchartseriesbubblesymbolfilluseseriesstroke = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesbubblesymbolfilluseseriesstroke:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesbubblesymbolfilluseseriesstroke_)));
          set_has_tschchartseriesbubblesymbolfilluseseriesstroke();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_tschchartserieslinesymbolfilluseseriesstroke;
        break;
      }

      // optional bool tschchartserieslinesymbolfilluseseriesstroke = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartserieslinesymbolfilluseseriesstroke:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartserieslinesymbolfilluseseriesstroke_)));
          set_has_tschchartserieslinesymbolfilluseseriesstroke();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_tschchartseriesmixedareasymbolfilluseseriesstroke;
        break;
      }

      // optional bool tschchartseriesmixedareasymbolfilluseseriesstroke = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesmixedareasymbolfilluseseriesstroke:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesmixedareasymbolfilluseseriesstroke_)));
          set_has_tschchartseriesmixedareasymbolfilluseseriesstroke();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_tschchartseriesmixedlinesymbolfilluseseriesstroke;
        break;
      }

      // optional bool tschchartseriesmixedlinesymbolfilluseseriesstroke = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesmixedlinesymbolfilluseseriesstroke:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesmixedlinesymbolfilluseseriesstroke_)));
          set_has_tschchartseriesmixedlinesymbolfilluseseriesstroke();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(552)) goto parse_tschchartseriesscattersymbolfilluseseriesstroke;
        break;
      }

      // optional bool tschchartseriesscattersymbolfilluseseriesstroke = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesscattersymbolfilluseseriesstroke:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesscattersymbolfilluseseriesstroke_)));
          set_has_tschchartseriesscattersymbolfilluseseriesstroke();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(565)) goto parse_tschchartseriesareasymbolsize;
        break;
      }

      // optional float tschchartseriesareasymbolsize = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesareasymbolsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesareasymbolsize_)));
          set_has_tschchartseriesareasymbolsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(573)) goto parse_tschchartserieslinesymbolsize;
        break;
      }

      // optional float tschchartserieslinesymbolsize = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartserieslinesymbolsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartserieslinesymbolsize_)));
          set_has_tschchartserieslinesymbolsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(581)) goto parse_tschchartseriesmixedareasymbolsize;
        break;
      }

      // optional float tschchartseriesmixedareasymbolsize = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesmixedareasymbolsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesmixedareasymbolsize_)));
          set_has_tschchartseriesmixedareasymbolsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(589)) goto parse_tschchartseriesmixedlinesymbolsize;
        break;
      }

      // optional float tschchartseriesmixedlinesymbolsize = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesmixedlinesymbolsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesmixedlinesymbolsize_)));
          set_has_tschchartseriesmixedlinesymbolsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(597)) goto parse_tschchartseriesscattersymbolsize;
        break;
      }

      // optional float tschchartseriesscattersymbolsize = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesscattersymbolsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesscattersymbolsize_)));
          set_has_tschchartseriesscattersymbolsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(602)) goto parse_tschchartseriesareasymbolstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriesareasymbolstroke = 75;
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesareasymbolstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesareasymbolstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(610)) goto parse_tschchartseriesbubblesymbolstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriesbubblesymbolstroke = 76;
      case 76: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesbubblesymbolstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesbubblesymbolstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(618)) goto parse_tschchartserieslinesymbolstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartserieslinesymbolstroke = 77;
      case 77: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartserieslinesymbolstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartserieslinesymbolstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(626)) goto parse_tschchartseriesmixedareasymbolstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriesmixedareasymbolstroke = 78;
      case 78: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesmixedareasymbolstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesmixedareasymbolstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(634)) goto parse_tschchartseriesmixedlinesymbolstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriesmixedlinesymbolstroke = 79;
      case 79: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesmixedlinesymbolstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesmixedlinesymbolstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(642)) goto parse_tschchartseriesscattersymbolstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriesscattersymbolstroke = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesscattersymbolstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesscattersymbolstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(653)) goto parse_tschchartseriesdefaulttrendlineequationopacity;
        break;
      }

      // optional float tschchartseriesdefaulttrendlineequationopacity = 81;
      case 81: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesdefaulttrendlineequationopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesdefaulttrendlineequationopacity_)));
          set_has_tschchartseriesdefaulttrendlineequationopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(656)) goto parse_tschchartseriesdefaulttrendlineequationparagraphstyleindex;
        break;
      }

      // optional int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex = 82;
      case 82: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaulttrendlineequationparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesdefaulttrendlineequationparagraphstyleindex_)));
          set_has_tschchartseriesdefaulttrendlineequationparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(669)) goto parse_tschchartseriesdefaulttrendlinersquaredopacity;
        break;
      }

      // optional float tschchartseriesdefaulttrendlinersquaredopacity = 83;
      case 83: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesdefaulttrendlinersquaredopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesdefaulttrendlinersquaredopacity_)));
          set_has_tschchartseriesdefaulttrendlinersquaredopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(672)) goto parse_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex;
        break;
      }

      // optional int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex = 84;
      case 84: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_)));
          set_has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(682)) goto parse_tschchartseriesdefaulttrendlineshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseriesdefaulttrendlineshadow = 85;
      case 85: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaulttrendlineshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefaulttrendlineshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(690)) goto parse_tschchartseriesdefaulttrendlinestroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriesdefaulttrendlinestroke = 86;
      case 86: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaulttrendlinestroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefaulttrendlinestroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(696)) goto parse_tschchartseriesareavaluelabelposition;
        break;
      }

      // optional int32 tschchartseriesareavaluelabelposition = 87;
      case 87: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesareavaluelabelposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesareavaluelabelposition_)));
          set_has_tschchartseriesareavaluelabelposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(704)) goto parse_tschchartseriesbarvaluelabelposition;
        break;
      }

      // optional int32 tschchartseriesbarvaluelabelposition = 88;
      case 88: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesbarvaluelabelposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesbarvaluelabelposition_)));
          set_has_tschchartseriesbarvaluelabelposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(712)) goto parse_tschchartseriesbubblevaluelabelposition;
        break;
      }

      // optional int32 tschchartseriesbubblevaluelabelposition = 89;
      case 89: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesbubblevaluelabelposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesbubblevaluelabelposition_)));
          set_has_tschchartseriesbubblevaluelabelposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(720)) goto parse_tschchartseriesdefaultvaluelabelposition;
        break;
      }

      // optional int32 tschchartseriesdefaultvaluelabelposition = 90;
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaultvaluelabelposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesdefaultvaluelabelposition_)));
          set_has_tschchartseriesdefaultvaluelabelposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(728)) goto parse_tschchartserieslinevaluelabelposition;
        break;
      }

      // optional int32 tschchartserieslinevaluelabelposition = 91;
      case 91: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartserieslinevaluelabelposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartserieslinevaluelabelposition_)));
          set_has_tschchartserieslinevaluelabelposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(736)) goto parse_tschchartseriesmixedareavaluelabelposition;
        break;
      }

      // optional int32 tschchartseriesmixedareavaluelabelposition = 92;
      case 92: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesmixedareavaluelabelposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesmixedareavaluelabelposition_)));
          set_has_tschchartseriesmixedareavaluelabelposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(744)) goto parse_tschchartseriesmixedcolumnvaluelabelposition;
        break;
      }

      // optional int32 tschchartseriesmixedcolumnvaluelabelposition = 93;
      case 93: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesmixedcolumnvaluelabelposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesmixedcolumnvaluelabelposition_)));
          set_has_tschchartseriesmixedcolumnvaluelabelposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(752)) goto parse_tschchartseriesmixedlinevaluelabelposition;
        break;
      }

      // optional int32 tschchartseriesmixedlinevaluelabelposition = 94;
      case 94: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesmixedlinevaluelabelposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesmixedlinevaluelabelposition_)));
          set_has_tschchartseriesmixedlinevaluelabelposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(760)) goto parse_tschchartseriesscattervaluelabelposition;
        break;
      }

      // optional int32 tschchartseriesscattervaluelabelposition = 95;
      case 95: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesscattervaluelabelposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesscattervaluelabelposition_)));
          set_has_tschchartseriesscattervaluelabelposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(768)) goto parse_tschchartseriesstackedareavaluelabelposition;
        break;
      }

      // optional int32 tschchartseriesstackedareavaluelabelposition = 96;
      case 96: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesstackedareavaluelabelposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesstackedareavaluelabelposition_)));
          set_has_tschchartseriesstackedareavaluelabelposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(776)) goto parse_tschchartseriesstackedbarvaluelabelposition;
        break;
      }

      // optional int32 tschchartseriesstackedbarvaluelabelposition = 97;
      case 97: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesstackedbarvaluelabelposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesstackedbarvaluelabelposition_)));
          set_has_tschchartseriesstackedbarvaluelabelposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartSeriesStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineend = 1;
  if (has_tschchartseriesdefaulterrorbarlineend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tschchartseriesdefaulterrorbarlineend(), output);
  }

  // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineendscatterx = 2;
  if (has_tschchartseriesdefaulterrorbarlineendscatterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tschchartseriesdefaulterrorbarlineendscatterx(), output);
  }

  // optional .TSD.ShadowArchive tschchartseriesdefaulterrorbarshadow = 3;
  if (has_tschchartseriesdefaulterrorbarshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tschchartseriesdefaulterrorbarshadow(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstroke = 4;
  if (has_tschchartseriesdefaulterrorbarstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tschchartseriesdefaulterrorbarstroke(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstrokescatterx = 5;
  if (has_tschchartseriesdefaulterrorbarstrokescatterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tschchartseriesdefaulterrorbarstrokescatterx(), output);
  }

  // optional .TSD.FillArchive tschchartseries3dareafill = 6;
  if (has_tschchartseries3dareafill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->tschchartseries3dareafill(), output);
  }

  // optional .TSD.FillArchive tschchartseries3dbarfill = 7;
  if (has_tschchartseries3dbarfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tschchartseries3dbarfill(), output);
  }

  // optional .TSD.FillArchive tschchartseries3dcolumnfill = 8;
  if (has_tschchartseries3dcolumnfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->tschchartseries3dcolumnfill(), output);
  }

  // optional .TSD.FillArchive tschchartseries3dlinefill = 9;
  if (has_tschchartseries3dlinefill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->tschchartseries3dlinefill(), output);
  }

  // optional .TSD.FillArchive tschchartseries3dpiefill = 10;
  if (has_tschchartseries3dpiefill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->tschchartseries3dpiefill(), output);
  }

  // optional .TSD.FillArchive tschchartseriesareafill = 11;
  if (has_tschchartseriesareafill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->tschchartseriesareafill(), output);
  }

  // optional .TSD.FillArchive tschchartseriesbarfill = 12;
  if (has_tschchartseriesbarfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->tschchartseriesbarfill(), output);
  }

  // optional .TSD.FillArchive tschchartseriescolumnfill = 13;
  if (has_tschchartseriescolumnfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->tschchartseriescolumnfill(), output);
  }

  // optional .TSD.FillArchive tschchartseriesdefaultfill = 14;
  if (has_tschchartseriesdefaultfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->tschchartseriesdefaultfill(), output);
  }

  // optional .TSD.FillArchive tschchartseriesmixedareafill = 15;
  if (has_tschchartseriesmixedareafill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->tschchartseriesmixedareafill(), output);
  }

  // optional .TSD.FillArchive tschchartseriesmixedcolumnfill = 16;
  if (has_tschchartseriesmixedcolumnfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->tschchartseriesmixedcolumnfill(), output);
  }

  // optional .TSD.FillArchive tschchartseriespiefill = 17;
  if (has_tschchartseriespiefill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->tschchartseriespiefill(), output);
  }

  // optional int32 tschchartseriesarealabelparagraphstyleindex = 18;
  if (has_tschchartseriesarealabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->tschchartseriesarealabelparagraphstyleindex(), output);
  }

  // optional int32 tschchartseriesbarlabelparagraphstyleindex = 19;
  if (has_tschchartseriesbarlabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->tschchartseriesbarlabelparagraphstyleindex(), output);
  }

  // optional int32 tschchartseriesdefaultlabelparagraphstyleindex = 20;
  if (has_tschchartseriesdefaultlabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->tschchartseriesdefaultlabelparagraphstyleindex(), output);
  }

  // optional int32 tschchartserieslinelabelparagraphstyleindex = 21;
  if (has_tschchartserieslinelabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->tschchartserieslinelabelparagraphstyleindex(), output);
  }

  // optional int32 tschchartseriesmixedlabelparagraphstyleindex = 22;
  if (has_tschchartseriesmixedlabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->tschchartseriesmixedlabelparagraphstyleindex(), output);
  }

  // optional int32 tschchartseriespielabelparagraphstyleindex = 23;
  if (has_tschchartseriespielabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->tschchartseriespielabelparagraphstyleindex(), output);
  }

  // optional float tschchartseriesdefaultopacity = 24;
  if (has_tschchartseriesdefaultopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->tschchartseriesdefaultopacity(), output);
  }

  // optional int32 tschchartseriesareaoutsidelabelparagraphstyleindex = 25;
  if (has_tschchartseriesareaoutsidelabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->tschchartseriesareaoutsidelabelparagraphstyleindex(), output);
  }

  // optional int32 tschchartseriesbaroutsidelabelparagraphstyleindex = 26;
  if (has_tschchartseriesbaroutsidelabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->tschchartseriesbaroutsidelabelparagraphstyleindex(), output);
  }

  // optional int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex = 27;
  if (has_tschchartseriesdefaultoutsidelabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->tschchartseriesdefaultoutsidelabelparagraphstyleindex(), output);
  }

  // optional int32 tschchartseriesmixedoutsidelabelparagraphstyleindex = 28;
  if (has_tschchartseriesmixedoutsidelabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->tschchartseriesmixedoutsidelabelparagraphstyleindex(), output);
  }

  // optional int32 tschchartseriespieoutsidelabelparagraphstyleindex = 29;
  if (has_tschchartseriespieoutsidelabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->tschchartseriespieoutsidelabelparagraphstyleindex(), output);
  }

  // optional .TSD.ShadowArchive tschchartseries3dareashadow = 30;
  if (has_tschchartseries3dareashadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->tschchartseries3dareashadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartseries3dbarshadow = 31;
  if (has_tschchartseries3dbarshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->tschchartseries3dbarshadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartseries3dcolumnshadow = 32;
  if (has_tschchartseries3dcolumnshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->tschchartseries3dcolumnshadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartseries3dlineshadow = 33;
  if (has_tschchartseries3dlineshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->tschchartseries3dlineshadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartseries3dpieshadow = 34;
  if (has_tschchartseries3dpieshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->tschchartseries3dpieshadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartseriesareashadow = 35;
  if (has_tschchartseriesareashadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->tschchartseriesareashadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartseriesbarshadow = 36;
  if (has_tschchartseriesbarshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->tschchartseriesbarshadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartseriesbubbleshadow = 37;
  if (has_tschchartseriesbubbleshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->tschchartseriesbubbleshadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartseriesdefaultshadow = 38;
  if (has_tschchartseriesdefaultshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->tschchartseriesdefaultshadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartserieslineshadow = 39;
  if (has_tschchartserieslineshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->tschchartserieslineshadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartseriesmixedareashadow = 40;
  if (has_tschchartseriesmixedareashadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->tschchartseriesmixedareashadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartseriesmixedcolumnshadow = 41;
  if (has_tschchartseriesmixedcolumnshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->tschchartseriesmixedcolumnshadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartseriesmixedlineshadow = 42;
  if (has_tschchartseriesmixedlineshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->tschchartseriesmixedlineshadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartseriespieshadow = 43;
  if (has_tschchartseriespieshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->tschchartseriespieshadow(), output);
  }

  // optional .TSD.ShadowArchive tschchartseriesscattershadow = 44;
  if (has_tschchartseriesscattershadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->tschchartseriesscattershadow(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriesareastroke = 45;
  if (has_tschchartseriesareastroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, this->tschchartseriesareastroke(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriesbarstroke = 46;
  if (has_tschchartseriesbarstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, this->tschchartseriesbarstroke(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriesbubblestroke = 47;
  if (has_tschchartseriesbubblestroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->tschchartseriesbubblestroke(), output);
  }

  // optional .TSD.StrokeArchive tschchartserieslinestroke = 48;
  if (has_tschchartserieslinestroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, this->tschchartserieslinestroke(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedareastroke = 49;
  if (has_tschchartseriesmixedareastroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, this->tschchartseriesmixedareastroke(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedcolumnstroke = 50;
  if (has_tschchartseriesmixedcolumnstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->tschchartseriesmixedcolumnstroke(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedlinestroke = 51;
  if (has_tschchartseriesmixedlinestroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->tschchartseriesmixedlinestroke(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriespiestroke = 52;
  if (has_tschchartseriespiestroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->tschchartseriespiestroke(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriesscatterstroke = 53;
  if (has_tschchartseriesscatterstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->tschchartseriesscatterstroke(), output);
  }

  // optional .TSD.FillArchive tschchartseriesareasymbolfill = 54;
  if (has_tschchartseriesareasymbolfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, this->tschchartseriesareasymbolfill(), output);
  }

  // optional .TSD.FillArchive tschchartseriesbubblesymbolfill = 55;
  if (has_tschchartseriesbubblesymbolfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      55, this->tschchartseriesbubblesymbolfill(), output);
  }

  // optional .TSD.FillArchive tschchartserieslinesymbolfill = 56;
  if (has_tschchartserieslinesymbolfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      56, this->tschchartserieslinesymbolfill(), output);
  }

  // optional .TSD.FillArchive tschchartseriesmixedareasymbolfill = 57;
  if (has_tschchartseriesmixedareasymbolfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, this->tschchartseriesmixedareasymbolfill(), output);
  }

  // optional .TSD.FillArchive tschchartseriesmixedlinesymbolfill = 58;
  if (has_tschchartseriesmixedlinesymbolfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      58, this->tschchartseriesmixedlinesymbolfill(), output);
  }

  // optional .TSD.FillArchive tschchartseriesscattersymbolfill = 59;
  if (has_tschchartseriesscattersymbolfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      59, this->tschchartseriesscattersymbolfill(), output);
  }

  // optional bool tschchartseriesareasymbolfilluseseriesfill = 60;
  if (has_tschchartseriesareasymbolfilluseseriesfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(60, this->tschchartseriesareasymbolfilluseseriesfill(), output);
  }

  // optional bool tschchartserieslinesymbolfilluseseriesfill = 61;
  if (has_tschchartserieslinesymbolfilluseseriesfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(61, this->tschchartserieslinesymbolfilluseseriesfill(), output);
  }

  // optional bool tschchartseriesmixedareasymbolfilluseseriesfill = 62;
  if (has_tschchartseriesmixedareasymbolfilluseseriesfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(62, this->tschchartseriesmixedareasymbolfilluseseriesfill(), output);
  }

  // optional bool tschchartseriesmixedlinesymbolfilluseseriesfill = 63;
  if (has_tschchartseriesmixedlinesymbolfilluseseriesfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(63, this->tschchartseriesmixedlinesymbolfilluseseriesfill(), output);
  }

  // optional bool tschchartseriesareasymbolfilluseseriesstroke = 64;
  if (has_tschchartseriesareasymbolfilluseseriesstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(64, this->tschchartseriesareasymbolfilluseseriesstroke(), output);
  }

  // optional bool tschchartseriesbubblesymbolfilluseseriesstroke = 65;
  if (has_tschchartseriesbubblesymbolfilluseseriesstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(65, this->tschchartseriesbubblesymbolfilluseseriesstroke(), output);
  }

  // optional bool tschchartserieslinesymbolfilluseseriesstroke = 66;
  if (has_tschchartserieslinesymbolfilluseseriesstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(66, this->tschchartserieslinesymbolfilluseseriesstroke(), output);
  }

  // optional bool tschchartseriesmixedareasymbolfilluseseriesstroke = 67;
  if (has_tschchartseriesmixedareasymbolfilluseseriesstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(67, this->tschchartseriesmixedareasymbolfilluseseriesstroke(), output);
  }

  // optional bool tschchartseriesmixedlinesymbolfilluseseriesstroke = 68;
  if (has_tschchartseriesmixedlinesymbolfilluseseriesstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(68, this->tschchartseriesmixedlinesymbolfilluseseriesstroke(), output);
  }

  // optional bool tschchartseriesscattersymbolfilluseseriesstroke = 69;
  if (has_tschchartseriesscattersymbolfilluseseriesstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(69, this->tschchartseriesscattersymbolfilluseseriesstroke(), output);
  }

  // optional float tschchartseriesareasymbolsize = 70;
  if (has_tschchartseriesareasymbolsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(70, this->tschchartseriesareasymbolsize(), output);
  }

  // optional float tschchartserieslinesymbolsize = 71;
  if (has_tschchartserieslinesymbolsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(71, this->tschchartserieslinesymbolsize(), output);
  }

  // optional float tschchartseriesmixedareasymbolsize = 72;
  if (has_tschchartseriesmixedareasymbolsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(72, this->tschchartseriesmixedareasymbolsize(), output);
  }

  // optional float tschchartseriesmixedlinesymbolsize = 73;
  if (has_tschchartseriesmixedlinesymbolsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(73, this->tschchartseriesmixedlinesymbolsize(), output);
  }

  // optional float tschchartseriesscattersymbolsize = 74;
  if (has_tschchartseriesscattersymbolsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(74, this->tschchartseriesscattersymbolsize(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriesareasymbolstroke = 75;
  if (has_tschchartseriesareasymbolstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      75, this->tschchartseriesareasymbolstroke(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriesbubblesymbolstroke = 76;
  if (has_tschchartseriesbubblesymbolstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      76, this->tschchartseriesbubblesymbolstroke(), output);
  }

  // optional .TSD.StrokeArchive tschchartserieslinesymbolstroke = 77;
  if (has_tschchartserieslinesymbolstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      77, this->tschchartserieslinesymbolstroke(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedareasymbolstroke = 78;
  if (has_tschchartseriesmixedareasymbolstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      78, this->tschchartseriesmixedareasymbolstroke(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedlinesymbolstroke = 79;
  if (has_tschchartseriesmixedlinesymbolstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      79, this->tschchartseriesmixedlinesymbolstroke(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriesscattersymbolstroke = 80;
  if (has_tschchartseriesscattersymbolstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      80, this->tschchartseriesscattersymbolstroke(), output);
  }

  // optional float tschchartseriesdefaulttrendlineequationopacity = 81;
  if (has_tschchartseriesdefaulttrendlineequationopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(81, this->tschchartseriesdefaulttrendlineequationopacity(), output);
  }

  // optional int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex = 82;
  if (has_tschchartseriesdefaulttrendlineequationparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(82, this->tschchartseriesdefaulttrendlineequationparagraphstyleindex(), output);
  }

  // optional float tschchartseriesdefaulttrendlinersquaredopacity = 83;
  if (has_tschchartseriesdefaulttrendlinersquaredopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(83, this->tschchartseriesdefaulttrendlinersquaredopacity(), output);
  }

  // optional int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex = 84;
  if (has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(84, this->tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(), output);
  }

  // optional .TSD.ShadowArchive tschchartseriesdefaulttrendlineshadow = 85;
  if (has_tschchartseriesdefaulttrendlineshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      85, this->tschchartseriesdefaulttrendlineshadow(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriesdefaulttrendlinestroke = 86;
  if (has_tschchartseriesdefaulttrendlinestroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      86, this->tschchartseriesdefaulttrendlinestroke(), output);
  }

  // optional int32 tschchartseriesareavaluelabelposition = 87;
  if (has_tschchartseriesareavaluelabelposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(87, this->tschchartseriesareavaluelabelposition(), output);
  }

  // optional int32 tschchartseriesbarvaluelabelposition = 88;
  if (has_tschchartseriesbarvaluelabelposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(88, this->tschchartseriesbarvaluelabelposition(), output);
  }

  // optional int32 tschchartseriesbubblevaluelabelposition = 89;
  if (has_tschchartseriesbubblevaluelabelposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(89, this->tschchartseriesbubblevaluelabelposition(), output);
  }

  // optional int32 tschchartseriesdefaultvaluelabelposition = 90;
  if (has_tschchartseriesdefaultvaluelabelposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(90, this->tschchartseriesdefaultvaluelabelposition(), output);
  }

  // optional int32 tschchartserieslinevaluelabelposition = 91;
  if (has_tschchartserieslinevaluelabelposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(91, this->tschchartserieslinevaluelabelposition(), output);
  }

  // optional int32 tschchartseriesmixedareavaluelabelposition = 92;
  if (has_tschchartseriesmixedareavaluelabelposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(92, this->tschchartseriesmixedareavaluelabelposition(), output);
  }

  // optional int32 tschchartseriesmixedcolumnvaluelabelposition = 93;
  if (has_tschchartseriesmixedcolumnvaluelabelposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(93, this->tschchartseriesmixedcolumnvaluelabelposition(), output);
  }

  // optional int32 tschchartseriesmixedlinevaluelabelposition = 94;
  if (has_tschchartseriesmixedlinevaluelabelposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(94, this->tschchartseriesmixedlinevaluelabelposition(), output);
  }

  // optional int32 tschchartseriesscattervaluelabelposition = 95;
  if (has_tschchartseriesscattervaluelabelposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(95, this->tschchartseriesscattervaluelabelposition(), output);
  }

  // optional int32 tschchartseriesstackedareavaluelabelposition = 96;
  if (has_tschchartseriesstackedareavaluelabelposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(96, this->tschchartseriesstackedareavaluelabelposition(), output);
  }

  // optional int32 tschchartseriesstackedbarvaluelabelposition = 97;
  if (has_tschchartseriesstackedbarvaluelabelposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(97, this->tschchartseriesstackedbarvaluelabelposition(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartSeriesStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineend = 1;
  if (has_tschchartseriesdefaulterrorbarlineend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tschchartseriesdefaulterrorbarlineend(), target);
  }

  // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineendscatterx = 2;
  if (has_tschchartseriesdefaulterrorbarlineendscatterx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tschchartseriesdefaulterrorbarlineendscatterx(), target);
  }

  // optional .TSD.ShadowArchive tschchartseriesdefaulterrorbarshadow = 3;
  if (has_tschchartseriesdefaulterrorbarshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tschchartseriesdefaulterrorbarshadow(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstroke = 4;
  if (has_tschchartseriesdefaulterrorbarstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tschchartseriesdefaulterrorbarstroke(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstrokescatterx = 5;
  if (has_tschchartseriesdefaulterrorbarstrokescatterx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tschchartseriesdefaulterrorbarstrokescatterx(), target);
  }

  // optional .TSD.FillArchive tschchartseries3dareafill = 6;
  if (has_tschchartseries3dareafill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->tschchartseries3dareafill(), target);
  }

  // optional .TSD.FillArchive tschchartseries3dbarfill = 7;
  if (has_tschchartseries3dbarfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->tschchartseries3dbarfill(), target);
  }

  // optional .TSD.FillArchive tschchartseries3dcolumnfill = 8;
  if (has_tschchartseries3dcolumnfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->tschchartseries3dcolumnfill(), target);
  }

  // optional .TSD.FillArchive tschchartseries3dlinefill = 9;
  if (has_tschchartseries3dlinefill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->tschchartseries3dlinefill(), target);
  }

  // optional .TSD.FillArchive tschchartseries3dpiefill = 10;
  if (has_tschchartseries3dpiefill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->tschchartseries3dpiefill(), target);
  }

  // optional .TSD.FillArchive tschchartseriesareafill = 11;
  if (has_tschchartseriesareafill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->tschchartseriesareafill(), target);
  }

  // optional .TSD.FillArchive tschchartseriesbarfill = 12;
  if (has_tschchartseriesbarfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->tschchartseriesbarfill(), target);
  }

  // optional .TSD.FillArchive tschchartseriescolumnfill = 13;
  if (has_tschchartseriescolumnfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->tschchartseriescolumnfill(), target);
  }

  // optional .TSD.FillArchive tschchartseriesdefaultfill = 14;
  if (has_tschchartseriesdefaultfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->tschchartseriesdefaultfill(), target);
  }

  // optional .TSD.FillArchive tschchartseriesmixedareafill = 15;
  if (has_tschchartseriesmixedareafill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->tschchartseriesmixedareafill(), target);
  }

  // optional .TSD.FillArchive tschchartseriesmixedcolumnfill = 16;
  if (has_tschchartseriesmixedcolumnfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->tschchartseriesmixedcolumnfill(), target);
  }

  // optional .TSD.FillArchive tschchartseriespiefill = 17;
  if (has_tschchartseriespiefill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->tschchartseriespiefill(), target);
  }

  // optional int32 tschchartseriesarealabelparagraphstyleindex = 18;
  if (has_tschchartseriesarealabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->tschchartseriesarealabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesbarlabelparagraphstyleindex = 19;
  if (has_tschchartseriesbarlabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->tschchartseriesbarlabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesdefaultlabelparagraphstyleindex = 20;
  if (has_tschchartseriesdefaultlabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->tschchartseriesdefaultlabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartserieslinelabelparagraphstyleindex = 21;
  if (has_tschchartserieslinelabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->tschchartserieslinelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesmixedlabelparagraphstyleindex = 22;
  if (has_tschchartseriesmixedlabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->tschchartseriesmixedlabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriespielabelparagraphstyleindex = 23;
  if (has_tschchartseriespielabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->tschchartseriespielabelparagraphstyleindex(), target);
  }

  // optional float tschchartseriesdefaultopacity = 24;
  if (has_tschchartseriesdefaultopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->tschchartseriesdefaultopacity(), target);
  }

  // optional int32 tschchartseriesareaoutsidelabelparagraphstyleindex = 25;
  if (has_tschchartseriesareaoutsidelabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->tschchartseriesareaoutsidelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesbaroutsidelabelparagraphstyleindex = 26;
  if (has_tschchartseriesbaroutsidelabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->tschchartseriesbaroutsidelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex = 27;
  if (has_tschchartseriesdefaultoutsidelabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->tschchartseriesdefaultoutsidelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesmixedoutsidelabelparagraphstyleindex = 28;
  if (has_tschchartseriesmixedoutsidelabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->tschchartseriesmixedoutsidelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriespieoutsidelabelparagraphstyleindex = 29;
  if (has_tschchartseriespieoutsidelabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->tschchartseriespieoutsidelabelparagraphstyleindex(), target);
  }

  // optional .TSD.ShadowArchive tschchartseries3dareashadow = 30;
  if (has_tschchartseries3dareashadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->tschchartseries3dareashadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartseries3dbarshadow = 31;
  if (has_tschchartseries3dbarshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->tschchartseries3dbarshadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartseries3dcolumnshadow = 32;
  if (has_tschchartseries3dcolumnshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->tschchartseries3dcolumnshadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartseries3dlineshadow = 33;
  if (has_tschchartseries3dlineshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->tschchartseries3dlineshadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartseries3dpieshadow = 34;
  if (has_tschchartseries3dpieshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->tschchartseries3dpieshadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartseriesareashadow = 35;
  if (has_tschchartseriesareashadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->tschchartseriesareashadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartseriesbarshadow = 36;
  if (has_tschchartseriesbarshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->tschchartseriesbarshadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartseriesbubbleshadow = 37;
  if (has_tschchartseriesbubbleshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->tschchartseriesbubbleshadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartseriesdefaultshadow = 38;
  if (has_tschchartseriesdefaultshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->tschchartseriesdefaultshadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartserieslineshadow = 39;
  if (has_tschchartserieslineshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->tschchartserieslineshadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartseriesmixedareashadow = 40;
  if (has_tschchartseriesmixedareashadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->tschchartseriesmixedareashadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartseriesmixedcolumnshadow = 41;
  if (has_tschchartseriesmixedcolumnshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->tschchartseriesmixedcolumnshadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartseriesmixedlineshadow = 42;
  if (has_tschchartseriesmixedlineshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->tschchartseriesmixedlineshadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartseriespieshadow = 43;
  if (has_tschchartseriespieshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->tschchartseriespieshadow(), target);
  }

  // optional .TSD.ShadowArchive tschchartseriesscattershadow = 44;
  if (has_tschchartseriesscattershadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->tschchartseriesscattershadow(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriesareastroke = 45;
  if (has_tschchartseriesareastroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, this->tschchartseriesareastroke(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriesbarstroke = 46;
  if (has_tschchartseriesbarstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, this->tschchartseriesbarstroke(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriesbubblestroke = 47;
  if (has_tschchartseriesbubblestroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, this->tschchartseriesbubblestroke(), target);
  }

  // optional .TSD.StrokeArchive tschchartserieslinestroke = 48;
  if (has_tschchartserieslinestroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        48, this->tschchartserieslinestroke(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedareastroke = 49;
  if (has_tschchartseriesmixedareastroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        49, this->tschchartseriesmixedareastroke(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedcolumnstroke = 50;
  if (has_tschchartseriesmixedcolumnstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->tschchartseriesmixedcolumnstroke(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedlinestroke = 51;
  if (has_tschchartseriesmixedlinestroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->tschchartseriesmixedlinestroke(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriespiestroke = 52;
  if (has_tschchartseriespiestroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->tschchartseriespiestroke(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriesscatterstroke = 53;
  if (has_tschchartseriesscatterstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->tschchartseriesscatterstroke(), target);
  }

  // optional .TSD.FillArchive tschchartseriesareasymbolfill = 54;
  if (has_tschchartseriesareasymbolfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        54, this->tschchartseriesareasymbolfill(), target);
  }

  // optional .TSD.FillArchive tschchartseriesbubblesymbolfill = 55;
  if (has_tschchartseriesbubblesymbolfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        55, this->tschchartseriesbubblesymbolfill(), target);
  }

  // optional .TSD.FillArchive tschchartserieslinesymbolfill = 56;
  if (has_tschchartserieslinesymbolfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        56, this->tschchartserieslinesymbolfill(), target);
  }

  // optional .TSD.FillArchive tschchartseriesmixedareasymbolfill = 57;
  if (has_tschchartseriesmixedareasymbolfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        57, this->tschchartseriesmixedareasymbolfill(), target);
  }

  // optional .TSD.FillArchive tschchartseriesmixedlinesymbolfill = 58;
  if (has_tschchartseriesmixedlinesymbolfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        58, this->tschchartseriesmixedlinesymbolfill(), target);
  }

  // optional .TSD.FillArchive tschchartseriesscattersymbolfill = 59;
  if (has_tschchartseriesscattersymbolfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        59, this->tschchartseriesscattersymbolfill(), target);
  }

  // optional bool tschchartseriesareasymbolfilluseseriesfill = 60;
  if (has_tschchartseriesareasymbolfilluseseriesfill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(60, this->tschchartseriesareasymbolfilluseseriesfill(), target);
  }

  // optional bool tschchartserieslinesymbolfilluseseriesfill = 61;
  if (has_tschchartserieslinesymbolfilluseseriesfill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(61, this->tschchartserieslinesymbolfilluseseriesfill(), target);
  }

  // optional bool tschchartseriesmixedareasymbolfilluseseriesfill = 62;
  if (has_tschchartseriesmixedareasymbolfilluseseriesfill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(62, this->tschchartseriesmixedareasymbolfilluseseriesfill(), target);
  }

  // optional bool tschchartseriesmixedlinesymbolfilluseseriesfill = 63;
  if (has_tschchartseriesmixedlinesymbolfilluseseriesfill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(63, this->tschchartseriesmixedlinesymbolfilluseseriesfill(), target);
  }

  // optional bool tschchartseriesareasymbolfilluseseriesstroke = 64;
  if (has_tschchartseriesareasymbolfilluseseriesstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(64, this->tschchartseriesareasymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartseriesbubblesymbolfilluseseriesstroke = 65;
  if (has_tschchartseriesbubblesymbolfilluseseriesstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(65, this->tschchartseriesbubblesymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartserieslinesymbolfilluseseriesstroke = 66;
  if (has_tschchartserieslinesymbolfilluseseriesstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(66, this->tschchartserieslinesymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartseriesmixedareasymbolfilluseseriesstroke = 67;
  if (has_tschchartseriesmixedareasymbolfilluseseriesstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(67, this->tschchartseriesmixedareasymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartseriesmixedlinesymbolfilluseseriesstroke = 68;
  if (has_tschchartseriesmixedlinesymbolfilluseseriesstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(68, this->tschchartseriesmixedlinesymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartseriesscattersymbolfilluseseriesstroke = 69;
  if (has_tschchartseriesscattersymbolfilluseseriesstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(69, this->tschchartseriesscattersymbolfilluseseriesstroke(), target);
  }

  // optional float tschchartseriesareasymbolsize = 70;
  if (has_tschchartseriesareasymbolsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(70, this->tschchartseriesareasymbolsize(), target);
  }

  // optional float tschchartserieslinesymbolsize = 71;
  if (has_tschchartserieslinesymbolsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(71, this->tschchartserieslinesymbolsize(), target);
  }

  // optional float tschchartseriesmixedareasymbolsize = 72;
  if (has_tschchartseriesmixedareasymbolsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(72, this->tschchartseriesmixedareasymbolsize(), target);
  }

  // optional float tschchartseriesmixedlinesymbolsize = 73;
  if (has_tschchartseriesmixedlinesymbolsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(73, this->tschchartseriesmixedlinesymbolsize(), target);
  }

  // optional float tschchartseriesscattersymbolsize = 74;
  if (has_tschchartseriesscattersymbolsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(74, this->tschchartseriesscattersymbolsize(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriesareasymbolstroke = 75;
  if (has_tschchartseriesareasymbolstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        75, this->tschchartseriesareasymbolstroke(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriesbubblesymbolstroke = 76;
  if (has_tschchartseriesbubblesymbolstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        76, this->tschchartseriesbubblesymbolstroke(), target);
  }

  // optional .TSD.StrokeArchive tschchartserieslinesymbolstroke = 77;
  if (has_tschchartserieslinesymbolstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        77, this->tschchartserieslinesymbolstroke(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedareasymbolstroke = 78;
  if (has_tschchartseriesmixedareasymbolstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        78, this->tschchartseriesmixedareasymbolstroke(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedlinesymbolstroke = 79;
  if (has_tschchartseriesmixedlinesymbolstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        79, this->tschchartseriesmixedlinesymbolstroke(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriesscattersymbolstroke = 80;
  if (has_tschchartseriesscattersymbolstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        80, this->tschchartseriesscattersymbolstroke(), target);
  }

  // optional float tschchartseriesdefaulttrendlineequationopacity = 81;
  if (has_tschchartseriesdefaulttrendlineequationopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(81, this->tschchartseriesdefaulttrendlineequationopacity(), target);
  }

  // optional int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex = 82;
  if (has_tschchartseriesdefaulttrendlineequationparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(82, this->tschchartseriesdefaulttrendlineequationparagraphstyleindex(), target);
  }

  // optional float tschchartseriesdefaulttrendlinersquaredopacity = 83;
  if (has_tschchartseriesdefaulttrendlinersquaredopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(83, this->tschchartseriesdefaulttrendlinersquaredopacity(), target);
  }

  // optional int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex = 84;
  if (has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(84, this->tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(), target);
  }

  // optional .TSD.ShadowArchive tschchartseriesdefaulttrendlineshadow = 85;
  if (has_tschchartseriesdefaulttrendlineshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        85, this->tschchartseriesdefaulttrendlineshadow(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriesdefaulttrendlinestroke = 86;
  if (has_tschchartseriesdefaulttrendlinestroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        86, this->tschchartseriesdefaulttrendlinestroke(), target);
  }

  // optional int32 tschchartseriesareavaluelabelposition = 87;
  if (has_tschchartseriesareavaluelabelposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(87, this->tschchartseriesareavaluelabelposition(), target);
  }

  // optional int32 tschchartseriesbarvaluelabelposition = 88;
  if (has_tschchartseriesbarvaluelabelposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(88, this->tschchartseriesbarvaluelabelposition(), target);
  }

  // optional int32 tschchartseriesbubblevaluelabelposition = 89;
  if (has_tschchartseriesbubblevaluelabelposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(89, this->tschchartseriesbubblevaluelabelposition(), target);
  }

  // optional int32 tschchartseriesdefaultvaluelabelposition = 90;
  if (has_tschchartseriesdefaultvaluelabelposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(90, this->tschchartseriesdefaultvaluelabelposition(), target);
  }

  // optional int32 tschchartserieslinevaluelabelposition = 91;
  if (has_tschchartserieslinevaluelabelposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(91, this->tschchartserieslinevaluelabelposition(), target);
  }

  // optional int32 tschchartseriesmixedareavaluelabelposition = 92;
  if (has_tschchartseriesmixedareavaluelabelposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(92, this->tschchartseriesmixedareavaluelabelposition(), target);
  }

  // optional int32 tschchartseriesmixedcolumnvaluelabelposition = 93;
  if (has_tschchartseriesmixedcolumnvaluelabelposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(93, this->tschchartseriesmixedcolumnvaluelabelposition(), target);
  }

  // optional int32 tschchartseriesmixedlinevaluelabelposition = 94;
  if (has_tschchartseriesmixedlinevaluelabelposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(94, this->tschchartseriesmixedlinevaluelabelposition(), target);
  }

  // optional int32 tschchartseriesscattervaluelabelposition = 95;
  if (has_tschchartseriesscattervaluelabelposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(95, this->tschchartseriesscattervaluelabelposition(), target);
  }

  // optional int32 tschchartseriesstackedareavaluelabelposition = 96;
  if (has_tschchartseriesstackedareavaluelabelposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(96, this->tschchartseriesstackedareavaluelabelposition(), target);
  }

  // optional int32 tschchartseriesstackedbarvaluelabelposition = 97;
  if (has_tschchartseriesstackedbarvaluelabelposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(97, this->tschchartseriesstackedbarvaluelabelposition(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartSeriesStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineend = 1;
    if (has_tschchartseriesdefaulterrorbarlineend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefaulterrorbarlineend());
    }

    // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineendscatterx = 2;
    if (has_tschchartseriesdefaulterrorbarlineendscatterx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefaulterrorbarlineendscatterx());
    }

    // optional .TSD.ShadowArchive tschchartseriesdefaulterrorbarshadow = 3;
    if (has_tschchartseriesdefaulterrorbarshadow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefaulterrorbarshadow());
    }

    // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstroke = 4;
    if (has_tschchartseriesdefaulterrorbarstroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefaulterrorbarstroke());
    }

    // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstrokescatterx = 5;
    if (has_tschchartseriesdefaulterrorbarstrokescatterx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefaulterrorbarstrokescatterx());
    }

    // optional .TSD.FillArchive tschchartseries3dareafill = 6;
    if (has_tschchartseries3dareafill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseries3dareafill());
    }

    // optional .TSD.FillArchive tschchartseries3dbarfill = 7;
    if (has_tschchartseries3dbarfill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseries3dbarfill());
    }

    // optional .TSD.FillArchive tschchartseries3dcolumnfill = 8;
    if (has_tschchartseries3dcolumnfill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseries3dcolumnfill());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TSD.FillArchive tschchartseries3dlinefill = 9;
    if (has_tschchartseries3dlinefill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseries3dlinefill());
    }

    // optional .TSD.FillArchive tschchartseries3dpiefill = 10;
    if (has_tschchartseries3dpiefill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseries3dpiefill());
    }

    // optional .TSD.FillArchive tschchartseriesareafill = 11;
    if (has_tschchartseriesareafill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesareafill());
    }

    // optional .TSD.FillArchive tschchartseriesbarfill = 12;
    if (has_tschchartseriesbarfill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesbarfill());
    }

    // optional .TSD.FillArchive tschchartseriescolumnfill = 13;
    if (has_tschchartseriescolumnfill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriescolumnfill());
    }

    // optional .TSD.FillArchive tschchartseriesdefaultfill = 14;
    if (has_tschchartseriesdefaultfill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefaultfill());
    }

    // optional .TSD.FillArchive tschchartseriesmixedareafill = 15;
    if (has_tschchartseriesmixedareafill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesmixedareafill());
    }

    // optional .TSD.FillArchive tschchartseriesmixedcolumnfill = 16;
    if (has_tschchartseriesmixedcolumnfill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesmixedcolumnfill());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .TSD.FillArchive tschchartseriespiefill = 17;
    if (has_tschchartseriespiefill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriespiefill());
    }

    // optional int32 tschchartseriesarealabelparagraphstyleindex = 18;
    if (has_tschchartseriesarealabelparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesarealabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesbarlabelparagraphstyleindex = 19;
    if (has_tschchartseriesbarlabelparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesbarlabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesdefaultlabelparagraphstyleindex = 20;
    if (has_tschchartseriesdefaultlabelparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesdefaultlabelparagraphstyleindex());
    }

    // optional int32 tschchartserieslinelabelparagraphstyleindex = 21;
    if (has_tschchartserieslinelabelparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartserieslinelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesmixedlabelparagraphstyleindex = 22;
    if (has_tschchartseriesmixedlabelparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesmixedlabelparagraphstyleindex());
    }

    // optional int32 tschchartseriespielabelparagraphstyleindex = 23;
    if (has_tschchartseriespielabelparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriespielabelparagraphstyleindex());
    }

    // optional float tschchartseriesdefaultopacity = 24;
    if (has_tschchartseriesdefaultopacity()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 tschchartseriesareaoutsidelabelparagraphstyleindex = 25;
    if (has_tschchartseriesareaoutsidelabelparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesareaoutsidelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesbaroutsidelabelparagraphstyleindex = 26;
    if (has_tschchartseriesbaroutsidelabelparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesbaroutsidelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex = 27;
    if (has_tschchartseriesdefaultoutsidelabelparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesdefaultoutsidelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesmixedoutsidelabelparagraphstyleindex = 28;
    if (has_tschchartseriesmixedoutsidelabelparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesmixedoutsidelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriespieoutsidelabelparagraphstyleindex = 29;
    if (has_tschchartseriespieoutsidelabelparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriespieoutsidelabelparagraphstyleindex());
    }

    // optional .TSD.ShadowArchive tschchartseries3dareashadow = 30;
    if (has_tschchartseries3dareashadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseries3dareashadow());
    }

    // optional .TSD.ShadowArchive tschchartseries3dbarshadow = 31;
    if (has_tschchartseries3dbarshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseries3dbarshadow());
    }

    // optional .TSD.ShadowArchive tschchartseries3dcolumnshadow = 32;
    if (has_tschchartseries3dcolumnshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseries3dcolumnshadow());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .TSD.ShadowArchive tschchartseries3dlineshadow = 33;
    if (has_tschchartseries3dlineshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseries3dlineshadow());
    }

    // optional .TSD.ShadowArchive tschchartseries3dpieshadow = 34;
    if (has_tschchartseries3dpieshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseries3dpieshadow());
    }

    // optional .TSD.ShadowArchive tschchartseriesareashadow = 35;
    if (has_tschchartseriesareashadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesareashadow());
    }

    // optional .TSD.ShadowArchive tschchartseriesbarshadow = 36;
    if (has_tschchartseriesbarshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesbarshadow());
    }

    // optional .TSD.ShadowArchive tschchartseriesbubbleshadow = 37;
    if (has_tschchartseriesbubbleshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesbubbleshadow());
    }

    // optional .TSD.ShadowArchive tschchartseriesdefaultshadow = 38;
    if (has_tschchartseriesdefaultshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefaultshadow());
    }

    // optional .TSD.ShadowArchive tschchartserieslineshadow = 39;
    if (has_tschchartserieslineshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartserieslineshadow());
    }

    // optional .TSD.ShadowArchive tschchartseriesmixedareashadow = 40;
    if (has_tschchartseriesmixedareashadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesmixedareashadow());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .TSD.ShadowArchive tschchartseriesmixedcolumnshadow = 41;
    if (has_tschchartseriesmixedcolumnshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesmixedcolumnshadow());
    }

    // optional .TSD.ShadowArchive tschchartseriesmixedlineshadow = 42;
    if (has_tschchartseriesmixedlineshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesmixedlineshadow());
    }

    // optional .TSD.ShadowArchive tschchartseriespieshadow = 43;
    if (has_tschchartseriespieshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriespieshadow());
    }

    // optional .TSD.ShadowArchive tschchartseriesscattershadow = 44;
    if (has_tschchartseriesscattershadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesscattershadow());
    }

    // optional .TSD.StrokeArchive tschchartseriesareastroke = 45;
    if (has_tschchartseriesareastroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesareastroke());
    }

    // optional .TSD.StrokeArchive tschchartseriesbarstroke = 46;
    if (has_tschchartseriesbarstroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesbarstroke());
    }

    // optional .TSD.StrokeArchive tschchartseriesbubblestroke = 47;
    if (has_tschchartseriesbubblestroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesbubblestroke());
    }

    // optional .TSD.StrokeArchive tschchartserieslinestroke = 48;
    if (has_tschchartserieslinestroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartserieslinestroke());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .TSD.StrokeArchive tschchartseriesmixedareastroke = 49;
    if (has_tschchartseriesmixedareastroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesmixedareastroke());
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedcolumnstroke = 50;
    if (has_tschchartseriesmixedcolumnstroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesmixedcolumnstroke());
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedlinestroke = 51;
    if (has_tschchartseriesmixedlinestroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesmixedlinestroke());
    }

    // optional .TSD.StrokeArchive tschchartseriespiestroke = 52;
    if (has_tschchartseriespiestroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriespiestroke());
    }

    // optional .TSD.StrokeArchive tschchartseriesscatterstroke = 53;
    if (has_tschchartseriesscatterstroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesscatterstroke());
    }

    // optional .TSD.FillArchive tschchartseriesareasymbolfill = 54;
    if (has_tschchartseriesareasymbolfill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesareasymbolfill());
    }

    // optional .TSD.FillArchive tschchartseriesbubblesymbolfill = 55;
    if (has_tschchartseriesbubblesymbolfill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesbubblesymbolfill());
    }

    // optional .TSD.FillArchive tschchartserieslinesymbolfill = 56;
    if (has_tschchartserieslinesymbolfill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartserieslinesymbolfill());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional .TSD.FillArchive tschchartseriesmixedareasymbolfill = 57;
    if (has_tschchartseriesmixedareasymbolfill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesmixedareasymbolfill());
    }

    // optional .TSD.FillArchive tschchartseriesmixedlinesymbolfill = 58;
    if (has_tschchartseriesmixedlinesymbolfill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesmixedlinesymbolfill());
    }

    // optional .TSD.FillArchive tschchartseriesscattersymbolfill = 59;
    if (has_tschchartseriesscattersymbolfill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesscattersymbolfill());
    }

    // optional bool tschchartseriesareasymbolfilluseseriesfill = 60;
    if (has_tschchartseriesareasymbolfilluseseriesfill()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartserieslinesymbolfilluseseriesfill = 61;
    if (has_tschchartserieslinesymbolfilluseseriesfill()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedareasymbolfilluseseriesfill = 62;
    if (has_tschchartseriesmixedareasymbolfilluseseriesfill()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedlinesymbolfilluseseriesfill = 63;
    if (has_tschchartseriesmixedlinesymbolfilluseseriesfill()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesareasymbolfilluseseriesstroke = 64;
    if (has_tschchartseriesareasymbolfilluseseriesstroke()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional bool tschchartseriesbubblesymbolfilluseseriesstroke = 65;
    if (has_tschchartseriesbubblesymbolfilluseseriesstroke()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartserieslinesymbolfilluseseriesstroke = 66;
    if (has_tschchartserieslinesymbolfilluseseriesstroke()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedareasymbolfilluseseriesstroke = 67;
    if (has_tschchartseriesmixedareasymbolfilluseseriesstroke()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedlinesymbolfilluseseriesstroke = 68;
    if (has_tschchartseriesmixedlinesymbolfilluseseriesstroke()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesscattersymbolfilluseseriesstroke = 69;
    if (has_tschchartseriesscattersymbolfilluseseriesstroke()) {
      total_size += 2 + 1;
    }

    // optional float tschchartseriesareasymbolsize = 70;
    if (has_tschchartseriesareasymbolsize()) {
      total_size += 2 + 4;
    }

    // optional float tschchartserieslinesymbolsize = 71;
    if (has_tschchartserieslinesymbolsize()) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesmixedareasymbolsize = 72;
    if (has_tschchartseriesmixedareasymbolsize()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional float tschchartseriesmixedlinesymbolsize = 73;
    if (has_tschchartseriesmixedlinesymbolsize()) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesscattersymbolsize = 74;
    if (has_tschchartseriesscattersymbolsize()) {
      total_size += 2 + 4;
    }

    // optional .TSD.StrokeArchive tschchartseriesareasymbolstroke = 75;
    if (has_tschchartseriesareasymbolstroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesareasymbolstroke());
    }

    // optional .TSD.StrokeArchive tschchartseriesbubblesymbolstroke = 76;
    if (has_tschchartseriesbubblesymbolstroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesbubblesymbolstroke());
    }

    // optional .TSD.StrokeArchive tschchartserieslinesymbolstroke = 77;
    if (has_tschchartserieslinesymbolstroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartserieslinesymbolstroke());
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedareasymbolstroke = 78;
    if (has_tschchartseriesmixedareasymbolstroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesmixedareasymbolstroke());
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedlinesymbolstroke = 79;
    if (has_tschchartseriesmixedlinesymbolstroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesmixedlinesymbolstroke());
    }

    // optional .TSD.StrokeArchive tschchartseriesscattersymbolstroke = 80;
    if (has_tschchartseriesscattersymbolstroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesscattersymbolstroke());
    }

  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // optional float tschchartseriesdefaulttrendlineequationopacity = 81;
    if (has_tschchartseriesdefaulttrendlineequationopacity()) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex = 82;
    if (has_tschchartseriesdefaulttrendlineequationparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesdefaulttrendlineequationparagraphstyleindex());
    }

    // optional float tschchartseriesdefaulttrendlinersquaredopacity = 83;
    if (has_tschchartseriesdefaulttrendlinersquaredopacity()) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex = 84;
    if (has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesdefaulttrendlinersquaredparagraphstyleindex());
    }

    // optional .TSD.ShadowArchive tschchartseriesdefaulttrendlineshadow = 85;
    if (has_tschchartseriesdefaulttrendlineshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefaulttrendlineshadow());
    }

    // optional .TSD.StrokeArchive tschchartseriesdefaulttrendlinestroke = 86;
    if (has_tschchartseriesdefaulttrendlinestroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefaulttrendlinestroke());
    }

    // optional int32 tschchartseriesareavaluelabelposition = 87;
    if (has_tschchartseriesareavaluelabelposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesareavaluelabelposition());
    }

    // optional int32 tschchartseriesbarvaluelabelposition = 88;
    if (has_tschchartseriesbarvaluelabelposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesbarvaluelabelposition());
    }

  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    // optional int32 tschchartseriesbubblevaluelabelposition = 89;
    if (has_tschchartseriesbubblevaluelabelposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesbubblevaluelabelposition());
    }

    // optional int32 tschchartseriesdefaultvaluelabelposition = 90;
    if (has_tschchartseriesdefaultvaluelabelposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesdefaultvaluelabelposition());
    }

    // optional int32 tschchartserieslinevaluelabelposition = 91;
    if (has_tschchartserieslinevaluelabelposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartserieslinevaluelabelposition());
    }

    // optional int32 tschchartseriesmixedareavaluelabelposition = 92;
    if (has_tschchartseriesmixedareavaluelabelposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesmixedareavaluelabelposition());
    }

    // optional int32 tschchartseriesmixedcolumnvaluelabelposition = 93;
    if (has_tschchartseriesmixedcolumnvaluelabelposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesmixedcolumnvaluelabelposition());
    }

    // optional int32 tschchartseriesmixedlinevaluelabelposition = 94;
    if (has_tschchartseriesmixedlinevaluelabelposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesmixedlinevaluelabelposition());
    }

    // optional int32 tschchartseriesscattervaluelabelposition = 95;
    if (has_tschchartseriesscattervaluelabelposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesscattervaluelabelposition());
    }

    // optional int32 tschchartseriesstackedareavaluelabelposition = 96;
    if (has_tschchartseriesstackedareavaluelabelposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesstackedareavaluelabelposition());
    }

  }
  if (_has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    // optional int32 tschchartseriesstackedbarvaluelabelposition = 97;
    if (has_tschchartseriesstackedbarvaluelabelposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesstackedbarvaluelabelposition());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartSeriesStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartSeriesStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartSeriesStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartSeriesStyleArchive::MergeFrom(const ChartSeriesStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tschchartseriesdefaulterrorbarlineend()) {
      mutable_tschchartseriesdefaulterrorbarlineend()->::TSD::LineEndArchive::MergeFrom(from.tschchartseriesdefaulterrorbarlineend());
    }
    if (from.has_tschchartseriesdefaulterrorbarlineendscatterx()) {
      mutable_tschchartseriesdefaulterrorbarlineendscatterx()->::TSD::LineEndArchive::MergeFrom(from.tschchartseriesdefaulterrorbarlineendscatterx());
    }
    if (from.has_tschchartseriesdefaulterrorbarshadow()) {
      mutable_tschchartseriesdefaulterrorbarshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseriesdefaulterrorbarshadow());
    }
    if (from.has_tschchartseriesdefaulterrorbarstroke()) {
      mutable_tschchartseriesdefaulterrorbarstroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriesdefaulterrorbarstroke());
    }
    if (from.has_tschchartseriesdefaulterrorbarstrokescatterx()) {
      mutable_tschchartseriesdefaulterrorbarstrokescatterx()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriesdefaulterrorbarstrokescatterx());
    }
    if (from.has_tschchartseries3dareafill()) {
      mutable_tschchartseries3dareafill()->::TSD::FillArchive::MergeFrom(from.tschchartseries3dareafill());
    }
    if (from.has_tschchartseries3dbarfill()) {
      mutable_tschchartseries3dbarfill()->::TSD::FillArchive::MergeFrom(from.tschchartseries3dbarfill());
    }
    if (from.has_tschchartseries3dcolumnfill()) {
      mutable_tschchartseries3dcolumnfill()->::TSD::FillArchive::MergeFrom(from.tschchartseries3dcolumnfill());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tschchartseries3dlinefill()) {
      mutable_tschchartseries3dlinefill()->::TSD::FillArchive::MergeFrom(from.tschchartseries3dlinefill());
    }
    if (from.has_tschchartseries3dpiefill()) {
      mutable_tschchartseries3dpiefill()->::TSD::FillArchive::MergeFrom(from.tschchartseries3dpiefill());
    }
    if (from.has_tschchartseriesareafill()) {
      mutable_tschchartseriesareafill()->::TSD::FillArchive::MergeFrom(from.tschchartseriesareafill());
    }
    if (from.has_tschchartseriesbarfill()) {
      mutable_tschchartseriesbarfill()->::TSD::FillArchive::MergeFrom(from.tschchartseriesbarfill());
    }
    if (from.has_tschchartseriescolumnfill()) {
      mutable_tschchartseriescolumnfill()->::TSD::FillArchive::MergeFrom(from.tschchartseriescolumnfill());
    }
    if (from.has_tschchartseriesdefaultfill()) {
      mutable_tschchartseriesdefaultfill()->::TSD::FillArchive::MergeFrom(from.tschchartseriesdefaultfill());
    }
    if (from.has_tschchartseriesmixedareafill()) {
      mutable_tschchartseriesmixedareafill()->::TSD::FillArchive::MergeFrom(from.tschchartseriesmixedareafill());
    }
    if (from.has_tschchartseriesmixedcolumnfill()) {
      mutable_tschchartseriesmixedcolumnfill()->::TSD::FillArchive::MergeFrom(from.tschchartseriesmixedcolumnfill());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tschchartseriespiefill()) {
      mutable_tschchartseriespiefill()->::TSD::FillArchive::MergeFrom(from.tschchartseriespiefill());
    }
    if (from.has_tschchartseriesarealabelparagraphstyleindex()) {
      set_tschchartseriesarealabelparagraphstyleindex(from.tschchartseriesarealabelparagraphstyleindex());
    }
    if (from.has_tschchartseriesbarlabelparagraphstyleindex()) {
      set_tschchartseriesbarlabelparagraphstyleindex(from.tschchartseriesbarlabelparagraphstyleindex());
    }
    if (from.has_tschchartseriesdefaultlabelparagraphstyleindex()) {
      set_tschchartseriesdefaultlabelparagraphstyleindex(from.tschchartseriesdefaultlabelparagraphstyleindex());
    }
    if (from.has_tschchartserieslinelabelparagraphstyleindex()) {
      set_tschchartserieslinelabelparagraphstyleindex(from.tschchartserieslinelabelparagraphstyleindex());
    }
    if (from.has_tschchartseriesmixedlabelparagraphstyleindex()) {
      set_tschchartseriesmixedlabelparagraphstyleindex(from.tschchartseriesmixedlabelparagraphstyleindex());
    }
    if (from.has_tschchartseriespielabelparagraphstyleindex()) {
      set_tschchartseriespielabelparagraphstyleindex(from.tschchartseriespielabelparagraphstyleindex());
    }
    if (from.has_tschchartseriesdefaultopacity()) {
      set_tschchartseriesdefaultopacity(from.tschchartseriesdefaultopacity());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_tschchartseriesareaoutsidelabelparagraphstyleindex()) {
      set_tschchartseriesareaoutsidelabelparagraphstyleindex(from.tschchartseriesareaoutsidelabelparagraphstyleindex());
    }
    if (from.has_tschchartseriesbaroutsidelabelparagraphstyleindex()) {
      set_tschchartseriesbaroutsidelabelparagraphstyleindex(from.tschchartseriesbaroutsidelabelparagraphstyleindex());
    }
    if (from.has_tschchartseriesdefaultoutsidelabelparagraphstyleindex()) {
      set_tschchartseriesdefaultoutsidelabelparagraphstyleindex(from.tschchartseriesdefaultoutsidelabelparagraphstyleindex());
    }
    if (from.has_tschchartseriesmixedoutsidelabelparagraphstyleindex()) {
      set_tschchartseriesmixedoutsidelabelparagraphstyleindex(from.tschchartseriesmixedoutsidelabelparagraphstyleindex());
    }
    if (from.has_tschchartseriespieoutsidelabelparagraphstyleindex()) {
      set_tschchartseriespieoutsidelabelparagraphstyleindex(from.tschchartseriespieoutsidelabelparagraphstyleindex());
    }
    if (from.has_tschchartseries3dareashadow()) {
      mutable_tschchartseries3dareashadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseries3dareashadow());
    }
    if (from.has_tschchartseries3dbarshadow()) {
      mutable_tschchartseries3dbarshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseries3dbarshadow());
    }
    if (from.has_tschchartseries3dcolumnshadow()) {
      mutable_tschchartseries3dcolumnshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseries3dcolumnshadow());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_tschchartseries3dlineshadow()) {
      mutable_tschchartseries3dlineshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseries3dlineshadow());
    }
    if (from.has_tschchartseries3dpieshadow()) {
      mutable_tschchartseries3dpieshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseries3dpieshadow());
    }
    if (from.has_tschchartseriesareashadow()) {
      mutable_tschchartseriesareashadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseriesareashadow());
    }
    if (from.has_tschchartseriesbarshadow()) {
      mutable_tschchartseriesbarshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseriesbarshadow());
    }
    if (from.has_tschchartseriesbubbleshadow()) {
      mutable_tschchartseriesbubbleshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseriesbubbleshadow());
    }
    if (from.has_tschchartseriesdefaultshadow()) {
      mutable_tschchartseriesdefaultshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseriesdefaultshadow());
    }
    if (from.has_tschchartserieslineshadow()) {
      mutable_tschchartserieslineshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartserieslineshadow());
    }
    if (from.has_tschchartseriesmixedareashadow()) {
      mutable_tschchartseriesmixedareashadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseriesmixedareashadow());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_tschchartseriesmixedcolumnshadow()) {
      mutable_tschchartseriesmixedcolumnshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseriesmixedcolumnshadow());
    }
    if (from.has_tschchartseriesmixedlineshadow()) {
      mutable_tschchartseriesmixedlineshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseriesmixedlineshadow());
    }
    if (from.has_tschchartseriespieshadow()) {
      mutable_tschchartseriespieshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseriespieshadow());
    }
    if (from.has_tschchartseriesscattershadow()) {
      mutable_tschchartseriesscattershadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseriesscattershadow());
    }
    if (from.has_tschchartseriesareastroke()) {
      mutable_tschchartseriesareastroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriesareastroke());
    }
    if (from.has_tschchartseriesbarstroke()) {
      mutable_tschchartseriesbarstroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriesbarstroke());
    }
    if (from.has_tschchartseriesbubblestroke()) {
      mutable_tschchartseriesbubblestroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriesbubblestroke());
    }
    if (from.has_tschchartserieslinestroke()) {
      mutable_tschchartserieslinestroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartserieslinestroke());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_tschchartseriesmixedareastroke()) {
      mutable_tschchartseriesmixedareastroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriesmixedareastroke());
    }
    if (from.has_tschchartseriesmixedcolumnstroke()) {
      mutable_tschchartseriesmixedcolumnstroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriesmixedcolumnstroke());
    }
    if (from.has_tschchartseriesmixedlinestroke()) {
      mutable_tschchartseriesmixedlinestroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriesmixedlinestroke());
    }
    if (from.has_tschchartseriespiestroke()) {
      mutable_tschchartseriespiestroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriespiestroke());
    }
    if (from.has_tschchartseriesscatterstroke()) {
      mutable_tschchartseriesscatterstroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriesscatterstroke());
    }
    if (from.has_tschchartseriesareasymbolfill()) {
      mutable_tschchartseriesareasymbolfill()->::TSD::FillArchive::MergeFrom(from.tschchartseriesareasymbolfill());
    }
    if (from.has_tschchartseriesbubblesymbolfill()) {
      mutable_tschchartseriesbubblesymbolfill()->::TSD::FillArchive::MergeFrom(from.tschchartseriesbubblesymbolfill());
    }
    if (from.has_tschchartserieslinesymbolfill()) {
      mutable_tschchartserieslinesymbolfill()->::TSD::FillArchive::MergeFrom(from.tschchartserieslinesymbolfill());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_tschchartseriesmixedareasymbolfill()) {
      mutable_tschchartseriesmixedareasymbolfill()->::TSD::FillArchive::MergeFrom(from.tschchartseriesmixedareasymbolfill());
    }
    if (from.has_tschchartseriesmixedlinesymbolfill()) {
      mutable_tschchartseriesmixedlinesymbolfill()->::TSD::FillArchive::MergeFrom(from.tschchartseriesmixedlinesymbolfill());
    }
    if (from.has_tschchartseriesscattersymbolfill()) {
      mutable_tschchartseriesscattersymbolfill()->::TSD::FillArchive::MergeFrom(from.tschchartseriesscattersymbolfill());
    }
    if (from.has_tschchartseriesareasymbolfilluseseriesfill()) {
      set_tschchartseriesareasymbolfilluseseriesfill(from.tschchartseriesareasymbolfilluseseriesfill());
    }
    if (from.has_tschchartserieslinesymbolfilluseseriesfill()) {
      set_tschchartserieslinesymbolfilluseseriesfill(from.tschchartserieslinesymbolfilluseseriesfill());
    }
    if (from.has_tschchartseriesmixedareasymbolfilluseseriesfill()) {
      set_tschchartseriesmixedareasymbolfilluseseriesfill(from.tschchartseriesmixedareasymbolfilluseseriesfill());
    }
    if (from.has_tschchartseriesmixedlinesymbolfilluseseriesfill()) {
      set_tschchartseriesmixedlinesymbolfilluseseriesfill(from.tschchartseriesmixedlinesymbolfilluseseriesfill());
    }
    if (from.has_tschchartseriesareasymbolfilluseseriesstroke()) {
      set_tschchartseriesareasymbolfilluseseriesstroke(from.tschchartseriesareasymbolfilluseseriesstroke());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_tschchartseriesbubblesymbolfilluseseriesstroke()) {
      set_tschchartseriesbubblesymbolfilluseseriesstroke(from.tschchartseriesbubblesymbolfilluseseriesstroke());
    }
    if (from.has_tschchartserieslinesymbolfilluseseriesstroke()) {
      set_tschchartserieslinesymbolfilluseseriesstroke(from.tschchartserieslinesymbolfilluseseriesstroke());
    }
    if (from.has_tschchartseriesmixedareasymbolfilluseseriesstroke()) {
      set_tschchartseriesmixedareasymbolfilluseseriesstroke(from.tschchartseriesmixedareasymbolfilluseseriesstroke());
    }
    if (from.has_tschchartseriesmixedlinesymbolfilluseseriesstroke()) {
      set_tschchartseriesmixedlinesymbolfilluseseriesstroke(from.tschchartseriesmixedlinesymbolfilluseseriesstroke());
    }
    if (from.has_tschchartseriesscattersymbolfilluseseriesstroke()) {
      set_tschchartseriesscattersymbolfilluseseriesstroke(from.tschchartseriesscattersymbolfilluseseriesstroke());
    }
    if (from.has_tschchartseriesareasymbolsize()) {
      set_tschchartseriesareasymbolsize(from.tschchartseriesareasymbolsize());
    }
    if (from.has_tschchartserieslinesymbolsize()) {
      set_tschchartserieslinesymbolsize(from.tschchartserieslinesymbolsize());
    }
    if (from.has_tschchartseriesmixedareasymbolsize()) {
      set_tschchartseriesmixedareasymbolsize(from.tschchartseriesmixedareasymbolsize());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_tschchartseriesmixedlinesymbolsize()) {
      set_tschchartseriesmixedlinesymbolsize(from.tschchartseriesmixedlinesymbolsize());
    }
    if (from.has_tschchartseriesscattersymbolsize()) {
      set_tschchartseriesscattersymbolsize(from.tschchartseriesscattersymbolsize());
    }
    if (from.has_tschchartseriesareasymbolstroke()) {
      mutable_tschchartseriesareasymbolstroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriesareasymbolstroke());
    }
    if (from.has_tschchartseriesbubblesymbolstroke()) {
      mutable_tschchartseriesbubblesymbolstroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriesbubblesymbolstroke());
    }
    if (from.has_tschchartserieslinesymbolstroke()) {
      mutable_tschchartserieslinesymbolstroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartserieslinesymbolstroke());
    }
    if (from.has_tschchartseriesmixedareasymbolstroke()) {
      mutable_tschchartseriesmixedareasymbolstroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriesmixedareasymbolstroke());
    }
    if (from.has_tschchartseriesmixedlinesymbolstroke()) {
      mutable_tschchartseriesmixedlinesymbolstroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriesmixedlinesymbolstroke());
    }
    if (from.has_tschchartseriesscattersymbolstroke()) {
      mutable_tschchartseriesscattersymbolstroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriesscattersymbolstroke());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_tschchartseriesdefaulttrendlineequationopacity()) {
      set_tschchartseriesdefaulttrendlineequationopacity(from.tschchartseriesdefaulttrendlineequationopacity());
    }
    if (from.has_tschchartseriesdefaulttrendlineequationparagraphstyleindex()) {
      set_tschchartseriesdefaulttrendlineequationparagraphstyleindex(from.tschchartseriesdefaulttrendlineequationparagraphstyleindex());
    }
    if (from.has_tschchartseriesdefaulttrendlinersquaredopacity()) {
      set_tschchartseriesdefaulttrendlinersquaredopacity(from.tschchartseriesdefaulttrendlinersquaredopacity());
    }
    if (from.has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex()) {
      set_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(from.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex());
    }
    if (from.has_tschchartseriesdefaulttrendlineshadow()) {
      mutable_tschchartseriesdefaulttrendlineshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseriesdefaulttrendlineshadow());
    }
    if (from.has_tschchartseriesdefaulttrendlinestroke()) {
      mutable_tschchartseriesdefaulttrendlinestroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriesdefaulttrendlinestroke());
    }
    if (from.has_tschchartseriesareavaluelabelposition()) {
      set_tschchartseriesareavaluelabelposition(from.tschchartseriesareavaluelabelposition());
    }
    if (from.has_tschchartseriesbarvaluelabelposition()) {
      set_tschchartseriesbarvaluelabelposition(from.tschchartseriesbarvaluelabelposition());
    }
  }
  if (from._has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    if (from.has_tschchartseriesbubblevaluelabelposition()) {
      set_tschchartseriesbubblevaluelabelposition(from.tschchartseriesbubblevaluelabelposition());
    }
    if (from.has_tschchartseriesdefaultvaluelabelposition()) {
      set_tschchartseriesdefaultvaluelabelposition(from.tschchartseriesdefaultvaluelabelposition());
    }
    if (from.has_tschchartserieslinevaluelabelposition()) {
      set_tschchartserieslinevaluelabelposition(from.tschchartserieslinevaluelabelposition());
    }
    if (from.has_tschchartseriesmixedareavaluelabelposition()) {
      set_tschchartseriesmixedareavaluelabelposition(from.tschchartseriesmixedareavaluelabelposition());
    }
    if (from.has_tschchartseriesmixedcolumnvaluelabelposition()) {
      set_tschchartseriesmixedcolumnvaluelabelposition(from.tschchartseriesmixedcolumnvaluelabelposition());
    }
    if (from.has_tschchartseriesmixedlinevaluelabelposition()) {
      set_tschchartseriesmixedlinevaluelabelposition(from.tschchartseriesmixedlinevaluelabelposition());
    }
    if (from.has_tschchartseriesscattervaluelabelposition()) {
      set_tschchartseriesscattervaluelabelposition(from.tschchartseriesscattervaluelabelposition());
    }
    if (from.has_tschchartseriesstackedareavaluelabelposition()) {
      set_tschchartseriesstackedareavaluelabelposition(from.tschchartseriesstackedareavaluelabelposition());
    }
  }
  if (from._has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    if (from.has_tschchartseriesstackedbarvaluelabelposition()) {
      set_tschchartseriesstackedbarvaluelabelposition(from.tschchartseriesstackedbarvaluelabelposition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartSeriesStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartSeriesStyleArchive::CopyFrom(const ChartSeriesStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSeriesStyleArchive::IsInitialized() const {

  if (has_tschchartseriesdefaulterrorbarlineend()) {
    if (!this->tschchartseriesdefaulterrorbarlineend().IsInitialized()) return false;
  }
  if (has_tschchartseriesdefaulterrorbarlineendscatterx()) {
    if (!this->tschchartseriesdefaulterrorbarlineendscatterx().IsInitialized()) return false;
  }
  if (has_tschchartseriesdefaulterrorbarshadow()) {
    if (!this->tschchartseriesdefaulterrorbarshadow().IsInitialized()) return false;
  }
  if (has_tschchartseriesdefaulterrorbarstroke()) {
    if (!this->tschchartseriesdefaulterrorbarstroke().IsInitialized()) return false;
  }
  if (has_tschchartseriesdefaulterrorbarstrokescatterx()) {
    if (!this->tschchartseriesdefaulterrorbarstrokescatterx().IsInitialized()) return false;
  }
  if (has_tschchartseries3dareafill()) {
    if (!this->tschchartseries3dareafill().IsInitialized()) return false;
  }
  if (has_tschchartseries3dbarfill()) {
    if (!this->tschchartseries3dbarfill().IsInitialized()) return false;
  }
  if (has_tschchartseries3dcolumnfill()) {
    if (!this->tschchartseries3dcolumnfill().IsInitialized()) return false;
  }
  if (has_tschchartseries3dlinefill()) {
    if (!this->tschchartseries3dlinefill().IsInitialized()) return false;
  }
  if (has_tschchartseries3dpiefill()) {
    if (!this->tschchartseries3dpiefill().IsInitialized()) return false;
  }
  if (has_tschchartseriesareafill()) {
    if (!this->tschchartseriesareafill().IsInitialized()) return false;
  }
  if (has_tschchartseriesbarfill()) {
    if (!this->tschchartseriesbarfill().IsInitialized()) return false;
  }
  if (has_tschchartseriescolumnfill()) {
    if (!this->tschchartseriescolumnfill().IsInitialized()) return false;
  }
  if (has_tschchartseriesdefaultfill()) {
    if (!this->tschchartseriesdefaultfill().IsInitialized()) return false;
  }
  if (has_tschchartseriesmixedareafill()) {
    if (!this->tschchartseriesmixedareafill().IsInitialized()) return false;
  }
  if (has_tschchartseriesmixedcolumnfill()) {
    if (!this->tschchartseriesmixedcolumnfill().IsInitialized()) return false;
  }
  if (has_tschchartseriespiefill()) {
    if (!this->tschchartseriespiefill().IsInitialized()) return false;
  }
  if (has_tschchartseries3dareashadow()) {
    if (!this->tschchartseries3dareashadow().IsInitialized()) return false;
  }
  if (has_tschchartseries3dbarshadow()) {
    if (!this->tschchartseries3dbarshadow().IsInitialized()) return false;
  }
  if (has_tschchartseries3dcolumnshadow()) {
    if (!this->tschchartseries3dcolumnshadow().IsInitialized()) return false;
  }
  if (has_tschchartseries3dlineshadow()) {
    if (!this->tschchartseries3dlineshadow().IsInitialized()) return false;
  }
  if (has_tschchartseries3dpieshadow()) {
    if (!this->tschchartseries3dpieshadow().IsInitialized()) return false;
  }
  if (has_tschchartseriesareashadow()) {
    if (!this->tschchartseriesareashadow().IsInitialized()) return false;
  }
  if (has_tschchartseriesbarshadow()) {
    if (!this->tschchartseriesbarshadow().IsInitialized()) return false;
  }
  if (has_tschchartseriesbubbleshadow()) {
    if (!this->tschchartseriesbubbleshadow().IsInitialized()) return false;
  }
  if (has_tschchartseriesdefaultshadow()) {
    if (!this->tschchartseriesdefaultshadow().IsInitialized()) return false;
  }
  if (has_tschchartserieslineshadow()) {
    if (!this->tschchartserieslineshadow().IsInitialized()) return false;
  }
  if (has_tschchartseriesmixedareashadow()) {
    if (!this->tschchartseriesmixedareashadow().IsInitialized()) return false;
  }
  if (has_tschchartseriesmixedcolumnshadow()) {
    if (!this->tschchartseriesmixedcolumnshadow().IsInitialized()) return false;
  }
  if (has_tschchartseriesmixedlineshadow()) {
    if (!this->tschchartseriesmixedlineshadow().IsInitialized()) return false;
  }
  if (has_tschchartseriespieshadow()) {
    if (!this->tschchartseriespieshadow().IsInitialized()) return false;
  }
  if (has_tschchartseriesscattershadow()) {
    if (!this->tschchartseriesscattershadow().IsInitialized()) return false;
  }
  if (has_tschchartseriesareastroke()) {
    if (!this->tschchartseriesareastroke().IsInitialized()) return false;
  }
  if (has_tschchartseriesbarstroke()) {
    if (!this->tschchartseriesbarstroke().IsInitialized()) return false;
  }
  if (has_tschchartseriesbubblestroke()) {
    if (!this->tschchartseriesbubblestroke().IsInitialized()) return false;
  }
  if (has_tschchartserieslinestroke()) {
    if (!this->tschchartserieslinestroke().IsInitialized()) return false;
  }
  if (has_tschchartseriesmixedareastroke()) {
    if (!this->tschchartseriesmixedareastroke().IsInitialized()) return false;
  }
  if (has_tschchartseriesmixedcolumnstroke()) {
    if (!this->tschchartseriesmixedcolumnstroke().IsInitialized()) return false;
  }
  if (has_tschchartseriesmixedlinestroke()) {
    if (!this->tschchartseriesmixedlinestroke().IsInitialized()) return false;
  }
  if (has_tschchartseriespiestroke()) {
    if (!this->tschchartseriespiestroke().IsInitialized()) return false;
  }
  if (has_tschchartseriesscatterstroke()) {
    if (!this->tschchartseriesscatterstroke().IsInitialized()) return false;
  }
  if (has_tschchartseriesareasymbolfill()) {
    if (!this->tschchartseriesareasymbolfill().IsInitialized()) return false;
  }
  if (has_tschchartseriesbubblesymbolfill()) {
    if (!this->tschchartseriesbubblesymbolfill().IsInitialized()) return false;
  }
  if (has_tschchartserieslinesymbolfill()) {
    if (!this->tschchartserieslinesymbolfill().IsInitialized()) return false;
  }
  if (has_tschchartseriesmixedareasymbolfill()) {
    if (!this->tschchartseriesmixedareasymbolfill().IsInitialized()) return false;
  }
  if (has_tschchartseriesmixedlinesymbolfill()) {
    if (!this->tschchartseriesmixedlinesymbolfill().IsInitialized()) return false;
  }
  if (has_tschchartseriesscattersymbolfill()) {
    if (!this->tschchartseriesscattersymbolfill().IsInitialized()) return false;
  }
  if (has_tschchartseriesareasymbolstroke()) {
    if (!this->tschchartseriesareasymbolstroke().IsInitialized()) return false;
  }
  if (has_tschchartseriesbubblesymbolstroke()) {
    if (!this->tschchartseriesbubblesymbolstroke().IsInitialized()) return false;
  }
  if (has_tschchartserieslinesymbolstroke()) {
    if (!this->tschchartserieslinesymbolstroke().IsInitialized()) return false;
  }
  if (has_tschchartseriesmixedareasymbolstroke()) {
    if (!this->tschchartseriesmixedareasymbolstroke().IsInitialized()) return false;
  }
  if (has_tschchartseriesmixedlinesymbolstroke()) {
    if (!this->tschchartseriesmixedlinesymbolstroke().IsInitialized()) return false;
  }
  if (has_tschchartseriesscattersymbolstroke()) {
    if (!this->tschchartseriesscattersymbolstroke().IsInitialized()) return false;
  }
  if (has_tschchartseriesdefaulttrendlineshadow()) {
    if (!this->tschchartseriesdefaulttrendlineshadow().IsInitialized()) return false;
  }
  if (has_tschchartseriesdefaulttrendlinestroke()) {
    if (!this->tschchartseriesdefaulttrendlinestroke().IsInitialized()) return false;
  }
  return true;
}

void ChartSeriesStyleArchive::Swap(ChartSeriesStyleArchive* other) {
  if (other != this) {
    std::swap(tschchartseriesdefaulterrorbarlineend_, other->tschchartseriesdefaulterrorbarlineend_);
    std::swap(tschchartseriesdefaulterrorbarlineendscatterx_, other->tschchartseriesdefaulterrorbarlineendscatterx_);
    std::swap(tschchartseriesdefaulterrorbarshadow_, other->tschchartseriesdefaulterrorbarshadow_);
    std::swap(tschchartseriesdefaulterrorbarstroke_, other->tschchartseriesdefaulterrorbarstroke_);
    std::swap(tschchartseriesdefaulterrorbarstrokescatterx_, other->tschchartseriesdefaulterrorbarstrokescatterx_);
    std::swap(tschchartseries3dareafill_, other->tschchartseries3dareafill_);
    std::swap(tschchartseries3dbarfill_, other->tschchartseries3dbarfill_);
    std::swap(tschchartseries3dcolumnfill_, other->tschchartseries3dcolumnfill_);
    std::swap(tschchartseries3dlinefill_, other->tschchartseries3dlinefill_);
    std::swap(tschchartseries3dpiefill_, other->tschchartseries3dpiefill_);
    std::swap(tschchartseriesareafill_, other->tschchartseriesareafill_);
    std::swap(tschchartseriesbarfill_, other->tschchartseriesbarfill_);
    std::swap(tschchartseriescolumnfill_, other->tschchartseriescolumnfill_);
    std::swap(tschchartseriesdefaultfill_, other->tschchartseriesdefaultfill_);
    std::swap(tschchartseriesmixedareafill_, other->tschchartseriesmixedareafill_);
    std::swap(tschchartseriesmixedcolumnfill_, other->tschchartseriesmixedcolumnfill_);
    std::swap(tschchartseriespiefill_, other->tschchartseriespiefill_);
    std::swap(tschchartseriesarealabelparagraphstyleindex_, other->tschchartseriesarealabelparagraphstyleindex_);
    std::swap(tschchartseriesbarlabelparagraphstyleindex_, other->tschchartseriesbarlabelparagraphstyleindex_);
    std::swap(tschchartseriesdefaultlabelparagraphstyleindex_, other->tschchartseriesdefaultlabelparagraphstyleindex_);
    std::swap(tschchartserieslinelabelparagraphstyleindex_, other->tschchartserieslinelabelparagraphstyleindex_);
    std::swap(tschchartseriesmixedlabelparagraphstyleindex_, other->tschchartseriesmixedlabelparagraphstyleindex_);
    std::swap(tschchartseriespielabelparagraphstyleindex_, other->tschchartseriespielabelparagraphstyleindex_);
    std::swap(tschchartseriesdefaultopacity_, other->tschchartseriesdefaultopacity_);
    std::swap(tschchartseriesareaoutsidelabelparagraphstyleindex_, other->tschchartseriesareaoutsidelabelparagraphstyleindex_);
    std::swap(tschchartseriesbaroutsidelabelparagraphstyleindex_, other->tschchartseriesbaroutsidelabelparagraphstyleindex_);
    std::swap(tschchartseriesdefaultoutsidelabelparagraphstyleindex_, other->tschchartseriesdefaultoutsidelabelparagraphstyleindex_);
    std::swap(tschchartseriesmixedoutsidelabelparagraphstyleindex_, other->tschchartseriesmixedoutsidelabelparagraphstyleindex_);
    std::swap(tschchartseriespieoutsidelabelparagraphstyleindex_, other->tschchartseriespieoutsidelabelparagraphstyleindex_);
    std::swap(tschchartseries3dareashadow_, other->tschchartseries3dareashadow_);
    std::swap(tschchartseries3dbarshadow_, other->tschchartseries3dbarshadow_);
    std::swap(tschchartseries3dcolumnshadow_, other->tschchartseries3dcolumnshadow_);
    std::swap(tschchartseries3dlineshadow_, other->tschchartseries3dlineshadow_);
    std::swap(tschchartseries3dpieshadow_, other->tschchartseries3dpieshadow_);
    std::swap(tschchartseriesareashadow_, other->tschchartseriesareashadow_);
    std::swap(tschchartseriesbarshadow_, other->tschchartseriesbarshadow_);
    std::swap(tschchartseriesbubbleshadow_, other->tschchartseriesbubbleshadow_);
    std::swap(tschchartseriesdefaultshadow_, other->tschchartseriesdefaultshadow_);
    std::swap(tschchartserieslineshadow_, other->tschchartserieslineshadow_);
    std::swap(tschchartseriesmixedareashadow_, other->tschchartseriesmixedareashadow_);
    std::swap(tschchartseriesmixedcolumnshadow_, other->tschchartseriesmixedcolumnshadow_);
    std::swap(tschchartseriesmixedlineshadow_, other->tschchartseriesmixedlineshadow_);
    std::swap(tschchartseriespieshadow_, other->tschchartseriespieshadow_);
    std::swap(tschchartseriesscattershadow_, other->tschchartseriesscattershadow_);
    std::swap(tschchartseriesareastroke_, other->tschchartseriesareastroke_);
    std::swap(tschchartseriesbarstroke_, other->tschchartseriesbarstroke_);
    std::swap(tschchartseriesbubblestroke_, other->tschchartseriesbubblestroke_);
    std::swap(tschchartserieslinestroke_, other->tschchartserieslinestroke_);
    std::swap(tschchartseriesmixedareastroke_, other->tschchartseriesmixedareastroke_);
    std::swap(tschchartseriesmixedcolumnstroke_, other->tschchartseriesmixedcolumnstroke_);
    std::swap(tschchartseriesmixedlinestroke_, other->tschchartseriesmixedlinestroke_);
    std::swap(tschchartseriespiestroke_, other->tschchartseriespiestroke_);
    std::swap(tschchartseriesscatterstroke_, other->tschchartseriesscatterstroke_);
    std::swap(tschchartseriesareasymbolfill_, other->tschchartseriesareasymbolfill_);
    std::swap(tschchartseriesbubblesymbolfill_, other->tschchartseriesbubblesymbolfill_);
    std::swap(tschchartserieslinesymbolfill_, other->tschchartserieslinesymbolfill_);
    std::swap(tschchartseriesmixedareasymbolfill_, other->tschchartseriesmixedareasymbolfill_);
    std::swap(tschchartseriesmixedlinesymbolfill_, other->tschchartseriesmixedlinesymbolfill_);
    std::swap(tschchartseriesscattersymbolfill_, other->tschchartseriesscattersymbolfill_);
    std::swap(tschchartseriesareasymbolfilluseseriesfill_, other->tschchartseriesareasymbolfilluseseriesfill_);
    std::swap(tschchartserieslinesymbolfilluseseriesfill_, other->tschchartserieslinesymbolfilluseseriesfill_);
    std::swap(tschchartseriesmixedareasymbolfilluseseriesfill_, other->tschchartseriesmixedareasymbolfilluseseriesfill_);
    std::swap(tschchartseriesmixedlinesymbolfilluseseriesfill_, other->tschchartseriesmixedlinesymbolfilluseseriesfill_);
    std::swap(tschchartseriesareasymbolfilluseseriesstroke_, other->tschchartseriesareasymbolfilluseseriesstroke_);
    std::swap(tschchartseriesbubblesymbolfilluseseriesstroke_, other->tschchartseriesbubblesymbolfilluseseriesstroke_);
    std::swap(tschchartserieslinesymbolfilluseseriesstroke_, other->tschchartserieslinesymbolfilluseseriesstroke_);
    std::swap(tschchartseriesmixedareasymbolfilluseseriesstroke_, other->tschchartseriesmixedareasymbolfilluseseriesstroke_);
    std::swap(tschchartseriesmixedlinesymbolfilluseseriesstroke_, other->tschchartseriesmixedlinesymbolfilluseseriesstroke_);
    std::swap(tschchartseriesscattersymbolfilluseseriesstroke_, other->tschchartseriesscattersymbolfilluseseriesstroke_);
    std::swap(tschchartseriesareasymbolsize_, other->tschchartseriesareasymbolsize_);
    std::swap(tschchartserieslinesymbolsize_, other->tschchartserieslinesymbolsize_);
    std::swap(tschchartseriesmixedareasymbolsize_, other->tschchartseriesmixedareasymbolsize_);
    std::swap(tschchartseriesmixedlinesymbolsize_, other->tschchartseriesmixedlinesymbolsize_);
    std::swap(tschchartseriesscattersymbolsize_, other->tschchartseriesscattersymbolsize_);
    std::swap(tschchartseriesareasymbolstroke_, other->tschchartseriesareasymbolstroke_);
    std::swap(tschchartseriesbubblesymbolstroke_, other->tschchartseriesbubblesymbolstroke_);
    std::swap(tschchartserieslinesymbolstroke_, other->tschchartserieslinesymbolstroke_);
    std::swap(tschchartseriesmixedareasymbolstroke_, other->tschchartseriesmixedareasymbolstroke_);
    std::swap(tschchartseriesmixedlinesymbolstroke_, other->tschchartseriesmixedlinesymbolstroke_);
    std::swap(tschchartseriesscattersymbolstroke_, other->tschchartseriesscattersymbolstroke_);
    std::swap(tschchartseriesdefaulttrendlineequationopacity_, other->tschchartseriesdefaulttrendlineequationopacity_);
    std::swap(tschchartseriesdefaulttrendlineequationparagraphstyleindex_, other->tschchartseriesdefaulttrendlineequationparagraphstyleindex_);
    std::swap(tschchartseriesdefaulttrendlinersquaredopacity_, other->tschchartseriesdefaulttrendlinersquaredopacity_);
    std::swap(tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_, other->tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_);
    std::swap(tschchartseriesdefaulttrendlineshadow_, other->tschchartseriesdefaulttrendlineshadow_);
    std::swap(tschchartseriesdefaulttrendlinestroke_, other->tschchartseriesdefaulttrendlinestroke_);
    std::swap(tschchartseriesareavaluelabelposition_, other->tschchartseriesareavaluelabelposition_);
    std::swap(tschchartseriesbarvaluelabelposition_, other->tschchartseriesbarvaluelabelposition_);
    std::swap(tschchartseriesbubblevaluelabelposition_, other->tschchartseriesbubblevaluelabelposition_);
    std::swap(tschchartseriesdefaultvaluelabelposition_, other->tschchartseriesdefaultvaluelabelposition_);
    std::swap(tschchartserieslinevaluelabelposition_, other->tschchartserieslinevaluelabelposition_);
    std::swap(tschchartseriesmixedareavaluelabelposition_, other->tschchartseriesmixedareavaluelabelposition_);
    std::swap(tschchartseriesmixedcolumnvaluelabelposition_, other->tschchartseriesmixedcolumnvaluelabelposition_);
    std::swap(tschchartseriesmixedlinevaluelabelposition_, other->tschchartseriesmixedlinevaluelabelposition_);
    std::swap(tschchartseriesscattervaluelabelposition_, other->tschchartseriesscattervaluelabelposition_);
    std::swap(tschchartseriesstackedareavaluelabelposition_, other->tschchartseriesstackedareavaluelabelposition_);
    std::swap(tschchartseriesstackedbarvaluelabelposition_, other->tschchartseriesstackedbarvaluelabelposition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    std::swap(_has_bits_[3], other->_has_bits_[3]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartSeriesStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartSeriesStyleArchive_descriptor_;
  metadata.reflection = ChartSeriesStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartSeriesNonStyleArchive::kTschchartseriesbubbleadjustmentscaleFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulterrorbarcustomnegativedataFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulterrorbarcustomnegativedatascatterxFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulterrorbarcustompositivedataFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulterrorbarcustompositivedatascatterxFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulterrorbarfixedvalueFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulterrorbarfixedvaluescatterxFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulterrorbarpercentvalueFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulterrorbarpercentvaluescatterxFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulterrorbarsettingFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulterrorbarsettingscatterxFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulterrorbarstddevvalueFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulterrorbarstddevvaluescatterxFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulterrorbartypeFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulterrorbartypescatterxFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriespielabelexplosionFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesbubblelinetypeFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartserieslinelinetypeFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesmixedlinelinetypeFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesscatterlinetypeFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefault10NumberformatFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaultnumberformatFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefault10DateformatFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaultdurationformatFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaultdateformatFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriespie10NumberformatFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriespienumberformatFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaultnumberformattypeFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriespienumberformattypeFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesstackedpercentnumberformatFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaultseriestypeFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaultshowerrorbarFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaultshowerrorbarscatterxFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesscattershowlineFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesbubbleshownegativedataFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriespieshowserieslabelsFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesareashowsymbolFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartserieslineshowsymbolFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesmixedareashowsymbolFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesmixedlineshowsymbolFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesscattershowsymbolFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaultshowtrendlineFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesareashowvaluelabelsFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesbarshowvaluelabelsFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesbubbleshowvaluelabelsFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaultshowvaluelabelsFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartserieslineshowvaluelabelsFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesmixedshowvaluelabelsFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriespieshowvaluelabelsFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesscattershowvaluelabelsFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesbubblesizedimensionFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesareasymboltypeFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartserieslinesymboltypeFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesmixedareasymboltypeFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesmixedlinesymboltypeFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesscattersymboltypeFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulttrendlineequationoffsetxFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulttrendlineequationoffsetyFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulttrendlinelabelstringFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulttrendlineorderFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulttrendlineperiodFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulttrendlinersquaredoffsetxFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulttrendlinersquaredoffsetyFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulttrendlineshowequationFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulttrendlineshowlabelFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulttrendlineshowr2ValueFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaulttrendlinetypeFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriespiewedgeexplosionFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaultyaxisordinalFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesbubbleshowserieslabelsFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesbubblevaluelabelsaxisFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesscattershowserieslabelsFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesscattervaluelabelsaxisFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesdefaultshowlabelsinfrontFieldNumber;
const int ChartSeriesNonStyleArchive::kTschchartseriesbubbleshowlabelsinfrontFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ChartSeriesNonStyleArchive::kCurrentFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartSeriesNonStyleArchive,
    ::google::protobuf::internal::MessageTypeTraits< ::TSCH::Generated::ChartSeriesNonStyleArchive >, 11, false >
  ChartSeriesNonStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::ChartSeriesNonStyleArchive::default_instance());
ChartSeriesNonStyleArchive::ChartSeriesNonStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartSeriesNonStyleArchive::InitAsDefaultInstance() {
  tschchartseriesdefaulterrorbarcustomnegativedata_ = const_cast< ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive*>(&::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::default_instance());
  tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ = const_cast< ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive*>(&::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::default_instance());
  tschchartseriesdefaulterrorbarcustompositivedata_ = const_cast< ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive*>(&::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::default_instance());
  tschchartseriesdefaulterrorbarcustompositivedatascatterx_ = const_cast< ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive*>(&::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::default_instance());
  tschchartseriesdefault1_0numberformat_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  tschchartseriesdefaultnumberformat_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  tschchartseriesdefault1_0dateformat_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  tschchartseriesdefaultdurationformat_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  tschchartseriesdefaultdateformat_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  tschchartseriespie1_0numberformat_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  tschchartseriespienumberformat_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  tschchartseriesstackedpercentnumberformat_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
}

ChartSeriesNonStyleArchive::ChartSeriesNonStyleArchive(const ChartSeriesNonStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartSeriesNonStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  tschchartseriesbubbleadjustmentscale_ = 0;
  tschchartseriesdefaulterrorbarcustomnegativedata_ = NULL;
  tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ = NULL;
  tschchartseriesdefaulterrorbarcustompositivedata_ = NULL;
  tschchartseriesdefaulterrorbarcustompositivedatascatterx_ = NULL;
  tschchartseriesdefaulterrorbarfixedvalue_ = 0;
  tschchartseriesdefaulterrorbarfixedvaluescatterx_ = 0;
  tschchartseriesdefaulterrorbarpercentvalue_ = 0;
  tschchartseriesdefaulterrorbarpercentvaluescatterx_ = 0;
  tschchartseriesdefaulterrorbarsetting_ = 0;
  tschchartseriesdefaulterrorbarsettingscatterx_ = 0;
  tschchartseriesdefaulterrorbarstddevvalue_ = 0;
  tschchartseriesdefaulterrorbarstddevvaluescatterx_ = 0;
  tschchartseriesdefaulterrorbartype_ = 0;
  tschchartseriesdefaulterrorbartypescatterx_ = 0;
  tschchartseriespielabelexplosion_ = 0;
  tschchartseriesbubblelinetype_ = 0;
  tschchartserieslinelinetype_ = 0;
  tschchartseriesmixedlinelinetype_ = 0;
  tschchartseriesscatterlinetype_ = 0;
  tschchartseriesdefault1_0numberformat_ = NULL;
  tschchartseriesdefaultnumberformat_ = NULL;
  tschchartseriesdefault1_0dateformat_ = NULL;
  tschchartseriesdefaultdurationformat_ = NULL;
  tschchartseriesdefaultdateformat_ = NULL;
  tschchartseriespie1_0numberformat_ = NULL;
  tschchartseriespienumberformat_ = NULL;
  tschchartseriesdefaultnumberformattype_ = 0;
  tschchartseriespienumberformattype_ = 0;
  tschchartseriesstackedpercentnumberformat_ = NULL;
  tschchartseriesdefaultseriestype_ = 0;
  tschchartseriesdefaultshowerrorbar_ = false;
  tschchartseriesdefaultshowerrorbarscatterx_ = false;
  tschchartseriesscattershowline_ = false;
  tschchartseriesbubbleshownegativedata_ = false;
  tschchartseriespieshowserieslabels_ = false;
  tschchartseriesareashowsymbol_ = false;
  tschchartserieslineshowsymbol_ = false;
  tschchartseriesmixedareashowsymbol_ = false;
  tschchartseriesmixedlineshowsymbol_ = false;
  tschchartseriesscattershowsymbol_ = false;
  tschchartseriesdefaultshowtrendline_ = false;
  tschchartseriesareashowvaluelabels_ = false;
  tschchartseriesbarshowvaluelabels_ = false;
  tschchartseriesbubbleshowvaluelabels_ = false;
  tschchartseriesdefaultshowvaluelabels_ = false;
  tschchartserieslineshowvaluelabels_ = false;
  tschchartseriesmixedshowvaluelabels_ = false;
  tschchartseriespieshowvaluelabels_ = false;
  tschchartseriesscattershowvaluelabels_ = false;
  tschchartseriesbubblesizedimension_ = 0;
  tschchartseriesareasymboltype_ = 0;
  tschchartserieslinesymboltype_ = 0;
  tschchartseriesmixedareasymboltype_ = 0;
  tschchartseriesmixedlinesymboltype_ = 0;
  tschchartseriesscattersymboltype_ = 0;
  tschchartseriesdefaulttrendlineequationoffsetx_ = 0;
  tschchartseriesdefaulttrendlineequationoffsety_ = 0;
  tschchartseriesdefaulttrendlinelabelstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tschchartseriesdefaulttrendlineorder_ = 0;
  tschchartseriesdefaulttrendlineperiod_ = 0;
  tschchartseriesdefaulttrendlinersquaredoffsetx_ = 0;
  tschchartseriesdefaulttrendlinersquaredoffsety_ = 0;
  tschchartseriesdefaulttrendlineshowequation_ = false;
  tschchartseriesdefaulttrendlineshowlabel_ = false;
  tschchartseriesdefaulttrendlineshowr2value_ = false;
  tschchartseriesdefaulttrendlinetype_ = 0;
  tschchartseriespiewedgeexplosion_ = 0;
  tschchartseriesdefaultyaxisordinal_ = 0;
  tschchartseriesbubbleshowserieslabels_ = false;
  tschchartseriesbubblevaluelabelsaxis_ = 0;
  tschchartseriesscattershowserieslabels_ = false;
  tschchartseriesscattervaluelabelsaxis_ = 0;
  tschchartseriesdefaultshowlabelsinfront_ = false;
  tschchartseriesbubbleshowlabelsinfront_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartSeriesNonStyleArchive::~ChartSeriesNonStyleArchive() {
  SharedDtor();
}

void ChartSeriesNonStyleArchive::SharedDtor() {
  if (tschchartseriesdefaulttrendlinelabelstring_ != &::google::protobuf::internal::kEmptyString) {
    delete tschchartseriesdefaulttrendlinelabelstring_;
  }
  if (this != default_instance_) {
    delete tschchartseriesdefaulterrorbarcustomnegativedata_;
    delete tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
    delete tschchartseriesdefaulterrorbarcustompositivedata_;
    delete tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
    delete tschchartseriesdefault1_0numberformat_;
    delete tschchartseriesdefaultnumberformat_;
    delete tschchartseriesdefault1_0dateformat_;
    delete tschchartseriesdefaultdurationformat_;
    delete tschchartseriesdefaultdateformat_;
    delete tschchartseriespie1_0numberformat_;
    delete tschchartseriespienumberformat_;
    delete tschchartseriesstackedpercentnumberformat_;
  }
}

void ChartSeriesNonStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartSeriesNonStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartSeriesNonStyleArchive_descriptor_;
}

const ChartSeriesNonStyleArchive& ChartSeriesNonStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eGEN_2eproto();
  return *default_instance_;
}

ChartSeriesNonStyleArchive* ChartSeriesNonStyleArchive::default_instance_ = NULL;

ChartSeriesNonStyleArchive* ChartSeriesNonStyleArchive::New() const {
  return new ChartSeriesNonStyleArchive;
}

void ChartSeriesNonStyleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tschchartseriesbubbleadjustmentscale_ = 0;
    if (has_tschchartseriesdefaulterrorbarcustomnegativedata()) {
      if (tschchartseriesdefaulterrorbarcustomnegativedata_ != NULL) tschchartseriesdefaulterrorbarcustomnegativedata_->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::Clear();
    }
    if (has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx()) {
      if (tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ != NULL) tschchartseriesdefaulterrorbarcustomnegativedatascatterx_->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::Clear();
    }
    if (has_tschchartseriesdefaulterrorbarcustompositivedata()) {
      if (tschchartseriesdefaulterrorbarcustompositivedata_ != NULL) tschchartseriesdefaulterrorbarcustompositivedata_->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::Clear();
    }
    if (has_tschchartseriesdefaulterrorbarcustompositivedatascatterx()) {
      if (tschchartseriesdefaulterrorbarcustompositivedatascatterx_ != NULL) tschchartseriesdefaulterrorbarcustompositivedatascatterx_->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::Clear();
    }
    tschchartseriesdefaulterrorbarfixedvalue_ = 0;
    tschchartseriesdefaulterrorbarfixedvaluescatterx_ = 0;
    tschchartseriesdefaulterrorbarpercentvalue_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    tschchartseriesdefaulterrorbarpercentvaluescatterx_ = 0;
    tschchartseriesdefaulterrorbarsetting_ = 0;
    tschchartseriesdefaulterrorbarsettingscatterx_ = 0;
    tschchartseriesdefaulterrorbarstddevvalue_ = 0;
    tschchartseriesdefaulterrorbarstddevvaluescatterx_ = 0;
    tschchartseriesdefaulterrorbartype_ = 0;
    tschchartseriesdefaulterrorbartypescatterx_ = 0;
    tschchartseriespielabelexplosion_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    tschchartseriesbubblelinetype_ = 0;
    tschchartserieslinelinetype_ = 0;
    tschchartseriesmixedlinelinetype_ = 0;
    tschchartseriesscatterlinetype_ = 0;
    if (has_tschchartseriesdefault1_0numberformat()) {
      if (tschchartseriesdefault1_0numberformat_ != NULL) tschchartseriesdefault1_0numberformat_->::TSK::FormatStructArchive::Clear();
    }
    if (has_tschchartseriesdefaultnumberformat()) {
      if (tschchartseriesdefaultnumberformat_ != NULL) tschchartseriesdefaultnumberformat_->::TSK::FormatStructArchive::Clear();
    }
    if (has_tschchartseriesdefault1_0dateformat()) {
      if (tschchartseriesdefault1_0dateformat_ != NULL) tschchartseriesdefault1_0dateformat_->::TSK::FormatStructArchive::Clear();
    }
    if (has_tschchartseriesdefaultdurationformat()) {
      if (tschchartseriesdefaultdurationformat_ != NULL) tschchartseriesdefaultdurationformat_->::TSK::FormatStructArchive::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_tschchartseriesdefaultdateformat()) {
      if (tschchartseriesdefaultdateformat_ != NULL) tschchartseriesdefaultdateformat_->::TSK::FormatStructArchive::Clear();
    }
    if (has_tschchartseriespie1_0numberformat()) {
      if (tschchartseriespie1_0numberformat_ != NULL) tschchartseriespie1_0numberformat_->::TSK::FormatStructArchive::Clear();
    }
    if (has_tschchartseriespienumberformat()) {
      if (tschchartseriespienumberformat_ != NULL) tschchartseriespienumberformat_->::TSK::FormatStructArchive::Clear();
    }
    tschchartseriesdefaultnumberformattype_ = 0;
    tschchartseriespienumberformattype_ = 0;
    if (has_tschchartseriesstackedpercentnumberformat()) {
      if (tschchartseriesstackedpercentnumberformat_ != NULL) tschchartseriesstackedpercentnumberformat_->::TSK::FormatStructArchive::Clear();
    }
    tschchartseriesdefaultseriestype_ = 0;
    tschchartseriesdefaultshowerrorbar_ = false;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    tschchartseriesdefaultshowerrorbarscatterx_ = false;
    tschchartseriesscattershowline_ = false;
    tschchartseriesbubbleshownegativedata_ = false;
    tschchartseriespieshowserieslabels_ = false;
    tschchartseriesareashowsymbol_ = false;
    tschchartserieslineshowsymbol_ = false;
    tschchartseriesmixedareashowsymbol_ = false;
    tschchartseriesmixedlineshowsymbol_ = false;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    tschchartseriesscattershowsymbol_ = false;
    tschchartseriesdefaultshowtrendline_ = false;
    tschchartseriesareashowvaluelabels_ = false;
    tschchartseriesbarshowvaluelabels_ = false;
    tschchartseriesbubbleshowvaluelabels_ = false;
    tschchartseriesdefaultshowvaluelabels_ = false;
    tschchartserieslineshowvaluelabels_ = false;
    tschchartseriesmixedshowvaluelabels_ = false;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    tschchartseriespieshowvaluelabels_ = false;
    tschchartseriesscattershowvaluelabels_ = false;
    tschchartseriesbubblesizedimension_ = 0;
    tschchartseriesareasymboltype_ = 0;
    tschchartserieslinesymboltype_ = 0;
    tschchartseriesmixedareasymboltype_ = 0;
    tschchartseriesmixedlinesymboltype_ = 0;
    tschchartseriesscattersymboltype_ = 0;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    tschchartseriesdefaulttrendlineequationoffsetx_ = 0;
    tschchartseriesdefaulttrendlineequationoffsety_ = 0;
    if (has_tschchartseriesdefaulttrendlinelabelstring()) {
      if (tschchartseriesdefaulttrendlinelabelstring_ != &::google::protobuf::internal::kEmptyString) {
        tschchartseriesdefaulttrendlinelabelstring_->clear();
      }
    }
    tschchartseriesdefaulttrendlineorder_ = 0;
    tschchartseriesdefaulttrendlineperiod_ = 0;
    tschchartseriesdefaulttrendlinersquaredoffsetx_ = 0;
    tschchartseriesdefaulttrendlinersquaredoffsety_ = 0;
    tschchartseriesdefaulttrendlineshowequation_ = false;
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    tschchartseriesdefaulttrendlineshowlabel_ = false;
    tschchartseriesdefaulttrendlineshowr2value_ = false;
    tschchartseriesdefaulttrendlinetype_ = 0;
    tschchartseriespiewedgeexplosion_ = 0;
    tschchartseriesdefaultyaxisordinal_ = 0;
    tschchartseriesbubbleshowserieslabels_ = false;
    tschchartseriesbubblevaluelabelsaxis_ = 0;
    tschchartseriesscattershowserieslabels_ = false;
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    tschchartseriesscattervaluelabelsaxis_ = 0;
    tschchartseriesdefaultshowlabelsinfront_ = false;
    tschchartseriesbubbleshowlabelsinfront_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartSeriesNonStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float tschchartseriesbubbleadjustmentscale = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesbubbleadjustmentscale_)));
          set_has_tschchartseriesbubbleadjustmentscale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tschchartseriesdefaulterrorbarcustomnegativedata;
        break;
      }

      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaulterrorbarcustomnegativedata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefaulterrorbarcustomnegativedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tschchartseriesdefaulterrorbarcustomnegativedatascatterx;
        break;
      }

      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedatascatterx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaulterrorbarcustomnegativedatascatterx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefaulterrorbarcustomnegativedatascatterx()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tschchartseriesdefaulterrorbarcustompositivedata;
        break;
      }

      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedata = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaulterrorbarcustompositivedata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefaulterrorbarcustompositivedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tschchartseriesdefaulterrorbarcustompositivedatascatterx;
        break;
      }

      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedatascatterx = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaulterrorbarcustompositivedatascatterx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefaulterrorbarcustompositivedatascatterx()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_tschchartseriesdefaulterrorbarfixedvalue;
        break;
      }

      // optional float tschchartseriesdefaulterrorbarfixedvalue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesdefaulterrorbarfixedvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesdefaulterrorbarfixedvalue_)));
          set_has_tschchartseriesdefaulterrorbarfixedvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_tschchartseriesdefaulterrorbarfixedvaluescatterx;
        break;
      }

      // optional float tschchartseriesdefaulterrorbarfixedvaluescatterx = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesdefaulterrorbarfixedvaluescatterx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesdefaulterrorbarfixedvaluescatterx_)));
          set_has_tschchartseriesdefaulterrorbarfixedvaluescatterx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_tschchartseriesdefaulterrorbarpercentvalue;
        break;
      }

      // optional float tschchartseriesdefaulterrorbarpercentvalue = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesdefaulterrorbarpercentvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesdefaulterrorbarpercentvalue_)));
          set_has_tschchartseriesdefaulterrorbarpercentvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_tschchartseriesdefaulterrorbarpercentvaluescatterx;
        break;
      }

      // optional float tschchartseriesdefaulterrorbarpercentvaluescatterx = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesdefaulterrorbarpercentvaluescatterx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesdefaulterrorbarpercentvaluescatterx_)));
          set_has_tschchartseriesdefaulterrorbarpercentvaluescatterx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_tschchartseriesdefaulterrorbarsetting;
        break;
      }

      // optional int32 tschchartseriesdefaulterrorbarsetting = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaulterrorbarsetting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesdefaulterrorbarsetting_)));
          set_has_tschchartseriesdefaulterrorbarsetting();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_tschchartseriesdefaulterrorbarsettingscatterx;
        break;
      }

      // optional int32 tschchartseriesdefaulterrorbarsettingscatterx = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaulterrorbarsettingscatterx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesdefaulterrorbarsettingscatterx_)));
          set_has_tschchartseriesdefaulterrorbarsettingscatterx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_tschchartseriesdefaulterrorbarstddevvalue;
        break;
      }

      // optional float tschchartseriesdefaulterrorbarstddevvalue = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesdefaulterrorbarstddevvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesdefaulterrorbarstddevvalue_)));
          set_has_tschchartseriesdefaulterrorbarstddevvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_tschchartseriesdefaulterrorbarstddevvaluescatterx;
        break;
      }

      // optional float tschchartseriesdefaulterrorbarstddevvaluescatterx = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesdefaulterrorbarstddevvaluescatterx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesdefaulterrorbarstddevvaluescatterx_)));
          set_has_tschchartseriesdefaulterrorbarstddevvaluescatterx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_tschchartseriesdefaulterrorbartype;
        break;
      }

      // optional int32 tschchartseriesdefaulterrorbartype = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaulterrorbartype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesdefaulterrorbartype_)));
          set_has_tschchartseriesdefaulterrorbartype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_tschchartseriesdefaulterrorbartypescatterx;
        break;
      }

      // optional int32 tschchartseriesdefaulterrorbartypescatterx = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaulterrorbartypescatterx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesdefaulterrorbartypescatterx_)));
          set_has_tschchartseriesdefaulterrorbartypescatterx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_tschchartseriespielabelexplosion;
        break;
      }

      // optional float tschchartseriespielabelexplosion = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriespielabelexplosion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriespielabelexplosion_)));
          set_has_tschchartseriespielabelexplosion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_tschchartseriesbubblelinetype;
        break;
      }

      // optional int32 tschchartseriesbubblelinetype = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesbubblelinetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesbubblelinetype_)));
          set_has_tschchartseriesbubblelinetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_tschchartserieslinelinetype;
        break;
      }

      // optional int32 tschchartserieslinelinetype = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartserieslinelinetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartserieslinelinetype_)));
          set_has_tschchartserieslinelinetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_tschchartseriesmixedlinelinetype;
        break;
      }

      // optional int32 tschchartseriesmixedlinelinetype = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesmixedlinelinetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesmixedlinelinetype_)));
          set_has_tschchartseriesmixedlinelinetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_tschchartseriesscatterlinetype;
        break;
      }

      // optional int32 tschchartseriesscatterlinetype = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesscatterlinetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesscatterlinetype_)));
          set_has_tschchartseriesscatterlinetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_tschchartseriesdefault1_0numberformat;
        break;
      }

      // optional .TSK.FormatStructArchive tschchartseriesdefault1_0numberformat = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefault1_0numberformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefault1_0numberformat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_tschchartseriespie1_0numberformat;
        break;
      }

      // optional .TSK.FormatStructArchive tschchartseriespie1_0numberformat = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriespie1_0numberformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriespie1_0numberformat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_tschchartseriesdefaultnumberformattype;
        break;
      }

      // optional int32 tschchartseriesdefaultnumberformattype = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaultnumberformattype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesdefaultnumberformattype_)));
          set_has_tschchartseriesdefaultnumberformattype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_tschchartseriespienumberformattype;
        break;
      }

      // optional int32 tschchartseriespienumberformattype = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriespienumberformattype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriespienumberformattype_)));
          set_has_tschchartseriespienumberformattype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_tschchartseriesstackedpercentnumberformat;
        break;
      }

      // optional .TSK.FormatStructArchive tschchartseriesstackedpercentnumberformat = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesstackedpercentnumberformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesstackedpercentnumberformat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_tschchartseriesdefaultseriestype;
        break;
      }

      // optional int32 tschchartseriesdefaultseriestype = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaultseriestype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesdefaultseriestype_)));
          set_has_tschchartseriesdefaultseriestype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_tschchartseriesdefaultshowerrorbar;
        break;
      }

      // optional bool tschchartseriesdefaultshowerrorbar = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaultshowerrorbar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesdefaultshowerrorbar_)));
          set_has_tschchartseriesdefaultshowerrorbar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_tschchartseriesdefaultshowerrorbarscatterx;
        break;
      }

      // optional bool tschchartseriesdefaultshowerrorbarscatterx = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaultshowerrorbarscatterx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesdefaultshowerrorbarscatterx_)));
          set_has_tschchartseriesdefaultshowerrorbarscatterx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_tschchartseriesscattershowline;
        break;
      }

      // optional bool tschchartseriesscattershowline = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesscattershowline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesscattershowline_)));
          set_has_tschchartseriesscattershowline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_tschchartseriesbubbleshownegativedata;
        break;
      }

      // optional bool tschchartseriesbubbleshownegativedata = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesbubbleshownegativedata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesbubbleshownegativedata_)));
          set_has_tschchartseriesbubbleshownegativedata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_tschchartseriespieshowserieslabels;
        break;
      }

      // optional bool tschchartseriespieshowserieslabels = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriespieshowserieslabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriespieshowserieslabels_)));
          set_has_tschchartseriespieshowserieslabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_tschchartseriesareashowsymbol;
        break;
      }

      // optional bool tschchartseriesareashowsymbol = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesareashowsymbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesareashowsymbol_)));
          set_has_tschchartseriesareashowsymbol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_tschchartserieslineshowsymbol;
        break;
      }

      // optional bool tschchartserieslineshowsymbol = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartserieslineshowsymbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartserieslineshowsymbol_)));
          set_has_tschchartserieslineshowsymbol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_tschchartseriesmixedareashowsymbol;
        break;
      }

      // optional bool tschchartseriesmixedareashowsymbol = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesmixedareashowsymbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesmixedareashowsymbol_)));
          set_has_tschchartseriesmixedareashowsymbol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_tschchartseriesmixedlineshowsymbol;
        break;
      }

      // optional bool tschchartseriesmixedlineshowsymbol = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesmixedlineshowsymbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesmixedlineshowsymbol_)));
          set_has_tschchartseriesmixedlineshowsymbol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_tschchartseriesscattershowsymbol;
        break;
      }

      // optional bool tschchartseriesscattershowsymbol = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesscattershowsymbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesscattershowsymbol_)));
          set_has_tschchartseriesscattershowsymbol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_tschchartseriesdefaultshowtrendline;
        break;
      }

      // optional bool tschchartseriesdefaultshowtrendline = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaultshowtrendline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesdefaultshowtrendline_)));
          set_has_tschchartseriesdefaultshowtrendline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_tschchartseriesareashowvaluelabels;
        break;
      }

      // optional bool tschchartseriesareashowvaluelabels = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesareashowvaluelabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesareashowvaluelabels_)));
          set_has_tschchartseriesareashowvaluelabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_tschchartseriesbarshowvaluelabels;
        break;
      }

      // optional bool tschchartseriesbarshowvaluelabels = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesbarshowvaluelabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesbarshowvaluelabels_)));
          set_has_tschchartseriesbarshowvaluelabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_tschchartseriesbubbleshowvaluelabels;
        break;
      }

      // optional bool tschchartseriesbubbleshowvaluelabels = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesbubbleshowvaluelabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesbubbleshowvaluelabels_)));
          set_has_tschchartseriesbubbleshowvaluelabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_tschchartseriesdefaultshowvaluelabels;
        break;
      }

      // optional bool tschchartseriesdefaultshowvaluelabels = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaultshowvaluelabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesdefaultshowvaluelabels_)));
          set_has_tschchartseriesdefaultshowvaluelabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_tschchartserieslineshowvaluelabels;
        break;
      }

      // optional bool tschchartserieslineshowvaluelabels = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartserieslineshowvaluelabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartserieslineshowvaluelabels_)));
          set_has_tschchartserieslineshowvaluelabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_tschchartseriesmixedshowvaluelabels;
        break;
      }

      // optional bool tschchartseriesmixedshowvaluelabels = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesmixedshowvaluelabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesmixedshowvaluelabels_)));
          set_has_tschchartseriesmixedshowvaluelabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_tschchartseriespieshowvaluelabels;
        break;
      }

      // optional bool tschchartseriespieshowvaluelabels = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriespieshowvaluelabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriespieshowvaluelabels_)));
          set_has_tschchartseriespieshowvaluelabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_tschchartseriesscattershowvaluelabels;
        break;
      }

      // optional bool tschchartseriesscattershowvaluelabels = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesscattershowvaluelabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesscattershowvaluelabels_)));
          set_has_tschchartseriesscattershowvaluelabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_tschchartseriesbubblesizedimension;
        break;
      }

      // optional int32 tschchartseriesbubblesizedimension = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesbubblesizedimension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesbubblesizedimension_)));
          set_has_tschchartseriesbubblesizedimension();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_tschchartseriesareasymboltype;
        break;
      }

      // optional int32 tschchartseriesareasymboltype = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesareasymboltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesareasymboltype_)));
          set_has_tschchartseriesareasymboltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_tschchartserieslinesymboltype;
        break;
      }

      // optional int32 tschchartserieslinesymboltype = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartserieslinesymboltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartserieslinesymboltype_)));
          set_has_tschchartserieslinesymboltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_tschchartseriesmixedareasymboltype;
        break;
      }

      // optional int32 tschchartseriesmixedareasymboltype = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesmixedareasymboltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesmixedareasymboltype_)));
          set_has_tschchartseriesmixedareasymboltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_tschchartseriesmixedlinesymboltype;
        break;
      }

      // optional int32 tschchartseriesmixedlinesymboltype = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesmixedlinesymboltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesmixedlinesymboltype_)));
          set_has_tschchartseriesmixedlinesymboltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_tschchartseriesscattersymboltype;
        break;
      }

      // optional int32 tschchartseriesscattersymboltype = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesscattersymboltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesscattersymboltype_)));
          set_has_tschchartseriesscattersymboltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(421)) goto parse_tschchartseriesdefaulttrendlineequationoffsetx;
        break;
      }

      // optional float tschchartseriesdefaulttrendlineequationoffsetx = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesdefaulttrendlineequationoffsetx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesdefaulttrendlineequationoffsetx_)));
          set_has_tschchartseriesdefaulttrendlineequationoffsetx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(429)) goto parse_tschchartseriesdefaulttrendlineequationoffsety;
        break;
      }

      // optional float tschchartseriesdefaulttrendlineequationoffsety = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesdefaulttrendlineequationoffsety:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesdefaulttrendlineequationoffsety_)));
          set_has_tschchartseriesdefaulttrendlineequationoffsety();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(434)) goto parse_tschchartseriesdefaulttrendlinelabelstring;
        break;
      }

      // optional string tschchartseriesdefaulttrendlinelabelstring = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaulttrendlinelabelstring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tschchartseriesdefaulttrendlinelabelstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tschchartseriesdefaulttrendlinelabelstring().data(), this->tschchartseriesdefaulttrendlinelabelstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_tschchartseriesdefaulttrendlineorder;
        break;
      }

      // optional int32 tschchartseriesdefaulttrendlineorder = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaulttrendlineorder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesdefaulttrendlineorder_)));
          set_has_tschchartseriesdefaulttrendlineorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_tschchartseriesdefaulttrendlineperiod;
        break;
      }

      // optional int32 tschchartseriesdefaulttrendlineperiod = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaulttrendlineperiod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesdefaulttrendlineperiod_)));
          set_has_tschchartseriesdefaulttrendlineperiod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(461)) goto parse_tschchartseriesdefaulttrendlinersquaredoffsetx;
        break;
      }

      // optional float tschchartseriesdefaulttrendlinersquaredoffsetx = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesdefaulttrendlinersquaredoffsetx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesdefaulttrendlinersquaredoffsetx_)));
          set_has_tschchartseriesdefaulttrendlinersquaredoffsetx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(469)) goto parse_tschchartseriesdefaulttrendlinersquaredoffsety;
        break;
      }

      // optional float tschchartseriesdefaulttrendlinersquaredoffsety = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesdefaulttrendlinersquaredoffsety:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesdefaulttrendlinersquaredoffsety_)));
          set_has_tschchartseriesdefaulttrendlinersquaredoffsety();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_tschchartseriesdefaulttrendlineshowequation;
        break;
      }

      // optional bool tschchartseriesdefaulttrendlineshowequation = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaulttrendlineshowequation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesdefaulttrendlineshowequation_)));
          set_has_tschchartseriesdefaulttrendlineshowequation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_tschchartseriesdefaulttrendlineshowlabel;
        break;
      }

      // optional bool tschchartseriesdefaulttrendlineshowlabel = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaulttrendlineshowlabel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesdefaulttrendlineshowlabel_)));
          set_has_tschchartseriesdefaulttrendlineshowlabel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_tschchartseriesdefaulttrendlineshowr2value;
        break;
      }

      // optional bool tschchartseriesdefaulttrendlineshowr2value = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaulttrendlineshowr2value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesdefaulttrendlineshowr2value_)));
          set_has_tschchartseriesdefaulttrendlineshowr2value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_tschchartseriesdefaulttrendlinetype;
        break;
      }

      // optional int32 tschchartseriesdefaulttrendlinetype = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaulttrendlinetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesdefaulttrendlinetype_)));
          set_has_tschchartseriesdefaulttrendlinetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(509)) goto parse_tschchartseriespiewedgeexplosion;
        break;
      }

      // optional float tschchartseriespiewedgeexplosion = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriespiewedgeexplosion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriespiewedgeexplosion_)));
          set_has_tschchartseriespiewedgeexplosion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_tschchartseriesdefaultyaxisordinal;
        break;
      }

      // optional int32 tschchartseriesdefaultyaxisordinal = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaultyaxisordinal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesdefaultyaxisordinal_)));
          set_has_tschchartseriesdefaultyaxisordinal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(520)) goto parse_tschchartseriesbubbleshowserieslabels;
        break;
      }

      // optional bool tschchartseriesbubbleshowserieslabels = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesbubbleshowserieslabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesbubbleshowserieslabels_)));
          set_has_tschchartseriesbubbleshowserieslabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_tschchartseriesbubblevaluelabelsaxis;
        break;
      }

      // optional int32 tschchartseriesbubblevaluelabelsaxis = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesbubblevaluelabelsaxis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesbubblevaluelabelsaxis_)));
          set_has_tschchartseriesbubblevaluelabelsaxis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_tschchartseriesscattershowserieslabels;
        break;
      }

      // optional bool tschchartseriesscattershowserieslabels = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesscattershowserieslabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesscattershowserieslabels_)));
          set_has_tschchartseriesscattershowserieslabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_tschchartseriesscattervaluelabelsaxis;
        break;
      }

      // optional int32 tschchartseriesscattervaluelabelsaxis = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesscattervaluelabelsaxis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesscattervaluelabelsaxis_)));
          set_has_tschchartseriesscattervaluelabelsaxis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(554)) goto parse_tschchartseriesdefault1_0dateformat;
        break;
      }

      // optional .TSK.FormatStructArchive tschchartseriesdefault1_0dateformat = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefault1_0dateformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefault1_0dateformat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_tschchartseriesdefaultdurationformat;
        break;
      }

      // optional .TSK.FormatStructArchive tschchartseriesdefaultdurationformat = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaultdurationformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefaultdurationformat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(570)) goto parse_tschchartseriesdefaultdateformat;
        break;
      }

      // optional .TSK.FormatStructArchive tschchartseriesdefaultdateformat = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaultdateformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefaultdateformat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(786)) goto parse_tschchartseriesdefaultnumberformat;
        break;
      }

      // optional .TSK.FormatStructArchive tschchartseriesdefaultnumberformat = 98;
      case 98: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdefaultnumberformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdefaultnumberformat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(794)) goto parse_tschchartseriespienumberformat;
        break;
      }

      // optional .TSK.FormatStructArchive tschchartseriespienumberformat = 99;
      case 99: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriespienumberformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriespienumberformat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_tschchartseriesdefaultshowlabelsinfront;
        break;
      }

      // optional bool tschchartseriesdefaultshowlabelsinfront = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesdefaultshowlabelsinfront:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesdefaultshowlabelsinfront_)));
          set_has_tschchartseriesdefaultshowlabelsinfront();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(808)) goto parse_tschchartseriesbubbleshowlabelsinfront;
        break;
      }

      // optional bool tschchartseriesbubbleshowlabelsinfront = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesbubbleshowlabelsinfront:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesbubbleshowlabelsinfront_)));
          set_has_tschchartseriesbubbleshowlabelsinfront();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartSeriesNonStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float tschchartseriesbubbleadjustmentscale = 1;
  if (has_tschchartseriesbubbleadjustmentscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->tschchartseriesbubbleadjustmentscale(), output);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedata = 2;
  if (has_tschchartseriesdefaulterrorbarcustomnegativedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tschchartseriesdefaulterrorbarcustomnegativedata(), output);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedatascatterx = 3;
  if (has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tschchartseriesdefaulterrorbarcustomnegativedatascatterx(), output);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedata = 4;
  if (has_tschchartseriesdefaulterrorbarcustompositivedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tschchartseriesdefaulterrorbarcustompositivedata(), output);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedatascatterx = 5;
  if (has_tschchartseriesdefaulterrorbarcustompositivedatascatterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tschchartseriesdefaulterrorbarcustompositivedatascatterx(), output);
  }

  // optional float tschchartseriesdefaulterrorbarfixedvalue = 6;
  if (has_tschchartseriesdefaulterrorbarfixedvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->tschchartseriesdefaulterrorbarfixedvalue(), output);
  }

  // optional float tschchartseriesdefaulterrorbarfixedvaluescatterx = 7;
  if (has_tschchartseriesdefaulterrorbarfixedvaluescatterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->tschchartseriesdefaulterrorbarfixedvaluescatterx(), output);
  }

  // optional float tschchartseriesdefaulterrorbarpercentvalue = 8;
  if (has_tschchartseriesdefaulterrorbarpercentvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->tschchartseriesdefaulterrorbarpercentvalue(), output);
  }

  // optional float tschchartseriesdefaulterrorbarpercentvaluescatterx = 9;
  if (has_tschchartseriesdefaulterrorbarpercentvaluescatterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->tschchartseriesdefaulterrorbarpercentvaluescatterx(), output);
  }

  // optional int32 tschchartseriesdefaulterrorbarsetting = 10;
  if (has_tschchartseriesdefaulterrorbarsetting()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->tschchartseriesdefaulterrorbarsetting(), output);
  }

  // optional int32 tschchartseriesdefaulterrorbarsettingscatterx = 11;
  if (has_tschchartseriesdefaulterrorbarsettingscatterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->tschchartseriesdefaulterrorbarsettingscatterx(), output);
  }

  // optional float tschchartseriesdefaulterrorbarstddevvalue = 12;
  if (has_tschchartseriesdefaulterrorbarstddevvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->tschchartseriesdefaulterrorbarstddevvalue(), output);
  }

  // optional float tschchartseriesdefaulterrorbarstddevvaluescatterx = 13;
  if (has_tschchartseriesdefaulterrorbarstddevvaluescatterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->tschchartseriesdefaulterrorbarstddevvaluescatterx(), output);
  }

  // optional int32 tschchartseriesdefaulterrorbartype = 14;
  if (has_tschchartseriesdefaulterrorbartype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->tschchartseriesdefaulterrorbartype(), output);
  }

  // optional int32 tschchartseriesdefaulterrorbartypescatterx = 15;
  if (has_tschchartseriesdefaulterrorbartypescatterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->tschchartseriesdefaulterrorbartypescatterx(), output);
  }

  // optional float tschchartseriespielabelexplosion = 16;
  if (has_tschchartseriespielabelexplosion()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->tschchartseriespielabelexplosion(), output);
  }

  // optional int32 tschchartseriesbubblelinetype = 17;
  if (has_tschchartseriesbubblelinetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->tschchartseriesbubblelinetype(), output);
  }

  // optional int32 tschchartserieslinelinetype = 18;
  if (has_tschchartserieslinelinetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->tschchartserieslinelinetype(), output);
  }

  // optional int32 tschchartseriesmixedlinelinetype = 19;
  if (has_tschchartseriesmixedlinelinetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->tschchartseriesmixedlinelinetype(), output);
  }

  // optional int32 tschchartseriesscatterlinetype = 20;
  if (has_tschchartseriesscatterlinetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->tschchartseriesscatterlinetype(), output);
  }

  // optional .TSK.FormatStructArchive tschchartseriesdefault1_0numberformat = 21;
  if (has_tschchartseriesdefault1_0numberformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->tschchartseriesdefault1_0numberformat(), output);
  }

  // optional .TSK.FormatStructArchive tschchartseriespie1_0numberformat = 22;
  if (has_tschchartseriespie1_0numberformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->tschchartseriespie1_0numberformat(), output);
  }

  // optional int32 tschchartseriesdefaultnumberformattype = 23;
  if (has_tschchartseriesdefaultnumberformattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->tschchartseriesdefaultnumberformattype(), output);
  }

  // optional int32 tschchartseriespienumberformattype = 24;
  if (has_tschchartseriespienumberformattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->tschchartseriespienumberformattype(), output);
  }

  // optional .TSK.FormatStructArchive tschchartseriesstackedpercentnumberformat = 25;
  if (has_tschchartseriesstackedpercentnumberformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->tschchartseriesstackedpercentnumberformat(), output);
  }

  // optional int32 tschchartseriesdefaultseriestype = 26;
  if (has_tschchartseriesdefaultseriestype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->tschchartseriesdefaultseriestype(), output);
  }

  // optional bool tschchartseriesdefaultshowerrorbar = 27;
  if (has_tschchartseriesdefaultshowerrorbar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->tschchartseriesdefaultshowerrorbar(), output);
  }

  // optional bool tschchartseriesdefaultshowerrorbarscatterx = 28;
  if (has_tschchartseriesdefaultshowerrorbarscatterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->tschchartseriesdefaultshowerrorbarscatterx(), output);
  }

  // optional bool tschchartseriesscattershowline = 29;
  if (has_tschchartseriesscattershowline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->tschchartseriesscattershowline(), output);
  }

  // optional bool tschchartseriesbubbleshownegativedata = 30;
  if (has_tschchartseriesbubbleshownegativedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->tschchartseriesbubbleshownegativedata(), output);
  }

  // optional bool tschchartseriespieshowserieslabels = 31;
  if (has_tschchartseriespieshowserieslabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->tschchartseriespieshowserieslabels(), output);
  }

  // optional bool tschchartseriesareashowsymbol = 32;
  if (has_tschchartseriesareashowsymbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->tschchartseriesareashowsymbol(), output);
  }

  // optional bool tschchartserieslineshowsymbol = 33;
  if (has_tschchartserieslineshowsymbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->tschchartserieslineshowsymbol(), output);
  }

  // optional bool tschchartseriesmixedareashowsymbol = 34;
  if (has_tschchartseriesmixedareashowsymbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->tschchartseriesmixedareashowsymbol(), output);
  }

  // optional bool tschchartseriesmixedlineshowsymbol = 35;
  if (has_tschchartseriesmixedlineshowsymbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->tschchartseriesmixedlineshowsymbol(), output);
  }

  // optional bool tschchartseriesscattershowsymbol = 36;
  if (has_tschchartseriesscattershowsymbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->tschchartseriesscattershowsymbol(), output);
  }

  // optional bool tschchartseriesdefaultshowtrendline = 37;
  if (has_tschchartseriesdefaultshowtrendline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->tschchartseriesdefaultshowtrendline(), output);
  }

  // optional bool tschchartseriesareashowvaluelabels = 38;
  if (has_tschchartseriesareashowvaluelabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(38, this->tschchartseriesareashowvaluelabels(), output);
  }

  // optional bool tschchartseriesbarshowvaluelabels = 39;
  if (has_tschchartseriesbarshowvaluelabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(39, this->tschchartseriesbarshowvaluelabels(), output);
  }

  // optional bool tschchartseriesbubbleshowvaluelabels = 40;
  if (has_tschchartseriesbubbleshowvaluelabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->tschchartseriesbubbleshowvaluelabels(), output);
  }

  // optional bool tschchartseriesdefaultshowvaluelabels = 41;
  if (has_tschchartseriesdefaultshowvaluelabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->tschchartseriesdefaultshowvaluelabels(), output);
  }

  // optional bool tschchartserieslineshowvaluelabels = 42;
  if (has_tschchartserieslineshowvaluelabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->tschchartserieslineshowvaluelabels(), output);
  }

  // optional bool tschchartseriesmixedshowvaluelabels = 43;
  if (has_tschchartseriesmixedshowvaluelabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(43, this->tschchartseriesmixedshowvaluelabels(), output);
  }

  // optional bool tschchartseriespieshowvaluelabels = 44;
  if (has_tschchartseriespieshowvaluelabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(44, this->tschchartseriespieshowvaluelabels(), output);
  }

  // optional bool tschchartseriesscattershowvaluelabels = 45;
  if (has_tschchartseriesscattershowvaluelabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(45, this->tschchartseriesscattershowvaluelabels(), output);
  }

  // optional int32 tschchartseriesbubblesizedimension = 46;
  if (has_tschchartseriesbubblesizedimension()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->tschchartseriesbubblesizedimension(), output);
  }

  // optional int32 tschchartseriesareasymboltype = 47;
  if (has_tschchartseriesareasymboltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->tschchartseriesareasymboltype(), output);
  }

  // optional int32 tschchartserieslinesymboltype = 48;
  if (has_tschchartserieslinesymboltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->tschchartserieslinesymboltype(), output);
  }

  // optional int32 tschchartseriesmixedareasymboltype = 49;
  if (has_tschchartseriesmixedareasymboltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->tschchartseriesmixedareasymboltype(), output);
  }

  // optional int32 tschchartseriesmixedlinesymboltype = 50;
  if (has_tschchartseriesmixedlinesymboltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->tschchartseriesmixedlinesymboltype(), output);
  }

  // optional int32 tschchartseriesscattersymboltype = 51;
  if (has_tschchartseriesscattersymboltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->tschchartseriesscattersymboltype(), output);
  }

  // optional float tschchartseriesdefaulttrendlineequationoffsetx = 52;
  if (has_tschchartseriesdefaulttrendlineequationoffsetx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(52, this->tschchartseriesdefaulttrendlineequationoffsetx(), output);
  }

  // optional float tschchartseriesdefaulttrendlineequationoffsety = 53;
  if (has_tschchartseriesdefaulttrendlineequationoffsety()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(53, this->tschchartseriesdefaulttrendlineequationoffsety(), output);
  }

  // optional string tschchartseriesdefaulttrendlinelabelstring = 54;
  if (has_tschchartseriesdefaulttrendlinelabelstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tschchartseriesdefaulttrendlinelabelstring().data(), this->tschchartseriesdefaulttrendlinelabelstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      54, this->tschchartseriesdefaulttrendlinelabelstring(), output);
  }

  // optional int32 tschchartseriesdefaulttrendlineorder = 55;
  if (has_tschchartseriesdefaulttrendlineorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->tschchartseriesdefaulttrendlineorder(), output);
  }

  // optional int32 tschchartseriesdefaulttrendlineperiod = 56;
  if (has_tschchartseriesdefaulttrendlineperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->tschchartseriesdefaulttrendlineperiod(), output);
  }

  // optional float tschchartseriesdefaulttrendlinersquaredoffsetx = 57;
  if (has_tschchartseriesdefaulttrendlinersquaredoffsetx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(57, this->tschchartseriesdefaulttrendlinersquaredoffsetx(), output);
  }

  // optional float tschchartseriesdefaulttrendlinersquaredoffsety = 58;
  if (has_tschchartseriesdefaulttrendlinersquaredoffsety()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(58, this->tschchartseriesdefaulttrendlinersquaredoffsety(), output);
  }

  // optional bool tschchartseriesdefaulttrendlineshowequation = 59;
  if (has_tschchartseriesdefaulttrendlineshowequation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(59, this->tschchartseriesdefaulttrendlineshowequation(), output);
  }

  // optional bool tschchartseriesdefaulttrendlineshowlabel = 60;
  if (has_tschchartseriesdefaulttrendlineshowlabel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(60, this->tschchartseriesdefaulttrendlineshowlabel(), output);
  }

  // optional bool tschchartseriesdefaulttrendlineshowr2value = 61;
  if (has_tschchartseriesdefaulttrendlineshowr2value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(61, this->tschchartseriesdefaulttrendlineshowr2value(), output);
  }

  // optional int32 tschchartseriesdefaulttrendlinetype = 62;
  if (has_tschchartseriesdefaulttrendlinetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->tschchartseriesdefaulttrendlinetype(), output);
  }

  // optional float tschchartseriespiewedgeexplosion = 63;
  if (has_tschchartseriespiewedgeexplosion()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(63, this->tschchartseriespiewedgeexplosion(), output);
  }

  // optional int32 tschchartseriesdefaultyaxisordinal = 64;
  if (has_tschchartseriesdefaultyaxisordinal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->tschchartseriesdefaultyaxisordinal(), output);
  }

  // optional bool tschchartseriesbubbleshowserieslabels = 65;
  if (has_tschchartseriesbubbleshowserieslabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(65, this->tschchartseriesbubbleshowserieslabels(), output);
  }

  // optional int32 tschchartseriesbubblevaluelabelsaxis = 66;
  if (has_tschchartseriesbubblevaluelabelsaxis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(66, this->tschchartseriesbubblevaluelabelsaxis(), output);
  }

  // optional bool tschchartseriesscattershowserieslabels = 67;
  if (has_tschchartseriesscattershowserieslabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(67, this->tschchartseriesscattershowserieslabels(), output);
  }

  // optional int32 tschchartseriesscattervaluelabelsaxis = 68;
  if (has_tschchartseriesscattervaluelabelsaxis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(68, this->tschchartseriesscattervaluelabelsaxis(), output);
  }

  // optional .TSK.FormatStructArchive tschchartseriesdefault1_0dateformat = 69;
  if (has_tschchartseriesdefault1_0dateformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      69, this->tschchartseriesdefault1_0dateformat(), output);
  }

  // optional .TSK.FormatStructArchive tschchartseriesdefaultdurationformat = 70;
  if (has_tschchartseriesdefaultdurationformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      70, this->tschchartseriesdefaultdurationformat(), output);
  }

  // optional .TSK.FormatStructArchive tschchartseriesdefaultdateformat = 71;
  if (has_tschchartseriesdefaultdateformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      71, this->tschchartseriesdefaultdateformat(), output);
  }

  // optional .TSK.FormatStructArchive tschchartseriesdefaultnumberformat = 98;
  if (has_tschchartseriesdefaultnumberformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      98, this->tschchartseriesdefaultnumberformat(), output);
  }

  // optional .TSK.FormatStructArchive tschchartseriespienumberformat = 99;
  if (has_tschchartseriespienumberformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      99, this->tschchartseriespienumberformat(), output);
  }

  // optional bool tschchartseriesdefaultshowlabelsinfront = 100;
  if (has_tschchartseriesdefaultshowlabelsinfront()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(100, this->tschchartseriesdefaultshowlabelsinfront(), output);
  }

  // optional bool tschchartseriesbubbleshowlabelsinfront = 101;
  if (has_tschchartseriesbubbleshowlabelsinfront()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(101, this->tschchartseriesbubbleshowlabelsinfront(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartSeriesNonStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float tschchartseriesbubbleadjustmentscale = 1;
  if (has_tschchartseriesbubbleadjustmentscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->tschchartseriesbubbleadjustmentscale(), target);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedata = 2;
  if (has_tschchartseriesdefaulterrorbarcustomnegativedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tschchartseriesdefaulterrorbarcustomnegativedata(), target);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedatascatterx = 3;
  if (has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tschchartseriesdefaulterrorbarcustomnegativedatascatterx(), target);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedata = 4;
  if (has_tschchartseriesdefaulterrorbarcustompositivedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tschchartseriesdefaulterrorbarcustompositivedata(), target);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedatascatterx = 5;
  if (has_tschchartseriesdefaulterrorbarcustompositivedatascatterx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tschchartseriesdefaulterrorbarcustompositivedatascatterx(), target);
  }

  // optional float tschchartseriesdefaulterrorbarfixedvalue = 6;
  if (has_tschchartseriesdefaulterrorbarfixedvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->tschchartseriesdefaulterrorbarfixedvalue(), target);
  }

  // optional float tschchartseriesdefaulterrorbarfixedvaluescatterx = 7;
  if (has_tschchartseriesdefaulterrorbarfixedvaluescatterx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->tschchartseriesdefaulterrorbarfixedvaluescatterx(), target);
  }

  // optional float tschchartseriesdefaulterrorbarpercentvalue = 8;
  if (has_tschchartseriesdefaulterrorbarpercentvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->tschchartseriesdefaulterrorbarpercentvalue(), target);
  }

  // optional float tschchartseriesdefaulterrorbarpercentvaluescatterx = 9;
  if (has_tschchartseriesdefaulterrorbarpercentvaluescatterx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->tschchartseriesdefaulterrorbarpercentvaluescatterx(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbarsetting = 10;
  if (has_tschchartseriesdefaulterrorbarsetting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->tschchartseriesdefaulterrorbarsetting(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbarsettingscatterx = 11;
  if (has_tschchartseriesdefaulterrorbarsettingscatterx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->tschchartseriesdefaulterrorbarsettingscatterx(), target);
  }

  // optional float tschchartseriesdefaulterrorbarstddevvalue = 12;
  if (has_tschchartseriesdefaulterrorbarstddevvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->tschchartseriesdefaulterrorbarstddevvalue(), target);
  }

  // optional float tschchartseriesdefaulterrorbarstddevvaluescatterx = 13;
  if (has_tschchartseriesdefaulterrorbarstddevvaluescatterx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->tschchartseriesdefaulterrorbarstddevvaluescatterx(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbartype = 14;
  if (has_tschchartseriesdefaulterrorbartype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->tschchartseriesdefaulterrorbartype(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbartypescatterx = 15;
  if (has_tschchartseriesdefaulterrorbartypescatterx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->tschchartseriesdefaulterrorbartypescatterx(), target);
  }

  // optional float tschchartseriespielabelexplosion = 16;
  if (has_tschchartseriespielabelexplosion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->tschchartseriespielabelexplosion(), target);
  }

  // optional int32 tschchartseriesbubblelinetype = 17;
  if (has_tschchartseriesbubblelinetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->tschchartseriesbubblelinetype(), target);
  }

  // optional int32 tschchartserieslinelinetype = 18;
  if (has_tschchartserieslinelinetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->tschchartserieslinelinetype(), target);
  }

  // optional int32 tschchartseriesmixedlinelinetype = 19;
  if (has_tschchartseriesmixedlinelinetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->tschchartseriesmixedlinelinetype(), target);
  }

  // optional int32 tschchartseriesscatterlinetype = 20;
  if (has_tschchartseriesscatterlinetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->tschchartseriesscatterlinetype(), target);
  }

  // optional .TSK.FormatStructArchive tschchartseriesdefault1_0numberformat = 21;
  if (has_tschchartseriesdefault1_0numberformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->tschchartseriesdefault1_0numberformat(), target);
  }

  // optional .TSK.FormatStructArchive tschchartseriespie1_0numberformat = 22;
  if (has_tschchartseriespie1_0numberformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->tschchartseriespie1_0numberformat(), target);
  }

  // optional int32 tschchartseriesdefaultnumberformattype = 23;
  if (has_tschchartseriesdefaultnumberformattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->tschchartseriesdefaultnumberformattype(), target);
  }

  // optional int32 tschchartseriespienumberformattype = 24;
  if (has_tschchartseriespienumberformattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->tschchartseriespienumberformattype(), target);
  }

  // optional .TSK.FormatStructArchive tschchartseriesstackedpercentnumberformat = 25;
  if (has_tschchartseriesstackedpercentnumberformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->tschchartseriesstackedpercentnumberformat(), target);
  }

  // optional int32 tschchartseriesdefaultseriestype = 26;
  if (has_tschchartseriesdefaultseriestype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->tschchartseriesdefaultseriestype(), target);
  }

  // optional bool tschchartseriesdefaultshowerrorbar = 27;
  if (has_tschchartseriesdefaultshowerrorbar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->tschchartseriesdefaultshowerrorbar(), target);
  }

  // optional bool tschchartseriesdefaultshowerrorbarscatterx = 28;
  if (has_tschchartseriesdefaultshowerrorbarscatterx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->tschchartseriesdefaultshowerrorbarscatterx(), target);
  }

  // optional bool tschchartseriesscattershowline = 29;
  if (has_tschchartseriesscattershowline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->tschchartseriesscattershowline(), target);
  }

  // optional bool tschchartseriesbubbleshownegativedata = 30;
  if (has_tschchartseriesbubbleshownegativedata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->tschchartseriesbubbleshownegativedata(), target);
  }

  // optional bool tschchartseriespieshowserieslabels = 31;
  if (has_tschchartseriespieshowserieslabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->tschchartseriespieshowserieslabels(), target);
  }

  // optional bool tschchartseriesareashowsymbol = 32;
  if (has_tschchartseriesareashowsymbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->tschchartseriesareashowsymbol(), target);
  }

  // optional bool tschchartserieslineshowsymbol = 33;
  if (has_tschchartserieslineshowsymbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->tschchartserieslineshowsymbol(), target);
  }

  // optional bool tschchartseriesmixedareashowsymbol = 34;
  if (has_tschchartseriesmixedareashowsymbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->tschchartseriesmixedareashowsymbol(), target);
  }

  // optional bool tschchartseriesmixedlineshowsymbol = 35;
  if (has_tschchartseriesmixedlineshowsymbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->tschchartseriesmixedlineshowsymbol(), target);
  }

  // optional bool tschchartseriesscattershowsymbol = 36;
  if (has_tschchartseriesscattershowsymbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->tschchartseriesscattershowsymbol(), target);
  }

  // optional bool tschchartseriesdefaultshowtrendline = 37;
  if (has_tschchartseriesdefaultshowtrendline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->tschchartseriesdefaultshowtrendline(), target);
  }

  // optional bool tschchartseriesareashowvaluelabels = 38;
  if (has_tschchartseriesareashowvaluelabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(38, this->tschchartseriesareashowvaluelabels(), target);
  }

  // optional bool tschchartseriesbarshowvaluelabels = 39;
  if (has_tschchartseriesbarshowvaluelabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(39, this->tschchartseriesbarshowvaluelabels(), target);
  }

  // optional bool tschchartseriesbubbleshowvaluelabels = 40;
  if (has_tschchartseriesbubbleshowvaluelabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->tschchartseriesbubbleshowvaluelabels(), target);
  }

  // optional bool tschchartseriesdefaultshowvaluelabels = 41;
  if (has_tschchartseriesdefaultshowvaluelabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->tschchartseriesdefaultshowvaluelabels(), target);
  }

  // optional bool tschchartserieslineshowvaluelabels = 42;
  if (has_tschchartserieslineshowvaluelabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(42, this->tschchartserieslineshowvaluelabels(), target);
  }

  // optional bool tschchartseriesmixedshowvaluelabels = 43;
  if (has_tschchartseriesmixedshowvaluelabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(43, this->tschchartseriesmixedshowvaluelabels(), target);
  }

  // optional bool tschchartseriespieshowvaluelabels = 44;
  if (has_tschchartseriespieshowvaluelabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(44, this->tschchartseriespieshowvaluelabels(), target);
  }

  // optional bool tschchartseriesscattershowvaluelabels = 45;
  if (has_tschchartseriesscattershowvaluelabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(45, this->tschchartseriesscattershowvaluelabels(), target);
  }

  // optional int32 tschchartseriesbubblesizedimension = 46;
  if (has_tschchartseriesbubblesizedimension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->tschchartseriesbubblesizedimension(), target);
  }

  // optional int32 tschchartseriesareasymboltype = 47;
  if (has_tschchartseriesareasymboltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(47, this->tschchartseriesareasymboltype(), target);
  }

  // optional int32 tschchartserieslinesymboltype = 48;
  if (has_tschchartserieslinesymboltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->tschchartserieslinesymboltype(), target);
  }

  // optional int32 tschchartseriesmixedareasymboltype = 49;
  if (has_tschchartseriesmixedareasymboltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->tschchartseriesmixedareasymboltype(), target);
  }

  // optional int32 tschchartseriesmixedlinesymboltype = 50;
  if (has_tschchartseriesmixedlinesymboltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->tschchartseriesmixedlinesymboltype(), target);
  }

  // optional int32 tschchartseriesscattersymboltype = 51;
  if (has_tschchartseriesscattersymboltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->tschchartseriesscattersymboltype(), target);
  }

  // optional float tschchartseriesdefaulttrendlineequationoffsetx = 52;
  if (has_tschchartseriesdefaulttrendlineequationoffsetx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(52, this->tschchartseriesdefaulttrendlineequationoffsetx(), target);
  }

  // optional float tschchartseriesdefaulttrendlineequationoffsety = 53;
  if (has_tschchartseriesdefaulttrendlineequationoffsety()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(53, this->tschchartseriesdefaulttrendlineequationoffsety(), target);
  }

  // optional string tschchartseriesdefaulttrendlinelabelstring = 54;
  if (has_tschchartseriesdefaulttrendlinelabelstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tschchartseriesdefaulttrendlinelabelstring().data(), this->tschchartseriesdefaulttrendlinelabelstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        54, this->tschchartseriesdefaulttrendlinelabelstring(), target);
  }

  // optional int32 tschchartseriesdefaulttrendlineorder = 55;
  if (has_tschchartseriesdefaulttrendlineorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(55, this->tschchartseriesdefaulttrendlineorder(), target);
  }

  // optional int32 tschchartseriesdefaulttrendlineperiod = 56;
  if (has_tschchartseriesdefaulttrendlineperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->tschchartseriesdefaulttrendlineperiod(), target);
  }

  // optional float tschchartseriesdefaulttrendlinersquaredoffsetx = 57;
  if (has_tschchartseriesdefaulttrendlinersquaredoffsetx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(57, this->tschchartseriesdefaulttrendlinersquaredoffsetx(), target);
  }

  // optional float tschchartseriesdefaulttrendlinersquaredoffsety = 58;
  if (has_tschchartseriesdefaulttrendlinersquaredoffsety()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(58, this->tschchartseriesdefaulttrendlinersquaredoffsety(), target);
  }

  // optional bool tschchartseriesdefaulttrendlineshowequation = 59;
  if (has_tschchartseriesdefaulttrendlineshowequation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(59, this->tschchartseriesdefaulttrendlineshowequation(), target);
  }

  // optional bool tschchartseriesdefaulttrendlineshowlabel = 60;
  if (has_tschchartseriesdefaulttrendlineshowlabel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(60, this->tschchartseriesdefaulttrendlineshowlabel(), target);
  }

  // optional bool tschchartseriesdefaulttrendlineshowr2value = 61;
  if (has_tschchartseriesdefaulttrendlineshowr2value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(61, this->tschchartseriesdefaulttrendlineshowr2value(), target);
  }

  // optional int32 tschchartseriesdefaulttrendlinetype = 62;
  if (has_tschchartseriesdefaulttrendlinetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->tschchartseriesdefaulttrendlinetype(), target);
  }

  // optional float tschchartseriespiewedgeexplosion = 63;
  if (has_tschchartseriespiewedgeexplosion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(63, this->tschchartseriespiewedgeexplosion(), target);
  }

  // optional int32 tschchartseriesdefaultyaxisordinal = 64;
  if (has_tschchartseriesdefaultyaxisordinal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->tschchartseriesdefaultyaxisordinal(), target);
  }

  // optional bool tschchartseriesbubbleshowserieslabels = 65;
  if (has_tschchartseriesbubbleshowserieslabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(65, this->tschchartseriesbubbleshowserieslabels(), target);
  }

  // optional int32 tschchartseriesbubblevaluelabelsaxis = 66;
  if (has_tschchartseriesbubblevaluelabelsaxis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(66, this->tschchartseriesbubblevaluelabelsaxis(), target);
  }

  // optional bool tschchartseriesscattershowserieslabels = 67;
  if (has_tschchartseriesscattershowserieslabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(67, this->tschchartseriesscattershowserieslabels(), target);
  }

  // optional int32 tschchartseriesscattervaluelabelsaxis = 68;
  if (has_tschchartseriesscattervaluelabelsaxis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(68, this->tschchartseriesscattervaluelabelsaxis(), target);
  }

  // optional .TSK.FormatStructArchive tschchartseriesdefault1_0dateformat = 69;
  if (has_tschchartseriesdefault1_0dateformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        69, this->tschchartseriesdefault1_0dateformat(), target);
  }

  // optional .TSK.FormatStructArchive tschchartseriesdefaultdurationformat = 70;
  if (has_tschchartseriesdefaultdurationformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        70, this->tschchartseriesdefaultdurationformat(), target);
  }

  // optional .TSK.FormatStructArchive tschchartseriesdefaultdateformat = 71;
  if (has_tschchartseriesdefaultdateformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        71, this->tschchartseriesdefaultdateformat(), target);
  }

  // optional .TSK.FormatStructArchive tschchartseriesdefaultnumberformat = 98;
  if (has_tschchartseriesdefaultnumberformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        98, this->tschchartseriesdefaultnumberformat(), target);
  }

  // optional .TSK.FormatStructArchive tschchartseriespienumberformat = 99;
  if (has_tschchartseriespienumberformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        99, this->tschchartseriespienumberformat(), target);
  }

  // optional bool tschchartseriesdefaultshowlabelsinfront = 100;
  if (has_tschchartseriesdefaultshowlabelsinfront()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(100, this->tschchartseriesdefaultshowlabelsinfront(), target);
  }

  // optional bool tschchartseriesbubbleshowlabelsinfront = 101;
  if (has_tschchartseriesbubbleshowlabelsinfront()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(101, this->tschchartseriesbubbleshowlabelsinfront(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartSeriesNonStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float tschchartseriesbubbleadjustmentscale = 1;
    if (has_tschchartseriesbubbleadjustmentscale()) {
      total_size += 1 + 4;
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedata = 2;
    if (has_tschchartseriesdefaulterrorbarcustomnegativedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefaulterrorbarcustomnegativedata());
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedatascatterx = 3;
    if (has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefaulterrorbarcustomnegativedatascatterx());
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedata = 4;
    if (has_tschchartseriesdefaulterrorbarcustompositivedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefaulterrorbarcustompositivedata());
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedatascatterx = 5;
    if (has_tschchartseriesdefaulterrorbarcustompositivedatascatterx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefaulterrorbarcustompositivedatascatterx());
    }

    // optional float tschchartseriesdefaulterrorbarfixedvalue = 6;
    if (has_tschchartseriesdefaulterrorbarfixedvalue()) {
      total_size += 1 + 4;
    }

    // optional float tschchartseriesdefaulterrorbarfixedvaluescatterx = 7;
    if (has_tschchartseriesdefaulterrorbarfixedvaluescatterx()) {
      total_size += 1 + 4;
    }

    // optional float tschchartseriesdefaulterrorbarpercentvalue = 8;
    if (has_tschchartseriesdefaulterrorbarpercentvalue()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float tschchartseriesdefaulterrorbarpercentvaluescatterx = 9;
    if (has_tschchartseriesdefaulterrorbarpercentvaluescatterx()) {
      total_size += 1 + 4;
    }

    // optional int32 tschchartseriesdefaulterrorbarsetting = 10;
    if (has_tschchartseriesdefaulterrorbarsetting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesdefaulterrorbarsetting());
    }

    // optional int32 tschchartseriesdefaulterrorbarsettingscatterx = 11;
    if (has_tschchartseriesdefaulterrorbarsettingscatterx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesdefaulterrorbarsettingscatterx());
    }

    // optional float tschchartseriesdefaulterrorbarstddevvalue = 12;
    if (has_tschchartseriesdefaulterrorbarstddevvalue()) {
      total_size += 1 + 4;
    }

    // optional float tschchartseriesdefaulterrorbarstddevvaluescatterx = 13;
    if (has_tschchartseriesdefaulterrorbarstddevvaluescatterx()) {
      total_size += 1 + 4;
    }

    // optional int32 tschchartseriesdefaulterrorbartype = 14;
    if (has_tschchartseriesdefaulterrorbartype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesdefaulterrorbartype());
    }

    // optional int32 tschchartseriesdefaulterrorbartypescatterx = 15;
    if (has_tschchartseriesdefaulterrorbartypescatterx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesdefaulterrorbartypescatterx());
    }

    // optional float tschchartseriespielabelexplosion = 16;
    if (has_tschchartseriespielabelexplosion()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 tschchartseriesbubblelinetype = 17;
    if (has_tschchartseriesbubblelinetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesbubblelinetype());
    }

    // optional int32 tschchartserieslinelinetype = 18;
    if (has_tschchartserieslinelinetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartserieslinelinetype());
    }

    // optional int32 tschchartseriesmixedlinelinetype = 19;
    if (has_tschchartseriesmixedlinelinetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesmixedlinelinetype());
    }

    // optional int32 tschchartseriesscatterlinetype = 20;
    if (has_tschchartseriesscatterlinetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesscatterlinetype());
    }

    // optional .TSK.FormatStructArchive tschchartseriesdefault1_0numberformat = 21;
    if (has_tschchartseriesdefault1_0numberformat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefault1_0numberformat());
    }

    // optional .TSK.FormatStructArchive tschchartseriesdefaultnumberformat = 98;
    if (has_tschchartseriesdefaultnumberformat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefaultnumberformat());
    }

    // optional .TSK.FormatStructArchive tschchartseriesdefault1_0dateformat = 69;
    if (has_tschchartseriesdefault1_0dateformat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefault1_0dateformat());
    }

    // optional .TSK.FormatStructArchive tschchartseriesdefaultdurationformat = 70;
    if (has_tschchartseriesdefaultdurationformat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefaultdurationformat());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .TSK.FormatStructArchive tschchartseriesdefaultdateformat = 71;
    if (has_tschchartseriesdefaultdateformat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdefaultdateformat());
    }

    // optional .TSK.FormatStructArchive tschchartseriespie1_0numberformat = 22;
    if (has_tschchartseriespie1_0numberformat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriespie1_0numberformat());
    }

    // optional .TSK.FormatStructArchive tschchartseriespienumberformat = 99;
    if (has_tschchartseriespienumberformat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriespienumberformat());
    }

    // optional int32 tschchartseriesdefaultnumberformattype = 23;
    if (has_tschchartseriesdefaultnumberformattype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesdefaultnumberformattype());
    }

    // optional int32 tschchartseriespienumberformattype = 24;
    if (has_tschchartseriespienumberformattype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriespienumberformattype());
    }

    // optional .TSK.FormatStructArchive tschchartseriesstackedpercentnumberformat = 25;
    if (has_tschchartseriesstackedpercentnumberformat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesstackedpercentnumberformat());
    }

    // optional int32 tschchartseriesdefaultseriestype = 26;
    if (has_tschchartseriesdefaultseriestype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesdefaultseriestype());
    }

    // optional bool tschchartseriesdefaultshowerrorbar = 27;
    if (has_tschchartseriesdefaultshowerrorbar()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional bool tschchartseriesdefaultshowerrorbarscatterx = 28;
    if (has_tschchartseriesdefaultshowerrorbarscatterx()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesscattershowline = 29;
    if (has_tschchartseriesscattershowline()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesbubbleshownegativedata = 30;
    if (has_tschchartseriesbubbleshownegativedata()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriespieshowserieslabels = 31;
    if (has_tschchartseriespieshowserieslabels()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesareashowsymbol = 32;
    if (has_tschchartseriesareashowsymbol()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartserieslineshowsymbol = 33;
    if (has_tschchartserieslineshowsymbol()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedareashowsymbol = 34;
    if (has_tschchartseriesmixedareashowsymbol()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedlineshowsymbol = 35;
    if (has_tschchartseriesmixedlineshowsymbol()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional bool tschchartseriesscattershowsymbol = 36;
    if (has_tschchartseriesscattershowsymbol()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaultshowtrendline = 37;
    if (has_tschchartseriesdefaultshowtrendline()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesareashowvaluelabels = 38;
    if (has_tschchartseriesareashowvaluelabels()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesbarshowvaluelabels = 39;
    if (has_tschchartseriesbarshowvaluelabels()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesbubbleshowvaluelabels = 40;
    if (has_tschchartseriesbubbleshowvaluelabels()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaultshowvaluelabels = 41;
    if (has_tschchartseriesdefaultshowvaluelabels()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartserieslineshowvaluelabels = 42;
    if (has_tschchartserieslineshowvaluelabels()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedshowvaluelabels = 43;
    if (has_tschchartseriesmixedshowvaluelabels()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional bool tschchartseriespieshowvaluelabels = 44;
    if (has_tschchartseriespieshowvaluelabels()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesscattershowvaluelabels = 45;
    if (has_tschchartseriesscattershowvaluelabels()) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartseriesbubblesizedimension = 46;
    if (has_tschchartseriesbubblesizedimension()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesbubblesizedimension());
    }

    // optional int32 tschchartseriesareasymboltype = 47;
    if (has_tschchartseriesareasymboltype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesareasymboltype());
    }

    // optional int32 tschchartserieslinesymboltype = 48;
    if (has_tschchartserieslinesymboltype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartserieslinesymboltype());
    }

    // optional int32 tschchartseriesmixedareasymboltype = 49;
    if (has_tschchartseriesmixedareasymboltype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesmixedareasymboltype());
    }

    // optional int32 tschchartseriesmixedlinesymboltype = 50;
    if (has_tschchartseriesmixedlinesymboltype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesmixedlinesymboltype());
    }

    // optional int32 tschchartseriesscattersymboltype = 51;
    if (has_tschchartseriesscattersymboltype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesscattersymboltype());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional float tschchartseriesdefaulttrendlineequationoffsetx = 52;
    if (has_tschchartseriesdefaulttrendlineequationoffsetx()) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulttrendlineequationoffsety = 53;
    if (has_tschchartseriesdefaulttrendlineequationoffsety()) {
      total_size += 2 + 4;
    }

    // optional string tschchartseriesdefaulttrendlinelabelstring = 54;
    if (has_tschchartseriesdefaulttrendlinelabelstring()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tschchartseriesdefaulttrendlinelabelstring());
    }

    // optional int32 tschchartseriesdefaulttrendlineorder = 55;
    if (has_tschchartseriesdefaulttrendlineorder()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesdefaulttrendlineorder());
    }

    // optional int32 tschchartseriesdefaulttrendlineperiod = 56;
    if (has_tschchartseriesdefaulttrendlineperiod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesdefaulttrendlineperiod());
    }

    // optional float tschchartseriesdefaulttrendlinersquaredoffsetx = 57;
    if (has_tschchartseriesdefaulttrendlinersquaredoffsetx()) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulttrendlinersquaredoffsety = 58;
    if (has_tschchartseriesdefaulttrendlinersquaredoffsety()) {
      total_size += 2 + 4;
    }

    // optional bool tschchartseriesdefaulttrendlineshowequation = 59;
    if (has_tschchartseriesdefaulttrendlineshowequation()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional bool tschchartseriesdefaulttrendlineshowlabel = 60;
    if (has_tschchartseriesdefaulttrendlineshowlabel()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaulttrendlineshowr2value = 61;
    if (has_tschchartseriesdefaulttrendlineshowr2value()) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartseriesdefaulttrendlinetype = 62;
    if (has_tschchartseriesdefaulttrendlinetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesdefaulttrendlinetype());
    }

    // optional float tschchartseriespiewedgeexplosion = 63;
    if (has_tschchartseriespiewedgeexplosion()) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesdefaultyaxisordinal = 64;
    if (has_tschchartseriesdefaultyaxisordinal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesdefaultyaxisordinal());
    }

    // optional bool tschchartseriesbubbleshowserieslabels = 65;
    if (has_tschchartseriesbubbleshowserieslabels()) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartseriesbubblevaluelabelsaxis = 66;
    if (has_tschchartseriesbubblevaluelabelsaxis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesbubblevaluelabelsaxis());
    }

    // optional bool tschchartseriesscattershowserieslabels = 67;
    if (has_tschchartseriesscattershowserieslabels()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional int32 tschchartseriesscattervaluelabelsaxis = 68;
    if (has_tschchartseriesscattervaluelabelsaxis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesscattervaluelabelsaxis());
    }

    // optional bool tschchartseriesdefaultshowlabelsinfront = 100;
    if (has_tschchartseriesdefaultshowlabelsinfront()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesbubbleshowlabelsinfront = 101;
    if (has_tschchartseriesbubbleshowlabelsinfront()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartSeriesNonStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartSeriesNonStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartSeriesNonStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartSeriesNonStyleArchive::MergeFrom(const ChartSeriesNonStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tschchartseriesbubbleadjustmentscale()) {
      set_tschchartseriesbubbleadjustmentscale(from.tschchartseriesbubbleadjustmentscale());
    }
    if (from.has_tschchartseriesdefaulterrorbarcustomnegativedata()) {
      mutable_tschchartseriesdefaulterrorbarcustomnegativedata()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(from.tschchartseriesdefaulterrorbarcustomnegativedata());
    }
    if (from.has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx()) {
      mutable_tschchartseriesdefaulterrorbarcustomnegativedatascatterx()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(from.tschchartseriesdefaulterrorbarcustomnegativedatascatterx());
    }
    if (from.has_tschchartseriesdefaulterrorbarcustompositivedata()) {
      mutable_tschchartseriesdefaulterrorbarcustompositivedata()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(from.tschchartseriesdefaulterrorbarcustompositivedata());
    }
    if (from.has_tschchartseriesdefaulterrorbarcustompositivedatascatterx()) {
      mutable_tschchartseriesdefaulterrorbarcustompositivedatascatterx()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(from.tschchartseriesdefaulterrorbarcustompositivedatascatterx());
    }
    if (from.has_tschchartseriesdefaulterrorbarfixedvalue()) {
      set_tschchartseriesdefaulterrorbarfixedvalue(from.tschchartseriesdefaulterrorbarfixedvalue());
    }
    if (from.has_tschchartseriesdefaulterrorbarfixedvaluescatterx()) {
      set_tschchartseriesdefaulterrorbarfixedvaluescatterx(from.tschchartseriesdefaulterrorbarfixedvaluescatterx());
    }
    if (from.has_tschchartseriesdefaulterrorbarpercentvalue()) {
      set_tschchartseriesdefaulterrorbarpercentvalue(from.tschchartseriesdefaulterrorbarpercentvalue());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tschchartseriesdefaulterrorbarpercentvaluescatterx()) {
      set_tschchartseriesdefaulterrorbarpercentvaluescatterx(from.tschchartseriesdefaulterrorbarpercentvaluescatterx());
    }
    if (from.has_tschchartseriesdefaulterrorbarsetting()) {
      set_tschchartseriesdefaulterrorbarsetting(from.tschchartseriesdefaulterrorbarsetting());
    }
    if (from.has_tschchartseriesdefaulterrorbarsettingscatterx()) {
      set_tschchartseriesdefaulterrorbarsettingscatterx(from.tschchartseriesdefaulterrorbarsettingscatterx());
    }
    if (from.has_tschchartseriesdefaulterrorbarstddevvalue()) {
      set_tschchartseriesdefaulterrorbarstddevvalue(from.tschchartseriesdefaulterrorbarstddevvalue());
    }
    if (from.has_tschchartseriesdefaulterrorbarstddevvaluescatterx()) {
      set_tschchartseriesdefaulterrorbarstddevvaluescatterx(from.tschchartseriesdefaulterrorbarstddevvaluescatterx());
    }
    if (from.has_tschchartseriesdefaulterrorbartype()) {
      set_tschchartseriesdefaulterrorbartype(from.tschchartseriesdefaulterrorbartype());
    }
    if (from.has_tschchartseriesdefaulterrorbartypescatterx()) {
      set_tschchartseriesdefaulterrorbartypescatterx(from.tschchartseriesdefaulterrorbartypescatterx());
    }
    if (from.has_tschchartseriespielabelexplosion()) {
      set_tschchartseriespielabelexplosion(from.tschchartseriespielabelexplosion());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tschchartseriesbubblelinetype()) {
      set_tschchartseriesbubblelinetype(from.tschchartseriesbubblelinetype());
    }
    if (from.has_tschchartserieslinelinetype()) {
      set_tschchartserieslinelinetype(from.tschchartserieslinelinetype());
    }
    if (from.has_tschchartseriesmixedlinelinetype()) {
      set_tschchartseriesmixedlinelinetype(from.tschchartseriesmixedlinelinetype());
    }
    if (from.has_tschchartseriesscatterlinetype()) {
      set_tschchartseriesscatterlinetype(from.tschchartseriesscatterlinetype());
    }
    if (from.has_tschchartseriesdefault1_0numberformat()) {
      mutable_tschchartseriesdefault1_0numberformat()->::TSK::FormatStructArchive::MergeFrom(from.tschchartseriesdefault1_0numberformat());
    }
    if (from.has_tschchartseriesdefaultnumberformat()) {
      mutable_tschchartseriesdefaultnumberformat()->::TSK::FormatStructArchive::MergeFrom(from.tschchartseriesdefaultnumberformat());
    }
    if (from.has_tschchartseriesdefault1_0dateformat()) {
      mutable_tschchartseriesdefault1_0dateformat()->::TSK::FormatStructArchive::MergeFrom(from.tschchartseriesdefault1_0dateformat());
    }
    if (from.has_tschchartseriesdefaultdurationformat()) {
      mutable_tschchartseriesdefaultdurationformat()->::TSK::FormatStructArchive::MergeFrom(from.tschchartseriesdefaultdurationformat());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_tschchartseriesdefaultdateformat()) {
      mutable_tschchartseriesdefaultdateformat()->::TSK::FormatStructArchive::MergeFrom(from.tschchartseriesdefaultdateformat());
    }
    if (from.has_tschchartseriespie1_0numberformat()) {
      mutable_tschchartseriespie1_0numberformat()->::TSK::FormatStructArchive::MergeFrom(from.tschchartseriespie1_0numberformat());
    }
    if (from.has_tschchartseriespienumberformat()) {
      mutable_tschchartseriespienumberformat()->::TSK::FormatStructArchive::MergeFrom(from.tschchartseriespienumberformat());
    }
    if (from.has_tschchartseriesdefaultnumberformattype()) {
      set_tschchartseriesdefaultnumberformattype(from.tschchartseriesdefaultnumberformattype());
    }
    if (from.has_tschchartseriespienumberformattype()) {
      set_tschchartseriespienumberformattype(from.tschchartseriespienumberformattype());
    }
    if (from.has_tschchartseriesstackedpercentnumberformat()) {
      mutable_tschchartseriesstackedpercentnumberformat()->::TSK::FormatStructArchive::MergeFrom(from.tschchartseriesstackedpercentnumberformat());
    }
    if (from.has_tschchartseriesdefaultseriestype()) {
      set_tschchartseriesdefaultseriestype(from.tschchartseriesdefaultseriestype());
    }
    if (from.has_tschchartseriesdefaultshowerrorbar()) {
      set_tschchartseriesdefaultshowerrorbar(from.tschchartseriesdefaultshowerrorbar());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_tschchartseriesdefaultshowerrorbarscatterx()) {
      set_tschchartseriesdefaultshowerrorbarscatterx(from.tschchartseriesdefaultshowerrorbarscatterx());
    }
    if (from.has_tschchartseriesscattershowline()) {
      set_tschchartseriesscattershowline(from.tschchartseriesscattershowline());
    }
    if (from.has_tschchartseriesbubbleshownegativedata()) {
      set_tschchartseriesbubbleshownegativedata(from.tschchartseriesbubbleshownegativedata());
    }
    if (from.has_tschchartseriespieshowserieslabels()) {
      set_tschchartseriespieshowserieslabels(from.tschchartseriespieshowserieslabels());
    }
    if (from.has_tschchartseriesareashowsymbol()) {
      set_tschchartseriesareashowsymbol(from.tschchartseriesareashowsymbol());
    }
    if (from.has_tschchartserieslineshowsymbol()) {
      set_tschchartserieslineshowsymbol(from.tschchartserieslineshowsymbol());
    }
    if (from.has_tschchartseriesmixedareashowsymbol()) {
      set_tschchartseriesmixedareashowsymbol(from.tschchartseriesmixedareashowsymbol());
    }
    if (from.has_tschchartseriesmixedlineshowsymbol()) {
      set_tschchartseriesmixedlineshowsymbol(from.tschchartseriesmixedlineshowsymbol());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_tschchartseriesscattershowsymbol()) {
      set_tschchartseriesscattershowsymbol(from.tschchartseriesscattershowsymbol());
    }
    if (from.has_tschchartseriesdefaultshowtrendline()) {
      set_tschchartseriesdefaultshowtrendline(from.tschchartseriesdefaultshowtrendline());
    }
    if (from.has_tschchartseriesareashowvaluelabels()) {
      set_tschchartseriesareashowvaluelabels(from.tschchartseriesareashowvaluelabels());
    }
    if (from.has_tschchartseriesbarshowvaluelabels()) {
      set_tschchartseriesbarshowvaluelabels(from.tschchartseriesbarshowvaluelabels());
    }
    if (from.has_tschchartseriesbubbleshowvaluelabels()) {
      set_tschchartseriesbubbleshowvaluelabels(from.tschchartseriesbubbleshowvaluelabels());
    }
    if (from.has_tschchartseriesdefaultshowvaluelabels()) {
      set_tschchartseriesdefaultshowvaluelabels(from.tschchartseriesdefaultshowvaluelabels());
    }
    if (from.has_tschchartserieslineshowvaluelabels()) {
      set_tschchartserieslineshowvaluelabels(from.tschchartserieslineshowvaluelabels());
    }
    if (from.has_tschchartseriesmixedshowvaluelabels()) {
      set_tschchartseriesmixedshowvaluelabels(from.tschchartseriesmixedshowvaluelabels());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_tschchartseriespieshowvaluelabels()) {
      set_tschchartseriespieshowvaluelabels(from.tschchartseriespieshowvaluelabels());
    }
    if (from.has_tschchartseriesscattershowvaluelabels()) {
      set_tschchartseriesscattershowvaluelabels(from.tschchartseriesscattershowvaluelabels());
    }
    if (from.has_tschchartseriesbubblesizedimension()) {
      set_tschchartseriesbubblesizedimension(from.tschchartseriesbubblesizedimension());
    }
    if (from.has_tschchartseriesareasymboltype()) {
      set_tschchartseriesareasymboltype(from.tschchartseriesareasymboltype());
    }
    if (from.has_tschchartserieslinesymboltype()) {
      set_tschchartserieslinesymboltype(from.tschchartserieslinesymboltype());
    }
    if (from.has_tschchartseriesmixedareasymboltype()) {
      set_tschchartseriesmixedareasymboltype(from.tschchartseriesmixedareasymboltype());
    }
    if (from.has_tschchartseriesmixedlinesymboltype()) {
      set_tschchartseriesmixedlinesymboltype(from.tschchartseriesmixedlinesymboltype());
    }
    if (from.has_tschchartseriesscattersymboltype()) {
      set_tschchartseriesscattersymboltype(from.tschchartseriesscattersymboltype());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_tschchartseriesdefaulttrendlineequationoffsetx()) {
      set_tschchartseriesdefaulttrendlineequationoffsetx(from.tschchartseriesdefaulttrendlineequationoffsetx());
    }
    if (from.has_tschchartseriesdefaulttrendlineequationoffsety()) {
      set_tschchartseriesdefaulttrendlineequationoffsety(from.tschchartseriesdefaulttrendlineequationoffsety());
    }
    if (from.has_tschchartseriesdefaulttrendlinelabelstring()) {
      set_tschchartseriesdefaulttrendlinelabelstring(from.tschchartseriesdefaulttrendlinelabelstring());
    }
    if (from.has_tschchartseriesdefaulttrendlineorder()) {
      set_tschchartseriesdefaulttrendlineorder(from.tschchartseriesdefaulttrendlineorder());
    }
    if (from.has_tschchartseriesdefaulttrendlineperiod()) {
      set_tschchartseriesdefaulttrendlineperiod(from.tschchartseriesdefaulttrendlineperiod());
    }
    if (from.has_tschchartseriesdefaulttrendlinersquaredoffsetx()) {
      set_tschchartseriesdefaulttrendlinersquaredoffsetx(from.tschchartseriesdefaulttrendlinersquaredoffsetx());
    }
    if (from.has_tschchartseriesdefaulttrendlinersquaredoffsety()) {
      set_tschchartseriesdefaulttrendlinersquaredoffsety(from.tschchartseriesdefaulttrendlinersquaredoffsety());
    }
    if (from.has_tschchartseriesdefaulttrendlineshowequation()) {
      set_tschchartseriesdefaulttrendlineshowequation(from.tschchartseriesdefaulttrendlineshowequation());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_tschchartseriesdefaulttrendlineshowlabel()) {
      set_tschchartseriesdefaulttrendlineshowlabel(from.tschchartseriesdefaulttrendlineshowlabel());
    }
    if (from.has_tschchartseriesdefaulttrendlineshowr2value()) {
      set_tschchartseriesdefaulttrendlineshowr2value(from.tschchartseriesdefaulttrendlineshowr2value());
    }
    if (from.has_tschchartseriesdefaulttrendlinetype()) {
      set_tschchartseriesdefaulttrendlinetype(from.tschchartseriesdefaulttrendlinetype());
    }
    if (from.has_tschchartseriespiewedgeexplosion()) {
      set_tschchartseriespiewedgeexplosion(from.tschchartseriespiewedgeexplosion());
    }
    if (from.has_tschchartseriesdefaultyaxisordinal()) {
      set_tschchartseriesdefaultyaxisordinal(from.tschchartseriesdefaultyaxisordinal());
    }
    if (from.has_tschchartseriesbubbleshowserieslabels()) {
      set_tschchartseriesbubbleshowserieslabels(from.tschchartseriesbubbleshowserieslabels());
    }
    if (from.has_tschchartseriesbubblevaluelabelsaxis()) {
      set_tschchartseriesbubblevaluelabelsaxis(from.tschchartseriesbubblevaluelabelsaxis());
    }
    if (from.has_tschchartseriesscattershowserieslabels()) {
      set_tschchartseriesscattershowserieslabels(from.tschchartseriesscattershowserieslabels());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_tschchartseriesscattervaluelabelsaxis()) {
      set_tschchartseriesscattervaluelabelsaxis(from.tschchartseriesscattervaluelabelsaxis());
    }
    if (from.has_tschchartseriesdefaultshowlabelsinfront()) {
      set_tschchartseriesdefaultshowlabelsinfront(from.tschchartseriesdefaultshowlabelsinfront());
    }
    if (from.has_tschchartseriesbubbleshowlabelsinfront()) {
      set_tschchartseriesbubbleshowlabelsinfront(from.tschchartseriesbubbleshowlabelsinfront());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartSeriesNonStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartSeriesNonStyleArchive::CopyFrom(const ChartSeriesNonStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSeriesNonStyleArchive::IsInitialized() const {

  if (has_tschchartseriesdefault1_0numberformat()) {
    if (!this->tschchartseriesdefault1_0numberformat().IsInitialized()) return false;
  }
  if (has_tschchartseriesdefaultnumberformat()) {
    if (!this->tschchartseriesdefaultnumberformat().IsInitialized()) return false;
  }
  if (has_tschchartseriesdefault1_0dateformat()) {
    if (!this->tschchartseriesdefault1_0dateformat().IsInitialized()) return false;
  }
  if (has_tschchartseriesdefaultdurationformat()) {
    if (!this->tschchartseriesdefaultdurationformat().IsInitialized()) return false;
  }
  if (has_tschchartseriesdefaultdateformat()) {
    if (!this->tschchartseriesdefaultdateformat().IsInitialized()) return false;
  }
  if (has_tschchartseriespie1_0numberformat()) {
    if (!this->tschchartseriespie1_0numberformat().IsInitialized()) return false;
  }
  if (has_tschchartseriespienumberformat()) {
    if (!this->tschchartseriespienumberformat().IsInitialized()) return false;
  }
  if (has_tschchartseriesstackedpercentnumberformat()) {
    if (!this->tschchartseriesstackedpercentnumberformat().IsInitialized()) return false;
  }
  return true;
}

void ChartSeriesNonStyleArchive::Swap(ChartSeriesNonStyleArchive* other) {
  if (other != this) {
    std::swap(tschchartseriesbubbleadjustmentscale_, other->tschchartseriesbubbleadjustmentscale_);
    std::swap(tschchartseriesdefaulterrorbarcustomnegativedata_, other->tschchartseriesdefaulterrorbarcustomnegativedata_);
    std::swap(tschchartseriesdefaulterrorbarcustomnegativedatascatterx_, other->tschchartseriesdefaulterrorbarcustomnegativedatascatterx_);
    std::swap(tschchartseriesdefaulterrorbarcustompositivedata_, other->tschchartseriesdefaulterrorbarcustompositivedata_);
    std::swap(tschchartseriesdefaulterrorbarcustompositivedatascatterx_, other->tschchartseriesdefaulterrorbarcustompositivedatascatterx_);
    std::swap(tschchartseriesdefaulterrorbarfixedvalue_, other->tschchartseriesdefaulterrorbarfixedvalue_);
    std::swap(tschchartseriesdefaulterrorbarfixedvaluescatterx_, other->tschchartseriesdefaulterrorbarfixedvaluescatterx_);
    std::swap(tschchartseriesdefaulterrorbarpercentvalue_, other->tschchartseriesdefaulterrorbarpercentvalue_);
    std::swap(tschchartseriesdefaulterrorbarpercentvaluescatterx_, other->tschchartseriesdefaulterrorbarpercentvaluescatterx_);
    std::swap(tschchartseriesdefaulterrorbarsetting_, other->tschchartseriesdefaulterrorbarsetting_);
    std::swap(tschchartseriesdefaulterrorbarsettingscatterx_, other->tschchartseriesdefaulterrorbarsettingscatterx_);
    std::swap(tschchartseriesdefaulterrorbarstddevvalue_, other->tschchartseriesdefaulterrorbarstddevvalue_);
    std::swap(tschchartseriesdefaulterrorbarstddevvaluescatterx_, other->tschchartseriesdefaulterrorbarstddevvaluescatterx_);
    std::swap(tschchartseriesdefaulterrorbartype_, other->tschchartseriesdefaulterrorbartype_);
    std::swap(tschchartseriesdefaulterrorbartypescatterx_, other->tschchartseriesdefaulterrorbartypescatterx_);
    std::swap(tschchartseriespielabelexplosion_, other->tschchartseriespielabelexplosion_);
    std::swap(tschchartseriesbubblelinetype_, other->tschchartseriesbubblelinetype_);
    std::swap(tschchartserieslinelinetype_, other->tschchartserieslinelinetype_);
    std::swap(tschchartseriesmixedlinelinetype_, other->tschchartseriesmixedlinelinetype_);
    std::swap(tschchartseriesscatterlinetype_, other->tschchartseriesscatterlinetype_);
    std::swap(tschchartseriesdefault1_0numberformat_, other->tschchartseriesdefault1_0numberformat_);
    std::swap(tschchartseriesdefaultnumberformat_, other->tschchartseriesdefaultnumberformat_);
    std::swap(tschchartseriesdefault1_0dateformat_, other->tschchartseriesdefault1_0dateformat_);
    std::swap(tschchartseriesdefaultdurationformat_, other->tschchartseriesdefaultdurationformat_);
    std::swap(tschchartseriesdefaultdateformat_, other->tschchartseriesdefaultdateformat_);
    std::swap(tschchartseriespie1_0numberformat_, other->tschchartseriespie1_0numberformat_);
    std::swap(tschchartseriespienumberformat_, other->tschchartseriespienumberformat_);
    std::swap(tschchartseriesdefaultnumberformattype_, other->tschchartseriesdefaultnumberformattype_);
    std::swap(tschchartseriespienumberformattype_, other->tschchartseriespienumberformattype_);
    std::swap(tschchartseriesstackedpercentnumberformat_, other->tschchartseriesstackedpercentnumberformat_);
    std::swap(tschchartseriesdefaultseriestype_, other->tschchartseriesdefaultseriestype_);
    std::swap(tschchartseriesdefaultshowerrorbar_, other->tschchartseriesdefaultshowerrorbar_);
    std::swap(tschchartseriesdefaultshowerrorbarscatterx_, other->tschchartseriesdefaultshowerrorbarscatterx_);
    std::swap(tschchartseriesscattershowline_, other->tschchartseriesscattershowline_);
    std::swap(tschchartseriesbubbleshownegativedata_, other->tschchartseriesbubbleshownegativedata_);
    std::swap(tschchartseriespieshowserieslabels_, other->tschchartseriespieshowserieslabels_);
    std::swap(tschchartseriesareashowsymbol_, other->tschchartseriesareashowsymbol_);
    std::swap(tschchartserieslineshowsymbol_, other->tschchartserieslineshowsymbol_);
    std::swap(tschchartseriesmixedareashowsymbol_, other->tschchartseriesmixedareashowsymbol_);
    std::swap(tschchartseriesmixedlineshowsymbol_, other->tschchartseriesmixedlineshowsymbol_);
    std::swap(tschchartseriesscattershowsymbol_, other->tschchartseriesscattershowsymbol_);
    std::swap(tschchartseriesdefaultshowtrendline_, other->tschchartseriesdefaultshowtrendline_);
    std::swap(tschchartseriesareashowvaluelabels_, other->tschchartseriesareashowvaluelabels_);
    std::swap(tschchartseriesbarshowvaluelabels_, other->tschchartseriesbarshowvaluelabels_);
    std::swap(tschchartseriesbubbleshowvaluelabels_, other->tschchartseriesbubbleshowvaluelabels_);
    std::swap(tschchartseriesdefaultshowvaluelabels_, other->tschchartseriesdefaultshowvaluelabels_);
    std::swap(tschchartserieslineshowvaluelabels_, other->tschchartserieslineshowvaluelabels_);
    std::swap(tschchartseriesmixedshowvaluelabels_, other->tschchartseriesmixedshowvaluelabels_);
    std::swap(tschchartseriespieshowvaluelabels_, other->tschchartseriespieshowvaluelabels_);
    std::swap(tschchartseriesscattershowvaluelabels_, other->tschchartseriesscattershowvaluelabels_);
    std::swap(tschchartseriesbubblesizedimension_, other->tschchartseriesbubblesizedimension_);
    std::swap(tschchartseriesareasymboltype_, other->tschchartseriesareasymboltype_);
    std::swap(tschchartserieslinesymboltype_, other->tschchartserieslinesymboltype_);
    std::swap(tschchartseriesmixedareasymboltype_, other->tschchartseriesmixedareasymboltype_);
    std::swap(tschchartseriesmixedlinesymboltype_, other->tschchartseriesmixedlinesymboltype_);
    std::swap(tschchartseriesscattersymboltype_, other->tschchartseriesscattersymboltype_);
    std::swap(tschchartseriesdefaulttrendlineequationoffsetx_, other->tschchartseriesdefaulttrendlineequationoffsetx_);
    std::swap(tschchartseriesdefaulttrendlineequationoffsety_, other->tschchartseriesdefaulttrendlineequationoffsety_);
    std::swap(tschchartseriesdefaulttrendlinelabelstring_, other->tschchartseriesdefaulttrendlinelabelstring_);
    std::swap(tschchartseriesdefaulttrendlineorder_, other->tschchartseriesdefaulttrendlineorder_);
    std::swap(tschchartseriesdefaulttrendlineperiod_, other->tschchartseriesdefaulttrendlineperiod_);
    std::swap(tschchartseriesdefaulttrendlinersquaredoffsetx_, other->tschchartseriesdefaulttrendlinersquaredoffsetx_);
    std::swap(tschchartseriesdefaulttrendlinersquaredoffsety_, other->tschchartseriesdefaulttrendlinersquaredoffsety_);
    std::swap(tschchartseriesdefaulttrendlineshowequation_, other->tschchartseriesdefaulttrendlineshowequation_);
    std::swap(tschchartseriesdefaulttrendlineshowlabel_, other->tschchartseriesdefaulttrendlineshowlabel_);
    std::swap(tschchartseriesdefaulttrendlineshowr2value_, other->tschchartseriesdefaulttrendlineshowr2value_);
    std::swap(tschchartseriesdefaulttrendlinetype_, other->tschchartseriesdefaulttrendlinetype_);
    std::swap(tschchartseriespiewedgeexplosion_, other->tschchartseriespiewedgeexplosion_);
    std::swap(tschchartseriesdefaultyaxisordinal_, other->tschchartseriesdefaultyaxisordinal_);
    std::swap(tschchartseriesbubbleshowserieslabels_, other->tschchartseriesbubbleshowserieslabels_);
    std::swap(tschchartseriesbubblevaluelabelsaxis_, other->tschchartseriesbubblevaluelabelsaxis_);
    std::swap(tschchartseriesscattershowserieslabels_, other->tschchartseriesscattershowserieslabels_);
    std::swap(tschchartseriesscattervaluelabelsaxis_, other->tschchartseriesscattervaluelabelsaxis_);
    std::swap(tschchartseriesdefaultshowlabelsinfront_, other->tschchartseriesdefaultshowlabelsinfront_);
    std::swap(tschchartseriesbubbleshowlabelsinfront_, other->tschchartseriesbubbleshowlabelsinfront_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartSeriesNonStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartSeriesNonStyleArchive_descriptor_;
  metadata.reflection = ChartSeriesNonStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartGenericPropertyMapArchive::kTschchartinfo3DbarshapeFieldNumber;
const int ChartGenericPropertyMapArchive::kTschchartinfo3DbeveledgesFieldNumber;
const int ChartGenericPropertyMapArchive::kTschchartinfo3DintersetdepthgapFieldNumber;
const int ChartGenericPropertyMapArchive::kTschchartinfo3DrotationFieldNumber;
const int ChartGenericPropertyMapArchive::kTschchartinfo3DscaleFieldNumber;
const int ChartGenericPropertyMapArchive::kTschchartinfo3DviewportFieldNumber;
const int ChartGenericPropertyMapArchive::kTschchartinfopiestartangleFieldNumber;
const int ChartGenericPropertyMapArchive::kTschchartinfoshowlegendFieldNumber;
const int ChartGenericPropertyMapArchive::kTschchartinfoshowtitleFieldNumber;
const int ChartGenericPropertyMapArchive::kTschchartinfoskiphiddendataFieldNumber;
const int ChartGenericPropertyMapArchive::kTschchartinfotitleFieldNumber;
const int ChartGenericPropertyMapArchive::kTschchartinfodatasetnamelocationFieldNumber;
const int ChartGenericPropertyMapArchive::kTschchartinfomultidatacontroltypeFieldNumber;
const int ChartGenericPropertyMapArchive::kTschchartinfo3DchartopacityFieldNumber;
const int ChartGenericPropertyMapArchive::kTschchartinfo3DlightingpackageFieldNumber;
const int ChartGenericPropertyMapArchive::kTschchartinfobackgroundfillFieldNumber;
const int ChartGenericPropertyMapArchive::kTschchartinfobackgroundstrokeFieldNumber;
const int ChartGenericPropertyMapArchive::kTschchartinfoborderopacityFieldNumber;
const int ChartGenericPropertyMapArchive::kTschchartinfobordershadowFieldNumber;
const int ChartGenericPropertyMapArchive::kTschchartinfoborderstrokeFieldNumber;
const int ChartGenericPropertyMapArchive::kTschchartinfocombinelayersFieldNumber;
const int ChartGenericPropertyMapArchive::kTschchartinfogridbackgroundfillFieldNumber;
const int ChartGenericPropertyMapArchive::kTschchartinfogridbackgroundopacityFieldNumber;
const int ChartGenericPropertyMapArchive::kTschchartinfointerbargapFieldNumber;
const int ChartGenericPropertyMapArchive::kTschchartinfointersetgapFieldNumber;
const int ChartGenericPropertyMapArchive::kTschchartinfoshowborderFieldNumber;
const int ChartGenericPropertyMapArchive::kTschchartinfotitlecolorFieldNumber;
const int ChartGenericPropertyMapArchive::kTschchartinfotitleparagraphstyleindexFieldNumber;
const int ChartGenericPropertyMapArchive::kTschchartinfodatasetnameparagraphstyleindexFieldNumber;
#endif  // !_MSC_VER

ChartGenericPropertyMapArchive::ChartGenericPropertyMapArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartGenericPropertyMapArchive::InitAsDefaultInstance() {
  tschchartinfo3drotation_ = const_cast< ::TSCH::Chart3DVectorArchive*>(&::TSCH::Chart3DVectorArchive::default_instance());
  tschchartinfo3dscale_ = const_cast< ::TSCH::Chart3DVectorArchive*>(&::TSCH::Chart3DVectorArchive::default_instance());
  tschchartinfo3dviewport_ = const_cast< ::TSCH::Chart3DVectorArchive*>(&::TSCH::Chart3DVectorArchive::default_instance());
  tschchartinfo3dlightingpackage_ = const_cast< ::TSCH::Chart3DLightingPackageArchive*>(&::TSCH::Chart3DLightingPackageArchive::default_instance());
  tschchartinfobackgroundfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartinfobackgroundstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartinfobordershadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartinfoborderstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartinfogridbackgroundfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartinfotitlecolor_ = const_cast< ::TSP::Color*>(&::TSP::Color::default_instance());
}

ChartGenericPropertyMapArchive::ChartGenericPropertyMapArchive(const ChartGenericPropertyMapArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartGenericPropertyMapArchive::SharedCtor() {
  _cached_size_ = 0;
  tschchartinfo3dbarshape_ = 0;
  tschchartinfo3dbeveledges_ = false;
  tschchartinfo3dintersetdepthgap_ = 0;
  tschchartinfo3drotation_ = NULL;
  tschchartinfo3dscale_ = NULL;
  tschchartinfo3dviewport_ = NULL;
  tschchartinfopiestartangle_ = 0;
  tschchartinfoshowlegend_ = false;
  tschchartinfoshowtitle_ = false;
  tschchartinfoskiphiddendata_ = false;
  tschchartinfotitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tschchartinfodatasetnamelocation_ = 0;
  tschchartinfomultidatacontroltype_ = 0;
  tschchartinfo3dchartopacity_ = 0;
  tschchartinfo3dlightingpackage_ = NULL;
  tschchartinfobackgroundfill_ = NULL;
  tschchartinfobackgroundstroke_ = NULL;
  tschchartinfoborderopacity_ = 0;
  tschchartinfobordershadow_ = NULL;
  tschchartinfoborderstroke_ = NULL;
  tschchartinfocombinelayers_ = false;
  tschchartinfogridbackgroundfill_ = NULL;
  tschchartinfogridbackgroundopacity_ = 0;
  tschchartinfointerbargap_ = 0;
  tschchartinfointersetgap_ = 0;
  tschchartinfoshowborder_ = false;
  tschchartinfotitlecolor_ = NULL;
  tschchartinfotitleparagraphstyleindex_ = 0;
  tschchartinfodatasetnameparagraphstyleindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartGenericPropertyMapArchive::~ChartGenericPropertyMapArchive() {
  SharedDtor();
}

void ChartGenericPropertyMapArchive::SharedDtor() {
  if (tschchartinfotitle_ != &::google::protobuf::internal::kEmptyString) {
    delete tschchartinfotitle_;
  }
  if (this != default_instance_) {
    delete tschchartinfo3drotation_;
    delete tschchartinfo3dscale_;
    delete tschchartinfo3dviewport_;
    delete tschchartinfo3dlightingpackage_;
    delete tschchartinfobackgroundfill_;
    delete tschchartinfobackgroundstroke_;
    delete tschchartinfobordershadow_;
    delete tschchartinfoborderstroke_;
    delete tschchartinfogridbackgroundfill_;
    delete tschchartinfotitlecolor_;
  }
}

void ChartGenericPropertyMapArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartGenericPropertyMapArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartGenericPropertyMapArchive_descriptor_;
}

const ChartGenericPropertyMapArchive& ChartGenericPropertyMapArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eGEN_2eproto();
  return *default_instance_;
}

ChartGenericPropertyMapArchive* ChartGenericPropertyMapArchive::default_instance_ = NULL;

ChartGenericPropertyMapArchive* ChartGenericPropertyMapArchive::New() const {
  return new ChartGenericPropertyMapArchive;
}

void ChartGenericPropertyMapArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tschchartinfo3dbarshape_ = 0;
    tschchartinfo3dbeveledges_ = false;
    tschchartinfo3dintersetdepthgap_ = 0;
    if (has_tschchartinfo3drotation()) {
      if (tschchartinfo3drotation_ != NULL) tschchartinfo3drotation_->::TSCH::Chart3DVectorArchive::Clear();
    }
    if (has_tschchartinfo3dscale()) {
      if (tschchartinfo3dscale_ != NULL) tschchartinfo3dscale_->::TSCH::Chart3DVectorArchive::Clear();
    }
    if (has_tschchartinfo3dviewport()) {
      if (tschchartinfo3dviewport_ != NULL) tschchartinfo3dviewport_->::TSCH::Chart3DVectorArchive::Clear();
    }
    tschchartinfopiestartangle_ = 0;
    tschchartinfoshowlegend_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    tschchartinfoshowtitle_ = false;
    tschchartinfoskiphiddendata_ = false;
    if (has_tschchartinfotitle()) {
      if (tschchartinfotitle_ != &::google::protobuf::internal::kEmptyString) {
        tschchartinfotitle_->clear();
      }
    }
    tschchartinfodatasetnamelocation_ = 0;
    tschchartinfomultidatacontroltype_ = 0;
    tschchartinfo3dchartopacity_ = 0;
    if (has_tschchartinfo3dlightingpackage()) {
      if (tschchartinfo3dlightingpackage_ != NULL) tschchartinfo3dlightingpackage_->::TSCH::Chart3DLightingPackageArchive::Clear();
    }
    if (has_tschchartinfobackgroundfill()) {
      if (tschchartinfobackgroundfill_ != NULL) tschchartinfobackgroundfill_->::TSD::FillArchive::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_tschchartinfobackgroundstroke()) {
      if (tschchartinfobackgroundstroke_ != NULL) tschchartinfobackgroundstroke_->::TSD::StrokeArchive::Clear();
    }
    tschchartinfoborderopacity_ = 0;
    if (has_tschchartinfobordershadow()) {
      if (tschchartinfobordershadow_ != NULL) tschchartinfobordershadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartinfoborderstroke()) {
      if (tschchartinfoborderstroke_ != NULL) tschchartinfoborderstroke_->::TSD::StrokeArchive::Clear();
    }
    tschchartinfocombinelayers_ = false;
    if (has_tschchartinfogridbackgroundfill()) {
      if (tschchartinfogridbackgroundfill_ != NULL) tschchartinfogridbackgroundfill_->::TSD::FillArchive::Clear();
    }
    tschchartinfogridbackgroundopacity_ = 0;
    tschchartinfointerbargap_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    tschchartinfointersetgap_ = 0;
    tschchartinfoshowborder_ = false;
    if (has_tschchartinfotitlecolor()) {
      if (tschchartinfotitlecolor_ != NULL) tschchartinfotitlecolor_->::TSP::Color::Clear();
    }
    tschchartinfotitleparagraphstyleindex_ = 0;
    tschchartinfodatasetnameparagraphstyleindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartGenericPropertyMapArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tschchartinfo3dbarshape = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartinfo3dbarshape_)));
          set_has_tschchartinfo3dbarshape();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tschchartinfo3dbeveledges;
        break;
      }

      // optional bool tschchartinfo3dbeveledges = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfo3dbeveledges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartinfo3dbeveledges_)));
          set_has_tschchartinfo3dbeveledges();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_tschchartinfo3dintersetdepthgap;
        break;
      }

      // optional float tschchartinfo3dintersetdepthgap = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartinfo3dintersetdepthgap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartinfo3dintersetdepthgap_)));
          set_has_tschchartinfo3dintersetdepthgap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tschchartinfo3drotation;
        break;
      }

      // optional .TSCH.Chart3DVectorArchive tschchartinfo3drotation = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfo3drotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfo3drotation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tschchartinfo3dscale;
        break;
      }

      // optional .TSCH.Chart3DVectorArchive tschchartinfo3dscale = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfo3dscale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfo3dscale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_tschchartinfo3dviewport;
        break;
      }

      // optional .TSCH.Chart3DVectorArchive tschchartinfo3dviewport = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfo3dviewport:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfo3dviewport()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_tschchartinfopiestartangle;
        break;
      }

      // optional float tschchartinfopiestartangle = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartinfopiestartangle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartinfopiestartangle_)));
          set_has_tschchartinfopiestartangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_tschchartinfoshowlegend;
        break;
      }

      // optional bool tschchartinfoshowlegend = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfoshowlegend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartinfoshowlegend_)));
          set_has_tschchartinfoshowlegend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_tschchartinfoshowtitle;
        break;
      }

      // optional bool tschchartinfoshowtitle = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfoshowtitle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartinfoshowtitle_)));
          set_has_tschchartinfoshowtitle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_tschchartinfoskiphiddendata;
        break;
      }

      // optional bool tschchartinfoskiphiddendata = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfoskiphiddendata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartinfoskiphiddendata_)));
          set_has_tschchartinfoskiphiddendata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_tschchartinfotitle;
        break;
      }

      // optional string tschchartinfotitle = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfotitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tschchartinfotitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tschchartinfotitle().data(), this->tschchartinfotitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_tschchartinfodatasetnamelocation;
        break;
      }

      // optional int32 tschchartinfodatasetnamelocation = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfodatasetnamelocation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartinfodatasetnamelocation_)));
          set_has_tschchartinfodatasetnamelocation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tschchartinfomultidatacontroltype;
        break;
      }

      // optional int32 tschchartinfomultidatacontroltype = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfomultidatacontroltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartinfomultidatacontroltype_)));
          set_has_tschchartinfomultidatacontroltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_tschchartinfo3dchartopacity;
        break;
      }

      // optional float tschchartinfo3dchartopacity = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartinfo3dchartopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartinfo3dchartopacity_)));
          set_has_tschchartinfo3dchartopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_tschchartinfo3dlightingpackage;
        break;
      }

      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfo3dlightingpackage = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfo3dlightingpackage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfo3dlightingpackage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_tschchartinfobackgroundfill;
        break;
      }

      // optional .TSD.FillArchive tschchartinfobackgroundfill = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfobackgroundfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfobackgroundfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_tschchartinfobackgroundstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartinfobackgroundstroke = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfobackgroundstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfobackgroundstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_tschchartinfoborderopacity;
        break;
      }

      // optional float tschchartinfoborderopacity = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartinfoborderopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartinfoborderopacity_)));
          set_has_tschchartinfoborderopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_tschchartinfobordershadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartinfobordershadow = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfobordershadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfobordershadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_tschchartinfoborderstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartinfoborderstroke = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfoborderstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfoborderstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_tschchartinfocombinelayers;
        break;
      }

      // optional bool tschchartinfocombinelayers = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfocombinelayers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartinfocombinelayers_)));
          set_has_tschchartinfocombinelayers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_tschchartinfogridbackgroundfill;
        break;
      }

      // optional .TSD.FillArchive tschchartinfogridbackgroundfill = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfogridbackgroundfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfogridbackgroundfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(189)) goto parse_tschchartinfogridbackgroundopacity;
        break;
      }

      // optional float tschchartinfogridbackgroundopacity = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartinfogridbackgroundopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartinfogridbackgroundopacity_)));
          set_has_tschchartinfogridbackgroundopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_tschchartinfointerbargap;
        break;
      }

      // optional float tschchartinfointerbargap = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartinfointerbargap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartinfointerbargap_)));
          set_has_tschchartinfointerbargap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_tschchartinfointersetgap;
        break;
      }

      // optional float tschchartinfointersetgap = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartinfointersetgap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartinfointersetgap_)));
          set_has_tschchartinfointersetgap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_tschchartinfoshowborder;
        break;
      }

      // optional bool tschchartinfoshowborder = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfoshowborder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartinfoshowborder_)));
          set_has_tschchartinfoshowborder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_tschchartinfotitlecolor;
        break;
      }

      // optional .TSP.Color tschchartinfotitlecolor = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartinfotitlecolor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartinfotitlecolor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_tschchartinfotitleparagraphstyleindex;
        break;
      }

      // optional int32 tschchartinfotitleparagraphstyleindex = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfotitleparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartinfotitleparagraphstyleindex_)));
          set_has_tschchartinfotitleparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_tschchartinfodatasetnameparagraphstyleindex;
        break;
      }

      // optional int32 tschchartinfodatasetnameparagraphstyleindex = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartinfodatasetnameparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartinfodatasetnameparagraphstyleindex_)));
          set_has_tschchartinfodatasetnameparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartGenericPropertyMapArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tschchartinfo3dbarshape = 1;
  if (has_tschchartinfo3dbarshape()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tschchartinfo3dbarshape(), output);
  }

  // optional bool tschchartinfo3dbeveledges = 2;
  if (has_tschchartinfo3dbeveledges()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->tschchartinfo3dbeveledges(), output);
  }

  // optional float tschchartinfo3dintersetdepthgap = 3;
  if (has_tschchartinfo3dintersetdepthgap()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->tschchartinfo3dintersetdepthgap(), output);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfo3drotation = 4;
  if (has_tschchartinfo3drotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tschchartinfo3drotation(), output);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfo3dscale = 5;
  if (has_tschchartinfo3dscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tschchartinfo3dscale(), output);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfo3dviewport = 6;
  if (has_tschchartinfo3dviewport()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->tschchartinfo3dviewport(), output);
  }

  // optional float tschchartinfopiestartangle = 7;
  if (has_tschchartinfopiestartangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->tschchartinfopiestartangle(), output);
  }

  // optional bool tschchartinfoshowlegend = 8;
  if (has_tschchartinfoshowlegend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->tschchartinfoshowlegend(), output);
  }

  // optional bool tschchartinfoshowtitle = 9;
  if (has_tschchartinfoshowtitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->tschchartinfoshowtitle(), output);
  }

  // optional bool tschchartinfoskiphiddendata = 10;
  if (has_tschchartinfoskiphiddendata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->tschchartinfoskiphiddendata(), output);
  }

  // optional string tschchartinfotitle = 11;
  if (has_tschchartinfotitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tschchartinfotitle().data(), this->tschchartinfotitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->tschchartinfotitle(), output);
  }

  // optional int32 tschchartinfodatasetnamelocation = 12;
  if (has_tschchartinfodatasetnamelocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->tschchartinfodatasetnamelocation(), output);
  }

  // optional int32 tschchartinfomultidatacontroltype = 13;
  if (has_tschchartinfomultidatacontroltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->tschchartinfomultidatacontroltype(), output);
  }

  // optional float tschchartinfo3dchartopacity = 14;
  if (has_tschchartinfo3dchartopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->tschchartinfo3dchartopacity(), output);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfo3dlightingpackage = 15;
  if (has_tschchartinfo3dlightingpackage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->tschchartinfo3dlightingpackage(), output);
  }

  // optional .TSD.FillArchive tschchartinfobackgroundfill = 16;
  if (has_tschchartinfobackgroundfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->tschchartinfobackgroundfill(), output);
  }

  // optional .TSD.StrokeArchive tschchartinfobackgroundstroke = 17;
  if (has_tschchartinfobackgroundstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->tschchartinfobackgroundstroke(), output);
  }

  // optional float tschchartinfoborderopacity = 18;
  if (has_tschchartinfoborderopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->tschchartinfoborderopacity(), output);
  }

  // optional .TSD.ShadowArchive tschchartinfobordershadow = 19;
  if (has_tschchartinfobordershadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->tschchartinfobordershadow(), output);
  }

  // optional .TSD.StrokeArchive tschchartinfoborderstroke = 20;
  if (has_tschchartinfoborderstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->tschchartinfoborderstroke(), output);
  }

  // optional bool tschchartinfocombinelayers = 21;
  if (has_tschchartinfocombinelayers()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->tschchartinfocombinelayers(), output);
  }

  // optional .TSD.FillArchive tschchartinfogridbackgroundfill = 22;
  if (has_tschchartinfogridbackgroundfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->tschchartinfogridbackgroundfill(), output);
  }

  // optional float tschchartinfogridbackgroundopacity = 23;
  if (has_tschchartinfogridbackgroundopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->tschchartinfogridbackgroundopacity(), output);
  }

  // optional float tschchartinfointerbargap = 24;
  if (has_tschchartinfointerbargap()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->tschchartinfointerbargap(), output);
  }

  // optional float tschchartinfointersetgap = 25;
  if (has_tschchartinfointersetgap()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->tschchartinfointersetgap(), output);
  }

  // optional bool tschchartinfoshowborder = 26;
  if (has_tschchartinfoshowborder()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->tschchartinfoshowborder(), output);
  }

  // optional .TSP.Color tschchartinfotitlecolor = 27;
  if (has_tschchartinfotitlecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->tschchartinfotitlecolor(), output);
  }

  // optional int32 tschchartinfotitleparagraphstyleindex = 28;
  if (has_tschchartinfotitleparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->tschchartinfotitleparagraphstyleindex(), output);
  }

  // optional int32 tschchartinfodatasetnameparagraphstyleindex = 29;
  if (has_tschchartinfodatasetnameparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->tschchartinfodatasetnameparagraphstyleindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartGenericPropertyMapArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tschchartinfo3dbarshape = 1;
  if (has_tschchartinfo3dbarshape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tschchartinfo3dbarshape(), target);
  }

  // optional bool tschchartinfo3dbeveledges = 2;
  if (has_tschchartinfo3dbeveledges()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->tschchartinfo3dbeveledges(), target);
  }

  // optional float tschchartinfo3dintersetdepthgap = 3;
  if (has_tschchartinfo3dintersetdepthgap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->tschchartinfo3dintersetdepthgap(), target);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfo3drotation = 4;
  if (has_tschchartinfo3drotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tschchartinfo3drotation(), target);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfo3dscale = 5;
  if (has_tschchartinfo3dscale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tschchartinfo3dscale(), target);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfo3dviewport = 6;
  if (has_tschchartinfo3dviewport()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->tschchartinfo3dviewport(), target);
  }

  // optional float tschchartinfopiestartangle = 7;
  if (has_tschchartinfopiestartangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->tschchartinfopiestartangle(), target);
  }

  // optional bool tschchartinfoshowlegend = 8;
  if (has_tschchartinfoshowlegend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->tschchartinfoshowlegend(), target);
  }

  // optional bool tschchartinfoshowtitle = 9;
  if (has_tschchartinfoshowtitle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->tschchartinfoshowtitle(), target);
  }

  // optional bool tschchartinfoskiphiddendata = 10;
  if (has_tschchartinfoskiphiddendata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->tschchartinfoskiphiddendata(), target);
  }

  // optional string tschchartinfotitle = 11;
  if (has_tschchartinfotitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tschchartinfotitle().data(), this->tschchartinfotitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->tschchartinfotitle(), target);
  }

  // optional int32 tschchartinfodatasetnamelocation = 12;
  if (has_tschchartinfodatasetnamelocation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->tschchartinfodatasetnamelocation(), target);
  }

  // optional int32 tschchartinfomultidatacontroltype = 13;
  if (has_tschchartinfomultidatacontroltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->tschchartinfomultidatacontroltype(), target);
  }

  // optional float tschchartinfo3dchartopacity = 14;
  if (has_tschchartinfo3dchartopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->tschchartinfo3dchartopacity(), target);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfo3dlightingpackage = 15;
  if (has_tschchartinfo3dlightingpackage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->tschchartinfo3dlightingpackage(), target);
  }

  // optional .TSD.FillArchive tschchartinfobackgroundfill = 16;
  if (has_tschchartinfobackgroundfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->tschchartinfobackgroundfill(), target);
  }

  // optional .TSD.StrokeArchive tschchartinfobackgroundstroke = 17;
  if (has_tschchartinfobackgroundstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->tschchartinfobackgroundstroke(), target);
  }

  // optional float tschchartinfoborderopacity = 18;
  if (has_tschchartinfoborderopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->tschchartinfoborderopacity(), target);
  }

  // optional .TSD.ShadowArchive tschchartinfobordershadow = 19;
  if (has_tschchartinfobordershadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->tschchartinfobordershadow(), target);
  }

  // optional .TSD.StrokeArchive tschchartinfoborderstroke = 20;
  if (has_tschchartinfoborderstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->tschchartinfoborderstroke(), target);
  }

  // optional bool tschchartinfocombinelayers = 21;
  if (has_tschchartinfocombinelayers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->tschchartinfocombinelayers(), target);
  }

  // optional .TSD.FillArchive tschchartinfogridbackgroundfill = 22;
  if (has_tschchartinfogridbackgroundfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->tschchartinfogridbackgroundfill(), target);
  }

  // optional float tschchartinfogridbackgroundopacity = 23;
  if (has_tschchartinfogridbackgroundopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->tschchartinfogridbackgroundopacity(), target);
  }

  // optional float tschchartinfointerbargap = 24;
  if (has_tschchartinfointerbargap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->tschchartinfointerbargap(), target);
  }

  // optional float tschchartinfointersetgap = 25;
  if (has_tschchartinfointersetgap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->tschchartinfointersetgap(), target);
  }

  // optional bool tschchartinfoshowborder = 26;
  if (has_tschchartinfoshowborder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->tschchartinfoshowborder(), target);
  }

  // optional .TSP.Color tschchartinfotitlecolor = 27;
  if (has_tschchartinfotitlecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->tschchartinfotitlecolor(), target);
  }

  // optional int32 tschchartinfotitleparagraphstyleindex = 28;
  if (has_tschchartinfotitleparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->tschchartinfotitleparagraphstyleindex(), target);
  }

  // optional int32 tschchartinfodatasetnameparagraphstyleindex = 29;
  if (has_tschchartinfodatasetnameparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->tschchartinfodatasetnameparagraphstyleindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartGenericPropertyMapArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tschchartinfo3dbarshape = 1;
    if (has_tschchartinfo3dbarshape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartinfo3dbarshape());
    }

    // optional bool tschchartinfo3dbeveledges = 2;
    if (has_tschchartinfo3dbeveledges()) {
      total_size += 1 + 1;
    }

    // optional float tschchartinfo3dintersetdepthgap = 3;
    if (has_tschchartinfo3dintersetdepthgap()) {
      total_size += 1 + 4;
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfo3drotation = 4;
    if (has_tschchartinfo3drotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfo3drotation());
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfo3dscale = 5;
    if (has_tschchartinfo3dscale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfo3dscale());
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfo3dviewport = 6;
    if (has_tschchartinfo3dviewport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfo3dviewport());
    }

    // optional float tschchartinfopiestartangle = 7;
    if (has_tschchartinfopiestartangle()) {
      total_size += 1 + 4;
    }

    // optional bool tschchartinfoshowlegend = 8;
    if (has_tschchartinfoshowlegend()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool tschchartinfoshowtitle = 9;
    if (has_tschchartinfoshowtitle()) {
      total_size += 1 + 1;
    }

    // optional bool tschchartinfoskiphiddendata = 10;
    if (has_tschchartinfoskiphiddendata()) {
      total_size += 1 + 1;
    }

    // optional string tschchartinfotitle = 11;
    if (has_tschchartinfotitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tschchartinfotitle());
    }

    // optional int32 tschchartinfodatasetnamelocation = 12;
    if (has_tschchartinfodatasetnamelocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartinfodatasetnamelocation());
    }

    // optional int32 tschchartinfomultidatacontroltype = 13;
    if (has_tschchartinfomultidatacontroltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartinfomultidatacontroltype());
    }

    // optional float tschchartinfo3dchartopacity = 14;
    if (has_tschchartinfo3dchartopacity()) {
      total_size += 1 + 4;
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfo3dlightingpackage = 15;
    if (has_tschchartinfo3dlightingpackage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfo3dlightingpackage());
    }

    // optional .TSD.FillArchive tschchartinfobackgroundfill = 16;
    if (has_tschchartinfobackgroundfill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfobackgroundfill());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .TSD.StrokeArchive tschchartinfobackgroundstroke = 17;
    if (has_tschchartinfobackgroundstroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfobackgroundstroke());
    }

    // optional float tschchartinfoborderopacity = 18;
    if (has_tschchartinfoborderopacity()) {
      total_size += 2 + 4;
    }

    // optional .TSD.ShadowArchive tschchartinfobordershadow = 19;
    if (has_tschchartinfobordershadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfobordershadow());
    }

    // optional .TSD.StrokeArchive tschchartinfoborderstroke = 20;
    if (has_tschchartinfoborderstroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfoborderstroke());
    }

    // optional bool tschchartinfocombinelayers = 21;
    if (has_tschchartinfocombinelayers()) {
      total_size += 2 + 1;
    }

    // optional .TSD.FillArchive tschchartinfogridbackgroundfill = 22;
    if (has_tschchartinfogridbackgroundfill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfogridbackgroundfill());
    }

    // optional float tschchartinfogridbackgroundopacity = 23;
    if (has_tschchartinfogridbackgroundopacity()) {
      total_size += 2 + 4;
    }

    // optional float tschchartinfointerbargap = 24;
    if (has_tschchartinfointerbargap()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float tschchartinfointersetgap = 25;
    if (has_tschchartinfointersetgap()) {
      total_size += 2 + 4;
    }

    // optional bool tschchartinfoshowborder = 26;
    if (has_tschchartinfoshowborder()) {
      total_size += 2 + 1;
    }

    // optional .TSP.Color tschchartinfotitlecolor = 27;
    if (has_tschchartinfotitlecolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartinfotitlecolor());
    }

    // optional int32 tschchartinfotitleparagraphstyleindex = 28;
    if (has_tschchartinfotitleparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartinfotitleparagraphstyleindex());
    }

    // optional int32 tschchartinfodatasetnameparagraphstyleindex = 29;
    if (has_tschchartinfodatasetnameparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartinfodatasetnameparagraphstyleindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartGenericPropertyMapArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartGenericPropertyMapArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartGenericPropertyMapArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartGenericPropertyMapArchive::MergeFrom(const ChartGenericPropertyMapArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tschchartinfo3dbarshape()) {
      set_tschchartinfo3dbarshape(from.tschchartinfo3dbarshape());
    }
    if (from.has_tschchartinfo3dbeveledges()) {
      set_tschchartinfo3dbeveledges(from.tschchartinfo3dbeveledges());
    }
    if (from.has_tschchartinfo3dintersetdepthgap()) {
      set_tschchartinfo3dintersetdepthgap(from.tschchartinfo3dintersetdepthgap());
    }
    if (from.has_tschchartinfo3drotation()) {
      mutable_tschchartinfo3drotation()->::TSCH::Chart3DVectorArchive::MergeFrom(from.tschchartinfo3drotation());
    }
    if (from.has_tschchartinfo3dscale()) {
      mutable_tschchartinfo3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(from.tschchartinfo3dscale());
    }
    if (from.has_tschchartinfo3dviewport()) {
      mutable_tschchartinfo3dviewport()->::TSCH::Chart3DVectorArchive::MergeFrom(from.tschchartinfo3dviewport());
    }
    if (from.has_tschchartinfopiestartangle()) {
      set_tschchartinfopiestartangle(from.tschchartinfopiestartangle());
    }
    if (from.has_tschchartinfoshowlegend()) {
      set_tschchartinfoshowlegend(from.tschchartinfoshowlegend());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tschchartinfoshowtitle()) {
      set_tschchartinfoshowtitle(from.tschchartinfoshowtitle());
    }
    if (from.has_tschchartinfoskiphiddendata()) {
      set_tschchartinfoskiphiddendata(from.tschchartinfoskiphiddendata());
    }
    if (from.has_tschchartinfotitle()) {
      set_tschchartinfotitle(from.tschchartinfotitle());
    }
    if (from.has_tschchartinfodatasetnamelocation()) {
      set_tschchartinfodatasetnamelocation(from.tschchartinfodatasetnamelocation());
    }
    if (from.has_tschchartinfomultidatacontroltype()) {
      set_tschchartinfomultidatacontroltype(from.tschchartinfomultidatacontroltype());
    }
    if (from.has_tschchartinfo3dchartopacity()) {
      set_tschchartinfo3dchartopacity(from.tschchartinfo3dchartopacity());
    }
    if (from.has_tschchartinfo3dlightingpackage()) {
      mutable_tschchartinfo3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(from.tschchartinfo3dlightingpackage());
    }
    if (from.has_tschchartinfobackgroundfill()) {
      mutable_tschchartinfobackgroundfill()->::TSD::FillArchive::MergeFrom(from.tschchartinfobackgroundfill());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tschchartinfobackgroundstroke()) {
      mutable_tschchartinfobackgroundstroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartinfobackgroundstroke());
    }
    if (from.has_tschchartinfoborderopacity()) {
      set_tschchartinfoborderopacity(from.tschchartinfoborderopacity());
    }
    if (from.has_tschchartinfobordershadow()) {
      mutable_tschchartinfobordershadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartinfobordershadow());
    }
    if (from.has_tschchartinfoborderstroke()) {
      mutable_tschchartinfoborderstroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartinfoborderstroke());
    }
    if (from.has_tschchartinfocombinelayers()) {
      set_tschchartinfocombinelayers(from.tschchartinfocombinelayers());
    }
    if (from.has_tschchartinfogridbackgroundfill()) {
      mutable_tschchartinfogridbackgroundfill()->::TSD::FillArchive::MergeFrom(from.tschchartinfogridbackgroundfill());
    }
    if (from.has_tschchartinfogridbackgroundopacity()) {
      set_tschchartinfogridbackgroundopacity(from.tschchartinfogridbackgroundopacity());
    }
    if (from.has_tschchartinfointerbargap()) {
      set_tschchartinfointerbargap(from.tschchartinfointerbargap());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_tschchartinfointersetgap()) {
      set_tschchartinfointersetgap(from.tschchartinfointersetgap());
    }
    if (from.has_tschchartinfoshowborder()) {
      set_tschchartinfoshowborder(from.tschchartinfoshowborder());
    }
    if (from.has_tschchartinfotitlecolor()) {
      mutable_tschchartinfotitlecolor()->::TSP::Color::MergeFrom(from.tschchartinfotitlecolor());
    }
    if (from.has_tschchartinfotitleparagraphstyleindex()) {
      set_tschchartinfotitleparagraphstyleindex(from.tschchartinfotitleparagraphstyleindex());
    }
    if (from.has_tschchartinfodatasetnameparagraphstyleindex()) {
      set_tschchartinfodatasetnameparagraphstyleindex(from.tschchartinfodatasetnameparagraphstyleindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartGenericPropertyMapArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartGenericPropertyMapArchive::CopyFrom(const ChartGenericPropertyMapArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartGenericPropertyMapArchive::IsInitialized() const {

  if (has_tschchartinfo3drotation()) {
    if (!this->tschchartinfo3drotation().IsInitialized()) return false;
  }
  if (has_tschchartinfo3dscale()) {
    if (!this->tschchartinfo3dscale().IsInitialized()) return false;
  }
  if (has_tschchartinfo3dviewport()) {
    if (!this->tschchartinfo3dviewport().IsInitialized()) return false;
  }
  if (has_tschchartinfo3dlightingpackage()) {
    if (!this->tschchartinfo3dlightingpackage().IsInitialized()) return false;
  }
  if (has_tschchartinfobackgroundfill()) {
    if (!this->tschchartinfobackgroundfill().IsInitialized()) return false;
  }
  if (has_tschchartinfobackgroundstroke()) {
    if (!this->tschchartinfobackgroundstroke().IsInitialized()) return false;
  }
  if (has_tschchartinfobordershadow()) {
    if (!this->tschchartinfobordershadow().IsInitialized()) return false;
  }
  if (has_tschchartinfoborderstroke()) {
    if (!this->tschchartinfoborderstroke().IsInitialized()) return false;
  }
  if (has_tschchartinfogridbackgroundfill()) {
    if (!this->tschchartinfogridbackgroundfill().IsInitialized()) return false;
  }
  if (has_tschchartinfotitlecolor()) {
    if (!this->tschchartinfotitlecolor().IsInitialized()) return false;
  }
  return true;
}

void ChartGenericPropertyMapArchive::Swap(ChartGenericPropertyMapArchive* other) {
  if (other != this) {
    std::swap(tschchartinfo3dbarshape_, other->tschchartinfo3dbarshape_);
    std::swap(tschchartinfo3dbeveledges_, other->tschchartinfo3dbeveledges_);
    std::swap(tschchartinfo3dintersetdepthgap_, other->tschchartinfo3dintersetdepthgap_);
    std::swap(tschchartinfo3drotation_, other->tschchartinfo3drotation_);
    std::swap(tschchartinfo3dscale_, other->tschchartinfo3dscale_);
    std::swap(tschchartinfo3dviewport_, other->tschchartinfo3dviewport_);
    std::swap(tschchartinfopiestartangle_, other->tschchartinfopiestartangle_);
    std::swap(tschchartinfoshowlegend_, other->tschchartinfoshowlegend_);
    std::swap(tschchartinfoshowtitle_, other->tschchartinfoshowtitle_);
    std::swap(tschchartinfoskiphiddendata_, other->tschchartinfoskiphiddendata_);
    std::swap(tschchartinfotitle_, other->tschchartinfotitle_);
    std::swap(tschchartinfodatasetnamelocation_, other->tschchartinfodatasetnamelocation_);
    std::swap(tschchartinfomultidatacontroltype_, other->tschchartinfomultidatacontroltype_);
    std::swap(tschchartinfo3dchartopacity_, other->tschchartinfo3dchartopacity_);
    std::swap(tschchartinfo3dlightingpackage_, other->tschchartinfo3dlightingpackage_);
    std::swap(tschchartinfobackgroundfill_, other->tschchartinfobackgroundfill_);
    std::swap(tschchartinfobackgroundstroke_, other->tschchartinfobackgroundstroke_);
    std::swap(tschchartinfoborderopacity_, other->tschchartinfoborderopacity_);
    std::swap(tschchartinfobordershadow_, other->tschchartinfobordershadow_);
    std::swap(tschchartinfoborderstroke_, other->tschchartinfoborderstroke_);
    std::swap(tschchartinfocombinelayers_, other->tschchartinfocombinelayers_);
    std::swap(tschchartinfogridbackgroundfill_, other->tschchartinfogridbackgroundfill_);
    std::swap(tschchartinfogridbackgroundopacity_, other->tschchartinfogridbackgroundopacity_);
    std::swap(tschchartinfointerbargap_, other->tschchartinfointerbargap_);
    std::swap(tschchartinfointersetgap_, other->tschchartinfointersetgap_);
    std::swap(tschchartinfoshowborder_, other->tschchartinfoshowborder_);
    std::swap(tschchartinfotitlecolor_, other->tschchartinfotitlecolor_);
    std::swap(tschchartinfotitleparagraphstyleindex_, other->tschchartinfotitleparagraphstyleindex_);
    std::swap(tschchartinfodatasetnameparagraphstyleindex_, other->tschchartinfodatasetnameparagraphstyleindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartGenericPropertyMapArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartGenericPropertyMapArchive_descriptor_;
  metadata.reflection = ChartGenericPropertyMapArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LegendGenericPropertyMapArchive::kTschlegendmodelfillFieldNumber;
const int LegendGenericPropertyMapArchive::kTschlegendmodellabelparagraphstyleindexFieldNumber;
const int LegendGenericPropertyMapArchive::kTschlegendmodelopacityFieldNumber;
const int LegendGenericPropertyMapArchive::kTschlegendmodelshadowFieldNumber;
const int LegendGenericPropertyMapArchive::kTschlegendmodelstrokeFieldNumber;
#endif  // !_MSC_VER

LegendGenericPropertyMapArchive::LegendGenericPropertyMapArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LegendGenericPropertyMapArchive::InitAsDefaultInstance() {
  tschlegendmodelfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschlegendmodelshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschlegendmodelstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
}

LegendGenericPropertyMapArchive::LegendGenericPropertyMapArchive(const LegendGenericPropertyMapArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LegendGenericPropertyMapArchive::SharedCtor() {
  _cached_size_ = 0;
  tschlegendmodelfill_ = NULL;
  tschlegendmodellabelparagraphstyleindex_ = 0;
  tschlegendmodelopacity_ = 0;
  tschlegendmodelshadow_ = NULL;
  tschlegendmodelstroke_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LegendGenericPropertyMapArchive::~LegendGenericPropertyMapArchive() {
  SharedDtor();
}

void LegendGenericPropertyMapArchive::SharedDtor() {
  if (this != default_instance_) {
    delete tschlegendmodelfill_;
    delete tschlegendmodelshadow_;
    delete tschlegendmodelstroke_;
  }
}

void LegendGenericPropertyMapArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LegendGenericPropertyMapArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LegendGenericPropertyMapArchive_descriptor_;
}

const LegendGenericPropertyMapArchive& LegendGenericPropertyMapArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eGEN_2eproto();
  return *default_instance_;
}

LegendGenericPropertyMapArchive* LegendGenericPropertyMapArchive::default_instance_ = NULL;

LegendGenericPropertyMapArchive* LegendGenericPropertyMapArchive::New() const {
  return new LegendGenericPropertyMapArchive;
}

void LegendGenericPropertyMapArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tschlegendmodelfill()) {
      if (tschlegendmodelfill_ != NULL) tschlegendmodelfill_->::TSD::FillArchive::Clear();
    }
    tschlegendmodellabelparagraphstyleindex_ = 0;
    tschlegendmodelopacity_ = 0;
    if (has_tschlegendmodelshadow()) {
      if (tschlegendmodelshadow_ != NULL) tschlegendmodelshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschlegendmodelstroke()) {
      if (tschlegendmodelstroke_ != NULL) tschlegendmodelstroke_->::TSD::StrokeArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LegendGenericPropertyMapArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSD.FillArchive tschlegendmodelfill = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschlegendmodelfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tschlegendmodellabelparagraphstyleindex;
        break;
      }

      // optional int32 tschlegendmodellabelparagraphstyleindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschlegendmodellabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschlegendmodellabelparagraphstyleindex_)));
          set_has_tschlegendmodellabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_tschlegendmodelopacity;
        break;
      }

      // optional float tschlegendmodelopacity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschlegendmodelopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschlegendmodelopacity_)));
          set_has_tschlegendmodelopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tschlegendmodelshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschlegendmodelshadow = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschlegendmodelshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschlegendmodelshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tschlegendmodelstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschlegendmodelstroke = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschlegendmodelstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschlegendmodelstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LegendGenericPropertyMapArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSD.FillArchive tschlegendmodelfill = 1;
  if (has_tschlegendmodelfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tschlegendmodelfill(), output);
  }

  // optional int32 tschlegendmodellabelparagraphstyleindex = 2;
  if (has_tschlegendmodellabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tschlegendmodellabelparagraphstyleindex(), output);
  }

  // optional float tschlegendmodelopacity = 3;
  if (has_tschlegendmodelopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->tschlegendmodelopacity(), output);
  }

  // optional .TSD.ShadowArchive tschlegendmodelshadow = 4;
  if (has_tschlegendmodelshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tschlegendmodelshadow(), output);
  }

  // optional .TSD.StrokeArchive tschlegendmodelstroke = 5;
  if (has_tschlegendmodelstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tschlegendmodelstroke(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LegendGenericPropertyMapArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSD.FillArchive tschlegendmodelfill = 1;
  if (has_tschlegendmodelfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tschlegendmodelfill(), target);
  }

  // optional int32 tschlegendmodellabelparagraphstyleindex = 2;
  if (has_tschlegendmodellabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tschlegendmodellabelparagraphstyleindex(), target);
  }

  // optional float tschlegendmodelopacity = 3;
  if (has_tschlegendmodelopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->tschlegendmodelopacity(), target);
  }

  // optional .TSD.ShadowArchive tschlegendmodelshadow = 4;
  if (has_tschlegendmodelshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tschlegendmodelshadow(), target);
  }

  // optional .TSD.StrokeArchive tschlegendmodelstroke = 5;
  if (has_tschlegendmodelstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tschlegendmodelstroke(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LegendGenericPropertyMapArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSD.FillArchive tschlegendmodelfill = 1;
    if (has_tschlegendmodelfill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschlegendmodelfill());
    }

    // optional int32 tschlegendmodellabelparagraphstyleindex = 2;
    if (has_tschlegendmodellabelparagraphstyleindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschlegendmodellabelparagraphstyleindex());
    }

    // optional float tschlegendmodelopacity = 3;
    if (has_tschlegendmodelopacity()) {
      total_size += 1 + 4;
    }

    // optional .TSD.ShadowArchive tschlegendmodelshadow = 4;
    if (has_tschlegendmodelshadow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschlegendmodelshadow());
    }

    // optional .TSD.StrokeArchive tschlegendmodelstroke = 5;
    if (has_tschlegendmodelstroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschlegendmodelstroke());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LegendGenericPropertyMapArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LegendGenericPropertyMapArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LegendGenericPropertyMapArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LegendGenericPropertyMapArchive::MergeFrom(const LegendGenericPropertyMapArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tschlegendmodelfill()) {
      mutable_tschlegendmodelfill()->::TSD::FillArchive::MergeFrom(from.tschlegendmodelfill());
    }
    if (from.has_tschlegendmodellabelparagraphstyleindex()) {
      set_tschlegendmodellabelparagraphstyleindex(from.tschlegendmodellabelparagraphstyleindex());
    }
    if (from.has_tschlegendmodelopacity()) {
      set_tschlegendmodelopacity(from.tschlegendmodelopacity());
    }
    if (from.has_tschlegendmodelshadow()) {
      mutable_tschlegendmodelshadow()->::TSD::ShadowArchive::MergeFrom(from.tschlegendmodelshadow());
    }
    if (from.has_tschlegendmodelstroke()) {
      mutable_tschlegendmodelstroke()->::TSD::StrokeArchive::MergeFrom(from.tschlegendmodelstroke());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LegendGenericPropertyMapArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegendGenericPropertyMapArchive::CopyFrom(const LegendGenericPropertyMapArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegendGenericPropertyMapArchive::IsInitialized() const {

  if (has_tschlegendmodelfill()) {
    if (!this->tschlegendmodelfill().IsInitialized()) return false;
  }
  if (has_tschlegendmodelshadow()) {
    if (!this->tschlegendmodelshadow().IsInitialized()) return false;
  }
  if (has_tschlegendmodelstroke()) {
    if (!this->tschlegendmodelstroke().IsInitialized()) return false;
  }
  return true;
}

void LegendGenericPropertyMapArchive::Swap(LegendGenericPropertyMapArchive* other) {
  if (other != this) {
    std::swap(tschlegendmodelfill_, other->tschlegendmodelfill_);
    std::swap(tschlegendmodellabelparagraphstyleindex_, other->tschlegendmodellabelparagraphstyleindex_);
    std::swap(tschlegendmodelopacity_, other->tschlegendmodelopacity_);
    std::swap(tschlegendmodelshadow_, other->tschlegendmodelshadow_);
    std::swap(tschlegendmodelstroke_, other->tschlegendmodelstroke_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LegendGenericPropertyMapArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LegendGenericPropertyMapArchive_descriptor_;
  metadata.reflection = LegendGenericPropertyMapArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartAxisGenericPropertyMapArchive::kTschchartaxis3DlabelpositionFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxis10NumberformatFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxisnumberformatFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxis10DateformatFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxisdurationformatFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxisdateformatFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxisnumberformattypeFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxisnumberofdecadesFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxisnumberofmajorgridlinesFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxisnumberofminorgridlinesFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxisplottoedgesFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxisscaleFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxisshowlabelsFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxisshowserieslabelsFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxisshowtitleFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxistitleFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxisusermaxFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxisuserminFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxis3DgridlineopacityFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxis3DgridlinestrokeFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxishorizontalspacingFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxislabelparagraphstyleindexFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxislabelsorientationFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxismajorgridlineopacityFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxismajorgridlineshadowFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxismajorgridlinestrokeFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxisminorgridlineopacityFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxisminorgridlineshadowFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxisminorgridlinestrokeFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxisshowaxisFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxisshowlastlabelFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxisshowmajorgridlinesFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxisshowmajortickmarksFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxisshowminimumlabelFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxisshowminorgridlinesFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxisshowminortickmarksFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxistickmarklocationFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxistitleparagraphstyleindexFieldNumber;
const int ChartAxisGenericPropertyMapArchive::kTschchartaxisverticalspacingFieldNumber;
#endif  // !_MSC_VER

ChartAxisGenericPropertyMapArchive::ChartAxisGenericPropertyMapArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartAxisGenericPropertyMapArchive::InitAsDefaultInstance() {
  tschchartaxis1_0numberformat_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  tschchartaxisnumberformat_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  tschchartaxis1_0dateformat_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  tschchartaxisdurationformat_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  tschchartaxisdateformat_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  tschchartaxisusermax_ = const_cast< ::TSCH::ChartsNSNumberDoubleArchive*>(&::TSCH::ChartsNSNumberDoubleArchive::default_instance());
  tschchartaxisusermin_ = const_cast< ::TSCH::ChartsNSNumberDoubleArchive*>(&::TSCH::ChartsNSNumberDoubleArchive::default_instance());
  tschchartaxis3dgridlinestroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartaxismajorgridlineshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartaxismajorgridlinestroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartaxisminorgridlineshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartaxisminorgridlinestroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
}

ChartAxisGenericPropertyMapArchive::ChartAxisGenericPropertyMapArchive(const ChartAxisGenericPropertyMapArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartAxisGenericPropertyMapArchive::SharedCtor() {
  _cached_size_ = 0;
  tschchartaxis3dlabelposition_ = 0;
  tschchartaxis1_0numberformat_ = NULL;
  tschchartaxisnumberformat_ = NULL;
  tschchartaxis1_0dateformat_ = NULL;
  tschchartaxisdurationformat_ = NULL;
  tschchartaxisdateformat_ = NULL;
  tschchartaxisnumberformattype_ = 0;
  tschchartaxisnumberofdecades_ = 0;
  tschchartaxisnumberofmajorgridlines_ = 0;
  tschchartaxisnumberofminorgridlines_ = 0;
  tschchartaxisplottoedges_ = false;
  tschchartaxisscale_ = 0;
  tschchartaxisshowlabels_ = false;
  tschchartaxisshowserieslabels_ = false;
  tschchartaxisshowtitle_ = false;
  tschchartaxistitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tschchartaxisusermax_ = NULL;
  tschchartaxisusermin_ = NULL;
  tschchartaxis3dgridlineopacity_ = 0;
  tschchartaxis3dgridlinestroke_ = NULL;
  tschchartaxishorizontalspacing_ = 0;
  tschchartaxislabelparagraphstyleindex_ = 0;
  tschchartaxislabelsorientation_ = 0;
  tschchartaxismajorgridlineopacity_ = 0;
  tschchartaxismajorgridlineshadow_ = NULL;
  tschchartaxismajorgridlinestroke_ = NULL;
  tschchartaxisminorgridlineopacity_ = 0;
  tschchartaxisminorgridlineshadow_ = NULL;
  tschchartaxisminorgridlinestroke_ = NULL;
  tschchartaxisshowaxis_ = false;
  tschchartaxisshowlastlabel_ = false;
  tschchartaxisshowmajorgridlines_ = false;
  tschchartaxisshowmajortickmarks_ = false;
  tschchartaxisshowminimumlabel_ = false;
  tschchartaxisshowminorgridlines_ = false;
  tschchartaxisshowminortickmarks_ = false;
  tschchartaxistickmarklocation_ = 0;
  tschchartaxistitleparagraphstyleindex_ = 0;
  tschchartaxisverticalspacing_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartAxisGenericPropertyMapArchive::~ChartAxisGenericPropertyMapArchive() {
  SharedDtor();
}

void ChartAxisGenericPropertyMapArchive::SharedDtor() {
  if (tschchartaxistitle_ != &::google::protobuf::internal::kEmptyString) {
    delete tschchartaxistitle_;
  }
  if (this != default_instance_) {
    delete tschchartaxis1_0numberformat_;
    delete tschchartaxisnumberformat_;
    delete tschchartaxis1_0dateformat_;
    delete tschchartaxisdurationformat_;
    delete tschchartaxisdateformat_;
    delete tschchartaxisusermax_;
    delete tschchartaxisusermin_;
    delete tschchartaxis3dgridlinestroke_;
    delete tschchartaxismajorgridlineshadow_;
    delete tschchartaxismajorgridlinestroke_;
    delete tschchartaxisminorgridlineshadow_;
    delete tschchartaxisminorgridlinestroke_;
  }
}

void ChartAxisGenericPropertyMapArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartAxisGenericPropertyMapArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartAxisGenericPropertyMapArchive_descriptor_;
}

const ChartAxisGenericPropertyMapArchive& ChartAxisGenericPropertyMapArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eGEN_2eproto();
  return *default_instance_;
}

ChartAxisGenericPropertyMapArchive* ChartAxisGenericPropertyMapArchive::default_instance_ = NULL;

ChartAxisGenericPropertyMapArchive* ChartAxisGenericPropertyMapArchive::New() const {
  return new ChartAxisGenericPropertyMapArchive;
}

void ChartAxisGenericPropertyMapArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tschchartaxis3dlabelposition_ = 0;
    if (has_tschchartaxis1_0numberformat()) {
      if (tschchartaxis1_0numberformat_ != NULL) tschchartaxis1_0numberformat_->::TSK::FormatStructArchive::Clear();
    }
    if (has_tschchartaxisnumberformat()) {
      if (tschchartaxisnumberformat_ != NULL) tschchartaxisnumberformat_->::TSK::FormatStructArchive::Clear();
    }
    if (has_tschchartaxis1_0dateformat()) {
      if (tschchartaxis1_0dateformat_ != NULL) tschchartaxis1_0dateformat_->::TSK::FormatStructArchive::Clear();
    }
    if (has_tschchartaxisdurationformat()) {
      if (tschchartaxisdurationformat_ != NULL) tschchartaxisdurationformat_->::TSK::FormatStructArchive::Clear();
    }
    if (has_tschchartaxisdateformat()) {
      if (tschchartaxisdateformat_ != NULL) tschchartaxisdateformat_->::TSK::FormatStructArchive::Clear();
    }
    tschchartaxisnumberformattype_ = 0;
    tschchartaxisnumberofdecades_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    tschchartaxisnumberofmajorgridlines_ = 0;
    tschchartaxisnumberofminorgridlines_ = 0;
    tschchartaxisplottoedges_ = false;
    tschchartaxisscale_ = 0;
    tschchartaxisshowlabels_ = false;
    tschchartaxisshowserieslabels_ = false;
    tschchartaxisshowtitle_ = false;
    if (has_tschchartaxistitle()) {
      if (tschchartaxistitle_ != &::google::protobuf::internal::kEmptyString) {
        tschchartaxistitle_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_tschchartaxisusermax()) {
      if (tschchartaxisusermax_ != NULL) tschchartaxisusermax_->::TSCH::ChartsNSNumberDoubleArchive::Clear();
    }
    if (has_tschchartaxisusermin()) {
      if (tschchartaxisusermin_ != NULL) tschchartaxisusermin_->::TSCH::ChartsNSNumberDoubleArchive::Clear();
    }
    tschchartaxis3dgridlineopacity_ = 0;
    if (has_tschchartaxis3dgridlinestroke()) {
      if (tschchartaxis3dgridlinestroke_ != NULL) tschchartaxis3dgridlinestroke_->::TSD::StrokeArchive::Clear();
    }
    tschchartaxishorizontalspacing_ = 0;
    tschchartaxislabelparagraphstyleindex_ = 0;
    tschchartaxislabelsorientation_ = 0;
    tschchartaxismajorgridlineopacity_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_tschchartaxismajorgridlineshadow()) {
      if (tschchartaxismajorgridlineshadow_ != NULL) tschchartaxismajorgridlineshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartaxismajorgridlinestroke()) {
      if (tschchartaxismajorgridlinestroke_ != NULL) tschchartaxismajorgridlinestroke_->::TSD::StrokeArchive::Clear();
    }
    tschchartaxisminorgridlineopacity_ = 0;
    if (has_tschchartaxisminorgridlineshadow()) {
      if (tschchartaxisminorgridlineshadow_ != NULL) tschchartaxisminorgridlineshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartaxisminorgridlinestroke()) {
      if (tschchartaxisminorgridlinestroke_ != NULL) tschchartaxisminorgridlinestroke_->::TSD::StrokeArchive::Clear();
    }
    tschchartaxisshowaxis_ = false;
    tschchartaxisshowlastlabel_ = false;
    tschchartaxisshowmajorgridlines_ = false;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    tschchartaxisshowmajortickmarks_ = false;
    tschchartaxisshowminimumlabel_ = false;
    tschchartaxisshowminorgridlines_ = false;
    tschchartaxisshowminortickmarks_ = false;
    tschchartaxistickmarklocation_ = 0;
    tschchartaxistitleparagraphstyleindex_ = 0;
    tschchartaxisverticalspacing_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartAxisGenericPropertyMapArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tschchartaxis3dlabelposition = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxis3dlabelposition_)));
          set_has_tschchartaxis3dlabelposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tschchartaxis1_0numberformat;
        break;
      }

      // optional .TSK.FormatStructArchive tschchartaxis1_0numberformat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxis1_0numberformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxis1_0numberformat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tschchartaxisnumberformat;
        break;
      }

      // optional .TSK.FormatStructArchive tschchartaxisnumberformat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxisnumberformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxisnumberformat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tschchartaxis1_0dateformat;
        break;
      }

      // optional .TSK.FormatStructArchive tschchartaxis1_0dateformat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxis1_0dateformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxis1_0dateformat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tschchartaxisdurationformat;
        break;
      }

      // optional .TSK.FormatStructArchive tschchartaxisdurationformat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxisdurationformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxisdurationformat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_tschchartaxisdateformat;
        break;
      }

      // optional .TSK.FormatStructArchive tschchartaxisdateformat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxisdateformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxisdateformat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_tschchartaxisnumberformattype;
        break;
      }

      // optional int32 tschchartaxisnumberformattype = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisnumberformattype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxisnumberformattype_)));
          set_has_tschchartaxisnumberformattype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_tschchartaxisnumberofdecades;
        break;
      }

      // optional int32 tschchartaxisnumberofdecades = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisnumberofdecades:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxisnumberofdecades_)));
          set_has_tschchartaxisnumberofdecades();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_tschchartaxisnumberofmajorgridlines;
        break;
      }

      // optional int32 tschchartaxisnumberofmajorgridlines = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisnumberofmajorgridlines:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxisnumberofmajorgridlines_)));
          set_has_tschchartaxisnumberofmajorgridlines();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_tschchartaxisnumberofminorgridlines;
        break;
      }

      // optional int32 tschchartaxisnumberofminorgridlines = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisnumberofminorgridlines:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxisnumberofminorgridlines_)));
          set_has_tschchartaxisnumberofminorgridlines();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_tschchartaxisplottoedges;
        break;
      }

      // optional bool tschchartaxisplottoedges = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisplottoedges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxisplottoedges_)));
          set_has_tschchartaxisplottoedges();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_tschchartaxisscale;
        break;
      }

      // optional int32 tschchartaxisscale = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisscale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxisscale_)));
          set_has_tschchartaxisscale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tschchartaxisshowlabels;
        break;
      }

      // optional bool tschchartaxisshowlabels = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisshowlabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxisshowlabels_)));
          set_has_tschchartaxisshowlabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_tschchartaxisshowserieslabels;
        break;
      }

      // optional bool tschchartaxisshowserieslabels = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisshowserieslabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxisshowserieslabels_)));
          set_has_tschchartaxisshowserieslabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_tschchartaxisshowtitle;
        break;
      }

      // optional bool tschchartaxisshowtitle = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisshowtitle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxisshowtitle_)));
          set_has_tschchartaxisshowtitle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_tschchartaxistitle;
        break;
      }

      // optional string tschchartaxistitle = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxistitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tschchartaxistitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tschchartaxistitle().data(), this->tschchartaxistitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_tschchartaxisusermax;
        break;
      }

      // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisusermax = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxisusermax:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxisusermax()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_tschchartaxisusermin;
        break;
      }

      // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisusermin = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxisusermin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxisusermin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_tschchartaxis3dgridlineopacity;
        break;
      }

      // optional float tschchartaxis3dgridlineopacity = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartaxis3dgridlineopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartaxis3dgridlineopacity_)));
          set_has_tschchartaxis3dgridlineopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_tschchartaxis3dgridlinestroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartaxis3dgridlinestroke = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxis3dgridlinestroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxis3dgridlinestroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_tschchartaxishorizontalspacing;
        break;
      }

      // optional int32 tschchartaxishorizontalspacing = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxishorizontalspacing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxishorizontalspacing_)));
          set_has_tschchartaxishorizontalspacing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_tschchartaxislabelparagraphstyleindex;
        break;
      }

      // optional int32 tschchartaxislabelparagraphstyleindex = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxislabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxislabelparagraphstyleindex_)));
          set_has_tschchartaxislabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(189)) goto parse_tschchartaxislabelsorientation;
        break;
      }

      // optional float tschchartaxislabelsorientation = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartaxislabelsorientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartaxislabelsorientation_)));
          set_has_tschchartaxislabelsorientation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_tschchartaxismajorgridlineopacity;
        break;
      }

      // optional float tschchartaxismajorgridlineopacity = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartaxismajorgridlineopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartaxismajorgridlineopacity_)));
          set_has_tschchartaxismajorgridlineopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_tschchartaxismajorgridlineshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartaxismajorgridlineshadow = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxismajorgridlineshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxismajorgridlineshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_tschchartaxismajorgridlinestroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartaxismajorgridlinestroke = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxismajorgridlinestroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxismajorgridlinestroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(221)) goto parse_tschchartaxisminorgridlineopacity;
        break;
      }

      // optional float tschchartaxisminorgridlineopacity = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartaxisminorgridlineopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartaxisminorgridlineopacity_)));
          set_has_tschchartaxisminorgridlineopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_tschchartaxisminorgridlineshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartaxisminorgridlineshadow = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxisminorgridlineshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxisminorgridlineshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_tschchartaxisminorgridlinestroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartaxisminorgridlinestroke = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartaxisminorgridlinestroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartaxisminorgridlinestroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_tschchartaxisshowaxis;
        break;
      }

      // optional bool tschchartaxisshowaxis = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisshowaxis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxisshowaxis_)));
          set_has_tschchartaxisshowaxis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_tschchartaxisshowlastlabel;
        break;
      }

      // optional bool tschchartaxisshowlastlabel = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisshowlastlabel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxisshowlastlabel_)));
          set_has_tschchartaxisshowlastlabel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_tschchartaxisshowmajorgridlines;
        break;
      }

      // optional bool tschchartaxisshowmajorgridlines = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisshowmajorgridlines:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxisshowmajorgridlines_)));
          set_has_tschchartaxisshowmajorgridlines();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_tschchartaxisshowmajortickmarks;
        break;
      }

      // optional bool tschchartaxisshowmajortickmarks = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisshowmajortickmarks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxisshowmajortickmarks_)));
          set_has_tschchartaxisshowmajortickmarks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_tschchartaxisshowminimumlabel;
        break;
      }

      // optional bool tschchartaxisshowminimumlabel = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisshowminimumlabel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxisshowminimumlabel_)));
          set_has_tschchartaxisshowminimumlabel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_tschchartaxisshowminorgridlines;
        break;
      }

      // optional bool tschchartaxisshowminorgridlines = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisshowminorgridlines:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxisshowminorgridlines_)));
          set_has_tschchartaxisshowminorgridlines();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_tschchartaxisshowminortickmarks;
        break;
      }

      // optional bool tschchartaxisshowminortickmarks = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisshowminortickmarks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartaxisshowminortickmarks_)));
          set_has_tschchartaxisshowminortickmarks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_tschchartaxistickmarklocation;
        break;
      }

      // optional int32 tschchartaxistickmarklocation = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxistickmarklocation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxistickmarklocation_)));
          set_has_tschchartaxistickmarklocation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_tschchartaxistitleparagraphstyleindex;
        break;
      }

      // optional int32 tschchartaxistitleparagraphstyleindex = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxistitleparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxistitleparagraphstyleindex_)));
          set_has_tschchartaxistitleparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_tschchartaxisverticalspacing;
        break;
      }

      // optional int32 tschchartaxisverticalspacing = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartaxisverticalspacing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartaxisverticalspacing_)));
          set_has_tschchartaxisverticalspacing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartAxisGenericPropertyMapArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tschchartaxis3dlabelposition = 1;
  if (has_tschchartaxis3dlabelposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tschchartaxis3dlabelposition(), output);
  }

  // optional .TSK.FormatStructArchive tschchartaxis1_0numberformat = 2;
  if (has_tschchartaxis1_0numberformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tschchartaxis1_0numberformat(), output);
  }

  // optional .TSK.FormatStructArchive tschchartaxisnumberformat = 3;
  if (has_tschchartaxisnumberformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tschchartaxisnumberformat(), output);
  }

  // optional .TSK.FormatStructArchive tschchartaxis1_0dateformat = 4;
  if (has_tschchartaxis1_0dateformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tschchartaxis1_0dateformat(), output);
  }

  // optional .TSK.FormatStructArchive tschchartaxisdurationformat = 5;
  if (has_tschchartaxisdurationformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tschchartaxisdurationformat(), output);
  }

  // optional .TSK.FormatStructArchive tschchartaxisdateformat = 6;
  if (has_tschchartaxisdateformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->tschchartaxisdateformat(), output);
  }

  // optional int32 tschchartaxisnumberformattype = 7;
  if (has_tschchartaxisnumberformattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->tschchartaxisnumberformattype(), output);
  }

  // optional int32 tschchartaxisnumberofdecades = 8;
  if (has_tschchartaxisnumberofdecades()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tschchartaxisnumberofdecades(), output);
  }

  // optional int32 tschchartaxisnumberofmajorgridlines = 9;
  if (has_tschchartaxisnumberofmajorgridlines()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->tschchartaxisnumberofmajorgridlines(), output);
  }

  // optional int32 tschchartaxisnumberofminorgridlines = 10;
  if (has_tschchartaxisnumberofminorgridlines()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->tschchartaxisnumberofminorgridlines(), output);
  }

  // optional bool tschchartaxisplottoedges = 11;
  if (has_tschchartaxisplottoedges()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->tschchartaxisplottoedges(), output);
  }

  // optional int32 tschchartaxisscale = 12;
  if (has_tschchartaxisscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->tschchartaxisscale(), output);
  }

  // optional bool tschchartaxisshowlabels = 13;
  if (has_tschchartaxisshowlabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->tschchartaxisshowlabels(), output);
  }

  // optional bool tschchartaxisshowserieslabels = 14;
  if (has_tschchartaxisshowserieslabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->tschchartaxisshowserieslabels(), output);
  }

  // optional bool tschchartaxisshowtitle = 15;
  if (has_tschchartaxisshowtitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->tschchartaxisshowtitle(), output);
  }

  // optional string tschchartaxistitle = 16;
  if (has_tschchartaxistitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tschchartaxistitle().data(), this->tschchartaxistitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->tschchartaxistitle(), output);
  }

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisusermax = 17;
  if (has_tschchartaxisusermax()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->tschchartaxisusermax(), output);
  }

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisusermin = 18;
  if (has_tschchartaxisusermin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->tschchartaxisusermin(), output);
  }

  // optional float tschchartaxis3dgridlineopacity = 19;
  if (has_tschchartaxis3dgridlineopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->tschchartaxis3dgridlineopacity(), output);
  }

  // optional .TSD.StrokeArchive tschchartaxis3dgridlinestroke = 20;
  if (has_tschchartaxis3dgridlinestroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->tschchartaxis3dgridlinestroke(), output);
  }

  // optional int32 tschchartaxishorizontalspacing = 21;
  if (has_tschchartaxishorizontalspacing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->tschchartaxishorizontalspacing(), output);
  }

  // optional int32 tschchartaxislabelparagraphstyleindex = 22;
  if (has_tschchartaxislabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->tschchartaxislabelparagraphstyleindex(), output);
  }

  // optional float tschchartaxislabelsorientation = 23;
  if (has_tschchartaxislabelsorientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->tschchartaxislabelsorientation(), output);
  }

  // optional float tschchartaxismajorgridlineopacity = 24;
  if (has_tschchartaxismajorgridlineopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->tschchartaxismajorgridlineopacity(), output);
  }

  // optional .TSD.ShadowArchive tschchartaxismajorgridlineshadow = 25;
  if (has_tschchartaxismajorgridlineshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->tschchartaxismajorgridlineshadow(), output);
  }

  // optional .TSD.StrokeArchive tschchartaxismajorgridlinestroke = 26;
  if (has_tschchartaxismajorgridlinestroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->tschchartaxismajorgridlinestroke(), output);
  }

  // optional float tschchartaxisminorgridlineopacity = 27;
  if (has_tschchartaxisminorgridlineopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->tschchartaxisminorgridlineopacity(), output);
  }

  // optional .TSD.ShadowArchive tschchartaxisminorgridlineshadow = 28;
  if (has_tschchartaxisminorgridlineshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->tschchartaxisminorgridlineshadow(), output);
  }

  // optional .TSD.StrokeArchive tschchartaxisminorgridlinestroke = 29;
  if (has_tschchartaxisminorgridlinestroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->tschchartaxisminorgridlinestroke(), output);
  }

  // optional bool tschchartaxisshowaxis = 30;
  if (has_tschchartaxisshowaxis()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->tschchartaxisshowaxis(), output);
  }

  // optional bool tschchartaxisshowlastlabel = 31;
  if (has_tschchartaxisshowlastlabel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->tschchartaxisshowlastlabel(), output);
  }

  // optional bool tschchartaxisshowmajorgridlines = 32;
  if (has_tschchartaxisshowmajorgridlines()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->tschchartaxisshowmajorgridlines(), output);
  }

  // optional bool tschchartaxisshowmajortickmarks = 33;
  if (has_tschchartaxisshowmajortickmarks()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->tschchartaxisshowmajortickmarks(), output);
  }

  // optional bool tschchartaxisshowminimumlabel = 34;
  if (has_tschchartaxisshowminimumlabel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->tschchartaxisshowminimumlabel(), output);
  }

  // optional bool tschchartaxisshowminorgridlines = 35;
  if (has_tschchartaxisshowminorgridlines()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->tschchartaxisshowminorgridlines(), output);
  }

  // optional bool tschchartaxisshowminortickmarks = 36;
  if (has_tschchartaxisshowminortickmarks()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->tschchartaxisshowminortickmarks(), output);
  }

  // optional int32 tschchartaxistickmarklocation = 37;
  if (has_tschchartaxistickmarklocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->tschchartaxistickmarklocation(), output);
  }

  // optional int32 tschchartaxistitleparagraphstyleindex = 38;
  if (has_tschchartaxistitleparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->tschchartaxistitleparagraphstyleindex(), output);
  }

  // optional int32 tschchartaxisverticalspacing = 39;
  if (has_tschchartaxisverticalspacing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->tschchartaxisverticalspacing(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartAxisGenericPropertyMapArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tschchartaxis3dlabelposition = 1;
  if (has_tschchartaxis3dlabelposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tschchartaxis3dlabelposition(), target);
  }

  // optional .TSK.FormatStructArchive tschchartaxis1_0numberformat = 2;
  if (has_tschchartaxis1_0numberformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tschchartaxis1_0numberformat(), target);
  }

  // optional .TSK.FormatStructArchive tschchartaxisnumberformat = 3;
  if (has_tschchartaxisnumberformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tschchartaxisnumberformat(), target);
  }

  // optional .TSK.FormatStructArchive tschchartaxis1_0dateformat = 4;
  if (has_tschchartaxis1_0dateformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tschchartaxis1_0dateformat(), target);
  }

  // optional .TSK.FormatStructArchive tschchartaxisdurationformat = 5;
  if (has_tschchartaxisdurationformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tschchartaxisdurationformat(), target);
  }

  // optional .TSK.FormatStructArchive tschchartaxisdateformat = 6;
  if (has_tschchartaxisdateformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->tschchartaxisdateformat(), target);
  }

  // optional int32 tschchartaxisnumberformattype = 7;
  if (has_tschchartaxisnumberformattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->tschchartaxisnumberformattype(), target);
  }

  // optional int32 tschchartaxisnumberofdecades = 8;
  if (has_tschchartaxisnumberofdecades()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->tschchartaxisnumberofdecades(), target);
  }

  // optional int32 tschchartaxisnumberofmajorgridlines = 9;
  if (has_tschchartaxisnumberofmajorgridlines()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->tschchartaxisnumberofmajorgridlines(), target);
  }

  // optional int32 tschchartaxisnumberofminorgridlines = 10;
  if (has_tschchartaxisnumberofminorgridlines()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->tschchartaxisnumberofminorgridlines(), target);
  }

  // optional bool tschchartaxisplottoedges = 11;
  if (has_tschchartaxisplottoedges()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->tschchartaxisplottoedges(), target);
  }

  // optional int32 tschchartaxisscale = 12;
  if (has_tschchartaxisscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->tschchartaxisscale(), target);
  }

  // optional bool tschchartaxisshowlabels = 13;
  if (has_tschchartaxisshowlabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->tschchartaxisshowlabels(), target);
  }

  // optional bool tschchartaxisshowserieslabels = 14;
  if (has_tschchartaxisshowserieslabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->tschchartaxisshowserieslabels(), target);
  }

  // optional bool tschchartaxisshowtitle = 15;
  if (has_tschchartaxisshowtitle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->tschchartaxisshowtitle(), target);
  }

  // optional string tschchartaxistitle = 16;
  if (has_tschchartaxistitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tschchartaxistitle().data(), this->tschchartaxistitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->tschchartaxistitle(), target);
  }

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisusermax = 17;
  if (has_tschchartaxisusermax()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->tschchartaxisusermax(), target);
  }

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisusermin = 18;
  if (has_tschchartaxisusermin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->tschchartaxisusermin(), target);
  }

  // optional float tschchartaxis3dgridlineopacity = 19;
  if (has_tschchartaxis3dgridlineopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->tschchartaxis3dgridlineopacity(), target);
  }

  // optional .TSD.StrokeArchive tschchartaxis3dgridlinestroke = 20;
  if (has_tschchartaxis3dgridlinestroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->tschchartaxis3dgridlinestroke(), target);
  }

  // optional int32 tschchartaxishorizontalspacing = 21;
  if (has_tschchartaxishorizontalspacing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->tschchartaxishorizontalspacing(), target);
  }

  // optional int32 tschchartaxislabelparagraphstyleindex = 22;
  if (has_tschchartaxislabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->tschchartaxislabelparagraphstyleindex(), target);
  }

  // optional float tschchartaxislabelsorientation = 23;
  if (has_tschchartaxislabelsorientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->tschchartaxislabelsorientation(), target);
  }

  // optional float tschchartaxismajorgridlineopacity = 24;
  if (has_tschchartaxismajorgridlineopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->tschchartaxismajorgridlineopacity(), target);
  }

  // optional .TSD.ShadowArchive tschchartaxismajorgridlineshadow = 25;
  if (has_tschchartaxismajorgridlineshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->tschchartaxismajorgridlineshadow(), target);
  }

  // optional .TSD.StrokeArchive tschchartaxismajorgridlinestroke = 26;
  if (has_tschchartaxismajorgridlinestroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->tschchartaxismajorgridlinestroke(), target);
  }

  // optional float tschchartaxisminorgridlineopacity = 27;
  if (has_tschchartaxisminorgridlineopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->tschchartaxisminorgridlineopacity(), target);
  }

  // optional .TSD.ShadowArchive tschchartaxisminorgridlineshadow = 28;
  if (has_tschchartaxisminorgridlineshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->tschchartaxisminorgridlineshadow(), target);
  }

  // optional .TSD.StrokeArchive tschchartaxisminorgridlinestroke = 29;
  if (has_tschchartaxisminorgridlinestroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->tschchartaxisminorgridlinestroke(), target);
  }

  // optional bool tschchartaxisshowaxis = 30;
  if (has_tschchartaxisshowaxis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->tschchartaxisshowaxis(), target);
  }

  // optional bool tschchartaxisshowlastlabel = 31;
  if (has_tschchartaxisshowlastlabel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->tschchartaxisshowlastlabel(), target);
  }

  // optional bool tschchartaxisshowmajorgridlines = 32;
  if (has_tschchartaxisshowmajorgridlines()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->tschchartaxisshowmajorgridlines(), target);
  }

  // optional bool tschchartaxisshowmajortickmarks = 33;
  if (has_tschchartaxisshowmajortickmarks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->tschchartaxisshowmajortickmarks(), target);
  }

  // optional bool tschchartaxisshowminimumlabel = 34;
  if (has_tschchartaxisshowminimumlabel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->tschchartaxisshowminimumlabel(), target);
  }

  // optional bool tschchartaxisshowminorgridlines = 35;
  if (has_tschchartaxisshowminorgridlines()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->tschchartaxisshowminorgridlines(), target);
  }

  // optional bool tschchartaxisshowminortickmarks = 36;
  if (has_tschchartaxisshowminortickmarks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->tschchartaxisshowminortickmarks(), target);
  }

  // optional int32 tschchartaxistickmarklocation = 37;
  if (has_tschchartaxistickmarklocation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->tschchartaxistickmarklocation(), target);
  }

  // optional int32 tschchartaxistitleparagraphstyleindex = 38;
  if (has_tschchartaxistitleparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->tschchartaxistitleparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxisverticalspacing = 39;
  if (has_tschchartaxisverticalspacing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->tschchartaxisverticalspacing(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartAxisGenericPropertyMapArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tschchartaxis3dlabelposition = 1;
    if (has_tschchartaxis3dlabelposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxis3dlabelposition());
    }

    // optional .TSK.FormatStructArchive tschchartaxis1_0numberformat = 2;
    if (has_tschchartaxis1_0numberformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxis1_0numberformat());
    }

    // optional .TSK.FormatStructArchive tschchartaxisnumberformat = 3;
    if (has_tschchartaxisnumberformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxisnumberformat());
    }

    // optional .TSK.FormatStructArchive tschchartaxis1_0dateformat = 4;
    if (has_tschchartaxis1_0dateformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxis1_0dateformat());
    }

    // optional .TSK.FormatStructArchive tschchartaxisdurationformat = 5;
    if (has_tschchartaxisdurationformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxisdurationformat());
    }

    // optional .TSK.FormatStructArchive tschchartaxisdateformat = 6;
    if (has_tschchartaxisdateformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxisdateformat());
    }

    // optional int32 tschchartaxisnumberformattype = 7;
    if (has_tschchartaxisnumberformattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxisnumberformattype());
    }

    // optional int32 tschchartaxisnumberofdecades = 8;
    if (has_tschchartaxisnumberofdecades()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxisnumberofdecades());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 tschchartaxisnumberofmajorgridlines = 9;
    if (has_tschchartaxisnumberofmajorgridlines()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxisnumberofmajorgridlines());
    }

    // optional int32 tschchartaxisnumberofminorgridlines = 10;
    if (has_tschchartaxisnumberofminorgridlines()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxisnumberofminorgridlines());
    }

    // optional bool tschchartaxisplottoedges = 11;
    if (has_tschchartaxisplottoedges()) {
      total_size += 1 + 1;
    }

    // optional int32 tschchartaxisscale = 12;
    if (has_tschchartaxisscale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxisscale());
    }

    // optional bool tschchartaxisshowlabels = 13;
    if (has_tschchartaxisshowlabels()) {
      total_size += 1 + 1;
    }

    // optional bool tschchartaxisshowserieslabels = 14;
    if (has_tschchartaxisshowserieslabels()) {
      total_size += 1 + 1;
    }

    // optional bool tschchartaxisshowtitle = 15;
    if (has_tschchartaxisshowtitle()) {
      total_size += 1 + 1;
    }

    // optional string tschchartaxistitle = 16;
    if (has_tschchartaxistitle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tschchartaxistitle());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisusermax = 17;
    if (has_tschchartaxisusermax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxisusermax());
    }

    // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisusermin = 18;
    if (has_tschchartaxisusermin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxisusermin());
    }

    // optional float tschchartaxis3dgridlineopacity = 19;
    if (has_tschchartaxis3dgridlineopacity()) {
      total_size += 2 + 4;
    }

    // optional .TSD.StrokeArchive tschchartaxis3dgridlinestroke = 20;
    if (has_tschchartaxis3dgridlinestroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxis3dgridlinestroke());
    }

    // optional int32 tschchartaxishorizontalspacing = 21;
    if (has_tschchartaxishorizontalspacing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxishorizontalspacing());
    }

    // optional int32 tschchartaxislabelparagraphstyleindex = 22;
    if (has_tschchartaxislabelparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxislabelparagraphstyleindex());
    }

    // optional float tschchartaxislabelsorientation = 23;
    if (has_tschchartaxislabelsorientation()) {
      total_size += 2 + 4;
    }

    // optional float tschchartaxismajorgridlineopacity = 24;
    if (has_tschchartaxismajorgridlineopacity()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .TSD.ShadowArchive tschchartaxismajorgridlineshadow = 25;
    if (has_tschchartaxismajorgridlineshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxismajorgridlineshadow());
    }

    // optional .TSD.StrokeArchive tschchartaxismajorgridlinestroke = 26;
    if (has_tschchartaxismajorgridlinestroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxismajorgridlinestroke());
    }

    // optional float tschchartaxisminorgridlineopacity = 27;
    if (has_tschchartaxisminorgridlineopacity()) {
      total_size += 2 + 4;
    }

    // optional .TSD.ShadowArchive tschchartaxisminorgridlineshadow = 28;
    if (has_tschchartaxisminorgridlineshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxisminorgridlineshadow());
    }

    // optional .TSD.StrokeArchive tschchartaxisminorgridlinestroke = 29;
    if (has_tschchartaxisminorgridlinestroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartaxisminorgridlinestroke());
    }

    // optional bool tschchartaxisshowaxis = 30;
    if (has_tschchartaxisshowaxis()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisshowlastlabel = 31;
    if (has_tschchartaxisshowlastlabel()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisshowmajorgridlines = 32;
    if (has_tschchartaxisshowmajorgridlines()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional bool tschchartaxisshowmajortickmarks = 33;
    if (has_tschchartaxisshowmajortickmarks()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisshowminimumlabel = 34;
    if (has_tschchartaxisshowminimumlabel()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisshowminorgridlines = 35;
    if (has_tschchartaxisshowminorgridlines()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisshowminortickmarks = 36;
    if (has_tschchartaxisshowminortickmarks()) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartaxistickmarklocation = 37;
    if (has_tschchartaxistickmarklocation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxistickmarklocation());
    }

    // optional int32 tschchartaxistitleparagraphstyleindex = 38;
    if (has_tschchartaxistitleparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxistitleparagraphstyleindex());
    }

    // optional int32 tschchartaxisverticalspacing = 39;
    if (has_tschchartaxisverticalspacing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartaxisverticalspacing());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartAxisGenericPropertyMapArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartAxisGenericPropertyMapArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartAxisGenericPropertyMapArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartAxisGenericPropertyMapArchive::MergeFrom(const ChartAxisGenericPropertyMapArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tschchartaxis3dlabelposition()) {
      set_tschchartaxis3dlabelposition(from.tschchartaxis3dlabelposition());
    }
    if (from.has_tschchartaxis1_0numberformat()) {
      mutable_tschchartaxis1_0numberformat()->::TSK::FormatStructArchive::MergeFrom(from.tschchartaxis1_0numberformat());
    }
    if (from.has_tschchartaxisnumberformat()) {
      mutable_tschchartaxisnumberformat()->::TSK::FormatStructArchive::MergeFrom(from.tschchartaxisnumberformat());
    }
    if (from.has_tschchartaxis1_0dateformat()) {
      mutable_tschchartaxis1_0dateformat()->::TSK::FormatStructArchive::MergeFrom(from.tschchartaxis1_0dateformat());
    }
    if (from.has_tschchartaxisdurationformat()) {
      mutable_tschchartaxisdurationformat()->::TSK::FormatStructArchive::MergeFrom(from.tschchartaxisdurationformat());
    }
    if (from.has_tschchartaxisdateformat()) {
      mutable_tschchartaxisdateformat()->::TSK::FormatStructArchive::MergeFrom(from.tschchartaxisdateformat());
    }
    if (from.has_tschchartaxisnumberformattype()) {
      set_tschchartaxisnumberformattype(from.tschchartaxisnumberformattype());
    }
    if (from.has_tschchartaxisnumberofdecades()) {
      set_tschchartaxisnumberofdecades(from.tschchartaxisnumberofdecades());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tschchartaxisnumberofmajorgridlines()) {
      set_tschchartaxisnumberofmajorgridlines(from.tschchartaxisnumberofmajorgridlines());
    }
    if (from.has_tschchartaxisnumberofminorgridlines()) {
      set_tschchartaxisnumberofminorgridlines(from.tschchartaxisnumberofminorgridlines());
    }
    if (from.has_tschchartaxisplottoedges()) {
      set_tschchartaxisplottoedges(from.tschchartaxisplottoedges());
    }
    if (from.has_tschchartaxisscale()) {
      set_tschchartaxisscale(from.tschchartaxisscale());
    }
    if (from.has_tschchartaxisshowlabels()) {
      set_tschchartaxisshowlabels(from.tschchartaxisshowlabels());
    }
    if (from.has_tschchartaxisshowserieslabels()) {
      set_tschchartaxisshowserieslabels(from.tschchartaxisshowserieslabels());
    }
    if (from.has_tschchartaxisshowtitle()) {
      set_tschchartaxisshowtitle(from.tschchartaxisshowtitle());
    }
    if (from.has_tschchartaxistitle()) {
      set_tschchartaxistitle(from.tschchartaxistitle());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tschchartaxisusermax()) {
      mutable_tschchartaxisusermax()->::TSCH::ChartsNSNumberDoubleArchive::MergeFrom(from.tschchartaxisusermax());
    }
    if (from.has_tschchartaxisusermin()) {
      mutable_tschchartaxisusermin()->::TSCH::ChartsNSNumberDoubleArchive::MergeFrom(from.tschchartaxisusermin());
    }
    if (from.has_tschchartaxis3dgridlineopacity()) {
      set_tschchartaxis3dgridlineopacity(from.tschchartaxis3dgridlineopacity());
    }
    if (from.has_tschchartaxis3dgridlinestroke()) {
      mutable_tschchartaxis3dgridlinestroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartaxis3dgridlinestroke());
    }
    if (from.has_tschchartaxishorizontalspacing()) {
      set_tschchartaxishorizontalspacing(from.tschchartaxishorizontalspacing());
    }
    if (from.has_tschchartaxislabelparagraphstyleindex()) {
      set_tschchartaxislabelparagraphstyleindex(from.tschchartaxislabelparagraphstyleindex());
    }
    if (from.has_tschchartaxislabelsorientation()) {
      set_tschchartaxislabelsorientation(from.tschchartaxislabelsorientation());
    }
    if (from.has_tschchartaxismajorgridlineopacity()) {
      set_tschchartaxismajorgridlineopacity(from.tschchartaxismajorgridlineopacity());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_tschchartaxismajorgridlineshadow()) {
      mutable_tschchartaxismajorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartaxismajorgridlineshadow());
    }
    if (from.has_tschchartaxismajorgridlinestroke()) {
      mutable_tschchartaxismajorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartaxismajorgridlinestroke());
    }
    if (from.has_tschchartaxisminorgridlineopacity()) {
      set_tschchartaxisminorgridlineopacity(from.tschchartaxisminorgridlineopacity());
    }
    if (from.has_tschchartaxisminorgridlineshadow()) {
      mutable_tschchartaxisminorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartaxisminorgridlineshadow());
    }
    if (from.has_tschchartaxisminorgridlinestroke()) {
      mutable_tschchartaxisminorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartaxisminorgridlinestroke());
    }
    if (from.has_tschchartaxisshowaxis()) {
      set_tschchartaxisshowaxis(from.tschchartaxisshowaxis());
    }
    if (from.has_tschchartaxisshowlastlabel()) {
      set_tschchartaxisshowlastlabel(from.tschchartaxisshowlastlabel());
    }
    if (from.has_tschchartaxisshowmajorgridlines()) {
      set_tschchartaxisshowmajorgridlines(from.tschchartaxisshowmajorgridlines());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_tschchartaxisshowmajortickmarks()) {
      set_tschchartaxisshowmajortickmarks(from.tschchartaxisshowmajortickmarks());
    }
    if (from.has_tschchartaxisshowminimumlabel()) {
      set_tschchartaxisshowminimumlabel(from.tschchartaxisshowminimumlabel());
    }
    if (from.has_tschchartaxisshowminorgridlines()) {
      set_tschchartaxisshowminorgridlines(from.tschchartaxisshowminorgridlines());
    }
    if (from.has_tschchartaxisshowminortickmarks()) {
      set_tschchartaxisshowminortickmarks(from.tschchartaxisshowminortickmarks());
    }
    if (from.has_tschchartaxistickmarklocation()) {
      set_tschchartaxistickmarklocation(from.tschchartaxistickmarklocation());
    }
    if (from.has_tschchartaxistitleparagraphstyleindex()) {
      set_tschchartaxistitleparagraphstyleindex(from.tschchartaxistitleparagraphstyleindex());
    }
    if (from.has_tschchartaxisverticalspacing()) {
      set_tschchartaxisverticalspacing(from.tschchartaxisverticalspacing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartAxisGenericPropertyMapArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartAxisGenericPropertyMapArchive::CopyFrom(const ChartAxisGenericPropertyMapArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartAxisGenericPropertyMapArchive::IsInitialized() const {

  if (has_tschchartaxis1_0numberformat()) {
    if (!this->tschchartaxis1_0numberformat().IsInitialized()) return false;
  }
  if (has_tschchartaxisnumberformat()) {
    if (!this->tschchartaxisnumberformat().IsInitialized()) return false;
  }
  if (has_tschchartaxis1_0dateformat()) {
    if (!this->tschchartaxis1_0dateformat().IsInitialized()) return false;
  }
  if (has_tschchartaxisdurationformat()) {
    if (!this->tschchartaxisdurationformat().IsInitialized()) return false;
  }
  if (has_tschchartaxisdateformat()) {
    if (!this->tschchartaxisdateformat().IsInitialized()) return false;
  }
  if (has_tschchartaxis3dgridlinestroke()) {
    if (!this->tschchartaxis3dgridlinestroke().IsInitialized()) return false;
  }
  if (has_tschchartaxismajorgridlineshadow()) {
    if (!this->tschchartaxismajorgridlineshadow().IsInitialized()) return false;
  }
  if (has_tschchartaxismajorgridlinestroke()) {
    if (!this->tschchartaxismajorgridlinestroke().IsInitialized()) return false;
  }
  if (has_tschchartaxisminorgridlineshadow()) {
    if (!this->tschchartaxisminorgridlineshadow().IsInitialized()) return false;
  }
  if (has_tschchartaxisminorgridlinestroke()) {
    if (!this->tschchartaxisminorgridlinestroke().IsInitialized()) return false;
  }
  return true;
}

void ChartAxisGenericPropertyMapArchive::Swap(ChartAxisGenericPropertyMapArchive* other) {
  if (other != this) {
    std::swap(tschchartaxis3dlabelposition_, other->tschchartaxis3dlabelposition_);
    std::swap(tschchartaxis1_0numberformat_, other->tschchartaxis1_0numberformat_);
    std::swap(tschchartaxisnumberformat_, other->tschchartaxisnumberformat_);
    std::swap(tschchartaxis1_0dateformat_, other->tschchartaxis1_0dateformat_);
    std::swap(tschchartaxisdurationformat_, other->tschchartaxisdurationformat_);
    std::swap(tschchartaxisdateformat_, other->tschchartaxisdateformat_);
    std::swap(tschchartaxisnumberformattype_, other->tschchartaxisnumberformattype_);
    std::swap(tschchartaxisnumberofdecades_, other->tschchartaxisnumberofdecades_);
    std::swap(tschchartaxisnumberofmajorgridlines_, other->tschchartaxisnumberofmajorgridlines_);
    std::swap(tschchartaxisnumberofminorgridlines_, other->tschchartaxisnumberofminorgridlines_);
    std::swap(tschchartaxisplottoedges_, other->tschchartaxisplottoedges_);
    std::swap(tschchartaxisscale_, other->tschchartaxisscale_);
    std::swap(tschchartaxisshowlabels_, other->tschchartaxisshowlabels_);
    std::swap(tschchartaxisshowserieslabels_, other->tschchartaxisshowserieslabels_);
    std::swap(tschchartaxisshowtitle_, other->tschchartaxisshowtitle_);
    std::swap(tschchartaxistitle_, other->tschchartaxistitle_);
    std::swap(tschchartaxisusermax_, other->tschchartaxisusermax_);
    std::swap(tschchartaxisusermin_, other->tschchartaxisusermin_);
    std::swap(tschchartaxis3dgridlineopacity_, other->tschchartaxis3dgridlineopacity_);
    std::swap(tschchartaxis3dgridlinestroke_, other->tschchartaxis3dgridlinestroke_);
    std::swap(tschchartaxishorizontalspacing_, other->tschchartaxishorizontalspacing_);
    std::swap(tschchartaxislabelparagraphstyleindex_, other->tschchartaxislabelparagraphstyleindex_);
    std::swap(tschchartaxislabelsorientation_, other->tschchartaxislabelsorientation_);
    std::swap(tschchartaxismajorgridlineopacity_, other->tschchartaxismajorgridlineopacity_);
    std::swap(tschchartaxismajorgridlineshadow_, other->tschchartaxismajorgridlineshadow_);
    std::swap(tschchartaxismajorgridlinestroke_, other->tschchartaxismajorgridlinestroke_);
    std::swap(tschchartaxisminorgridlineopacity_, other->tschchartaxisminorgridlineopacity_);
    std::swap(tschchartaxisminorgridlineshadow_, other->tschchartaxisminorgridlineshadow_);
    std::swap(tschchartaxisminorgridlinestroke_, other->tschchartaxisminorgridlinestroke_);
    std::swap(tschchartaxisshowaxis_, other->tschchartaxisshowaxis_);
    std::swap(tschchartaxisshowlastlabel_, other->tschchartaxisshowlastlabel_);
    std::swap(tschchartaxisshowmajorgridlines_, other->tschchartaxisshowmajorgridlines_);
    std::swap(tschchartaxisshowmajortickmarks_, other->tschchartaxisshowmajortickmarks_);
    std::swap(tschchartaxisshowminimumlabel_, other->tschchartaxisshowminimumlabel_);
    std::swap(tschchartaxisshowminorgridlines_, other->tschchartaxisshowminorgridlines_);
    std::swap(tschchartaxisshowminortickmarks_, other->tschchartaxisshowminortickmarks_);
    std::swap(tschchartaxistickmarklocation_, other->tschchartaxistickmarklocation_);
    std::swap(tschchartaxistitleparagraphstyleindex_, other->tschchartaxistitleparagraphstyleindex_);
    std::swap(tschchartaxisverticalspacing_, other->tschchartaxisverticalspacing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartAxisGenericPropertyMapArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartAxisGenericPropertyMapArchive_descriptor_;
  metadata.reflection = ChartAxisGenericPropertyMapArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriesadjustmentscaleFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartserieserrorbarcustomnegativedataFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartserieserrorbarcustomnegativedatascatterxFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartserieserrorbarcustompositivedataFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartserieserrorbarcustompositivedatascatterxFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartserieserrorbarfixedvalueFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartserieserrorbarfixedvaluescatterxFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartserieserrorbarpercentvalueFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartserieserrorbarpercentvaluescatterxFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartserieserrorbarsettingFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartserieserrorbarsettingscatterxFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartserieserrorbarstddevvalueFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartserieserrorbarstddevvaluescatterxFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartserieserrorbartypeFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartserieserrorbartypescatterxFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartserieslabelexplosionFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartserieslinetypeFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseries10NumberformatFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriesnumberformatFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseries10DateformatFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriesdurationformatFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriesdateformatFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriesnumberformattypeFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriespercentnumberformatFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriesseriestypeFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriesshowerrorbarFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriesshowerrorbarscatterxFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriesshowlineFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriesshownegativedataFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriesshowserieslabelsFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriesshowsymbolFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriesshowtrendlineFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriesshowvaluelabelsFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriessizedimensionFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriessymboltypeFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriestrendlineequationoffsetxFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriestrendlineequationoffsetyFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriestrendlinelabelstringFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriestrendlineorderFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriestrendlineperiodFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriestrendlinersquaredoffsetxFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriestrendlinersquaredoffsetyFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriestrendlineshowequationFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriestrendlineshowlabelFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriestrendlineshowr2ValueFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriestrendlinetypeFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartserieswedgeexplosionFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriesyaxisordinalFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriesvaluelabelsaxisFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartserieserrorbarlineendFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartserieserrorbarlineendscatterxFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartserieserrorbarshadowFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartserieserrorbarstrokeFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartserieserrorbarstrokescatterxFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriesfillFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartserieslabelparagraphstyleindexFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriesopacityFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriesoutsidelabelparagraphstyleindexFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriesshadowFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriesstrokeFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriessymbolfillFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriessymbolfilluseseriesfillFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriessymbolfilluseseriesstrokeFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriessymbolsizeFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriessymbolstrokeFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriestrendlineequationopacityFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriestrendlineequationparagraphstyleindexFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriestrendlinersquaredopacityFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriestrendlinersquaredparagraphstyleindexFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriestrendlineshadowFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriestrendlinestrokeFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriesvaluelabelpositionFieldNumber;
const int ChartSeriesGenericPropertyMapArchive::kTschchartseriesshowlabelsinfrontFieldNumber;
#endif  // !_MSC_VER

ChartSeriesGenericPropertyMapArchive::ChartSeriesGenericPropertyMapArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartSeriesGenericPropertyMapArchive::InitAsDefaultInstance() {
  tschchartserieserrorbarcustomnegativedata_ = const_cast< ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive*>(&::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::default_instance());
  tschchartserieserrorbarcustomnegativedatascatterx_ = const_cast< ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive*>(&::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::default_instance());
  tschchartserieserrorbarcustompositivedata_ = const_cast< ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive*>(&::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::default_instance());
  tschchartserieserrorbarcustompositivedatascatterx_ = const_cast< ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive*>(&::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::default_instance());
  tschchartseries1_0numberformat_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  tschchartseriesnumberformat_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  tschchartseries1_0dateformat_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  tschchartseriesdurationformat_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  tschchartseriesdateformat_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  tschchartseriespercentnumberformat_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  tschchartserieserrorbarlineend_ = const_cast< ::TSD::LineEndArchive*>(&::TSD::LineEndArchive::default_instance());
  tschchartserieserrorbarlineendscatterx_ = const_cast< ::TSD::LineEndArchive*>(&::TSD::LineEndArchive::default_instance());
  tschchartserieserrorbarshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartserieserrorbarstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartserieserrorbarstrokescatterx_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriesfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseriesshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseriesstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriessymbolfill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  tschchartseriessymbolstroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  tschchartseriestrendlineshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  tschchartseriestrendlinestroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
}

ChartSeriesGenericPropertyMapArchive::ChartSeriesGenericPropertyMapArchive(const ChartSeriesGenericPropertyMapArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartSeriesGenericPropertyMapArchive::SharedCtor() {
  _cached_size_ = 0;
  tschchartseriesadjustmentscale_ = 0;
  tschchartserieserrorbarcustomnegativedata_ = NULL;
  tschchartserieserrorbarcustomnegativedatascatterx_ = NULL;
  tschchartserieserrorbarcustompositivedata_ = NULL;
  tschchartserieserrorbarcustompositivedatascatterx_ = NULL;
  tschchartserieserrorbarfixedvalue_ = 0;
  tschchartserieserrorbarfixedvaluescatterx_ = 0;
  tschchartserieserrorbarpercentvalue_ = 0;
  tschchartserieserrorbarpercentvaluescatterx_ = 0;
  tschchartserieserrorbarsetting_ = 0;
  tschchartserieserrorbarsettingscatterx_ = 0;
  tschchartserieserrorbarstddevvalue_ = 0;
  tschchartserieserrorbarstddevvaluescatterx_ = 0;
  tschchartserieserrorbartype_ = 0;
  tschchartserieserrorbartypescatterx_ = 0;
  tschchartserieslabelexplosion_ = 0;
  tschchartserieslinetype_ = 0;
  tschchartseries1_0numberformat_ = NULL;
  tschchartseriesnumberformat_ = NULL;
  tschchartseries1_0dateformat_ = NULL;
  tschchartseriesdurationformat_ = NULL;
  tschchartseriesdateformat_ = NULL;
  tschchartseriesnumberformattype_ = 0;
  tschchartseriespercentnumberformat_ = NULL;
  tschchartseriesseriestype_ = 0;
  tschchartseriesshowerrorbar_ = false;
  tschchartseriesshowerrorbarscatterx_ = false;
  tschchartseriesshowline_ = false;
  tschchartseriesshownegativedata_ = false;
  tschchartseriesshowserieslabels_ = false;
  tschchartseriesshowsymbol_ = false;
  tschchartseriesshowtrendline_ = false;
  tschchartseriesshowvaluelabels_ = false;
  tschchartseriessizedimension_ = 0;
  tschchartseriessymboltype_ = 0;
  tschchartseriestrendlineequationoffsetx_ = 0;
  tschchartseriestrendlineequationoffsety_ = 0;
  tschchartseriestrendlinelabelstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tschchartseriestrendlineorder_ = 0;
  tschchartseriestrendlineperiod_ = 0;
  tschchartseriestrendlinersquaredoffsetx_ = 0;
  tschchartseriestrendlinersquaredoffsety_ = 0;
  tschchartseriestrendlineshowequation_ = false;
  tschchartseriestrendlineshowlabel_ = false;
  tschchartseriestrendlineshowr2value_ = false;
  tschchartseriestrendlinetype_ = 0;
  tschchartserieswedgeexplosion_ = 0;
  tschchartseriesyaxisordinal_ = 0;
  tschchartseriesvaluelabelsaxis_ = 0;
  tschchartserieserrorbarlineend_ = NULL;
  tschchartserieserrorbarlineendscatterx_ = NULL;
  tschchartserieserrorbarshadow_ = NULL;
  tschchartserieserrorbarstroke_ = NULL;
  tschchartserieserrorbarstrokescatterx_ = NULL;
  tschchartseriesfill_ = NULL;
  tschchartserieslabelparagraphstyleindex_ = 0;
  tschchartseriesopacity_ = 0;
  tschchartseriesoutsidelabelparagraphstyleindex_ = 0;
  tschchartseriesshadow_ = NULL;
  tschchartseriesstroke_ = NULL;
  tschchartseriessymbolfill_ = NULL;
  tschchartseriessymbolfilluseseriesfill_ = false;
  tschchartseriessymbolfilluseseriesstroke_ = false;
  tschchartseriessymbolsize_ = 0;
  tschchartseriessymbolstroke_ = NULL;
  tschchartseriestrendlineequationopacity_ = 0;
  tschchartseriestrendlineequationparagraphstyleindex_ = 0;
  tschchartseriestrendlinersquaredopacity_ = 0;
  tschchartseriestrendlinersquaredparagraphstyleindex_ = 0;
  tschchartseriestrendlineshadow_ = NULL;
  tschchartseriestrendlinestroke_ = NULL;
  tschchartseriesvaluelabelposition_ = 0;
  tschchartseriesshowlabelsinfront_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartSeriesGenericPropertyMapArchive::~ChartSeriesGenericPropertyMapArchive() {
  SharedDtor();
}

void ChartSeriesGenericPropertyMapArchive::SharedDtor() {
  if (tschchartseriestrendlinelabelstring_ != &::google::protobuf::internal::kEmptyString) {
    delete tschchartseriestrendlinelabelstring_;
  }
  if (this != default_instance_) {
    delete tschchartserieserrorbarcustomnegativedata_;
    delete tschchartserieserrorbarcustomnegativedatascatterx_;
    delete tschchartserieserrorbarcustompositivedata_;
    delete tschchartserieserrorbarcustompositivedatascatterx_;
    delete tschchartseries1_0numberformat_;
    delete tschchartseriesnumberformat_;
    delete tschchartseries1_0dateformat_;
    delete tschchartseriesdurationformat_;
    delete tschchartseriesdateformat_;
    delete tschchartseriespercentnumberformat_;
    delete tschchartserieserrorbarlineend_;
    delete tschchartserieserrorbarlineendscatterx_;
    delete tschchartserieserrorbarshadow_;
    delete tschchartserieserrorbarstroke_;
    delete tschchartserieserrorbarstrokescatterx_;
    delete tschchartseriesfill_;
    delete tschchartseriesshadow_;
    delete tschchartseriesstroke_;
    delete tschchartseriessymbolfill_;
    delete tschchartseriessymbolstroke_;
    delete tschchartseriestrendlineshadow_;
    delete tschchartseriestrendlinestroke_;
  }
}

void ChartSeriesGenericPropertyMapArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartSeriesGenericPropertyMapArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartSeriesGenericPropertyMapArchive_descriptor_;
}

const ChartSeriesGenericPropertyMapArchive& ChartSeriesGenericPropertyMapArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eGEN_2eproto();
  return *default_instance_;
}

ChartSeriesGenericPropertyMapArchive* ChartSeriesGenericPropertyMapArchive::default_instance_ = NULL;

ChartSeriesGenericPropertyMapArchive* ChartSeriesGenericPropertyMapArchive::New() const {
  return new ChartSeriesGenericPropertyMapArchive;
}

void ChartSeriesGenericPropertyMapArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tschchartseriesadjustmentscale_ = 0;
    if (has_tschchartserieserrorbarcustomnegativedata()) {
      if (tschchartserieserrorbarcustomnegativedata_ != NULL) tschchartserieserrorbarcustomnegativedata_->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::Clear();
    }
    if (has_tschchartserieserrorbarcustomnegativedatascatterx()) {
      if (tschchartserieserrorbarcustomnegativedatascatterx_ != NULL) tschchartserieserrorbarcustomnegativedatascatterx_->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::Clear();
    }
    if (has_tschchartserieserrorbarcustompositivedata()) {
      if (tschchartserieserrorbarcustompositivedata_ != NULL) tschchartserieserrorbarcustompositivedata_->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::Clear();
    }
    if (has_tschchartserieserrorbarcustompositivedatascatterx()) {
      if (tschchartserieserrorbarcustompositivedatascatterx_ != NULL) tschchartserieserrorbarcustompositivedatascatterx_->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::Clear();
    }
    tschchartserieserrorbarfixedvalue_ = 0;
    tschchartserieserrorbarfixedvaluescatterx_ = 0;
    tschchartserieserrorbarpercentvalue_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    tschchartserieserrorbarpercentvaluescatterx_ = 0;
    tschchartserieserrorbarsetting_ = 0;
    tschchartserieserrorbarsettingscatterx_ = 0;
    tschchartserieserrorbarstddevvalue_ = 0;
    tschchartserieserrorbarstddevvaluescatterx_ = 0;
    tschchartserieserrorbartype_ = 0;
    tschchartserieserrorbartypescatterx_ = 0;
    tschchartserieslabelexplosion_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    tschchartserieslinetype_ = 0;
    if (has_tschchartseries1_0numberformat()) {
      if (tschchartseries1_0numberformat_ != NULL) tschchartseries1_0numberformat_->::TSK::FormatStructArchive::Clear();
    }
    if (has_tschchartseriesnumberformat()) {
      if (tschchartseriesnumberformat_ != NULL) tschchartseriesnumberformat_->::TSK::FormatStructArchive::Clear();
    }
    if (has_tschchartseries1_0dateformat()) {
      if (tschchartseries1_0dateformat_ != NULL) tschchartseries1_0dateformat_->::TSK::FormatStructArchive::Clear();
    }
    if (has_tschchartseriesdurationformat()) {
      if (tschchartseriesdurationformat_ != NULL) tschchartseriesdurationformat_->::TSK::FormatStructArchive::Clear();
    }
    if (has_tschchartseriesdateformat()) {
      if (tschchartseriesdateformat_ != NULL) tschchartseriesdateformat_->::TSK::FormatStructArchive::Clear();
    }
    tschchartseriesnumberformattype_ = 0;
    if (has_tschchartseriespercentnumberformat()) {
      if (tschchartseriespercentnumberformat_ != NULL) tschchartseriespercentnumberformat_->::TSK::FormatStructArchive::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    tschchartseriesseriestype_ = 0;
    tschchartseriesshowerrorbar_ = false;
    tschchartseriesshowerrorbarscatterx_ = false;
    tschchartseriesshowline_ = false;
    tschchartseriesshownegativedata_ = false;
    tschchartseriesshowserieslabels_ = false;
    tschchartseriesshowsymbol_ = false;
    tschchartseriesshowtrendline_ = false;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    tschchartseriesshowvaluelabels_ = false;
    tschchartseriessizedimension_ = 0;
    tschchartseriessymboltype_ = 0;
    tschchartseriestrendlineequationoffsetx_ = 0;
    tschchartseriestrendlineequationoffsety_ = 0;
    if (has_tschchartseriestrendlinelabelstring()) {
      if (tschchartseriestrendlinelabelstring_ != &::google::protobuf::internal::kEmptyString) {
        tschchartseriestrendlinelabelstring_->clear();
      }
    }
    tschchartseriestrendlineorder_ = 0;
    tschchartseriestrendlineperiod_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    tschchartseriestrendlinersquaredoffsetx_ = 0;
    tschchartseriestrendlinersquaredoffsety_ = 0;
    tschchartseriestrendlineshowequation_ = false;
    tschchartseriestrendlineshowlabel_ = false;
    tschchartseriestrendlineshowr2value_ = false;
    tschchartseriestrendlinetype_ = 0;
    tschchartserieswedgeexplosion_ = 0;
    tschchartseriesyaxisordinal_ = 0;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    tschchartseriesvaluelabelsaxis_ = 0;
    if (has_tschchartserieserrorbarlineend()) {
      if (tschchartserieserrorbarlineend_ != NULL) tschchartserieserrorbarlineend_->::TSD::LineEndArchive::Clear();
    }
    if (has_tschchartserieserrorbarlineendscatterx()) {
      if (tschchartserieserrorbarlineendscatterx_ != NULL) tschchartserieserrorbarlineendscatterx_->::TSD::LineEndArchive::Clear();
    }
    if (has_tschchartserieserrorbarshadow()) {
      if (tschchartserieserrorbarshadow_ != NULL) tschchartserieserrorbarshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartserieserrorbarstroke()) {
      if (tschchartserieserrorbarstroke_ != NULL) tschchartserieserrorbarstroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartserieserrorbarstrokescatterx()) {
      if (tschchartserieserrorbarstrokescatterx_ != NULL) tschchartserieserrorbarstrokescatterx_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartseriesfill()) {
      if (tschchartseriesfill_ != NULL) tschchartseriesfill_->::TSD::FillArchive::Clear();
    }
    tschchartserieslabelparagraphstyleindex_ = 0;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    tschchartseriesopacity_ = 0;
    tschchartseriesoutsidelabelparagraphstyleindex_ = 0;
    if (has_tschchartseriesshadow()) {
      if (tschchartseriesshadow_ != NULL) tschchartseriesshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartseriesstroke()) {
      if (tschchartseriesstroke_ != NULL) tschchartseriesstroke_->::TSD::StrokeArchive::Clear();
    }
    if (has_tschchartseriessymbolfill()) {
      if (tschchartseriessymbolfill_ != NULL) tschchartseriessymbolfill_->::TSD::FillArchive::Clear();
    }
    tschchartseriessymbolfilluseseriesfill_ = false;
    tschchartseriessymbolfilluseseriesstroke_ = false;
    tschchartseriessymbolsize_ = 0;
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (has_tschchartseriessymbolstroke()) {
      if (tschchartseriessymbolstroke_ != NULL) tschchartseriessymbolstroke_->::TSD::StrokeArchive::Clear();
    }
    tschchartseriestrendlineequationopacity_ = 0;
    tschchartseriestrendlineequationparagraphstyleindex_ = 0;
    tschchartseriestrendlinersquaredopacity_ = 0;
    tschchartseriestrendlinersquaredparagraphstyleindex_ = 0;
    if (has_tschchartseriestrendlineshadow()) {
      if (tschchartseriestrendlineshadow_ != NULL) tschchartseriestrendlineshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_tschchartseriestrendlinestroke()) {
      if (tschchartseriestrendlinestroke_ != NULL) tschchartseriestrendlinestroke_->::TSD::StrokeArchive::Clear();
    }
    tschchartseriesvaluelabelposition_ = 0;
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    tschchartseriesshowlabelsinfront_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartSeriesGenericPropertyMapArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float tschchartseriesadjustmentscale = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesadjustmentscale_)));
          set_has_tschchartseriesadjustmentscale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tschchartserieserrorbarcustomnegativedata;
        break;
      }

      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustomnegativedata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartserieserrorbarcustomnegativedata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartserieserrorbarcustomnegativedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tschchartserieserrorbarcustomnegativedatascatterx;
        break;
      }

      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustomnegativedatascatterx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartserieserrorbarcustomnegativedatascatterx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartserieserrorbarcustomnegativedatascatterx()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tschchartserieserrorbarcustompositivedata;
        break;
      }

      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustompositivedata = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartserieserrorbarcustompositivedata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartserieserrorbarcustompositivedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tschchartserieserrorbarcustompositivedatascatterx;
        break;
      }

      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustompositivedatascatterx = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartserieserrorbarcustompositivedatascatterx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartserieserrorbarcustompositivedatascatterx()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_tschchartserieserrorbarfixedvalue;
        break;
      }

      // optional float tschchartserieserrorbarfixedvalue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartserieserrorbarfixedvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartserieserrorbarfixedvalue_)));
          set_has_tschchartserieserrorbarfixedvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_tschchartserieserrorbarfixedvaluescatterx;
        break;
      }

      // optional float tschchartserieserrorbarfixedvaluescatterx = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartserieserrorbarfixedvaluescatterx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartserieserrorbarfixedvaluescatterx_)));
          set_has_tschchartserieserrorbarfixedvaluescatterx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_tschchartserieserrorbarpercentvalue;
        break;
      }

      // optional float tschchartserieserrorbarpercentvalue = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartserieserrorbarpercentvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartserieserrorbarpercentvalue_)));
          set_has_tschchartserieserrorbarpercentvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_tschchartserieserrorbarpercentvaluescatterx;
        break;
      }

      // optional float tschchartserieserrorbarpercentvaluescatterx = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartserieserrorbarpercentvaluescatterx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartserieserrorbarpercentvaluescatterx_)));
          set_has_tschchartserieserrorbarpercentvaluescatterx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_tschchartserieserrorbarsetting;
        break;
      }

      // optional int32 tschchartserieserrorbarsetting = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartserieserrorbarsetting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartserieserrorbarsetting_)));
          set_has_tschchartserieserrorbarsetting();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_tschchartserieserrorbarsettingscatterx;
        break;
      }

      // optional int32 tschchartserieserrorbarsettingscatterx = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartserieserrorbarsettingscatterx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartserieserrorbarsettingscatterx_)));
          set_has_tschchartserieserrorbarsettingscatterx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_tschchartserieserrorbarstddevvalue;
        break;
      }

      // optional float tschchartserieserrorbarstddevvalue = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartserieserrorbarstddevvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartserieserrorbarstddevvalue_)));
          set_has_tschchartserieserrorbarstddevvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_tschchartserieserrorbarstddevvaluescatterx;
        break;
      }

      // optional float tschchartserieserrorbarstddevvaluescatterx = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartserieserrorbarstddevvaluescatterx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartserieserrorbarstddevvaluescatterx_)));
          set_has_tschchartserieserrorbarstddevvaluescatterx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_tschchartserieserrorbartype;
        break;
      }

      // optional int32 tschchartserieserrorbartype = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartserieserrorbartype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartserieserrorbartype_)));
          set_has_tschchartserieserrorbartype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_tschchartserieserrorbartypescatterx;
        break;
      }

      // optional int32 tschchartserieserrorbartypescatterx = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartserieserrorbartypescatterx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartserieserrorbartypescatterx_)));
          set_has_tschchartserieserrorbartypescatterx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_tschchartserieslabelexplosion;
        break;
      }

      // optional float tschchartserieslabelexplosion = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartserieslabelexplosion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartserieslabelexplosion_)));
          set_has_tschchartserieslabelexplosion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_tschchartserieslinetype;
        break;
      }

      // optional int32 tschchartserieslinetype = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartserieslinetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartserieslinetype_)));
          set_has_tschchartserieslinetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_tschchartseries1_0numberformat;
        break;
      }

      // optional .TSK.FormatStructArchive tschchartseries1_0numberformat = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseries1_0numberformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseries1_0numberformat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_tschchartseriesnumberformat;
        break;
      }

      // optional .TSK.FormatStructArchive tschchartseriesnumberformat = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesnumberformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesnumberformat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_tschchartseries1_0dateformat;
        break;
      }

      // optional .TSK.FormatStructArchive tschchartseries1_0dateformat = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseries1_0dateformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseries1_0dateformat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_tschchartseriesdurationformat;
        break;
      }

      // optional .TSK.FormatStructArchive tschchartseriesdurationformat = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdurationformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdurationformat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_tschchartseriesdateformat;
        break;
      }

      // optional .TSK.FormatStructArchive tschchartseriesdateformat = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesdateformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesdateformat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_tschchartseriesnumberformattype;
        break;
      }

      // optional int32 tschchartseriesnumberformattype = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesnumberformattype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesnumberformattype_)));
          set_has_tschchartseriesnumberformattype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_tschchartseriespercentnumberformat;
        break;
      }

      // optional .TSK.FormatStructArchive tschchartseriespercentnumberformat = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriespercentnumberformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriespercentnumberformat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_tschchartseriesseriestype;
        break;
      }

      // optional int32 tschchartseriesseriestype = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesseriestype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesseriestype_)));
          set_has_tschchartseriesseriestype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_tschchartseriesshowerrorbar;
        break;
      }

      // optional bool tschchartseriesshowerrorbar = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesshowerrorbar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesshowerrorbar_)));
          set_has_tschchartseriesshowerrorbar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_tschchartseriesshowerrorbarscatterx;
        break;
      }

      // optional bool tschchartseriesshowerrorbarscatterx = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesshowerrorbarscatterx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesshowerrorbarscatterx_)));
          set_has_tschchartseriesshowerrorbarscatterx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_tschchartseriesshowline;
        break;
      }

      // optional bool tschchartseriesshowline = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesshowline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesshowline_)));
          set_has_tschchartseriesshowline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_tschchartseriesshownegativedata;
        break;
      }

      // optional bool tschchartseriesshownegativedata = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesshownegativedata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesshownegativedata_)));
          set_has_tschchartseriesshownegativedata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_tschchartseriesshowserieslabels;
        break;
      }

      // optional bool tschchartseriesshowserieslabels = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesshowserieslabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesshowserieslabels_)));
          set_has_tschchartseriesshowserieslabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_tschchartseriesshowsymbol;
        break;
      }

      // optional bool tschchartseriesshowsymbol = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesshowsymbol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesshowsymbol_)));
          set_has_tschchartseriesshowsymbol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_tschchartseriesshowtrendline;
        break;
      }

      // optional bool tschchartseriesshowtrendline = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesshowtrendline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesshowtrendline_)));
          set_has_tschchartseriesshowtrendline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_tschchartseriesshowvaluelabels;
        break;
      }

      // optional bool tschchartseriesshowvaluelabels = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesshowvaluelabels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesshowvaluelabels_)));
          set_has_tschchartseriesshowvaluelabels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_tschchartseriessizedimension;
        break;
      }

      // optional int32 tschchartseriessizedimension = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriessizedimension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriessizedimension_)));
          set_has_tschchartseriessizedimension();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_tschchartseriessymboltype;
        break;
      }

      // optional int32 tschchartseriessymboltype = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriessymboltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriessymboltype_)));
          set_has_tschchartseriessymboltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(293)) goto parse_tschchartseriestrendlineequationoffsetx;
        break;
      }

      // optional float tschchartseriestrendlineequationoffsetx = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriestrendlineequationoffsetx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriestrendlineequationoffsetx_)));
          set_has_tschchartseriestrendlineequationoffsetx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(301)) goto parse_tschchartseriestrendlineequationoffsety;
        break;
      }

      // optional float tschchartseriestrendlineequationoffsety = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriestrendlineequationoffsety:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriestrendlineequationoffsety_)));
          set_has_tschchartseriestrendlineequationoffsety();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_tschchartseriestrendlinelabelstring;
        break;
      }

      // optional string tschchartseriestrendlinelabelstring = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriestrendlinelabelstring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tschchartseriestrendlinelabelstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tschchartseriestrendlinelabelstring().data(), this->tschchartseriestrendlinelabelstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_tschchartseriestrendlineorder;
        break;
      }

      // optional int32 tschchartseriestrendlineorder = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriestrendlineorder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriestrendlineorder_)));
          set_has_tschchartseriestrendlineorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_tschchartseriestrendlineperiod;
        break;
      }

      // optional int32 tschchartseriestrendlineperiod = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriestrendlineperiod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriestrendlineperiod_)));
          set_has_tschchartseriestrendlineperiod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(333)) goto parse_tschchartseriestrendlinersquaredoffsetx;
        break;
      }

      // optional float tschchartseriestrendlinersquaredoffsetx = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriestrendlinersquaredoffsetx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriestrendlinersquaredoffsetx_)));
          set_has_tschchartseriestrendlinersquaredoffsetx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(341)) goto parse_tschchartseriestrendlinersquaredoffsety;
        break;
      }

      // optional float tschchartseriestrendlinersquaredoffsety = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriestrendlinersquaredoffsety:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriestrendlinersquaredoffsety_)));
          set_has_tschchartseriestrendlinersquaredoffsety();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_tschchartseriestrendlineshowequation;
        break;
      }

      // optional bool tschchartseriestrendlineshowequation = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriestrendlineshowequation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriestrendlineshowequation_)));
          set_has_tschchartseriestrendlineshowequation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_tschchartseriestrendlineshowlabel;
        break;
      }

      // optional bool tschchartseriestrendlineshowlabel = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriestrendlineshowlabel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriestrendlineshowlabel_)));
          set_has_tschchartseriestrendlineshowlabel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_tschchartseriestrendlineshowr2value;
        break;
      }

      // optional bool tschchartseriestrendlineshowr2value = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriestrendlineshowr2value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriestrendlineshowr2value_)));
          set_has_tschchartseriestrendlineshowr2value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_tschchartseriestrendlinetype;
        break;
      }

      // optional int32 tschchartseriestrendlinetype = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriestrendlinetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriestrendlinetype_)));
          set_has_tschchartseriestrendlinetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(381)) goto parse_tschchartserieswedgeexplosion;
        break;
      }

      // optional float tschchartserieswedgeexplosion = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartserieswedgeexplosion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartserieswedgeexplosion_)));
          set_has_tschchartserieswedgeexplosion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_tschchartseriesyaxisordinal;
        break;
      }

      // optional int32 tschchartseriesyaxisordinal = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesyaxisordinal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesyaxisordinal_)));
          set_has_tschchartseriesyaxisordinal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_tschchartseriesvaluelabelsaxis;
        break;
      }

      // optional int32 tschchartseriesvaluelabelsaxis = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesvaluelabelsaxis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesvaluelabelsaxis_)));
          set_has_tschchartseriesvaluelabelsaxis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_tschchartserieserrorbarlineend;
        break;
      }

      // optional .TSD.LineEndArchive tschchartserieserrorbarlineend = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartserieserrorbarlineend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartserieserrorbarlineend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_tschchartserieserrorbarlineendscatterx;
        break;
      }

      // optional .TSD.LineEndArchive tschchartserieserrorbarlineendscatterx = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartserieserrorbarlineendscatterx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartserieserrorbarlineendscatterx()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_tschchartserieserrorbarshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartserieserrorbarshadow = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartserieserrorbarshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartserieserrorbarshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_tschchartserieserrorbarstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartserieserrorbarstroke = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartserieserrorbarstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartserieserrorbarstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(434)) goto parse_tschchartserieserrorbarstrokescatterx;
        break;
      }

      // optional .TSD.StrokeArchive tschchartserieserrorbarstrokescatterx = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartserieserrorbarstrokescatterx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartserieserrorbarstrokescatterx()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(442)) goto parse_tschchartseriesfill;
        break;
      }

      // optional .TSD.FillArchive tschchartseriesfill = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_tschchartserieslabelparagraphstyleindex;
        break;
      }

      // optional int32 tschchartserieslabelparagraphstyleindex = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartserieslabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartserieslabelparagraphstyleindex_)));
          set_has_tschchartserieslabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(461)) goto parse_tschchartseriesopacity;
        break;
      }

      // optional float tschchartseriesopacity = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriesopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriesopacity_)));
          set_has_tschchartseriesopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_tschchartseriesoutsidelabelparagraphstyleindex;
        break;
      }

      // optional int32 tschchartseriesoutsidelabelparagraphstyleindex = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesoutsidelabelparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesoutsidelabelparagraphstyleindex_)));
          set_has_tschchartseriesoutsidelabelparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(474)) goto parse_tschchartseriesshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseriesshadow = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_tschchartseriesstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriesstroke = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriesstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriesstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(490)) goto parse_tschchartseriessymbolfill;
        break;
      }

      // optional .TSD.FillArchive tschchartseriessymbolfill = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriessymbolfill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriessymbolfill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_tschchartseriessymbolfilluseseriesfill;
        break;
      }

      // optional bool tschchartseriessymbolfilluseseriesfill = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriessymbolfilluseseriesfill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriessymbolfilluseseriesfill_)));
          set_has_tschchartseriessymbolfilluseseriesfill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_tschchartseriessymbolfilluseseriesstroke;
        break;
      }

      // optional bool tschchartseriessymbolfilluseseriesstroke = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriessymbolfilluseseriesstroke:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriessymbolfilluseseriesstroke_)));
          set_has_tschchartseriessymbolfilluseseriesstroke();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(517)) goto parse_tschchartseriessymbolsize;
        break;
      }

      // optional float tschchartseriessymbolsize = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriessymbolsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriessymbolsize_)));
          set_has_tschchartseriessymbolsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(522)) goto parse_tschchartseriessymbolstroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriessymbolstroke = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriessymbolstroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriessymbolstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(533)) goto parse_tschchartseriestrendlineequationopacity;
        break;
      }

      // optional float tschchartseriestrendlineequationopacity = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriestrendlineequationopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriestrendlineequationopacity_)));
          set_has_tschchartseriestrendlineequationopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_tschchartseriestrendlineequationparagraphstyleindex;
        break;
      }

      // optional int32 tschchartseriestrendlineequationparagraphstyleindex = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriestrendlineequationparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriestrendlineequationparagraphstyleindex_)));
          set_has_tschchartseriestrendlineequationparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(549)) goto parse_tschchartseriestrendlinersquaredopacity;
        break;
      }

      // optional float tschchartseriestrendlinersquaredopacity = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tschchartseriestrendlinersquaredopacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tschchartseriestrendlinersquaredopacity_)));
          set_has_tschchartseriestrendlinersquaredopacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(552)) goto parse_tschchartseriestrendlinersquaredparagraphstyleindex;
        break;
      }

      // optional int32 tschchartseriestrendlinersquaredparagraphstyleindex = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriestrendlinersquaredparagraphstyleindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriestrendlinersquaredparagraphstyleindex_)));
          set_has_tschchartseriestrendlinersquaredparagraphstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_tschchartseriestrendlineshadow;
        break;
      }

      // optional .TSD.ShadowArchive tschchartseriestrendlineshadow = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriestrendlineshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriestrendlineshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(570)) goto parse_tschchartseriestrendlinestroke;
        break;
      }

      // optional .TSD.StrokeArchive tschchartseriestrendlinestroke = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tschchartseriestrendlinestroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tschchartseriestrendlinestroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(576)) goto parse_tschchartseriesvaluelabelposition;
        break;
      }

      // optional int32 tschchartseriesvaluelabelposition = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesvaluelabelposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tschchartseriesvaluelabelposition_)));
          set_has_tschchartseriesvaluelabelposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(584)) goto parse_tschchartseriesshowlabelsinfront;
        break;
      }

      // optional bool tschchartseriesshowlabelsinfront = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tschchartseriesshowlabelsinfront:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tschchartseriesshowlabelsinfront_)));
          set_has_tschchartseriesshowlabelsinfront();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartSeriesGenericPropertyMapArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float tschchartseriesadjustmentscale = 1;
  if (has_tschchartseriesadjustmentscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->tschchartseriesadjustmentscale(), output);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustomnegativedata = 2;
  if (has_tschchartserieserrorbarcustomnegativedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tschchartserieserrorbarcustomnegativedata(), output);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustomnegativedatascatterx = 3;
  if (has_tschchartserieserrorbarcustomnegativedatascatterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tschchartserieserrorbarcustomnegativedatascatterx(), output);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustompositivedata = 4;
  if (has_tschchartserieserrorbarcustompositivedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tschchartserieserrorbarcustompositivedata(), output);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustompositivedatascatterx = 5;
  if (has_tschchartserieserrorbarcustompositivedatascatterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tschchartserieserrorbarcustompositivedatascatterx(), output);
  }

  // optional float tschchartserieserrorbarfixedvalue = 6;
  if (has_tschchartserieserrorbarfixedvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->tschchartserieserrorbarfixedvalue(), output);
  }

  // optional float tschchartserieserrorbarfixedvaluescatterx = 7;
  if (has_tschchartserieserrorbarfixedvaluescatterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->tschchartserieserrorbarfixedvaluescatterx(), output);
  }

  // optional float tschchartserieserrorbarpercentvalue = 8;
  if (has_tschchartserieserrorbarpercentvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->tschchartserieserrorbarpercentvalue(), output);
  }

  // optional float tschchartserieserrorbarpercentvaluescatterx = 9;
  if (has_tschchartserieserrorbarpercentvaluescatterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->tschchartserieserrorbarpercentvaluescatterx(), output);
  }

  // optional int32 tschchartserieserrorbarsetting = 10;
  if (has_tschchartserieserrorbarsetting()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->tschchartserieserrorbarsetting(), output);
  }

  // optional int32 tschchartserieserrorbarsettingscatterx = 11;
  if (has_tschchartserieserrorbarsettingscatterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->tschchartserieserrorbarsettingscatterx(), output);
  }

  // optional float tschchartserieserrorbarstddevvalue = 12;
  if (has_tschchartserieserrorbarstddevvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->tschchartserieserrorbarstddevvalue(), output);
  }

  // optional float tschchartserieserrorbarstddevvaluescatterx = 13;
  if (has_tschchartserieserrorbarstddevvaluescatterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->tschchartserieserrorbarstddevvaluescatterx(), output);
  }

  // optional int32 tschchartserieserrorbartype = 14;
  if (has_tschchartserieserrorbartype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->tschchartserieserrorbartype(), output);
  }

  // optional int32 tschchartserieserrorbartypescatterx = 15;
  if (has_tschchartserieserrorbartypescatterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->tschchartserieserrorbartypescatterx(), output);
  }

  // optional float tschchartserieslabelexplosion = 16;
  if (has_tschchartserieslabelexplosion()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->tschchartserieslabelexplosion(), output);
  }

  // optional int32 tschchartserieslinetype = 17;
  if (has_tschchartserieslinetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->tschchartserieslinetype(), output);
  }

  // optional .TSK.FormatStructArchive tschchartseries1_0numberformat = 18;
  if (has_tschchartseries1_0numberformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->tschchartseries1_0numberformat(), output);
  }

  // optional .TSK.FormatStructArchive tschchartseriesnumberformat = 19;
  if (has_tschchartseriesnumberformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->tschchartseriesnumberformat(), output);
  }

  // optional .TSK.FormatStructArchive tschchartseries1_0dateformat = 20;
  if (has_tschchartseries1_0dateformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->tschchartseries1_0dateformat(), output);
  }

  // optional .TSK.FormatStructArchive tschchartseriesdurationformat = 21;
  if (has_tschchartseriesdurationformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->tschchartseriesdurationformat(), output);
  }

  // optional .TSK.FormatStructArchive tschchartseriesdateformat = 22;
  if (has_tschchartseriesdateformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->tschchartseriesdateformat(), output);
  }

  // optional int32 tschchartseriesnumberformattype = 23;
  if (has_tschchartseriesnumberformattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->tschchartseriesnumberformattype(), output);
  }

  // optional .TSK.FormatStructArchive tschchartseriespercentnumberformat = 24;
  if (has_tschchartseriespercentnumberformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->tschchartseriespercentnumberformat(), output);
  }

  // optional int32 tschchartseriesseriestype = 25;
  if (has_tschchartseriesseriestype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->tschchartseriesseriestype(), output);
  }

  // optional bool tschchartseriesshowerrorbar = 26;
  if (has_tschchartseriesshowerrorbar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->tschchartseriesshowerrorbar(), output);
  }

  // optional bool tschchartseriesshowerrorbarscatterx = 27;
  if (has_tschchartseriesshowerrorbarscatterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->tschchartseriesshowerrorbarscatterx(), output);
  }

  // optional bool tschchartseriesshowline = 28;
  if (has_tschchartseriesshowline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->tschchartseriesshowline(), output);
  }

  // optional bool tschchartseriesshownegativedata = 29;
  if (has_tschchartseriesshownegativedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->tschchartseriesshownegativedata(), output);
  }

  // optional bool tschchartseriesshowserieslabels = 30;
  if (has_tschchartseriesshowserieslabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->tschchartseriesshowserieslabels(), output);
  }

  // optional bool tschchartseriesshowsymbol = 31;
  if (has_tschchartseriesshowsymbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->tschchartseriesshowsymbol(), output);
  }

  // optional bool tschchartseriesshowtrendline = 32;
  if (has_tschchartseriesshowtrendline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->tschchartseriesshowtrendline(), output);
  }

  // optional bool tschchartseriesshowvaluelabels = 33;
  if (has_tschchartseriesshowvaluelabels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->tschchartseriesshowvaluelabels(), output);
  }

  // optional int32 tschchartseriessizedimension = 34;
  if (has_tschchartseriessizedimension()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->tschchartseriessizedimension(), output);
  }

  // optional int32 tschchartseriessymboltype = 35;
  if (has_tschchartseriessymboltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->tschchartseriessymboltype(), output);
  }

  // optional float tschchartseriestrendlineequationoffsetx = 36;
  if (has_tschchartseriestrendlineequationoffsetx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(36, this->tschchartseriestrendlineequationoffsetx(), output);
  }

  // optional float tschchartseriestrendlineequationoffsety = 37;
  if (has_tschchartseriestrendlineequationoffsety()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(37, this->tschchartseriestrendlineequationoffsety(), output);
  }

  // optional string tschchartseriestrendlinelabelstring = 38;
  if (has_tschchartseriestrendlinelabelstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tschchartseriestrendlinelabelstring().data(), this->tschchartseriestrendlinelabelstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      38, this->tschchartseriestrendlinelabelstring(), output);
  }

  // optional int32 tschchartseriestrendlineorder = 39;
  if (has_tschchartseriestrendlineorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->tschchartseriestrendlineorder(), output);
  }

  // optional int32 tschchartseriestrendlineperiod = 40;
  if (has_tschchartseriestrendlineperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->tschchartseriestrendlineperiod(), output);
  }

  // optional float tschchartseriestrendlinersquaredoffsetx = 41;
  if (has_tschchartseriestrendlinersquaredoffsetx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(41, this->tschchartseriestrendlinersquaredoffsetx(), output);
  }

  // optional float tschchartseriestrendlinersquaredoffsety = 42;
  if (has_tschchartseriestrendlinersquaredoffsety()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(42, this->tschchartseriestrendlinersquaredoffsety(), output);
  }

  // optional bool tschchartseriestrendlineshowequation = 43;
  if (has_tschchartseriestrendlineshowequation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(43, this->tschchartseriestrendlineshowequation(), output);
  }

  // optional bool tschchartseriestrendlineshowlabel = 44;
  if (has_tschchartseriestrendlineshowlabel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(44, this->tschchartseriestrendlineshowlabel(), output);
  }

  // optional bool tschchartseriestrendlineshowr2value = 45;
  if (has_tschchartseriestrendlineshowr2value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(45, this->tschchartseriestrendlineshowr2value(), output);
  }

  // optional int32 tschchartseriestrendlinetype = 46;
  if (has_tschchartseriestrendlinetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->tschchartseriestrendlinetype(), output);
  }

  // optional float tschchartserieswedgeexplosion = 47;
  if (has_tschchartserieswedgeexplosion()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(47, this->tschchartserieswedgeexplosion(), output);
  }

  // optional int32 tschchartseriesyaxisordinal = 48;
  if (has_tschchartseriesyaxisordinal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->tschchartseriesyaxisordinal(), output);
  }

  // optional int32 tschchartseriesvaluelabelsaxis = 49;
  if (has_tschchartseriesvaluelabelsaxis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->tschchartseriesvaluelabelsaxis(), output);
  }

  // optional .TSD.LineEndArchive tschchartserieserrorbarlineend = 50;
  if (has_tschchartserieserrorbarlineend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->tschchartserieserrorbarlineend(), output);
  }

  // optional .TSD.LineEndArchive tschchartserieserrorbarlineendscatterx = 51;
  if (has_tschchartserieserrorbarlineendscatterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->tschchartserieserrorbarlineendscatterx(), output);
  }

  // optional .TSD.ShadowArchive tschchartserieserrorbarshadow = 52;
  if (has_tschchartserieserrorbarshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->tschchartserieserrorbarshadow(), output);
  }

  // optional .TSD.StrokeArchive tschchartserieserrorbarstroke = 53;
  if (has_tschchartserieserrorbarstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->tschchartserieserrorbarstroke(), output);
  }

  // optional .TSD.StrokeArchive tschchartserieserrorbarstrokescatterx = 54;
  if (has_tschchartserieserrorbarstrokescatterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, this->tschchartserieserrorbarstrokescatterx(), output);
  }

  // optional .TSD.FillArchive tschchartseriesfill = 55;
  if (has_tschchartseriesfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      55, this->tschchartseriesfill(), output);
  }

  // optional int32 tschchartserieslabelparagraphstyleindex = 56;
  if (has_tschchartserieslabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->tschchartserieslabelparagraphstyleindex(), output);
  }

  // optional float tschchartseriesopacity = 57;
  if (has_tschchartseriesopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(57, this->tschchartseriesopacity(), output);
  }

  // optional int32 tschchartseriesoutsidelabelparagraphstyleindex = 58;
  if (has_tschchartseriesoutsidelabelparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->tschchartseriesoutsidelabelparagraphstyleindex(), output);
  }

  // optional .TSD.ShadowArchive tschchartseriesshadow = 59;
  if (has_tschchartseriesshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      59, this->tschchartseriesshadow(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriesstroke = 60;
  if (has_tschchartseriesstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->tschchartseriesstroke(), output);
  }

  // optional .TSD.FillArchive tschchartseriessymbolfill = 61;
  if (has_tschchartseriessymbolfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, this->tschchartseriessymbolfill(), output);
  }

  // optional bool tschchartseriessymbolfilluseseriesfill = 62;
  if (has_tschchartseriessymbolfilluseseriesfill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(62, this->tschchartseriessymbolfilluseseriesfill(), output);
  }

  // optional bool tschchartseriessymbolfilluseseriesstroke = 63;
  if (has_tschchartseriessymbolfilluseseriesstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(63, this->tschchartseriessymbolfilluseseriesstroke(), output);
  }

  // optional float tschchartseriessymbolsize = 64;
  if (has_tschchartseriessymbolsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(64, this->tschchartseriessymbolsize(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriessymbolstroke = 65;
  if (has_tschchartseriessymbolstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      65, this->tschchartseriessymbolstroke(), output);
  }

  // optional float tschchartseriestrendlineequationopacity = 66;
  if (has_tschchartseriestrendlineequationopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(66, this->tschchartseriestrendlineequationopacity(), output);
  }

  // optional int32 tschchartseriestrendlineequationparagraphstyleindex = 67;
  if (has_tschchartseriestrendlineequationparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(67, this->tschchartseriestrendlineequationparagraphstyleindex(), output);
  }

  // optional float tschchartseriestrendlinersquaredopacity = 68;
  if (has_tschchartseriestrendlinersquaredopacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(68, this->tschchartseriestrendlinersquaredopacity(), output);
  }

  // optional int32 tschchartseriestrendlinersquaredparagraphstyleindex = 69;
  if (has_tschchartseriestrendlinersquaredparagraphstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(69, this->tschchartseriestrendlinersquaredparagraphstyleindex(), output);
  }

  // optional .TSD.ShadowArchive tschchartseriestrendlineshadow = 70;
  if (has_tschchartseriestrendlineshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      70, this->tschchartseriestrendlineshadow(), output);
  }

  // optional .TSD.StrokeArchive tschchartseriestrendlinestroke = 71;
  if (has_tschchartseriestrendlinestroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      71, this->tschchartseriestrendlinestroke(), output);
  }

  // optional int32 tschchartseriesvaluelabelposition = 72;
  if (has_tschchartseriesvaluelabelposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(72, this->tschchartseriesvaluelabelposition(), output);
  }

  // optional bool tschchartseriesshowlabelsinfront = 73;
  if (has_tschchartseriesshowlabelsinfront()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(73, this->tschchartseriesshowlabelsinfront(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartSeriesGenericPropertyMapArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float tschchartseriesadjustmentscale = 1;
  if (has_tschchartseriesadjustmentscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->tschchartseriesadjustmentscale(), target);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustomnegativedata = 2;
  if (has_tschchartserieserrorbarcustomnegativedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tschchartserieserrorbarcustomnegativedata(), target);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustomnegativedatascatterx = 3;
  if (has_tschchartserieserrorbarcustomnegativedatascatterx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tschchartserieserrorbarcustomnegativedatascatterx(), target);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustompositivedata = 4;
  if (has_tschchartserieserrorbarcustompositivedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tschchartserieserrorbarcustompositivedata(), target);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustompositivedatascatterx = 5;
  if (has_tschchartserieserrorbarcustompositivedatascatterx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tschchartserieserrorbarcustompositivedatascatterx(), target);
  }

  // optional float tschchartserieserrorbarfixedvalue = 6;
  if (has_tschchartserieserrorbarfixedvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->tschchartserieserrorbarfixedvalue(), target);
  }

  // optional float tschchartserieserrorbarfixedvaluescatterx = 7;
  if (has_tschchartserieserrorbarfixedvaluescatterx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->tschchartserieserrorbarfixedvaluescatterx(), target);
  }

  // optional float tschchartserieserrorbarpercentvalue = 8;
  if (has_tschchartserieserrorbarpercentvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->tschchartserieserrorbarpercentvalue(), target);
  }

  // optional float tschchartserieserrorbarpercentvaluescatterx = 9;
  if (has_tschchartserieserrorbarpercentvaluescatterx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->tschchartserieserrorbarpercentvaluescatterx(), target);
  }

  // optional int32 tschchartserieserrorbarsetting = 10;
  if (has_tschchartserieserrorbarsetting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->tschchartserieserrorbarsetting(), target);
  }

  // optional int32 tschchartserieserrorbarsettingscatterx = 11;
  if (has_tschchartserieserrorbarsettingscatterx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->tschchartserieserrorbarsettingscatterx(), target);
  }

  // optional float tschchartserieserrorbarstddevvalue = 12;
  if (has_tschchartserieserrorbarstddevvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->tschchartserieserrorbarstddevvalue(), target);
  }

  // optional float tschchartserieserrorbarstddevvaluescatterx = 13;
  if (has_tschchartserieserrorbarstddevvaluescatterx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->tschchartserieserrorbarstddevvaluescatterx(), target);
  }

  // optional int32 tschchartserieserrorbartype = 14;
  if (has_tschchartserieserrorbartype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->tschchartserieserrorbartype(), target);
  }

  // optional int32 tschchartserieserrorbartypescatterx = 15;
  if (has_tschchartserieserrorbartypescatterx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->tschchartserieserrorbartypescatterx(), target);
  }

  // optional float tschchartserieslabelexplosion = 16;
  if (has_tschchartserieslabelexplosion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->tschchartserieslabelexplosion(), target);
  }

  // optional int32 tschchartserieslinetype = 17;
  if (has_tschchartserieslinetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->tschchartserieslinetype(), target);
  }

  // optional .TSK.FormatStructArchive tschchartseries1_0numberformat = 18;
  if (has_tschchartseries1_0numberformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->tschchartseries1_0numberformat(), target);
  }

  // optional .TSK.FormatStructArchive tschchartseriesnumberformat = 19;
  if (has_tschchartseriesnumberformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->tschchartseriesnumberformat(), target);
  }

  // optional .TSK.FormatStructArchive tschchartseries1_0dateformat = 20;
  if (has_tschchartseries1_0dateformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->tschchartseries1_0dateformat(), target);
  }

  // optional .TSK.FormatStructArchive tschchartseriesdurationformat = 21;
  if (has_tschchartseriesdurationformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->tschchartseriesdurationformat(), target);
  }

  // optional .TSK.FormatStructArchive tschchartseriesdateformat = 22;
  if (has_tschchartseriesdateformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->tschchartseriesdateformat(), target);
  }

  // optional int32 tschchartseriesnumberformattype = 23;
  if (has_tschchartseriesnumberformattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->tschchartseriesnumberformattype(), target);
  }

  // optional .TSK.FormatStructArchive tschchartseriespercentnumberformat = 24;
  if (has_tschchartseriespercentnumberformat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->tschchartseriespercentnumberformat(), target);
  }

  // optional int32 tschchartseriesseriestype = 25;
  if (has_tschchartseriesseriestype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->tschchartseriesseriestype(), target);
  }

  // optional bool tschchartseriesshowerrorbar = 26;
  if (has_tschchartseriesshowerrorbar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->tschchartseriesshowerrorbar(), target);
  }

  // optional bool tschchartseriesshowerrorbarscatterx = 27;
  if (has_tschchartseriesshowerrorbarscatterx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->tschchartseriesshowerrorbarscatterx(), target);
  }

  // optional bool tschchartseriesshowline = 28;
  if (has_tschchartseriesshowline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->tschchartseriesshowline(), target);
  }

  // optional bool tschchartseriesshownegativedata = 29;
  if (has_tschchartseriesshownegativedata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->tschchartseriesshownegativedata(), target);
  }

  // optional bool tschchartseriesshowserieslabels = 30;
  if (has_tschchartseriesshowserieslabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->tschchartseriesshowserieslabels(), target);
  }

  // optional bool tschchartseriesshowsymbol = 31;
  if (has_tschchartseriesshowsymbol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->tschchartseriesshowsymbol(), target);
  }

  // optional bool tschchartseriesshowtrendline = 32;
  if (has_tschchartseriesshowtrendline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->tschchartseriesshowtrendline(), target);
  }

  // optional bool tschchartseriesshowvaluelabels = 33;
  if (has_tschchartseriesshowvaluelabels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->tschchartseriesshowvaluelabels(), target);
  }

  // optional int32 tschchartseriessizedimension = 34;
  if (has_tschchartseriessizedimension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->tschchartseriessizedimension(), target);
  }

  // optional int32 tschchartseriessymboltype = 35;
  if (has_tschchartseriessymboltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->tschchartseriessymboltype(), target);
  }

  // optional float tschchartseriestrendlineequationoffsetx = 36;
  if (has_tschchartseriestrendlineequationoffsetx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(36, this->tschchartseriestrendlineequationoffsetx(), target);
  }

  // optional float tschchartseriestrendlineequationoffsety = 37;
  if (has_tschchartseriestrendlineequationoffsety()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(37, this->tschchartseriestrendlineequationoffsety(), target);
  }

  // optional string tschchartseriestrendlinelabelstring = 38;
  if (has_tschchartseriestrendlinelabelstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tschchartseriestrendlinelabelstring().data(), this->tschchartseriestrendlinelabelstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->tschchartseriestrendlinelabelstring(), target);
  }

  // optional int32 tschchartseriestrendlineorder = 39;
  if (has_tschchartseriestrendlineorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->tschchartseriestrendlineorder(), target);
  }

  // optional int32 tschchartseriestrendlineperiod = 40;
  if (has_tschchartseriestrendlineperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->tschchartseriestrendlineperiod(), target);
  }

  // optional float tschchartseriestrendlinersquaredoffsetx = 41;
  if (has_tschchartseriestrendlinersquaredoffsetx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(41, this->tschchartseriestrendlinersquaredoffsetx(), target);
  }

  // optional float tschchartseriestrendlinersquaredoffsety = 42;
  if (has_tschchartseriestrendlinersquaredoffsety()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(42, this->tschchartseriestrendlinersquaredoffsety(), target);
  }

  // optional bool tschchartseriestrendlineshowequation = 43;
  if (has_tschchartseriestrendlineshowequation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(43, this->tschchartseriestrendlineshowequation(), target);
  }

  // optional bool tschchartseriestrendlineshowlabel = 44;
  if (has_tschchartseriestrendlineshowlabel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(44, this->tschchartseriestrendlineshowlabel(), target);
  }

  // optional bool tschchartseriestrendlineshowr2value = 45;
  if (has_tschchartseriestrendlineshowr2value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(45, this->tschchartseriestrendlineshowr2value(), target);
  }

  // optional int32 tschchartseriestrendlinetype = 46;
  if (has_tschchartseriestrendlinetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->tschchartseriestrendlinetype(), target);
  }

  // optional float tschchartserieswedgeexplosion = 47;
  if (has_tschchartserieswedgeexplosion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(47, this->tschchartserieswedgeexplosion(), target);
  }

  // optional int32 tschchartseriesyaxisordinal = 48;
  if (has_tschchartseriesyaxisordinal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->tschchartseriesyaxisordinal(), target);
  }

  // optional int32 tschchartseriesvaluelabelsaxis = 49;
  if (has_tschchartseriesvaluelabelsaxis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->tschchartseriesvaluelabelsaxis(), target);
  }

  // optional .TSD.LineEndArchive tschchartserieserrorbarlineend = 50;
  if (has_tschchartserieserrorbarlineend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->tschchartserieserrorbarlineend(), target);
  }

  // optional .TSD.LineEndArchive tschchartserieserrorbarlineendscatterx = 51;
  if (has_tschchartserieserrorbarlineendscatterx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->tschchartserieserrorbarlineendscatterx(), target);
  }

  // optional .TSD.ShadowArchive tschchartserieserrorbarshadow = 52;
  if (has_tschchartserieserrorbarshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->tschchartserieserrorbarshadow(), target);
  }

  // optional .TSD.StrokeArchive tschchartserieserrorbarstroke = 53;
  if (has_tschchartserieserrorbarstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->tschchartserieserrorbarstroke(), target);
  }

  // optional .TSD.StrokeArchive tschchartserieserrorbarstrokescatterx = 54;
  if (has_tschchartserieserrorbarstrokescatterx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        54, this->tschchartserieserrorbarstrokescatterx(), target);
  }

  // optional .TSD.FillArchive tschchartseriesfill = 55;
  if (has_tschchartseriesfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        55, this->tschchartseriesfill(), target);
  }

  // optional int32 tschchartserieslabelparagraphstyleindex = 56;
  if (has_tschchartserieslabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->tschchartserieslabelparagraphstyleindex(), target);
  }

  // optional float tschchartseriesopacity = 57;
  if (has_tschchartseriesopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(57, this->tschchartseriesopacity(), target);
  }

  // optional int32 tschchartseriesoutsidelabelparagraphstyleindex = 58;
  if (has_tschchartseriesoutsidelabelparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(58, this->tschchartseriesoutsidelabelparagraphstyleindex(), target);
  }

  // optional .TSD.ShadowArchive tschchartseriesshadow = 59;
  if (has_tschchartseriesshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        59, this->tschchartseriesshadow(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriesstroke = 60;
  if (has_tschchartseriesstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->tschchartseriesstroke(), target);
  }

  // optional .TSD.FillArchive tschchartseriessymbolfill = 61;
  if (has_tschchartseriessymbolfill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        61, this->tschchartseriessymbolfill(), target);
  }

  // optional bool tschchartseriessymbolfilluseseriesfill = 62;
  if (has_tschchartseriessymbolfilluseseriesfill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(62, this->tschchartseriessymbolfilluseseriesfill(), target);
  }

  // optional bool tschchartseriessymbolfilluseseriesstroke = 63;
  if (has_tschchartseriessymbolfilluseseriesstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(63, this->tschchartseriessymbolfilluseseriesstroke(), target);
  }

  // optional float tschchartseriessymbolsize = 64;
  if (has_tschchartseriessymbolsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(64, this->tschchartseriessymbolsize(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriessymbolstroke = 65;
  if (has_tschchartseriessymbolstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        65, this->tschchartseriessymbolstroke(), target);
  }

  // optional float tschchartseriestrendlineequationopacity = 66;
  if (has_tschchartseriestrendlineequationopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(66, this->tschchartseriestrendlineequationopacity(), target);
  }

  // optional int32 tschchartseriestrendlineequationparagraphstyleindex = 67;
  if (has_tschchartseriestrendlineequationparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(67, this->tschchartseriestrendlineequationparagraphstyleindex(), target);
  }

  // optional float tschchartseriestrendlinersquaredopacity = 68;
  if (has_tschchartseriestrendlinersquaredopacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(68, this->tschchartseriestrendlinersquaredopacity(), target);
  }

  // optional int32 tschchartseriestrendlinersquaredparagraphstyleindex = 69;
  if (has_tschchartseriestrendlinersquaredparagraphstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(69, this->tschchartseriestrendlinersquaredparagraphstyleindex(), target);
  }

  // optional .TSD.ShadowArchive tschchartseriestrendlineshadow = 70;
  if (has_tschchartseriestrendlineshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        70, this->tschchartseriestrendlineshadow(), target);
  }

  // optional .TSD.StrokeArchive tschchartseriestrendlinestroke = 71;
  if (has_tschchartseriestrendlinestroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        71, this->tschchartseriestrendlinestroke(), target);
  }

  // optional int32 tschchartseriesvaluelabelposition = 72;
  if (has_tschchartseriesvaluelabelposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(72, this->tschchartseriesvaluelabelposition(), target);
  }

  // optional bool tschchartseriesshowlabelsinfront = 73;
  if (has_tschchartseriesshowlabelsinfront()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(73, this->tschchartseriesshowlabelsinfront(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartSeriesGenericPropertyMapArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float tschchartseriesadjustmentscale = 1;
    if (has_tschchartseriesadjustmentscale()) {
      total_size += 1 + 4;
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustomnegativedata = 2;
    if (has_tschchartserieserrorbarcustomnegativedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartserieserrorbarcustomnegativedata());
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustomnegativedatascatterx = 3;
    if (has_tschchartserieserrorbarcustomnegativedatascatterx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartserieserrorbarcustomnegativedatascatterx());
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustompositivedata = 4;
    if (has_tschchartserieserrorbarcustompositivedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartserieserrorbarcustompositivedata());
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustompositivedatascatterx = 5;
    if (has_tschchartserieserrorbarcustompositivedatascatterx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartserieserrorbarcustompositivedatascatterx());
    }

    // optional float tschchartserieserrorbarfixedvalue = 6;
    if (has_tschchartserieserrorbarfixedvalue()) {
      total_size += 1 + 4;
    }

    // optional float tschchartserieserrorbarfixedvaluescatterx = 7;
    if (has_tschchartserieserrorbarfixedvaluescatterx()) {
      total_size += 1 + 4;
    }

    // optional float tschchartserieserrorbarpercentvalue = 8;
    if (has_tschchartserieserrorbarpercentvalue()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float tschchartserieserrorbarpercentvaluescatterx = 9;
    if (has_tschchartserieserrorbarpercentvaluescatterx()) {
      total_size += 1 + 4;
    }

    // optional int32 tschchartserieserrorbarsetting = 10;
    if (has_tschchartserieserrorbarsetting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartserieserrorbarsetting());
    }

    // optional int32 tschchartserieserrorbarsettingscatterx = 11;
    if (has_tschchartserieserrorbarsettingscatterx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartserieserrorbarsettingscatterx());
    }

    // optional float tschchartserieserrorbarstddevvalue = 12;
    if (has_tschchartserieserrorbarstddevvalue()) {
      total_size += 1 + 4;
    }

    // optional float tschchartserieserrorbarstddevvaluescatterx = 13;
    if (has_tschchartserieserrorbarstddevvaluescatterx()) {
      total_size += 1 + 4;
    }

    // optional int32 tschchartserieserrorbartype = 14;
    if (has_tschchartserieserrorbartype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartserieserrorbartype());
    }

    // optional int32 tschchartserieserrorbartypescatterx = 15;
    if (has_tschchartserieserrorbartypescatterx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartserieserrorbartypescatterx());
    }

    // optional float tschchartserieslabelexplosion = 16;
    if (has_tschchartserieslabelexplosion()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 tschchartserieslinetype = 17;
    if (has_tschchartserieslinetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartserieslinetype());
    }

    // optional .TSK.FormatStructArchive tschchartseries1_0numberformat = 18;
    if (has_tschchartseries1_0numberformat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseries1_0numberformat());
    }

    // optional .TSK.FormatStructArchive tschchartseriesnumberformat = 19;
    if (has_tschchartseriesnumberformat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesnumberformat());
    }

    // optional .TSK.FormatStructArchive tschchartseries1_0dateformat = 20;
    if (has_tschchartseries1_0dateformat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseries1_0dateformat());
    }

    // optional .TSK.FormatStructArchive tschchartseriesdurationformat = 21;
    if (has_tschchartseriesdurationformat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdurationformat());
    }

    // optional .TSK.FormatStructArchive tschchartseriesdateformat = 22;
    if (has_tschchartseriesdateformat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesdateformat());
    }

    // optional int32 tschchartseriesnumberformattype = 23;
    if (has_tschchartseriesnumberformattype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesnumberformattype());
    }

    // optional .TSK.FormatStructArchive tschchartseriespercentnumberformat = 24;
    if (has_tschchartseriespercentnumberformat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriespercentnumberformat());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 tschchartseriesseriestype = 25;
    if (has_tschchartseriesseriestype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesseriestype());
    }

    // optional bool tschchartseriesshowerrorbar = 26;
    if (has_tschchartseriesshowerrorbar()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesshowerrorbarscatterx = 27;
    if (has_tschchartseriesshowerrorbarscatterx()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesshowline = 28;
    if (has_tschchartseriesshowline()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesshownegativedata = 29;
    if (has_tschchartseriesshownegativedata()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesshowserieslabels = 30;
    if (has_tschchartseriesshowserieslabels()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesshowsymbol = 31;
    if (has_tschchartseriesshowsymbol()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesshowtrendline = 32;
    if (has_tschchartseriesshowtrendline()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional bool tschchartseriesshowvaluelabels = 33;
    if (has_tschchartseriesshowvaluelabels()) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartseriessizedimension = 34;
    if (has_tschchartseriessizedimension()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriessizedimension());
    }

    // optional int32 tschchartseriessymboltype = 35;
    if (has_tschchartseriessymboltype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriessymboltype());
    }

    // optional float tschchartseriestrendlineequationoffsetx = 36;
    if (has_tschchartseriestrendlineequationoffsetx()) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriestrendlineequationoffsety = 37;
    if (has_tschchartseriestrendlineequationoffsety()) {
      total_size += 2 + 4;
    }

    // optional string tschchartseriestrendlinelabelstring = 38;
    if (has_tschchartseriestrendlinelabelstring()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tschchartseriestrendlinelabelstring());
    }

    // optional int32 tschchartseriestrendlineorder = 39;
    if (has_tschchartseriestrendlineorder()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriestrendlineorder());
    }

    // optional int32 tschchartseriestrendlineperiod = 40;
    if (has_tschchartseriestrendlineperiod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriestrendlineperiod());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional float tschchartseriestrendlinersquaredoffsetx = 41;
    if (has_tschchartseriestrendlinersquaredoffsetx()) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriestrendlinersquaredoffsety = 42;
    if (has_tschchartseriestrendlinersquaredoffsety()) {
      total_size += 2 + 4;
    }

    // optional bool tschchartseriestrendlineshowequation = 43;
    if (has_tschchartseriestrendlineshowequation()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriestrendlineshowlabel = 44;
    if (has_tschchartseriestrendlineshowlabel()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriestrendlineshowr2value = 45;
    if (has_tschchartseriestrendlineshowr2value()) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartseriestrendlinetype = 46;
    if (has_tschchartseriestrendlinetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriestrendlinetype());
    }

    // optional float tschchartserieswedgeexplosion = 47;
    if (has_tschchartserieswedgeexplosion()) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesyaxisordinal = 48;
    if (has_tschchartseriesyaxisordinal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesyaxisordinal());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional int32 tschchartseriesvaluelabelsaxis = 49;
    if (has_tschchartseriesvaluelabelsaxis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesvaluelabelsaxis());
    }

    // optional .TSD.LineEndArchive tschchartserieserrorbarlineend = 50;
    if (has_tschchartserieserrorbarlineend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartserieserrorbarlineend());
    }

    // optional .TSD.LineEndArchive tschchartserieserrorbarlineendscatterx = 51;
    if (has_tschchartserieserrorbarlineendscatterx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartserieserrorbarlineendscatterx());
    }

    // optional .TSD.ShadowArchive tschchartserieserrorbarshadow = 52;
    if (has_tschchartserieserrorbarshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartserieserrorbarshadow());
    }

    // optional .TSD.StrokeArchive tschchartserieserrorbarstroke = 53;
    if (has_tschchartserieserrorbarstroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartserieserrorbarstroke());
    }

    // optional .TSD.StrokeArchive tschchartserieserrorbarstrokescatterx = 54;
    if (has_tschchartserieserrorbarstrokescatterx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartserieserrorbarstrokescatterx());
    }

    // optional .TSD.FillArchive tschchartseriesfill = 55;
    if (has_tschchartseriesfill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesfill());
    }

    // optional int32 tschchartserieslabelparagraphstyleindex = 56;
    if (has_tschchartserieslabelparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartserieslabelparagraphstyleindex());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional float tschchartseriesopacity = 57;
    if (has_tschchartseriesopacity()) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesoutsidelabelparagraphstyleindex = 58;
    if (has_tschchartseriesoutsidelabelparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesoutsidelabelparagraphstyleindex());
    }

    // optional .TSD.ShadowArchive tschchartseriesshadow = 59;
    if (has_tschchartseriesshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesshadow());
    }

    // optional .TSD.StrokeArchive tschchartseriesstroke = 60;
    if (has_tschchartseriesstroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriesstroke());
    }

    // optional .TSD.FillArchive tschchartseriessymbolfill = 61;
    if (has_tschchartseriessymbolfill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriessymbolfill());
    }

    // optional bool tschchartseriessymbolfilluseseriesfill = 62;
    if (has_tschchartseriessymbolfilluseseriesfill()) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriessymbolfilluseseriesstroke = 63;
    if (has_tschchartseriessymbolfilluseseriesstroke()) {
      total_size += 2 + 1;
    }

    // optional float tschchartseriessymbolsize = 64;
    if (has_tschchartseriessymbolsize()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional .TSD.StrokeArchive tschchartseriessymbolstroke = 65;
    if (has_tschchartseriessymbolstroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriessymbolstroke());
    }

    // optional float tschchartseriestrendlineequationopacity = 66;
    if (has_tschchartseriestrendlineequationopacity()) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriestrendlineequationparagraphstyleindex = 67;
    if (has_tschchartseriestrendlineequationparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriestrendlineequationparagraphstyleindex());
    }

    // optional float tschchartseriestrendlinersquaredopacity = 68;
    if (has_tschchartseriestrendlinersquaredopacity()) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriestrendlinersquaredparagraphstyleindex = 69;
    if (has_tschchartseriestrendlinersquaredparagraphstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriestrendlinersquaredparagraphstyleindex());
    }

    // optional .TSD.ShadowArchive tschchartseriestrendlineshadow = 70;
    if (has_tschchartseriestrendlineshadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriestrendlineshadow());
    }

    // optional .TSD.StrokeArchive tschchartseriestrendlinestroke = 71;
    if (has_tschchartseriestrendlinestroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tschchartseriestrendlinestroke());
    }

    // optional int32 tschchartseriesvaluelabelposition = 72;
    if (has_tschchartseriesvaluelabelposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tschchartseriesvaluelabelposition());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional bool tschchartseriesshowlabelsinfront = 73;
    if (has_tschchartseriesshowlabelsinfront()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartSeriesGenericPropertyMapArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartSeriesGenericPropertyMapArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartSeriesGenericPropertyMapArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartSeriesGenericPropertyMapArchive::MergeFrom(const ChartSeriesGenericPropertyMapArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tschchartseriesadjustmentscale()) {
      set_tschchartseriesadjustmentscale(from.tschchartseriesadjustmentscale());
    }
    if (from.has_tschchartserieserrorbarcustomnegativedata()) {
      mutable_tschchartserieserrorbarcustomnegativedata()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(from.tschchartserieserrorbarcustomnegativedata());
    }
    if (from.has_tschchartserieserrorbarcustomnegativedatascatterx()) {
      mutable_tschchartserieserrorbarcustomnegativedatascatterx()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(from.tschchartserieserrorbarcustomnegativedatascatterx());
    }
    if (from.has_tschchartserieserrorbarcustompositivedata()) {
      mutable_tschchartserieserrorbarcustompositivedata()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(from.tschchartserieserrorbarcustompositivedata());
    }
    if (from.has_tschchartserieserrorbarcustompositivedatascatterx()) {
      mutable_tschchartserieserrorbarcustompositivedatascatterx()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(from.tschchartserieserrorbarcustompositivedatascatterx());
    }
    if (from.has_tschchartserieserrorbarfixedvalue()) {
      set_tschchartserieserrorbarfixedvalue(from.tschchartserieserrorbarfixedvalue());
    }
    if (from.has_tschchartserieserrorbarfixedvaluescatterx()) {
      set_tschchartserieserrorbarfixedvaluescatterx(from.tschchartserieserrorbarfixedvaluescatterx());
    }
    if (from.has_tschchartserieserrorbarpercentvalue()) {
      set_tschchartserieserrorbarpercentvalue(from.tschchartserieserrorbarpercentvalue());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tschchartserieserrorbarpercentvaluescatterx()) {
      set_tschchartserieserrorbarpercentvaluescatterx(from.tschchartserieserrorbarpercentvaluescatterx());
    }
    if (from.has_tschchartserieserrorbarsetting()) {
      set_tschchartserieserrorbarsetting(from.tschchartserieserrorbarsetting());
    }
    if (from.has_tschchartserieserrorbarsettingscatterx()) {
      set_tschchartserieserrorbarsettingscatterx(from.tschchartserieserrorbarsettingscatterx());
    }
    if (from.has_tschchartserieserrorbarstddevvalue()) {
      set_tschchartserieserrorbarstddevvalue(from.tschchartserieserrorbarstddevvalue());
    }
    if (from.has_tschchartserieserrorbarstddevvaluescatterx()) {
      set_tschchartserieserrorbarstddevvaluescatterx(from.tschchartserieserrorbarstddevvaluescatterx());
    }
    if (from.has_tschchartserieserrorbartype()) {
      set_tschchartserieserrorbartype(from.tschchartserieserrorbartype());
    }
    if (from.has_tschchartserieserrorbartypescatterx()) {
      set_tschchartserieserrorbartypescatterx(from.tschchartserieserrorbartypescatterx());
    }
    if (from.has_tschchartserieslabelexplosion()) {
      set_tschchartserieslabelexplosion(from.tschchartserieslabelexplosion());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tschchartserieslinetype()) {
      set_tschchartserieslinetype(from.tschchartserieslinetype());
    }
    if (from.has_tschchartseries1_0numberformat()) {
      mutable_tschchartseries1_0numberformat()->::TSK::FormatStructArchive::MergeFrom(from.tschchartseries1_0numberformat());
    }
    if (from.has_tschchartseriesnumberformat()) {
      mutable_tschchartseriesnumberformat()->::TSK::FormatStructArchive::MergeFrom(from.tschchartseriesnumberformat());
    }
    if (from.has_tschchartseries1_0dateformat()) {
      mutable_tschchartseries1_0dateformat()->::TSK::FormatStructArchive::MergeFrom(from.tschchartseries1_0dateformat());
    }
    if (from.has_tschchartseriesdurationformat()) {
      mutable_tschchartseriesdurationformat()->::TSK::FormatStructArchive::MergeFrom(from.tschchartseriesdurationformat());
    }
    if (from.has_tschchartseriesdateformat()) {
      mutable_tschchartseriesdateformat()->::TSK::FormatStructArchive::MergeFrom(from.tschchartseriesdateformat());
    }
    if (from.has_tschchartseriesnumberformattype()) {
      set_tschchartseriesnumberformattype(from.tschchartseriesnumberformattype());
    }
    if (from.has_tschchartseriespercentnumberformat()) {
      mutable_tschchartseriespercentnumberformat()->::TSK::FormatStructArchive::MergeFrom(from.tschchartseriespercentnumberformat());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_tschchartseriesseriestype()) {
      set_tschchartseriesseriestype(from.tschchartseriesseriestype());
    }
    if (from.has_tschchartseriesshowerrorbar()) {
      set_tschchartseriesshowerrorbar(from.tschchartseriesshowerrorbar());
    }
    if (from.has_tschchartseriesshowerrorbarscatterx()) {
      set_tschchartseriesshowerrorbarscatterx(from.tschchartseriesshowerrorbarscatterx());
    }
    if (from.has_tschchartseriesshowline()) {
      set_tschchartseriesshowline(from.tschchartseriesshowline());
    }
    if (from.has_tschchartseriesshownegativedata()) {
      set_tschchartseriesshownegativedata(from.tschchartseriesshownegativedata());
    }
    if (from.has_tschchartseriesshowserieslabels()) {
      set_tschchartseriesshowserieslabels(from.tschchartseriesshowserieslabels());
    }
    if (from.has_tschchartseriesshowsymbol()) {
      set_tschchartseriesshowsymbol(from.tschchartseriesshowsymbol());
    }
    if (from.has_tschchartseriesshowtrendline()) {
      set_tschchartseriesshowtrendline(from.tschchartseriesshowtrendline());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_tschchartseriesshowvaluelabels()) {
      set_tschchartseriesshowvaluelabels(from.tschchartseriesshowvaluelabels());
    }
    if (from.has_tschchartseriessizedimension()) {
      set_tschchartseriessizedimension(from.tschchartseriessizedimension());
    }
    if (from.has_tschchartseriessymboltype()) {
      set_tschchartseriessymboltype(from.tschchartseriessymboltype());
    }
    if (from.has_tschchartseriestrendlineequationoffsetx()) {
      set_tschchartseriestrendlineequationoffsetx(from.tschchartseriestrendlineequationoffsetx());
    }
    if (from.has_tschchartseriestrendlineequationoffsety()) {
      set_tschchartseriestrendlineequationoffsety(from.tschchartseriestrendlineequationoffsety());
    }
    if (from.has_tschchartseriestrendlinelabelstring()) {
      set_tschchartseriestrendlinelabelstring(from.tschchartseriestrendlinelabelstring());
    }
    if (from.has_tschchartseriestrendlineorder()) {
      set_tschchartseriestrendlineorder(from.tschchartseriestrendlineorder());
    }
    if (from.has_tschchartseriestrendlineperiod()) {
      set_tschchartseriestrendlineperiod(from.tschchartseriestrendlineperiod());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_tschchartseriestrendlinersquaredoffsetx()) {
      set_tschchartseriestrendlinersquaredoffsetx(from.tschchartseriestrendlinersquaredoffsetx());
    }
    if (from.has_tschchartseriestrendlinersquaredoffsety()) {
      set_tschchartseriestrendlinersquaredoffsety(from.tschchartseriestrendlinersquaredoffsety());
    }
    if (from.has_tschchartseriestrendlineshowequation()) {
      set_tschchartseriestrendlineshowequation(from.tschchartseriestrendlineshowequation());
    }
    if (from.has_tschchartseriestrendlineshowlabel()) {
      set_tschchartseriestrendlineshowlabel(from.tschchartseriestrendlineshowlabel());
    }
    if (from.has_tschchartseriestrendlineshowr2value()) {
      set_tschchartseriestrendlineshowr2value(from.tschchartseriestrendlineshowr2value());
    }
    if (from.has_tschchartseriestrendlinetype()) {
      set_tschchartseriestrendlinetype(from.tschchartseriestrendlinetype());
    }
    if (from.has_tschchartserieswedgeexplosion()) {
      set_tschchartserieswedgeexplosion(from.tschchartserieswedgeexplosion());
    }
    if (from.has_tschchartseriesyaxisordinal()) {
      set_tschchartseriesyaxisordinal(from.tschchartseriesyaxisordinal());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_tschchartseriesvaluelabelsaxis()) {
      set_tschchartseriesvaluelabelsaxis(from.tschchartseriesvaluelabelsaxis());
    }
    if (from.has_tschchartserieserrorbarlineend()) {
      mutable_tschchartserieserrorbarlineend()->::TSD::LineEndArchive::MergeFrom(from.tschchartserieserrorbarlineend());
    }
    if (from.has_tschchartserieserrorbarlineendscatterx()) {
      mutable_tschchartserieserrorbarlineendscatterx()->::TSD::LineEndArchive::MergeFrom(from.tschchartserieserrorbarlineendscatterx());
    }
    if (from.has_tschchartserieserrorbarshadow()) {
      mutable_tschchartserieserrorbarshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartserieserrorbarshadow());
    }
    if (from.has_tschchartserieserrorbarstroke()) {
      mutable_tschchartserieserrorbarstroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartserieserrorbarstroke());
    }
    if (from.has_tschchartserieserrorbarstrokescatterx()) {
      mutable_tschchartserieserrorbarstrokescatterx()->::TSD::StrokeArchive::MergeFrom(from.tschchartserieserrorbarstrokescatterx());
    }
    if (from.has_tschchartseriesfill()) {
      mutable_tschchartseriesfill()->::TSD::FillArchive::MergeFrom(from.tschchartseriesfill());
    }
    if (from.has_tschchartserieslabelparagraphstyleindex()) {
      set_tschchartserieslabelparagraphstyleindex(from.tschchartserieslabelparagraphstyleindex());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_tschchartseriesopacity()) {
      set_tschchartseriesopacity(from.tschchartseriesopacity());
    }
    if (from.has_tschchartseriesoutsidelabelparagraphstyleindex()) {
      set_tschchartseriesoutsidelabelparagraphstyleindex(from.tschchartseriesoutsidelabelparagraphstyleindex());
    }
    if (from.has_tschchartseriesshadow()) {
      mutable_tschchartseriesshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseriesshadow());
    }
    if (from.has_tschchartseriesstroke()) {
      mutable_tschchartseriesstroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriesstroke());
    }
    if (from.has_tschchartseriessymbolfill()) {
      mutable_tschchartseriessymbolfill()->::TSD::FillArchive::MergeFrom(from.tschchartseriessymbolfill());
    }
    if (from.has_tschchartseriessymbolfilluseseriesfill()) {
      set_tschchartseriessymbolfilluseseriesfill(from.tschchartseriessymbolfilluseseriesfill());
    }
    if (from.has_tschchartseriessymbolfilluseseriesstroke()) {
      set_tschchartseriessymbolfilluseseriesstroke(from.tschchartseriessymbolfilluseseriesstroke());
    }
    if (from.has_tschchartseriessymbolsize()) {
      set_tschchartseriessymbolsize(from.tschchartseriessymbolsize());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_tschchartseriessymbolstroke()) {
      mutable_tschchartseriessymbolstroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriessymbolstroke());
    }
    if (from.has_tschchartseriestrendlineequationopacity()) {
      set_tschchartseriestrendlineequationopacity(from.tschchartseriestrendlineequationopacity());
    }
    if (from.has_tschchartseriestrendlineequationparagraphstyleindex()) {
      set_tschchartseriestrendlineequationparagraphstyleindex(from.tschchartseriestrendlineequationparagraphstyleindex());
    }
    if (from.has_tschchartseriestrendlinersquaredopacity()) {
      set_tschchartseriestrendlinersquaredopacity(from.tschchartseriestrendlinersquaredopacity());
    }
    if (from.has_tschchartseriestrendlinersquaredparagraphstyleindex()) {
      set_tschchartseriestrendlinersquaredparagraphstyleindex(from.tschchartseriestrendlinersquaredparagraphstyleindex());
    }
    if (from.has_tschchartseriestrendlineshadow()) {
      mutable_tschchartseriestrendlineshadow()->::TSD::ShadowArchive::MergeFrom(from.tschchartseriestrendlineshadow());
    }
    if (from.has_tschchartseriestrendlinestroke()) {
      mutable_tschchartseriestrendlinestroke()->::TSD::StrokeArchive::MergeFrom(from.tschchartseriestrendlinestroke());
    }
    if (from.has_tschchartseriesvaluelabelposition()) {
      set_tschchartseriesvaluelabelposition(from.tschchartseriesvaluelabelposition());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_tschchartseriesshowlabelsinfront()) {
      set_tschchartseriesshowlabelsinfront(from.tschchartseriesshowlabelsinfront());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartSeriesGenericPropertyMapArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartSeriesGenericPropertyMapArchive::CopyFrom(const ChartSeriesGenericPropertyMapArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSeriesGenericPropertyMapArchive::IsInitialized() const {

  if (has_tschchartseries1_0numberformat()) {
    if (!this->tschchartseries1_0numberformat().IsInitialized()) return false;
  }
  if (has_tschchartseriesnumberformat()) {
    if (!this->tschchartseriesnumberformat().IsInitialized()) return false;
  }
  if (has_tschchartseries1_0dateformat()) {
    if (!this->tschchartseries1_0dateformat().IsInitialized()) return false;
  }
  if (has_tschchartseriesdurationformat()) {
    if (!this->tschchartseriesdurationformat().IsInitialized()) return false;
  }
  if (has_tschchartseriesdateformat()) {
    if (!this->tschchartseriesdateformat().IsInitialized()) return false;
  }
  if (has_tschchartseriespercentnumberformat()) {
    if (!this->tschchartseriespercentnumberformat().IsInitialized()) return false;
  }
  if (has_tschchartserieserrorbarlineend()) {
    if (!this->tschchartserieserrorbarlineend().IsInitialized()) return false;
  }
  if (has_tschchartserieserrorbarlineendscatterx()) {
    if (!this->tschchartserieserrorbarlineendscatterx().IsInitialized()) return false;
  }
  if (has_tschchartserieserrorbarshadow()) {
    if (!this->tschchartserieserrorbarshadow().IsInitialized()) return false;
  }
  if (has_tschchartserieserrorbarstroke()) {
    if (!this->tschchartserieserrorbarstroke().IsInitialized()) return false;
  }
  if (has_tschchartserieserrorbarstrokescatterx()) {
    if (!this->tschchartserieserrorbarstrokescatterx().IsInitialized()) return false;
  }
  if (has_tschchartseriesfill()) {
    if (!this->tschchartseriesfill().IsInitialized()) return false;
  }
  if (has_tschchartseriesshadow()) {
    if (!this->tschchartseriesshadow().IsInitialized()) return false;
  }
  if (has_tschchartseriesstroke()) {
    if (!this->tschchartseriesstroke().IsInitialized()) return false;
  }
  if (has_tschchartseriessymbolfill()) {
    if (!this->tschchartseriessymbolfill().IsInitialized()) return false;
  }
  if (has_tschchartseriessymbolstroke()) {
    if (!this->tschchartseriessymbolstroke().IsInitialized()) return false;
  }
  if (has_tschchartseriestrendlineshadow()) {
    if (!this->tschchartseriestrendlineshadow().IsInitialized()) return false;
  }
  if (has_tschchartseriestrendlinestroke()) {
    if (!this->tschchartseriestrendlinestroke().IsInitialized()) return false;
  }
  return true;
}

void ChartSeriesGenericPropertyMapArchive::Swap(ChartSeriesGenericPropertyMapArchive* other) {
  if (other != this) {
    std::swap(tschchartseriesadjustmentscale_, other->tschchartseriesadjustmentscale_);
    std::swap(tschchartserieserrorbarcustomnegativedata_, other->tschchartserieserrorbarcustomnegativedata_);
    std::swap(tschchartserieserrorbarcustomnegativedatascatterx_, other->tschchartserieserrorbarcustomnegativedatascatterx_);
    std::swap(tschchartserieserrorbarcustompositivedata_, other->tschchartserieserrorbarcustompositivedata_);
    std::swap(tschchartserieserrorbarcustompositivedatascatterx_, other->tschchartserieserrorbarcustompositivedatascatterx_);
    std::swap(tschchartserieserrorbarfixedvalue_, other->tschchartserieserrorbarfixedvalue_);
    std::swap(tschchartserieserrorbarfixedvaluescatterx_, other->tschchartserieserrorbarfixedvaluescatterx_);
    std::swap(tschchartserieserrorbarpercentvalue_, other->tschchartserieserrorbarpercentvalue_);
    std::swap(tschchartserieserrorbarpercentvaluescatterx_, other->tschchartserieserrorbarpercentvaluescatterx_);
    std::swap(tschchartserieserrorbarsetting_, other->tschchartserieserrorbarsetting_);
    std::swap(tschchartserieserrorbarsettingscatterx_, other->tschchartserieserrorbarsettingscatterx_);
    std::swap(tschchartserieserrorbarstddevvalue_, other->tschchartserieserrorbarstddevvalue_);
    std::swap(tschchartserieserrorbarstddevvaluescatterx_, other->tschchartserieserrorbarstddevvaluescatterx_);
    std::swap(tschchartserieserrorbartype_, other->tschchartserieserrorbartype_);
    std::swap(tschchartserieserrorbartypescatterx_, other->tschchartserieserrorbartypescatterx_);
    std::swap(tschchartserieslabelexplosion_, other->tschchartserieslabelexplosion_);
    std::swap(tschchartserieslinetype_, other->tschchartserieslinetype_);
    std::swap(tschchartseries1_0numberformat_, other->tschchartseries1_0numberformat_);
    std::swap(tschchartseriesnumberformat_, other->tschchartseriesnumberformat_);
    std::swap(tschchartseries1_0dateformat_, other->tschchartseries1_0dateformat_);
    std::swap(tschchartseriesdurationformat_, other->tschchartseriesdurationformat_);
    std::swap(tschchartseriesdateformat_, other->tschchartseriesdateformat_);
    std::swap(tschchartseriesnumberformattype_, other->tschchartseriesnumberformattype_);
    std::swap(tschchartseriespercentnumberformat_, other->tschchartseriespercentnumberformat_);
    std::swap(tschchartseriesseriestype_, other->tschchartseriesseriestype_);
    std::swap(tschchartseriesshowerrorbar_, other->tschchartseriesshowerrorbar_);
    std::swap(tschchartseriesshowerrorbarscatterx_, other->tschchartseriesshowerrorbarscatterx_);
    std::swap(tschchartseriesshowline_, other->tschchartseriesshowline_);
    std::swap(tschchartseriesshownegativedata_, other->tschchartseriesshownegativedata_);
    std::swap(tschchartseriesshowserieslabels_, other->tschchartseriesshowserieslabels_);
    std::swap(tschchartseriesshowsymbol_, other->tschchartseriesshowsymbol_);
    std::swap(tschchartseriesshowtrendline_, other->tschchartseriesshowtrendline_);
    std::swap(tschchartseriesshowvaluelabels_, other->tschchartseriesshowvaluelabels_);
    std::swap(tschchartseriessizedimension_, other->tschchartseriessizedimension_);
    std::swap(tschchartseriessymboltype_, other->tschchartseriessymboltype_);
    std::swap(tschchartseriestrendlineequationoffsetx_, other->tschchartseriestrendlineequationoffsetx_);
    std::swap(tschchartseriestrendlineequationoffsety_, other->tschchartseriestrendlineequationoffsety_);
    std::swap(tschchartseriestrendlinelabelstring_, other->tschchartseriestrendlinelabelstring_);
    std::swap(tschchartseriestrendlineorder_, other->tschchartseriestrendlineorder_);
    std::swap(tschchartseriestrendlineperiod_, other->tschchartseriestrendlineperiod_);
    std::swap(tschchartseriestrendlinersquaredoffsetx_, other->tschchartseriestrendlinersquaredoffsetx_);
    std::swap(tschchartseriestrendlinersquaredoffsety_, other->tschchartseriestrendlinersquaredoffsety_);
    std::swap(tschchartseriestrendlineshowequation_, other->tschchartseriestrendlineshowequation_);
    std::swap(tschchartseriestrendlineshowlabel_, other->tschchartseriestrendlineshowlabel_);
    std::swap(tschchartseriestrendlineshowr2value_, other->tschchartseriestrendlineshowr2value_);
    std::swap(tschchartseriestrendlinetype_, other->tschchartseriestrendlinetype_);
    std::swap(tschchartserieswedgeexplosion_, other->tschchartserieswedgeexplosion_);
    std::swap(tschchartseriesyaxisordinal_, other->tschchartseriesyaxisordinal_);
    std::swap(tschchartseriesvaluelabelsaxis_, other->tschchartseriesvaluelabelsaxis_);
    std::swap(tschchartserieserrorbarlineend_, other->tschchartserieserrorbarlineend_);
    std::swap(tschchartserieserrorbarlineendscatterx_, other->tschchartserieserrorbarlineendscatterx_);
    std::swap(tschchartserieserrorbarshadow_, other->tschchartserieserrorbarshadow_);
    std::swap(tschchartserieserrorbarstroke_, other->tschchartserieserrorbarstroke_);
    std::swap(tschchartserieserrorbarstrokescatterx_, other->tschchartserieserrorbarstrokescatterx_);
    std::swap(tschchartseriesfill_, other->tschchartseriesfill_);
    std::swap(tschchartserieslabelparagraphstyleindex_, other->tschchartserieslabelparagraphstyleindex_);
    std::swap(tschchartseriesopacity_, other->tschchartseriesopacity_);
    std::swap(tschchartseriesoutsidelabelparagraphstyleindex_, other->tschchartseriesoutsidelabelparagraphstyleindex_);
    std::swap(tschchartseriesshadow_, other->tschchartseriesshadow_);
    std::swap(tschchartseriesstroke_, other->tschchartseriesstroke_);
    std::swap(tschchartseriessymbolfill_, other->tschchartseriessymbolfill_);
    std::swap(tschchartseriessymbolfilluseseriesfill_, other->tschchartseriessymbolfilluseseriesfill_);
    std::swap(tschchartseriessymbolfilluseseriesstroke_, other->tschchartseriessymbolfilluseseriesstroke_);
    std::swap(tschchartseriessymbolsize_, other->tschchartseriessymbolsize_);
    std::swap(tschchartseriessymbolstroke_, other->tschchartseriessymbolstroke_);
    std::swap(tschchartseriestrendlineequationopacity_, other->tschchartseriestrendlineequationopacity_);
    std::swap(tschchartseriestrendlineequationparagraphstyleindex_, other->tschchartseriestrendlineequationparagraphstyleindex_);
    std::swap(tschchartseriestrendlinersquaredopacity_, other->tschchartseriestrendlinersquaredopacity_);
    std::swap(tschchartseriestrendlinersquaredparagraphstyleindex_, other->tschchartseriestrendlinersquaredparagraphstyleindex_);
    std::swap(tschchartseriestrendlineshadow_, other->tschchartseriestrendlineshadow_);
    std::swap(tschchartseriestrendlinestroke_, other->tschchartseriestrendlinestroke_);
    std::swap(tschchartseriesvaluelabelposition_, other->tschchartseriesvaluelabelposition_);
    std::swap(tschchartseriesshowlabelsinfront_, other->tschchartseriesshowlabelsinfront_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartSeriesGenericPropertyMapArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartSeriesGenericPropertyMapArchive_descriptor_;
  metadata.reflection = ChartSeriesGenericPropertyMapArchive_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Generated
}  // namespace TSCH

// @@protoc_insertion_point(global_scope)
