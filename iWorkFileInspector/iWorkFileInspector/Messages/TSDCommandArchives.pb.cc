// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSDCommandArchives.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TSDCommandArchives.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TSD {

namespace {

const ::google::protobuf::Descriptor* ConnectionLineConnectCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectionLineConnectCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupDrawablesCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupDrawablesCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* UngroupGroupCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UngroupGroupCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerRemoveChildrenCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerRemoveChildrenCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerInsertChildrenCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerInsertChildrenCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerReorderChildrenCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerReorderChildrenCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* InfoGeometryCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InfoGeometryCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* DrawablePathSourceCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DrawablePathSourceCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstantAlphaCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstantAlphaCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* DrawableShadowCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DrawableShadowCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* DrawableApplyThemeCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DrawableApplyThemeCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* StyledInfoSetStyleCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StyledInfoSetStyleCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShapePathSourceFlipCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShapePathSourceFlipCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShapeStyleSetValueCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShapeStyleSetValueCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShapeApplyPresetCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShapeApplyPresetCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShapeSetLineEndCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShapeSetLineEndCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* MovieSetValueCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MovieSetValueCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* MovieSetValueCommandArchive_PropertyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MovieSetValueCommandArchive_PropertyValue_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MovieSetValueCommandArchive_LoopOption_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MediaStyleSetValueCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaStyleSetValueCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageMediaCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageMediaCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaOriginalSizeCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaOriginalSizeCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageMaskCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageMaskCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaApplyPresetCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaApplyPresetCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageAdjustmentsCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageAdjustmentsCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaFlagsCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaFlagsCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* DrawablesCommandGroupArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DrawablesCommandGroupArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DrawablesCommandGroupArchive_DrawablesCommandGroupType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ExteriorTextWrapCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExteriorTextWrapCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExteriorTextWrapCommandArchive_InfoAndWrap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExteriorTextWrapCommandArchive_InfoAndWrap_reflection_ = NULL;
const ::google::protobuf::Descriptor* DrawableHyperlinkCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DrawableHyperlinkCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSelectionBehaviorArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSelectionBehaviorArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ImageReplaceCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageReplaceCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* DrawableLockCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DrawableLockCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* DrawableInfoCommentCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DrawableInfoCommentCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommentStorageApplyCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommentStorageApplyCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuideCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuideCommandArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GuideCommandArchive_GuideCommandMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DrawableAspectRatioLockedCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DrawableAspectRatioLockedCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* DrawableAccessibilityDescriptionCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DrawableAccessibilityDescriptionCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PasteStyleCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PasteStyleCommandArchive_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TSDCommandArchives_2eproto() {
  protobuf_AddDesc_TSDCommandArchives_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TSDCommandArchives.proto");
  GOOGLE_CHECK(file != NULL);
  ConnectionLineConnectCommandArchive_descriptor_ = file->message_type(0);
  static const int ConnectionLineConnectCommandArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionLineConnectCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionLineConnectCommandArchive, connection_line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionLineConnectCommandArchive, connect_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionLineConnectCommandArchive, connect_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionLineConnectCommandArchive, old_connect_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionLineConnectCommandArchive, old_connect_from_),
  };
  ConnectionLineConnectCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectionLineConnectCommandArchive_descriptor_,
      ConnectionLineConnectCommandArchive::default_instance_,
      ConnectionLineConnectCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionLineConnectCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionLineConnectCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectionLineConnectCommandArchive));
  GroupDrawablesCommandArchive_descriptor_ = file->message_type(1);
  static const int GroupDrawablesCommandArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDrawablesCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDrawablesCommandArchive, drawables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDrawablesCommandArchive, group_),
  };
  GroupDrawablesCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupDrawablesCommandArchive_descriptor_,
      GroupDrawablesCommandArchive::default_instance_,
      GroupDrawablesCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDrawablesCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDrawablesCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupDrawablesCommandArchive));
  UngroupGroupCommandArchive_descriptor_ = file->message_type(2);
  static const int UngroupGroupCommandArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UngroupGroupCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UngroupGroupCommandArchive, drawables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UngroupGroupCommandArchive, group_),
  };
  UngroupGroupCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UngroupGroupCommandArchive_descriptor_,
      UngroupGroupCommandArchive::default_instance_,
      UngroupGroupCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UngroupGroupCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UngroupGroupCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UngroupGroupCommandArchive));
  ContainerRemoveChildrenCommandArchive_descriptor_ = file->message_type(3);
  static const int ContainerRemoveChildrenCommandArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerRemoveChildrenCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerRemoveChildrenCommandArchive, container_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerRemoveChildrenCommandArchive, children_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerRemoveChildrenCommandArchive, children_indices_),
  };
  ContainerRemoveChildrenCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerRemoveChildrenCommandArchive_descriptor_,
      ContainerRemoveChildrenCommandArchive::default_instance_,
      ContainerRemoveChildrenCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerRemoveChildrenCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerRemoveChildrenCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerRemoveChildrenCommandArchive));
  ContainerInsertChildrenCommandArchive_descriptor_ = file->message_type(4);
  static const int ContainerInsertChildrenCommandArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInsertChildrenCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInsertChildrenCommandArchive, container_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInsertChildrenCommandArchive, children_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInsertChildrenCommandArchive, index_),
  };
  ContainerInsertChildrenCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerInsertChildrenCommandArchive_descriptor_,
      ContainerInsertChildrenCommandArchive::default_instance_,
      ContainerInsertChildrenCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInsertChildrenCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInsertChildrenCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerInsertChildrenCommandArchive));
  ContainerReorderChildrenCommandArchive_descriptor_ = file->message_type(5);
  static const int ContainerReorderChildrenCommandArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerReorderChildrenCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerReorderChildrenCommandArchive, container_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerReorderChildrenCommandArchive, children_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerReorderChildrenCommandArchive, children_indices_),
  };
  ContainerReorderChildrenCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerReorderChildrenCommandArchive_descriptor_,
      ContainerReorderChildrenCommandArchive::default_instance_,
      ContainerReorderChildrenCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerReorderChildrenCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerReorderChildrenCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerReorderChildrenCommandArchive));
  InfoGeometryCommandArchive_descriptor_ = file->message_type(6);
  static const int InfoGeometryCommandArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoGeometryCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoGeometryCommandArchive, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoGeometryCommandArchive, newgeometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoGeometryCommandArchive, oldgeometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoGeometryCommandArchive, shouldclearobjectplaceholderflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoGeometryCommandArchive, didmatchobjectplaceholdergeometry_),
  };
  InfoGeometryCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InfoGeometryCommandArchive_descriptor_,
      InfoGeometryCommandArchive::default_instance_,
      InfoGeometryCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoGeometryCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoGeometryCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InfoGeometryCommandArchive));
  DrawablePathSourceCommandArchive_descriptor_ = file->message_type(7);
  static const int DrawablePathSourceCommandArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawablePathSourceCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawablePathSourceCommandArchive, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawablePathSourceCommandArchive, oldpathsource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawablePathSourceCommandArchive, newpathsource_),
  };
  DrawablePathSourceCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DrawablePathSourceCommandArchive_descriptor_,
      DrawablePathSourceCommandArchive::default_instance_,
      DrawablePathSourceCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawablePathSourceCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawablePathSourceCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DrawablePathSourceCommandArchive));
  InstantAlphaCommandArchive_descriptor_ = file->message_type(8);
  static const int InstantAlphaCommandArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstantAlphaCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstantAlphaCommandArchive, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstantAlphaCommandArchive, oldpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstantAlphaCommandArchive, newpath_),
  };
  InstantAlphaCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstantAlphaCommandArchive_descriptor_,
      InstantAlphaCommandArchive::default_instance_,
      InstantAlphaCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstantAlphaCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstantAlphaCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstantAlphaCommandArchive));
  DrawableShadowCommandArchive_descriptor_ = file->message_type(9);
  static const int DrawableShadowCommandArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableShadowCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableShadowCommandArchive, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableShadowCommandArchive, oldshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableShadowCommandArchive, newshadow_),
  };
  DrawableShadowCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DrawableShadowCommandArchive_descriptor_,
      DrawableShadowCommandArchive::default_instance_,
      DrawableShadowCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableShadowCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableShadowCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DrawableShadowCommandArchive));
  DrawableApplyThemeCommandArchive_descriptor_ = file->message_type(10);
  static const int DrawableApplyThemeCommandArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableApplyThemeCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableApplyThemeCommandArchive, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableApplyThemeCommandArchive, style_),
  };
  DrawableApplyThemeCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DrawableApplyThemeCommandArchive_descriptor_,
      DrawableApplyThemeCommandArchive::default_instance_,
      DrawableApplyThemeCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableApplyThemeCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableApplyThemeCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DrawableApplyThemeCommandArchive));
  StyledInfoSetStyleCommandArchive_descriptor_ = file->message_type(11);
  static const int StyledInfoSetStyleCommandArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyledInfoSetStyleCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyledInfoSetStyleCommandArchive, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyledInfoSetStyleCommandArchive, style_),
  };
  StyledInfoSetStyleCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StyledInfoSetStyleCommandArchive_descriptor_,
      StyledInfoSetStyleCommandArchive::default_instance_,
      StyledInfoSetStyleCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyledInfoSetStyleCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyledInfoSetStyleCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StyledInfoSetStyleCommandArchive));
  ShapePathSourceFlipCommandArchive_descriptor_ = file->message_type(12);
  static const int ShapePathSourceFlipCommandArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapePathSourceFlipCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapePathSourceFlipCommandArchive, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapePathSourceFlipCommandArchive, newhorizontalflip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapePathSourceFlipCommandArchive, newverticalflip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapePathSourceFlipCommandArchive, oldhorizontalflip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapePathSourceFlipCommandArchive, oldverticalflip_),
  };
  ShapePathSourceFlipCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShapePathSourceFlipCommandArchive_descriptor_,
      ShapePathSourceFlipCommandArchive::default_instance_,
      ShapePathSourceFlipCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapePathSourceFlipCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapePathSourceFlipCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShapePathSourceFlipCommandArchive));
  ShapeStyleSetValueCommandArchive_descriptor_ = file->message_type(13);
  static const int ShapeStyleSetValueCommandArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStyleSetValueCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStyleSetValueCommandArchive, shape_properties_),
  };
  ShapeStyleSetValueCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShapeStyleSetValueCommandArchive_descriptor_,
      ShapeStyleSetValueCommandArchive::default_instance_,
      ShapeStyleSetValueCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStyleSetValueCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStyleSetValueCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShapeStyleSetValueCommandArchive));
  ShapeApplyPresetCommandArchive_descriptor_ = file->message_type(14);
  static const int ShapeApplyPresetCommandArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeApplyPresetCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeApplyPresetCommandArchive, stylepreset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeApplyPresetCommandArchive, colorpreset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeApplyPresetCommandArchive, fillpreset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeApplyPresetCommandArchive, shadowpreset_),
  };
  ShapeApplyPresetCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShapeApplyPresetCommandArchive_descriptor_,
      ShapeApplyPresetCommandArchive::default_instance_,
      ShapeApplyPresetCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeApplyPresetCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeApplyPresetCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShapeApplyPresetCommandArchive));
  ShapeSetLineEndCommandArchive_descriptor_ = file->message_type(15);
  static const int ShapeSetLineEndCommandArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeSetLineEndCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeSetLineEndCommandArchive, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeSetLineEndCommandArchive, line_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeSetLineEndCommandArchive, is_head_line_end_),
  };
  ShapeSetLineEndCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShapeSetLineEndCommandArchive_descriptor_,
      ShapeSetLineEndCommandArchive::default_instance_,
      ShapeSetLineEndCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeSetLineEndCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeSetLineEndCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShapeSetLineEndCommandArchive));
  MovieSetValueCommandArchive_descriptor_ = file->message_type(16);
  static const int MovieSetValueCommandArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieSetValueCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieSetValueCommandArchive, movie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieSetValueCommandArchive, deprecated_property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieSetValueCommandArchive, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieSetValueCommandArchive, value_),
  };
  MovieSetValueCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MovieSetValueCommandArchive_descriptor_,
      MovieSetValueCommandArchive::default_instance_,
      MovieSetValueCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieSetValueCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieSetValueCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MovieSetValueCommandArchive));
  MovieSetValueCommandArchive_PropertyValue_descriptor_ = MovieSetValueCommandArchive_descriptor_->nested_type(0);
  static const int MovieSetValueCommandArchive_PropertyValue_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieSetValueCommandArchive_PropertyValue, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieSetValueCommandArchive_PropertyValue, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieSetValueCommandArchive_PropertyValue, postertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieSetValueCommandArchive_PropertyValue, posterimagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieSetValueCommandArchive_PropertyValue, autoplay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieSetValueCommandArchive_PropertyValue, loopoption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieSetValueCommandArchive_PropertyValue, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieSetValueCommandArchive_PropertyValue, media_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieSetValueCommandArchive_PropertyValue, importedauxiliarymedia_),
  };
  MovieSetValueCommandArchive_PropertyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MovieSetValueCommandArchive_PropertyValue_descriptor_,
      MovieSetValueCommandArchive_PropertyValue::default_instance_,
      MovieSetValueCommandArchive_PropertyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieSetValueCommandArchive_PropertyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieSetValueCommandArchive_PropertyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MovieSetValueCommandArchive_PropertyValue));
  MovieSetValueCommandArchive_LoopOption_descriptor_ = MovieSetValueCommandArchive_descriptor_->enum_type(0);
  MediaStyleSetValueCommandArchive_descriptor_ = file->message_type(17);
  static const int MediaStyleSetValueCommandArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaStyleSetValueCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaStyleSetValueCommandArchive, media_properties_),
  };
  MediaStyleSetValueCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaStyleSetValueCommandArchive_descriptor_,
      MediaStyleSetValueCommandArchive::default_instance_,
      MediaStyleSetValueCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaStyleSetValueCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaStyleSetValueCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaStyleSetValueCommandArchive));
  ImageMediaCommandArchive_descriptor_ = file->message_type(18);
  static const int ImageMediaCommandArchive_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMediaCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMediaCommandArchive, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMediaCommandArchive, newimagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMediaCommandArchive, oldimagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMediaCommandArchive, oldoriginalimagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMediaCommandArchive, oldnaturalsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMediaCommandArchive, neworiginalimagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMediaCommandArchive, oldimageadjustments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMediaCommandArchive, oldadjustedimagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMediaCommandArchive, oldenhancedimagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMediaCommandArchive, database_newimagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMediaCommandArchive, database_oldimagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMediaCommandArchive, database_oldoriginalimagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMediaCommandArchive, database_neworiginalimagedata_),
  };
  ImageMediaCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageMediaCommandArchive_descriptor_,
      ImageMediaCommandArchive::default_instance_,
      ImageMediaCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMediaCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMediaCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageMediaCommandArchive));
  MediaOriginalSizeCommandArchive_descriptor_ = file->message_type(19);
  static const int MediaOriginalSizeCommandArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaOriginalSizeCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaOriginalSizeCommandArchive, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaOriginalSizeCommandArchive, neworiginalsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaOriginalSizeCommandArchive, oldoriginalsize_),
  };
  MediaOriginalSizeCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaOriginalSizeCommandArchive_descriptor_,
      MediaOriginalSizeCommandArchive::default_instance_,
      MediaOriginalSizeCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaOriginalSizeCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaOriginalSizeCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaOriginalSizeCommandArchive));
  ImageMaskCommandArchive_descriptor_ = file->message_type(20);
  static const int ImageMaskCommandArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMaskCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMaskCommandArchive, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMaskCommandArchive, newmaskinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMaskCommandArchive, oldmaskinfo_),
  };
  ImageMaskCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageMaskCommandArchive_descriptor_,
      ImageMaskCommandArchive::default_instance_,
      ImageMaskCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMaskCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageMaskCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageMaskCommandArchive));
  MediaApplyPresetCommandArchive_descriptor_ = file->message_type(21);
  static const int MediaApplyPresetCommandArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaApplyPresetCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaApplyPresetCommandArchive, stylepreset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaApplyPresetCommandArchive, shadowpreset_),
  };
  MediaApplyPresetCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaApplyPresetCommandArchive_descriptor_,
      MediaApplyPresetCommandArchive::default_instance_,
      MediaApplyPresetCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaApplyPresetCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaApplyPresetCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaApplyPresetCommandArchive));
  ImageAdjustmentsCommandArchive_descriptor_ = file->message_type(22);
  static const int ImageAdjustmentsCommandArchive_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAdjustmentsCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAdjustmentsCommandArchive, old_image_adjustments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAdjustmentsCommandArchive, new_image_adjustments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAdjustmentsCommandArchive, adjustedimagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAdjustmentsCommandArchive, replacedadjustedimagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAdjustmentsCommandArchive, enhancedimagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAdjustmentsCommandArchive, replacedenhancedimagedata_),
  };
  ImageAdjustmentsCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageAdjustmentsCommandArchive_descriptor_,
      ImageAdjustmentsCommandArchive::default_instance_,
      ImageAdjustmentsCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAdjustmentsCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAdjustmentsCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageAdjustmentsCommandArchive));
  MediaFlagsCommandArchive_descriptor_ = file->message_type(23);
  static const int MediaFlagsCommandArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaFlagsCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaFlagsCommandArchive, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaFlagsCommandArchive, flags_),
  };
  MediaFlagsCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaFlagsCommandArchive_descriptor_,
      MediaFlagsCommandArchive::default_instance_,
      MediaFlagsCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaFlagsCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaFlagsCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaFlagsCommandArchive));
  DrawablesCommandGroupArchive_descriptor_ = file->message_type(24);
  static const int DrawablesCommandGroupArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawablesCommandGroupArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawablesCommandGroupArchive, obsolete_selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawablesCommandGroupArchive, modelforselection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawablesCommandGroupArchive, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawablesCommandGroupArchive, fordrag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawablesCommandGroupArchive, archivedselection_),
  };
  DrawablesCommandGroupArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DrawablesCommandGroupArchive_descriptor_,
      DrawablesCommandGroupArchive::default_instance_,
      DrawablesCommandGroupArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawablesCommandGroupArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawablesCommandGroupArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DrawablesCommandGroupArchive));
  DrawablesCommandGroupArchive_DrawablesCommandGroupType_descriptor_ = DrawablesCommandGroupArchive_descriptor_->enum_type(0);
  ExteriorTextWrapCommandArchive_descriptor_ = file->message_type(25);
  static const int ExteriorTextWrapCommandArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExteriorTextWrapCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExteriorTextWrapCommandArchive, info_and_wrap_),
  };
  ExteriorTextWrapCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExteriorTextWrapCommandArchive_descriptor_,
      ExteriorTextWrapCommandArchive::default_instance_,
      ExteriorTextWrapCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExteriorTextWrapCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExteriorTextWrapCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExteriorTextWrapCommandArchive));
  ExteriorTextWrapCommandArchive_InfoAndWrap_descriptor_ = ExteriorTextWrapCommandArchive_descriptor_->nested_type(0);
  static const int ExteriorTextWrapCommandArchive_InfoAndWrap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExteriorTextWrapCommandArchive_InfoAndWrap, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExteriorTextWrapCommandArchive_InfoAndWrap, exterior_text_wrap_),
  };
  ExteriorTextWrapCommandArchive_InfoAndWrap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExteriorTextWrapCommandArchive_InfoAndWrap_descriptor_,
      ExteriorTextWrapCommandArchive_InfoAndWrap::default_instance_,
      ExteriorTextWrapCommandArchive_InfoAndWrap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExteriorTextWrapCommandArchive_InfoAndWrap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExteriorTextWrapCommandArchive_InfoAndWrap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExteriorTextWrapCommandArchive_InfoAndWrap));
  DrawableHyperlinkCommandArchive_descriptor_ = file->message_type(26);
  static const int DrawableHyperlinkCommandArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableHyperlinkCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableHyperlinkCommandArchive, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableHyperlinkCommandArchive, oldhyperlink_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableHyperlinkCommandArchive, newhyperlink_url_),
  };
  DrawableHyperlinkCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DrawableHyperlinkCommandArchive_descriptor_,
      DrawableHyperlinkCommandArchive::default_instance_,
      DrawableHyperlinkCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableHyperlinkCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableHyperlinkCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DrawableHyperlinkCommandArchive));
  CommandSelectionBehaviorArchive_descriptor_ = file->message_type(27);
  static const int CommandSelectionBehaviorArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSelectionBehaviorArchive, model_for_selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSelectionBehaviorArchive, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSelectionBehaviorArchive, archived_selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSelectionBehaviorArchive, archived_new_selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSelectionBehaviorArchive, old_model_for_selection_),
  };
  CommandSelectionBehaviorArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSelectionBehaviorArchive_descriptor_,
      CommandSelectionBehaviorArchive::default_instance_,
      CommandSelectionBehaviorArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSelectionBehaviorArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSelectionBehaviorArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSelectionBehaviorArchive));
  CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_descriptor_ = CommandSelectionBehaviorArchive_descriptor_->enum_type(0);
  ImageReplaceCommandArchive_descriptor_ = file->message_type(28);
  static const int ImageReplaceCommandArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageReplaceCommandArchive, super_),
  };
  ImageReplaceCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageReplaceCommandArchive_descriptor_,
      ImageReplaceCommandArchive::default_instance_,
      ImageReplaceCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageReplaceCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageReplaceCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageReplaceCommandArchive));
  DrawableLockCommandArchive_descriptor_ = file->message_type(29);
  static const int DrawableLockCommandArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableLockCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableLockCommandArchive, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableLockCommandArchive, lock_),
  };
  DrawableLockCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DrawableLockCommandArchive_descriptor_,
      DrawableLockCommandArchive::default_instance_,
      DrawableLockCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableLockCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableLockCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DrawableLockCommandArchive));
  DrawableInfoCommentCommandArchive_descriptor_ = file->message_type(30);
  static const int DrawableInfoCommentCommandArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableInfoCommentCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableInfoCommentCommandArchive, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableInfoCommentCommandArchive, old_comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableInfoCommentCommandArchive, new_comment_),
  };
  DrawableInfoCommentCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DrawableInfoCommentCommandArchive_descriptor_,
      DrawableInfoCommentCommandArchive::default_instance_,
      DrawableInfoCommentCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableInfoCommentCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableInfoCommentCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DrawableInfoCommentCommandArchive));
  CommentStorageApplyCommandArchive_descriptor_ = file->message_type(31);
  static const int CommentStorageApplyCommandArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentStorageApplyCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentStorageApplyCommandArchive, comment_storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentStorageApplyCommandArchive, comment_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentStorageApplyCommandArchive, old_comment_string_),
  };
  CommentStorageApplyCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommentStorageApplyCommandArchive_descriptor_,
      CommentStorageApplyCommandArchive::default_instance_,
      CommentStorageApplyCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentStorageApplyCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentStorageApplyCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommentStorageApplyCommandArchive));
  GuideCommandArchive_descriptor_ = file->message_type(32);
  static const int GuideCommandArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideCommandArchive, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideCommandArchive, old_guide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideCommandArchive, new_guide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideCommandArchive, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideCommandArchive, old_storage_),
  };
  GuideCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuideCommandArchive_descriptor_,
      GuideCommandArchive::default_instance_,
      GuideCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuideCommandArchive));
  GuideCommandArchive_GuideCommandMode_descriptor_ = GuideCommandArchive_descriptor_->enum_type(0);
  DrawableAspectRatioLockedCommandArchive_descriptor_ = file->message_type(33);
  static const int DrawableAspectRatioLockedCommandArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableAspectRatioLockedCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableAspectRatioLockedCommandArchive, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableAspectRatioLockedCommandArchive, aspect_ratio_locked_),
  };
  DrawableAspectRatioLockedCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DrawableAspectRatioLockedCommandArchive_descriptor_,
      DrawableAspectRatioLockedCommandArchive::default_instance_,
      DrawableAspectRatioLockedCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableAspectRatioLockedCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableAspectRatioLockedCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DrawableAspectRatioLockedCommandArchive));
  DrawableAccessibilityDescriptionCommandArchive_descriptor_ = file->message_type(34);
  static const int DrawableAccessibilityDescriptionCommandArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableAccessibilityDescriptionCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableAccessibilityDescriptionCommandArchive, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableAccessibilityDescriptionCommandArchive, accessibility_description_),
  };
  DrawableAccessibilityDescriptionCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DrawableAccessibilityDescriptionCommandArchive_descriptor_,
      DrawableAccessibilityDescriptionCommandArchive::default_instance_,
      DrawableAccessibilityDescriptionCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableAccessibilityDescriptionCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableAccessibilityDescriptionCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DrawableAccessibilityDescriptionCommandArchive));
  PasteStyleCommandArchive_descriptor_ = file->message_type(35);
  static const int PasteStyleCommandArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteStyleCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteStyleCommandArchive, dest_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteStyleCommandArchive, shape_style_),
  };
  PasteStyleCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PasteStyleCommandArchive_descriptor_,
      PasteStyleCommandArchive::default_instance_,
      PasteStyleCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteStyleCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteStyleCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PasteStyleCommandArchive));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TSDCommandArchives_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectionLineConnectCommandArchive_descriptor_, &ConnectionLineConnectCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupDrawablesCommandArchive_descriptor_, &GroupDrawablesCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UngroupGroupCommandArchive_descriptor_, &UngroupGroupCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerRemoveChildrenCommandArchive_descriptor_, &ContainerRemoveChildrenCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerInsertChildrenCommandArchive_descriptor_, &ContainerInsertChildrenCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerReorderChildrenCommandArchive_descriptor_, &ContainerReorderChildrenCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InfoGeometryCommandArchive_descriptor_, &InfoGeometryCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DrawablePathSourceCommandArchive_descriptor_, &DrawablePathSourceCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstantAlphaCommandArchive_descriptor_, &InstantAlphaCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DrawableShadowCommandArchive_descriptor_, &DrawableShadowCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DrawableApplyThemeCommandArchive_descriptor_, &DrawableApplyThemeCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StyledInfoSetStyleCommandArchive_descriptor_, &StyledInfoSetStyleCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShapePathSourceFlipCommandArchive_descriptor_, &ShapePathSourceFlipCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShapeStyleSetValueCommandArchive_descriptor_, &ShapeStyleSetValueCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShapeApplyPresetCommandArchive_descriptor_, &ShapeApplyPresetCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShapeSetLineEndCommandArchive_descriptor_, &ShapeSetLineEndCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MovieSetValueCommandArchive_descriptor_, &MovieSetValueCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MovieSetValueCommandArchive_PropertyValue_descriptor_, &MovieSetValueCommandArchive_PropertyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaStyleSetValueCommandArchive_descriptor_, &MediaStyleSetValueCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageMediaCommandArchive_descriptor_, &ImageMediaCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaOriginalSizeCommandArchive_descriptor_, &MediaOriginalSizeCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageMaskCommandArchive_descriptor_, &ImageMaskCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaApplyPresetCommandArchive_descriptor_, &MediaApplyPresetCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageAdjustmentsCommandArchive_descriptor_, &ImageAdjustmentsCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaFlagsCommandArchive_descriptor_, &MediaFlagsCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DrawablesCommandGroupArchive_descriptor_, &DrawablesCommandGroupArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExteriorTextWrapCommandArchive_descriptor_, &ExteriorTextWrapCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExteriorTextWrapCommandArchive_InfoAndWrap_descriptor_, &ExteriorTextWrapCommandArchive_InfoAndWrap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DrawableHyperlinkCommandArchive_descriptor_, &DrawableHyperlinkCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSelectionBehaviorArchive_descriptor_, &CommandSelectionBehaviorArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageReplaceCommandArchive_descriptor_, &ImageReplaceCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DrawableLockCommandArchive_descriptor_, &DrawableLockCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DrawableInfoCommentCommandArchive_descriptor_, &DrawableInfoCommentCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommentStorageApplyCommandArchive_descriptor_, &CommentStorageApplyCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuideCommandArchive_descriptor_, &GuideCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DrawableAspectRatioLockedCommandArchive_descriptor_, &DrawableAspectRatioLockedCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DrawableAccessibilityDescriptionCommandArchive_descriptor_, &DrawableAccessibilityDescriptionCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PasteStyleCommandArchive_descriptor_, &PasteStyleCommandArchive::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TSDCommandArchives_2eproto() {
  delete ConnectionLineConnectCommandArchive::default_instance_;
  delete ConnectionLineConnectCommandArchive_reflection_;
  delete GroupDrawablesCommandArchive::default_instance_;
  delete GroupDrawablesCommandArchive_reflection_;
  delete UngroupGroupCommandArchive::default_instance_;
  delete UngroupGroupCommandArchive_reflection_;
  delete ContainerRemoveChildrenCommandArchive::default_instance_;
  delete ContainerRemoveChildrenCommandArchive_reflection_;
  delete ContainerInsertChildrenCommandArchive::default_instance_;
  delete ContainerInsertChildrenCommandArchive_reflection_;
  delete ContainerReorderChildrenCommandArchive::default_instance_;
  delete ContainerReorderChildrenCommandArchive_reflection_;
  delete InfoGeometryCommandArchive::default_instance_;
  delete InfoGeometryCommandArchive_reflection_;
  delete DrawablePathSourceCommandArchive::default_instance_;
  delete DrawablePathSourceCommandArchive_reflection_;
  delete InstantAlphaCommandArchive::default_instance_;
  delete InstantAlphaCommandArchive_reflection_;
  delete DrawableShadowCommandArchive::default_instance_;
  delete DrawableShadowCommandArchive_reflection_;
  delete DrawableApplyThemeCommandArchive::default_instance_;
  delete DrawableApplyThemeCommandArchive_reflection_;
  delete StyledInfoSetStyleCommandArchive::default_instance_;
  delete StyledInfoSetStyleCommandArchive_reflection_;
  delete ShapePathSourceFlipCommandArchive::default_instance_;
  delete ShapePathSourceFlipCommandArchive_reflection_;
  delete ShapeStyleSetValueCommandArchive::default_instance_;
  delete ShapeStyleSetValueCommandArchive_reflection_;
  delete ShapeApplyPresetCommandArchive::default_instance_;
  delete ShapeApplyPresetCommandArchive_reflection_;
  delete ShapeSetLineEndCommandArchive::default_instance_;
  delete ShapeSetLineEndCommandArchive_reflection_;
  delete MovieSetValueCommandArchive::default_instance_;
  delete MovieSetValueCommandArchive_reflection_;
  delete MovieSetValueCommandArchive_PropertyValue::default_instance_;
  delete MovieSetValueCommandArchive_PropertyValue_reflection_;
  delete MediaStyleSetValueCommandArchive::default_instance_;
  delete MediaStyleSetValueCommandArchive_reflection_;
  delete ImageMediaCommandArchive::default_instance_;
  delete ImageMediaCommandArchive_reflection_;
  delete MediaOriginalSizeCommandArchive::default_instance_;
  delete MediaOriginalSizeCommandArchive_reflection_;
  delete ImageMaskCommandArchive::default_instance_;
  delete ImageMaskCommandArchive_reflection_;
  delete MediaApplyPresetCommandArchive::default_instance_;
  delete MediaApplyPresetCommandArchive_reflection_;
  delete ImageAdjustmentsCommandArchive::default_instance_;
  delete ImageAdjustmentsCommandArchive_reflection_;
  delete MediaFlagsCommandArchive::default_instance_;
  delete MediaFlagsCommandArchive_reflection_;
  delete DrawablesCommandGroupArchive::default_instance_;
  delete DrawablesCommandGroupArchive_reflection_;
  delete ExteriorTextWrapCommandArchive::default_instance_;
  delete ExteriorTextWrapCommandArchive_reflection_;
  delete ExteriorTextWrapCommandArchive_InfoAndWrap::default_instance_;
  delete ExteriorTextWrapCommandArchive_InfoAndWrap_reflection_;
  delete DrawableHyperlinkCommandArchive::default_instance_;
  delete DrawableHyperlinkCommandArchive_reflection_;
  delete CommandSelectionBehaviorArchive::default_instance_;
  delete CommandSelectionBehaviorArchive_reflection_;
  delete ImageReplaceCommandArchive::default_instance_;
  delete ImageReplaceCommandArchive_reflection_;
  delete DrawableLockCommandArchive::default_instance_;
  delete DrawableLockCommandArchive_reflection_;
  delete DrawableInfoCommentCommandArchive::default_instance_;
  delete DrawableInfoCommentCommandArchive_reflection_;
  delete CommentStorageApplyCommandArchive::default_instance_;
  delete CommentStorageApplyCommandArchive_reflection_;
  delete GuideCommandArchive::default_instance_;
  delete GuideCommandArchive_reflection_;
  delete DrawableAspectRatioLockedCommandArchive::default_instance_;
  delete DrawableAspectRatioLockedCommandArchive_reflection_;
  delete DrawableAccessibilityDescriptionCommandArchive::default_instance_;
  delete DrawableAccessibilityDescriptionCommandArchive_reflection_;
  delete PasteStyleCommandArchive::default_instance_;
  delete PasteStyleCommandArchive_reflection_;
}

void protobuf_AddDesc_TSDCommandArchives_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::TSP::protobuf_AddDesc_TSPMessages_2eproto();
  ::TSK::protobuf_AddDesc_TSKArchives_2eproto();
  ::TSS::protobuf_AddDesc_TSSArchives_2eproto();
  ::TSD::protobuf_AddDesc_TSDArchives_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030TSDCommandArchives.proto\022\003TSD\032\021TSPMess"
    "ages.proto\032\021TSKArchives.proto\032\021TSSArchiv"
    "es.proto\032\021TSDArchives.proto\"\216\002\n#Connecti"
    "onLineConnectCommandArchive\022\"\n\005super\030\001 \002"
    "(\0132\023.TSK.CommandArchive\022\'\n\017connection_li"
    "ne\030\002 \002(\0132\016.TSP.Reference\022\"\n\nconnect_to\030\003"
    " \001(\0132\016.TSP.Reference\022$\n\014connect_from\030\004 \001"
    "(\0132\016.TSP.Reference\022&\n\016old_connect_to\030\005 \001"
    "(\0132\016.TSP.Reference\022(\n\020old_connect_from\030\006"
    " \001(\0132\016.TSP.Reference\"\204\001\n\034GroupDrawablesC"
    "ommandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comma"
    "ndArchive\022!\n\tdrawables\030\002 \003(\0132\016.TSP.Refer"
    "ence\022\035\n\005group\030\003 \001(\0132\016.TSP.Reference\"\202\001\n\032"
    "UngroupGroupCommandArchive\022\"\n\005super\030\001 \002("
    "\0132\023.TSK.CommandArchive\022!\n\tdrawables\030\002 \003("
    "\0132\016.TSP.Reference\022\035\n\005group\030\003 \001(\0132\016.TSP.R"
    "eference\"\271\001\n%ContainerRemoveChildrenComm"
    "andArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandA"
    "rchive\022!\n\tcontainer\030\002 \001(\0132\016.TSP.Referenc"
    "e\022 \n\010children\030\003 \003(\0132\016.TSP.Reference\022\'\n\020c"
    "hildren_indices\030\004 \001(\0132\r.TSP.IndexSet\"\237\001\n"
    "%ContainerInsertChildrenCommandArchive\022\""
    "\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022!\n\tco"
    "ntainer\030\002 \001(\0132\016.TSP.Reference\022 \n\010childre"
    "n\030\003 \003(\0132\016.TSP.Reference\022\r\n\005index\030\004 \001(\004\"\272"
    "\001\n&ContainerReorderChildrenCommandArchiv"
    "e\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022!\n"
    "\tcontainer\030\002 \001(\0132\016.TSP.Reference\022 \n\010chil"
    "dren\030\003 \003(\0132\016.TSP.Reference\022\'\n\020children_i"
    "ndices\030\004 \001(\0132\r.TSP.IndexSet\"\211\002\n\032InfoGeom"
    "etryCommandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK."
    "CommandArchive\022\034\n\004info\030\002 \001(\0132\016.TSP.Refer"
    "ence\022)\n\013newGeometry\030\003 \001(\0132\024.TSD.Geometry"
    "Archive\022)\n\013oldGeometry\030\004 \001(\0132\024.TSD.Geome"
    "tryArchive\022(\n shouldClearObjectPlacehold"
    "erFlag\030\005 \001(\010\022)\n!didMatchObjectPlaceholde"
    "rGeometry\030\006 \001(\010\"\302\001\n DrawablePathSourceCo"
    "mmandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comman"
    "dArchive\022\034\n\004info\030\002 \001(\0132\016.TSP.Reference\022-"
    "\n\roldpathsource\030\003 \001(\0132\026.TSD.PathSourceAr"
    "chive\022-\n\rnewpathsource\030\004 \001(\0132\026.TSD.PathS"
    "ourceArchive\"\227\001\n\032InstantAlphaCommandArch"
    "ive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022"
    "\035\n\005image\030\002 \001(\0132\016.TSP.Reference\022\032\n\007oldpat"
    "h\030\003 \001(\0132\t.TSP.Path\022\032\n\007newpath\030\004 \001(\0132\t.TS"
    "P.Path\"\256\001\n\034DrawableShadowCommandArchive\022"
    "\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\034\n\004i"
    "nfo\030\002 \001(\0132\016.TSP.Reference\022%\n\toldshadow\030\003"
    " \001(\0132\022.TSD.ShadowArchive\022%\n\tnewshadow\030\004 "
    "\001(\0132\022.TSD.ShadowArchive\"\222\001\n DrawableAppl"
    "yThemeCommandArchive\0221\n\005super\030\001 \002(\0132\".TS"
    "S.ApplyThemeChildCommandArchive\022\034\n\004info\030"
    "\002 \001(\0132\016.TSP.Reference\022\035\n\005style\030\003 \001(\0132\016.T"
    "SP.Reference\"\203\001\n StyledInfoSetStyleComma"
    "ndArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandAr"
    "chive\022\034\n\004info\030\002 \001(\0132\016.TSP.Reference\022\035\n\005s"
    "tyle\030\003 \001(\0132\016.TSP.Reference\"\315\001\n!ShapePath"
    "SourceFlipCommandArchive\022\"\n\005super\030\001 \002(\0132"
    "\023.TSK.CommandArchive\022\034\n\004info\030\002 \001(\0132\016.TSP"
    ".Reference\022\031\n\021newHorizontalFlip\030\003 \001(\010\022\027\n"
    "\017newVerticalFlip\030\004 \001(\010\022\031\n\021oldHorizontalF"
    "lip\030\005 \001(\010\022\027\n\017oldVerticalFlip\030\006 \001(\010\"\224\001\n S"
    "hapeStyleSetValueCommandArchive\0224\n\005super"
    "\030\001 \002(\0132%.TSD.StyledInfoSetStyleCommandAr"
    "chive\022:\n\020shape_properties\030\004 \001(\0132 .TSD.Sh"
    "apeStylePropertiesArchive\"\354\001\n\036ShapeApply"
    "PresetCommandArchive\0224\n\005super\030\001 \002(\0132%.TS"
    "D.StyledInfoSetStyleCommandArchive\022#\n\013st"
    "ylepreset\030\n \001(\0132\016.TSP.Reference\022\037\n\013color"
    "preset\030\013 \001(\0132\n.TSP.Color\022$\n\nfillpreset\030\014"
    " \001(\0132\020.TSD.FillArchive\022(\n\014shadowpreset\030\r"
    " \001(\0132\022.TSD.ShadowArchive\"\243\001\n\035ShapeSetLin"
    "eEndCommandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK."
    "CommandArchive\022\035\n\005shape\030\002 \001(\0132\016.TSP.Refe"
    "rence\022%\n\010line_end\030\003 \001(\0132\023.TSD.LineEndArc"
    "hive\022\030\n\020is_head_line_end\030\004 \001(\010\"\265\004\n\033Movie"
    "SetValueCommandArchive\022\"\n\005super\030\001 \002(\0132\023."
    "TSK.CommandArchive\022\035\n\005movie\030\002 \001(\0132\016.TSP."
    "Reference\022\033\n\023deprecated_property\030\003 \001(\t\022\020"
    "\n\010property\030\004 \001(\005\022=\n\005value\030\005 \001(\0132..TSD.Mo"
    "vieSetValueCommandArchive.PropertyValue\032"
    "\256\002\n\rPropertyValue\022\021\n\tstarttime\030\001 \001(\001\022\017\n\007"
    "endtime\030\002 \001(\001\022\022\n\npostertime\030\003 \001(\001\022+\n\017pos"
    "terimagedata\030\004 \001(\0132\022.TSP.DataReference\022\020"
    "\n\010autoplay\030\005 \001(\010\022\?\n\nloopOption\030\006 \001(\0162+.T"
    "SD.MovieSetValueCommandArchive.LoopOptio"
    "n\022\016\n\006volume\030\007 \001(\002\022!\n\005media\030\010 \001(\0132\022.TSP.D"
    "ataReference\0222\n\026importedauxiliarymedia\030\t"
    " \001(\0132\022.TSP.DataReference\"4\n\nLoopOption\022\010"
    "\n\004None\020\000\022\n\n\006Repeat\020\001\022\020\n\014BackAndForth\020\002\"\224"
    "\001\n MediaStyleSetValueCommandArchive\0224\n\005s"
    "uper\030\001 \002(\0132%.TSD.StyledInfoSetStyleComma"
    "ndArchive\022:\n\020media_properties\030\004 \001(\0132 .TS"
    "D.MediaStylePropertiesArchive\"\242\005\n\030ImageM"
    "ediaCommandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK."
    "CommandArchive\022\034\n\004info\030\002 \001(\0132\016.TSP.Refer"
    "ence\022(\n\014newImageData\030\010 \001(\0132\022.TSP.DataRef"
    "erence\022(\n\014oldImageData\030\t \001(\0132\022.TSP.DataR"
    "eference\0220\n\024oldOriginalImageData\030\n \001(\0132\022"
    ".TSP.DataReference\022!\n\016oldNaturalSize\030\006 \001"
    "(\0132\t.TSP.Size\0220\n\024newOriginalImageData\030\013 "
    "\001(\0132\022.TSP.DataReference\0229\n\023oldImageAdjus"
    "tments\030\014 \001(\0132\034.TSD.ImageAdjustmentsArchi"
    "ve\0220\n\024oldAdjustedImageData\030\r \001(\0132\022.TSP.D"
    "ataReference\0220\n\024oldEnhancedImageData\030\016 \001"
    "(\0132\022.TSP.DataReference\022-\n\025database_newIm"
    "ageData\030\003 \001(\0132\016.TSP.Reference\022-\n\025databas"
    "e_oldImageData\030\004 \001(\0132\016.TSP.Reference\0225\n\035"
    "database_oldOriginalImageData\030\005 \001(\0132\016.TS"
    "P.Reference\0225\n\035database_newOriginalImage"
    "Data\030\007 \001(\0132\016.TSP.Reference\"\253\001\n\037MediaOrig"
    "inalSizeCommandArchive\022\"\n\005super\030\001 \002(\0132\023."
    "TSK.CommandArchive\022\034\n\004info\030\002 \001(\0132\016.TSP.R"
    "eference\022\"\n\017newOriginalSize\030\003 \001(\0132\t.TSP."
    "Size\022\"\n\017oldOriginalSize\030\004 \001(\0132\t.TSP.Size"
    "\"\245\001\n\027ImageMaskCommandArchive\022\"\n\005super\030\001 "
    "\002(\0132\023.TSK.CommandArchive\022\034\n\004info\030\002 \001(\0132\016"
    ".TSP.Reference\022#\n\013newMaskInfo\030\003 \001(\0132\016.TS"
    "P.Reference\022#\n\013oldMaskInfo\030\004 \001(\0132\016.TSP.R"
    "eference\"\245\001\n\036MediaApplyPresetCommandArch"
    "ive\0224\n\005super\030\001 \002(\0132%.TSD.StyledInfoSetSt"
    "yleCommandArchive\022#\n\013stylepreset\030\n \001(\0132\016"
    ".TSP.Reference\022(\n\014shadowpreset\030\013 \001(\0132\022.T"
    "SD.ShadowArchive\"\212\003\n\036ImageAdjustmentsCom"
    "mandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Command"
    "Archive\022;\n\025old_image_adjustments\030\002 \001(\0132\034"
    ".TSD.ImageAdjustmentsArchive\022;\n\025new_imag"
    "e_adjustments\030\003 \001(\0132\034.TSD.ImageAdjustmen"
    "tsArchive\022-\n\021adjustedImageData\030\004 \001(\0132\022.T"
    "SP.DataReference\0225\n\031replacedAdjustedImag"
    "eData\030\005 \001(\0132\022.TSP.DataReference\022-\n\021enhan"
    "cedImageData\030\006 \001(\0132\022.TSP.DataReference\0225"
    "\n\031replacedEnhancedImageData\030\007 \001(\0132\022.TSP."
    "DataReference\"k\n\030MediaFlagsCommandArchiv"
    "e\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\034\n"
    "\004info\030\002 \001(\0132\016.TSP.Reference\022\r\n\005flags\030\003 \001"
    "(\r\"\377\002\n\034DrawablesCommandGroupArchive\022\'\n\005s"
    "uper\030\001 \002(\0132\030.TSK.CommandGroupArchive\0227\n\022"
    "obsolete_selection\030\002 \001(\0132\033.TSD.CanvasSel"
    "ectionArchive\022)\n\021modelforselection\030\003 \001(\013"
    "2\016.TSP.Reference\022I\n\004type\030\004 \001(\0162;.TSD.Dra"
    "wablesCommandGroupArchive.DrawablesComma"
    "ndGroupType\022\017\n\007forDrag\030\005 \001(\010\022)\n\021archived"
    "selection\030\006 \001(\0132\016.TSP.Reference\"K\n\031Drawa"
    "blesCommandGroupType\022\020\n\014Constructive\020\001\022\017"
    "\n\013Destructive\020\002\022\013\n\007InPlace\020\003\"\363\001\n\036Exterio"
    "rTextWrapCommandArchive\022\"\n\005super\030\001 \002(\0132\023"
    ".TSK.CommandArchive\022F\n\rinfo_and_wrap\030\002 \003"
    "(\0132/.TSD.ExteriorTextWrapCommandArchive."
    "InfoAndWrap\032e\n\013InfoAndWrap\022\034\n\004info\030\001 \001(\013"
    "2\016.TSP.Reference\0228\n\022exterior_text_wrap\030\002"
    " \001(\0132\034.TSD.ExteriorTextWrapArchive\"\227\001\n\037D"
    "rawableHyperlinkCommandArchive\022\"\n\005super\030"
    "\001 \002(\0132\023.TSK.CommandArchive\022\034\n\004info\030\002 \001(\013"
    "2\016.TSP.Reference\022\030\n\020oldhyperlink_url\030\003 \001"
    "(\t\022\030\n\020newhyperlink_url\030\004 \001(\t\"\211\003\n\037Command"
    "SelectionBehaviorArchive\022+\n\023model_for_se"
    "lection\030\002 \001(\0132\016.TSP.Reference\022O\n\004type\030\003 "
    "\001(\0162A.TSD.CommandSelectionBehaviorArchiv"
    "e.CommandSelectionBehaviorType\022*\n\022archiv"
    "ed_selection\030\004 \001(\0132\016.TSP.Reference\022.\n\026ar"
    "chived_new_selection\030\005 \001(\0132\016.TSP.Referen"
    "ce\022/\n\027old_model_for_selection\030\006 \001(\0132\016.TS"
    "P.Reference\"[\n\034CommandSelectionBehaviorT"
    "ype\022\020\n\014Constructive\020\001\022\017\n\013Destructive\020\002\022\013"
    "\n\007InPlace\020\003\022\013\n\007Replace\020\004\"@\n\032ImageReplace"
    "CommandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comm"
    "andArchive\"l\n\032DrawableLockCommandArchive"
    "\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\034\n\004"
    "info\030\002 \001(\0132\016.TSP.Reference\022\014\n\004lock\030\003 \001(\010"
    "\"\257\001\n!DrawableInfoCommentCommandArchive\022\""
    "\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\034\n\004in"
    "fo\030\002 \001(\0132\016.TSP.Reference\022#\n\013old_comment\030"
    "\003 \001(\0132\016.TSP.Reference\022#\n\013new_comment\030\004 \001"
    "(\0132\016.TSP.Reference\"\244\001\n!CommentStorageApp"
    "lyCommandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Co"
    "mmandArchive\022\'\n\017comment_storage\030\002 \002(\0132\016."
    "TSP.Reference\022\026\n\016comment_string\030\003 \002(\t\022\032\n"
    "\022old_comment_string\030\004 \002(\t\"\320\002\n\023GuideComma"
    "ndArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandAr"
    "chive\022\037\n\007storage\030\002 \001(\0132\016.TSP.Reference\022/"
    "\n\told_guide\030\003 \001(\0132\034.TSD.UserDefinedGuide"
    "Archive\022/\n\tnew_guide\030\004 \001(\0132\034.TSD.UserDef"
    "inedGuideArchive\0227\n\004mode\030\005 \001(\0162).TSD.Gui"
    "deCommandArchive.GuideCommandMode\022#\n\013old"
    "_storage\030\006 \001(\0132\016.TSP.Reference\"4\n\020GuideC"
    "ommandMode\022\007\n\003Add\020\001\022\013\n\007Replace\020\002\022\n\n\006Dele"
    "te\020\003\"\210\001\n\'DrawableAspectRatioLockedComman"
    "dArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArc"
    "hive\022\034\n\004info\030\002 \001(\0132\016.TSP.Reference\022\033\n\023as"
    "pect_ratio_locked\030\003 \001(\010\"\225\001\n.DrawableAcce"
    "ssibilityDescriptionCommandArchive\022\"\n\005su"
    "per\030\001 \002(\0132\023.TSK.CommandArchive\022\034\n\004info\030\002"
    " \001(\0132\016.TSP.Reference\022!\n\031accessibility_de"
    "scription\030\003 \001(\t\"\206\001\n\030PasteStyleCommandArc"
    "hive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive"
    "\022!\n\tdest_info\030\002 \002(\0132\016.TSP.Reference\022#\n\013s"
    "hape_style\030\003 \001(\0132\016.TSP.Reference", 7912);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TSDCommandArchives.proto", &protobuf_RegisterTypes);
  ConnectionLineConnectCommandArchive::default_instance_ = new ConnectionLineConnectCommandArchive();
  GroupDrawablesCommandArchive::default_instance_ = new GroupDrawablesCommandArchive();
  UngroupGroupCommandArchive::default_instance_ = new UngroupGroupCommandArchive();
  ContainerRemoveChildrenCommandArchive::default_instance_ = new ContainerRemoveChildrenCommandArchive();
  ContainerInsertChildrenCommandArchive::default_instance_ = new ContainerInsertChildrenCommandArchive();
  ContainerReorderChildrenCommandArchive::default_instance_ = new ContainerReorderChildrenCommandArchive();
  InfoGeometryCommandArchive::default_instance_ = new InfoGeometryCommandArchive();
  DrawablePathSourceCommandArchive::default_instance_ = new DrawablePathSourceCommandArchive();
  InstantAlphaCommandArchive::default_instance_ = new InstantAlphaCommandArchive();
  DrawableShadowCommandArchive::default_instance_ = new DrawableShadowCommandArchive();
  DrawableApplyThemeCommandArchive::default_instance_ = new DrawableApplyThemeCommandArchive();
  StyledInfoSetStyleCommandArchive::default_instance_ = new StyledInfoSetStyleCommandArchive();
  ShapePathSourceFlipCommandArchive::default_instance_ = new ShapePathSourceFlipCommandArchive();
  ShapeStyleSetValueCommandArchive::default_instance_ = new ShapeStyleSetValueCommandArchive();
  ShapeApplyPresetCommandArchive::default_instance_ = new ShapeApplyPresetCommandArchive();
  ShapeSetLineEndCommandArchive::default_instance_ = new ShapeSetLineEndCommandArchive();
  MovieSetValueCommandArchive::default_instance_ = new MovieSetValueCommandArchive();
  MovieSetValueCommandArchive_PropertyValue::default_instance_ = new MovieSetValueCommandArchive_PropertyValue();
  MediaStyleSetValueCommandArchive::default_instance_ = new MediaStyleSetValueCommandArchive();
  ImageMediaCommandArchive::default_instance_ = new ImageMediaCommandArchive();
  MediaOriginalSizeCommandArchive::default_instance_ = new MediaOriginalSizeCommandArchive();
  ImageMaskCommandArchive::default_instance_ = new ImageMaskCommandArchive();
  MediaApplyPresetCommandArchive::default_instance_ = new MediaApplyPresetCommandArchive();
  ImageAdjustmentsCommandArchive::default_instance_ = new ImageAdjustmentsCommandArchive();
  MediaFlagsCommandArchive::default_instance_ = new MediaFlagsCommandArchive();
  DrawablesCommandGroupArchive::default_instance_ = new DrawablesCommandGroupArchive();
  ExteriorTextWrapCommandArchive::default_instance_ = new ExteriorTextWrapCommandArchive();
  ExteriorTextWrapCommandArchive_InfoAndWrap::default_instance_ = new ExteriorTextWrapCommandArchive_InfoAndWrap();
  DrawableHyperlinkCommandArchive::default_instance_ = new DrawableHyperlinkCommandArchive();
  CommandSelectionBehaviorArchive::default_instance_ = new CommandSelectionBehaviorArchive();
  ImageReplaceCommandArchive::default_instance_ = new ImageReplaceCommandArchive();
  DrawableLockCommandArchive::default_instance_ = new DrawableLockCommandArchive();
  DrawableInfoCommentCommandArchive::default_instance_ = new DrawableInfoCommentCommandArchive();
  CommentStorageApplyCommandArchive::default_instance_ = new CommentStorageApplyCommandArchive();
  GuideCommandArchive::default_instance_ = new GuideCommandArchive();
  DrawableAspectRatioLockedCommandArchive::default_instance_ = new DrawableAspectRatioLockedCommandArchive();
  DrawableAccessibilityDescriptionCommandArchive::default_instance_ = new DrawableAccessibilityDescriptionCommandArchive();
  PasteStyleCommandArchive::default_instance_ = new PasteStyleCommandArchive();
  ConnectionLineConnectCommandArchive::default_instance_->InitAsDefaultInstance();
  GroupDrawablesCommandArchive::default_instance_->InitAsDefaultInstance();
  UngroupGroupCommandArchive::default_instance_->InitAsDefaultInstance();
  ContainerRemoveChildrenCommandArchive::default_instance_->InitAsDefaultInstance();
  ContainerInsertChildrenCommandArchive::default_instance_->InitAsDefaultInstance();
  ContainerReorderChildrenCommandArchive::default_instance_->InitAsDefaultInstance();
  InfoGeometryCommandArchive::default_instance_->InitAsDefaultInstance();
  DrawablePathSourceCommandArchive::default_instance_->InitAsDefaultInstance();
  InstantAlphaCommandArchive::default_instance_->InitAsDefaultInstance();
  DrawableShadowCommandArchive::default_instance_->InitAsDefaultInstance();
  DrawableApplyThemeCommandArchive::default_instance_->InitAsDefaultInstance();
  StyledInfoSetStyleCommandArchive::default_instance_->InitAsDefaultInstance();
  ShapePathSourceFlipCommandArchive::default_instance_->InitAsDefaultInstance();
  ShapeStyleSetValueCommandArchive::default_instance_->InitAsDefaultInstance();
  ShapeApplyPresetCommandArchive::default_instance_->InitAsDefaultInstance();
  ShapeSetLineEndCommandArchive::default_instance_->InitAsDefaultInstance();
  MovieSetValueCommandArchive::default_instance_->InitAsDefaultInstance();
  MovieSetValueCommandArchive_PropertyValue::default_instance_->InitAsDefaultInstance();
  MediaStyleSetValueCommandArchive::default_instance_->InitAsDefaultInstance();
  ImageMediaCommandArchive::default_instance_->InitAsDefaultInstance();
  MediaOriginalSizeCommandArchive::default_instance_->InitAsDefaultInstance();
  ImageMaskCommandArchive::default_instance_->InitAsDefaultInstance();
  MediaApplyPresetCommandArchive::default_instance_->InitAsDefaultInstance();
  ImageAdjustmentsCommandArchive::default_instance_->InitAsDefaultInstance();
  MediaFlagsCommandArchive::default_instance_->InitAsDefaultInstance();
  DrawablesCommandGroupArchive::default_instance_->InitAsDefaultInstance();
  ExteriorTextWrapCommandArchive::default_instance_->InitAsDefaultInstance();
  ExteriorTextWrapCommandArchive_InfoAndWrap::default_instance_->InitAsDefaultInstance();
  DrawableHyperlinkCommandArchive::default_instance_->InitAsDefaultInstance();
  CommandSelectionBehaviorArchive::default_instance_->InitAsDefaultInstance();
  ImageReplaceCommandArchive::default_instance_->InitAsDefaultInstance();
  DrawableLockCommandArchive::default_instance_->InitAsDefaultInstance();
  DrawableInfoCommentCommandArchive::default_instance_->InitAsDefaultInstance();
  CommentStorageApplyCommandArchive::default_instance_->InitAsDefaultInstance();
  GuideCommandArchive::default_instance_->InitAsDefaultInstance();
  DrawableAspectRatioLockedCommandArchive::default_instance_->InitAsDefaultInstance();
  DrawableAccessibilityDescriptionCommandArchive::default_instance_->InitAsDefaultInstance();
  PasteStyleCommandArchive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TSDCommandArchives_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TSDCommandArchives_2eproto {
  StaticDescriptorInitializer_TSDCommandArchives_2eproto() {
    protobuf_AddDesc_TSDCommandArchives_2eproto();
  }
} static_descriptor_initializer_TSDCommandArchives_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ConnectionLineConnectCommandArchive::kSuperFieldNumber;
const int ConnectionLineConnectCommandArchive::kConnectionLineFieldNumber;
const int ConnectionLineConnectCommandArchive::kConnectToFieldNumber;
const int ConnectionLineConnectCommandArchive::kConnectFromFieldNumber;
const int ConnectionLineConnectCommandArchive::kOldConnectToFieldNumber;
const int ConnectionLineConnectCommandArchive::kOldConnectFromFieldNumber;
#endif  // !_MSC_VER

ConnectionLineConnectCommandArchive::ConnectionLineConnectCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnectionLineConnectCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  connection_line_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  connect_to_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  connect_from_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  old_connect_to_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  old_connect_from_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ConnectionLineConnectCommandArchive::ConnectionLineConnectCommandArchive(const ConnectionLineConnectCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectionLineConnectCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  connection_line_ = NULL;
  connect_to_ = NULL;
  connect_from_ = NULL;
  old_connect_to_ = NULL;
  old_connect_from_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectionLineConnectCommandArchive::~ConnectionLineConnectCommandArchive() {
  SharedDtor();
}

void ConnectionLineConnectCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete connection_line_;
    delete connect_to_;
    delete connect_from_;
    delete old_connect_to_;
    delete old_connect_from_;
  }
}

void ConnectionLineConnectCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectionLineConnectCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectionLineConnectCommandArchive_descriptor_;
}

const ConnectionLineConnectCommandArchive& ConnectionLineConnectCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

ConnectionLineConnectCommandArchive* ConnectionLineConnectCommandArchive::default_instance_ = NULL;

ConnectionLineConnectCommandArchive* ConnectionLineConnectCommandArchive::New() const {
  return new ConnectionLineConnectCommandArchive;
}

void ConnectionLineConnectCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_connection_line()) {
      if (connection_line_ != NULL) connection_line_->::TSP::Reference::Clear();
    }
    if (has_connect_to()) {
      if (connect_to_ != NULL) connect_to_->::TSP::Reference::Clear();
    }
    if (has_connect_from()) {
      if (connect_from_ != NULL) connect_from_->::TSP::Reference::Clear();
    }
    if (has_old_connect_to()) {
      if (old_connect_to_ != NULL) old_connect_to_->::TSP::Reference::Clear();
    }
    if (has_old_connect_from()) {
      if (old_connect_from_ != NULL) old_connect_from_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectionLineConnectCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_connection_line;
        break;
      }

      // required .TSP.Reference connection_line = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connection_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connection_line()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_connect_to;
        break;
      }

      // optional .TSP.Reference connect_to = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connect_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connect_to()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_connect_from;
        break;
      }

      // optional .TSP.Reference connect_from = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connect_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connect_from()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_old_connect_to;
        break;
      }

      // optional .TSP.Reference old_connect_to = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_connect_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_connect_to()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_old_connect_from;
        break;
      }

      // optional .TSP.Reference old_connect_from = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_connect_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_connect_from()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnectionLineConnectCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference connection_line = 2;
  if (has_connection_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->connection_line(), output);
  }

  // optional .TSP.Reference connect_to = 3;
  if (has_connect_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->connect_to(), output);
  }

  // optional .TSP.Reference connect_from = 4;
  if (has_connect_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->connect_from(), output);
  }

  // optional .TSP.Reference old_connect_to = 5;
  if (has_old_connect_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->old_connect_to(), output);
  }

  // optional .TSP.Reference old_connect_from = 6;
  if (has_old_connect_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->old_connect_from(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnectionLineConnectCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference connection_line = 2;
  if (has_connection_line()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->connection_line(), target);
  }

  // optional .TSP.Reference connect_to = 3;
  if (has_connect_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->connect_to(), target);
  }

  // optional .TSP.Reference connect_from = 4;
  if (has_connect_from()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->connect_from(), target);
  }

  // optional .TSP.Reference old_connect_to = 5;
  if (has_old_connect_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->old_connect_to(), target);
  }

  // optional .TSP.Reference old_connect_from = 6;
  if (has_old_connect_from()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->old_connect_from(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnectionLineConnectCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference connection_line = 2;
    if (has_connection_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connection_line());
    }

    // optional .TSP.Reference connect_to = 3;
    if (has_connect_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connect_to());
    }

    // optional .TSP.Reference connect_from = 4;
    if (has_connect_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connect_from());
    }

    // optional .TSP.Reference old_connect_to = 5;
    if (has_old_connect_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_connect_to());
    }

    // optional .TSP.Reference old_connect_from = 6;
    if (has_old_connect_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_connect_from());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectionLineConnectCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectionLineConnectCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectionLineConnectCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectionLineConnectCommandArchive::MergeFrom(const ConnectionLineConnectCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_connection_line()) {
      mutable_connection_line()->::TSP::Reference::MergeFrom(from.connection_line());
    }
    if (from.has_connect_to()) {
      mutable_connect_to()->::TSP::Reference::MergeFrom(from.connect_to());
    }
    if (from.has_connect_from()) {
      mutable_connect_from()->::TSP::Reference::MergeFrom(from.connect_from());
    }
    if (from.has_old_connect_to()) {
      mutable_old_connect_to()->::TSP::Reference::MergeFrom(from.old_connect_to());
    }
    if (from.has_old_connect_from()) {
      mutable_old_connect_from()->::TSP::Reference::MergeFrom(from.old_connect_from());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectionLineConnectCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionLineConnectCommandArchive::CopyFrom(const ConnectionLineConnectCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionLineConnectCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_connection_line()) {
    if (!this->connection_line().IsInitialized()) return false;
  }
  if (has_connect_to()) {
    if (!this->connect_to().IsInitialized()) return false;
  }
  if (has_connect_from()) {
    if (!this->connect_from().IsInitialized()) return false;
  }
  if (has_old_connect_to()) {
    if (!this->old_connect_to().IsInitialized()) return false;
  }
  if (has_old_connect_from()) {
    if (!this->old_connect_from().IsInitialized()) return false;
  }
  return true;
}

void ConnectionLineConnectCommandArchive::Swap(ConnectionLineConnectCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(connection_line_, other->connection_line_);
    std::swap(connect_to_, other->connect_to_);
    std::swap(connect_from_, other->connect_from_);
    std::swap(old_connect_to_, other->old_connect_to_);
    std::swap(old_connect_from_, other->old_connect_from_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectionLineConnectCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectionLineConnectCommandArchive_descriptor_;
  metadata.reflection = ConnectionLineConnectCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupDrawablesCommandArchive::kSuperFieldNumber;
const int GroupDrawablesCommandArchive::kDrawablesFieldNumber;
const int GroupDrawablesCommandArchive::kGroupFieldNumber;
#endif  // !_MSC_VER

GroupDrawablesCommandArchive::GroupDrawablesCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupDrawablesCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  group_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

GroupDrawablesCommandArchive::GroupDrawablesCommandArchive(const GroupDrawablesCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupDrawablesCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  group_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupDrawablesCommandArchive::~GroupDrawablesCommandArchive() {
  SharedDtor();
}

void GroupDrawablesCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete group_;
  }
}

void GroupDrawablesCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupDrawablesCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupDrawablesCommandArchive_descriptor_;
}

const GroupDrawablesCommandArchive& GroupDrawablesCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

GroupDrawablesCommandArchive* GroupDrawablesCommandArchive::default_instance_ = NULL;

GroupDrawablesCommandArchive* GroupDrawablesCommandArchive::New() const {
  return new GroupDrawablesCommandArchive;
}

void GroupDrawablesCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_group()) {
      if (group_ != NULL) group_->::TSP::Reference::Clear();
    }
  }
  drawables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupDrawablesCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_drawables;
        break;
      }

      // repeated .TSP.Reference drawables = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drawables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drawables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_drawables;
        if (input->ExpectTag(26)) goto parse_group;
        break;
      }

      // optional .TSP.Reference group = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupDrawablesCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // repeated .TSP.Reference drawables = 2;
  for (int i = 0; i < this->drawables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->drawables(i), output);
  }

  // optional .TSP.Reference group = 3;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupDrawablesCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // repeated .TSP.Reference drawables = 2;
  for (int i = 0; i < this->drawables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->drawables(i), target);
  }

  // optional .TSP.Reference group = 3;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupDrawablesCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference group = 3;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group());
    }

  }
  // repeated .TSP.Reference drawables = 2;
  total_size += 1 * this->drawables_size();
  for (int i = 0; i < this->drawables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drawables(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupDrawablesCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupDrawablesCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupDrawablesCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupDrawablesCommandArchive::MergeFrom(const GroupDrawablesCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  drawables_.MergeFrom(from.drawables_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_group()) {
      mutable_group()->::TSP::Reference::MergeFrom(from.group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupDrawablesCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupDrawablesCommandArchive::CopyFrom(const GroupDrawablesCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupDrawablesCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  for (int i = 0; i < drawables_size(); i++) {
    if (!this->drawables(i).IsInitialized()) return false;
  }
  if (has_group()) {
    if (!this->group().IsInitialized()) return false;
  }
  return true;
}

void GroupDrawablesCommandArchive::Swap(GroupDrawablesCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    drawables_.Swap(&other->drawables_);
    std::swap(group_, other->group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupDrawablesCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupDrawablesCommandArchive_descriptor_;
  metadata.reflection = GroupDrawablesCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UngroupGroupCommandArchive::kSuperFieldNumber;
const int UngroupGroupCommandArchive::kDrawablesFieldNumber;
const int UngroupGroupCommandArchive::kGroupFieldNumber;
#endif  // !_MSC_VER

UngroupGroupCommandArchive::UngroupGroupCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UngroupGroupCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  group_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

UngroupGroupCommandArchive::UngroupGroupCommandArchive(const UngroupGroupCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UngroupGroupCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  group_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UngroupGroupCommandArchive::~UngroupGroupCommandArchive() {
  SharedDtor();
}

void UngroupGroupCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete group_;
  }
}

void UngroupGroupCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UngroupGroupCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UngroupGroupCommandArchive_descriptor_;
}

const UngroupGroupCommandArchive& UngroupGroupCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

UngroupGroupCommandArchive* UngroupGroupCommandArchive::default_instance_ = NULL;

UngroupGroupCommandArchive* UngroupGroupCommandArchive::New() const {
  return new UngroupGroupCommandArchive;
}

void UngroupGroupCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_group()) {
      if (group_ != NULL) group_->::TSP::Reference::Clear();
    }
  }
  drawables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UngroupGroupCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_drawables;
        break;
      }

      // repeated .TSP.Reference drawables = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drawables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drawables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_drawables;
        if (input->ExpectTag(26)) goto parse_group;
        break;
      }

      // optional .TSP.Reference group = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UngroupGroupCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // repeated .TSP.Reference drawables = 2;
  for (int i = 0; i < this->drawables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->drawables(i), output);
  }

  // optional .TSP.Reference group = 3;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UngroupGroupCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // repeated .TSP.Reference drawables = 2;
  for (int i = 0; i < this->drawables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->drawables(i), target);
  }

  // optional .TSP.Reference group = 3;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UngroupGroupCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference group = 3;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group());
    }

  }
  // repeated .TSP.Reference drawables = 2;
  total_size += 1 * this->drawables_size();
  for (int i = 0; i < this->drawables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drawables(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UngroupGroupCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UngroupGroupCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UngroupGroupCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UngroupGroupCommandArchive::MergeFrom(const UngroupGroupCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  drawables_.MergeFrom(from.drawables_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_group()) {
      mutable_group()->::TSP::Reference::MergeFrom(from.group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UngroupGroupCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UngroupGroupCommandArchive::CopyFrom(const UngroupGroupCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UngroupGroupCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  for (int i = 0; i < drawables_size(); i++) {
    if (!this->drawables(i).IsInitialized()) return false;
  }
  if (has_group()) {
    if (!this->group().IsInitialized()) return false;
  }
  return true;
}

void UngroupGroupCommandArchive::Swap(UngroupGroupCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    drawables_.Swap(&other->drawables_);
    std::swap(group_, other->group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UngroupGroupCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UngroupGroupCommandArchive_descriptor_;
  metadata.reflection = UngroupGroupCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerRemoveChildrenCommandArchive::kSuperFieldNumber;
const int ContainerRemoveChildrenCommandArchive::kContainerFieldNumber;
const int ContainerRemoveChildrenCommandArchive::kChildrenFieldNumber;
const int ContainerRemoveChildrenCommandArchive::kChildrenIndicesFieldNumber;
#endif  // !_MSC_VER

ContainerRemoveChildrenCommandArchive::ContainerRemoveChildrenCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerRemoveChildrenCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  container_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  children_indices_ = const_cast< ::TSP::IndexSet*>(&::TSP::IndexSet::default_instance());
}

ContainerRemoveChildrenCommandArchive::ContainerRemoveChildrenCommandArchive(const ContainerRemoveChildrenCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerRemoveChildrenCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  container_ = NULL;
  children_indices_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerRemoveChildrenCommandArchive::~ContainerRemoveChildrenCommandArchive() {
  SharedDtor();
}

void ContainerRemoveChildrenCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete container_;
    delete children_indices_;
  }
}

void ContainerRemoveChildrenCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerRemoveChildrenCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerRemoveChildrenCommandArchive_descriptor_;
}

const ContainerRemoveChildrenCommandArchive& ContainerRemoveChildrenCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

ContainerRemoveChildrenCommandArchive* ContainerRemoveChildrenCommandArchive::default_instance_ = NULL;

ContainerRemoveChildrenCommandArchive* ContainerRemoveChildrenCommandArchive::New() const {
  return new ContainerRemoveChildrenCommandArchive;
}

void ContainerRemoveChildrenCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_container()) {
      if (container_ != NULL) container_->::TSP::Reference::Clear();
    }
    if (has_children_indices()) {
      if (children_indices_ != NULL) children_indices_->::TSP::IndexSet::Clear();
    }
  }
  children_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerRemoveChildrenCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_container;
        break;
      }

      // optional .TSP.Reference container = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_container:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_children;
        break;
      }

      // repeated .TSP.Reference children = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_children;
        if (input->ExpectTag(34)) goto parse_children_indices;
        break;
      }

      // optional .TSP.IndexSet children_indices = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_children_indices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_children_indices()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerRemoveChildrenCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference container = 2;
  if (has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->container(), output);
  }

  // repeated .TSP.Reference children = 3;
  for (int i = 0; i < this->children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->children(i), output);
  }

  // optional .TSP.IndexSet children_indices = 4;
  if (has_children_indices()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->children_indices(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerRemoveChildrenCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference container = 2;
  if (has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->container(), target);
  }

  // repeated .TSP.Reference children = 3;
  for (int i = 0; i < this->children_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->children(i), target);
  }

  // optional .TSP.IndexSet children_indices = 4;
  if (has_children_indices()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->children_indices(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerRemoveChildrenCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference container = 2;
    if (has_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->container());
    }

    // optional .TSP.IndexSet children_indices = 4;
    if (has_children_indices()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->children_indices());
    }

  }
  // repeated .TSP.Reference children = 3;
  total_size += 1 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerRemoveChildrenCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerRemoveChildrenCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerRemoveChildrenCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerRemoveChildrenCommandArchive::MergeFrom(const ContainerRemoveChildrenCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  children_.MergeFrom(from.children_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_container()) {
      mutable_container()->::TSP::Reference::MergeFrom(from.container());
    }
    if (from.has_children_indices()) {
      mutable_children_indices()->::TSP::IndexSet::MergeFrom(from.children_indices());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerRemoveChildrenCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerRemoveChildrenCommandArchive::CopyFrom(const ContainerRemoveChildrenCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerRemoveChildrenCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_container()) {
    if (!this->container().IsInitialized()) return false;
  }
  for (int i = 0; i < children_size(); i++) {
    if (!this->children(i).IsInitialized()) return false;
  }
  if (has_children_indices()) {
    if (!this->children_indices().IsInitialized()) return false;
  }
  return true;
}

void ContainerRemoveChildrenCommandArchive::Swap(ContainerRemoveChildrenCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(container_, other->container_);
    children_.Swap(&other->children_);
    std::swap(children_indices_, other->children_indices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerRemoveChildrenCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerRemoveChildrenCommandArchive_descriptor_;
  metadata.reflection = ContainerRemoveChildrenCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerInsertChildrenCommandArchive::kSuperFieldNumber;
const int ContainerInsertChildrenCommandArchive::kContainerFieldNumber;
const int ContainerInsertChildrenCommandArchive::kChildrenFieldNumber;
const int ContainerInsertChildrenCommandArchive::kIndexFieldNumber;
#endif  // !_MSC_VER

ContainerInsertChildrenCommandArchive::ContainerInsertChildrenCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerInsertChildrenCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  container_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ContainerInsertChildrenCommandArchive::ContainerInsertChildrenCommandArchive(const ContainerInsertChildrenCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerInsertChildrenCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  container_ = NULL;
  index_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerInsertChildrenCommandArchive::~ContainerInsertChildrenCommandArchive() {
  SharedDtor();
}

void ContainerInsertChildrenCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete container_;
  }
}

void ContainerInsertChildrenCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerInsertChildrenCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerInsertChildrenCommandArchive_descriptor_;
}

const ContainerInsertChildrenCommandArchive& ContainerInsertChildrenCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

ContainerInsertChildrenCommandArchive* ContainerInsertChildrenCommandArchive::default_instance_ = NULL;

ContainerInsertChildrenCommandArchive* ContainerInsertChildrenCommandArchive::New() const {
  return new ContainerInsertChildrenCommandArchive;
}

void ContainerInsertChildrenCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_container()) {
      if (container_ != NULL) container_->::TSP::Reference::Clear();
    }
    index_ = GOOGLE_ULONGLONG(0);
  }
  children_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerInsertChildrenCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_container;
        break;
      }

      // optional .TSP.Reference container = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_container:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_children;
        break;
      }

      // repeated .TSP.Reference children = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_children;
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // optional uint64 index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerInsertChildrenCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference container = 2;
  if (has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->container(), output);
  }

  // repeated .TSP.Reference children = 3;
  for (int i = 0; i < this->children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->children(i), output);
  }

  // optional uint64 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerInsertChildrenCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference container = 2;
  if (has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->container(), target);
  }

  // repeated .TSP.Reference children = 3;
  for (int i = 0; i < this->children_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->children(i), target);
  }

  // optional uint64 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerInsertChildrenCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference container = 2;
    if (has_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->container());
    }

    // optional uint64 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index());
    }

  }
  // repeated .TSP.Reference children = 3;
  total_size += 1 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerInsertChildrenCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerInsertChildrenCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerInsertChildrenCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerInsertChildrenCommandArchive::MergeFrom(const ContainerInsertChildrenCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  children_.MergeFrom(from.children_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_container()) {
      mutable_container()->::TSP::Reference::MergeFrom(from.container());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerInsertChildrenCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerInsertChildrenCommandArchive::CopyFrom(const ContainerInsertChildrenCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerInsertChildrenCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_container()) {
    if (!this->container().IsInitialized()) return false;
  }
  for (int i = 0; i < children_size(); i++) {
    if (!this->children(i).IsInitialized()) return false;
  }
  return true;
}

void ContainerInsertChildrenCommandArchive::Swap(ContainerInsertChildrenCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(container_, other->container_);
    children_.Swap(&other->children_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerInsertChildrenCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerInsertChildrenCommandArchive_descriptor_;
  metadata.reflection = ContainerInsertChildrenCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerReorderChildrenCommandArchive::kSuperFieldNumber;
const int ContainerReorderChildrenCommandArchive::kContainerFieldNumber;
const int ContainerReorderChildrenCommandArchive::kChildrenFieldNumber;
const int ContainerReorderChildrenCommandArchive::kChildrenIndicesFieldNumber;
#endif  // !_MSC_VER

ContainerReorderChildrenCommandArchive::ContainerReorderChildrenCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerReorderChildrenCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  container_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  children_indices_ = const_cast< ::TSP::IndexSet*>(&::TSP::IndexSet::default_instance());
}

ContainerReorderChildrenCommandArchive::ContainerReorderChildrenCommandArchive(const ContainerReorderChildrenCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerReorderChildrenCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  container_ = NULL;
  children_indices_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerReorderChildrenCommandArchive::~ContainerReorderChildrenCommandArchive() {
  SharedDtor();
}

void ContainerReorderChildrenCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete container_;
    delete children_indices_;
  }
}

void ContainerReorderChildrenCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerReorderChildrenCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerReorderChildrenCommandArchive_descriptor_;
}

const ContainerReorderChildrenCommandArchive& ContainerReorderChildrenCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

ContainerReorderChildrenCommandArchive* ContainerReorderChildrenCommandArchive::default_instance_ = NULL;

ContainerReorderChildrenCommandArchive* ContainerReorderChildrenCommandArchive::New() const {
  return new ContainerReorderChildrenCommandArchive;
}

void ContainerReorderChildrenCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_container()) {
      if (container_ != NULL) container_->::TSP::Reference::Clear();
    }
    if (has_children_indices()) {
      if (children_indices_ != NULL) children_indices_->::TSP::IndexSet::Clear();
    }
  }
  children_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerReorderChildrenCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_container;
        break;
      }

      // optional .TSP.Reference container = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_container:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_children;
        break;
      }

      // repeated .TSP.Reference children = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_children;
        if (input->ExpectTag(34)) goto parse_children_indices;
        break;
      }

      // optional .TSP.IndexSet children_indices = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_children_indices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_children_indices()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerReorderChildrenCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference container = 2;
  if (has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->container(), output);
  }

  // repeated .TSP.Reference children = 3;
  for (int i = 0; i < this->children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->children(i), output);
  }

  // optional .TSP.IndexSet children_indices = 4;
  if (has_children_indices()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->children_indices(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerReorderChildrenCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference container = 2;
  if (has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->container(), target);
  }

  // repeated .TSP.Reference children = 3;
  for (int i = 0; i < this->children_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->children(i), target);
  }

  // optional .TSP.IndexSet children_indices = 4;
  if (has_children_indices()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->children_indices(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerReorderChildrenCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference container = 2;
    if (has_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->container());
    }

    // optional .TSP.IndexSet children_indices = 4;
    if (has_children_indices()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->children_indices());
    }

  }
  // repeated .TSP.Reference children = 3;
  total_size += 1 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerReorderChildrenCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerReorderChildrenCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerReorderChildrenCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerReorderChildrenCommandArchive::MergeFrom(const ContainerReorderChildrenCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  children_.MergeFrom(from.children_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_container()) {
      mutable_container()->::TSP::Reference::MergeFrom(from.container());
    }
    if (from.has_children_indices()) {
      mutable_children_indices()->::TSP::IndexSet::MergeFrom(from.children_indices());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerReorderChildrenCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerReorderChildrenCommandArchive::CopyFrom(const ContainerReorderChildrenCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerReorderChildrenCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_container()) {
    if (!this->container().IsInitialized()) return false;
  }
  for (int i = 0; i < children_size(); i++) {
    if (!this->children(i).IsInitialized()) return false;
  }
  if (has_children_indices()) {
    if (!this->children_indices().IsInitialized()) return false;
  }
  return true;
}

void ContainerReorderChildrenCommandArchive::Swap(ContainerReorderChildrenCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(container_, other->container_);
    children_.Swap(&other->children_);
    std::swap(children_indices_, other->children_indices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerReorderChildrenCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerReorderChildrenCommandArchive_descriptor_;
  metadata.reflection = ContainerReorderChildrenCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InfoGeometryCommandArchive::kSuperFieldNumber;
const int InfoGeometryCommandArchive::kInfoFieldNumber;
const int InfoGeometryCommandArchive::kNewGeometryFieldNumber;
const int InfoGeometryCommandArchive::kOldGeometryFieldNumber;
const int InfoGeometryCommandArchive::kShouldClearObjectPlaceholderFlagFieldNumber;
const int InfoGeometryCommandArchive::kDidMatchObjectPlaceholderGeometryFieldNumber;
#endif  // !_MSC_VER

InfoGeometryCommandArchive::InfoGeometryCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InfoGeometryCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  info_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  newgeometry_ = const_cast< ::TSD::GeometryArchive*>(&::TSD::GeometryArchive::default_instance());
  oldgeometry_ = const_cast< ::TSD::GeometryArchive*>(&::TSD::GeometryArchive::default_instance());
}

InfoGeometryCommandArchive::InfoGeometryCommandArchive(const InfoGeometryCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InfoGeometryCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  info_ = NULL;
  newgeometry_ = NULL;
  oldgeometry_ = NULL;
  shouldclearobjectplaceholderflag_ = false;
  didmatchobjectplaceholdergeometry_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InfoGeometryCommandArchive::~InfoGeometryCommandArchive() {
  SharedDtor();
}

void InfoGeometryCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete info_;
    delete newgeometry_;
    delete oldgeometry_;
  }
}

void InfoGeometryCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfoGeometryCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InfoGeometryCommandArchive_descriptor_;
}

const InfoGeometryCommandArchive& InfoGeometryCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

InfoGeometryCommandArchive* InfoGeometryCommandArchive::default_instance_ = NULL;

InfoGeometryCommandArchive* InfoGeometryCommandArchive::New() const {
  return new InfoGeometryCommandArchive;
}

void InfoGeometryCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::TSP::Reference::Clear();
    }
    if (has_newgeometry()) {
      if (newgeometry_ != NULL) newgeometry_->::TSD::GeometryArchive::Clear();
    }
    if (has_oldgeometry()) {
      if (oldgeometry_ != NULL) oldgeometry_->::TSD::GeometryArchive::Clear();
    }
    shouldclearobjectplaceholderflag_ = false;
    didmatchobjectplaceholdergeometry_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InfoGeometryCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .TSP.Reference info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_newGeometry;
        break;
      }

      // optional .TSD.GeometryArchive newGeometry = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newGeometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newgeometry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_oldGeometry;
        break;
      }

      // optional .TSD.GeometryArchive oldGeometry = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldGeometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldgeometry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_shouldClearObjectPlaceholderFlag;
        break;
      }

      // optional bool shouldClearObjectPlaceholderFlag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shouldClearObjectPlaceholderFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shouldclearobjectplaceholderflag_)));
          set_has_shouldclearobjectplaceholderflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_didMatchObjectPlaceholderGeometry;
        break;
      }

      // optional bool didMatchObjectPlaceholderGeometry = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_didMatchObjectPlaceholderGeometry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &didmatchobjectplaceholdergeometry_)));
          set_has_didmatchobjectplaceholdergeometry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InfoGeometryCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  // optional .TSD.GeometryArchive newGeometry = 3;
  if (has_newgeometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->newgeometry(), output);
  }

  // optional .TSD.GeometryArchive oldGeometry = 4;
  if (has_oldgeometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->oldgeometry(), output);
  }

  // optional bool shouldClearObjectPlaceholderFlag = 5;
  if (has_shouldclearobjectplaceholderflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->shouldclearobjectplaceholderflag(), output);
  }

  // optional bool didMatchObjectPlaceholderGeometry = 6;
  if (has_didmatchobjectplaceholdergeometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->didmatchobjectplaceholdergeometry(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InfoGeometryCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  // optional .TSD.GeometryArchive newGeometry = 3;
  if (has_newgeometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->newgeometry(), target);
  }

  // optional .TSD.GeometryArchive oldGeometry = 4;
  if (has_oldgeometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->oldgeometry(), target);
  }

  // optional bool shouldClearObjectPlaceholderFlag = 5;
  if (has_shouldclearobjectplaceholderflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->shouldclearobjectplaceholderflag(), target);
  }

  // optional bool didMatchObjectPlaceholderGeometry = 6;
  if (has_didmatchobjectplaceholdergeometry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->didmatchobjectplaceholdergeometry(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InfoGeometryCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .TSD.GeometryArchive newGeometry = 3;
    if (has_newgeometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newgeometry());
    }

    // optional .TSD.GeometryArchive oldGeometry = 4;
    if (has_oldgeometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oldgeometry());
    }

    // optional bool shouldClearObjectPlaceholderFlag = 5;
    if (has_shouldclearobjectplaceholderflag()) {
      total_size += 1 + 1;
    }

    // optional bool didMatchObjectPlaceholderGeometry = 6;
    if (has_didmatchobjectplaceholdergeometry()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfoGeometryCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InfoGeometryCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InfoGeometryCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InfoGeometryCommandArchive::MergeFrom(const InfoGeometryCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_info()) {
      mutable_info()->::TSP::Reference::MergeFrom(from.info());
    }
    if (from.has_newgeometry()) {
      mutable_newgeometry()->::TSD::GeometryArchive::MergeFrom(from.newgeometry());
    }
    if (from.has_oldgeometry()) {
      mutable_oldgeometry()->::TSD::GeometryArchive::MergeFrom(from.oldgeometry());
    }
    if (from.has_shouldclearobjectplaceholderflag()) {
      set_shouldclearobjectplaceholderflag(from.shouldclearobjectplaceholderflag());
    }
    if (from.has_didmatchobjectplaceholdergeometry()) {
      set_didmatchobjectplaceholdergeometry(from.didmatchobjectplaceholdergeometry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InfoGeometryCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoGeometryCommandArchive::CopyFrom(const InfoGeometryCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoGeometryCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  if (has_newgeometry()) {
    if (!this->newgeometry().IsInitialized()) return false;
  }
  if (has_oldgeometry()) {
    if (!this->oldgeometry().IsInitialized()) return false;
  }
  return true;
}

void InfoGeometryCommandArchive::Swap(InfoGeometryCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(info_, other->info_);
    std::swap(newgeometry_, other->newgeometry_);
    std::swap(oldgeometry_, other->oldgeometry_);
    std::swap(shouldclearobjectplaceholderflag_, other->shouldclearobjectplaceholderflag_);
    std::swap(didmatchobjectplaceholdergeometry_, other->didmatchobjectplaceholdergeometry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InfoGeometryCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InfoGeometryCommandArchive_descriptor_;
  metadata.reflection = InfoGeometryCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DrawablePathSourceCommandArchive::kSuperFieldNumber;
const int DrawablePathSourceCommandArchive::kInfoFieldNumber;
const int DrawablePathSourceCommandArchive::kOldpathsourceFieldNumber;
const int DrawablePathSourceCommandArchive::kNewpathsourceFieldNumber;
#endif  // !_MSC_VER

DrawablePathSourceCommandArchive::DrawablePathSourceCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DrawablePathSourceCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  info_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  oldpathsource_ = const_cast< ::TSD::PathSourceArchive*>(&::TSD::PathSourceArchive::default_instance());
  newpathsource_ = const_cast< ::TSD::PathSourceArchive*>(&::TSD::PathSourceArchive::default_instance());
}

DrawablePathSourceCommandArchive::DrawablePathSourceCommandArchive(const DrawablePathSourceCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DrawablePathSourceCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  info_ = NULL;
  oldpathsource_ = NULL;
  newpathsource_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DrawablePathSourceCommandArchive::~DrawablePathSourceCommandArchive() {
  SharedDtor();
}

void DrawablePathSourceCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete info_;
    delete oldpathsource_;
    delete newpathsource_;
  }
}

void DrawablePathSourceCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DrawablePathSourceCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrawablePathSourceCommandArchive_descriptor_;
}

const DrawablePathSourceCommandArchive& DrawablePathSourceCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

DrawablePathSourceCommandArchive* DrawablePathSourceCommandArchive::default_instance_ = NULL;

DrawablePathSourceCommandArchive* DrawablePathSourceCommandArchive::New() const {
  return new DrawablePathSourceCommandArchive;
}

void DrawablePathSourceCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::TSP::Reference::Clear();
    }
    if (has_oldpathsource()) {
      if (oldpathsource_ != NULL) oldpathsource_->::TSD::PathSourceArchive::Clear();
    }
    if (has_newpathsource()) {
      if (newpathsource_ != NULL) newpathsource_->::TSD::PathSourceArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DrawablePathSourceCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .TSP.Reference info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_oldpathsource;
        break;
      }

      // optional .TSD.PathSourceArchive oldpathsource = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldpathsource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldpathsource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_newpathsource;
        break;
      }

      // optional .TSD.PathSourceArchive newpathsource = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newpathsource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newpathsource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DrawablePathSourceCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  // optional .TSD.PathSourceArchive oldpathsource = 3;
  if (has_oldpathsource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->oldpathsource(), output);
  }

  // optional .TSD.PathSourceArchive newpathsource = 4;
  if (has_newpathsource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->newpathsource(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DrawablePathSourceCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  // optional .TSD.PathSourceArchive oldpathsource = 3;
  if (has_oldpathsource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->oldpathsource(), target);
  }

  // optional .TSD.PathSourceArchive newpathsource = 4;
  if (has_newpathsource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->newpathsource(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DrawablePathSourceCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .TSD.PathSourceArchive oldpathsource = 3;
    if (has_oldpathsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oldpathsource());
    }

    // optional .TSD.PathSourceArchive newpathsource = 4;
    if (has_newpathsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newpathsource());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrawablePathSourceCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DrawablePathSourceCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DrawablePathSourceCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DrawablePathSourceCommandArchive::MergeFrom(const DrawablePathSourceCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_info()) {
      mutable_info()->::TSP::Reference::MergeFrom(from.info());
    }
    if (from.has_oldpathsource()) {
      mutable_oldpathsource()->::TSD::PathSourceArchive::MergeFrom(from.oldpathsource());
    }
    if (from.has_newpathsource()) {
      mutable_newpathsource()->::TSD::PathSourceArchive::MergeFrom(from.newpathsource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DrawablePathSourceCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawablePathSourceCommandArchive::CopyFrom(const DrawablePathSourceCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawablePathSourceCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  if (has_oldpathsource()) {
    if (!this->oldpathsource().IsInitialized()) return false;
  }
  if (has_newpathsource()) {
    if (!this->newpathsource().IsInitialized()) return false;
  }
  return true;
}

void DrawablePathSourceCommandArchive::Swap(DrawablePathSourceCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(info_, other->info_);
    std::swap(oldpathsource_, other->oldpathsource_);
    std::swap(newpathsource_, other->newpathsource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DrawablePathSourceCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DrawablePathSourceCommandArchive_descriptor_;
  metadata.reflection = DrawablePathSourceCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstantAlphaCommandArchive::kSuperFieldNumber;
const int InstantAlphaCommandArchive::kImageFieldNumber;
const int InstantAlphaCommandArchive::kOldpathFieldNumber;
const int InstantAlphaCommandArchive::kNewpathFieldNumber;
#endif  // !_MSC_VER

InstantAlphaCommandArchive::InstantAlphaCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstantAlphaCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  image_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  oldpath_ = const_cast< ::TSP::Path*>(&::TSP::Path::default_instance());
  newpath_ = const_cast< ::TSP::Path*>(&::TSP::Path::default_instance());
}

InstantAlphaCommandArchive::InstantAlphaCommandArchive(const InstantAlphaCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstantAlphaCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  image_ = NULL;
  oldpath_ = NULL;
  newpath_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstantAlphaCommandArchive::~InstantAlphaCommandArchive() {
  SharedDtor();
}

void InstantAlphaCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete image_;
    delete oldpath_;
    delete newpath_;
  }
}

void InstantAlphaCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstantAlphaCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstantAlphaCommandArchive_descriptor_;
}

const InstantAlphaCommandArchive& InstantAlphaCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

InstantAlphaCommandArchive* InstantAlphaCommandArchive::default_instance_ = NULL;

InstantAlphaCommandArchive* InstantAlphaCommandArchive::New() const {
  return new InstantAlphaCommandArchive;
}

void InstantAlphaCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_image()) {
      if (image_ != NULL) image_->::TSP::Reference::Clear();
    }
    if (has_oldpath()) {
      if (oldpath_ != NULL) oldpath_->::TSP::Path::Clear();
    }
    if (has_newpath()) {
      if (newpath_ != NULL) newpath_->::TSP::Path::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstantAlphaCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_image;
        break;
      }

      // optional .TSP.Reference image = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_oldpath;
        break;
      }

      // optional .TSP.Path oldpath = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldpath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldpath()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_newpath;
        break;
      }

      // optional .TSP.Path newpath = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newpath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newpath()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstantAlphaCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference image = 2;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->image(), output);
  }

  // optional .TSP.Path oldpath = 3;
  if (has_oldpath()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->oldpath(), output);
  }

  // optional .TSP.Path newpath = 4;
  if (has_newpath()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->newpath(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstantAlphaCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference image = 2;
  if (has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->image(), target);
  }

  // optional .TSP.Path oldpath = 3;
  if (has_oldpath()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->oldpath(), target);
  }

  // optional .TSP.Path newpath = 4;
  if (has_newpath()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->newpath(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstantAlphaCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference image = 2;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image());
    }

    // optional .TSP.Path oldpath = 3;
    if (has_oldpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oldpath());
    }

    // optional .TSP.Path newpath = 4;
    if (has_newpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newpath());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstantAlphaCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstantAlphaCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstantAlphaCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstantAlphaCommandArchive::MergeFrom(const InstantAlphaCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_image()) {
      mutable_image()->::TSP::Reference::MergeFrom(from.image());
    }
    if (from.has_oldpath()) {
      mutable_oldpath()->::TSP::Path::MergeFrom(from.oldpath());
    }
    if (from.has_newpath()) {
      mutable_newpath()->::TSP::Path::MergeFrom(from.newpath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstantAlphaCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstantAlphaCommandArchive::CopyFrom(const InstantAlphaCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstantAlphaCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_image()) {
    if (!this->image().IsInitialized()) return false;
  }
  if (has_oldpath()) {
    if (!this->oldpath().IsInitialized()) return false;
  }
  if (has_newpath()) {
    if (!this->newpath().IsInitialized()) return false;
  }
  return true;
}

void InstantAlphaCommandArchive::Swap(InstantAlphaCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(image_, other->image_);
    std::swap(oldpath_, other->oldpath_);
    std::swap(newpath_, other->newpath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstantAlphaCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstantAlphaCommandArchive_descriptor_;
  metadata.reflection = InstantAlphaCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DrawableShadowCommandArchive::kSuperFieldNumber;
const int DrawableShadowCommandArchive::kInfoFieldNumber;
const int DrawableShadowCommandArchive::kOldshadowFieldNumber;
const int DrawableShadowCommandArchive::kNewshadowFieldNumber;
#endif  // !_MSC_VER

DrawableShadowCommandArchive::DrawableShadowCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DrawableShadowCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  info_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  oldshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  newshadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
}

DrawableShadowCommandArchive::DrawableShadowCommandArchive(const DrawableShadowCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DrawableShadowCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  info_ = NULL;
  oldshadow_ = NULL;
  newshadow_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DrawableShadowCommandArchive::~DrawableShadowCommandArchive() {
  SharedDtor();
}

void DrawableShadowCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete info_;
    delete oldshadow_;
    delete newshadow_;
  }
}

void DrawableShadowCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DrawableShadowCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrawableShadowCommandArchive_descriptor_;
}

const DrawableShadowCommandArchive& DrawableShadowCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

DrawableShadowCommandArchive* DrawableShadowCommandArchive::default_instance_ = NULL;

DrawableShadowCommandArchive* DrawableShadowCommandArchive::New() const {
  return new DrawableShadowCommandArchive;
}

void DrawableShadowCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::TSP::Reference::Clear();
    }
    if (has_oldshadow()) {
      if (oldshadow_ != NULL) oldshadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_newshadow()) {
      if (newshadow_ != NULL) newshadow_->::TSD::ShadowArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DrawableShadowCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .TSP.Reference info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_oldshadow;
        break;
      }

      // optional .TSD.ShadowArchive oldshadow = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_newshadow;
        break;
      }

      // optional .TSD.ShadowArchive newshadow = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newshadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DrawableShadowCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  // optional .TSD.ShadowArchive oldshadow = 3;
  if (has_oldshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->oldshadow(), output);
  }

  // optional .TSD.ShadowArchive newshadow = 4;
  if (has_newshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->newshadow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DrawableShadowCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  // optional .TSD.ShadowArchive oldshadow = 3;
  if (has_oldshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->oldshadow(), target);
  }

  // optional .TSD.ShadowArchive newshadow = 4;
  if (has_newshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->newshadow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DrawableShadowCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .TSD.ShadowArchive oldshadow = 3;
    if (has_oldshadow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oldshadow());
    }

    // optional .TSD.ShadowArchive newshadow = 4;
    if (has_newshadow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newshadow());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrawableShadowCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DrawableShadowCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DrawableShadowCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DrawableShadowCommandArchive::MergeFrom(const DrawableShadowCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_info()) {
      mutable_info()->::TSP::Reference::MergeFrom(from.info());
    }
    if (from.has_oldshadow()) {
      mutable_oldshadow()->::TSD::ShadowArchive::MergeFrom(from.oldshadow());
    }
    if (from.has_newshadow()) {
      mutable_newshadow()->::TSD::ShadowArchive::MergeFrom(from.newshadow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DrawableShadowCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawableShadowCommandArchive::CopyFrom(const DrawableShadowCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableShadowCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  if (has_oldshadow()) {
    if (!this->oldshadow().IsInitialized()) return false;
  }
  if (has_newshadow()) {
    if (!this->newshadow().IsInitialized()) return false;
  }
  return true;
}

void DrawableShadowCommandArchive::Swap(DrawableShadowCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(info_, other->info_);
    std::swap(oldshadow_, other->oldshadow_);
    std::swap(newshadow_, other->newshadow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DrawableShadowCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DrawableShadowCommandArchive_descriptor_;
  metadata.reflection = DrawableShadowCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DrawableApplyThemeCommandArchive::kSuperFieldNumber;
const int DrawableApplyThemeCommandArchive::kInfoFieldNumber;
const int DrawableApplyThemeCommandArchive::kStyleFieldNumber;
#endif  // !_MSC_VER

DrawableApplyThemeCommandArchive::DrawableApplyThemeCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DrawableApplyThemeCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::ApplyThemeChildCommandArchive*>(&::TSS::ApplyThemeChildCommandArchive::default_instance());
  info_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

DrawableApplyThemeCommandArchive::DrawableApplyThemeCommandArchive(const DrawableApplyThemeCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DrawableApplyThemeCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  info_ = NULL;
  style_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DrawableApplyThemeCommandArchive::~DrawableApplyThemeCommandArchive() {
  SharedDtor();
}

void DrawableApplyThemeCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete info_;
    delete style_;
  }
}

void DrawableApplyThemeCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DrawableApplyThemeCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrawableApplyThemeCommandArchive_descriptor_;
}

const DrawableApplyThemeCommandArchive& DrawableApplyThemeCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

DrawableApplyThemeCommandArchive* DrawableApplyThemeCommandArchive::default_instance_ = NULL;

DrawableApplyThemeCommandArchive* DrawableApplyThemeCommandArchive::New() const {
  return new DrawableApplyThemeCommandArchive;
}

void DrawableApplyThemeCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::ApplyThemeChildCommandArchive::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::TSP::Reference::Clear();
    }
    if (has_style()) {
      if (style_ != NULL) style_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DrawableApplyThemeCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSS.ApplyThemeChildCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .TSP.Reference info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_style;
        break;
      }

      // optional .TSP.Reference style = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DrawableApplyThemeCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSS.ApplyThemeChildCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  // optional .TSP.Reference style = 3;
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->style(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DrawableApplyThemeCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSS.ApplyThemeChildCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  // optional .TSP.Reference style = 3;
  if (has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->style(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DrawableApplyThemeCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSS.ApplyThemeChildCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .TSP.Reference style = 3;
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->style());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrawableApplyThemeCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DrawableApplyThemeCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DrawableApplyThemeCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DrawableApplyThemeCommandArchive::MergeFrom(const DrawableApplyThemeCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::ApplyThemeChildCommandArchive::MergeFrom(from.super());
    }
    if (from.has_info()) {
      mutable_info()->::TSP::Reference::MergeFrom(from.info());
    }
    if (from.has_style()) {
      mutable_style()->::TSP::Reference::MergeFrom(from.style());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DrawableApplyThemeCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawableApplyThemeCommandArchive::CopyFrom(const DrawableApplyThemeCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableApplyThemeCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  if (has_style()) {
    if (!this->style().IsInitialized()) return false;
  }
  return true;
}

void DrawableApplyThemeCommandArchive::Swap(DrawableApplyThemeCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(info_, other->info_);
    std::swap(style_, other->style_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DrawableApplyThemeCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DrawableApplyThemeCommandArchive_descriptor_;
  metadata.reflection = DrawableApplyThemeCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StyledInfoSetStyleCommandArchive::kSuperFieldNumber;
const int StyledInfoSetStyleCommandArchive::kInfoFieldNumber;
const int StyledInfoSetStyleCommandArchive::kStyleFieldNumber;
#endif  // !_MSC_VER

StyledInfoSetStyleCommandArchive::StyledInfoSetStyleCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StyledInfoSetStyleCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  info_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

StyledInfoSetStyleCommandArchive::StyledInfoSetStyleCommandArchive(const StyledInfoSetStyleCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StyledInfoSetStyleCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  info_ = NULL;
  style_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StyledInfoSetStyleCommandArchive::~StyledInfoSetStyleCommandArchive() {
  SharedDtor();
}

void StyledInfoSetStyleCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete info_;
    delete style_;
  }
}

void StyledInfoSetStyleCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StyledInfoSetStyleCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StyledInfoSetStyleCommandArchive_descriptor_;
}

const StyledInfoSetStyleCommandArchive& StyledInfoSetStyleCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

StyledInfoSetStyleCommandArchive* StyledInfoSetStyleCommandArchive::default_instance_ = NULL;

StyledInfoSetStyleCommandArchive* StyledInfoSetStyleCommandArchive::New() const {
  return new StyledInfoSetStyleCommandArchive;
}

void StyledInfoSetStyleCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::TSP::Reference::Clear();
    }
    if (has_style()) {
      if (style_ != NULL) style_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StyledInfoSetStyleCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .TSP.Reference info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_style;
        break;
      }

      // optional .TSP.Reference style = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StyledInfoSetStyleCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  // optional .TSP.Reference style = 3;
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->style(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StyledInfoSetStyleCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  // optional .TSP.Reference style = 3;
  if (has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->style(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StyledInfoSetStyleCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .TSP.Reference style = 3;
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->style());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StyledInfoSetStyleCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StyledInfoSetStyleCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StyledInfoSetStyleCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StyledInfoSetStyleCommandArchive::MergeFrom(const StyledInfoSetStyleCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_info()) {
      mutable_info()->::TSP::Reference::MergeFrom(from.info());
    }
    if (from.has_style()) {
      mutable_style()->::TSP::Reference::MergeFrom(from.style());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StyledInfoSetStyleCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyledInfoSetStyleCommandArchive::CopyFrom(const StyledInfoSetStyleCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyledInfoSetStyleCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  if (has_style()) {
    if (!this->style().IsInitialized()) return false;
  }
  return true;
}

void StyledInfoSetStyleCommandArchive::Swap(StyledInfoSetStyleCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(info_, other->info_);
    std::swap(style_, other->style_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StyledInfoSetStyleCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StyledInfoSetStyleCommandArchive_descriptor_;
  metadata.reflection = StyledInfoSetStyleCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShapePathSourceFlipCommandArchive::kSuperFieldNumber;
const int ShapePathSourceFlipCommandArchive::kInfoFieldNumber;
const int ShapePathSourceFlipCommandArchive::kNewHorizontalFlipFieldNumber;
const int ShapePathSourceFlipCommandArchive::kNewVerticalFlipFieldNumber;
const int ShapePathSourceFlipCommandArchive::kOldHorizontalFlipFieldNumber;
const int ShapePathSourceFlipCommandArchive::kOldVerticalFlipFieldNumber;
#endif  // !_MSC_VER

ShapePathSourceFlipCommandArchive::ShapePathSourceFlipCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShapePathSourceFlipCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  info_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ShapePathSourceFlipCommandArchive::ShapePathSourceFlipCommandArchive(const ShapePathSourceFlipCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShapePathSourceFlipCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  info_ = NULL;
  newhorizontalflip_ = false;
  newverticalflip_ = false;
  oldhorizontalflip_ = false;
  oldverticalflip_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShapePathSourceFlipCommandArchive::~ShapePathSourceFlipCommandArchive() {
  SharedDtor();
}

void ShapePathSourceFlipCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete info_;
  }
}

void ShapePathSourceFlipCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShapePathSourceFlipCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShapePathSourceFlipCommandArchive_descriptor_;
}

const ShapePathSourceFlipCommandArchive& ShapePathSourceFlipCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

ShapePathSourceFlipCommandArchive* ShapePathSourceFlipCommandArchive::default_instance_ = NULL;

ShapePathSourceFlipCommandArchive* ShapePathSourceFlipCommandArchive::New() const {
  return new ShapePathSourceFlipCommandArchive;
}

void ShapePathSourceFlipCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::TSP::Reference::Clear();
    }
    newhorizontalflip_ = false;
    newverticalflip_ = false;
    oldhorizontalflip_ = false;
    oldverticalflip_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShapePathSourceFlipCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .TSP.Reference info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_newHorizontalFlip;
        break;
      }

      // optional bool newHorizontalFlip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newHorizontalFlip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newhorizontalflip_)));
          set_has_newhorizontalflip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_newVerticalFlip;
        break;
      }

      // optional bool newVerticalFlip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newVerticalFlip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newverticalflip_)));
          set_has_newverticalflip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_oldHorizontalFlip;
        break;
      }

      // optional bool oldHorizontalFlip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldHorizontalFlip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &oldhorizontalflip_)));
          set_has_oldhorizontalflip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_oldVerticalFlip;
        break;
      }

      // optional bool oldVerticalFlip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldVerticalFlip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &oldverticalflip_)));
          set_has_oldverticalflip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShapePathSourceFlipCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  // optional bool newHorizontalFlip = 3;
  if (has_newhorizontalflip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->newhorizontalflip(), output);
  }

  // optional bool newVerticalFlip = 4;
  if (has_newverticalflip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->newverticalflip(), output);
  }

  // optional bool oldHorizontalFlip = 5;
  if (has_oldhorizontalflip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->oldhorizontalflip(), output);
  }

  // optional bool oldVerticalFlip = 6;
  if (has_oldverticalflip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->oldverticalflip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShapePathSourceFlipCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  // optional bool newHorizontalFlip = 3;
  if (has_newhorizontalflip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->newhorizontalflip(), target);
  }

  // optional bool newVerticalFlip = 4;
  if (has_newverticalflip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->newverticalflip(), target);
  }

  // optional bool oldHorizontalFlip = 5;
  if (has_oldhorizontalflip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->oldhorizontalflip(), target);
  }

  // optional bool oldVerticalFlip = 6;
  if (has_oldverticalflip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->oldverticalflip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShapePathSourceFlipCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional bool newHorizontalFlip = 3;
    if (has_newhorizontalflip()) {
      total_size += 1 + 1;
    }

    // optional bool newVerticalFlip = 4;
    if (has_newverticalflip()) {
      total_size += 1 + 1;
    }

    // optional bool oldHorizontalFlip = 5;
    if (has_oldhorizontalflip()) {
      total_size += 1 + 1;
    }

    // optional bool oldVerticalFlip = 6;
    if (has_oldverticalflip()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShapePathSourceFlipCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShapePathSourceFlipCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShapePathSourceFlipCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShapePathSourceFlipCommandArchive::MergeFrom(const ShapePathSourceFlipCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_info()) {
      mutable_info()->::TSP::Reference::MergeFrom(from.info());
    }
    if (from.has_newhorizontalflip()) {
      set_newhorizontalflip(from.newhorizontalflip());
    }
    if (from.has_newverticalflip()) {
      set_newverticalflip(from.newverticalflip());
    }
    if (from.has_oldhorizontalflip()) {
      set_oldhorizontalflip(from.oldhorizontalflip());
    }
    if (from.has_oldverticalflip()) {
      set_oldverticalflip(from.oldverticalflip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShapePathSourceFlipCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapePathSourceFlipCommandArchive::CopyFrom(const ShapePathSourceFlipCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapePathSourceFlipCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void ShapePathSourceFlipCommandArchive::Swap(ShapePathSourceFlipCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(info_, other->info_);
    std::swap(newhorizontalflip_, other->newhorizontalflip_);
    std::swap(newverticalflip_, other->newverticalflip_);
    std::swap(oldhorizontalflip_, other->oldhorizontalflip_);
    std::swap(oldverticalflip_, other->oldverticalflip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShapePathSourceFlipCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShapePathSourceFlipCommandArchive_descriptor_;
  metadata.reflection = ShapePathSourceFlipCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShapeStyleSetValueCommandArchive::kSuperFieldNumber;
const int ShapeStyleSetValueCommandArchive::kShapePropertiesFieldNumber;
#endif  // !_MSC_VER

ShapeStyleSetValueCommandArchive::ShapeStyleSetValueCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShapeStyleSetValueCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSD::StyledInfoSetStyleCommandArchive*>(&::TSD::StyledInfoSetStyleCommandArchive::default_instance());
  shape_properties_ = const_cast< ::TSD::ShapeStylePropertiesArchive*>(&::TSD::ShapeStylePropertiesArchive::default_instance());
}

ShapeStyleSetValueCommandArchive::ShapeStyleSetValueCommandArchive(const ShapeStyleSetValueCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShapeStyleSetValueCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  shape_properties_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShapeStyleSetValueCommandArchive::~ShapeStyleSetValueCommandArchive() {
  SharedDtor();
}

void ShapeStyleSetValueCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete shape_properties_;
  }
}

void ShapeStyleSetValueCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShapeStyleSetValueCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShapeStyleSetValueCommandArchive_descriptor_;
}

const ShapeStyleSetValueCommandArchive& ShapeStyleSetValueCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

ShapeStyleSetValueCommandArchive* ShapeStyleSetValueCommandArchive::default_instance_ = NULL;

ShapeStyleSetValueCommandArchive* ShapeStyleSetValueCommandArchive::New() const {
  return new ShapeStyleSetValueCommandArchive;
}

void ShapeStyleSetValueCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSD::StyledInfoSetStyleCommandArchive::Clear();
    }
    if (has_shape_properties()) {
      if (shape_properties_ != NULL) shape_properties_->::TSD::ShapeStylePropertiesArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShapeStyleSetValueCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSD.StyledInfoSetStyleCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_shape_properties;
        break;
      }

      // optional .TSD.ShapeStylePropertiesArchive shape_properties = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shape_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShapeStyleSetValueCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSD.StyledInfoSetStyleCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSD.ShapeStylePropertiesArchive shape_properties = 4;
  if (has_shape_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->shape_properties(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShapeStyleSetValueCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSD.StyledInfoSetStyleCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSD.ShapeStylePropertiesArchive shape_properties = 4;
  if (has_shape_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->shape_properties(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShapeStyleSetValueCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSD.StyledInfoSetStyleCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSD.ShapeStylePropertiesArchive shape_properties = 4;
    if (has_shape_properties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shape_properties());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShapeStyleSetValueCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShapeStyleSetValueCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShapeStyleSetValueCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShapeStyleSetValueCommandArchive::MergeFrom(const ShapeStyleSetValueCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSD::StyledInfoSetStyleCommandArchive::MergeFrom(from.super());
    }
    if (from.has_shape_properties()) {
      mutable_shape_properties()->::TSD::ShapeStylePropertiesArchive::MergeFrom(from.shape_properties());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShapeStyleSetValueCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeStyleSetValueCommandArchive::CopyFrom(const ShapeStyleSetValueCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeStyleSetValueCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_shape_properties()) {
    if (!this->shape_properties().IsInitialized()) return false;
  }
  return true;
}

void ShapeStyleSetValueCommandArchive::Swap(ShapeStyleSetValueCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(shape_properties_, other->shape_properties_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShapeStyleSetValueCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShapeStyleSetValueCommandArchive_descriptor_;
  metadata.reflection = ShapeStyleSetValueCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShapeApplyPresetCommandArchive::kSuperFieldNumber;
const int ShapeApplyPresetCommandArchive::kStylepresetFieldNumber;
const int ShapeApplyPresetCommandArchive::kColorpresetFieldNumber;
const int ShapeApplyPresetCommandArchive::kFillpresetFieldNumber;
const int ShapeApplyPresetCommandArchive::kShadowpresetFieldNumber;
#endif  // !_MSC_VER

ShapeApplyPresetCommandArchive::ShapeApplyPresetCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShapeApplyPresetCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSD::StyledInfoSetStyleCommandArchive*>(&::TSD::StyledInfoSetStyleCommandArchive::default_instance());
  stylepreset_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  colorpreset_ = const_cast< ::TSP::Color*>(&::TSP::Color::default_instance());
  fillpreset_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  shadowpreset_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
}

ShapeApplyPresetCommandArchive::ShapeApplyPresetCommandArchive(const ShapeApplyPresetCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShapeApplyPresetCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  stylepreset_ = NULL;
  colorpreset_ = NULL;
  fillpreset_ = NULL;
  shadowpreset_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShapeApplyPresetCommandArchive::~ShapeApplyPresetCommandArchive() {
  SharedDtor();
}

void ShapeApplyPresetCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete stylepreset_;
    delete colorpreset_;
    delete fillpreset_;
    delete shadowpreset_;
  }
}

void ShapeApplyPresetCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShapeApplyPresetCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShapeApplyPresetCommandArchive_descriptor_;
}

const ShapeApplyPresetCommandArchive& ShapeApplyPresetCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

ShapeApplyPresetCommandArchive* ShapeApplyPresetCommandArchive::default_instance_ = NULL;

ShapeApplyPresetCommandArchive* ShapeApplyPresetCommandArchive::New() const {
  return new ShapeApplyPresetCommandArchive;
}

void ShapeApplyPresetCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSD::StyledInfoSetStyleCommandArchive::Clear();
    }
    if (has_stylepreset()) {
      if (stylepreset_ != NULL) stylepreset_->::TSP::Reference::Clear();
    }
    if (has_colorpreset()) {
      if (colorpreset_ != NULL) colorpreset_->::TSP::Color::Clear();
    }
    if (has_fillpreset()) {
      if (fillpreset_ != NULL) fillpreset_->::TSD::FillArchive::Clear();
    }
    if (has_shadowpreset()) {
      if (shadowpreset_ != NULL) shadowpreset_->::TSD::ShadowArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShapeApplyPresetCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSD.StyledInfoSetStyleCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_stylepreset;
        break;
      }

      // optional .TSP.Reference stylepreset = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stylepreset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stylepreset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_colorpreset;
        break;
      }

      // optional .TSP.Color colorpreset = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_colorpreset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_colorpreset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_fillpreset;
        break;
      }

      // optional .TSD.FillArchive fillpreset = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fillpreset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fillpreset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_shadowpreset;
        break;
      }

      // optional .TSD.ShadowArchive shadowpreset = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shadowpreset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shadowpreset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShapeApplyPresetCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSD.StyledInfoSetStyleCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference stylepreset = 10;
  if (has_stylepreset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->stylepreset(), output);
  }

  // optional .TSP.Color colorpreset = 11;
  if (has_colorpreset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->colorpreset(), output);
  }

  // optional .TSD.FillArchive fillpreset = 12;
  if (has_fillpreset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->fillpreset(), output);
  }

  // optional .TSD.ShadowArchive shadowpreset = 13;
  if (has_shadowpreset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->shadowpreset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShapeApplyPresetCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSD.StyledInfoSetStyleCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference stylepreset = 10;
  if (has_stylepreset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->stylepreset(), target);
  }

  // optional .TSP.Color colorpreset = 11;
  if (has_colorpreset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->colorpreset(), target);
  }

  // optional .TSD.FillArchive fillpreset = 12;
  if (has_fillpreset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->fillpreset(), target);
  }

  // optional .TSD.ShadowArchive shadowpreset = 13;
  if (has_shadowpreset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->shadowpreset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShapeApplyPresetCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSD.StyledInfoSetStyleCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference stylepreset = 10;
    if (has_stylepreset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stylepreset());
    }

    // optional .TSP.Color colorpreset = 11;
    if (has_colorpreset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->colorpreset());
    }

    // optional .TSD.FillArchive fillpreset = 12;
    if (has_fillpreset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fillpreset());
    }

    // optional .TSD.ShadowArchive shadowpreset = 13;
    if (has_shadowpreset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shadowpreset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShapeApplyPresetCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShapeApplyPresetCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShapeApplyPresetCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShapeApplyPresetCommandArchive::MergeFrom(const ShapeApplyPresetCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSD::StyledInfoSetStyleCommandArchive::MergeFrom(from.super());
    }
    if (from.has_stylepreset()) {
      mutable_stylepreset()->::TSP::Reference::MergeFrom(from.stylepreset());
    }
    if (from.has_colorpreset()) {
      mutable_colorpreset()->::TSP::Color::MergeFrom(from.colorpreset());
    }
    if (from.has_fillpreset()) {
      mutable_fillpreset()->::TSD::FillArchive::MergeFrom(from.fillpreset());
    }
    if (from.has_shadowpreset()) {
      mutable_shadowpreset()->::TSD::ShadowArchive::MergeFrom(from.shadowpreset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShapeApplyPresetCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeApplyPresetCommandArchive::CopyFrom(const ShapeApplyPresetCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeApplyPresetCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_stylepreset()) {
    if (!this->stylepreset().IsInitialized()) return false;
  }
  if (has_colorpreset()) {
    if (!this->colorpreset().IsInitialized()) return false;
  }
  if (has_fillpreset()) {
    if (!this->fillpreset().IsInitialized()) return false;
  }
  if (has_shadowpreset()) {
    if (!this->shadowpreset().IsInitialized()) return false;
  }
  return true;
}

void ShapeApplyPresetCommandArchive::Swap(ShapeApplyPresetCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(stylepreset_, other->stylepreset_);
    std::swap(colorpreset_, other->colorpreset_);
    std::swap(fillpreset_, other->fillpreset_);
    std::swap(shadowpreset_, other->shadowpreset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShapeApplyPresetCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShapeApplyPresetCommandArchive_descriptor_;
  metadata.reflection = ShapeApplyPresetCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShapeSetLineEndCommandArchive::kSuperFieldNumber;
const int ShapeSetLineEndCommandArchive::kShapeFieldNumber;
const int ShapeSetLineEndCommandArchive::kLineEndFieldNumber;
const int ShapeSetLineEndCommandArchive::kIsHeadLineEndFieldNumber;
#endif  // !_MSC_VER

ShapeSetLineEndCommandArchive::ShapeSetLineEndCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShapeSetLineEndCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  shape_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  line_end_ = const_cast< ::TSD::LineEndArchive*>(&::TSD::LineEndArchive::default_instance());
}

ShapeSetLineEndCommandArchive::ShapeSetLineEndCommandArchive(const ShapeSetLineEndCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShapeSetLineEndCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  shape_ = NULL;
  line_end_ = NULL;
  is_head_line_end_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShapeSetLineEndCommandArchive::~ShapeSetLineEndCommandArchive() {
  SharedDtor();
}

void ShapeSetLineEndCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete shape_;
    delete line_end_;
  }
}

void ShapeSetLineEndCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShapeSetLineEndCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShapeSetLineEndCommandArchive_descriptor_;
}

const ShapeSetLineEndCommandArchive& ShapeSetLineEndCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

ShapeSetLineEndCommandArchive* ShapeSetLineEndCommandArchive::default_instance_ = NULL;

ShapeSetLineEndCommandArchive* ShapeSetLineEndCommandArchive::New() const {
  return new ShapeSetLineEndCommandArchive;
}

void ShapeSetLineEndCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_shape()) {
      if (shape_ != NULL) shape_->::TSP::Reference::Clear();
    }
    if (has_line_end()) {
      if (line_end_ != NULL) line_end_->::TSD::LineEndArchive::Clear();
    }
    is_head_line_end_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShapeSetLineEndCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shape;
        break;
      }

      // optional .TSP.Reference shape = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_line_end;
        break;
      }

      // optional .TSD.LineEndArchive line_end = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_line_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_line_end()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_head_line_end;
        break;
      }

      // optional bool is_head_line_end = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_head_line_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_head_line_end_)));
          set_has_is_head_line_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShapeSetLineEndCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference shape = 2;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shape(), output);
  }

  // optional .TSD.LineEndArchive line_end = 3;
  if (has_line_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->line_end(), output);
  }

  // optional bool is_head_line_end = 4;
  if (has_is_head_line_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_head_line_end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShapeSetLineEndCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference shape = 2;
  if (has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shape(), target);
  }

  // optional .TSD.LineEndArchive line_end = 3;
  if (has_line_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->line_end(), target);
  }

  // optional bool is_head_line_end = 4;
  if (has_is_head_line_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_head_line_end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShapeSetLineEndCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference shape = 2;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shape());
    }

    // optional .TSD.LineEndArchive line_end = 3;
    if (has_line_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->line_end());
    }

    // optional bool is_head_line_end = 4;
    if (has_is_head_line_end()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShapeSetLineEndCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShapeSetLineEndCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShapeSetLineEndCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShapeSetLineEndCommandArchive::MergeFrom(const ShapeSetLineEndCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_shape()) {
      mutable_shape()->::TSP::Reference::MergeFrom(from.shape());
    }
    if (from.has_line_end()) {
      mutable_line_end()->::TSD::LineEndArchive::MergeFrom(from.line_end());
    }
    if (from.has_is_head_line_end()) {
      set_is_head_line_end(from.is_head_line_end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShapeSetLineEndCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeSetLineEndCommandArchive::CopyFrom(const ShapeSetLineEndCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeSetLineEndCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_shape()) {
    if (!this->shape().IsInitialized()) return false;
  }
  if (has_line_end()) {
    if (!this->line_end().IsInitialized()) return false;
  }
  return true;
}

void ShapeSetLineEndCommandArchive::Swap(ShapeSetLineEndCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(shape_, other->shape_);
    std::swap(line_end_, other->line_end_);
    std::swap(is_head_line_end_, other->is_head_line_end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShapeSetLineEndCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShapeSetLineEndCommandArchive_descriptor_;
  metadata.reflection = ShapeSetLineEndCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MovieSetValueCommandArchive_LoopOption_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MovieSetValueCommandArchive_LoopOption_descriptor_;
}
bool MovieSetValueCommandArchive_LoopOption_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MovieSetValueCommandArchive_LoopOption MovieSetValueCommandArchive::None;
const MovieSetValueCommandArchive_LoopOption MovieSetValueCommandArchive::Repeat;
const MovieSetValueCommandArchive_LoopOption MovieSetValueCommandArchive::BackAndForth;
const MovieSetValueCommandArchive_LoopOption MovieSetValueCommandArchive::LoopOption_MIN;
const MovieSetValueCommandArchive_LoopOption MovieSetValueCommandArchive::LoopOption_MAX;
const int MovieSetValueCommandArchive::LoopOption_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MovieSetValueCommandArchive_PropertyValue::kStarttimeFieldNumber;
const int MovieSetValueCommandArchive_PropertyValue::kEndtimeFieldNumber;
const int MovieSetValueCommandArchive_PropertyValue::kPostertimeFieldNumber;
const int MovieSetValueCommandArchive_PropertyValue::kPosterimagedataFieldNumber;
const int MovieSetValueCommandArchive_PropertyValue::kAutoplayFieldNumber;
const int MovieSetValueCommandArchive_PropertyValue::kLoopOptionFieldNumber;
const int MovieSetValueCommandArchive_PropertyValue::kVolumeFieldNumber;
const int MovieSetValueCommandArchive_PropertyValue::kMediaFieldNumber;
const int MovieSetValueCommandArchive_PropertyValue::kImportedauxiliarymediaFieldNumber;
#endif  // !_MSC_VER

MovieSetValueCommandArchive_PropertyValue::MovieSetValueCommandArchive_PropertyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MovieSetValueCommandArchive_PropertyValue::InitAsDefaultInstance() {
  posterimagedata_ = const_cast< ::TSP::DataReference*>(&::TSP::DataReference::default_instance());
  media_ = const_cast< ::TSP::DataReference*>(&::TSP::DataReference::default_instance());
  importedauxiliarymedia_ = const_cast< ::TSP::DataReference*>(&::TSP::DataReference::default_instance());
}

MovieSetValueCommandArchive_PropertyValue::MovieSetValueCommandArchive_PropertyValue(const MovieSetValueCommandArchive_PropertyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MovieSetValueCommandArchive_PropertyValue::SharedCtor() {
  _cached_size_ = 0;
  starttime_ = 0;
  endtime_ = 0;
  postertime_ = 0;
  posterimagedata_ = NULL;
  autoplay_ = false;
  loopoption_ = 0;
  volume_ = 0;
  media_ = NULL;
  importedauxiliarymedia_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MovieSetValueCommandArchive_PropertyValue::~MovieSetValueCommandArchive_PropertyValue() {
  SharedDtor();
}

void MovieSetValueCommandArchive_PropertyValue::SharedDtor() {
  if (this != default_instance_) {
    delete posterimagedata_;
    delete media_;
    delete importedauxiliarymedia_;
  }
}

void MovieSetValueCommandArchive_PropertyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MovieSetValueCommandArchive_PropertyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MovieSetValueCommandArchive_PropertyValue_descriptor_;
}

const MovieSetValueCommandArchive_PropertyValue& MovieSetValueCommandArchive_PropertyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

MovieSetValueCommandArchive_PropertyValue* MovieSetValueCommandArchive_PropertyValue::default_instance_ = NULL;

MovieSetValueCommandArchive_PropertyValue* MovieSetValueCommandArchive_PropertyValue::New() const {
  return new MovieSetValueCommandArchive_PropertyValue;
}

void MovieSetValueCommandArchive_PropertyValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    starttime_ = 0;
    endtime_ = 0;
    postertime_ = 0;
    if (has_posterimagedata()) {
      if (posterimagedata_ != NULL) posterimagedata_->::TSP::DataReference::Clear();
    }
    autoplay_ = false;
    loopoption_ = 0;
    volume_ = 0;
    if (has_media()) {
      if (media_ != NULL) media_->::TSP::DataReference::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_importedauxiliarymedia()) {
      if (importedauxiliarymedia_ != NULL) importedauxiliarymedia_->::TSP::DataReference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MovieSetValueCommandArchive_PropertyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double starttime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_endtime;
        break;
      }

      // optional double endtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_postertime;
        break;
      }

      // optional double postertime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_postertime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &postertime_)));
          set_has_postertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_posterimagedata;
        break;
      }

      // optional .TSP.DataReference posterimagedata = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_posterimagedata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_posterimagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_autoplay;
        break;
      }

      // optional bool autoplay = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoplay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autoplay_)));
          set_has_autoplay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_loopOption;
        break;
      }

      // optional .TSD.MovieSetValueCommandArchive.LoopOption loopOption = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loopOption:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSD::MovieSetValueCommandArchive_LoopOption_IsValid(value)) {
            set_loopoption(static_cast< ::TSD::MovieSetValueCommandArchive_LoopOption >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_volume;
        break;
      }

      // optional float volume = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_media;
        break;
      }

      // optional .TSP.DataReference media = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_media:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_media()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_importedauxiliarymedia;
        break;
      }

      // optional .TSP.DataReference importedauxiliarymedia = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_importedauxiliarymedia:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_importedauxiliarymedia()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MovieSetValueCommandArchive_PropertyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double starttime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->starttime(), output);
  }

  // optional double endtime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->endtime(), output);
  }

  // optional double postertime = 3;
  if (has_postertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->postertime(), output);
  }

  // optional .TSP.DataReference posterimagedata = 4;
  if (has_posterimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->posterimagedata(), output);
  }

  // optional bool autoplay = 5;
  if (has_autoplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->autoplay(), output);
  }

  // optional .TSD.MovieSetValueCommandArchive.LoopOption loopOption = 6;
  if (has_loopoption()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->loopoption(), output);
  }

  // optional float volume = 7;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->volume(), output);
  }

  // optional .TSP.DataReference media = 8;
  if (has_media()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->media(), output);
  }

  // optional .TSP.DataReference importedauxiliarymedia = 9;
  if (has_importedauxiliarymedia()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->importedauxiliarymedia(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MovieSetValueCommandArchive_PropertyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double starttime = 1;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->starttime(), target);
  }

  // optional double endtime = 2;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->endtime(), target);
  }

  // optional double postertime = 3;
  if (has_postertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->postertime(), target);
  }

  // optional .TSP.DataReference posterimagedata = 4;
  if (has_posterimagedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->posterimagedata(), target);
  }

  // optional bool autoplay = 5;
  if (has_autoplay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->autoplay(), target);
  }

  // optional .TSD.MovieSetValueCommandArchive.LoopOption loopOption = 6;
  if (has_loopoption()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->loopoption(), target);
  }

  // optional float volume = 7;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->volume(), target);
  }

  // optional .TSP.DataReference media = 8;
  if (has_media()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->media(), target);
  }

  // optional .TSP.DataReference importedauxiliarymedia = 9;
  if (has_importedauxiliarymedia()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->importedauxiliarymedia(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MovieSetValueCommandArchive_PropertyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double starttime = 1;
    if (has_starttime()) {
      total_size += 1 + 8;
    }

    // optional double endtime = 2;
    if (has_endtime()) {
      total_size += 1 + 8;
    }

    // optional double postertime = 3;
    if (has_postertime()) {
      total_size += 1 + 8;
    }

    // optional .TSP.DataReference posterimagedata = 4;
    if (has_posterimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->posterimagedata());
    }

    // optional bool autoplay = 5;
    if (has_autoplay()) {
      total_size += 1 + 1;
    }

    // optional .TSD.MovieSetValueCommandArchive.LoopOption loopOption = 6;
    if (has_loopoption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->loopoption());
    }

    // optional float volume = 7;
    if (has_volume()) {
      total_size += 1 + 4;
    }

    // optional .TSP.DataReference media = 8;
    if (has_media()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->media());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TSP.DataReference importedauxiliarymedia = 9;
    if (has_importedauxiliarymedia()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->importedauxiliarymedia());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MovieSetValueCommandArchive_PropertyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MovieSetValueCommandArchive_PropertyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MovieSetValueCommandArchive_PropertyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MovieSetValueCommandArchive_PropertyValue::MergeFrom(const MovieSetValueCommandArchive_PropertyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_postertime()) {
      set_postertime(from.postertime());
    }
    if (from.has_posterimagedata()) {
      mutable_posterimagedata()->::TSP::DataReference::MergeFrom(from.posterimagedata());
    }
    if (from.has_autoplay()) {
      set_autoplay(from.autoplay());
    }
    if (from.has_loopoption()) {
      set_loopoption(from.loopoption());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_media()) {
      mutable_media()->::TSP::DataReference::MergeFrom(from.media());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_importedauxiliarymedia()) {
      mutable_importedauxiliarymedia()->::TSP::DataReference::MergeFrom(from.importedauxiliarymedia());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MovieSetValueCommandArchive_PropertyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovieSetValueCommandArchive_PropertyValue::CopyFrom(const MovieSetValueCommandArchive_PropertyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovieSetValueCommandArchive_PropertyValue::IsInitialized() const {

  if (has_posterimagedata()) {
    if (!this->posterimagedata().IsInitialized()) return false;
  }
  if (has_media()) {
    if (!this->media().IsInitialized()) return false;
  }
  if (has_importedauxiliarymedia()) {
    if (!this->importedauxiliarymedia().IsInitialized()) return false;
  }
  return true;
}

void MovieSetValueCommandArchive_PropertyValue::Swap(MovieSetValueCommandArchive_PropertyValue* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(postertime_, other->postertime_);
    std::swap(posterimagedata_, other->posterimagedata_);
    std::swap(autoplay_, other->autoplay_);
    std::swap(loopoption_, other->loopoption_);
    std::swap(volume_, other->volume_);
    std::swap(media_, other->media_);
    std::swap(importedauxiliarymedia_, other->importedauxiliarymedia_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MovieSetValueCommandArchive_PropertyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MovieSetValueCommandArchive_PropertyValue_descriptor_;
  metadata.reflection = MovieSetValueCommandArchive_PropertyValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MovieSetValueCommandArchive::kSuperFieldNumber;
const int MovieSetValueCommandArchive::kMovieFieldNumber;
const int MovieSetValueCommandArchive::kDeprecatedPropertyFieldNumber;
const int MovieSetValueCommandArchive::kPropertyFieldNumber;
const int MovieSetValueCommandArchive::kValueFieldNumber;
#endif  // !_MSC_VER

MovieSetValueCommandArchive::MovieSetValueCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MovieSetValueCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  movie_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  value_ = const_cast< ::TSD::MovieSetValueCommandArchive_PropertyValue*>(&::TSD::MovieSetValueCommandArchive_PropertyValue::default_instance());
}

MovieSetValueCommandArchive::MovieSetValueCommandArchive(const MovieSetValueCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MovieSetValueCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  movie_ = NULL;
  deprecated_property_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  property_ = 0;
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MovieSetValueCommandArchive::~MovieSetValueCommandArchive() {
  SharedDtor();
}

void MovieSetValueCommandArchive::SharedDtor() {
  if (deprecated_property_ != &::google::protobuf::internal::kEmptyString) {
    delete deprecated_property_;
  }
  if (this != default_instance_) {
    delete super_;
    delete movie_;
    delete value_;
  }
}

void MovieSetValueCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MovieSetValueCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MovieSetValueCommandArchive_descriptor_;
}

const MovieSetValueCommandArchive& MovieSetValueCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

MovieSetValueCommandArchive* MovieSetValueCommandArchive::default_instance_ = NULL;

MovieSetValueCommandArchive* MovieSetValueCommandArchive::New() const {
  return new MovieSetValueCommandArchive;
}

void MovieSetValueCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_movie()) {
      if (movie_ != NULL) movie_->::TSP::Reference::Clear();
    }
    if (has_deprecated_property()) {
      if (deprecated_property_ != &::google::protobuf::internal::kEmptyString) {
        deprecated_property_->clear();
      }
    }
    property_ = 0;
    if (has_value()) {
      if (value_ != NULL) value_->::TSD::MovieSetValueCommandArchive_PropertyValue::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MovieSetValueCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_movie;
        break;
      }

      // optional .TSP.Reference movie = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_movie:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_movie()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_deprecated_property;
        break;
      }

      // optional string deprecated_property = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_property:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_property()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deprecated_property().data(), this->deprecated_property().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_property;
        break;
      }

      // optional int32 property = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_property:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &property_)));
          set_has_property();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_value;
        break;
      }

      // optional .TSD.MovieSetValueCommandArchive.PropertyValue value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MovieSetValueCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference movie = 2;
  if (has_movie()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->movie(), output);
  }

  // optional string deprecated_property = 3;
  if (has_deprecated_property()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deprecated_property().data(), this->deprecated_property().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->deprecated_property(), output);
  }

  // optional int32 property = 4;
  if (has_property()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->property(), output);
  }

  // optional .TSD.MovieSetValueCommandArchive.PropertyValue value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MovieSetValueCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference movie = 2;
  if (has_movie()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->movie(), target);
  }

  // optional string deprecated_property = 3;
  if (has_deprecated_property()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deprecated_property().data(), this->deprecated_property().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->deprecated_property(), target);
  }

  // optional int32 property = 4;
  if (has_property()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->property(), target);
  }

  // optional .TSD.MovieSetValueCommandArchive.PropertyValue value = 5;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MovieSetValueCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference movie = 2;
    if (has_movie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->movie());
    }

    // optional string deprecated_property = 3;
    if (has_deprecated_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_property());
    }

    // optional int32 property = 4;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->property());
    }

    // optional .TSD.MovieSetValueCommandArchive.PropertyValue value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MovieSetValueCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MovieSetValueCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MovieSetValueCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MovieSetValueCommandArchive::MergeFrom(const MovieSetValueCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_movie()) {
      mutable_movie()->::TSP::Reference::MergeFrom(from.movie());
    }
    if (from.has_deprecated_property()) {
      set_deprecated_property(from.deprecated_property());
    }
    if (from.has_property()) {
      set_property(from.property());
    }
    if (from.has_value()) {
      mutable_value()->::TSD::MovieSetValueCommandArchive_PropertyValue::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MovieSetValueCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovieSetValueCommandArchive::CopyFrom(const MovieSetValueCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovieSetValueCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_movie()) {
    if (!this->movie().IsInitialized()) return false;
  }
  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  return true;
}

void MovieSetValueCommandArchive::Swap(MovieSetValueCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(movie_, other->movie_);
    std::swap(deprecated_property_, other->deprecated_property_);
    std::swap(property_, other->property_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MovieSetValueCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MovieSetValueCommandArchive_descriptor_;
  metadata.reflection = MovieSetValueCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MediaStyleSetValueCommandArchive::kSuperFieldNumber;
const int MediaStyleSetValueCommandArchive::kMediaPropertiesFieldNumber;
#endif  // !_MSC_VER

MediaStyleSetValueCommandArchive::MediaStyleSetValueCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaStyleSetValueCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSD::StyledInfoSetStyleCommandArchive*>(&::TSD::StyledInfoSetStyleCommandArchive::default_instance());
  media_properties_ = const_cast< ::TSD::MediaStylePropertiesArchive*>(&::TSD::MediaStylePropertiesArchive::default_instance());
}

MediaStyleSetValueCommandArchive::MediaStyleSetValueCommandArchive(const MediaStyleSetValueCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaStyleSetValueCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  media_properties_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaStyleSetValueCommandArchive::~MediaStyleSetValueCommandArchive() {
  SharedDtor();
}

void MediaStyleSetValueCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete media_properties_;
  }
}

void MediaStyleSetValueCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaStyleSetValueCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaStyleSetValueCommandArchive_descriptor_;
}

const MediaStyleSetValueCommandArchive& MediaStyleSetValueCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

MediaStyleSetValueCommandArchive* MediaStyleSetValueCommandArchive::default_instance_ = NULL;

MediaStyleSetValueCommandArchive* MediaStyleSetValueCommandArchive::New() const {
  return new MediaStyleSetValueCommandArchive;
}

void MediaStyleSetValueCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSD::StyledInfoSetStyleCommandArchive::Clear();
    }
    if (has_media_properties()) {
      if (media_properties_ != NULL) media_properties_->::TSD::MediaStylePropertiesArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaStyleSetValueCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSD.StyledInfoSetStyleCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_media_properties;
        break;
      }

      // optional .TSD.MediaStylePropertiesArchive media_properties = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_media_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_media_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaStyleSetValueCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSD.StyledInfoSetStyleCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSD.MediaStylePropertiesArchive media_properties = 4;
  if (has_media_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->media_properties(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaStyleSetValueCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSD.StyledInfoSetStyleCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSD.MediaStylePropertiesArchive media_properties = 4;
  if (has_media_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->media_properties(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaStyleSetValueCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSD.StyledInfoSetStyleCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSD.MediaStylePropertiesArchive media_properties = 4;
    if (has_media_properties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->media_properties());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaStyleSetValueCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaStyleSetValueCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaStyleSetValueCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaStyleSetValueCommandArchive::MergeFrom(const MediaStyleSetValueCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSD::StyledInfoSetStyleCommandArchive::MergeFrom(from.super());
    }
    if (from.has_media_properties()) {
      mutable_media_properties()->::TSD::MediaStylePropertiesArchive::MergeFrom(from.media_properties());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaStyleSetValueCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaStyleSetValueCommandArchive::CopyFrom(const MediaStyleSetValueCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaStyleSetValueCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_media_properties()) {
    if (!this->media_properties().IsInitialized()) return false;
  }
  return true;
}

void MediaStyleSetValueCommandArchive::Swap(MediaStyleSetValueCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(media_properties_, other->media_properties_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaStyleSetValueCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaStyleSetValueCommandArchive_descriptor_;
  metadata.reflection = MediaStyleSetValueCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImageMediaCommandArchive::kSuperFieldNumber;
const int ImageMediaCommandArchive::kInfoFieldNumber;
const int ImageMediaCommandArchive::kNewImageDataFieldNumber;
const int ImageMediaCommandArchive::kOldImageDataFieldNumber;
const int ImageMediaCommandArchive::kOldOriginalImageDataFieldNumber;
const int ImageMediaCommandArchive::kOldNaturalSizeFieldNumber;
const int ImageMediaCommandArchive::kNewOriginalImageDataFieldNumber;
const int ImageMediaCommandArchive::kOldImageAdjustmentsFieldNumber;
const int ImageMediaCommandArchive::kOldAdjustedImageDataFieldNumber;
const int ImageMediaCommandArchive::kOldEnhancedImageDataFieldNumber;
const int ImageMediaCommandArchive::kDatabaseNewImageDataFieldNumber;
const int ImageMediaCommandArchive::kDatabaseOldImageDataFieldNumber;
const int ImageMediaCommandArchive::kDatabaseOldOriginalImageDataFieldNumber;
const int ImageMediaCommandArchive::kDatabaseNewOriginalImageDataFieldNumber;
#endif  // !_MSC_VER

ImageMediaCommandArchive::ImageMediaCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImageMediaCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  info_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  newimagedata_ = const_cast< ::TSP::DataReference*>(&::TSP::DataReference::default_instance());
  oldimagedata_ = const_cast< ::TSP::DataReference*>(&::TSP::DataReference::default_instance());
  oldoriginalimagedata_ = const_cast< ::TSP::DataReference*>(&::TSP::DataReference::default_instance());
  oldnaturalsize_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
  neworiginalimagedata_ = const_cast< ::TSP::DataReference*>(&::TSP::DataReference::default_instance());
  oldimageadjustments_ = const_cast< ::TSD::ImageAdjustmentsArchive*>(&::TSD::ImageAdjustmentsArchive::default_instance());
  oldadjustedimagedata_ = const_cast< ::TSP::DataReference*>(&::TSP::DataReference::default_instance());
  oldenhancedimagedata_ = const_cast< ::TSP::DataReference*>(&::TSP::DataReference::default_instance());
  database_newimagedata_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  database_oldimagedata_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  database_oldoriginalimagedata_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  database_neworiginalimagedata_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ImageMediaCommandArchive::ImageMediaCommandArchive(const ImageMediaCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImageMediaCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  info_ = NULL;
  newimagedata_ = NULL;
  oldimagedata_ = NULL;
  oldoriginalimagedata_ = NULL;
  oldnaturalsize_ = NULL;
  neworiginalimagedata_ = NULL;
  oldimageadjustments_ = NULL;
  oldadjustedimagedata_ = NULL;
  oldenhancedimagedata_ = NULL;
  database_newimagedata_ = NULL;
  database_oldimagedata_ = NULL;
  database_oldoriginalimagedata_ = NULL;
  database_neworiginalimagedata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageMediaCommandArchive::~ImageMediaCommandArchive() {
  SharedDtor();
}

void ImageMediaCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete info_;
    delete newimagedata_;
    delete oldimagedata_;
    delete oldoriginalimagedata_;
    delete oldnaturalsize_;
    delete neworiginalimagedata_;
    delete oldimageadjustments_;
    delete oldadjustedimagedata_;
    delete oldenhancedimagedata_;
    delete database_newimagedata_;
    delete database_oldimagedata_;
    delete database_oldoriginalimagedata_;
    delete database_neworiginalimagedata_;
  }
}

void ImageMediaCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageMediaCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageMediaCommandArchive_descriptor_;
}

const ImageMediaCommandArchive& ImageMediaCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

ImageMediaCommandArchive* ImageMediaCommandArchive::default_instance_ = NULL;

ImageMediaCommandArchive* ImageMediaCommandArchive::New() const {
  return new ImageMediaCommandArchive;
}

void ImageMediaCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::TSP::Reference::Clear();
    }
    if (has_newimagedata()) {
      if (newimagedata_ != NULL) newimagedata_->::TSP::DataReference::Clear();
    }
    if (has_oldimagedata()) {
      if (oldimagedata_ != NULL) oldimagedata_->::TSP::DataReference::Clear();
    }
    if (has_oldoriginalimagedata()) {
      if (oldoriginalimagedata_ != NULL) oldoriginalimagedata_->::TSP::DataReference::Clear();
    }
    if (has_oldnaturalsize()) {
      if (oldnaturalsize_ != NULL) oldnaturalsize_->::TSP::Size::Clear();
    }
    if (has_neworiginalimagedata()) {
      if (neworiginalimagedata_ != NULL) neworiginalimagedata_->::TSP::DataReference::Clear();
    }
    if (has_oldimageadjustments()) {
      if (oldimageadjustments_ != NULL) oldimageadjustments_->::TSD::ImageAdjustmentsArchive::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_oldadjustedimagedata()) {
      if (oldadjustedimagedata_ != NULL) oldadjustedimagedata_->::TSP::DataReference::Clear();
    }
    if (has_oldenhancedimagedata()) {
      if (oldenhancedimagedata_ != NULL) oldenhancedimagedata_->::TSP::DataReference::Clear();
    }
    if (has_database_newimagedata()) {
      if (database_newimagedata_ != NULL) database_newimagedata_->::TSP::Reference::Clear();
    }
    if (has_database_oldimagedata()) {
      if (database_oldimagedata_ != NULL) database_oldimagedata_->::TSP::Reference::Clear();
    }
    if (has_database_oldoriginalimagedata()) {
      if (database_oldoriginalimagedata_ != NULL) database_oldoriginalimagedata_->::TSP::Reference::Clear();
    }
    if (has_database_neworiginalimagedata()) {
      if (database_neworiginalimagedata_ != NULL) database_neworiginalimagedata_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageMediaCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .TSP.Reference info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_database_newImageData;
        break;
      }

      // optional .TSP.Reference database_newImageData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_database_newImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_database_newimagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_database_oldImageData;
        break;
      }

      // optional .TSP.Reference database_oldImageData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_database_oldImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_database_oldimagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_database_oldOriginalImageData;
        break;
      }

      // optional .TSP.Reference database_oldOriginalImageData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_database_oldOriginalImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_database_oldoriginalimagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_oldNaturalSize;
        break;
      }

      // optional .TSP.Size oldNaturalSize = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldNaturalSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldnaturalsize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_database_newOriginalImageData;
        break;
      }

      // optional .TSP.Reference database_newOriginalImageData = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_database_newOriginalImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_database_neworiginalimagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_newImageData;
        break;
      }

      // optional .TSP.DataReference newImageData = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newimagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_oldImageData;
        break;
      }

      // optional .TSP.DataReference oldImageData = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldimagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_oldOriginalImageData;
        break;
      }

      // optional .TSP.DataReference oldOriginalImageData = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldOriginalImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldoriginalimagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_newOriginalImageData;
        break;
      }

      // optional .TSP.DataReference newOriginalImageData = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newOriginalImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_neworiginalimagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_oldImageAdjustments;
        break;
      }

      // optional .TSD.ImageAdjustmentsArchive oldImageAdjustments = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldImageAdjustments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldimageadjustments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_oldAdjustedImageData;
        break;
      }

      // optional .TSP.DataReference oldAdjustedImageData = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldAdjustedImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldadjustedimagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_oldEnhancedImageData;
        break;
      }

      // optional .TSP.DataReference oldEnhancedImageData = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldEnhancedImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldenhancedimagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImageMediaCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  // optional .TSP.Reference database_newImageData = 3;
  if (has_database_newimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->database_newimagedata(), output);
  }

  // optional .TSP.Reference database_oldImageData = 4;
  if (has_database_oldimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->database_oldimagedata(), output);
  }

  // optional .TSP.Reference database_oldOriginalImageData = 5;
  if (has_database_oldoriginalimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->database_oldoriginalimagedata(), output);
  }

  // optional .TSP.Size oldNaturalSize = 6;
  if (has_oldnaturalsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->oldnaturalsize(), output);
  }

  // optional .TSP.Reference database_newOriginalImageData = 7;
  if (has_database_neworiginalimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->database_neworiginalimagedata(), output);
  }

  // optional .TSP.DataReference newImageData = 8;
  if (has_newimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->newimagedata(), output);
  }

  // optional .TSP.DataReference oldImageData = 9;
  if (has_oldimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->oldimagedata(), output);
  }

  // optional .TSP.DataReference oldOriginalImageData = 10;
  if (has_oldoriginalimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->oldoriginalimagedata(), output);
  }

  // optional .TSP.DataReference newOriginalImageData = 11;
  if (has_neworiginalimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->neworiginalimagedata(), output);
  }

  // optional .TSD.ImageAdjustmentsArchive oldImageAdjustments = 12;
  if (has_oldimageadjustments()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->oldimageadjustments(), output);
  }

  // optional .TSP.DataReference oldAdjustedImageData = 13;
  if (has_oldadjustedimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->oldadjustedimagedata(), output);
  }

  // optional .TSP.DataReference oldEnhancedImageData = 14;
  if (has_oldenhancedimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->oldenhancedimagedata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImageMediaCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  // optional .TSP.Reference database_newImageData = 3;
  if (has_database_newimagedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->database_newimagedata(), target);
  }

  // optional .TSP.Reference database_oldImageData = 4;
  if (has_database_oldimagedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->database_oldimagedata(), target);
  }

  // optional .TSP.Reference database_oldOriginalImageData = 5;
  if (has_database_oldoriginalimagedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->database_oldoriginalimagedata(), target);
  }

  // optional .TSP.Size oldNaturalSize = 6;
  if (has_oldnaturalsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->oldnaturalsize(), target);
  }

  // optional .TSP.Reference database_newOriginalImageData = 7;
  if (has_database_neworiginalimagedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->database_neworiginalimagedata(), target);
  }

  // optional .TSP.DataReference newImageData = 8;
  if (has_newimagedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->newimagedata(), target);
  }

  // optional .TSP.DataReference oldImageData = 9;
  if (has_oldimagedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->oldimagedata(), target);
  }

  // optional .TSP.DataReference oldOriginalImageData = 10;
  if (has_oldoriginalimagedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->oldoriginalimagedata(), target);
  }

  // optional .TSP.DataReference newOriginalImageData = 11;
  if (has_neworiginalimagedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->neworiginalimagedata(), target);
  }

  // optional .TSD.ImageAdjustmentsArchive oldImageAdjustments = 12;
  if (has_oldimageadjustments()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->oldimageadjustments(), target);
  }

  // optional .TSP.DataReference oldAdjustedImageData = 13;
  if (has_oldadjustedimagedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->oldadjustedimagedata(), target);
  }

  // optional .TSP.DataReference oldEnhancedImageData = 14;
  if (has_oldenhancedimagedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->oldenhancedimagedata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImageMediaCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .TSP.DataReference newImageData = 8;
    if (has_newimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newimagedata());
    }

    // optional .TSP.DataReference oldImageData = 9;
    if (has_oldimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oldimagedata());
    }

    // optional .TSP.DataReference oldOriginalImageData = 10;
    if (has_oldoriginalimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oldoriginalimagedata());
    }

    // optional .TSP.Size oldNaturalSize = 6;
    if (has_oldnaturalsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oldnaturalsize());
    }

    // optional .TSP.DataReference newOriginalImageData = 11;
    if (has_neworiginalimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->neworiginalimagedata());
    }

    // optional .TSD.ImageAdjustmentsArchive oldImageAdjustments = 12;
    if (has_oldimageadjustments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oldimageadjustments());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TSP.DataReference oldAdjustedImageData = 13;
    if (has_oldadjustedimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oldadjustedimagedata());
    }

    // optional .TSP.DataReference oldEnhancedImageData = 14;
    if (has_oldenhancedimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oldenhancedimagedata());
    }

    // optional .TSP.Reference database_newImageData = 3;
    if (has_database_newimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->database_newimagedata());
    }

    // optional .TSP.Reference database_oldImageData = 4;
    if (has_database_oldimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->database_oldimagedata());
    }

    // optional .TSP.Reference database_oldOriginalImageData = 5;
    if (has_database_oldoriginalimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->database_oldoriginalimagedata());
    }

    // optional .TSP.Reference database_newOriginalImageData = 7;
    if (has_database_neworiginalimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->database_neworiginalimagedata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageMediaCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageMediaCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageMediaCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageMediaCommandArchive::MergeFrom(const ImageMediaCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_info()) {
      mutable_info()->::TSP::Reference::MergeFrom(from.info());
    }
    if (from.has_newimagedata()) {
      mutable_newimagedata()->::TSP::DataReference::MergeFrom(from.newimagedata());
    }
    if (from.has_oldimagedata()) {
      mutable_oldimagedata()->::TSP::DataReference::MergeFrom(from.oldimagedata());
    }
    if (from.has_oldoriginalimagedata()) {
      mutable_oldoriginalimagedata()->::TSP::DataReference::MergeFrom(from.oldoriginalimagedata());
    }
    if (from.has_oldnaturalsize()) {
      mutable_oldnaturalsize()->::TSP::Size::MergeFrom(from.oldnaturalsize());
    }
    if (from.has_neworiginalimagedata()) {
      mutable_neworiginalimagedata()->::TSP::DataReference::MergeFrom(from.neworiginalimagedata());
    }
    if (from.has_oldimageadjustments()) {
      mutable_oldimageadjustments()->::TSD::ImageAdjustmentsArchive::MergeFrom(from.oldimageadjustments());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_oldadjustedimagedata()) {
      mutable_oldadjustedimagedata()->::TSP::DataReference::MergeFrom(from.oldadjustedimagedata());
    }
    if (from.has_oldenhancedimagedata()) {
      mutable_oldenhancedimagedata()->::TSP::DataReference::MergeFrom(from.oldenhancedimagedata());
    }
    if (from.has_database_newimagedata()) {
      mutable_database_newimagedata()->::TSP::Reference::MergeFrom(from.database_newimagedata());
    }
    if (from.has_database_oldimagedata()) {
      mutable_database_oldimagedata()->::TSP::Reference::MergeFrom(from.database_oldimagedata());
    }
    if (from.has_database_oldoriginalimagedata()) {
      mutable_database_oldoriginalimagedata()->::TSP::Reference::MergeFrom(from.database_oldoriginalimagedata());
    }
    if (from.has_database_neworiginalimagedata()) {
      mutable_database_neworiginalimagedata()->::TSP::Reference::MergeFrom(from.database_neworiginalimagedata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageMediaCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageMediaCommandArchive::CopyFrom(const ImageMediaCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageMediaCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  if (has_newimagedata()) {
    if (!this->newimagedata().IsInitialized()) return false;
  }
  if (has_oldimagedata()) {
    if (!this->oldimagedata().IsInitialized()) return false;
  }
  if (has_oldoriginalimagedata()) {
    if (!this->oldoriginalimagedata().IsInitialized()) return false;
  }
  if (has_oldnaturalsize()) {
    if (!this->oldnaturalsize().IsInitialized()) return false;
  }
  if (has_neworiginalimagedata()) {
    if (!this->neworiginalimagedata().IsInitialized()) return false;
  }
  if (has_oldadjustedimagedata()) {
    if (!this->oldadjustedimagedata().IsInitialized()) return false;
  }
  if (has_oldenhancedimagedata()) {
    if (!this->oldenhancedimagedata().IsInitialized()) return false;
  }
  if (has_database_newimagedata()) {
    if (!this->database_newimagedata().IsInitialized()) return false;
  }
  if (has_database_oldimagedata()) {
    if (!this->database_oldimagedata().IsInitialized()) return false;
  }
  if (has_database_oldoriginalimagedata()) {
    if (!this->database_oldoriginalimagedata().IsInitialized()) return false;
  }
  if (has_database_neworiginalimagedata()) {
    if (!this->database_neworiginalimagedata().IsInitialized()) return false;
  }
  return true;
}

void ImageMediaCommandArchive::Swap(ImageMediaCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(info_, other->info_);
    std::swap(newimagedata_, other->newimagedata_);
    std::swap(oldimagedata_, other->oldimagedata_);
    std::swap(oldoriginalimagedata_, other->oldoriginalimagedata_);
    std::swap(oldnaturalsize_, other->oldnaturalsize_);
    std::swap(neworiginalimagedata_, other->neworiginalimagedata_);
    std::swap(oldimageadjustments_, other->oldimageadjustments_);
    std::swap(oldadjustedimagedata_, other->oldadjustedimagedata_);
    std::swap(oldenhancedimagedata_, other->oldenhancedimagedata_);
    std::swap(database_newimagedata_, other->database_newimagedata_);
    std::swap(database_oldimagedata_, other->database_oldimagedata_);
    std::swap(database_oldoriginalimagedata_, other->database_oldoriginalimagedata_);
    std::swap(database_neworiginalimagedata_, other->database_neworiginalimagedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageMediaCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageMediaCommandArchive_descriptor_;
  metadata.reflection = ImageMediaCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MediaOriginalSizeCommandArchive::kSuperFieldNumber;
const int MediaOriginalSizeCommandArchive::kInfoFieldNumber;
const int MediaOriginalSizeCommandArchive::kNewOriginalSizeFieldNumber;
const int MediaOriginalSizeCommandArchive::kOldOriginalSizeFieldNumber;
#endif  // !_MSC_VER

MediaOriginalSizeCommandArchive::MediaOriginalSizeCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaOriginalSizeCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  info_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  neworiginalsize_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
  oldoriginalsize_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
}

MediaOriginalSizeCommandArchive::MediaOriginalSizeCommandArchive(const MediaOriginalSizeCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaOriginalSizeCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  info_ = NULL;
  neworiginalsize_ = NULL;
  oldoriginalsize_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaOriginalSizeCommandArchive::~MediaOriginalSizeCommandArchive() {
  SharedDtor();
}

void MediaOriginalSizeCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete info_;
    delete neworiginalsize_;
    delete oldoriginalsize_;
  }
}

void MediaOriginalSizeCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaOriginalSizeCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaOriginalSizeCommandArchive_descriptor_;
}

const MediaOriginalSizeCommandArchive& MediaOriginalSizeCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

MediaOriginalSizeCommandArchive* MediaOriginalSizeCommandArchive::default_instance_ = NULL;

MediaOriginalSizeCommandArchive* MediaOriginalSizeCommandArchive::New() const {
  return new MediaOriginalSizeCommandArchive;
}

void MediaOriginalSizeCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::TSP::Reference::Clear();
    }
    if (has_neworiginalsize()) {
      if (neworiginalsize_ != NULL) neworiginalsize_->::TSP::Size::Clear();
    }
    if (has_oldoriginalsize()) {
      if (oldoriginalsize_ != NULL) oldoriginalsize_->::TSP::Size::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaOriginalSizeCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .TSP.Reference info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_newOriginalSize;
        break;
      }

      // optional .TSP.Size newOriginalSize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newOriginalSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_neworiginalsize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_oldOriginalSize;
        break;
      }

      // optional .TSP.Size oldOriginalSize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldOriginalSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldoriginalsize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaOriginalSizeCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  // optional .TSP.Size newOriginalSize = 3;
  if (has_neworiginalsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->neworiginalsize(), output);
  }

  // optional .TSP.Size oldOriginalSize = 4;
  if (has_oldoriginalsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->oldoriginalsize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaOriginalSizeCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  // optional .TSP.Size newOriginalSize = 3;
  if (has_neworiginalsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->neworiginalsize(), target);
  }

  // optional .TSP.Size oldOriginalSize = 4;
  if (has_oldoriginalsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->oldoriginalsize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaOriginalSizeCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .TSP.Size newOriginalSize = 3;
    if (has_neworiginalsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->neworiginalsize());
    }

    // optional .TSP.Size oldOriginalSize = 4;
    if (has_oldoriginalsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oldoriginalsize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaOriginalSizeCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaOriginalSizeCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaOriginalSizeCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaOriginalSizeCommandArchive::MergeFrom(const MediaOriginalSizeCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_info()) {
      mutable_info()->::TSP::Reference::MergeFrom(from.info());
    }
    if (from.has_neworiginalsize()) {
      mutable_neworiginalsize()->::TSP::Size::MergeFrom(from.neworiginalsize());
    }
    if (from.has_oldoriginalsize()) {
      mutable_oldoriginalsize()->::TSP::Size::MergeFrom(from.oldoriginalsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaOriginalSizeCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaOriginalSizeCommandArchive::CopyFrom(const MediaOriginalSizeCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaOriginalSizeCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  if (has_neworiginalsize()) {
    if (!this->neworiginalsize().IsInitialized()) return false;
  }
  if (has_oldoriginalsize()) {
    if (!this->oldoriginalsize().IsInitialized()) return false;
  }
  return true;
}

void MediaOriginalSizeCommandArchive::Swap(MediaOriginalSizeCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(info_, other->info_);
    std::swap(neworiginalsize_, other->neworiginalsize_);
    std::swap(oldoriginalsize_, other->oldoriginalsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaOriginalSizeCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaOriginalSizeCommandArchive_descriptor_;
  metadata.reflection = MediaOriginalSizeCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImageMaskCommandArchive::kSuperFieldNumber;
const int ImageMaskCommandArchive::kInfoFieldNumber;
const int ImageMaskCommandArchive::kNewMaskInfoFieldNumber;
const int ImageMaskCommandArchive::kOldMaskInfoFieldNumber;
#endif  // !_MSC_VER

ImageMaskCommandArchive::ImageMaskCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImageMaskCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  info_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  newmaskinfo_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  oldmaskinfo_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ImageMaskCommandArchive::ImageMaskCommandArchive(const ImageMaskCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImageMaskCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  info_ = NULL;
  newmaskinfo_ = NULL;
  oldmaskinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageMaskCommandArchive::~ImageMaskCommandArchive() {
  SharedDtor();
}

void ImageMaskCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete info_;
    delete newmaskinfo_;
    delete oldmaskinfo_;
  }
}

void ImageMaskCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageMaskCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageMaskCommandArchive_descriptor_;
}

const ImageMaskCommandArchive& ImageMaskCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

ImageMaskCommandArchive* ImageMaskCommandArchive::default_instance_ = NULL;

ImageMaskCommandArchive* ImageMaskCommandArchive::New() const {
  return new ImageMaskCommandArchive;
}

void ImageMaskCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::TSP::Reference::Clear();
    }
    if (has_newmaskinfo()) {
      if (newmaskinfo_ != NULL) newmaskinfo_->::TSP::Reference::Clear();
    }
    if (has_oldmaskinfo()) {
      if (oldmaskinfo_ != NULL) oldmaskinfo_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageMaskCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .TSP.Reference info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_newMaskInfo;
        break;
      }

      // optional .TSP.Reference newMaskInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newMaskInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newmaskinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_oldMaskInfo;
        break;
      }

      // optional .TSP.Reference oldMaskInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldMaskInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldmaskinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImageMaskCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  // optional .TSP.Reference newMaskInfo = 3;
  if (has_newmaskinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->newmaskinfo(), output);
  }

  // optional .TSP.Reference oldMaskInfo = 4;
  if (has_oldmaskinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->oldmaskinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImageMaskCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  // optional .TSP.Reference newMaskInfo = 3;
  if (has_newmaskinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->newmaskinfo(), target);
  }

  // optional .TSP.Reference oldMaskInfo = 4;
  if (has_oldmaskinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->oldmaskinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImageMaskCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .TSP.Reference newMaskInfo = 3;
    if (has_newmaskinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newmaskinfo());
    }

    // optional .TSP.Reference oldMaskInfo = 4;
    if (has_oldmaskinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oldmaskinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageMaskCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageMaskCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageMaskCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageMaskCommandArchive::MergeFrom(const ImageMaskCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_info()) {
      mutable_info()->::TSP::Reference::MergeFrom(from.info());
    }
    if (from.has_newmaskinfo()) {
      mutable_newmaskinfo()->::TSP::Reference::MergeFrom(from.newmaskinfo());
    }
    if (from.has_oldmaskinfo()) {
      mutable_oldmaskinfo()->::TSP::Reference::MergeFrom(from.oldmaskinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageMaskCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageMaskCommandArchive::CopyFrom(const ImageMaskCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageMaskCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  if (has_newmaskinfo()) {
    if (!this->newmaskinfo().IsInitialized()) return false;
  }
  if (has_oldmaskinfo()) {
    if (!this->oldmaskinfo().IsInitialized()) return false;
  }
  return true;
}

void ImageMaskCommandArchive::Swap(ImageMaskCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(info_, other->info_);
    std::swap(newmaskinfo_, other->newmaskinfo_);
    std::swap(oldmaskinfo_, other->oldmaskinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageMaskCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageMaskCommandArchive_descriptor_;
  metadata.reflection = ImageMaskCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MediaApplyPresetCommandArchive::kSuperFieldNumber;
const int MediaApplyPresetCommandArchive::kStylepresetFieldNumber;
const int MediaApplyPresetCommandArchive::kShadowpresetFieldNumber;
#endif  // !_MSC_VER

MediaApplyPresetCommandArchive::MediaApplyPresetCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaApplyPresetCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSD::StyledInfoSetStyleCommandArchive*>(&::TSD::StyledInfoSetStyleCommandArchive::default_instance());
  stylepreset_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  shadowpreset_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
}

MediaApplyPresetCommandArchive::MediaApplyPresetCommandArchive(const MediaApplyPresetCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaApplyPresetCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  stylepreset_ = NULL;
  shadowpreset_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaApplyPresetCommandArchive::~MediaApplyPresetCommandArchive() {
  SharedDtor();
}

void MediaApplyPresetCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete stylepreset_;
    delete shadowpreset_;
  }
}

void MediaApplyPresetCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaApplyPresetCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaApplyPresetCommandArchive_descriptor_;
}

const MediaApplyPresetCommandArchive& MediaApplyPresetCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

MediaApplyPresetCommandArchive* MediaApplyPresetCommandArchive::default_instance_ = NULL;

MediaApplyPresetCommandArchive* MediaApplyPresetCommandArchive::New() const {
  return new MediaApplyPresetCommandArchive;
}

void MediaApplyPresetCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSD::StyledInfoSetStyleCommandArchive::Clear();
    }
    if (has_stylepreset()) {
      if (stylepreset_ != NULL) stylepreset_->::TSP::Reference::Clear();
    }
    if (has_shadowpreset()) {
      if (shadowpreset_ != NULL) shadowpreset_->::TSD::ShadowArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaApplyPresetCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSD.StyledInfoSetStyleCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_stylepreset;
        break;
      }

      // optional .TSP.Reference stylepreset = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stylepreset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stylepreset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_shadowpreset;
        break;
      }

      // optional .TSD.ShadowArchive shadowpreset = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shadowpreset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shadowpreset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaApplyPresetCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSD.StyledInfoSetStyleCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference stylepreset = 10;
  if (has_stylepreset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->stylepreset(), output);
  }

  // optional .TSD.ShadowArchive shadowpreset = 11;
  if (has_shadowpreset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->shadowpreset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaApplyPresetCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSD.StyledInfoSetStyleCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference stylepreset = 10;
  if (has_stylepreset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->stylepreset(), target);
  }

  // optional .TSD.ShadowArchive shadowpreset = 11;
  if (has_shadowpreset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->shadowpreset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaApplyPresetCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSD.StyledInfoSetStyleCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference stylepreset = 10;
    if (has_stylepreset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stylepreset());
    }

    // optional .TSD.ShadowArchive shadowpreset = 11;
    if (has_shadowpreset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shadowpreset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaApplyPresetCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaApplyPresetCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaApplyPresetCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaApplyPresetCommandArchive::MergeFrom(const MediaApplyPresetCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSD::StyledInfoSetStyleCommandArchive::MergeFrom(from.super());
    }
    if (from.has_stylepreset()) {
      mutable_stylepreset()->::TSP::Reference::MergeFrom(from.stylepreset());
    }
    if (from.has_shadowpreset()) {
      mutable_shadowpreset()->::TSD::ShadowArchive::MergeFrom(from.shadowpreset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaApplyPresetCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaApplyPresetCommandArchive::CopyFrom(const MediaApplyPresetCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaApplyPresetCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_stylepreset()) {
    if (!this->stylepreset().IsInitialized()) return false;
  }
  if (has_shadowpreset()) {
    if (!this->shadowpreset().IsInitialized()) return false;
  }
  return true;
}

void MediaApplyPresetCommandArchive::Swap(MediaApplyPresetCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(stylepreset_, other->stylepreset_);
    std::swap(shadowpreset_, other->shadowpreset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaApplyPresetCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaApplyPresetCommandArchive_descriptor_;
  metadata.reflection = MediaApplyPresetCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImageAdjustmentsCommandArchive::kSuperFieldNumber;
const int ImageAdjustmentsCommandArchive::kOldImageAdjustmentsFieldNumber;
const int ImageAdjustmentsCommandArchive::kNewImageAdjustmentsFieldNumber;
const int ImageAdjustmentsCommandArchive::kAdjustedImageDataFieldNumber;
const int ImageAdjustmentsCommandArchive::kReplacedAdjustedImageDataFieldNumber;
const int ImageAdjustmentsCommandArchive::kEnhancedImageDataFieldNumber;
const int ImageAdjustmentsCommandArchive::kReplacedEnhancedImageDataFieldNumber;
#endif  // !_MSC_VER

ImageAdjustmentsCommandArchive::ImageAdjustmentsCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImageAdjustmentsCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  old_image_adjustments_ = const_cast< ::TSD::ImageAdjustmentsArchive*>(&::TSD::ImageAdjustmentsArchive::default_instance());
  new_image_adjustments_ = const_cast< ::TSD::ImageAdjustmentsArchive*>(&::TSD::ImageAdjustmentsArchive::default_instance());
  adjustedimagedata_ = const_cast< ::TSP::DataReference*>(&::TSP::DataReference::default_instance());
  replacedadjustedimagedata_ = const_cast< ::TSP::DataReference*>(&::TSP::DataReference::default_instance());
  enhancedimagedata_ = const_cast< ::TSP::DataReference*>(&::TSP::DataReference::default_instance());
  replacedenhancedimagedata_ = const_cast< ::TSP::DataReference*>(&::TSP::DataReference::default_instance());
}

ImageAdjustmentsCommandArchive::ImageAdjustmentsCommandArchive(const ImageAdjustmentsCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImageAdjustmentsCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  old_image_adjustments_ = NULL;
  new_image_adjustments_ = NULL;
  adjustedimagedata_ = NULL;
  replacedadjustedimagedata_ = NULL;
  enhancedimagedata_ = NULL;
  replacedenhancedimagedata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageAdjustmentsCommandArchive::~ImageAdjustmentsCommandArchive() {
  SharedDtor();
}

void ImageAdjustmentsCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete old_image_adjustments_;
    delete new_image_adjustments_;
    delete adjustedimagedata_;
    delete replacedadjustedimagedata_;
    delete enhancedimagedata_;
    delete replacedenhancedimagedata_;
  }
}

void ImageAdjustmentsCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageAdjustmentsCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageAdjustmentsCommandArchive_descriptor_;
}

const ImageAdjustmentsCommandArchive& ImageAdjustmentsCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

ImageAdjustmentsCommandArchive* ImageAdjustmentsCommandArchive::default_instance_ = NULL;

ImageAdjustmentsCommandArchive* ImageAdjustmentsCommandArchive::New() const {
  return new ImageAdjustmentsCommandArchive;
}

void ImageAdjustmentsCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_old_image_adjustments()) {
      if (old_image_adjustments_ != NULL) old_image_adjustments_->::TSD::ImageAdjustmentsArchive::Clear();
    }
    if (has_new_image_adjustments()) {
      if (new_image_adjustments_ != NULL) new_image_adjustments_->::TSD::ImageAdjustmentsArchive::Clear();
    }
    if (has_adjustedimagedata()) {
      if (adjustedimagedata_ != NULL) adjustedimagedata_->::TSP::DataReference::Clear();
    }
    if (has_replacedadjustedimagedata()) {
      if (replacedadjustedimagedata_ != NULL) replacedadjustedimagedata_->::TSP::DataReference::Clear();
    }
    if (has_enhancedimagedata()) {
      if (enhancedimagedata_ != NULL) enhancedimagedata_->::TSP::DataReference::Clear();
    }
    if (has_replacedenhancedimagedata()) {
      if (replacedenhancedimagedata_ != NULL) replacedenhancedimagedata_->::TSP::DataReference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageAdjustmentsCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_old_image_adjustments;
        break;
      }

      // optional .TSD.ImageAdjustmentsArchive old_image_adjustments = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_image_adjustments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_image_adjustments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_image_adjustments;
        break;
      }

      // optional .TSD.ImageAdjustmentsArchive new_image_adjustments = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_image_adjustments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_image_adjustments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_adjustedImageData;
        break;
      }

      // optional .TSP.DataReference adjustedImageData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adjustedImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adjustedimagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_replacedAdjustedImageData;
        break;
      }

      // optional .TSP.DataReference replacedAdjustedImageData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_replacedAdjustedImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replacedadjustedimagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_enhancedImageData;
        break;
      }

      // optional .TSP.DataReference enhancedImageData = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enhancedImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enhancedimagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_replacedEnhancedImageData;
        break;
      }

      // optional .TSP.DataReference replacedEnhancedImageData = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_replacedEnhancedImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replacedenhancedimagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImageAdjustmentsCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSD.ImageAdjustmentsArchive old_image_adjustments = 2;
  if (has_old_image_adjustments()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->old_image_adjustments(), output);
  }

  // optional .TSD.ImageAdjustmentsArchive new_image_adjustments = 3;
  if (has_new_image_adjustments()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->new_image_adjustments(), output);
  }

  // optional .TSP.DataReference adjustedImageData = 4;
  if (has_adjustedimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->adjustedimagedata(), output);
  }

  // optional .TSP.DataReference replacedAdjustedImageData = 5;
  if (has_replacedadjustedimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->replacedadjustedimagedata(), output);
  }

  // optional .TSP.DataReference enhancedImageData = 6;
  if (has_enhancedimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->enhancedimagedata(), output);
  }

  // optional .TSP.DataReference replacedEnhancedImageData = 7;
  if (has_replacedenhancedimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->replacedenhancedimagedata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImageAdjustmentsCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSD.ImageAdjustmentsArchive old_image_adjustments = 2;
  if (has_old_image_adjustments()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->old_image_adjustments(), target);
  }

  // optional .TSD.ImageAdjustmentsArchive new_image_adjustments = 3;
  if (has_new_image_adjustments()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->new_image_adjustments(), target);
  }

  // optional .TSP.DataReference adjustedImageData = 4;
  if (has_adjustedimagedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->adjustedimagedata(), target);
  }

  // optional .TSP.DataReference replacedAdjustedImageData = 5;
  if (has_replacedadjustedimagedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->replacedadjustedimagedata(), target);
  }

  // optional .TSP.DataReference enhancedImageData = 6;
  if (has_enhancedimagedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->enhancedimagedata(), target);
  }

  // optional .TSP.DataReference replacedEnhancedImageData = 7;
  if (has_replacedenhancedimagedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->replacedenhancedimagedata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImageAdjustmentsCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSD.ImageAdjustmentsArchive old_image_adjustments = 2;
    if (has_old_image_adjustments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_image_adjustments());
    }

    // optional .TSD.ImageAdjustmentsArchive new_image_adjustments = 3;
    if (has_new_image_adjustments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_image_adjustments());
    }

    // optional .TSP.DataReference adjustedImageData = 4;
    if (has_adjustedimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adjustedimagedata());
    }

    // optional .TSP.DataReference replacedAdjustedImageData = 5;
    if (has_replacedadjustedimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->replacedadjustedimagedata());
    }

    // optional .TSP.DataReference enhancedImageData = 6;
    if (has_enhancedimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enhancedimagedata());
    }

    // optional .TSP.DataReference replacedEnhancedImageData = 7;
    if (has_replacedenhancedimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->replacedenhancedimagedata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageAdjustmentsCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageAdjustmentsCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageAdjustmentsCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageAdjustmentsCommandArchive::MergeFrom(const ImageAdjustmentsCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_old_image_adjustments()) {
      mutable_old_image_adjustments()->::TSD::ImageAdjustmentsArchive::MergeFrom(from.old_image_adjustments());
    }
    if (from.has_new_image_adjustments()) {
      mutable_new_image_adjustments()->::TSD::ImageAdjustmentsArchive::MergeFrom(from.new_image_adjustments());
    }
    if (from.has_adjustedimagedata()) {
      mutable_adjustedimagedata()->::TSP::DataReference::MergeFrom(from.adjustedimagedata());
    }
    if (from.has_replacedadjustedimagedata()) {
      mutable_replacedadjustedimagedata()->::TSP::DataReference::MergeFrom(from.replacedadjustedimagedata());
    }
    if (from.has_enhancedimagedata()) {
      mutable_enhancedimagedata()->::TSP::DataReference::MergeFrom(from.enhancedimagedata());
    }
    if (from.has_replacedenhancedimagedata()) {
      mutable_replacedenhancedimagedata()->::TSP::DataReference::MergeFrom(from.replacedenhancedimagedata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageAdjustmentsCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageAdjustmentsCommandArchive::CopyFrom(const ImageAdjustmentsCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageAdjustmentsCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_adjustedimagedata()) {
    if (!this->adjustedimagedata().IsInitialized()) return false;
  }
  if (has_replacedadjustedimagedata()) {
    if (!this->replacedadjustedimagedata().IsInitialized()) return false;
  }
  if (has_enhancedimagedata()) {
    if (!this->enhancedimagedata().IsInitialized()) return false;
  }
  if (has_replacedenhancedimagedata()) {
    if (!this->replacedenhancedimagedata().IsInitialized()) return false;
  }
  return true;
}

void ImageAdjustmentsCommandArchive::Swap(ImageAdjustmentsCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(old_image_adjustments_, other->old_image_adjustments_);
    std::swap(new_image_adjustments_, other->new_image_adjustments_);
    std::swap(adjustedimagedata_, other->adjustedimagedata_);
    std::swap(replacedadjustedimagedata_, other->replacedadjustedimagedata_);
    std::swap(enhancedimagedata_, other->enhancedimagedata_);
    std::swap(replacedenhancedimagedata_, other->replacedenhancedimagedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageAdjustmentsCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageAdjustmentsCommandArchive_descriptor_;
  metadata.reflection = ImageAdjustmentsCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MediaFlagsCommandArchive::kSuperFieldNumber;
const int MediaFlagsCommandArchive::kInfoFieldNumber;
const int MediaFlagsCommandArchive::kFlagsFieldNumber;
#endif  // !_MSC_VER

MediaFlagsCommandArchive::MediaFlagsCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaFlagsCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  info_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

MediaFlagsCommandArchive::MediaFlagsCommandArchive(const MediaFlagsCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaFlagsCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  info_ = NULL;
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaFlagsCommandArchive::~MediaFlagsCommandArchive() {
  SharedDtor();
}

void MediaFlagsCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete info_;
  }
}

void MediaFlagsCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaFlagsCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaFlagsCommandArchive_descriptor_;
}

const MediaFlagsCommandArchive& MediaFlagsCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

MediaFlagsCommandArchive* MediaFlagsCommandArchive::default_instance_ = NULL;

MediaFlagsCommandArchive* MediaFlagsCommandArchive::New() const {
  return new MediaFlagsCommandArchive;
}

void MediaFlagsCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::TSP::Reference::Clear();
    }
    flags_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaFlagsCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .TSP.Reference info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaFlagsCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  // optional uint32 flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaFlagsCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  // optional uint32 flags = 3;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaFlagsCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional uint32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaFlagsCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaFlagsCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaFlagsCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaFlagsCommandArchive::MergeFrom(const MediaFlagsCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_info()) {
      mutable_info()->::TSP::Reference::MergeFrom(from.info());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaFlagsCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaFlagsCommandArchive::CopyFrom(const MediaFlagsCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaFlagsCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void MediaFlagsCommandArchive::Swap(MediaFlagsCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(info_, other->info_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaFlagsCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaFlagsCommandArchive_descriptor_;
  metadata.reflection = MediaFlagsCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DrawablesCommandGroupArchive_DrawablesCommandGroupType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrawablesCommandGroupArchive_DrawablesCommandGroupType_descriptor_;
}
bool DrawablesCommandGroupArchive_DrawablesCommandGroupType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DrawablesCommandGroupArchive_DrawablesCommandGroupType DrawablesCommandGroupArchive::Constructive;
const DrawablesCommandGroupArchive_DrawablesCommandGroupType DrawablesCommandGroupArchive::Destructive;
const DrawablesCommandGroupArchive_DrawablesCommandGroupType DrawablesCommandGroupArchive::InPlace;
const DrawablesCommandGroupArchive_DrawablesCommandGroupType DrawablesCommandGroupArchive::DrawablesCommandGroupType_MIN;
const DrawablesCommandGroupArchive_DrawablesCommandGroupType DrawablesCommandGroupArchive::DrawablesCommandGroupType_MAX;
const int DrawablesCommandGroupArchive::DrawablesCommandGroupType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DrawablesCommandGroupArchive::kSuperFieldNumber;
const int DrawablesCommandGroupArchive::kObsoleteSelectionFieldNumber;
const int DrawablesCommandGroupArchive::kModelforselectionFieldNumber;
const int DrawablesCommandGroupArchive::kTypeFieldNumber;
const int DrawablesCommandGroupArchive::kForDragFieldNumber;
const int DrawablesCommandGroupArchive::kArchivedselectionFieldNumber;
#endif  // !_MSC_VER

DrawablesCommandGroupArchive::DrawablesCommandGroupArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DrawablesCommandGroupArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandGroupArchive*>(&::TSK::CommandGroupArchive::default_instance());
  obsolete_selection_ = const_cast< ::TSD::CanvasSelectionArchive*>(&::TSD::CanvasSelectionArchive::default_instance());
  modelforselection_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  archivedselection_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

DrawablesCommandGroupArchive::DrawablesCommandGroupArchive(const DrawablesCommandGroupArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DrawablesCommandGroupArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  obsolete_selection_ = NULL;
  modelforselection_ = NULL;
  type_ = 1;
  fordrag_ = false;
  archivedselection_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DrawablesCommandGroupArchive::~DrawablesCommandGroupArchive() {
  SharedDtor();
}

void DrawablesCommandGroupArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete obsolete_selection_;
    delete modelforselection_;
    delete archivedselection_;
  }
}

void DrawablesCommandGroupArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DrawablesCommandGroupArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrawablesCommandGroupArchive_descriptor_;
}

const DrawablesCommandGroupArchive& DrawablesCommandGroupArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

DrawablesCommandGroupArchive* DrawablesCommandGroupArchive::default_instance_ = NULL;

DrawablesCommandGroupArchive* DrawablesCommandGroupArchive::New() const {
  return new DrawablesCommandGroupArchive;
}

void DrawablesCommandGroupArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandGroupArchive::Clear();
    }
    if (has_obsolete_selection()) {
      if (obsolete_selection_ != NULL) obsolete_selection_->::TSD::CanvasSelectionArchive::Clear();
    }
    if (has_modelforselection()) {
      if (modelforselection_ != NULL) modelforselection_->::TSP::Reference::Clear();
    }
    type_ = 1;
    fordrag_ = false;
    if (has_archivedselection()) {
      if (archivedselection_ != NULL) archivedselection_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DrawablesCommandGroupArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandGroupArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_obsolete_selection;
        break;
      }

      // optional .TSD.CanvasSelectionArchive obsolete_selection = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_obsolete_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obsolete_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_modelforselection;
        break;
      }

      // optional .TSP.Reference modelforselection = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modelforselection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modelforselection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .TSD.DrawablesCommandGroupArchive.DrawablesCommandGroupType type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType_IsValid(value)) {
            set_type(static_cast< ::TSD::DrawablesCommandGroupArchive_DrawablesCommandGroupType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_forDrag;
        break;
      }

      // optional bool forDrag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forDrag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fordrag_)));
          set_has_fordrag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_archivedselection;
        break;
      }

      // optional .TSP.Reference archivedselection = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_archivedselection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_archivedselection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DrawablesCommandGroupArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandGroupArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSD.CanvasSelectionArchive obsolete_selection = 2;
  if (has_obsolete_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->obsolete_selection(), output);
  }

  // optional .TSP.Reference modelforselection = 3;
  if (has_modelforselection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->modelforselection(), output);
  }

  // optional .TSD.DrawablesCommandGroupArchive.DrawablesCommandGroupType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional bool forDrag = 5;
  if (has_fordrag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->fordrag(), output);
  }

  // optional .TSP.Reference archivedselection = 6;
  if (has_archivedselection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->archivedselection(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DrawablesCommandGroupArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandGroupArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSD.CanvasSelectionArchive obsolete_selection = 2;
  if (has_obsolete_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->obsolete_selection(), target);
  }

  // optional .TSP.Reference modelforselection = 3;
  if (has_modelforselection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->modelforselection(), target);
  }

  // optional .TSD.DrawablesCommandGroupArchive.DrawablesCommandGroupType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional bool forDrag = 5;
  if (has_fordrag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->fordrag(), target);
  }

  // optional .TSP.Reference archivedselection = 6;
  if (has_archivedselection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->archivedselection(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DrawablesCommandGroupArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandGroupArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSD.CanvasSelectionArchive obsolete_selection = 2;
    if (has_obsolete_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obsolete_selection());
    }

    // optional .TSP.Reference modelforselection = 3;
    if (has_modelforselection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modelforselection());
    }

    // optional .TSD.DrawablesCommandGroupArchive.DrawablesCommandGroupType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool forDrag = 5;
    if (has_fordrag()) {
      total_size += 1 + 1;
    }

    // optional .TSP.Reference archivedselection = 6;
    if (has_archivedselection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->archivedselection());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrawablesCommandGroupArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DrawablesCommandGroupArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DrawablesCommandGroupArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DrawablesCommandGroupArchive::MergeFrom(const DrawablesCommandGroupArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandGroupArchive::MergeFrom(from.super());
    }
    if (from.has_obsolete_selection()) {
      mutable_obsolete_selection()->::TSD::CanvasSelectionArchive::MergeFrom(from.obsolete_selection());
    }
    if (from.has_modelforselection()) {
      mutable_modelforselection()->::TSP::Reference::MergeFrom(from.modelforselection());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_fordrag()) {
      set_fordrag(from.fordrag());
    }
    if (from.has_archivedselection()) {
      mutable_archivedselection()->::TSP::Reference::MergeFrom(from.archivedselection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DrawablesCommandGroupArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawablesCommandGroupArchive::CopyFrom(const DrawablesCommandGroupArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawablesCommandGroupArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_obsolete_selection()) {
    if (!this->obsolete_selection().IsInitialized()) return false;
  }
  if (has_modelforselection()) {
    if (!this->modelforselection().IsInitialized()) return false;
  }
  if (has_archivedselection()) {
    if (!this->archivedselection().IsInitialized()) return false;
  }
  return true;
}

void DrawablesCommandGroupArchive::Swap(DrawablesCommandGroupArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(obsolete_selection_, other->obsolete_selection_);
    std::swap(modelforselection_, other->modelforselection_);
    std::swap(type_, other->type_);
    std::swap(fordrag_, other->fordrag_);
    std::swap(archivedselection_, other->archivedselection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DrawablesCommandGroupArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DrawablesCommandGroupArchive_descriptor_;
  metadata.reflection = DrawablesCommandGroupArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExteriorTextWrapCommandArchive_InfoAndWrap::kInfoFieldNumber;
const int ExteriorTextWrapCommandArchive_InfoAndWrap::kExteriorTextWrapFieldNumber;
#endif  // !_MSC_VER

ExteriorTextWrapCommandArchive_InfoAndWrap::ExteriorTextWrapCommandArchive_InfoAndWrap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExteriorTextWrapCommandArchive_InfoAndWrap::InitAsDefaultInstance() {
  info_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  exterior_text_wrap_ = const_cast< ::TSD::ExteriorTextWrapArchive*>(&::TSD::ExteriorTextWrapArchive::default_instance());
}

ExteriorTextWrapCommandArchive_InfoAndWrap::ExteriorTextWrapCommandArchive_InfoAndWrap(const ExteriorTextWrapCommandArchive_InfoAndWrap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExteriorTextWrapCommandArchive_InfoAndWrap::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  exterior_text_wrap_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExteriorTextWrapCommandArchive_InfoAndWrap::~ExteriorTextWrapCommandArchive_InfoAndWrap() {
  SharedDtor();
}

void ExteriorTextWrapCommandArchive_InfoAndWrap::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete exterior_text_wrap_;
  }
}

void ExteriorTextWrapCommandArchive_InfoAndWrap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExteriorTextWrapCommandArchive_InfoAndWrap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExteriorTextWrapCommandArchive_InfoAndWrap_descriptor_;
}

const ExteriorTextWrapCommandArchive_InfoAndWrap& ExteriorTextWrapCommandArchive_InfoAndWrap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

ExteriorTextWrapCommandArchive_InfoAndWrap* ExteriorTextWrapCommandArchive_InfoAndWrap::default_instance_ = NULL;

ExteriorTextWrapCommandArchive_InfoAndWrap* ExteriorTextWrapCommandArchive_InfoAndWrap::New() const {
  return new ExteriorTextWrapCommandArchive_InfoAndWrap;
}

void ExteriorTextWrapCommandArchive_InfoAndWrap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::TSP::Reference::Clear();
    }
    if (has_exterior_text_wrap()) {
      if (exterior_text_wrap_ != NULL) exterior_text_wrap_->::TSD::ExteriorTextWrapArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExteriorTextWrapCommandArchive_InfoAndWrap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_exterior_text_wrap;
        break;
      }

      // optional .TSD.ExteriorTextWrapArchive exterior_text_wrap = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exterior_text_wrap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exterior_text_wrap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExteriorTextWrapCommandArchive_InfoAndWrap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // optional .TSD.ExteriorTextWrapArchive exterior_text_wrap = 2;
  if (has_exterior_text_wrap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->exterior_text_wrap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExteriorTextWrapCommandArchive_InfoAndWrap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // optional .TSD.ExteriorTextWrapArchive exterior_text_wrap = 2;
  if (has_exterior_text_wrap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->exterior_text_wrap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExteriorTextWrapCommandArchive_InfoAndWrap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .TSD.ExteriorTextWrapArchive exterior_text_wrap = 2;
    if (has_exterior_text_wrap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exterior_text_wrap());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExteriorTextWrapCommandArchive_InfoAndWrap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExteriorTextWrapCommandArchive_InfoAndWrap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExteriorTextWrapCommandArchive_InfoAndWrap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExteriorTextWrapCommandArchive_InfoAndWrap::MergeFrom(const ExteriorTextWrapCommandArchive_InfoAndWrap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::TSP::Reference::MergeFrom(from.info());
    }
    if (from.has_exterior_text_wrap()) {
      mutable_exterior_text_wrap()->::TSD::ExteriorTextWrapArchive::MergeFrom(from.exterior_text_wrap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExteriorTextWrapCommandArchive_InfoAndWrap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExteriorTextWrapCommandArchive_InfoAndWrap::CopyFrom(const ExteriorTextWrapCommandArchive_InfoAndWrap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExteriorTextWrapCommandArchive_InfoAndWrap::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void ExteriorTextWrapCommandArchive_InfoAndWrap::Swap(ExteriorTextWrapCommandArchive_InfoAndWrap* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(exterior_text_wrap_, other->exterior_text_wrap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExteriorTextWrapCommandArchive_InfoAndWrap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExteriorTextWrapCommandArchive_InfoAndWrap_descriptor_;
  metadata.reflection = ExteriorTextWrapCommandArchive_InfoAndWrap_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ExteriorTextWrapCommandArchive::kSuperFieldNumber;
const int ExteriorTextWrapCommandArchive::kInfoAndWrapFieldNumber;
#endif  // !_MSC_VER

ExteriorTextWrapCommandArchive::ExteriorTextWrapCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExteriorTextWrapCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

ExteriorTextWrapCommandArchive::ExteriorTextWrapCommandArchive(const ExteriorTextWrapCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExteriorTextWrapCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExteriorTextWrapCommandArchive::~ExteriorTextWrapCommandArchive() {
  SharedDtor();
}

void ExteriorTextWrapCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void ExteriorTextWrapCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExteriorTextWrapCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExteriorTextWrapCommandArchive_descriptor_;
}

const ExteriorTextWrapCommandArchive& ExteriorTextWrapCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

ExteriorTextWrapCommandArchive* ExteriorTextWrapCommandArchive::default_instance_ = NULL;

ExteriorTextWrapCommandArchive* ExteriorTextWrapCommandArchive::New() const {
  return new ExteriorTextWrapCommandArchive;
}

void ExteriorTextWrapCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
  }
  info_and_wrap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExteriorTextWrapCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info_and_wrap;
        break;
      }

      // repeated .TSD.ExteriorTextWrapCommandArchive.InfoAndWrap info_and_wrap = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_and_wrap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_and_wrap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info_and_wrap;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExteriorTextWrapCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // repeated .TSD.ExteriorTextWrapCommandArchive.InfoAndWrap info_and_wrap = 2;
  for (int i = 0; i < this->info_and_wrap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info_and_wrap(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExteriorTextWrapCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // repeated .TSD.ExteriorTextWrapCommandArchive.InfoAndWrap info_and_wrap = 2;
  for (int i = 0; i < this->info_and_wrap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info_and_wrap(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExteriorTextWrapCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  // repeated .TSD.ExteriorTextWrapCommandArchive.InfoAndWrap info_and_wrap = 2;
  total_size += 1 * this->info_and_wrap_size();
  for (int i = 0; i < this->info_and_wrap_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info_and_wrap(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExteriorTextWrapCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExteriorTextWrapCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExteriorTextWrapCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExteriorTextWrapCommandArchive::MergeFrom(const ExteriorTextWrapCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_and_wrap_.MergeFrom(from.info_and_wrap_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExteriorTextWrapCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExteriorTextWrapCommandArchive::CopyFrom(const ExteriorTextWrapCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExteriorTextWrapCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  for (int i = 0; i < info_and_wrap_size(); i++) {
    if (!this->info_and_wrap(i).IsInitialized()) return false;
  }
  return true;
}

void ExteriorTextWrapCommandArchive::Swap(ExteriorTextWrapCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    info_and_wrap_.Swap(&other->info_and_wrap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExteriorTextWrapCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExteriorTextWrapCommandArchive_descriptor_;
  metadata.reflection = ExteriorTextWrapCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DrawableHyperlinkCommandArchive::kSuperFieldNumber;
const int DrawableHyperlinkCommandArchive::kInfoFieldNumber;
const int DrawableHyperlinkCommandArchive::kOldhyperlinkUrlFieldNumber;
const int DrawableHyperlinkCommandArchive::kNewhyperlinkUrlFieldNumber;
#endif  // !_MSC_VER

DrawableHyperlinkCommandArchive::DrawableHyperlinkCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DrawableHyperlinkCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  info_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

DrawableHyperlinkCommandArchive::DrawableHyperlinkCommandArchive(const DrawableHyperlinkCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DrawableHyperlinkCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  info_ = NULL;
  oldhyperlink_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  newhyperlink_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DrawableHyperlinkCommandArchive::~DrawableHyperlinkCommandArchive() {
  SharedDtor();
}

void DrawableHyperlinkCommandArchive::SharedDtor() {
  if (oldhyperlink_url_ != &::google::protobuf::internal::kEmptyString) {
    delete oldhyperlink_url_;
  }
  if (newhyperlink_url_ != &::google::protobuf::internal::kEmptyString) {
    delete newhyperlink_url_;
  }
  if (this != default_instance_) {
    delete super_;
    delete info_;
  }
}

void DrawableHyperlinkCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DrawableHyperlinkCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrawableHyperlinkCommandArchive_descriptor_;
}

const DrawableHyperlinkCommandArchive& DrawableHyperlinkCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

DrawableHyperlinkCommandArchive* DrawableHyperlinkCommandArchive::default_instance_ = NULL;

DrawableHyperlinkCommandArchive* DrawableHyperlinkCommandArchive::New() const {
  return new DrawableHyperlinkCommandArchive;
}

void DrawableHyperlinkCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::TSP::Reference::Clear();
    }
    if (has_oldhyperlink_url()) {
      if (oldhyperlink_url_ != &::google::protobuf::internal::kEmptyString) {
        oldhyperlink_url_->clear();
      }
    }
    if (has_newhyperlink_url()) {
      if (newhyperlink_url_ != &::google::protobuf::internal::kEmptyString) {
        newhyperlink_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DrawableHyperlinkCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .TSP.Reference info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_oldhyperlink_url;
        break;
      }

      // optional string oldhyperlink_url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldhyperlink_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldhyperlink_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->oldhyperlink_url().data(), this->oldhyperlink_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_newhyperlink_url;
        break;
      }

      // optional string newhyperlink_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newhyperlink_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newhyperlink_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newhyperlink_url().data(), this->newhyperlink_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DrawableHyperlinkCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  // optional string oldhyperlink_url = 3;
  if (has_oldhyperlink_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldhyperlink_url().data(), this->oldhyperlink_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->oldhyperlink_url(), output);
  }

  // optional string newhyperlink_url = 4;
  if (has_newhyperlink_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newhyperlink_url().data(), this->newhyperlink_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->newhyperlink_url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DrawableHyperlinkCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  // optional string oldhyperlink_url = 3;
  if (has_oldhyperlink_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldhyperlink_url().data(), this->oldhyperlink_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->oldhyperlink_url(), target);
  }

  // optional string newhyperlink_url = 4;
  if (has_newhyperlink_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newhyperlink_url().data(), this->newhyperlink_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->newhyperlink_url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DrawableHyperlinkCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional string oldhyperlink_url = 3;
    if (has_oldhyperlink_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldhyperlink_url());
    }

    // optional string newhyperlink_url = 4;
    if (has_newhyperlink_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newhyperlink_url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrawableHyperlinkCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DrawableHyperlinkCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DrawableHyperlinkCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DrawableHyperlinkCommandArchive::MergeFrom(const DrawableHyperlinkCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_info()) {
      mutable_info()->::TSP::Reference::MergeFrom(from.info());
    }
    if (from.has_oldhyperlink_url()) {
      set_oldhyperlink_url(from.oldhyperlink_url());
    }
    if (from.has_newhyperlink_url()) {
      set_newhyperlink_url(from.newhyperlink_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DrawableHyperlinkCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawableHyperlinkCommandArchive::CopyFrom(const DrawableHyperlinkCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableHyperlinkCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void DrawableHyperlinkCommandArchive::Swap(DrawableHyperlinkCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(info_, other->info_);
    std::swap(oldhyperlink_url_, other->oldhyperlink_url_);
    std::swap(newhyperlink_url_, other->newhyperlink_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DrawableHyperlinkCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DrawableHyperlinkCommandArchive_descriptor_;
  metadata.reflection = DrawableHyperlinkCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_descriptor_;
}
bool CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CommandSelectionBehaviorArchive_CommandSelectionBehaviorType CommandSelectionBehaviorArchive::Constructive;
const CommandSelectionBehaviorArchive_CommandSelectionBehaviorType CommandSelectionBehaviorArchive::Destructive;
const CommandSelectionBehaviorArchive_CommandSelectionBehaviorType CommandSelectionBehaviorArchive::InPlace;
const CommandSelectionBehaviorArchive_CommandSelectionBehaviorType CommandSelectionBehaviorArchive::Replace;
const CommandSelectionBehaviorArchive_CommandSelectionBehaviorType CommandSelectionBehaviorArchive::CommandSelectionBehaviorType_MIN;
const CommandSelectionBehaviorArchive_CommandSelectionBehaviorType CommandSelectionBehaviorArchive::CommandSelectionBehaviorType_MAX;
const int CommandSelectionBehaviorArchive::CommandSelectionBehaviorType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CommandSelectionBehaviorArchive::kModelForSelectionFieldNumber;
const int CommandSelectionBehaviorArchive::kTypeFieldNumber;
const int CommandSelectionBehaviorArchive::kArchivedSelectionFieldNumber;
const int CommandSelectionBehaviorArchive::kArchivedNewSelectionFieldNumber;
const int CommandSelectionBehaviorArchive::kOldModelForSelectionFieldNumber;
#endif  // !_MSC_VER

CommandSelectionBehaviorArchive::CommandSelectionBehaviorArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSelectionBehaviorArchive::InitAsDefaultInstance() {
  model_for_selection_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  archived_selection_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  archived_new_selection_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  old_model_for_selection_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandSelectionBehaviorArchive::CommandSelectionBehaviorArchive(const CommandSelectionBehaviorArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSelectionBehaviorArchive::SharedCtor() {
  _cached_size_ = 0;
  model_for_selection_ = NULL;
  type_ = 1;
  archived_selection_ = NULL;
  archived_new_selection_ = NULL;
  old_model_for_selection_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSelectionBehaviorArchive::~CommandSelectionBehaviorArchive() {
  SharedDtor();
}

void CommandSelectionBehaviorArchive::SharedDtor() {
  if (this != default_instance_) {
    delete model_for_selection_;
    delete archived_selection_;
    delete archived_new_selection_;
    delete old_model_for_selection_;
  }
}

void CommandSelectionBehaviorArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSelectionBehaviorArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSelectionBehaviorArchive_descriptor_;
}

const CommandSelectionBehaviorArchive& CommandSelectionBehaviorArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

CommandSelectionBehaviorArchive* CommandSelectionBehaviorArchive::default_instance_ = NULL;

CommandSelectionBehaviorArchive* CommandSelectionBehaviorArchive::New() const {
  return new CommandSelectionBehaviorArchive;
}

void CommandSelectionBehaviorArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_model_for_selection()) {
      if (model_for_selection_ != NULL) model_for_selection_->::TSP::Reference::Clear();
    }
    type_ = 1;
    if (has_archived_selection()) {
      if (archived_selection_ != NULL) archived_selection_->::TSP::Reference::Clear();
    }
    if (has_archived_new_selection()) {
      if (archived_new_selection_ != NULL) archived_new_selection_->::TSP::Reference::Clear();
    }
    if (has_old_model_for_selection()) {
      if (old_model_for_selection_ != NULL) old_model_for_selection_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSelectionBehaviorArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference model_for_selection = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_model_for_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .TSD.CommandSelectionBehaviorArchive.CommandSelectionBehaviorType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSD::CommandSelectionBehaviorArchive_CommandSelectionBehaviorType_IsValid(value)) {
            set_type(static_cast< ::TSD::CommandSelectionBehaviorArchive_CommandSelectionBehaviorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_archived_selection;
        break;
      }

      // optional .TSP.Reference archived_selection = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_archived_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_archived_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_archived_new_selection;
        break;
      }

      // optional .TSP.Reference archived_new_selection = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_archived_new_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_archived_new_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_old_model_for_selection;
        break;
      }

      // optional .TSP.Reference old_model_for_selection = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_model_for_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_model_for_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSelectionBehaviorArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference model_for_selection = 2;
  if (has_model_for_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->model_for_selection(), output);
  }

  // optional .TSD.CommandSelectionBehaviorArchive.CommandSelectionBehaviorType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .TSP.Reference archived_selection = 4;
  if (has_archived_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->archived_selection(), output);
  }

  // optional .TSP.Reference archived_new_selection = 5;
  if (has_archived_new_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->archived_new_selection(), output);
  }

  // optional .TSP.Reference old_model_for_selection = 6;
  if (has_old_model_for_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->old_model_for_selection(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSelectionBehaviorArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference model_for_selection = 2;
  if (has_model_for_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->model_for_selection(), target);
  }

  // optional .TSD.CommandSelectionBehaviorArchive.CommandSelectionBehaviorType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .TSP.Reference archived_selection = 4;
  if (has_archived_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->archived_selection(), target);
  }

  // optional .TSP.Reference archived_new_selection = 5;
  if (has_archived_new_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->archived_new_selection(), target);
  }

  // optional .TSP.Reference old_model_for_selection = 6;
  if (has_old_model_for_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->old_model_for_selection(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSelectionBehaviorArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference model_for_selection = 2;
    if (has_model_for_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->model_for_selection());
    }

    // optional .TSD.CommandSelectionBehaviorArchive.CommandSelectionBehaviorType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .TSP.Reference archived_selection = 4;
    if (has_archived_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->archived_selection());
    }

    // optional .TSP.Reference archived_new_selection = 5;
    if (has_archived_new_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->archived_new_selection());
    }

    // optional .TSP.Reference old_model_for_selection = 6;
    if (has_old_model_for_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_model_for_selection());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSelectionBehaviorArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSelectionBehaviorArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSelectionBehaviorArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSelectionBehaviorArchive::MergeFrom(const CommandSelectionBehaviorArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model_for_selection()) {
      mutable_model_for_selection()->::TSP::Reference::MergeFrom(from.model_for_selection());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_archived_selection()) {
      mutable_archived_selection()->::TSP::Reference::MergeFrom(from.archived_selection());
    }
    if (from.has_archived_new_selection()) {
      mutable_archived_new_selection()->::TSP::Reference::MergeFrom(from.archived_new_selection());
    }
    if (from.has_old_model_for_selection()) {
      mutable_old_model_for_selection()->::TSP::Reference::MergeFrom(from.old_model_for_selection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSelectionBehaviorArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSelectionBehaviorArchive::CopyFrom(const CommandSelectionBehaviorArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSelectionBehaviorArchive::IsInitialized() const {

  if (has_model_for_selection()) {
    if (!this->model_for_selection().IsInitialized()) return false;
  }
  if (has_archived_selection()) {
    if (!this->archived_selection().IsInitialized()) return false;
  }
  if (has_archived_new_selection()) {
    if (!this->archived_new_selection().IsInitialized()) return false;
  }
  if (has_old_model_for_selection()) {
    if (!this->old_model_for_selection().IsInitialized()) return false;
  }
  return true;
}

void CommandSelectionBehaviorArchive::Swap(CommandSelectionBehaviorArchive* other) {
  if (other != this) {
    std::swap(model_for_selection_, other->model_for_selection_);
    std::swap(type_, other->type_);
    std::swap(archived_selection_, other->archived_selection_);
    std::swap(archived_new_selection_, other->archived_new_selection_);
    std::swap(old_model_for_selection_, other->old_model_for_selection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSelectionBehaviorArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSelectionBehaviorArchive_descriptor_;
  metadata.reflection = CommandSelectionBehaviorArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImageReplaceCommandArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

ImageReplaceCommandArchive::ImageReplaceCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImageReplaceCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

ImageReplaceCommandArchive::ImageReplaceCommandArchive(const ImageReplaceCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImageReplaceCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageReplaceCommandArchive::~ImageReplaceCommandArchive() {
  SharedDtor();
}

void ImageReplaceCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void ImageReplaceCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageReplaceCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageReplaceCommandArchive_descriptor_;
}

const ImageReplaceCommandArchive& ImageReplaceCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

ImageReplaceCommandArchive* ImageReplaceCommandArchive::default_instance_ = NULL;

ImageReplaceCommandArchive* ImageReplaceCommandArchive::New() const {
  return new ImageReplaceCommandArchive;
}

void ImageReplaceCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageReplaceCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImageReplaceCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImageReplaceCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImageReplaceCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageReplaceCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageReplaceCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageReplaceCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageReplaceCommandArchive::MergeFrom(const ImageReplaceCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageReplaceCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageReplaceCommandArchive::CopyFrom(const ImageReplaceCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageReplaceCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void ImageReplaceCommandArchive::Swap(ImageReplaceCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageReplaceCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageReplaceCommandArchive_descriptor_;
  metadata.reflection = ImageReplaceCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DrawableLockCommandArchive::kSuperFieldNumber;
const int DrawableLockCommandArchive::kInfoFieldNumber;
const int DrawableLockCommandArchive::kLockFieldNumber;
#endif  // !_MSC_VER

DrawableLockCommandArchive::DrawableLockCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DrawableLockCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  info_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

DrawableLockCommandArchive::DrawableLockCommandArchive(const DrawableLockCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DrawableLockCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  info_ = NULL;
  lock_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DrawableLockCommandArchive::~DrawableLockCommandArchive() {
  SharedDtor();
}

void DrawableLockCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete info_;
  }
}

void DrawableLockCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DrawableLockCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrawableLockCommandArchive_descriptor_;
}

const DrawableLockCommandArchive& DrawableLockCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

DrawableLockCommandArchive* DrawableLockCommandArchive::default_instance_ = NULL;

DrawableLockCommandArchive* DrawableLockCommandArchive::New() const {
  return new DrawableLockCommandArchive;
}

void DrawableLockCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::TSP::Reference::Clear();
    }
    lock_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DrawableLockCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .TSP.Reference info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lock;
        break;
      }

      // optional bool lock = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lock_)));
          set_has_lock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DrawableLockCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  // optional bool lock = 3;
  if (has_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->lock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DrawableLockCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  // optional bool lock = 3;
  if (has_lock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->lock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DrawableLockCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional bool lock = 3;
    if (has_lock()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrawableLockCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DrawableLockCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DrawableLockCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DrawableLockCommandArchive::MergeFrom(const DrawableLockCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_info()) {
      mutable_info()->::TSP::Reference::MergeFrom(from.info());
    }
    if (from.has_lock()) {
      set_lock(from.lock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DrawableLockCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawableLockCommandArchive::CopyFrom(const DrawableLockCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableLockCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void DrawableLockCommandArchive::Swap(DrawableLockCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(info_, other->info_);
    std::swap(lock_, other->lock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DrawableLockCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DrawableLockCommandArchive_descriptor_;
  metadata.reflection = DrawableLockCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DrawableInfoCommentCommandArchive::kSuperFieldNumber;
const int DrawableInfoCommentCommandArchive::kInfoFieldNumber;
const int DrawableInfoCommentCommandArchive::kOldCommentFieldNumber;
const int DrawableInfoCommentCommandArchive::kNewCommentFieldNumber;
#endif  // !_MSC_VER

DrawableInfoCommentCommandArchive::DrawableInfoCommentCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DrawableInfoCommentCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  info_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  old_comment_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  new_comment_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

DrawableInfoCommentCommandArchive::DrawableInfoCommentCommandArchive(const DrawableInfoCommentCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DrawableInfoCommentCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  info_ = NULL;
  old_comment_ = NULL;
  new_comment_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DrawableInfoCommentCommandArchive::~DrawableInfoCommentCommandArchive() {
  SharedDtor();
}

void DrawableInfoCommentCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete info_;
    delete old_comment_;
    delete new_comment_;
  }
}

void DrawableInfoCommentCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DrawableInfoCommentCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrawableInfoCommentCommandArchive_descriptor_;
}

const DrawableInfoCommentCommandArchive& DrawableInfoCommentCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

DrawableInfoCommentCommandArchive* DrawableInfoCommentCommandArchive::default_instance_ = NULL;

DrawableInfoCommentCommandArchive* DrawableInfoCommentCommandArchive::New() const {
  return new DrawableInfoCommentCommandArchive;
}

void DrawableInfoCommentCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::TSP::Reference::Clear();
    }
    if (has_old_comment()) {
      if (old_comment_ != NULL) old_comment_->::TSP::Reference::Clear();
    }
    if (has_new_comment()) {
      if (new_comment_ != NULL) new_comment_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DrawableInfoCommentCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .TSP.Reference info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_old_comment;
        break;
      }

      // optional .TSP.Reference old_comment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_comment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_new_comment;
        break;
      }

      // optional .TSP.Reference new_comment = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_comment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DrawableInfoCommentCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  // optional .TSP.Reference old_comment = 3;
  if (has_old_comment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->old_comment(), output);
  }

  // optional .TSP.Reference new_comment = 4;
  if (has_new_comment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->new_comment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DrawableInfoCommentCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  // optional .TSP.Reference old_comment = 3;
  if (has_old_comment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->old_comment(), target);
  }

  // optional .TSP.Reference new_comment = 4;
  if (has_new_comment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->new_comment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DrawableInfoCommentCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .TSP.Reference old_comment = 3;
    if (has_old_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_comment());
    }

    // optional .TSP.Reference new_comment = 4;
    if (has_new_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_comment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrawableInfoCommentCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DrawableInfoCommentCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DrawableInfoCommentCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DrawableInfoCommentCommandArchive::MergeFrom(const DrawableInfoCommentCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_info()) {
      mutable_info()->::TSP::Reference::MergeFrom(from.info());
    }
    if (from.has_old_comment()) {
      mutable_old_comment()->::TSP::Reference::MergeFrom(from.old_comment());
    }
    if (from.has_new_comment()) {
      mutable_new_comment()->::TSP::Reference::MergeFrom(from.new_comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DrawableInfoCommentCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawableInfoCommentCommandArchive::CopyFrom(const DrawableInfoCommentCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableInfoCommentCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  if (has_old_comment()) {
    if (!this->old_comment().IsInitialized()) return false;
  }
  if (has_new_comment()) {
    if (!this->new_comment().IsInitialized()) return false;
  }
  return true;
}

void DrawableInfoCommentCommandArchive::Swap(DrawableInfoCommentCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(info_, other->info_);
    std::swap(old_comment_, other->old_comment_);
    std::swap(new_comment_, other->new_comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DrawableInfoCommentCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DrawableInfoCommentCommandArchive_descriptor_;
  metadata.reflection = DrawableInfoCommentCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommentStorageApplyCommandArchive::kSuperFieldNumber;
const int CommentStorageApplyCommandArchive::kCommentStorageFieldNumber;
const int CommentStorageApplyCommandArchive::kCommentStringFieldNumber;
const int CommentStorageApplyCommandArchive::kOldCommentStringFieldNumber;
#endif  // !_MSC_VER

CommentStorageApplyCommandArchive::CommentStorageApplyCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommentStorageApplyCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  comment_storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommentStorageApplyCommandArchive::CommentStorageApplyCommandArchive(const CommentStorageApplyCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommentStorageApplyCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  comment_storage_ = NULL;
  comment_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  old_comment_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommentStorageApplyCommandArchive::~CommentStorageApplyCommandArchive() {
  SharedDtor();
}

void CommentStorageApplyCommandArchive::SharedDtor() {
  if (comment_string_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_string_;
  }
  if (old_comment_string_ != &::google::protobuf::internal::kEmptyString) {
    delete old_comment_string_;
  }
  if (this != default_instance_) {
    delete super_;
    delete comment_storage_;
  }
}

void CommentStorageApplyCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommentStorageApplyCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommentStorageApplyCommandArchive_descriptor_;
}

const CommentStorageApplyCommandArchive& CommentStorageApplyCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

CommentStorageApplyCommandArchive* CommentStorageApplyCommandArchive::default_instance_ = NULL;

CommentStorageApplyCommandArchive* CommentStorageApplyCommandArchive::New() const {
  return new CommentStorageApplyCommandArchive;
}

void CommentStorageApplyCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_comment_storage()) {
      if (comment_storage_ != NULL) comment_storage_->::TSP::Reference::Clear();
    }
    if (has_comment_string()) {
      if (comment_string_ != &::google::protobuf::internal::kEmptyString) {
        comment_string_->clear();
      }
    }
    if (has_old_comment_string()) {
      if (old_comment_string_ != &::google::protobuf::internal::kEmptyString) {
        old_comment_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommentStorageApplyCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_comment_storage;
        break;
      }

      // required .TSP.Reference comment_storage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comment_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_comment_string;
        break;
      }

      // required string comment_string = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment_string().data(), this->comment_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_old_comment_string;
        break;
      }

      // required string old_comment_string = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_comment_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_comment_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->old_comment_string().data(), this->old_comment_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommentStorageApplyCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference comment_storage = 2;
  if (has_comment_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->comment_storage(), output);
  }

  // required string comment_string = 3;
  if (has_comment_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment_string().data(), this->comment_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->comment_string(), output);
  }

  // required string old_comment_string = 4;
  if (has_old_comment_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_comment_string().data(), this->old_comment_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->old_comment_string(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommentStorageApplyCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference comment_storage = 2;
  if (has_comment_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->comment_storage(), target);
  }

  // required string comment_string = 3;
  if (has_comment_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment_string().data(), this->comment_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment_string(), target);
  }

  // required string old_comment_string = 4;
  if (has_old_comment_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_comment_string().data(), this->old_comment_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->old_comment_string(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommentStorageApplyCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference comment_storage = 2;
    if (has_comment_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->comment_storage());
    }

    // required string comment_string = 3;
    if (has_comment_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment_string());
    }

    // required string old_comment_string = 4;
    if (has_old_comment_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->old_comment_string());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommentStorageApplyCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommentStorageApplyCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommentStorageApplyCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommentStorageApplyCommandArchive::MergeFrom(const CommentStorageApplyCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_comment_storage()) {
      mutable_comment_storage()->::TSP::Reference::MergeFrom(from.comment_storage());
    }
    if (from.has_comment_string()) {
      set_comment_string(from.comment_string());
    }
    if (from.has_old_comment_string()) {
      set_old_comment_string(from.old_comment_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommentStorageApplyCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommentStorageApplyCommandArchive::CopyFrom(const CommentStorageApplyCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommentStorageApplyCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_comment_storage()) {
    if (!this->comment_storage().IsInitialized()) return false;
  }
  return true;
}

void CommentStorageApplyCommandArchive::Swap(CommentStorageApplyCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(comment_storage_, other->comment_storage_);
    std::swap(comment_string_, other->comment_string_);
    std::swap(old_comment_string_, other->old_comment_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommentStorageApplyCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommentStorageApplyCommandArchive_descriptor_;
  metadata.reflection = CommentStorageApplyCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GuideCommandArchive_GuideCommandMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuideCommandArchive_GuideCommandMode_descriptor_;
}
bool GuideCommandArchive_GuideCommandMode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GuideCommandArchive_GuideCommandMode GuideCommandArchive::Add;
const GuideCommandArchive_GuideCommandMode GuideCommandArchive::Replace;
const GuideCommandArchive_GuideCommandMode GuideCommandArchive::Delete;
const GuideCommandArchive_GuideCommandMode GuideCommandArchive::GuideCommandMode_MIN;
const GuideCommandArchive_GuideCommandMode GuideCommandArchive::GuideCommandMode_MAX;
const int GuideCommandArchive::GuideCommandMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GuideCommandArchive::kSuperFieldNumber;
const int GuideCommandArchive::kStorageFieldNumber;
const int GuideCommandArchive::kOldGuideFieldNumber;
const int GuideCommandArchive::kNewGuideFieldNumber;
const int GuideCommandArchive::kModeFieldNumber;
const int GuideCommandArchive::kOldStorageFieldNumber;
#endif  // !_MSC_VER

GuideCommandArchive::GuideCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuideCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  old_guide_ = const_cast< ::TSD::UserDefinedGuideArchive*>(&::TSD::UserDefinedGuideArchive::default_instance());
  new_guide_ = const_cast< ::TSD::UserDefinedGuideArchive*>(&::TSD::UserDefinedGuideArchive::default_instance());
  old_storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

GuideCommandArchive::GuideCommandArchive(const GuideCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuideCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  storage_ = NULL;
  old_guide_ = NULL;
  new_guide_ = NULL;
  mode_ = 1;
  old_storage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuideCommandArchive::~GuideCommandArchive() {
  SharedDtor();
}

void GuideCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete storage_;
    delete old_guide_;
    delete new_guide_;
    delete old_storage_;
  }
}

void GuideCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuideCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuideCommandArchive_descriptor_;
}

const GuideCommandArchive& GuideCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

GuideCommandArchive* GuideCommandArchive::default_instance_ = NULL;

GuideCommandArchive* GuideCommandArchive::New() const {
  return new GuideCommandArchive;
}

void GuideCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_storage()) {
      if (storage_ != NULL) storage_->::TSP::Reference::Clear();
    }
    if (has_old_guide()) {
      if (old_guide_ != NULL) old_guide_->::TSD::UserDefinedGuideArchive::Clear();
    }
    if (has_new_guide()) {
      if (new_guide_ != NULL) new_guide_->::TSD::UserDefinedGuideArchive::Clear();
    }
    mode_ = 1;
    if (has_old_storage()) {
      if (old_storage_ != NULL) old_storage_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuideCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storage;
        break;
      }

      // optional .TSP.Reference storage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_old_guide;
        break;
      }

      // optional .TSD.UserDefinedGuideArchive old_guide = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_guide:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_guide()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_new_guide;
        break;
      }

      // optional .TSD.UserDefinedGuideArchive new_guide = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_guide:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_guide()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mode;
        break;
      }

      // optional .TSD.GuideCommandArchive.GuideCommandMode mode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSD::GuideCommandArchive_GuideCommandMode_IsValid(value)) {
            set_mode(static_cast< ::TSD::GuideCommandArchive_GuideCommandMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_old_storage;
        break;
      }

      // optional .TSP.Reference old_storage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuideCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->storage(), output);
  }

  // optional .TSD.UserDefinedGuideArchive old_guide = 3;
  if (has_old_guide()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->old_guide(), output);
  }

  // optional .TSD.UserDefinedGuideArchive new_guide = 4;
  if (has_new_guide()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->new_guide(), output);
  }

  // optional .TSD.GuideCommandArchive.GuideCommandMode mode = 5;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->mode(), output);
  }

  // optional .TSP.Reference old_storage = 6;
  if (has_old_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->old_storage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuideCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference storage = 2;
  if (has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->storage(), target);
  }

  // optional .TSD.UserDefinedGuideArchive old_guide = 3;
  if (has_old_guide()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->old_guide(), target);
  }

  // optional .TSD.UserDefinedGuideArchive new_guide = 4;
  if (has_new_guide()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->new_guide(), target);
  }

  // optional .TSD.GuideCommandArchive.GuideCommandMode mode = 5;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->mode(), target);
  }

  // optional .TSP.Reference old_storage = 6;
  if (has_old_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->old_storage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuideCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference storage = 2;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage());
    }

    // optional .TSD.UserDefinedGuideArchive old_guide = 3;
    if (has_old_guide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_guide());
    }

    // optional .TSD.UserDefinedGuideArchive new_guide = 4;
    if (has_new_guide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_guide());
    }

    // optional .TSD.GuideCommandArchive.GuideCommandMode mode = 5;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional .TSP.Reference old_storage = 6;
    if (has_old_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_storage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuideCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuideCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuideCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuideCommandArchive::MergeFrom(const GuideCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_storage()) {
      mutable_storage()->::TSP::Reference::MergeFrom(from.storage());
    }
    if (from.has_old_guide()) {
      mutable_old_guide()->::TSD::UserDefinedGuideArchive::MergeFrom(from.old_guide());
    }
    if (from.has_new_guide()) {
      mutable_new_guide()->::TSD::UserDefinedGuideArchive::MergeFrom(from.new_guide());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_old_storage()) {
      mutable_old_storage()->::TSP::Reference::MergeFrom(from.old_storage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuideCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuideCommandArchive::CopyFrom(const GuideCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_storage()) {
    if (!this->storage().IsInitialized()) return false;
  }
  if (has_old_storage()) {
    if (!this->old_storage().IsInitialized()) return false;
  }
  return true;
}

void GuideCommandArchive::Swap(GuideCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(storage_, other->storage_);
    std::swap(old_guide_, other->old_guide_);
    std::swap(new_guide_, other->new_guide_);
    std::swap(mode_, other->mode_);
    std::swap(old_storage_, other->old_storage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuideCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuideCommandArchive_descriptor_;
  metadata.reflection = GuideCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DrawableAspectRatioLockedCommandArchive::kSuperFieldNumber;
const int DrawableAspectRatioLockedCommandArchive::kInfoFieldNumber;
const int DrawableAspectRatioLockedCommandArchive::kAspectRatioLockedFieldNumber;
#endif  // !_MSC_VER

DrawableAspectRatioLockedCommandArchive::DrawableAspectRatioLockedCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DrawableAspectRatioLockedCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  info_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

DrawableAspectRatioLockedCommandArchive::DrawableAspectRatioLockedCommandArchive(const DrawableAspectRatioLockedCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DrawableAspectRatioLockedCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  info_ = NULL;
  aspect_ratio_locked_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DrawableAspectRatioLockedCommandArchive::~DrawableAspectRatioLockedCommandArchive() {
  SharedDtor();
}

void DrawableAspectRatioLockedCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete info_;
  }
}

void DrawableAspectRatioLockedCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DrawableAspectRatioLockedCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrawableAspectRatioLockedCommandArchive_descriptor_;
}

const DrawableAspectRatioLockedCommandArchive& DrawableAspectRatioLockedCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

DrawableAspectRatioLockedCommandArchive* DrawableAspectRatioLockedCommandArchive::default_instance_ = NULL;

DrawableAspectRatioLockedCommandArchive* DrawableAspectRatioLockedCommandArchive::New() const {
  return new DrawableAspectRatioLockedCommandArchive;
}

void DrawableAspectRatioLockedCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::TSP::Reference::Clear();
    }
    aspect_ratio_locked_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DrawableAspectRatioLockedCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .TSP.Reference info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_aspect_ratio_locked;
        break;
      }

      // optional bool aspect_ratio_locked = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aspect_ratio_locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aspect_ratio_locked_)));
          set_has_aspect_ratio_locked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DrawableAspectRatioLockedCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  // optional bool aspect_ratio_locked = 3;
  if (has_aspect_ratio_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->aspect_ratio_locked(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DrawableAspectRatioLockedCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  // optional bool aspect_ratio_locked = 3;
  if (has_aspect_ratio_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->aspect_ratio_locked(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DrawableAspectRatioLockedCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional bool aspect_ratio_locked = 3;
    if (has_aspect_ratio_locked()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrawableAspectRatioLockedCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DrawableAspectRatioLockedCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DrawableAspectRatioLockedCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DrawableAspectRatioLockedCommandArchive::MergeFrom(const DrawableAspectRatioLockedCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_info()) {
      mutable_info()->::TSP::Reference::MergeFrom(from.info());
    }
    if (from.has_aspect_ratio_locked()) {
      set_aspect_ratio_locked(from.aspect_ratio_locked());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DrawableAspectRatioLockedCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawableAspectRatioLockedCommandArchive::CopyFrom(const DrawableAspectRatioLockedCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableAspectRatioLockedCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void DrawableAspectRatioLockedCommandArchive::Swap(DrawableAspectRatioLockedCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(info_, other->info_);
    std::swap(aspect_ratio_locked_, other->aspect_ratio_locked_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DrawableAspectRatioLockedCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DrawableAspectRatioLockedCommandArchive_descriptor_;
  metadata.reflection = DrawableAspectRatioLockedCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DrawableAccessibilityDescriptionCommandArchive::kSuperFieldNumber;
const int DrawableAccessibilityDescriptionCommandArchive::kInfoFieldNumber;
const int DrawableAccessibilityDescriptionCommandArchive::kAccessibilityDescriptionFieldNumber;
#endif  // !_MSC_VER

DrawableAccessibilityDescriptionCommandArchive::DrawableAccessibilityDescriptionCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DrawableAccessibilityDescriptionCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  info_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

DrawableAccessibilityDescriptionCommandArchive::DrawableAccessibilityDescriptionCommandArchive(const DrawableAccessibilityDescriptionCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DrawableAccessibilityDescriptionCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  info_ = NULL;
  accessibility_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DrawableAccessibilityDescriptionCommandArchive::~DrawableAccessibilityDescriptionCommandArchive() {
  SharedDtor();
}

void DrawableAccessibilityDescriptionCommandArchive::SharedDtor() {
  if (accessibility_description_ != &::google::protobuf::internal::kEmptyString) {
    delete accessibility_description_;
  }
  if (this != default_instance_) {
    delete super_;
    delete info_;
  }
}

void DrawableAccessibilityDescriptionCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DrawableAccessibilityDescriptionCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrawableAccessibilityDescriptionCommandArchive_descriptor_;
}

const DrawableAccessibilityDescriptionCommandArchive& DrawableAccessibilityDescriptionCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

DrawableAccessibilityDescriptionCommandArchive* DrawableAccessibilityDescriptionCommandArchive::default_instance_ = NULL;

DrawableAccessibilityDescriptionCommandArchive* DrawableAccessibilityDescriptionCommandArchive::New() const {
  return new DrawableAccessibilityDescriptionCommandArchive;
}

void DrawableAccessibilityDescriptionCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::TSP::Reference::Clear();
    }
    if (has_accessibility_description()) {
      if (accessibility_description_ != &::google::protobuf::internal::kEmptyString) {
        accessibility_description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DrawableAccessibilityDescriptionCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .TSP.Reference info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_accessibility_description;
        break;
      }

      // optional string accessibility_description = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accessibility_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accessibility_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accessibility_description().data(), this->accessibility_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DrawableAccessibilityDescriptionCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  // optional string accessibility_description = 3;
  if (has_accessibility_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accessibility_description().data(), this->accessibility_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->accessibility_description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DrawableAccessibilityDescriptionCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  // optional string accessibility_description = 3;
  if (has_accessibility_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accessibility_description().data(), this->accessibility_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->accessibility_description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DrawableAccessibilityDescriptionCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional string accessibility_description = 3;
    if (has_accessibility_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accessibility_description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrawableAccessibilityDescriptionCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DrawableAccessibilityDescriptionCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DrawableAccessibilityDescriptionCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DrawableAccessibilityDescriptionCommandArchive::MergeFrom(const DrawableAccessibilityDescriptionCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_info()) {
      mutable_info()->::TSP::Reference::MergeFrom(from.info());
    }
    if (from.has_accessibility_description()) {
      set_accessibility_description(from.accessibility_description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DrawableAccessibilityDescriptionCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawableAccessibilityDescriptionCommandArchive::CopyFrom(const DrawableAccessibilityDescriptionCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableAccessibilityDescriptionCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void DrawableAccessibilityDescriptionCommandArchive::Swap(DrawableAccessibilityDescriptionCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(info_, other->info_);
    std::swap(accessibility_description_, other->accessibility_description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DrawableAccessibilityDescriptionCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DrawableAccessibilityDescriptionCommandArchive_descriptor_;
  metadata.reflection = DrawableAccessibilityDescriptionCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PasteStyleCommandArchive::kSuperFieldNumber;
const int PasteStyleCommandArchive::kDestInfoFieldNumber;
const int PasteStyleCommandArchive::kShapeStyleFieldNumber;
#endif  // !_MSC_VER

PasteStyleCommandArchive::PasteStyleCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PasteStyleCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  dest_info_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  shape_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

PasteStyleCommandArchive::PasteStyleCommandArchive(const PasteStyleCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PasteStyleCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  dest_info_ = NULL;
  shape_style_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PasteStyleCommandArchive::~PasteStyleCommandArchive() {
  SharedDtor();
}

void PasteStyleCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete dest_info_;
    delete shape_style_;
  }
}

void PasteStyleCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PasteStyleCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PasteStyleCommandArchive_descriptor_;
}

const PasteStyleCommandArchive& PasteStyleCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDCommandArchives_2eproto();
  return *default_instance_;
}

PasteStyleCommandArchive* PasteStyleCommandArchive::default_instance_ = NULL;

PasteStyleCommandArchive* PasteStyleCommandArchive::New() const {
  return new PasteStyleCommandArchive;
}

void PasteStyleCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_dest_info()) {
      if (dest_info_ != NULL) dest_info_->::TSP::Reference::Clear();
    }
    if (has_shape_style()) {
      if (shape_style_ != NULL) shape_style_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PasteStyleCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dest_info;
        break;
      }

      // required .TSP.Reference dest_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dest_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dest_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_shape_style;
        break;
      }

      // optional .TSP.Reference shape_style = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shape_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PasteStyleCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference dest_info = 2;
  if (has_dest_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dest_info(), output);
  }

  // optional .TSP.Reference shape_style = 3;
  if (has_shape_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->shape_style(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PasteStyleCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference dest_info = 2;
  if (has_dest_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dest_info(), target);
  }

  // optional .TSP.Reference shape_style = 3;
  if (has_shape_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->shape_style(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PasteStyleCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference dest_info = 2;
    if (has_dest_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dest_info());
    }

    // optional .TSP.Reference shape_style = 3;
    if (has_shape_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shape_style());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PasteStyleCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PasteStyleCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PasteStyleCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PasteStyleCommandArchive::MergeFrom(const PasteStyleCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_dest_info()) {
      mutable_dest_info()->::TSP::Reference::MergeFrom(from.dest_info());
    }
    if (from.has_shape_style()) {
      mutable_shape_style()->::TSP::Reference::MergeFrom(from.shape_style());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PasteStyleCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PasteStyleCommandArchive::CopyFrom(const PasteStyleCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasteStyleCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_dest_info()) {
    if (!this->dest_info().IsInitialized()) return false;
  }
  if (has_shape_style()) {
    if (!this->shape_style().IsInitialized()) return false;
  }
  return true;
}

void PasteStyleCommandArchive::Swap(PasteStyleCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(dest_info_, other->dest_info_);
    std::swap(shape_style_, other->shape_style_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PasteStyleCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PasteStyleCommandArchive_descriptor_;
  metadata.reflection = PasteStyleCommandArchive_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSD

// @@protoc_insertion_point(global_scope)
