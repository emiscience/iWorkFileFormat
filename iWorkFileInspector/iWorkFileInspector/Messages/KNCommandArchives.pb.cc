// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KNCommandArchives.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "KNCommandArchives.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KN {

namespace {

const ::google::protobuf::Descriptor* UIStateCommandGroupArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UIStateCommandGroupArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSlideInsertDrawablesArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSlideInsertDrawablesArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSlideSetPlaceholdersForTagsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSlideSetPlaceholdersForTagsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSlideRemoveDrawableArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSlideRemoveDrawableArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSlideMoveDrawableZOrderArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSlideMoveDrawableZOrderArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSlidePasteDrawablesArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSlidePasteDrawablesArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSlideNodeSetPropertyArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSlideNodeSetPropertyArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSlideNodeSetPropertyArchive_PropertyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSlideNodeSetPropertyArchive_PropertyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSlideSetValueArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSlideSetValueArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSlideSetValueArchive_PropertyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSlideSetValueArchive_PropertyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSlideSetStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSlideSetStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandShowMarkOutOfSyncRecordingArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandShowMarkOutOfSyncRecordingArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandShowRemoveRecordingArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandShowRemoveRecordingArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandShowReplaceRecordingArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandShowReplaceRecordingArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandShowSetValueArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandShowSetValueArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandShowSetValueArchive_PropertyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandShowSetValueArchive_PropertyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandShowInsertSlideArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandShowInsertSlideArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CommandShowInsertSlideArchive_Kind_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CommandShowMoveSlideArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandShowMoveSlideArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandShowRemoveSlideArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandShowRemoveSlideArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandShowChangeThemeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandShowChangeThemeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandMoveMastersArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandMoveMastersArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandInsertMasterArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandInsertMasterArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandRemoveMasterArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandRemoveMasterArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandRenameMasterArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandRenameMasterArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSlideInsertBuildArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSlideInsertBuildArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSlideRemoveBuildArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSlideRemoveBuildArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSlideMoveBuildWithoutMovingChunksArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSlideMoveBuildWithoutMovingChunksArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSlideMoveBuildsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSlideMoveBuildsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSlideInsertBuildChunkArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSlideInsertBuildChunkArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSlideRemoveBuildChunkArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSlideRemoveBuildChunkArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSlideMoveBuildChunkArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSlideMoveBuildChunkArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSlideMoveBuildChunksArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSlideMoveBuildChunksArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandBuildSetValueArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandBuildSetValueArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandBuildChunkSetValueArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandBuildChunkSetValueArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandTransitionSetValueArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandTransitionSetValueArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandShowSetSlideNumberVisibilityArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandShowSetSlideNumberVisibilityArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandMasterRescaleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandMasterRescaleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandMasterSetThumbnailTextArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandMasterSetThumbnailTextArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandMasterSetBodyStylesArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandMasterSetBodyStylesArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandMasterSetSlideObjectsLayerWithMasterArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandMasterSetSlideObjectsLayerWithMasterArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSlideApplyThemeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSlideApplyThemeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandChangeMasterSlideArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandChangeMasterSlideArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSlidePrimitiveSetMasterArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSlidePrimitiveSetMasterArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSlideReapplyMasterArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSlideReapplyMasterArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandShowSetSoundtrack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandShowSetSoundtrack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSoundtrackSetValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSoundtrackSetValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSoundtrackSetValue_PropertyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSoundtrackSetValue_PropertyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSlideUpdateMasterDrawables_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSlideUpdateMasterDrawables_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlideCollectionCommandSelectionBehaviorArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlideCollectionCommandSelectionBehaviorArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SlideCollectionCommandSelectionBehaviorArchive_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ChartInfoGeometryCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartInfoGeometryCommandArchive_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_KNCommandArchives_2eproto() {
  protobuf_AddDesc_KNCommandArchives_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "KNCommandArchives.proto");
  GOOGLE_CHECK(file != NULL);
  UIStateCommandGroupArchive_descriptor_ = file->message_type(0);
  static const int UIStateCommandGroupArchive_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateCommandGroupArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateCommandGroupArchive, uistate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateCommandGroupArchive, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateCommandGroupArchive, slidenodestoedit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateCommandGroupArchive, masterslidenodestoapply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateCommandGroupArchive, thumbnailsizes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateCommandGroupArchive, selectedslidenodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateCommandGroupArchive, restoreselectedslidenodes_),
  };
  UIStateCommandGroupArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UIStateCommandGroupArchive_descriptor_,
      UIStateCommandGroupArchive::default_instance_,
      UIStateCommandGroupArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateCommandGroupArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateCommandGroupArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UIStateCommandGroupArchive));
  CommandSlideInsertDrawablesArchive_descriptor_ = file->message_type(1);
  static const int CommandSlideInsertDrawablesArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideInsertDrawablesArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideInsertDrawablesArchive, slidenode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideInsertDrawablesArchive, drawables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideInsertDrawablesArchive, fordrag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideInsertDrawablesArchive, atindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideInsertDrawablesArchive, use_object_placeholder_geometry_),
  };
  CommandSlideInsertDrawablesArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSlideInsertDrawablesArchive_descriptor_,
      CommandSlideInsertDrawablesArchive::default_instance_,
      CommandSlideInsertDrawablesArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideInsertDrawablesArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideInsertDrawablesArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSlideInsertDrawablesArchive));
  CommandSlideSetPlaceholdersForTagsArchive_descriptor_ = file->message_type(2);
  static const int CommandSlideSetPlaceholdersForTagsArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideSetPlaceholdersForTagsArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideSetPlaceholdersForTagsArchive, slide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideSetPlaceholdersForTagsArchive, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideSetPlaceholdersForTagsArchive, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideSetPlaceholdersForTagsArchive, old_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideSetPlaceholdersForTagsArchive, old_tags_),
  };
  CommandSlideSetPlaceholdersForTagsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSlideSetPlaceholdersForTagsArchive_descriptor_,
      CommandSlideSetPlaceholdersForTagsArchive::default_instance_,
      CommandSlideSetPlaceholdersForTagsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideSetPlaceholdersForTagsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideSetPlaceholdersForTagsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSlideSetPlaceholdersForTagsArchive));
  CommandSlideRemoveDrawableArchive_descriptor_ = file->message_type(3);
  static const int CommandSlideRemoveDrawableArchive_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideRemoveDrawableArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideRemoveDrawableArchive, slidenode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideRemoveDrawableArchive, sorteddrawables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideRemoveDrawableArchive, drawableindices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideRemoveDrawableArchive, placeholdertags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideRemoveDrawableArchive, info_using_object_placeholder_geometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideRemoveDrawableArchive, did_match_object_placeholder_geometry_),
  };
  CommandSlideRemoveDrawableArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSlideRemoveDrawableArchive_descriptor_,
      CommandSlideRemoveDrawableArchive::default_instance_,
      CommandSlideRemoveDrawableArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideRemoveDrawableArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideRemoveDrawableArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSlideRemoveDrawableArchive));
  CommandSlideMoveDrawableZOrderArchive_descriptor_ = file->message_type(4);
  static const int CommandSlideMoveDrawableZOrderArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideMoveDrawableZOrderArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideMoveDrawableZOrderArchive, slidenode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideMoveDrawableZOrderArchive, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideMoveDrawableZOrderArchive, old_ordered_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideMoveDrawableZOrderArchive, indexes_),
  };
  CommandSlideMoveDrawableZOrderArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSlideMoveDrawableZOrderArchive_descriptor_,
      CommandSlideMoveDrawableZOrderArchive::default_instance_,
      CommandSlideMoveDrawableZOrderArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideMoveDrawableZOrderArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideMoveDrawableZOrderArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSlideMoveDrawableZOrderArchive));
  CommandSlidePasteDrawablesArchive_descriptor_ = file->message_type(5);
  static const int CommandSlidePasteDrawablesArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlidePasteDrawablesArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlidePasteDrawablesArchive, commands_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlidePasteDrawablesArchive, slide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlidePasteDrawablesArchive, drawables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlidePasteDrawablesArchive, has_builds_),
  };
  CommandSlidePasteDrawablesArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSlidePasteDrawablesArchive_descriptor_,
      CommandSlidePasteDrawablesArchive::default_instance_,
      CommandSlidePasteDrawablesArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlidePasteDrawablesArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlidePasteDrawablesArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSlidePasteDrawablesArchive));
  CommandSlideNodeSetPropertyArchive_descriptor_ = file->message_type(6);
  static const int CommandSlideNodeSetPropertyArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideNodeSetPropertyArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideNodeSetPropertyArchive, slidenode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideNodeSetPropertyArchive, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideNodeSetPropertyArchive, oldvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideNodeSetPropertyArchive, newvalue_),
  };
  CommandSlideNodeSetPropertyArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSlideNodeSetPropertyArchive_descriptor_,
      CommandSlideNodeSetPropertyArchive::default_instance_,
      CommandSlideNodeSetPropertyArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideNodeSetPropertyArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideNodeSetPropertyArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSlideNodeSetPropertyArchive));
  CommandSlideNodeSetPropertyArchive_PropertyValue_descriptor_ = CommandSlideNodeSetPropertyArchive_descriptor_->nested_type(0);
  static const int CommandSlideNodeSetPropertyArchive_PropertyValue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideNodeSetPropertyArchive_PropertyValue, boolvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideNodeSetPropertyArchive_PropertyValue, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideNodeSetPropertyArchive_PropertyValue, database_image_),
  };
  CommandSlideNodeSetPropertyArchive_PropertyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSlideNodeSetPropertyArchive_PropertyValue_descriptor_,
      CommandSlideNodeSetPropertyArchive_PropertyValue::default_instance_,
      CommandSlideNodeSetPropertyArchive_PropertyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideNodeSetPropertyArchive_PropertyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideNodeSetPropertyArchive_PropertyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSlideNodeSetPropertyArchive_PropertyValue));
  CommandSlideSetValueArchive_descriptor_ = file->message_type(7);
  static const int CommandSlideSetValueArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideSetValueArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideSetValueArchive, slide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideSetValueArchive, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideSetValueArchive, oldvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideSetValueArchive, newvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideSetValueArchive, oldslidestyle_),
  };
  CommandSlideSetValueArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSlideSetValueArchive_descriptor_,
      CommandSlideSetValueArchive::default_instance_,
      CommandSlideSetValueArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideSetValueArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideSetValueArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSlideSetValueArchive));
  CommandSlideSetValueArchive_PropertyValue_descriptor_ = CommandSlideSetValueArchive_descriptor_->nested_type(0);
  static const int CommandSlideSetValueArchive_PropertyValue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideSetValueArchive_PropertyValue, boolvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideSetValueArchive_PropertyValue, objectvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideSetValueArchive_PropertyValue, fill_),
  };
  CommandSlideSetValueArchive_PropertyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSlideSetValueArchive_PropertyValue_descriptor_,
      CommandSlideSetValueArchive_PropertyValue::default_instance_,
      CommandSlideSetValueArchive_PropertyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideSetValueArchive_PropertyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideSetValueArchive_PropertyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSlideSetValueArchive_PropertyValue));
  CommandSlideSetStyleArchive_descriptor_ = file->message_type(8);
  static const int CommandSlideSetStyleArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideSetStyleArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideSetStyleArchive, slide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideSetStyleArchive, slide_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideSetStyleArchive, old_slide_style_),
  };
  CommandSlideSetStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSlideSetStyleArchive_descriptor_,
      CommandSlideSetStyleArchive::default_instance_,
      CommandSlideSetStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideSetStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideSetStyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSlideSetStyleArchive));
  CommandShowMarkOutOfSyncRecordingArchive_descriptor_ = file->message_type(9);
  static const int CommandShowMarkOutOfSyncRecordingArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowMarkOutOfSyncRecordingArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowMarkOutOfSyncRecordingArchive, show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowMarkOutOfSyncRecordingArchive, old_recording_),
  };
  CommandShowMarkOutOfSyncRecordingArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandShowMarkOutOfSyncRecordingArchive_descriptor_,
      CommandShowMarkOutOfSyncRecordingArchive::default_instance_,
      CommandShowMarkOutOfSyncRecordingArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowMarkOutOfSyncRecordingArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowMarkOutOfSyncRecordingArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandShowMarkOutOfSyncRecordingArchive));
  CommandShowRemoveRecordingArchive_descriptor_ = file->message_type(10);
  static const int CommandShowRemoveRecordingArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowRemoveRecordingArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowRemoveRecordingArchive, show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowRemoveRecordingArchive, old_recording_),
  };
  CommandShowRemoveRecordingArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandShowRemoveRecordingArchive_descriptor_,
      CommandShowRemoveRecordingArchive::default_instance_,
      CommandShowRemoveRecordingArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowRemoveRecordingArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowRemoveRecordingArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandShowRemoveRecordingArchive));
  CommandShowReplaceRecordingArchive_descriptor_ = file->message_type(11);
  static const int CommandShowReplaceRecordingArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowReplaceRecordingArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowReplaceRecordingArchive, show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowReplaceRecordingArchive, replacement_recording_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowReplaceRecordingArchive, replacement_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowReplaceRecordingArchive, old_recording_),
  };
  CommandShowReplaceRecordingArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandShowReplaceRecordingArchive_descriptor_,
      CommandShowReplaceRecordingArchive::default_instance_,
      CommandShowReplaceRecordingArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowReplaceRecordingArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowReplaceRecordingArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandShowReplaceRecordingArchive));
  CommandShowSetValueArchive_descriptor_ = file->message_type(12);
  static const int CommandShowSetValueArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowSetValueArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowSetValueArchive, show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowSetValueArchive, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowSetValueArchive, old_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowSetValueArchive, new_value_),
  };
  CommandShowSetValueArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandShowSetValueArchive_descriptor_,
      CommandShowSetValueArchive::default_instance_,
      CommandShowSetValueArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowSetValueArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowSetValueArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandShowSetValueArchive));
  CommandShowSetValueArchive_PropertyValue_descriptor_ = CommandShowSetValueArchive_descriptor_->nested_type(0);
  static const int CommandShowSetValueArchive_PropertyValue_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowSetValueArchive_PropertyValue, bool_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowSetValueArchive_PropertyValue, double_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowSetValueArchive_PropertyValue, show_mode_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowSetValueArchive_PropertyValue, size_value_),
  };
  CommandShowSetValueArchive_PropertyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandShowSetValueArchive_PropertyValue_descriptor_,
      CommandShowSetValueArchive_PropertyValue::default_instance_,
      CommandShowSetValueArchive_PropertyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowSetValueArchive_PropertyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowSetValueArchive_PropertyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandShowSetValueArchive_PropertyValue));
  CommandShowInsertSlideArchive_descriptor_ = file->message_type(13);
  static const int CommandShowInsertSlideArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowInsertSlideArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowInsertSlideArchive, show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowInsertSlideArchive, slidenode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowInsertSlideArchive, childindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowInsertSlideArchive, parentslidenode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowInsertSlideArchive, kind_),
  };
  CommandShowInsertSlideArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandShowInsertSlideArchive_descriptor_,
      CommandShowInsertSlideArchive::default_instance_,
      CommandShowInsertSlideArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowInsertSlideArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowInsertSlideArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandShowInsertSlideArchive));
  CommandShowInsertSlideArchive_Kind_descriptor_ = CommandShowInsertSlideArchive_descriptor_->enum_type(0);
  CommandShowMoveSlideArchive_descriptor_ = file->message_type(14);
  static const int CommandShowMoveSlideArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowMoveSlideArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowMoveSlideArchive, show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowMoveSlideArchive, slidenode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowMoveSlideArchive, parentslidenodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowMoveSlideArchive, childindices_),
  };
  CommandShowMoveSlideArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandShowMoveSlideArchive_descriptor_,
      CommandShowMoveSlideArchive::default_instance_,
      CommandShowMoveSlideArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowMoveSlideArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowMoveSlideArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandShowMoveSlideArchive));
  CommandShowRemoveSlideArchive_descriptor_ = file->message_type(15);
  static const int CommandShowRemoveSlideArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowRemoveSlideArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowRemoveSlideArchive, show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowRemoveSlideArchive, slidenode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowRemoveSlideArchive, parentslidenode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowRemoveSlideArchive, childindex_),
  };
  CommandShowRemoveSlideArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandShowRemoveSlideArchive_descriptor_,
      CommandShowRemoveSlideArchive::default_instance_,
      CommandShowRemoveSlideArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowRemoveSlideArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowRemoveSlideArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandShowRemoveSlideArchive));
  CommandShowChangeThemeArchive_descriptor_ = file->message_type(16);
  static const int CommandShowChangeThemeArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowChangeThemeArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowChangeThemeArchive, show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowChangeThemeArchive, theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowChangeThemeArchive, old_theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowChangeThemeArchive, template_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowChangeThemeArchive, old_template_identifier_),
  };
  CommandShowChangeThemeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandShowChangeThemeArchive_descriptor_,
      CommandShowChangeThemeArchive::default_instance_,
      CommandShowChangeThemeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowChangeThemeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowChangeThemeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandShowChangeThemeArchive));
  CommandMoveMastersArchive_descriptor_ = file->message_type(17);
  static const int CommandMoveMastersArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveMastersArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveMastersArchive, theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveMastersArchive, master_slides_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveMastersArchive, previous_indexes_keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveMastersArchive, previous_indexes_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveMastersArchive, final_master_arrangement_),
  };
  CommandMoveMastersArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandMoveMastersArchive_descriptor_,
      CommandMoveMastersArchive::default_instance_,
      CommandMoveMastersArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveMastersArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveMastersArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandMoveMastersArchive));
  CommandInsertMasterArchive_descriptor_ = file->message_type(18);
  static const int CommandInsertMasterArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertMasterArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertMasterArchive, theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertMasterArchive, master_slide_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertMasterArchive, insertion_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertMasterArchive, was_inserted_with_drop_),
  };
  CommandInsertMasterArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandInsertMasterArchive_descriptor_,
      CommandInsertMasterArchive::default_instance_,
      CommandInsertMasterArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertMasterArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertMasterArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandInsertMasterArchive));
  CommandRemoveMasterArchive_descriptor_ = file->message_type(19);
  static const int CommandRemoveMasterArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveMasterArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveMasterArchive, theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveMasterArchive, master_slide_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveMasterArchive, previous_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveMasterArchive, master_change_commands_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveMasterArchive, default_master_slide_node_was_replaced_),
  };
  CommandRemoveMasterArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandRemoveMasterArchive_descriptor_,
      CommandRemoveMasterArchive::default_instance_,
      CommandRemoveMasterArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveMasterArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveMasterArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandRemoveMasterArchive));
  CommandRenameMasterArchive_descriptor_ = file->message_type(20);
  static const int CommandRenameMasterArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRenameMasterArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRenameMasterArchive, master_slide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRenameMasterArchive, master_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRenameMasterArchive, old_master_name_),
  };
  CommandRenameMasterArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandRenameMasterArchive_descriptor_,
      CommandRenameMasterArchive::default_instance_,
      CommandRenameMasterArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRenameMasterArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRenameMasterArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandRenameMasterArchive));
  CommandSlideInsertBuildArchive_descriptor_ = file->message_type(21);
  static const int CommandSlideInsertBuildArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideInsertBuildArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideInsertBuildArchive, slidenode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideInsertBuildArchive, build_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideInsertBuildArchive, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideInsertBuildArchive, shouldcreatechunks_),
  };
  CommandSlideInsertBuildArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSlideInsertBuildArchive_descriptor_,
      CommandSlideInsertBuildArchive::default_instance_,
      CommandSlideInsertBuildArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideInsertBuildArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideInsertBuildArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSlideInsertBuildArchive));
  CommandSlideRemoveBuildArchive_descriptor_ = file->message_type(22);
  static const int CommandSlideRemoveBuildArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideRemoveBuildArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideRemoveBuildArchive, slidenode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideRemoveBuildArchive, build_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideRemoveBuildArchive, index_),
  };
  CommandSlideRemoveBuildArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSlideRemoveBuildArchive_descriptor_,
      CommandSlideRemoveBuildArchive::default_instance_,
      CommandSlideRemoveBuildArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideRemoveBuildArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideRemoveBuildArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSlideRemoveBuildArchive));
  CommandSlideMoveBuildWithoutMovingChunksArchive_descriptor_ = file->message_type(23);
  static const int CommandSlideMoveBuildWithoutMovingChunksArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideMoveBuildWithoutMovingChunksArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideMoveBuildWithoutMovingChunksArchive, slidenode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideMoveBuildWithoutMovingChunksArchive, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideMoveBuildWithoutMovingChunksArchive, oldindex_),
  };
  CommandSlideMoveBuildWithoutMovingChunksArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSlideMoveBuildWithoutMovingChunksArchive_descriptor_,
      CommandSlideMoveBuildWithoutMovingChunksArchive::default_instance_,
      CommandSlideMoveBuildWithoutMovingChunksArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideMoveBuildWithoutMovingChunksArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideMoveBuildWithoutMovingChunksArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSlideMoveBuildWithoutMovingChunksArchive));
  CommandSlideMoveBuildsArchive_descriptor_ = file->message_type(24);
  static const int CommandSlideMoveBuildsArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideMoveBuildsArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideMoveBuildsArchive, builds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideMoveBuildsArchive, toindex_),
  };
  CommandSlideMoveBuildsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSlideMoveBuildsArchive_descriptor_,
      CommandSlideMoveBuildsArchive::default_instance_,
      CommandSlideMoveBuildsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideMoveBuildsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideMoveBuildsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSlideMoveBuildsArchive));
  CommandSlideInsertBuildChunkArchive_descriptor_ = file->message_type(25);
  static const int CommandSlideInsertBuildChunkArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideInsertBuildChunkArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideInsertBuildChunkArchive, slide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideInsertBuildChunkArchive, buildchunk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideInsertBuildChunkArchive, index_),
  };
  CommandSlideInsertBuildChunkArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSlideInsertBuildChunkArchive_descriptor_,
      CommandSlideInsertBuildChunkArchive::default_instance_,
      CommandSlideInsertBuildChunkArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideInsertBuildChunkArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideInsertBuildChunkArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSlideInsertBuildChunkArchive));
  CommandSlideRemoveBuildChunkArchive_descriptor_ = file->message_type(26);
  static const int CommandSlideRemoveBuildChunkArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideRemoveBuildChunkArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideRemoveBuildChunkArchive, slide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideRemoveBuildChunkArchive, buildchunk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideRemoveBuildChunkArchive, index_),
  };
  CommandSlideRemoveBuildChunkArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSlideRemoveBuildChunkArchive_descriptor_,
      CommandSlideRemoveBuildChunkArchive::default_instance_,
      CommandSlideRemoveBuildChunkArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideRemoveBuildChunkArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideRemoveBuildChunkArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSlideRemoveBuildChunkArchive));
  CommandSlideMoveBuildChunkArchive_descriptor_ = file->message_type(27);
  static const int CommandSlideMoveBuildChunkArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideMoveBuildChunkArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideMoveBuildChunkArchive, slide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideMoveBuildChunkArchive, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideMoveBuildChunkArchive, oldindex_),
  };
  CommandSlideMoveBuildChunkArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSlideMoveBuildChunkArchive_descriptor_,
      CommandSlideMoveBuildChunkArchive::default_instance_,
      CommandSlideMoveBuildChunkArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideMoveBuildChunkArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideMoveBuildChunkArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSlideMoveBuildChunkArchive));
  CommandSlideMoveBuildChunksArchive_descriptor_ = file->message_type(28);
  static const int CommandSlideMoveBuildChunksArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideMoveBuildChunksArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideMoveBuildChunksArchive, buildchunks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideMoveBuildChunksArchive, toindex_),
  };
  CommandSlideMoveBuildChunksArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSlideMoveBuildChunksArchive_descriptor_,
      CommandSlideMoveBuildChunksArchive::default_instance_,
      CommandSlideMoveBuildChunksArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideMoveBuildChunksArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideMoveBuildChunksArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSlideMoveBuildChunksArchive));
  CommandBuildSetValueArchive_descriptor_ = file->message_type(29);
  static const int CommandBuildSetValueArchive_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandBuildSetValueArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandBuildSetValueArchive, build_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandBuildSetValueArchive, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandBuildSetValueArchive, effects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandBuildSetValueArchive, types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandBuildSetValueArchive, deliveries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandBuildSetValueArchive, directions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandBuildSetValueArchive, durations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandBuildSetValueArchive, delays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandBuildSetValueArchive, delayautomaticafters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandBuildSetValueArchive, delayautomaticwiths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandBuildSetValueArchive, eventtriggers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandBuildSetValueArchive, oldattributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandBuildSetValueArchive, currentattributes_),
  };
  CommandBuildSetValueArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandBuildSetValueArchive_descriptor_,
      CommandBuildSetValueArchive::default_instance_,
      CommandBuildSetValueArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandBuildSetValueArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandBuildSetValueArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandBuildSetValueArchive));
  CommandBuildChunkSetValueArchive_descriptor_ = file->message_type(30);
  static const int CommandBuildChunkSetValueArchive_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandBuildChunkSetValueArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandBuildChunkSetValueArchive, buildchunk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandBuildChunkSetValueArchive, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandBuildChunkSetValueArchive, referents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandBuildChunkSetValueArchive, automatics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandBuildChunkSetValueArchive, durations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandBuildChunkSetValueArchive, delays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandBuildChunkSetValueArchive, oldownsvalue_),
  };
  CommandBuildChunkSetValueArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandBuildChunkSetValueArchive_descriptor_,
      CommandBuildChunkSetValueArchive::default_instance_,
      CommandBuildChunkSetValueArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandBuildChunkSetValueArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandBuildChunkSetValueArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandBuildChunkSetValueArchive));
  CommandTransitionSetValueArchive_descriptor_ = file->message_type(31);
  static const int CommandTransitionSetValueArchive_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTransitionSetValueArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTransitionSetValueArchive, slidenode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTransitionSetValueArchive, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTransitionSetValueArchive, effects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTransitionSetValueArchive, unused_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTransitionSetValueArchive, unused2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTransitionSetValueArchive, unused3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTransitionSetValueArchive, durations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTransitionSetValueArchive, directions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTransitionSetValueArchive, isautomatics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTransitionSetValueArchive, delays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTransitionSetValueArchive, oldattributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTransitionSetValueArchive, currentattributes_),
  };
  CommandTransitionSetValueArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandTransitionSetValueArchive_descriptor_,
      CommandTransitionSetValueArchive::default_instance_,
      CommandTransitionSetValueArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTransitionSetValueArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTransitionSetValueArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandTransitionSetValueArchive));
  CommandShowSetSlideNumberVisibilityArchive_descriptor_ = file->message_type(32);
  static const int CommandShowSetSlideNumberVisibilityArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowSetSlideNumberVisibilityArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowSetSlideNumberVisibilityArchive, show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowSetSlideNumberVisibilityArchive, slidenumbersvisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowSetSlideNumberVisibilityArchive, providerundo_),
  };
  CommandShowSetSlideNumberVisibilityArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandShowSetSlideNumberVisibilityArchive_descriptor_,
      CommandShowSetSlideNumberVisibilityArchive::default_instance_,
      CommandShowSetSlideNumberVisibilityArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowSetSlideNumberVisibilityArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowSetSlideNumberVisibilityArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandShowSetSlideNumberVisibilityArchive));
  CommandMasterRescaleArchive_descriptor_ = file->message_type(33);
  static const int CommandMasterRescaleArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMasterRescaleArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMasterRescaleArchive, master_),
  };
  CommandMasterRescaleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandMasterRescaleArchive_descriptor_,
      CommandMasterRescaleArchive::default_instance_,
      CommandMasterRescaleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMasterRescaleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMasterRescaleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandMasterRescaleArchive));
  CommandMasterSetThumbnailTextArchive_descriptor_ = file->message_type(34);
  static const int CommandMasterSetThumbnailTextArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMasterSetThumbnailTextArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMasterSetThumbnailTextArchive, master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMasterSetThumbnailTextArchive, is_body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMasterSetThumbnailTextArchive, new_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMasterSetThumbnailTextArchive, old_text_),
  };
  CommandMasterSetThumbnailTextArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandMasterSetThumbnailTextArchive_descriptor_,
      CommandMasterSetThumbnailTextArchive::default_instance_,
      CommandMasterSetThumbnailTextArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMasterSetThumbnailTextArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMasterSetThumbnailTextArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandMasterSetThumbnailTextArchive));
  CommandMasterSetBodyStylesArchive_descriptor_ = file->message_type(35);
  static const int CommandMasterSetBodyStylesArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMasterSetBodyStylesArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMasterSetBodyStylesArchive, master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMasterSetBodyStylesArchive, new_paragraph_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMasterSetBodyStylesArchive, new_list_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMasterSetBodyStylesArchive, old_paragraph_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMasterSetBodyStylesArchive, old_list_styles_),
  };
  CommandMasterSetBodyStylesArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandMasterSetBodyStylesArchive_descriptor_,
      CommandMasterSetBodyStylesArchive::default_instance_,
      CommandMasterSetBodyStylesArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMasterSetBodyStylesArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMasterSetBodyStylesArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandMasterSetBodyStylesArchive));
  CommandMasterSetSlideObjectsLayerWithMasterArchive_descriptor_ = file->message_type(36);
  static const int CommandMasterSetSlideObjectsLayerWithMasterArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMasterSetSlideObjectsLayerWithMasterArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMasterSetSlideObjectsLayerWithMasterArchive, master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMasterSetSlideObjectsLayerWithMasterArchive, new_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMasterSetSlideObjectsLayerWithMasterArchive, old_value_),
  };
  CommandMasterSetSlideObjectsLayerWithMasterArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandMasterSetSlideObjectsLayerWithMasterArchive_descriptor_,
      CommandMasterSetSlideObjectsLayerWithMasterArchive::default_instance_,
      CommandMasterSetSlideObjectsLayerWithMasterArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMasterSetSlideObjectsLayerWithMasterArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMasterSetSlideObjectsLayerWithMasterArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandMasterSetSlideObjectsLayerWithMasterArchive));
  CommandSlideApplyThemeArchive_descriptor_ = file->message_type(37);
  static const int CommandSlideApplyThemeArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideApplyThemeArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideApplyThemeArchive, blob_),
  };
  CommandSlideApplyThemeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSlideApplyThemeArchive_descriptor_,
      CommandSlideApplyThemeArchive::default_instance_,
      CommandSlideApplyThemeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideApplyThemeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideApplyThemeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSlideApplyThemeArchive));
  CommandChangeMasterSlideArchive_descriptor_ = file->message_type(38);
  static const int CommandChangeMasterSlideArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChangeMasterSlideArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChangeMasterSlideArchive, slide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChangeMasterSlideArchive, master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChangeMasterSlideArchive, placeholder_commands_),
  };
  CommandChangeMasterSlideArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandChangeMasterSlideArchive_descriptor_,
      CommandChangeMasterSlideArchive::default_instance_,
      CommandChangeMasterSlideArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChangeMasterSlideArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChangeMasterSlideArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandChangeMasterSlideArchive));
  CommandSlidePrimitiveSetMasterArchive_descriptor_ = file->message_type(39);
  static const int CommandSlidePrimitiveSetMasterArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlidePrimitiveSetMasterArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlidePrimitiveSetMasterArchive, slide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlidePrimitiveSetMasterArchive, master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlidePrimitiveSetMasterArchive, old_master_),
  };
  CommandSlidePrimitiveSetMasterArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSlidePrimitiveSetMasterArchive_descriptor_,
      CommandSlidePrimitiveSetMasterArchive::default_instance_,
      CommandSlidePrimitiveSetMasterArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlidePrimitiveSetMasterArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlidePrimitiveSetMasterArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSlidePrimitiveSetMasterArchive));
  CommandSlideReapplyMasterArchive_descriptor_ = file->message_type(40);
  static const int CommandSlideReapplyMasterArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideReapplyMasterArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideReapplyMasterArchive, reapply_accumulated_command_),
  };
  CommandSlideReapplyMasterArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSlideReapplyMasterArchive_descriptor_,
      CommandSlideReapplyMasterArchive::default_instance_,
      CommandSlideReapplyMasterArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideReapplyMasterArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideReapplyMasterArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSlideReapplyMasterArchive));
  CommandShowSetSoundtrack_descriptor_ = file->message_type(41);
  static const int CommandShowSetSoundtrack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowSetSoundtrack, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowSetSoundtrack, show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowSetSoundtrack, soundtrack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowSetSoundtrack, old_soundtrack_),
  };
  CommandShowSetSoundtrack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandShowSetSoundtrack_descriptor_,
      CommandShowSetSoundtrack::default_instance_,
      CommandShowSetSoundtrack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowSetSoundtrack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandShowSetSoundtrack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandShowSetSoundtrack));
  CommandSoundtrackSetValue_descriptor_ = file->message_type(42);
  static const int CommandSoundtrackSetValue_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSoundtrackSetValue, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSoundtrackSetValue, soundtrack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSoundtrackSetValue, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSoundtrackSetValue, old_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSoundtrackSetValue, new_value_),
  };
  CommandSoundtrackSetValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSoundtrackSetValue_descriptor_,
      CommandSoundtrackSetValue::default_instance_,
      CommandSoundtrackSetValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSoundtrackSetValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSoundtrackSetValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSoundtrackSetValue));
  CommandSoundtrackSetValue_PropertyValue_descriptor_ = CommandSoundtrackSetValue_descriptor_->nested_type(0);
  static const int CommandSoundtrackSetValue_PropertyValue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSoundtrackSetValue_PropertyValue, double_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSoundtrackSetValue_PropertyValue, mode_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSoundtrackSetValue_PropertyValue, media_reference_values_),
  };
  CommandSoundtrackSetValue_PropertyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSoundtrackSetValue_PropertyValue_descriptor_,
      CommandSoundtrackSetValue_PropertyValue::default_instance_,
      CommandSoundtrackSetValue_PropertyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSoundtrackSetValue_PropertyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSoundtrackSetValue_PropertyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSoundtrackSetValue_PropertyValue));
  CommandSlideUpdateMasterDrawables_descriptor_ = file->message_type(43);
  static const int CommandSlideUpdateMasterDrawables_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideUpdateMasterDrawables, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideUpdateMasterDrawables, slide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideUpdateMasterDrawables, drawables_to_insert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideUpdateMasterDrawables, sorted_drawables_to_remove_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideUpdateMasterDrawables, indexes_of_removed_drawables_),
  };
  CommandSlideUpdateMasterDrawables_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSlideUpdateMasterDrawables_descriptor_,
      CommandSlideUpdateMasterDrawables::default_instance_,
      CommandSlideUpdateMasterDrawables_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideUpdateMasterDrawables, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSlideUpdateMasterDrawables, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSlideUpdateMasterDrawables));
  SlideCollectionCommandSelectionBehaviorArchive_descriptor_ = file->message_type(44);
  static const int SlideCollectionCommandSelectionBehaviorArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideCollectionCommandSelectionBehaviorArchive, archived_new_selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideCollectionCommandSelectionBehaviorArchive, archived_old_selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideCollectionCommandSelectionBehaviorArchive, type_),
  };
  SlideCollectionCommandSelectionBehaviorArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlideCollectionCommandSelectionBehaviorArchive_descriptor_,
      SlideCollectionCommandSelectionBehaviorArchive::default_instance_,
      SlideCollectionCommandSelectionBehaviorArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideCollectionCommandSelectionBehaviorArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideCollectionCommandSelectionBehaviorArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlideCollectionCommandSelectionBehaviorArchive));
  SlideCollectionCommandSelectionBehaviorArchive_Type_descriptor_ = SlideCollectionCommandSelectionBehaviorArchive_descriptor_->enum_type(0);
  ChartInfoGeometryCommandArchive_descriptor_ = file->message_type(45);
  static const int ChartInfoGeometryCommandArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartInfoGeometryCommandArchive, super_),
  };
  ChartInfoGeometryCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartInfoGeometryCommandArchive_descriptor_,
      ChartInfoGeometryCommandArchive::default_instance_,
      ChartInfoGeometryCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartInfoGeometryCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartInfoGeometryCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartInfoGeometryCommandArchive));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_KNCommandArchives_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UIStateCommandGroupArchive_descriptor_, &UIStateCommandGroupArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSlideInsertDrawablesArchive_descriptor_, &CommandSlideInsertDrawablesArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSlideSetPlaceholdersForTagsArchive_descriptor_, &CommandSlideSetPlaceholdersForTagsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSlideRemoveDrawableArchive_descriptor_, &CommandSlideRemoveDrawableArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSlideMoveDrawableZOrderArchive_descriptor_, &CommandSlideMoveDrawableZOrderArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSlidePasteDrawablesArchive_descriptor_, &CommandSlidePasteDrawablesArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSlideNodeSetPropertyArchive_descriptor_, &CommandSlideNodeSetPropertyArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSlideNodeSetPropertyArchive_PropertyValue_descriptor_, &CommandSlideNodeSetPropertyArchive_PropertyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSlideSetValueArchive_descriptor_, &CommandSlideSetValueArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSlideSetValueArchive_PropertyValue_descriptor_, &CommandSlideSetValueArchive_PropertyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSlideSetStyleArchive_descriptor_, &CommandSlideSetStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandShowMarkOutOfSyncRecordingArchive_descriptor_, &CommandShowMarkOutOfSyncRecordingArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandShowRemoveRecordingArchive_descriptor_, &CommandShowRemoveRecordingArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandShowReplaceRecordingArchive_descriptor_, &CommandShowReplaceRecordingArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandShowSetValueArchive_descriptor_, &CommandShowSetValueArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandShowSetValueArchive_PropertyValue_descriptor_, &CommandShowSetValueArchive_PropertyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandShowInsertSlideArchive_descriptor_, &CommandShowInsertSlideArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandShowMoveSlideArchive_descriptor_, &CommandShowMoveSlideArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandShowRemoveSlideArchive_descriptor_, &CommandShowRemoveSlideArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandShowChangeThemeArchive_descriptor_, &CommandShowChangeThemeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandMoveMastersArchive_descriptor_, &CommandMoveMastersArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandInsertMasterArchive_descriptor_, &CommandInsertMasterArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandRemoveMasterArchive_descriptor_, &CommandRemoveMasterArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandRenameMasterArchive_descriptor_, &CommandRenameMasterArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSlideInsertBuildArchive_descriptor_, &CommandSlideInsertBuildArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSlideRemoveBuildArchive_descriptor_, &CommandSlideRemoveBuildArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSlideMoveBuildWithoutMovingChunksArchive_descriptor_, &CommandSlideMoveBuildWithoutMovingChunksArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSlideMoveBuildsArchive_descriptor_, &CommandSlideMoveBuildsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSlideInsertBuildChunkArchive_descriptor_, &CommandSlideInsertBuildChunkArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSlideRemoveBuildChunkArchive_descriptor_, &CommandSlideRemoveBuildChunkArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSlideMoveBuildChunkArchive_descriptor_, &CommandSlideMoveBuildChunkArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSlideMoveBuildChunksArchive_descriptor_, &CommandSlideMoveBuildChunksArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandBuildSetValueArchive_descriptor_, &CommandBuildSetValueArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandBuildChunkSetValueArchive_descriptor_, &CommandBuildChunkSetValueArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandTransitionSetValueArchive_descriptor_, &CommandTransitionSetValueArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandShowSetSlideNumberVisibilityArchive_descriptor_, &CommandShowSetSlideNumberVisibilityArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandMasterRescaleArchive_descriptor_, &CommandMasterRescaleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandMasterSetThumbnailTextArchive_descriptor_, &CommandMasterSetThumbnailTextArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandMasterSetBodyStylesArchive_descriptor_, &CommandMasterSetBodyStylesArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandMasterSetSlideObjectsLayerWithMasterArchive_descriptor_, &CommandMasterSetSlideObjectsLayerWithMasterArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSlideApplyThemeArchive_descriptor_, &CommandSlideApplyThemeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandChangeMasterSlideArchive_descriptor_, &CommandChangeMasterSlideArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSlidePrimitiveSetMasterArchive_descriptor_, &CommandSlidePrimitiveSetMasterArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSlideReapplyMasterArchive_descriptor_, &CommandSlideReapplyMasterArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandShowSetSoundtrack_descriptor_, &CommandShowSetSoundtrack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSoundtrackSetValue_descriptor_, &CommandSoundtrackSetValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSoundtrackSetValue_PropertyValue_descriptor_, &CommandSoundtrackSetValue_PropertyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSlideUpdateMasterDrawables_descriptor_, &CommandSlideUpdateMasterDrawables::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlideCollectionCommandSelectionBehaviorArchive_descriptor_, &SlideCollectionCommandSelectionBehaviorArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartInfoGeometryCommandArchive_descriptor_, &ChartInfoGeometryCommandArchive::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_KNCommandArchives_2eproto() {
  delete UIStateCommandGroupArchive::default_instance_;
  delete UIStateCommandGroupArchive_reflection_;
  delete CommandSlideInsertDrawablesArchive::default_instance_;
  delete CommandSlideInsertDrawablesArchive_reflection_;
  delete CommandSlideSetPlaceholdersForTagsArchive::default_instance_;
  delete CommandSlideSetPlaceholdersForTagsArchive_reflection_;
  delete CommandSlideRemoveDrawableArchive::default_instance_;
  delete CommandSlideRemoveDrawableArchive_reflection_;
  delete CommandSlideMoveDrawableZOrderArchive::default_instance_;
  delete CommandSlideMoveDrawableZOrderArchive_reflection_;
  delete CommandSlidePasteDrawablesArchive::default_instance_;
  delete CommandSlidePasteDrawablesArchive_reflection_;
  delete CommandSlideNodeSetPropertyArchive::default_instance_;
  delete CommandSlideNodeSetPropertyArchive_reflection_;
  delete CommandSlideNodeSetPropertyArchive_PropertyValue::default_instance_;
  delete CommandSlideNodeSetPropertyArchive_PropertyValue_reflection_;
  delete CommandSlideSetValueArchive::default_instance_;
  delete CommandSlideSetValueArchive_reflection_;
  delete CommandSlideSetValueArchive_PropertyValue::default_instance_;
  delete CommandSlideSetValueArchive_PropertyValue_reflection_;
  delete CommandSlideSetStyleArchive::default_instance_;
  delete CommandSlideSetStyleArchive_reflection_;
  delete CommandShowMarkOutOfSyncRecordingArchive::default_instance_;
  delete CommandShowMarkOutOfSyncRecordingArchive_reflection_;
  delete CommandShowRemoveRecordingArchive::default_instance_;
  delete CommandShowRemoveRecordingArchive_reflection_;
  delete CommandShowReplaceRecordingArchive::default_instance_;
  delete CommandShowReplaceRecordingArchive_reflection_;
  delete CommandShowSetValueArchive::default_instance_;
  delete CommandShowSetValueArchive_reflection_;
  delete CommandShowSetValueArchive_PropertyValue::default_instance_;
  delete CommandShowSetValueArchive_PropertyValue_reflection_;
  delete CommandShowInsertSlideArchive::default_instance_;
  delete CommandShowInsertSlideArchive_reflection_;
  delete CommandShowMoveSlideArchive::default_instance_;
  delete CommandShowMoveSlideArchive_reflection_;
  delete CommandShowRemoveSlideArchive::default_instance_;
  delete CommandShowRemoveSlideArchive_reflection_;
  delete CommandShowChangeThemeArchive::default_instance_;
  delete CommandShowChangeThemeArchive_reflection_;
  delete CommandMoveMastersArchive::default_instance_;
  delete CommandMoveMastersArchive_reflection_;
  delete CommandInsertMasterArchive::default_instance_;
  delete CommandInsertMasterArchive_reflection_;
  delete CommandRemoveMasterArchive::default_instance_;
  delete CommandRemoveMasterArchive_reflection_;
  delete CommandRenameMasterArchive::default_instance_;
  delete CommandRenameMasterArchive_reflection_;
  delete CommandSlideInsertBuildArchive::default_instance_;
  delete CommandSlideInsertBuildArchive_reflection_;
  delete CommandSlideRemoveBuildArchive::default_instance_;
  delete CommandSlideRemoveBuildArchive_reflection_;
  delete CommandSlideMoveBuildWithoutMovingChunksArchive::default_instance_;
  delete CommandSlideMoveBuildWithoutMovingChunksArchive_reflection_;
  delete CommandSlideMoveBuildsArchive::default_instance_;
  delete CommandSlideMoveBuildsArchive_reflection_;
  delete CommandSlideInsertBuildChunkArchive::default_instance_;
  delete CommandSlideInsertBuildChunkArchive_reflection_;
  delete CommandSlideRemoveBuildChunkArchive::default_instance_;
  delete CommandSlideRemoveBuildChunkArchive_reflection_;
  delete CommandSlideMoveBuildChunkArchive::default_instance_;
  delete CommandSlideMoveBuildChunkArchive_reflection_;
  delete CommandSlideMoveBuildChunksArchive::default_instance_;
  delete CommandSlideMoveBuildChunksArchive_reflection_;
  delete CommandBuildSetValueArchive::default_instance_;
  delete CommandBuildSetValueArchive_reflection_;
  delete CommandBuildChunkSetValueArchive::default_instance_;
  delete CommandBuildChunkSetValueArchive_reflection_;
  delete CommandTransitionSetValueArchive::default_instance_;
  delete CommandTransitionSetValueArchive_reflection_;
  delete CommandShowSetSlideNumberVisibilityArchive::default_instance_;
  delete CommandShowSetSlideNumberVisibilityArchive_reflection_;
  delete CommandMasterRescaleArchive::default_instance_;
  delete CommandMasterRescaleArchive_reflection_;
  delete CommandMasterSetThumbnailTextArchive::default_instance_;
  delete CommandMasterSetThumbnailTextArchive_reflection_;
  delete CommandMasterSetBodyStylesArchive::default_instance_;
  delete CommandMasterSetBodyStylesArchive_reflection_;
  delete CommandMasterSetSlideObjectsLayerWithMasterArchive::default_instance_;
  delete CommandMasterSetSlideObjectsLayerWithMasterArchive_reflection_;
  delete CommandSlideApplyThemeArchive::default_instance_;
  delete CommandSlideApplyThemeArchive_reflection_;
  delete CommandChangeMasterSlideArchive::default_instance_;
  delete CommandChangeMasterSlideArchive_reflection_;
  delete CommandSlidePrimitiveSetMasterArchive::default_instance_;
  delete CommandSlidePrimitiveSetMasterArchive_reflection_;
  delete CommandSlideReapplyMasterArchive::default_instance_;
  delete CommandSlideReapplyMasterArchive_reflection_;
  delete CommandShowSetSoundtrack::default_instance_;
  delete CommandShowSetSoundtrack_reflection_;
  delete CommandSoundtrackSetValue::default_instance_;
  delete CommandSoundtrackSetValue_reflection_;
  delete CommandSoundtrackSetValue_PropertyValue::default_instance_;
  delete CommandSoundtrackSetValue_PropertyValue_reflection_;
  delete CommandSlideUpdateMasterDrawables::default_instance_;
  delete CommandSlideUpdateMasterDrawables_reflection_;
  delete SlideCollectionCommandSelectionBehaviorArchive::default_instance_;
  delete SlideCollectionCommandSelectionBehaviorArchive_reflection_;
  delete ChartInfoGeometryCommandArchive::default_instance_;
  delete ChartInfoGeometryCommandArchive_reflection_;
}

void protobuf_AddDesc_KNCommandArchives_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::TSP::protobuf_AddDesc_TSPMessages_2eproto();
  ::TSK::protobuf_AddDesc_TSKArchives_2eproto();
  ::TSS::protobuf_AddDesc_TSSArchives_2eproto();
  ::TSD::protobuf_AddDesc_TSDArchives_2eproto();
  ::TSWP::protobuf_AddDesc_TSWPArchives_2eproto();
  ::TSA::protobuf_AddDesc_TSAArchives_2eproto();
  ::KN::protobuf_AddDesc_KNArchives_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027KNCommandArchives.proto\022\002KN\032\021TSPMessag"
    "es.proto\032\021TSKArchives.proto\032\021TSSArchives"
    ".proto\032\021TSDArchives.proto\032\022TSWPArchives."
    "proto\032\021TSAArchives.proto\032\020KNArchives.pro"
    "to\"\325\002\n\032UIStateCommandGroupArchive\022\'\n\005sup"
    "er\030\001 \002(\0132\030.TSK.CommandGroupArchive\022\037\n\007ui"
    "State\030\002 \002(\0132\016.TSP.Reference\022\020\n\010property\030"
    "\003 \002(\t\022(\n\020slideNodesToEdit\030\004 \003(\0132\016.TSP.Re"
    "ference\022/\n\027masterSlideNodesToApply\030\005 \003(\013"
    "2\016.TSP.Reference\022!\n\016thumbnailSizes\030\006 \003(\013"
    "2\t.TSP.Size\022*\n\022selectedSlideNodes\030\007 \003(\0132"
    "\016.TSP.Reference\0221\n\031restoreSelectedSlideN"
    "odes\030\010 \003(\0132\016.TSP.Reference\"\331\001\n\"CommandSl"
    "ideInsertDrawablesArchive\022\"\n\005super\030\001 \002(\013"
    "2\023.TSK.CommandArchive\022!\n\tslideNode\030\002 \002(\013"
    "2\016.TSP.Reference\022!\n\tdrawables\030\003 \003(\0132\016.TS"
    "P.Reference\022\017\n\007forDrag\030\004 \001(\010\022\017\n\007atIndex\030"
    "\005 \001(\005\022\'\n\037use_object_placeholder_geometry"
    "\030\006 \002(\010\"\320\001\n)CommandSlideSetPlaceholdersFo"
    "rTagsArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comman"
    "dArchive\022\035\n\005slide\030\002 \002(\0132\016.TSP.Reference\022"
    "\035\n\005infos\030\003 \003(\0132\016.TSP.Reference\022\014\n\004tags\030\004"
    " \003(\t\022!\n\told_infos\030\006 \003(\0132\016.TSP.Reference\022"
    "\020\n\010old_tags\030\005 \003(\t\"\303\002\n!CommandSlideRemove"
    "DrawableArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Com"
    "mandArchive\022!\n\tslideNode\030\002 \002(\0132\016.TSP.Ref"
    "erence\022\'\n\017sortedDrawables\030\003 \003(\0132\016.TSP.Re"
    "ference\022&\n\017drawableIndices\030\004 \002(\0132\r.TSP.I"
    "ndexSet\022\027\n\017placeholderTags\030\005 \003(\t\022>\n&info"
    "_using_object_placeholder_geometry\030\006 \001(\013"
    "2\016.TSP.Reference\022-\n%did_match_object_pla"
    "ceholder_geometry\030\007 \001(\010\"\330\001\n%CommandSlide"
    "MoveDrawableZOrderArchive\022\"\n\005super\030\001 \002(\013"
    "2\023.TSK.CommandArchive\022!\n\tslideNode\030\002 \002(\013"
    "2\016.TSP.Reference\022\035\n\005infos\030\003 \003(\0132\016.TSP.Re"
    "ference\022)\n\021old_ordered_infos\030\004 \003(\0132\016.TSP"
    ".Reference\022\036\n\007indexes\030\005 \002(\0132\r.TSP.IndexS"
    "et\"\306\001\n!CommandSlidePasteDrawablesArchive"
    "\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022 \n\010"
    "commands\030\002 \003(\0132\016.TSP.Reference\022\035\n\005slide\030"
    "\003 \002(\0132\016.TSP.Reference\022!\n\tdrawables\030\004 \003(\013"
    "2\016.TSP.Reference\022\031\n\nhas_builds\030\005 \001(\010:\005fa"
    "lse\"\374\002\n\"CommandSlideNodeSetPropertyArchi"
    "ve\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022!"
    "\n\tslideNode\030\002 \002(\0132\016.TSP.Reference\022\020\n\010pro"
    "perty\030\003 \002(\t\022F\n\010oldValue\030\004 \002(\01324.KN.Comma"
    "ndSlideNodeSetPropertyArchive.PropertyVa"
    "lue\022F\n\010newValue\030\005 \002(\01324.KN.CommandSlideN"
    "odeSetPropertyArchive.PropertyValue\032m\n\rP"
    "ropertyValue\022\021\n\tboolValue\030\001 \001(\010\022!\n\005image"
    "\030\003 \001(\0132\022.TSP.DataReference\022&\n\016database_i"
    "mage\030\002 \001(\0132\016.TSP.Reference\"\204\003\n\033CommandSl"
    "ideSetValueArchive\022\"\n\005super\030\001 \002(\0132\023.TSK."
    "CommandArchive\022\035\n\005slide\030\002 \002(\0132\016.TSP.Refe"
    "rence\022\020\n\010property\030\003 \002(\t\022\?\n\010oldValue\030\004 \002("
    "\0132-.KN.CommandSlideSetValueArchive.Prope"
    "rtyValue\022\?\n\010newValue\030\005 \002(\0132-.KN.CommandS"
    "lideSetValueArchive.PropertyValue\022%\n\rold"
    "SlideStyle\030\006 \002(\0132\016.TSP.Reference\032g\n\rProp"
    "ertyValue\022\021\n\tboolValue\030\001 \001(\010\022#\n\013objectVa"
    "lue\030\002 \001(\0132\016.TSP.Reference\022\036\n\004fill\030\003 \001(\0132"
    "\020.TSD.FillArchive\"\256\001\n\033CommandSlideSetSty"
    "leArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandAr"
    "chive\022\035\n\005slide\030\002 \002(\0132\016.TSP.Reference\022#\n\013"
    "slide_style\030\003 \002(\0132\016.TSP.Reference\022\'\n\017old"
    "_slide_style\030\004 \002(\0132\016.TSP.Reference\"\223\001\n(C"
    "ommandShowMarkOutOfSyncRecordingArchive\022"
    "\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\034\n\004s"
    "how\030\002 \002(\0132\016.TSP.Reference\022%\n\rold_recordi"
    "ng\030\003 \001(\0132\016.TSP.Reference\"\214\001\n!CommandShow"
    "RemoveRecordingArchive\022\"\n\005super\030\001 \002(\0132\023."
    "TSK.CommandArchive\022\034\n\004show\030\002 \002(\0132\016.TSP.R"
    "eference\022%\n\rold_recording\030\003 \001(\0132\016.TSP.Re"
    "ference\"\334\001\n\"CommandShowReplaceRecordingA"
    "rchive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchi"
    "ve\022\034\n\004show\030\002 \002(\0132\016.TSP.Reference\022-\n\025repl"
    "acement_recording\030\003 \002(\0132\016.TSP.Reference\022"
    "\036\n\026replacement_start_time\030\004 \002(\001\022%\n\rold_r"
    "ecording\030\005 \001(\0132\016.TSP.Reference\"\202\003\n\032Comma"
    "ndShowSetValueArchive\022\"\n\005super\030\001 \002(\0132\023.T"
    "SK.CommandArchive\022\034\n\004show\030\002 \002(\0132\016.TSP.Re"
    "ference\022\020\n\010property\030\003 \002(\t\022\?\n\told_value\030\004"
    " \002(\0132,.KN.CommandShowSetValueArchive.Pro"
    "pertyValue\022\?\n\tnew_value\030\005 \002(\0132,.KN.Comma"
    "ndShowSetValueArchive.PropertyValue\032\215\001\n\r"
    "PropertyValue\022\022\n\nbool_value\030\001 \001(\010\022\024\n\014dou"
    "ble_value\030\002 \001(\001\0223\n\017show_mode_value\030\003 \001(\016"
    "2\032.KN.ShowArchive.KNShowMode\022\035\n\nsize_val"
    "ue\030\004 \001(\0132\t.TSP.Size\"\347\002\n\035CommandShowInser"
    "tSlideArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comma"
    "ndArchive\022\034\n\004show\030\002 \002(\0132\016.TSP.Reference\022"
    "!\n\tslideNode\030\003 \002(\0132\016.TSP.Reference\022\022\n\nch"
    "ildIndex\030\004 \002(\r\022\'\n\017parentSlideNode\030\005 \002(\0132"
    "\016.TSP.Reference\022F\n\004kind\030\006 \001(\0162&.KN.Comma"
    "ndShowInsertSlideArchive.Kind:\020kKindInse"
    "rtSlide\"\\\n\004Kind\022\024\n\020kKindInsertSlide\020\000\022\034\n"
    "\030kKindInsertSlideForPaste\020\001\022 \n\034kKindInse"
    "rtSlideForDuplicate\020\002\"\302\001\n\033CommandShowMov"
    "eSlideArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comma"
    "ndArchive\022\034\n\004show\030\002 \002(\0132\016.TSP.Reference\022"
    "!\n\tslideNode\030\003 \002(\0132\016.TSP.Reference\022(\n\020pa"
    "rentSlideNodes\030\004 \003(\0132\016.TSP.Reference\022\024\n\014"
    "childIndices\030\005 \003(\r\"\301\001\n\035CommandShowRemove"
    "SlideArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comman"
    "dArchive\022\034\n\004show\030\002 \002(\0132\016.TSP.Reference\022!"
    "\n\tslideNode\030\003 \002(\0132\016.TSP.Reference\022\'\n\017par"
    "entSlideNode\030\004 \002(\0132\016.TSP.Reference\022\022\n\nch"
    "ildIndex\030\005 \002(\r\"\341\001\n\035CommandShowChangeThem"
    "eArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArc"
    "hive\022\034\n\004show\030\002 \002(\0132\016.TSP.Reference\022\035\n\005th"
    "eme\030\003 \002(\0132\016.TSP.Reference\022!\n\told_theme\030\004"
    " \002(\0132\016.TSP.Reference\022\033\n\023template_identif"
    "ier\030\005 \001(\t\022\037\n\027old_template_identifier\030\006 \001"
    "(\t\"\207\002\n\031CommandMoveMastersArchive\022\"\n\005supe"
    "r\030\001 \002(\0132\023.TSK.CommandArchive\022\035\n\005theme\030\002 "
    "\002(\0132\016.TSP.Reference\022%\n\rmaster_slides\030\003 \003"
    "(\0132\016.TSP.Reference\022-\n\025previous_indexes_k"
    "eys\030\004 \003(\0132\016.TSP.Reference\022\037\n\027previous_in"
    "dexes_values\030\005 \003(\r\0220\n\030final_master_arran"
    "gement\030\006 \003(\0132\016.TSP.Reference\"\303\001\n\032Command"
    "InsertMasterArchive\022\"\n\005super\030\001 \002(\0132\023.TSK"
    ".CommandArchive\022\035\n\005theme\030\002 \002(\0132\016.TSP.Ref"
    "erence\022)\n\021master_slide_node\030\003 \002(\0132\016.TSP."
    "Reference\022\027\n\017insertion_index\030\004 \002(\r\022\036\n\026wa"
    "s_inserted_with_drop\030\005 \002(\010\"\202\002\n\032CommandRe"
    "moveMasterArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.C"
    "ommandArchive\022\035\n\005theme\030\002 \002(\0132\016.TSP.Refer"
    "ence\022)\n\021master_slide_node\030\003 \002(\0132\016.TSP.Re"
    "ference\022\026\n\016previous_index\030\004 \002(\r\022.\n\026maste"
    "r_change_commands\030\005 \001(\0132\016.TSP.Reference\022"
    ".\n&default_master_slide_node_was_replace"
    "d\030\006 \001(\010\"\224\001\n\032CommandRenameMasterArchive\022\""
    "\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022$\n\014ma"
    "ster_slide\030\002 \002(\0132\016.TSP.Reference\022\023\n\013mast"
    "er_name\030\003 \002(\t\022\027\n\017old_master_name\030\004 \002(\t\"\261"
    "\001\n\036CommandSlideInsertBuildArchive\022\"\n\005sup"
    "er\030\001 \002(\0132\023.TSK.CommandArchive\022!\n\tslideNo"
    "de\030\002 \002(\0132\016.TSP.Reference\022\035\n\005build\030\003 \002(\0132"
    "\016.TSP.Reference\022\r\n\005index\030\004 \002(\r\022\032\n\022should"
    "CreateChunks\030\005 \001(\010\"\225\001\n\036CommandSlideRemov"
    "eBuildArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comma"
    "ndArchive\022!\n\tslideNode\030\002 \002(\0132\016.TSP.Refer"
    "ence\022\035\n\005build\030\003 \002(\0132\016.TSP.Reference\022\r\n\005i"
    "ndex\030\004 \002(\r\"\231\001\n/CommandSlideMoveBuildWith"
    "outMovingChunksArchive\022\"\n\005super\030\001 \002(\0132\023."
    "TSK.CommandArchive\022!\n\tslideNode\030\002 \002(\0132\016."
    "TSP.Reference\022\r\n\005index\030\003 \002(\r\022\020\n\010oldIndex"
    "\030\004 \002(\r\"t\n\035CommandSlideMoveBuildsArchive\022"
    "\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\036\n\006b"
    "uilds\030\002 \003(\0132\016.TSP.Reference\022\017\n\007toIndex\030\003"
    " \001(\r\"\242\001\n#CommandSlideInsertBuildChunkArc"
    "hive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive"
    "\022\035\n\005slide\030\002 \002(\0132\016.TSP.Reference\022)\n\nbuild"
    "Chunk\030\003 \002(\0132\025.KN.BuildChunkArchive\022\r\n\005in"
    "dex\030\004 \002(\r\"\242\001\n#CommandSlideRemoveBuildChu"
    "nkArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandAr"
    "chive\022\035\n\005slide\030\002 \002(\0132\016.TSP.Reference\022)\n\n"
    "buildChunk\030\003 \002(\0132\025.KN.BuildChunkArchive\022"
    "\r\n\005index\030\004 \002(\r\"\207\001\n!CommandSlideMoveBuild"
    "ChunkArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comman"
    "dArchive\022\035\n\005slide\030\002 \002(\0132\016.TSP.Reference\022"
    "\r\n\005index\030\003 \002(\r\022\020\n\010oldIndex\030\004 \002(\r\"\205\001\n\"Com"
    "mandSlideMoveBuildChunksArchive\022\"\n\005super"
    "\030\001 \002(\0132\023.TSK.CommandArchive\022*\n\013buildChun"
    "ks\030\002 \003(\0132\025.KN.BuildChunkArchive\022\017\n\007toInd"
    "ex\030\003 \001(\r\"\271\003\n\033CommandBuildSetValueArchive"
    "\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\035\n\005"
    "build\030\002 \002(\0132\016.TSP.Reference\022\020\n\010property\030"
    "\003 \002(\t\022\023\n\007effects\030\004 \003(\tB\002\030\001\022\021\n\005types\030\005 \003("
    "\tB\002\030\001\022\022\n\ndeliveries\030\006 \003(\t\022\026\n\ndirections\030"
    "\007 \003(\rB\002\030\001\022\025\n\tdurations\030\010 \003(\001B\002\030\001\022\022\n\006dela"
    "ys\030\t \003(\001B\002\030\001\022 \n\024delayAutomaticAfters\030\n \003"
    "(\001B\002\030\001\022\037\n\023delayAutomaticWiths\030\013 \003(\001B\002\030\001\022"
    "\031\n\reventTriggers\030\014 \003(\010B\002\030\001\0221\n\roldAttribu"
    "tes\030\r \001(\0132\032.KN.BuildAttributesArchive\0225\n"
    "\021currentAttributes\030\016 \001(\0132\032.KN.BuildAttri"
    "butesArchive\"\347\001\n CommandBuildChunkSetVal"
    "ueArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandAr"
    "chive\022)\n\nbuildChunk\030\002 \002(\0132\025.KN.BuildChun"
    "kArchive\022\020\n\010property\030\003 \002(\t\022\021\n\treferents\030"
    "\004 \003(\r\022\022\n\nautomatics\030\005 \003(\010\022\021\n\tdurations\030\006"
    " \003(\001\022\016\n\006delays\030\007 \003(\001\022\030\n\014oldOwnsValue\030\010 \001"
    "(\010B\002\030\001\"\237\003\n CommandTransitionSetValueArch"
    "ive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022"
    "!\n\tslideNode\030\002 \002(\0132\016.TSP.Reference\022\020\n\010pr"
    "operty\030\003 \002(\t\022\023\n\007effects\030\004 \003(\tB\002\030\001\022\022\n\006unu"
    "sed\030\005 \003(\tB\002\030\001\022\023\n\007unused2\030\006 \003(\tB\002\030\001\022\023\n\007un"
    "used3\030\007 \003(\tB\002\030\001\022\025\n\tdurations\030\010 \003(\001B\002\030\001\022\026"
    "\n\ndirections\030\t \003(\rB\002\030\001\022\030\n\014isAutomatics\030\n"
    " \003(\010B\002\030\001\022\022\n\006delays\030\013 \003(\001B\002\030\001\0226\n\roldAttri"
    "butes\030\014 \001(\0132\037.KN.TransitionAttributesArc"
    "hive\022:\n\021currentAttributes\030\r \001(\0132\037.KN.Tra"
    "nsitionAttributesArchive\"\261\001\n*CommandShow"
    "SetSlideNumberVisibilityArchive\022\"\n\005super"
    "\030\001 \002(\0132\023.TSK.CommandArchive\022\034\n\004show\030\002 \002("
    "\0132\016.TSP.Reference\022\033\n\023slideNumbersVisible"
    "\030\003 \002(\010\022$\n\014providerUndo\030\004 \001(\0132\016.TSP.Refer"
    "ence\"a\n\033CommandMasterRescaleArchive\022\"\n\005s"
    "uper\030\001 \002(\0132\023.TSK.CommandArchive\022\036\n\006maste"
    "r\030\002 \002(\0132\016.TSP.Reference\"\237\001\n$CommandMaste"
    "rSetThumbnailTextArchive\022\"\n\005super\030\001 \002(\0132"
    "\023.TSK.CommandArchive\022\036\n\006master\030\002 \002(\0132\016.T"
    "SP.Reference\022\017\n\007is_body\030\003 \002(\010\022\020\n\010new_tex"
    "t\030\004 \001(\t\022\020\n\010old_text\030\005 \001(\t\"\225\002\n!CommandMas"
    "terSetBodyStylesArchive\022\"\n\005super\030\001 \002(\0132\023"
    ".TSK.CommandArchive\022\036\n\006master\030\002 \002(\0132\016.TS"
    "P.Reference\022,\n\024new_paragraph_styles\030\003 \003("
    "\0132\016.TSP.Reference\022\'\n\017new_list_styles\030\004 \003"
    "(\0132\016.TSP.Reference\022,\n\024old_paragraph_styl"
    "es\030\005 \003(\0132\016.TSP.Reference\022\'\n\017old_list_sty"
    "les\030\006 \003(\0132\016.TSP.Reference\"\236\001\n2CommandMas"
    "terSetSlideObjectsLayerWithMasterArchive"
    "\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\036\n\006"
    "master\030\002 \002(\0132\016.TSP.Reference\022\021\n\tnew_valu"
    "e\030\003 \002(\010\022\021\n\told_value\030\004 \002(\010\"}\n\035CommandSli"
    "deApplyThemeArchive\0221\n\005super\030\001 \002(\0132\".TSS"
    ".ApplyThemeChildCommandArchive\022)\n\004blob\030\002"
    " \002(\0132\033.KN.MasterChangeBlobArchive\"\262\001\n\037Co"
    "mmandChangeMasterSlideArchive\022\"\n\005super\030\001"
    " \002(\0132\023.TSK.CommandArchive\022\035\n\005slide\030\002 \002(\013"
    "2\016.TSP.Reference\022\036\n\006master\030\003 \002(\0132\016.TSP.R"
    "eference\022,\n\024placeholder_commands\030\004 \002(\0132\016"
    ".TSP.Reference\"\256\001\n%CommandSlidePrimitive"
    "SetMasterArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Co"
    "mmandArchive\022\035\n\005slide\030\002 \002(\0132\016.TSP.Refere"
    "nce\022\036\n\006master\030\003 \002(\0132\016.TSP.Reference\022\"\n\no"
    "ld_master\030\004 \002(\0132\016.TSP.Reference\"{\n Comma"
    "ndSlideReapplyMasterArchive\022\"\n\005super\030\001 \002"
    "(\0132\023.TSK.CommandArchive\0223\n\033reapply_accum"
    "ulated_command\030\002 \002(\0132\016.TSP.Reference\"\250\001\n"
    "\030CommandShowSetSoundtrack\022\"\n\005super\030\001 \002(\013"
    "2\023.TSK.CommandArchive\022\034\n\004show\030\002 \001(\0132\016.TS"
    "P.Reference\022\"\n\nsoundtrack\030\003 \001(\0132\016.TSP.Re"
    "ference\022&\n\016old_soundtrack\030\004 \001(\0132\016.TSP.Re"
    "ference\"\204\003\n\031CommandSoundtrackSetValue\022\"\n"
    "\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\"\n\nsou"
    "ndtrack\030\002 \001(\0132\016.TSP.Reference\022\020\n\010propert"
    "y\030\003 \001(\t\022>\n\told_value\030\004 \001(\0132+.KN.CommandS"
    "oundtrackSetValue.PropertyValue\022>\n\tnew_v"
    "alue\030\005 \001(\0132+.KN.CommandSoundtrackSetValu"
    "e.PropertyValue\032\214\001\n\rPropertyValue\022\024\n\014dou"
    "ble_value\030\001 \001(\001\0221\n\nmode_value\030\002 \001(\0162\035.KN"
    ".Soundtrack.SoundtrackMode\0222\n\026media_refe"
    "rence_values\030\003 \003(\0132\022.TSP.DataReference\"\374"
    "\001\n!CommandSlideUpdateMasterDrawables\022\"\n\005"
    "super\030\001 \002(\0132\023.TSK.CommandArchive\022\035\n\005slid"
    "e\030\002 \002(\0132\016.TSP.Reference\022+\n\023drawables_to_"
    "insert\030\003 \003(\0132\016.TSP.Reference\0222\n\032sorted_d"
    "rawables_to_remove\030\004 \003(\0132\016.TSP.Reference"
    "\0223\n\034indexes_of_removed_drawables\030\005 \002(\0132\r"
    ".TSP.IndexSet\"\270\003\n.SlideCollectionCommand"
    "SelectionBehaviorArchive\022.\n\026archived_new"
    "_selection\030\001 \001(\0132\016.TSP.Reference\022.\n\026arch"
    "ived_old_selection\030\002 \001(\0132\016.TSP.Reference"
    "\022m\n\004type\030\003 \001(\01627.KN.SlideCollectionComma"
    "ndSelectionBehaviorArchive.Type:&kKindSl"
    "ideSelectionBehaviorTypeGeneral\"\266\001\n\004Type"
    "\022*\n&kKindSlideSelectionBehaviorTypeGener"
    "al\020\000\022,\n(kKindSlideSelectionBehaviorTypeI"
    "nsertion\020\001\022+\n\'kKindSlideSelectionBehavio"
    "rTypeDeletion\020\002\022\'\n#kKindSlideSelectionBe"
    "haviorTypeMove\020\003\"E\n\037ChartInfoGeometryCom"
    "mandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Command"
    "Archive", 10527);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KNCommandArchives.proto", &protobuf_RegisterTypes);
  UIStateCommandGroupArchive::default_instance_ = new UIStateCommandGroupArchive();
  CommandSlideInsertDrawablesArchive::default_instance_ = new CommandSlideInsertDrawablesArchive();
  CommandSlideSetPlaceholdersForTagsArchive::default_instance_ = new CommandSlideSetPlaceholdersForTagsArchive();
  CommandSlideRemoveDrawableArchive::default_instance_ = new CommandSlideRemoveDrawableArchive();
  CommandSlideMoveDrawableZOrderArchive::default_instance_ = new CommandSlideMoveDrawableZOrderArchive();
  CommandSlidePasteDrawablesArchive::default_instance_ = new CommandSlidePasteDrawablesArchive();
  CommandSlideNodeSetPropertyArchive::default_instance_ = new CommandSlideNodeSetPropertyArchive();
  CommandSlideNodeSetPropertyArchive_PropertyValue::default_instance_ = new CommandSlideNodeSetPropertyArchive_PropertyValue();
  CommandSlideSetValueArchive::default_instance_ = new CommandSlideSetValueArchive();
  CommandSlideSetValueArchive_PropertyValue::default_instance_ = new CommandSlideSetValueArchive_PropertyValue();
  CommandSlideSetStyleArchive::default_instance_ = new CommandSlideSetStyleArchive();
  CommandShowMarkOutOfSyncRecordingArchive::default_instance_ = new CommandShowMarkOutOfSyncRecordingArchive();
  CommandShowRemoveRecordingArchive::default_instance_ = new CommandShowRemoveRecordingArchive();
  CommandShowReplaceRecordingArchive::default_instance_ = new CommandShowReplaceRecordingArchive();
  CommandShowSetValueArchive::default_instance_ = new CommandShowSetValueArchive();
  CommandShowSetValueArchive_PropertyValue::default_instance_ = new CommandShowSetValueArchive_PropertyValue();
  CommandShowInsertSlideArchive::default_instance_ = new CommandShowInsertSlideArchive();
  CommandShowMoveSlideArchive::default_instance_ = new CommandShowMoveSlideArchive();
  CommandShowRemoveSlideArchive::default_instance_ = new CommandShowRemoveSlideArchive();
  CommandShowChangeThemeArchive::default_instance_ = new CommandShowChangeThemeArchive();
  CommandMoveMastersArchive::default_instance_ = new CommandMoveMastersArchive();
  CommandInsertMasterArchive::default_instance_ = new CommandInsertMasterArchive();
  CommandRemoveMasterArchive::default_instance_ = new CommandRemoveMasterArchive();
  CommandRenameMasterArchive::default_instance_ = new CommandRenameMasterArchive();
  CommandSlideInsertBuildArchive::default_instance_ = new CommandSlideInsertBuildArchive();
  CommandSlideRemoveBuildArchive::default_instance_ = new CommandSlideRemoveBuildArchive();
  CommandSlideMoveBuildWithoutMovingChunksArchive::default_instance_ = new CommandSlideMoveBuildWithoutMovingChunksArchive();
  CommandSlideMoveBuildsArchive::default_instance_ = new CommandSlideMoveBuildsArchive();
  CommandSlideInsertBuildChunkArchive::default_instance_ = new CommandSlideInsertBuildChunkArchive();
  CommandSlideRemoveBuildChunkArchive::default_instance_ = new CommandSlideRemoveBuildChunkArchive();
  CommandSlideMoveBuildChunkArchive::default_instance_ = new CommandSlideMoveBuildChunkArchive();
  CommandSlideMoveBuildChunksArchive::default_instance_ = new CommandSlideMoveBuildChunksArchive();
  CommandBuildSetValueArchive::default_instance_ = new CommandBuildSetValueArchive();
  CommandBuildChunkSetValueArchive::default_instance_ = new CommandBuildChunkSetValueArchive();
  CommandTransitionSetValueArchive::default_instance_ = new CommandTransitionSetValueArchive();
  CommandShowSetSlideNumberVisibilityArchive::default_instance_ = new CommandShowSetSlideNumberVisibilityArchive();
  CommandMasterRescaleArchive::default_instance_ = new CommandMasterRescaleArchive();
  CommandMasterSetThumbnailTextArchive::default_instance_ = new CommandMasterSetThumbnailTextArchive();
  CommandMasterSetBodyStylesArchive::default_instance_ = new CommandMasterSetBodyStylesArchive();
  CommandMasterSetSlideObjectsLayerWithMasterArchive::default_instance_ = new CommandMasterSetSlideObjectsLayerWithMasterArchive();
  CommandSlideApplyThemeArchive::default_instance_ = new CommandSlideApplyThemeArchive();
  CommandChangeMasterSlideArchive::default_instance_ = new CommandChangeMasterSlideArchive();
  CommandSlidePrimitiveSetMasterArchive::default_instance_ = new CommandSlidePrimitiveSetMasterArchive();
  CommandSlideReapplyMasterArchive::default_instance_ = new CommandSlideReapplyMasterArchive();
  CommandShowSetSoundtrack::default_instance_ = new CommandShowSetSoundtrack();
  CommandSoundtrackSetValue::default_instance_ = new CommandSoundtrackSetValue();
  CommandSoundtrackSetValue_PropertyValue::default_instance_ = new CommandSoundtrackSetValue_PropertyValue();
  CommandSlideUpdateMasterDrawables::default_instance_ = new CommandSlideUpdateMasterDrawables();
  SlideCollectionCommandSelectionBehaviorArchive::default_instance_ = new SlideCollectionCommandSelectionBehaviorArchive();
  ChartInfoGeometryCommandArchive::default_instance_ = new ChartInfoGeometryCommandArchive();
  UIStateCommandGroupArchive::default_instance_->InitAsDefaultInstance();
  CommandSlideInsertDrawablesArchive::default_instance_->InitAsDefaultInstance();
  CommandSlideSetPlaceholdersForTagsArchive::default_instance_->InitAsDefaultInstance();
  CommandSlideRemoveDrawableArchive::default_instance_->InitAsDefaultInstance();
  CommandSlideMoveDrawableZOrderArchive::default_instance_->InitAsDefaultInstance();
  CommandSlidePasteDrawablesArchive::default_instance_->InitAsDefaultInstance();
  CommandSlideNodeSetPropertyArchive::default_instance_->InitAsDefaultInstance();
  CommandSlideNodeSetPropertyArchive_PropertyValue::default_instance_->InitAsDefaultInstance();
  CommandSlideSetValueArchive::default_instance_->InitAsDefaultInstance();
  CommandSlideSetValueArchive_PropertyValue::default_instance_->InitAsDefaultInstance();
  CommandSlideSetStyleArchive::default_instance_->InitAsDefaultInstance();
  CommandShowMarkOutOfSyncRecordingArchive::default_instance_->InitAsDefaultInstance();
  CommandShowRemoveRecordingArchive::default_instance_->InitAsDefaultInstance();
  CommandShowReplaceRecordingArchive::default_instance_->InitAsDefaultInstance();
  CommandShowSetValueArchive::default_instance_->InitAsDefaultInstance();
  CommandShowSetValueArchive_PropertyValue::default_instance_->InitAsDefaultInstance();
  CommandShowInsertSlideArchive::default_instance_->InitAsDefaultInstance();
  CommandShowMoveSlideArchive::default_instance_->InitAsDefaultInstance();
  CommandShowRemoveSlideArchive::default_instance_->InitAsDefaultInstance();
  CommandShowChangeThemeArchive::default_instance_->InitAsDefaultInstance();
  CommandMoveMastersArchive::default_instance_->InitAsDefaultInstance();
  CommandInsertMasterArchive::default_instance_->InitAsDefaultInstance();
  CommandRemoveMasterArchive::default_instance_->InitAsDefaultInstance();
  CommandRenameMasterArchive::default_instance_->InitAsDefaultInstance();
  CommandSlideInsertBuildArchive::default_instance_->InitAsDefaultInstance();
  CommandSlideRemoveBuildArchive::default_instance_->InitAsDefaultInstance();
  CommandSlideMoveBuildWithoutMovingChunksArchive::default_instance_->InitAsDefaultInstance();
  CommandSlideMoveBuildsArchive::default_instance_->InitAsDefaultInstance();
  CommandSlideInsertBuildChunkArchive::default_instance_->InitAsDefaultInstance();
  CommandSlideRemoveBuildChunkArchive::default_instance_->InitAsDefaultInstance();
  CommandSlideMoveBuildChunkArchive::default_instance_->InitAsDefaultInstance();
  CommandSlideMoveBuildChunksArchive::default_instance_->InitAsDefaultInstance();
  CommandBuildSetValueArchive::default_instance_->InitAsDefaultInstance();
  CommandBuildChunkSetValueArchive::default_instance_->InitAsDefaultInstance();
  CommandTransitionSetValueArchive::default_instance_->InitAsDefaultInstance();
  CommandShowSetSlideNumberVisibilityArchive::default_instance_->InitAsDefaultInstance();
  CommandMasterRescaleArchive::default_instance_->InitAsDefaultInstance();
  CommandMasterSetThumbnailTextArchive::default_instance_->InitAsDefaultInstance();
  CommandMasterSetBodyStylesArchive::default_instance_->InitAsDefaultInstance();
  CommandMasterSetSlideObjectsLayerWithMasterArchive::default_instance_->InitAsDefaultInstance();
  CommandSlideApplyThemeArchive::default_instance_->InitAsDefaultInstance();
  CommandChangeMasterSlideArchive::default_instance_->InitAsDefaultInstance();
  CommandSlidePrimitiveSetMasterArchive::default_instance_->InitAsDefaultInstance();
  CommandSlideReapplyMasterArchive::default_instance_->InitAsDefaultInstance();
  CommandShowSetSoundtrack::default_instance_->InitAsDefaultInstance();
  CommandSoundtrackSetValue::default_instance_->InitAsDefaultInstance();
  CommandSoundtrackSetValue_PropertyValue::default_instance_->InitAsDefaultInstance();
  CommandSlideUpdateMasterDrawables::default_instance_->InitAsDefaultInstance();
  SlideCollectionCommandSelectionBehaviorArchive::default_instance_->InitAsDefaultInstance();
  ChartInfoGeometryCommandArchive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_KNCommandArchives_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_KNCommandArchives_2eproto {
  StaticDescriptorInitializer_KNCommandArchives_2eproto() {
    protobuf_AddDesc_KNCommandArchives_2eproto();
  }
} static_descriptor_initializer_KNCommandArchives_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UIStateCommandGroupArchive::kSuperFieldNumber;
const int UIStateCommandGroupArchive::kUiStateFieldNumber;
const int UIStateCommandGroupArchive::kPropertyFieldNumber;
const int UIStateCommandGroupArchive::kSlideNodesToEditFieldNumber;
const int UIStateCommandGroupArchive::kMasterSlideNodesToApplyFieldNumber;
const int UIStateCommandGroupArchive::kThumbnailSizesFieldNumber;
const int UIStateCommandGroupArchive::kSelectedSlideNodesFieldNumber;
const int UIStateCommandGroupArchive::kRestoreSelectedSlideNodesFieldNumber;
#endif  // !_MSC_VER

UIStateCommandGroupArchive::UIStateCommandGroupArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UIStateCommandGroupArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandGroupArchive*>(&::TSK::CommandGroupArchive::default_instance());
  uistate_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

UIStateCommandGroupArchive::UIStateCommandGroupArchive(const UIStateCommandGroupArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UIStateCommandGroupArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  uistate_ = NULL;
  property_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UIStateCommandGroupArchive::~UIStateCommandGroupArchive() {
  SharedDtor();
}

void UIStateCommandGroupArchive::SharedDtor() {
  if (property_ != &::google::protobuf::internal::kEmptyString) {
    delete property_;
  }
  if (this != default_instance_) {
    delete super_;
    delete uistate_;
  }
}

void UIStateCommandGroupArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UIStateCommandGroupArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UIStateCommandGroupArchive_descriptor_;
}

const UIStateCommandGroupArchive& UIStateCommandGroupArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

UIStateCommandGroupArchive* UIStateCommandGroupArchive::default_instance_ = NULL;

UIStateCommandGroupArchive* UIStateCommandGroupArchive::New() const {
  return new UIStateCommandGroupArchive;
}

void UIStateCommandGroupArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandGroupArchive::Clear();
    }
    if (has_uistate()) {
      if (uistate_ != NULL) uistate_->::TSP::Reference::Clear();
    }
    if (has_property()) {
      if (property_ != &::google::protobuf::internal::kEmptyString) {
        property_->clear();
      }
    }
  }
  slidenodestoedit_.Clear();
  masterslidenodestoapply_.Clear();
  thumbnailsizes_.Clear();
  selectedslidenodes_.Clear();
  restoreselectedslidenodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UIStateCommandGroupArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandGroupArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uiState;
        break;
      }

      // required .TSP.Reference uiState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uiState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uistate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_property;
        break;
      }

      // required string property = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_property()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->property().data(), this->property().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_slideNodesToEdit;
        break;
      }

      // repeated .TSP.Reference slideNodesToEdit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slideNodesToEdit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slidenodestoedit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_slideNodesToEdit;
        if (input->ExpectTag(42)) goto parse_masterSlideNodesToApply;
        break;
      }

      // repeated .TSP.Reference masterSlideNodesToApply = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_masterSlideNodesToApply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_masterslidenodestoapply()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_masterSlideNodesToApply;
        if (input->ExpectTag(50)) goto parse_thumbnailSizes;
        break;
      }

      // repeated .TSP.Size thumbnailSizes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thumbnailSizes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_thumbnailsizes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_thumbnailSizes;
        if (input->ExpectTag(58)) goto parse_selectedSlideNodes;
        break;
      }

      // repeated .TSP.Reference selectedSlideNodes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selectedSlideNodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selectedslidenodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_selectedSlideNodes;
        if (input->ExpectTag(66)) goto parse_restoreSelectedSlideNodes;
        break;
      }

      // repeated .TSP.Reference restoreSelectedSlideNodes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_restoreSelectedSlideNodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_restoreselectedslidenodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_restoreSelectedSlideNodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UIStateCommandGroupArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandGroupArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference uiState = 2;
  if (has_uistate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->uistate(), output);
  }

  // required string property = 3;
  if (has_property()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->property().data(), this->property().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->property(), output);
  }

  // repeated .TSP.Reference slideNodesToEdit = 4;
  for (int i = 0; i < this->slidenodestoedit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->slidenodestoedit(i), output);
  }

  // repeated .TSP.Reference masterSlideNodesToApply = 5;
  for (int i = 0; i < this->masterslidenodestoapply_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->masterslidenodestoapply(i), output);
  }

  // repeated .TSP.Size thumbnailSizes = 6;
  for (int i = 0; i < this->thumbnailsizes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->thumbnailsizes(i), output);
  }

  // repeated .TSP.Reference selectedSlideNodes = 7;
  for (int i = 0; i < this->selectedslidenodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->selectedslidenodes(i), output);
  }

  // repeated .TSP.Reference restoreSelectedSlideNodes = 8;
  for (int i = 0; i < this->restoreselectedslidenodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->restoreselectedslidenodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UIStateCommandGroupArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandGroupArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference uiState = 2;
  if (has_uistate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->uistate(), target);
  }

  // required string property = 3;
  if (has_property()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->property().data(), this->property().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->property(), target);
  }

  // repeated .TSP.Reference slideNodesToEdit = 4;
  for (int i = 0; i < this->slidenodestoedit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->slidenodestoedit(i), target);
  }

  // repeated .TSP.Reference masterSlideNodesToApply = 5;
  for (int i = 0; i < this->masterslidenodestoapply_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->masterslidenodestoapply(i), target);
  }

  // repeated .TSP.Size thumbnailSizes = 6;
  for (int i = 0; i < this->thumbnailsizes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->thumbnailsizes(i), target);
  }

  // repeated .TSP.Reference selectedSlideNodes = 7;
  for (int i = 0; i < this->selectedslidenodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->selectedslidenodes(i), target);
  }

  // repeated .TSP.Reference restoreSelectedSlideNodes = 8;
  for (int i = 0; i < this->restoreselectedslidenodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->restoreselectedslidenodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UIStateCommandGroupArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandGroupArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference uiState = 2;
    if (has_uistate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uistate());
    }

    // required string property = 3;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->property());
    }

  }
  // repeated .TSP.Reference slideNodesToEdit = 4;
  total_size += 1 * this->slidenodestoedit_size();
  for (int i = 0; i < this->slidenodestoedit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slidenodestoedit(i));
  }

  // repeated .TSP.Reference masterSlideNodesToApply = 5;
  total_size += 1 * this->masterslidenodestoapply_size();
  for (int i = 0; i < this->masterslidenodestoapply_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->masterslidenodestoapply(i));
  }

  // repeated .TSP.Size thumbnailSizes = 6;
  total_size += 1 * this->thumbnailsizes_size();
  for (int i = 0; i < this->thumbnailsizes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->thumbnailsizes(i));
  }

  // repeated .TSP.Reference selectedSlideNodes = 7;
  total_size += 1 * this->selectedslidenodes_size();
  for (int i = 0; i < this->selectedslidenodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->selectedslidenodes(i));
  }

  // repeated .TSP.Reference restoreSelectedSlideNodes = 8;
  total_size += 1 * this->restoreselectedslidenodes_size();
  for (int i = 0; i < this->restoreselectedslidenodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->restoreselectedslidenodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UIStateCommandGroupArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UIStateCommandGroupArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UIStateCommandGroupArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UIStateCommandGroupArchive::MergeFrom(const UIStateCommandGroupArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  slidenodestoedit_.MergeFrom(from.slidenodestoedit_);
  masterslidenodestoapply_.MergeFrom(from.masterslidenodestoapply_);
  thumbnailsizes_.MergeFrom(from.thumbnailsizes_);
  selectedslidenodes_.MergeFrom(from.selectedslidenodes_);
  restoreselectedslidenodes_.MergeFrom(from.restoreselectedslidenodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandGroupArchive::MergeFrom(from.super());
    }
    if (from.has_uistate()) {
      mutable_uistate()->::TSP::Reference::MergeFrom(from.uistate());
    }
    if (from.has_property()) {
      set_property(from.property());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UIStateCommandGroupArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIStateCommandGroupArchive::CopyFrom(const UIStateCommandGroupArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIStateCommandGroupArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_uistate()) {
    if (!this->uistate().IsInitialized()) return false;
  }
  for (int i = 0; i < slidenodestoedit_size(); i++) {
    if (!this->slidenodestoedit(i).IsInitialized()) return false;
  }
  for (int i = 0; i < masterslidenodestoapply_size(); i++) {
    if (!this->masterslidenodestoapply(i).IsInitialized()) return false;
  }
  for (int i = 0; i < thumbnailsizes_size(); i++) {
    if (!this->thumbnailsizes(i).IsInitialized()) return false;
  }
  for (int i = 0; i < selectedslidenodes_size(); i++) {
    if (!this->selectedslidenodes(i).IsInitialized()) return false;
  }
  for (int i = 0; i < restoreselectedslidenodes_size(); i++) {
    if (!this->restoreselectedslidenodes(i).IsInitialized()) return false;
  }
  return true;
}

void UIStateCommandGroupArchive::Swap(UIStateCommandGroupArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(uistate_, other->uistate_);
    std::swap(property_, other->property_);
    slidenodestoedit_.Swap(&other->slidenodestoedit_);
    masterslidenodestoapply_.Swap(&other->masterslidenodestoapply_);
    thumbnailsizes_.Swap(&other->thumbnailsizes_);
    selectedslidenodes_.Swap(&other->selectedslidenodes_);
    restoreselectedslidenodes_.Swap(&other->restoreselectedslidenodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UIStateCommandGroupArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UIStateCommandGroupArchive_descriptor_;
  metadata.reflection = UIStateCommandGroupArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSlideInsertDrawablesArchive::kSuperFieldNumber;
const int CommandSlideInsertDrawablesArchive::kSlideNodeFieldNumber;
const int CommandSlideInsertDrawablesArchive::kDrawablesFieldNumber;
const int CommandSlideInsertDrawablesArchive::kForDragFieldNumber;
const int CommandSlideInsertDrawablesArchive::kAtIndexFieldNumber;
const int CommandSlideInsertDrawablesArchive::kUseObjectPlaceholderGeometryFieldNumber;
#endif  // !_MSC_VER

CommandSlideInsertDrawablesArchive::CommandSlideInsertDrawablesArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSlideInsertDrawablesArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  slidenode_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandSlideInsertDrawablesArchive::CommandSlideInsertDrawablesArchive(const CommandSlideInsertDrawablesArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSlideInsertDrawablesArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  slidenode_ = NULL;
  fordrag_ = false;
  atindex_ = 0;
  use_object_placeholder_geometry_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSlideInsertDrawablesArchive::~CommandSlideInsertDrawablesArchive() {
  SharedDtor();
}

void CommandSlideInsertDrawablesArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete slidenode_;
  }
}

void CommandSlideInsertDrawablesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSlideInsertDrawablesArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSlideInsertDrawablesArchive_descriptor_;
}

const CommandSlideInsertDrawablesArchive& CommandSlideInsertDrawablesArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSlideInsertDrawablesArchive* CommandSlideInsertDrawablesArchive::default_instance_ = NULL;

CommandSlideInsertDrawablesArchive* CommandSlideInsertDrawablesArchive::New() const {
  return new CommandSlideInsertDrawablesArchive;
}

void CommandSlideInsertDrawablesArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_slidenode()) {
      if (slidenode_ != NULL) slidenode_->::TSP::Reference::Clear();
    }
    fordrag_ = false;
    atindex_ = 0;
    use_object_placeholder_geometry_ = false;
  }
  drawables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSlideInsertDrawablesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_slideNode;
        break;
      }

      // required .TSP.Reference slideNode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slideNode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slidenode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_drawables;
        break;
      }

      // repeated .TSP.Reference drawables = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drawables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drawables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_drawables;
        if (input->ExpectTag(32)) goto parse_forDrag;
        break;
      }

      // optional bool forDrag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forDrag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fordrag_)));
          set_has_fordrag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_atIndex;
        break;
      }

      // optional int32 atIndex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atindex_)));
          set_has_atindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_use_object_placeholder_geometry;
        break;
      }

      // required bool use_object_placeholder_geometry = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_object_placeholder_geometry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_object_placeholder_geometry_)));
          set_has_use_object_placeholder_geometry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSlideInsertDrawablesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference slideNode = 2;
  if (has_slidenode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slidenode(), output);
  }

  // repeated .TSP.Reference drawables = 3;
  for (int i = 0; i < this->drawables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->drawables(i), output);
  }

  // optional bool forDrag = 4;
  if (has_fordrag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->fordrag(), output);
  }

  // optional int32 atIndex = 5;
  if (has_atindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->atindex(), output);
  }

  // required bool use_object_placeholder_geometry = 6;
  if (has_use_object_placeholder_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->use_object_placeholder_geometry(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSlideInsertDrawablesArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference slideNode = 2;
  if (has_slidenode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->slidenode(), target);
  }

  // repeated .TSP.Reference drawables = 3;
  for (int i = 0; i < this->drawables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->drawables(i), target);
  }

  // optional bool forDrag = 4;
  if (has_fordrag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->fordrag(), target);
  }

  // optional int32 atIndex = 5;
  if (has_atindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->atindex(), target);
  }

  // required bool use_object_placeholder_geometry = 6;
  if (has_use_object_placeholder_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->use_object_placeholder_geometry(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSlideInsertDrawablesArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference slideNode = 2;
    if (has_slidenode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slidenode());
    }

    // optional bool forDrag = 4;
    if (has_fordrag()) {
      total_size += 1 + 1;
    }

    // optional int32 atIndex = 5;
    if (has_atindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atindex());
    }

    // required bool use_object_placeholder_geometry = 6;
    if (has_use_object_placeholder_geometry()) {
      total_size += 1 + 1;
    }

  }
  // repeated .TSP.Reference drawables = 3;
  total_size += 1 * this->drawables_size();
  for (int i = 0; i < this->drawables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drawables(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSlideInsertDrawablesArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSlideInsertDrawablesArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSlideInsertDrawablesArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSlideInsertDrawablesArchive::MergeFrom(const CommandSlideInsertDrawablesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  drawables_.MergeFrom(from.drawables_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_slidenode()) {
      mutable_slidenode()->::TSP::Reference::MergeFrom(from.slidenode());
    }
    if (from.has_fordrag()) {
      set_fordrag(from.fordrag());
    }
    if (from.has_atindex()) {
      set_atindex(from.atindex());
    }
    if (from.has_use_object_placeholder_geometry()) {
      set_use_object_placeholder_geometry(from.use_object_placeholder_geometry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSlideInsertDrawablesArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSlideInsertDrawablesArchive::CopyFrom(const CommandSlideInsertDrawablesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideInsertDrawablesArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000023) != 0x00000023) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_slidenode()) {
    if (!this->slidenode().IsInitialized()) return false;
  }
  for (int i = 0; i < drawables_size(); i++) {
    if (!this->drawables(i).IsInitialized()) return false;
  }
  return true;
}

void CommandSlideInsertDrawablesArchive::Swap(CommandSlideInsertDrawablesArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(slidenode_, other->slidenode_);
    drawables_.Swap(&other->drawables_);
    std::swap(fordrag_, other->fordrag_);
    std::swap(atindex_, other->atindex_);
    std::swap(use_object_placeholder_geometry_, other->use_object_placeholder_geometry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSlideInsertDrawablesArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSlideInsertDrawablesArchive_descriptor_;
  metadata.reflection = CommandSlideInsertDrawablesArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSlideSetPlaceholdersForTagsArchive::kSuperFieldNumber;
const int CommandSlideSetPlaceholdersForTagsArchive::kSlideFieldNumber;
const int CommandSlideSetPlaceholdersForTagsArchive::kInfosFieldNumber;
const int CommandSlideSetPlaceholdersForTagsArchive::kTagsFieldNumber;
const int CommandSlideSetPlaceholdersForTagsArchive::kOldInfosFieldNumber;
const int CommandSlideSetPlaceholdersForTagsArchive::kOldTagsFieldNumber;
#endif  // !_MSC_VER

CommandSlideSetPlaceholdersForTagsArchive::CommandSlideSetPlaceholdersForTagsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSlideSetPlaceholdersForTagsArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  slide_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandSlideSetPlaceholdersForTagsArchive::CommandSlideSetPlaceholdersForTagsArchive(const CommandSlideSetPlaceholdersForTagsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSlideSetPlaceholdersForTagsArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  slide_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSlideSetPlaceholdersForTagsArchive::~CommandSlideSetPlaceholdersForTagsArchive() {
  SharedDtor();
}

void CommandSlideSetPlaceholdersForTagsArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete slide_;
  }
}

void CommandSlideSetPlaceholdersForTagsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSlideSetPlaceholdersForTagsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSlideSetPlaceholdersForTagsArchive_descriptor_;
}

const CommandSlideSetPlaceholdersForTagsArchive& CommandSlideSetPlaceholdersForTagsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSlideSetPlaceholdersForTagsArchive* CommandSlideSetPlaceholdersForTagsArchive::default_instance_ = NULL;

CommandSlideSetPlaceholdersForTagsArchive* CommandSlideSetPlaceholdersForTagsArchive::New() const {
  return new CommandSlideSetPlaceholdersForTagsArchive;
}

void CommandSlideSetPlaceholdersForTagsArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_slide()) {
      if (slide_ != NULL) slide_->::TSP::Reference::Clear();
    }
  }
  infos_.Clear();
  tags_.Clear();
  old_infos_.Clear();
  old_tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSlideSetPlaceholdersForTagsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_slide;
        break;
      }

      // required .TSP.Reference slide = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slide:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slide()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        break;
      }

      // repeated .TSP.Reference infos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        if (input->ExpectTag(34)) goto parse_tags;
        break;
      }

      // repeated string tags = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tags;
        if (input->ExpectTag(42)) goto parse_old_tags;
        break;
      }

      // repeated string old_tags = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_old_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->old_tags(this->old_tags_size() - 1).data(),
            this->old_tags(this->old_tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_old_tags;
        if (input->ExpectTag(50)) goto parse_old_infos;
        break;
      }

      // repeated .TSP.Reference old_infos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_old_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_old_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSlideSetPlaceholdersForTagsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference slide = 2;
  if (has_slide()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slide(), output);
  }

  // repeated .TSP.Reference infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->infos(i), output);
  }

  // repeated string tags = 4;
  for (int i = 0; i < this->tags_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->tags(i).data(), this->tags(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->tags(i), output);
  }

  // repeated string old_tags = 5;
  for (int i = 0; i < this->old_tags_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->old_tags(i).data(), this->old_tags(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->old_tags(i), output);
  }

  // repeated .TSP.Reference old_infos = 6;
  for (int i = 0; i < this->old_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->old_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSlideSetPlaceholdersForTagsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference slide = 2;
  if (has_slide()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->slide(), target);
  }

  // repeated .TSP.Reference infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->infos(i), target);
  }

  // repeated string tags = 4;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->tags(i), target);
  }

  // repeated string old_tags = 5;
  for (int i = 0; i < this->old_tags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_tags(i).data(), this->old_tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->old_tags(i), target);
  }

  // repeated .TSP.Reference old_infos = 6;
  for (int i = 0; i < this->old_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->old_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSlideSetPlaceholdersForTagsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference slide = 2;
    if (has_slide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slide());
    }

  }
  // repeated .TSP.Reference infos = 3;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  // repeated string tags = 4;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // repeated .TSP.Reference old_infos = 6;
  total_size += 1 * this->old_infos_size();
  for (int i = 0; i < this->old_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->old_infos(i));
  }

  // repeated string old_tags = 5;
  total_size += 1 * this->old_tags_size();
  for (int i = 0; i < this->old_tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->old_tags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSlideSetPlaceholdersForTagsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSlideSetPlaceholdersForTagsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSlideSetPlaceholdersForTagsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSlideSetPlaceholdersForTagsArchive::MergeFrom(const CommandSlideSetPlaceholdersForTagsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  tags_.MergeFrom(from.tags_);
  old_infos_.MergeFrom(from.old_infos_);
  old_tags_.MergeFrom(from.old_tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_slide()) {
      mutable_slide()->::TSP::Reference::MergeFrom(from.slide());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSlideSetPlaceholdersForTagsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSlideSetPlaceholdersForTagsArchive::CopyFrom(const CommandSlideSetPlaceholdersForTagsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideSetPlaceholdersForTagsArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_slide()) {
    if (!this->slide().IsInitialized()) return false;
  }
  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  for (int i = 0; i < old_infos_size(); i++) {
    if (!this->old_infos(i).IsInitialized()) return false;
  }
  return true;
}

void CommandSlideSetPlaceholdersForTagsArchive::Swap(CommandSlideSetPlaceholdersForTagsArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(slide_, other->slide_);
    infos_.Swap(&other->infos_);
    tags_.Swap(&other->tags_);
    old_infos_.Swap(&other->old_infos_);
    old_tags_.Swap(&other->old_tags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSlideSetPlaceholdersForTagsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSlideSetPlaceholdersForTagsArchive_descriptor_;
  metadata.reflection = CommandSlideSetPlaceholdersForTagsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSlideRemoveDrawableArchive::kSuperFieldNumber;
const int CommandSlideRemoveDrawableArchive::kSlideNodeFieldNumber;
const int CommandSlideRemoveDrawableArchive::kSortedDrawablesFieldNumber;
const int CommandSlideRemoveDrawableArchive::kDrawableIndicesFieldNumber;
const int CommandSlideRemoveDrawableArchive::kPlaceholderTagsFieldNumber;
const int CommandSlideRemoveDrawableArchive::kInfoUsingObjectPlaceholderGeometryFieldNumber;
const int CommandSlideRemoveDrawableArchive::kDidMatchObjectPlaceholderGeometryFieldNumber;
#endif  // !_MSC_VER

CommandSlideRemoveDrawableArchive::CommandSlideRemoveDrawableArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSlideRemoveDrawableArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  slidenode_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  drawableindices_ = const_cast< ::TSP::IndexSet*>(&::TSP::IndexSet::default_instance());
  info_using_object_placeholder_geometry_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandSlideRemoveDrawableArchive::CommandSlideRemoveDrawableArchive(const CommandSlideRemoveDrawableArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSlideRemoveDrawableArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  slidenode_ = NULL;
  drawableindices_ = NULL;
  info_using_object_placeholder_geometry_ = NULL;
  did_match_object_placeholder_geometry_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSlideRemoveDrawableArchive::~CommandSlideRemoveDrawableArchive() {
  SharedDtor();
}

void CommandSlideRemoveDrawableArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete slidenode_;
    delete drawableindices_;
    delete info_using_object_placeholder_geometry_;
  }
}

void CommandSlideRemoveDrawableArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSlideRemoveDrawableArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSlideRemoveDrawableArchive_descriptor_;
}

const CommandSlideRemoveDrawableArchive& CommandSlideRemoveDrawableArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSlideRemoveDrawableArchive* CommandSlideRemoveDrawableArchive::default_instance_ = NULL;

CommandSlideRemoveDrawableArchive* CommandSlideRemoveDrawableArchive::New() const {
  return new CommandSlideRemoveDrawableArchive;
}

void CommandSlideRemoveDrawableArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_slidenode()) {
      if (slidenode_ != NULL) slidenode_->::TSP::Reference::Clear();
    }
    if (has_drawableindices()) {
      if (drawableindices_ != NULL) drawableindices_->::TSP::IndexSet::Clear();
    }
    if (has_info_using_object_placeholder_geometry()) {
      if (info_using_object_placeholder_geometry_ != NULL) info_using_object_placeholder_geometry_->::TSP::Reference::Clear();
    }
    did_match_object_placeholder_geometry_ = false;
  }
  sorteddrawables_.Clear();
  placeholdertags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSlideRemoveDrawableArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_slideNode;
        break;
      }

      // required .TSP.Reference slideNode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slideNode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slidenode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sortedDrawables;
        break;
      }

      // repeated .TSP.Reference sortedDrawables = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sortedDrawables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sorteddrawables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sortedDrawables;
        if (input->ExpectTag(34)) goto parse_drawableIndices;
        break;
      }

      // required .TSP.IndexSet drawableIndices = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drawableIndices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drawableindices()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_placeholderTags;
        break;
      }

      // repeated string placeholderTags = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_placeholderTags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_placeholdertags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->placeholdertags(this->placeholdertags_size() - 1).data(),
            this->placeholdertags(this->placeholdertags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_placeholderTags;
        if (input->ExpectTag(50)) goto parse_info_using_object_placeholder_geometry;
        break;
      }

      // optional .TSP.Reference info_using_object_placeholder_geometry = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_using_object_placeholder_geometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info_using_object_placeholder_geometry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_did_match_object_placeholder_geometry;
        break;
      }

      // optional bool did_match_object_placeholder_geometry = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_did_match_object_placeholder_geometry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &did_match_object_placeholder_geometry_)));
          set_has_did_match_object_placeholder_geometry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSlideRemoveDrawableArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference slideNode = 2;
  if (has_slidenode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slidenode(), output);
  }

  // repeated .TSP.Reference sortedDrawables = 3;
  for (int i = 0; i < this->sorteddrawables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sorteddrawables(i), output);
  }

  // required .TSP.IndexSet drawableIndices = 4;
  if (has_drawableindices()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->drawableindices(), output);
  }

  // repeated string placeholderTags = 5;
  for (int i = 0; i < this->placeholdertags_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->placeholdertags(i).data(), this->placeholdertags(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->placeholdertags(i), output);
  }

  // optional .TSP.Reference info_using_object_placeholder_geometry = 6;
  if (has_info_using_object_placeholder_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->info_using_object_placeholder_geometry(), output);
  }

  // optional bool did_match_object_placeholder_geometry = 7;
  if (has_did_match_object_placeholder_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->did_match_object_placeholder_geometry(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSlideRemoveDrawableArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference slideNode = 2;
  if (has_slidenode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->slidenode(), target);
  }

  // repeated .TSP.Reference sortedDrawables = 3;
  for (int i = 0; i < this->sorteddrawables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sorteddrawables(i), target);
  }

  // required .TSP.IndexSet drawableIndices = 4;
  if (has_drawableindices()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->drawableindices(), target);
  }

  // repeated string placeholderTags = 5;
  for (int i = 0; i < this->placeholdertags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->placeholdertags(i).data(), this->placeholdertags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->placeholdertags(i), target);
  }

  // optional .TSP.Reference info_using_object_placeholder_geometry = 6;
  if (has_info_using_object_placeholder_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->info_using_object_placeholder_geometry(), target);
  }

  // optional bool did_match_object_placeholder_geometry = 7;
  if (has_did_match_object_placeholder_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->did_match_object_placeholder_geometry(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSlideRemoveDrawableArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference slideNode = 2;
    if (has_slidenode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slidenode());
    }

    // required .TSP.IndexSet drawableIndices = 4;
    if (has_drawableindices()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drawableindices());
    }

    // optional .TSP.Reference info_using_object_placeholder_geometry = 6;
    if (has_info_using_object_placeholder_geometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info_using_object_placeholder_geometry());
    }

    // optional bool did_match_object_placeholder_geometry = 7;
    if (has_did_match_object_placeholder_geometry()) {
      total_size += 1 + 1;
    }

  }
  // repeated .TSP.Reference sortedDrawables = 3;
  total_size += 1 * this->sorteddrawables_size();
  for (int i = 0; i < this->sorteddrawables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sorteddrawables(i));
  }

  // repeated string placeholderTags = 5;
  total_size += 1 * this->placeholdertags_size();
  for (int i = 0; i < this->placeholdertags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->placeholdertags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSlideRemoveDrawableArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSlideRemoveDrawableArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSlideRemoveDrawableArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSlideRemoveDrawableArchive::MergeFrom(const CommandSlideRemoveDrawableArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  sorteddrawables_.MergeFrom(from.sorteddrawables_);
  placeholdertags_.MergeFrom(from.placeholdertags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_slidenode()) {
      mutable_slidenode()->::TSP::Reference::MergeFrom(from.slidenode());
    }
    if (from.has_drawableindices()) {
      mutable_drawableindices()->::TSP::IndexSet::MergeFrom(from.drawableindices());
    }
    if (from.has_info_using_object_placeholder_geometry()) {
      mutable_info_using_object_placeholder_geometry()->::TSP::Reference::MergeFrom(from.info_using_object_placeholder_geometry());
    }
    if (from.has_did_match_object_placeholder_geometry()) {
      set_did_match_object_placeholder_geometry(from.did_match_object_placeholder_geometry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSlideRemoveDrawableArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSlideRemoveDrawableArchive::CopyFrom(const CommandSlideRemoveDrawableArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideRemoveDrawableArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_slidenode()) {
    if (!this->slidenode().IsInitialized()) return false;
  }
  for (int i = 0; i < sorteddrawables_size(); i++) {
    if (!this->sorteddrawables(i).IsInitialized()) return false;
  }
  if (has_drawableindices()) {
    if (!this->drawableindices().IsInitialized()) return false;
  }
  if (has_info_using_object_placeholder_geometry()) {
    if (!this->info_using_object_placeholder_geometry().IsInitialized()) return false;
  }
  return true;
}

void CommandSlideRemoveDrawableArchive::Swap(CommandSlideRemoveDrawableArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(slidenode_, other->slidenode_);
    sorteddrawables_.Swap(&other->sorteddrawables_);
    std::swap(drawableindices_, other->drawableindices_);
    placeholdertags_.Swap(&other->placeholdertags_);
    std::swap(info_using_object_placeholder_geometry_, other->info_using_object_placeholder_geometry_);
    std::swap(did_match_object_placeholder_geometry_, other->did_match_object_placeholder_geometry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSlideRemoveDrawableArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSlideRemoveDrawableArchive_descriptor_;
  metadata.reflection = CommandSlideRemoveDrawableArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSlideMoveDrawableZOrderArchive::kSuperFieldNumber;
const int CommandSlideMoveDrawableZOrderArchive::kSlideNodeFieldNumber;
const int CommandSlideMoveDrawableZOrderArchive::kInfosFieldNumber;
const int CommandSlideMoveDrawableZOrderArchive::kOldOrderedInfosFieldNumber;
const int CommandSlideMoveDrawableZOrderArchive::kIndexesFieldNumber;
#endif  // !_MSC_VER

CommandSlideMoveDrawableZOrderArchive::CommandSlideMoveDrawableZOrderArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSlideMoveDrawableZOrderArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  slidenode_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  indexes_ = const_cast< ::TSP::IndexSet*>(&::TSP::IndexSet::default_instance());
}

CommandSlideMoveDrawableZOrderArchive::CommandSlideMoveDrawableZOrderArchive(const CommandSlideMoveDrawableZOrderArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSlideMoveDrawableZOrderArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  slidenode_ = NULL;
  indexes_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSlideMoveDrawableZOrderArchive::~CommandSlideMoveDrawableZOrderArchive() {
  SharedDtor();
}

void CommandSlideMoveDrawableZOrderArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete slidenode_;
    delete indexes_;
  }
}

void CommandSlideMoveDrawableZOrderArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSlideMoveDrawableZOrderArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSlideMoveDrawableZOrderArchive_descriptor_;
}

const CommandSlideMoveDrawableZOrderArchive& CommandSlideMoveDrawableZOrderArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSlideMoveDrawableZOrderArchive* CommandSlideMoveDrawableZOrderArchive::default_instance_ = NULL;

CommandSlideMoveDrawableZOrderArchive* CommandSlideMoveDrawableZOrderArchive::New() const {
  return new CommandSlideMoveDrawableZOrderArchive;
}

void CommandSlideMoveDrawableZOrderArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_slidenode()) {
      if (slidenode_ != NULL) slidenode_->::TSP::Reference::Clear();
    }
    if (has_indexes()) {
      if (indexes_ != NULL) indexes_->::TSP::IndexSet::Clear();
    }
  }
  infos_.Clear();
  old_ordered_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSlideMoveDrawableZOrderArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_slideNode;
        break;
      }

      // required .TSP.Reference slideNode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slideNode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slidenode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        break;
      }

      // repeated .TSP.Reference infos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        if (input->ExpectTag(34)) goto parse_old_ordered_infos;
        break;
      }

      // repeated .TSP.Reference old_ordered_infos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_ordered_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_old_ordered_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_old_ordered_infos;
        if (input->ExpectTag(42)) goto parse_indexes;
        break;
      }

      // required .TSP.IndexSet indexes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_indexes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_indexes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSlideMoveDrawableZOrderArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference slideNode = 2;
  if (has_slidenode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slidenode(), output);
  }

  // repeated .TSP.Reference infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->infos(i), output);
  }

  // repeated .TSP.Reference old_ordered_infos = 4;
  for (int i = 0; i < this->old_ordered_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->old_ordered_infos(i), output);
  }

  // required .TSP.IndexSet indexes = 5;
  if (has_indexes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->indexes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSlideMoveDrawableZOrderArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference slideNode = 2;
  if (has_slidenode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->slidenode(), target);
  }

  // repeated .TSP.Reference infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->infos(i), target);
  }

  // repeated .TSP.Reference old_ordered_infos = 4;
  for (int i = 0; i < this->old_ordered_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->old_ordered_infos(i), target);
  }

  // required .TSP.IndexSet indexes = 5;
  if (has_indexes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->indexes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSlideMoveDrawableZOrderArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference slideNode = 2;
    if (has_slidenode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slidenode());
    }

    // required .TSP.IndexSet indexes = 5;
    if (has_indexes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->indexes());
    }

  }
  // repeated .TSP.Reference infos = 3;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  // repeated .TSP.Reference old_ordered_infos = 4;
  total_size += 1 * this->old_ordered_infos_size();
  for (int i = 0; i < this->old_ordered_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->old_ordered_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSlideMoveDrawableZOrderArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSlideMoveDrawableZOrderArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSlideMoveDrawableZOrderArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSlideMoveDrawableZOrderArchive::MergeFrom(const CommandSlideMoveDrawableZOrderArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  old_ordered_infos_.MergeFrom(from.old_ordered_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_slidenode()) {
      mutable_slidenode()->::TSP::Reference::MergeFrom(from.slidenode());
    }
    if (from.has_indexes()) {
      mutable_indexes()->::TSP::IndexSet::MergeFrom(from.indexes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSlideMoveDrawableZOrderArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSlideMoveDrawableZOrderArchive::CopyFrom(const CommandSlideMoveDrawableZOrderArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideMoveDrawableZOrderArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_slidenode()) {
    if (!this->slidenode().IsInitialized()) return false;
  }
  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  for (int i = 0; i < old_ordered_infos_size(); i++) {
    if (!this->old_ordered_infos(i).IsInitialized()) return false;
  }
  if (has_indexes()) {
    if (!this->indexes().IsInitialized()) return false;
  }
  return true;
}

void CommandSlideMoveDrawableZOrderArchive::Swap(CommandSlideMoveDrawableZOrderArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(slidenode_, other->slidenode_);
    infos_.Swap(&other->infos_);
    old_ordered_infos_.Swap(&other->old_ordered_infos_);
    std::swap(indexes_, other->indexes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSlideMoveDrawableZOrderArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSlideMoveDrawableZOrderArchive_descriptor_;
  metadata.reflection = CommandSlideMoveDrawableZOrderArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSlidePasteDrawablesArchive::kSuperFieldNumber;
const int CommandSlidePasteDrawablesArchive::kCommandsFieldNumber;
const int CommandSlidePasteDrawablesArchive::kSlideFieldNumber;
const int CommandSlidePasteDrawablesArchive::kDrawablesFieldNumber;
const int CommandSlidePasteDrawablesArchive::kHasBuildsFieldNumber;
#endif  // !_MSC_VER

CommandSlidePasteDrawablesArchive::CommandSlidePasteDrawablesArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSlidePasteDrawablesArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  slide_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandSlidePasteDrawablesArchive::CommandSlidePasteDrawablesArchive(const CommandSlidePasteDrawablesArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSlidePasteDrawablesArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  slide_ = NULL;
  has_builds_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSlidePasteDrawablesArchive::~CommandSlidePasteDrawablesArchive() {
  SharedDtor();
}

void CommandSlidePasteDrawablesArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete slide_;
  }
}

void CommandSlidePasteDrawablesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSlidePasteDrawablesArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSlidePasteDrawablesArchive_descriptor_;
}

const CommandSlidePasteDrawablesArchive& CommandSlidePasteDrawablesArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSlidePasteDrawablesArchive* CommandSlidePasteDrawablesArchive::default_instance_ = NULL;

CommandSlidePasteDrawablesArchive* CommandSlidePasteDrawablesArchive::New() const {
  return new CommandSlidePasteDrawablesArchive;
}

void CommandSlidePasteDrawablesArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_slide()) {
      if (slide_ != NULL) slide_->::TSP::Reference::Clear();
    }
    has_builds_ = false;
  }
  commands_.Clear();
  drawables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSlidePasteDrawablesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_commands;
        break;
      }

      // repeated .TSP.Reference commands = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_commands()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_commands;
        if (input->ExpectTag(26)) goto parse_slide;
        break;
      }

      // required .TSP.Reference slide = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slide:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slide()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_drawables;
        break;
      }

      // repeated .TSP.Reference drawables = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drawables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drawables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_drawables;
        if (input->ExpectTag(40)) goto parse_has_builds;
        break;
      }

      // optional bool has_builds = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_builds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_builds_)));
          set_has_has_builds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSlidePasteDrawablesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // repeated .TSP.Reference commands = 2;
  for (int i = 0; i < this->commands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commands(i), output);
  }

  // required .TSP.Reference slide = 3;
  if (has_slide()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->slide(), output);
  }

  // repeated .TSP.Reference drawables = 4;
  for (int i = 0; i < this->drawables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->drawables(i), output);
  }

  // optional bool has_builds = 5 [default = false];
  if (has_has_builds()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->has_builds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSlidePasteDrawablesArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // repeated .TSP.Reference commands = 2;
  for (int i = 0; i < this->commands_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commands(i), target);
  }

  // required .TSP.Reference slide = 3;
  if (has_slide()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->slide(), target);
  }

  // repeated .TSP.Reference drawables = 4;
  for (int i = 0; i < this->drawables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->drawables(i), target);
  }

  // optional bool has_builds = 5 [default = false];
  if (has_has_builds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->has_builds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSlidePasteDrawablesArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference slide = 3;
    if (has_slide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slide());
    }

    // optional bool has_builds = 5 [default = false];
    if (has_has_builds()) {
      total_size += 1 + 1;
    }

  }
  // repeated .TSP.Reference commands = 2;
  total_size += 1 * this->commands_size();
  for (int i = 0; i < this->commands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commands(i));
  }

  // repeated .TSP.Reference drawables = 4;
  total_size += 1 * this->drawables_size();
  for (int i = 0; i < this->drawables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drawables(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSlidePasteDrawablesArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSlidePasteDrawablesArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSlidePasteDrawablesArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSlidePasteDrawablesArchive::MergeFrom(const CommandSlidePasteDrawablesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  commands_.MergeFrom(from.commands_);
  drawables_.MergeFrom(from.drawables_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_slide()) {
      mutable_slide()->::TSP::Reference::MergeFrom(from.slide());
    }
    if (from.has_has_builds()) {
      set_has_builds(from.has_builds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSlidePasteDrawablesArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSlidePasteDrawablesArchive::CopyFrom(const CommandSlidePasteDrawablesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlidePasteDrawablesArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  for (int i = 0; i < commands_size(); i++) {
    if (!this->commands(i).IsInitialized()) return false;
  }
  if (has_slide()) {
    if (!this->slide().IsInitialized()) return false;
  }
  for (int i = 0; i < drawables_size(); i++) {
    if (!this->drawables(i).IsInitialized()) return false;
  }
  return true;
}

void CommandSlidePasteDrawablesArchive::Swap(CommandSlidePasteDrawablesArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    commands_.Swap(&other->commands_);
    std::swap(slide_, other->slide_);
    drawables_.Swap(&other->drawables_);
    std::swap(has_builds_, other->has_builds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSlidePasteDrawablesArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSlidePasteDrawablesArchive_descriptor_;
  metadata.reflection = CommandSlidePasteDrawablesArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSlideNodeSetPropertyArchive_PropertyValue::kBoolValueFieldNumber;
const int CommandSlideNodeSetPropertyArchive_PropertyValue::kImageFieldNumber;
const int CommandSlideNodeSetPropertyArchive_PropertyValue::kDatabaseImageFieldNumber;
#endif  // !_MSC_VER

CommandSlideNodeSetPropertyArchive_PropertyValue::CommandSlideNodeSetPropertyArchive_PropertyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSlideNodeSetPropertyArchive_PropertyValue::InitAsDefaultInstance() {
  image_ = const_cast< ::TSP::DataReference*>(&::TSP::DataReference::default_instance());
  database_image_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandSlideNodeSetPropertyArchive_PropertyValue::CommandSlideNodeSetPropertyArchive_PropertyValue(const CommandSlideNodeSetPropertyArchive_PropertyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSlideNodeSetPropertyArchive_PropertyValue::SharedCtor() {
  _cached_size_ = 0;
  boolvalue_ = false;
  image_ = NULL;
  database_image_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSlideNodeSetPropertyArchive_PropertyValue::~CommandSlideNodeSetPropertyArchive_PropertyValue() {
  SharedDtor();
}

void CommandSlideNodeSetPropertyArchive_PropertyValue::SharedDtor() {
  if (this != default_instance_) {
    delete image_;
    delete database_image_;
  }
}

void CommandSlideNodeSetPropertyArchive_PropertyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSlideNodeSetPropertyArchive_PropertyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSlideNodeSetPropertyArchive_PropertyValue_descriptor_;
}

const CommandSlideNodeSetPropertyArchive_PropertyValue& CommandSlideNodeSetPropertyArchive_PropertyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSlideNodeSetPropertyArchive_PropertyValue* CommandSlideNodeSetPropertyArchive_PropertyValue::default_instance_ = NULL;

CommandSlideNodeSetPropertyArchive_PropertyValue* CommandSlideNodeSetPropertyArchive_PropertyValue::New() const {
  return new CommandSlideNodeSetPropertyArchive_PropertyValue;
}

void CommandSlideNodeSetPropertyArchive_PropertyValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    boolvalue_ = false;
    if (has_image()) {
      if (image_ != NULL) image_->::TSP::DataReference::Clear();
    }
    if (has_database_image()) {
      if (database_image_ != NULL) database_image_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSlideNodeSetPropertyArchive_PropertyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool boolValue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boolvalue_)));
          set_has_boolvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_database_image;
        break;
      }

      // optional .TSP.Reference database_image = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_database_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_database_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_image;
        break;
      }

      // optional .TSP.DataReference image = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSlideNodeSetPropertyArchive_PropertyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool boolValue = 1;
  if (has_boolvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->boolvalue(), output);
  }

  // optional .TSP.Reference database_image = 2;
  if (has_database_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->database_image(), output);
  }

  // optional .TSP.DataReference image = 3;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->image(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSlideNodeSetPropertyArchive_PropertyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool boolValue = 1;
  if (has_boolvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->boolvalue(), target);
  }

  // optional .TSP.Reference database_image = 2;
  if (has_database_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->database_image(), target);
  }

  // optional .TSP.DataReference image = 3;
  if (has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->image(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSlideNodeSetPropertyArchive_PropertyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool boolValue = 1;
    if (has_boolvalue()) {
      total_size += 1 + 1;
    }

    // optional .TSP.DataReference image = 3;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image());
    }

    // optional .TSP.Reference database_image = 2;
    if (has_database_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->database_image());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSlideNodeSetPropertyArchive_PropertyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSlideNodeSetPropertyArchive_PropertyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSlideNodeSetPropertyArchive_PropertyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSlideNodeSetPropertyArchive_PropertyValue::MergeFrom(const CommandSlideNodeSetPropertyArchive_PropertyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boolvalue()) {
      set_boolvalue(from.boolvalue());
    }
    if (from.has_image()) {
      mutable_image()->::TSP::DataReference::MergeFrom(from.image());
    }
    if (from.has_database_image()) {
      mutable_database_image()->::TSP::Reference::MergeFrom(from.database_image());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSlideNodeSetPropertyArchive_PropertyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSlideNodeSetPropertyArchive_PropertyValue::CopyFrom(const CommandSlideNodeSetPropertyArchive_PropertyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideNodeSetPropertyArchive_PropertyValue::IsInitialized() const {

  if (has_image()) {
    if (!this->image().IsInitialized()) return false;
  }
  if (has_database_image()) {
    if (!this->database_image().IsInitialized()) return false;
  }
  return true;
}

void CommandSlideNodeSetPropertyArchive_PropertyValue::Swap(CommandSlideNodeSetPropertyArchive_PropertyValue* other) {
  if (other != this) {
    std::swap(boolvalue_, other->boolvalue_);
    std::swap(image_, other->image_);
    std::swap(database_image_, other->database_image_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSlideNodeSetPropertyArchive_PropertyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSlideNodeSetPropertyArchive_PropertyValue_descriptor_;
  metadata.reflection = CommandSlideNodeSetPropertyArchive_PropertyValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CommandSlideNodeSetPropertyArchive::kSuperFieldNumber;
const int CommandSlideNodeSetPropertyArchive::kSlideNodeFieldNumber;
const int CommandSlideNodeSetPropertyArchive::kPropertyFieldNumber;
const int CommandSlideNodeSetPropertyArchive::kOldValueFieldNumber;
const int CommandSlideNodeSetPropertyArchive::kNewValueFieldNumber;
#endif  // !_MSC_VER

CommandSlideNodeSetPropertyArchive::CommandSlideNodeSetPropertyArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSlideNodeSetPropertyArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  slidenode_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  oldvalue_ = const_cast< ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue*>(&::KN::CommandSlideNodeSetPropertyArchive_PropertyValue::default_instance());
  newvalue_ = const_cast< ::KN::CommandSlideNodeSetPropertyArchive_PropertyValue*>(&::KN::CommandSlideNodeSetPropertyArchive_PropertyValue::default_instance());
}

CommandSlideNodeSetPropertyArchive::CommandSlideNodeSetPropertyArchive(const CommandSlideNodeSetPropertyArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSlideNodeSetPropertyArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  slidenode_ = NULL;
  property_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  oldvalue_ = NULL;
  newvalue_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSlideNodeSetPropertyArchive::~CommandSlideNodeSetPropertyArchive() {
  SharedDtor();
}

void CommandSlideNodeSetPropertyArchive::SharedDtor() {
  if (property_ != &::google::protobuf::internal::kEmptyString) {
    delete property_;
  }
  if (this != default_instance_) {
    delete super_;
    delete slidenode_;
    delete oldvalue_;
    delete newvalue_;
  }
}

void CommandSlideNodeSetPropertyArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSlideNodeSetPropertyArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSlideNodeSetPropertyArchive_descriptor_;
}

const CommandSlideNodeSetPropertyArchive& CommandSlideNodeSetPropertyArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSlideNodeSetPropertyArchive* CommandSlideNodeSetPropertyArchive::default_instance_ = NULL;

CommandSlideNodeSetPropertyArchive* CommandSlideNodeSetPropertyArchive::New() const {
  return new CommandSlideNodeSetPropertyArchive;
}

void CommandSlideNodeSetPropertyArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_slidenode()) {
      if (slidenode_ != NULL) slidenode_->::TSP::Reference::Clear();
    }
    if (has_property()) {
      if (property_ != &::google::protobuf::internal::kEmptyString) {
        property_->clear();
      }
    }
    if (has_oldvalue()) {
      if (oldvalue_ != NULL) oldvalue_->::KN::CommandSlideNodeSetPropertyArchive_PropertyValue::Clear();
    }
    if (has_newvalue()) {
      if (newvalue_ != NULL) newvalue_->::KN::CommandSlideNodeSetPropertyArchive_PropertyValue::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSlideNodeSetPropertyArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_slideNode;
        break;
      }

      // required .TSP.Reference slideNode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slideNode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slidenode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_property;
        break;
      }

      // required string property = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_property()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->property().data(), this->property().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_oldValue;
        break;
      }

      // required .KN.CommandSlideNodeSetPropertyArchive.PropertyValue oldValue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldvalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_newValue;
        break;
      }

      // required .KN.CommandSlideNodeSetPropertyArchive.PropertyValue newValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newvalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSlideNodeSetPropertyArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference slideNode = 2;
  if (has_slidenode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slidenode(), output);
  }

  // required string property = 3;
  if (has_property()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->property().data(), this->property().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->property(), output);
  }

  // required .KN.CommandSlideNodeSetPropertyArchive.PropertyValue oldValue = 4;
  if (has_oldvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->oldvalue(), output);
  }

  // required .KN.CommandSlideNodeSetPropertyArchive.PropertyValue newValue = 5;
  if (has_newvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->newvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSlideNodeSetPropertyArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference slideNode = 2;
  if (has_slidenode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->slidenode(), target);
  }

  // required string property = 3;
  if (has_property()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->property().data(), this->property().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->property(), target);
  }

  // required .KN.CommandSlideNodeSetPropertyArchive.PropertyValue oldValue = 4;
  if (has_oldvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->oldvalue(), target);
  }

  // required .KN.CommandSlideNodeSetPropertyArchive.PropertyValue newValue = 5;
  if (has_newvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->newvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSlideNodeSetPropertyArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference slideNode = 2;
    if (has_slidenode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slidenode());
    }

    // required string property = 3;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->property());
    }

    // required .KN.CommandSlideNodeSetPropertyArchive.PropertyValue oldValue = 4;
    if (has_oldvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oldvalue());
    }

    // required .KN.CommandSlideNodeSetPropertyArchive.PropertyValue newValue = 5;
    if (has_newvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSlideNodeSetPropertyArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSlideNodeSetPropertyArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSlideNodeSetPropertyArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSlideNodeSetPropertyArchive::MergeFrom(const CommandSlideNodeSetPropertyArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_slidenode()) {
      mutable_slidenode()->::TSP::Reference::MergeFrom(from.slidenode());
    }
    if (from.has_property()) {
      set_property(from.property());
    }
    if (from.has_oldvalue()) {
      mutable_oldvalue()->::KN::CommandSlideNodeSetPropertyArchive_PropertyValue::MergeFrom(from.oldvalue());
    }
    if (from.has_newvalue()) {
      mutable_newvalue()->::KN::CommandSlideNodeSetPropertyArchive_PropertyValue::MergeFrom(from.newvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSlideNodeSetPropertyArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSlideNodeSetPropertyArchive::CopyFrom(const CommandSlideNodeSetPropertyArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideNodeSetPropertyArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_slidenode()) {
    if (!this->slidenode().IsInitialized()) return false;
  }
  if (has_oldvalue()) {
    if (!this->oldvalue().IsInitialized()) return false;
  }
  if (has_newvalue()) {
    if (!this->newvalue().IsInitialized()) return false;
  }
  return true;
}

void CommandSlideNodeSetPropertyArchive::Swap(CommandSlideNodeSetPropertyArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(slidenode_, other->slidenode_);
    std::swap(property_, other->property_);
    std::swap(oldvalue_, other->oldvalue_);
    std::swap(newvalue_, other->newvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSlideNodeSetPropertyArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSlideNodeSetPropertyArchive_descriptor_;
  metadata.reflection = CommandSlideNodeSetPropertyArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSlideSetValueArchive_PropertyValue::kBoolValueFieldNumber;
const int CommandSlideSetValueArchive_PropertyValue::kObjectValueFieldNumber;
const int CommandSlideSetValueArchive_PropertyValue::kFillFieldNumber;
#endif  // !_MSC_VER

CommandSlideSetValueArchive_PropertyValue::CommandSlideSetValueArchive_PropertyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSlideSetValueArchive_PropertyValue::InitAsDefaultInstance() {
  objectvalue_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  fill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
}

CommandSlideSetValueArchive_PropertyValue::CommandSlideSetValueArchive_PropertyValue(const CommandSlideSetValueArchive_PropertyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSlideSetValueArchive_PropertyValue::SharedCtor() {
  _cached_size_ = 0;
  boolvalue_ = false;
  objectvalue_ = NULL;
  fill_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSlideSetValueArchive_PropertyValue::~CommandSlideSetValueArchive_PropertyValue() {
  SharedDtor();
}

void CommandSlideSetValueArchive_PropertyValue::SharedDtor() {
  if (this != default_instance_) {
    delete objectvalue_;
    delete fill_;
  }
}

void CommandSlideSetValueArchive_PropertyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSlideSetValueArchive_PropertyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSlideSetValueArchive_PropertyValue_descriptor_;
}

const CommandSlideSetValueArchive_PropertyValue& CommandSlideSetValueArchive_PropertyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSlideSetValueArchive_PropertyValue* CommandSlideSetValueArchive_PropertyValue::default_instance_ = NULL;

CommandSlideSetValueArchive_PropertyValue* CommandSlideSetValueArchive_PropertyValue::New() const {
  return new CommandSlideSetValueArchive_PropertyValue;
}

void CommandSlideSetValueArchive_PropertyValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    boolvalue_ = false;
    if (has_objectvalue()) {
      if (objectvalue_ != NULL) objectvalue_->::TSP::Reference::Clear();
    }
    if (has_fill()) {
      if (fill_ != NULL) fill_->::TSD::FillArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSlideSetValueArchive_PropertyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool boolValue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boolvalue_)));
          set_has_boolvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_objectValue;
        break;
      }

      // optional .TSP.Reference objectValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objectValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_objectvalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fill;
        break;
      }

      // optional .TSD.FillArchive fill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSlideSetValueArchive_PropertyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool boolValue = 1;
  if (has_boolvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->boolvalue(), output);
  }

  // optional .TSP.Reference objectValue = 2;
  if (has_objectvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->objectvalue(), output);
  }

  // optional .TSD.FillArchive fill = 3;
  if (has_fill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSlideSetValueArchive_PropertyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool boolValue = 1;
  if (has_boolvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->boolvalue(), target);
  }

  // optional .TSP.Reference objectValue = 2;
  if (has_objectvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->objectvalue(), target);
  }

  // optional .TSD.FillArchive fill = 3;
  if (has_fill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSlideSetValueArchive_PropertyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool boolValue = 1;
    if (has_boolvalue()) {
      total_size += 1 + 1;
    }

    // optional .TSP.Reference objectValue = 2;
    if (has_objectvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objectvalue());
    }

    // optional .TSD.FillArchive fill = 3;
    if (has_fill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fill());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSlideSetValueArchive_PropertyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSlideSetValueArchive_PropertyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSlideSetValueArchive_PropertyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSlideSetValueArchive_PropertyValue::MergeFrom(const CommandSlideSetValueArchive_PropertyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boolvalue()) {
      set_boolvalue(from.boolvalue());
    }
    if (from.has_objectvalue()) {
      mutable_objectvalue()->::TSP::Reference::MergeFrom(from.objectvalue());
    }
    if (from.has_fill()) {
      mutable_fill()->::TSD::FillArchive::MergeFrom(from.fill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSlideSetValueArchive_PropertyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSlideSetValueArchive_PropertyValue::CopyFrom(const CommandSlideSetValueArchive_PropertyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideSetValueArchive_PropertyValue::IsInitialized() const {

  if (has_objectvalue()) {
    if (!this->objectvalue().IsInitialized()) return false;
  }
  if (has_fill()) {
    if (!this->fill().IsInitialized()) return false;
  }
  return true;
}

void CommandSlideSetValueArchive_PropertyValue::Swap(CommandSlideSetValueArchive_PropertyValue* other) {
  if (other != this) {
    std::swap(boolvalue_, other->boolvalue_);
    std::swap(objectvalue_, other->objectvalue_);
    std::swap(fill_, other->fill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSlideSetValueArchive_PropertyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSlideSetValueArchive_PropertyValue_descriptor_;
  metadata.reflection = CommandSlideSetValueArchive_PropertyValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CommandSlideSetValueArchive::kSuperFieldNumber;
const int CommandSlideSetValueArchive::kSlideFieldNumber;
const int CommandSlideSetValueArchive::kPropertyFieldNumber;
const int CommandSlideSetValueArchive::kOldValueFieldNumber;
const int CommandSlideSetValueArchive::kNewValueFieldNumber;
const int CommandSlideSetValueArchive::kOldSlideStyleFieldNumber;
#endif  // !_MSC_VER

CommandSlideSetValueArchive::CommandSlideSetValueArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSlideSetValueArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  slide_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  oldvalue_ = const_cast< ::KN::CommandSlideSetValueArchive_PropertyValue*>(&::KN::CommandSlideSetValueArchive_PropertyValue::default_instance());
  newvalue_ = const_cast< ::KN::CommandSlideSetValueArchive_PropertyValue*>(&::KN::CommandSlideSetValueArchive_PropertyValue::default_instance());
  oldslidestyle_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandSlideSetValueArchive::CommandSlideSetValueArchive(const CommandSlideSetValueArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSlideSetValueArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  slide_ = NULL;
  property_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  oldvalue_ = NULL;
  newvalue_ = NULL;
  oldslidestyle_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSlideSetValueArchive::~CommandSlideSetValueArchive() {
  SharedDtor();
}

void CommandSlideSetValueArchive::SharedDtor() {
  if (property_ != &::google::protobuf::internal::kEmptyString) {
    delete property_;
  }
  if (this != default_instance_) {
    delete super_;
    delete slide_;
    delete oldvalue_;
    delete newvalue_;
    delete oldslidestyle_;
  }
}

void CommandSlideSetValueArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSlideSetValueArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSlideSetValueArchive_descriptor_;
}

const CommandSlideSetValueArchive& CommandSlideSetValueArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSlideSetValueArchive* CommandSlideSetValueArchive::default_instance_ = NULL;

CommandSlideSetValueArchive* CommandSlideSetValueArchive::New() const {
  return new CommandSlideSetValueArchive;
}

void CommandSlideSetValueArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_slide()) {
      if (slide_ != NULL) slide_->::TSP::Reference::Clear();
    }
    if (has_property()) {
      if (property_ != &::google::protobuf::internal::kEmptyString) {
        property_->clear();
      }
    }
    if (has_oldvalue()) {
      if (oldvalue_ != NULL) oldvalue_->::KN::CommandSlideSetValueArchive_PropertyValue::Clear();
    }
    if (has_newvalue()) {
      if (newvalue_ != NULL) newvalue_->::KN::CommandSlideSetValueArchive_PropertyValue::Clear();
    }
    if (has_oldslidestyle()) {
      if (oldslidestyle_ != NULL) oldslidestyle_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSlideSetValueArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_slide;
        break;
      }

      // required .TSP.Reference slide = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slide:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slide()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_property;
        break;
      }

      // required string property = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_property()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->property().data(), this->property().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_oldValue;
        break;
      }

      // required .KN.CommandSlideSetValueArchive.PropertyValue oldValue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldvalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_newValue;
        break;
      }

      // required .KN.CommandSlideSetValueArchive.PropertyValue newValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newvalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_oldSlideStyle;
        break;
      }

      // required .TSP.Reference oldSlideStyle = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldSlideStyle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldslidestyle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSlideSetValueArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference slide = 2;
  if (has_slide()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slide(), output);
  }

  // required string property = 3;
  if (has_property()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->property().data(), this->property().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->property(), output);
  }

  // required .KN.CommandSlideSetValueArchive.PropertyValue oldValue = 4;
  if (has_oldvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->oldvalue(), output);
  }

  // required .KN.CommandSlideSetValueArchive.PropertyValue newValue = 5;
  if (has_newvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->newvalue(), output);
  }

  // required .TSP.Reference oldSlideStyle = 6;
  if (has_oldslidestyle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->oldslidestyle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSlideSetValueArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference slide = 2;
  if (has_slide()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->slide(), target);
  }

  // required string property = 3;
  if (has_property()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->property().data(), this->property().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->property(), target);
  }

  // required .KN.CommandSlideSetValueArchive.PropertyValue oldValue = 4;
  if (has_oldvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->oldvalue(), target);
  }

  // required .KN.CommandSlideSetValueArchive.PropertyValue newValue = 5;
  if (has_newvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->newvalue(), target);
  }

  // required .TSP.Reference oldSlideStyle = 6;
  if (has_oldslidestyle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->oldslidestyle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSlideSetValueArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference slide = 2;
    if (has_slide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slide());
    }

    // required string property = 3;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->property());
    }

    // required .KN.CommandSlideSetValueArchive.PropertyValue oldValue = 4;
    if (has_oldvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oldvalue());
    }

    // required .KN.CommandSlideSetValueArchive.PropertyValue newValue = 5;
    if (has_newvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newvalue());
    }

    // required .TSP.Reference oldSlideStyle = 6;
    if (has_oldslidestyle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oldslidestyle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSlideSetValueArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSlideSetValueArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSlideSetValueArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSlideSetValueArchive::MergeFrom(const CommandSlideSetValueArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_slide()) {
      mutable_slide()->::TSP::Reference::MergeFrom(from.slide());
    }
    if (from.has_property()) {
      set_property(from.property());
    }
    if (from.has_oldvalue()) {
      mutable_oldvalue()->::KN::CommandSlideSetValueArchive_PropertyValue::MergeFrom(from.oldvalue());
    }
    if (from.has_newvalue()) {
      mutable_newvalue()->::KN::CommandSlideSetValueArchive_PropertyValue::MergeFrom(from.newvalue());
    }
    if (from.has_oldslidestyle()) {
      mutable_oldslidestyle()->::TSP::Reference::MergeFrom(from.oldslidestyle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSlideSetValueArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSlideSetValueArchive::CopyFrom(const CommandSlideSetValueArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideSetValueArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_slide()) {
    if (!this->slide().IsInitialized()) return false;
  }
  if (has_oldvalue()) {
    if (!this->oldvalue().IsInitialized()) return false;
  }
  if (has_newvalue()) {
    if (!this->newvalue().IsInitialized()) return false;
  }
  if (has_oldslidestyle()) {
    if (!this->oldslidestyle().IsInitialized()) return false;
  }
  return true;
}

void CommandSlideSetValueArchive::Swap(CommandSlideSetValueArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(slide_, other->slide_);
    std::swap(property_, other->property_);
    std::swap(oldvalue_, other->oldvalue_);
    std::swap(newvalue_, other->newvalue_);
    std::swap(oldslidestyle_, other->oldslidestyle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSlideSetValueArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSlideSetValueArchive_descriptor_;
  metadata.reflection = CommandSlideSetValueArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSlideSetStyleArchive::kSuperFieldNumber;
const int CommandSlideSetStyleArchive::kSlideFieldNumber;
const int CommandSlideSetStyleArchive::kSlideStyleFieldNumber;
const int CommandSlideSetStyleArchive::kOldSlideStyleFieldNumber;
#endif  // !_MSC_VER

CommandSlideSetStyleArchive::CommandSlideSetStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSlideSetStyleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  slide_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  slide_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  old_slide_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandSlideSetStyleArchive::CommandSlideSetStyleArchive(const CommandSlideSetStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSlideSetStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  slide_ = NULL;
  slide_style_ = NULL;
  old_slide_style_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSlideSetStyleArchive::~CommandSlideSetStyleArchive() {
  SharedDtor();
}

void CommandSlideSetStyleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete slide_;
    delete slide_style_;
    delete old_slide_style_;
  }
}

void CommandSlideSetStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSlideSetStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSlideSetStyleArchive_descriptor_;
}

const CommandSlideSetStyleArchive& CommandSlideSetStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSlideSetStyleArchive* CommandSlideSetStyleArchive::default_instance_ = NULL;

CommandSlideSetStyleArchive* CommandSlideSetStyleArchive::New() const {
  return new CommandSlideSetStyleArchive;
}

void CommandSlideSetStyleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_slide()) {
      if (slide_ != NULL) slide_->::TSP::Reference::Clear();
    }
    if (has_slide_style()) {
      if (slide_style_ != NULL) slide_style_->::TSP::Reference::Clear();
    }
    if (has_old_slide_style()) {
      if (old_slide_style_ != NULL) old_slide_style_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSlideSetStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_slide;
        break;
      }

      // required .TSP.Reference slide = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slide:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slide()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_slide_style;
        break;
      }

      // required .TSP.Reference slide_style = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slide_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slide_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_old_slide_style;
        break;
      }

      // required .TSP.Reference old_slide_style = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_slide_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_slide_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSlideSetStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference slide = 2;
  if (has_slide()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slide(), output);
  }

  // required .TSP.Reference slide_style = 3;
  if (has_slide_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->slide_style(), output);
  }

  // required .TSP.Reference old_slide_style = 4;
  if (has_old_slide_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->old_slide_style(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSlideSetStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference slide = 2;
  if (has_slide()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->slide(), target);
  }

  // required .TSP.Reference slide_style = 3;
  if (has_slide_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->slide_style(), target);
  }

  // required .TSP.Reference old_slide_style = 4;
  if (has_old_slide_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->old_slide_style(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSlideSetStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference slide = 2;
    if (has_slide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slide());
    }

    // required .TSP.Reference slide_style = 3;
    if (has_slide_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slide_style());
    }

    // required .TSP.Reference old_slide_style = 4;
    if (has_old_slide_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_slide_style());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSlideSetStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSlideSetStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSlideSetStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSlideSetStyleArchive::MergeFrom(const CommandSlideSetStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_slide()) {
      mutable_slide()->::TSP::Reference::MergeFrom(from.slide());
    }
    if (from.has_slide_style()) {
      mutable_slide_style()->::TSP::Reference::MergeFrom(from.slide_style());
    }
    if (from.has_old_slide_style()) {
      mutable_old_slide_style()->::TSP::Reference::MergeFrom(from.old_slide_style());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSlideSetStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSlideSetStyleArchive::CopyFrom(const CommandSlideSetStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideSetStyleArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_slide()) {
    if (!this->slide().IsInitialized()) return false;
  }
  if (has_slide_style()) {
    if (!this->slide_style().IsInitialized()) return false;
  }
  if (has_old_slide_style()) {
    if (!this->old_slide_style().IsInitialized()) return false;
  }
  return true;
}

void CommandSlideSetStyleArchive::Swap(CommandSlideSetStyleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(slide_, other->slide_);
    std::swap(slide_style_, other->slide_style_);
    std::swap(old_slide_style_, other->old_slide_style_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSlideSetStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSlideSetStyleArchive_descriptor_;
  metadata.reflection = CommandSlideSetStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandShowMarkOutOfSyncRecordingArchive::kSuperFieldNumber;
const int CommandShowMarkOutOfSyncRecordingArchive::kShowFieldNumber;
const int CommandShowMarkOutOfSyncRecordingArchive::kOldRecordingFieldNumber;
#endif  // !_MSC_VER

CommandShowMarkOutOfSyncRecordingArchive::CommandShowMarkOutOfSyncRecordingArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandShowMarkOutOfSyncRecordingArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  show_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  old_recording_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandShowMarkOutOfSyncRecordingArchive::CommandShowMarkOutOfSyncRecordingArchive(const CommandShowMarkOutOfSyncRecordingArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandShowMarkOutOfSyncRecordingArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  show_ = NULL;
  old_recording_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandShowMarkOutOfSyncRecordingArchive::~CommandShowMarkOutOfSyncRecordingArchive() {
  SharedDtor();
}

void CommandShowMarkOutOfSyncRecordingArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete show_;
    delete old_recording_;
  }
}

void CommandShowMarkOutOfSyncRecordingArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandShowMarkOutOfSyncRecordingArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandShowMarkOutOfSyncRecordingArchive_descriptor_;
}

const CommandShowMarkOutOfSyncRecordingArchive& CommandShowMarkOutOfSyncRecordingArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandShowMarkOutOfSyncRecordingArchive* CommandShowMarkOutOfSyncRecordingArchive::default_instance_ = NULL;

CommandShowMarkOutOfSyncRecordingArchive* CommandShowMarkOutOfSyncRecordingArchive::New() const {
  return new CommandShowMarkOutOfSyncRecordingArchive;
}

void CommandShowMarkOutOfSyncRecordingArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_show()) {
      if (show_ != NULL) show_->::TSP::Reference::Clear();
    }
    if (has_old_recording()) {
      if (old_recording_ != NULL) old_recording_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandShowMarkOutOfSyncRecordingArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_show;
        break;
      }

      // required .TSP.Reference show = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_show:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_show()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_old_recording;
        break;
      }

      // optional .TSP.Reference old_recording = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_recording:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_recording()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandShowMarkOutOfSyncRecordingArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference show = 2;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->show(), output);
  }

  // optional .TSP.Reference old_recording = 3;
  if (has_old_recording()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->old_recording(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandShowMarkOutOfSyncRecordingArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference show = 2;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->show(), target);
  }

  // optional .TSP.Reference old_recording = 3;
  if (has_old_recording()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->old_recording(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandShowMarkOutOfSyncRecordingArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference show = 2;
    if (has_show()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->show());
    }

    // optional .TSP.Reference old_recording = 3;
    if (has_old_recording()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_recording());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandShowMarkOutOfSyncRecordingArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandShowMarkOutOfSyncRecordingArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandShowMarkOutOfSyncRecordingArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandShowMarkOutOfSyncRecordingArchive::MergeFrom(const CommandShowMarkOutOfSyncRecordingArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_show()) {
      mutable_show()->::TSP::Reference::MergeFrom(from.show());
    }
    if (from.has_old_recording()) {
      mutable_old_recording()->::TSP::Reference::MergeFrom(from.old_recording());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandShowMarkOutOfSyncRecordingArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandShowMarkOutOfSyncRecordingArchive::CopyFrom(const CommandShowMarkOutOfSyncRecordingArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowMarkOutOfSyncRecordingArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_show()) {
    if (!this->show().IsInitialized()) return false;
  }
  if (has_old_recording()) {
    if (!this->old_recording().IsInitialized()) return false;
  }
  return true;
}

void CommandShowMarkOutOfSyncRecordingArchive::Swap(CommandShowMarkOutOfSyncRecordingArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(show_, other->show_);
    std::swap(old_recording_, other->old_recording_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandShowMarkOutOfSyncRecordingArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandShowMarkOutOfSyncRecordingArchive_descriptor_;
  metadata.reflection = CommandShowMarkOutOfSyncRecordingArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandShowRemoveRecordingArchive::kSuperFieldNumber;
const int CommandShowRemoveRecordingArchive::kShowFieldNumber;
const int CommandShowRemoveRecordingArchive::kOldRecordingFieldNumber;
#endif  // !_MSC_VER

CommandShowRemoveRecordingArchive::CommandShowRemoveRecordingArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandShowRemoveRecordingArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  show_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  old_recording_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandShowRemoveRecordingArchive::CommandShowRemoveRecordingArchive(const CommandShowRemoveRecordingArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandShowRemoveRecordingArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  show_ = NULL;
  old_recording_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandShowRemoveRecordingArchive::~CommandShowRemoveRecordingArchive() {
  SharedDtor();
}

void CommandShowRemoveRecordingArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete show_;
    delete old_recording_;
  }
}

void CommandShowRemoveRecordingArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandShowRemoveRecordingArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandShowRemoveRecordingArchive_descriptor_;
}

const CommandShowRemoveRecordingArchive& CommandShowRemoveRecordingArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandShowRemoveRecordingArchive* CommandShowRemoveRecordingArchive::default_instance_ = NULL;

CommandShowRemoveRecordingArchive* CommandShowRemoveRecordingArchive::New() const {
  return new CommandShowRemoveRecordingArchive;
}

void CommandShowRemoveRecordingArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_show()) {
      if (show_ != NULL) show_->::TSP::Reference::Clear();
    }
    if (has_old_recording()) {
      if (old_recording_ != NULL) old_recording_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandShowRemoveRecordingArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_show;
        break;
      }

      // required .TSP.Reference show = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_show:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_show()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_old_recording;
        break;
      }

      // optional .TSP.Reference old_recording = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_recording:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_recording()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandShowRemoveRecordingArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference show = 2;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->show(), output);
  }

  // optional .TSP.Reference old_recording = 3;
  if (has_old_recording()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->old_recording(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandShowRemoveRecordingArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference show = 2;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->show(), target);
  }

  // optional .TSP.Reference old_recording = 3;
  if (has_old_recording()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->old_recording(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandShowRemoveRecordingArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference show = 2;
    if (has_show()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->show());
    }

    // optional .TSP.Reference old_recording = 3;
    if (has_old_recording()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_recording());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandShowRemoveRecordingArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandShowRemoveRecordingArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandShowRemoveRecordingArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandShowRemoveRecordingArchive::MergeFrom(const CommandShowRemoveRecordingArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_show()) {
      mutable_show()->::TSP::Reference::MergeFrom(from.show());
    }
    if (from.has_old_recording()) {
      mutable_old_recording()->::TSP::Reference::MergeFrom(from.old_recording());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandShowRemoveRecordingArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandShowRemoveRecordingArchive::CopyFrom(const CommandShowRemoveRecordingArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowRemoveRecordingArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_show()) {
    if (!this->show().IsInitialized()) return false;
  }
  if (has_old_recording()) {
    if (!this->old_recording().IsInitialized()) return false;
  }
  return true;
}

void CommandShowRemoveRecordingArchive::Swap(CommandShowRemoveRecordingArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(show_, other->show_);
    std::swap(old_recording_, other->old_recording_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandShowRemoveRecordingArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandShowRemoveRecordingArchive_descriptor_;
  metadata.reflection = CommandShowRemoveRecordingArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandShowReplaceRecordingArchive::kSuperFieldNumber;
const int CommandShowReplaceRecordingArchive::kShowFieldNumber;
const int CommandShowReplaceRecordingArchive::kReplacementRecordingFieldNumber;
const int CommandShowReplaceRecordingArchive::kReplacementStartTimeFieldNumber;
const int CommandShowReplaceRecordingArchive::kOldRecordingFieldNumber;
#endif  // !_MSC_VER

CommandShowReplaceRecordingArchive::CommandShowReplaceRecordingArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandShowReplaceRecordingArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  show_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  replacement_recording_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  old_recording_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandShowReplaceRecordingArchive::CommandShowReplaceRecordingArchive(const CommandShowReplaceRecordingArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandShowReplaceRecordingArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  show_ = NULL;
  replacement_recording_ = NULL;
  replacement_start_time_ = 0;
  old_recording_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandShowReplaceRecordingArchive::~CommandShowReplaceRecordingArchive() {
  SharedDtor();
}

void CommandShowReplaceRecordingArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete show_;
    delete replacement_recording_;
    delete old_recording_;
  }
}

void CommandShowReplaceRecordingArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandShowReplaceRecordingArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandShowReplaceRecordingArchive_descriptor_;
}

const CommandShowReplaceRecordingArchive& CommandShowReplaceRecordingArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandShowReplaceRecordingArchive* CommandShowReplaceRecordingArchive::default_instance_ = NULL;

CommandShowReplaceRecordingArchive* CommandShowReplaceRecordingArchive::New() const {
  return new CommandShowReplaceRecordingArchive;
}

void CommandShowReplaceRecordingArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_show()) {
      if (show_ != NULL) show_->::TSP::Reference::Clear();
    }
    if (has_replacement_recording()) {
      if (replacement_recording_ != NULL) replacement_recording_->::TSP::Reference::Clear();
    }
    replacement_start_time_ = 0;
    if (has_old_recording()) {
      if (old_recording_ != NULL) old_recording_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandShowReplaceRecordingArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_show;
        break;
      }

      // required .TSP.Reference show = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_show:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_show()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_replacement_recording;
        break;
      }

      // required .TSP.Reference replacement_recording = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_replacement_recording:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replacement_recording()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_replacement_start_time;
        break;
      }

      // required double replacement_start_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_replacement_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &replacement_start_time_)));
          set_has_replacement_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_old_recording;
        break;
      }

      // optional .TSP.Reference old_recording = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_recording:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_recording()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandShowReplaceRecordingArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference show = 2;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->show(), output);
  }

  // required .TSP.Reference replacement_recording = 3;
  if (has_replacement_recording()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->replacement_recording(), output);
  }

  // required double replacement_start_time = 4;
  if (has_replacement_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->replacement_start_time(), output);
  }

  // optional .TSP.Reference old_recording = 5;
  if (has_old_recording()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->old_recording(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandShowReplaceRecordingArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference show = 2;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->show(), target);
  }

  // required .TSP.Reference replacement_recording = 3;
  if (has_replacement_recording()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->replacement_recording(), target);
  }

  // required double replacement_start_time = 4;
  if (has_replacement_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->replacement_start_time(), target);
  }

  // optional .TSP.Reference old_recording = 5;
  if (has_old_recording()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->old_recording(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandShowReplaceRecordingArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference show = 2;
    if (has_show()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->show());
    }

    // required .TSP.Reference replacement_recording = 3;
    if (has_replacement_recording()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->replacement_recording());
    }

    // required double replacement_start_time = 4;
    if (has_replacement_start_time()) {
      total_size += 1 + 8;
    }

    // optional .TSP.Reference old_recording = 5;
    if (has_old_recording()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_recording());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandShowReplaceRecordingArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandShowReplaceRecordingArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandShowReplaceRecordingArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandShowReplaceRecordingArchive::MergeFrom(const CommandShowReplaceRecordingArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_show()) {
      mutable_show()->::TSP::Reference::MergeFrom(from.show());
    }
    if (from.has_replacement_recording()) {
      mutable_replacement_recording()->::TSP::Reference::MergeFrom(from.replacement_recording());
    }
    if (from.has_replacement_start_time()) {
      set_replacement_start_time(from.replacement_start_time());
    }
    if (from.has_old_recording()) {
      mutable_old_recording()->::TSP::Reference::MergeFrom(from.old_recording());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandShowReplaceRecordingArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandShowReplaceRecordingArchive::CopyFrom(const CommandShowReplaceRecordingArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowReplaceRecordingArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_show()) {
    if (!this->show().IsInitialized()) return false;
  }
  if (has_replacement_recording()) {
    if (!this->replacement_recording().IsInitialized()) return false;
  }
  if (has_old_recording()) {
    if (!this->old_recording().IsInitialized()) return false;
  }
  return true;
}

void CommandShowReplaceRecordingArchive::Swap(CommandShowReplaceRecordingArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(show_, other->show_);
    std::swap(replacement_recording_, other->replacement_recording_);
    std::swap(replacement_start_time_, other->replacement_start_time_);
    std::swap(old_recording_, other->old_recording_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandShowReplaceRecordingArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandShowReplaceRecordingArchive_descriptor_;
  metadata.reflection = CommandShowReplaceRecordingArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandShowSetValueArchive_PropertyValue::kBoolValueFieldNumber;
const int CommandShowSetValueArchive_PropertyValue::kDoubleValueFieldNumber;
const int CommandShowSetValueArchive_PropertyValue::kShowModeValueFieldNumber;
const int CommandShowSetValueArchive_PropertyValue::kSizeValueFieldNumber;
#endif  // !_MSC_VER

CommandShowSetValueArchive_PropertyValue::CommandShowSetValueArchive_PropertyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandShowSetValueArchive_PropertyValue::InitAsDefaultInstance() {
  size_value_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
}

CommandShowSetValueArchive_PropertyValue::CommandShowSetValueArchive_PropertyValue(const CommandShowSetValueArchive_PropertyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandShowSetValueArchive_PropertyValue::SharedCtor() {
  _cached_size_ = 0;
  bool_value_ = false;
  double_value_ = 0;
  show_mode_value_ = 0;
  size_value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandShowSetValueArchive_PropertyValue::~CommandShowSetValueArchive_PropertyValue() {
  SharedDtor();
}

void CommandShowSetValueArchive_PropertyValue::SharedDtor() {
  if (this != default_instance_) {
    delete size_value_;
  }
}

void CommandShowSetValueArchive_PropertyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandShowSetValueArchive_PropertyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandShowSetValueArchive_PropertyValue_descriptor_;
}

const CommandShowSetValueArchive_PropertyValue& CommandShowSetValueArchive_PropertyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandShowSetValueArchive_PropertyValue* CommandShowSetValueArchive_PropertyValue::default_instance_ = NULL;

CommandShowSetValueArchive_PropertyValue* CommandShowSetValueArchive_PropertyValue::New() const {
  return new CommandShowSetValueArchive_PropertyValue;
}

void CommandShowSetValueArchive_PropertyValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bool_value_ = false;
    double_value_ = 0;
    show_mode_value_ = 0;
    if (has_size_value()) {
      if (size_value_ != NULL) size_value_->::TSP::Size::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandShowSetValueArchive_PropertyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bool_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bool_value_)));
          set_has_bool_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_double_value;
        break;
      }

      // optional double double_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_double_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &double_value_)));
          set_has_double_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_show_mode_value;
        break;
      }

      // optional .KN.ShowArchive.KNShowMode show_mode_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_mode_value:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::KN::ShowArchive_KNShowMode_IsValid(value)) {
            set_show_mode_value(static_cast< ::KN::ShowArchive_KNShowMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_size_value;
        break;
      }

      // optional .TSP.Size size_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_size_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandShowSetValueArchive_PropertyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bool_value = 1;
  if (has_bool_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bool_value(), output);
  }

  // optional double double_value = 2;
  if (has_double_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->double_value(), output);
  }

  // optional .KN.ShowArchive.KNShowMode show_mode_value = 3;
  if (has_show_mode_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->show_mode_value(), output);
  }

  // optional .TSP.Size size_value = 4;
  if (has_size_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->size_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandShowSetValueArchive_PropertyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool bool_value = 1;
  if (has_bool_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bool_value(), target);
  }

  // optional double double_value = 2;
  if (has_double_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->double_value(), target);
  }

  // optional .KN.ShowArchive.KNShowMode show_mode_value = 3;
  if (has_show_mode_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->show_mode_value(), target);
  }

  // optional .TSP.Size size_value = 4;
  if (has_size_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->size_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandShowSetValueArchive_PropertyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bool_value = 1;
    if (has_bool_value()) {
      total_size += 1 + 1;
    }

    // optional double double_value = 2;
    if (has_double_value()) {
      total_size += 1 + 8;
    }

    // optional .KN.ShowArchive.KNShowMode show_mode_value = 3;
    if (has_show_mode_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->show_mode_value());
    }

    // optional .TSP.Size size_value = 4;
    if (has_size_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->size_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandShowSetValueArchive_PropertyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandShowSetValueArchive_PropertyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandShowSetValueArchive_PropertyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandShowSetValueArchive_PropertyValue::MergeFrom(const CommandShowSetValueArchive_PropertyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bool_value()) {
      set_bool_value(from.bool_value());
    }
    if (from.has_double_value()) {
      set_double_value(from.double_value());
    }
    if (from.has_show_mode_value()) {
      set_show_mode_value(from.show_mode_value());
    }
    if (from.has_size_value()) {
      mutable_size_value()->::TSP::Size::MergeFrom(from.size_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandShowSetValueArchive_PropertyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandShowSetValueArchive_PropertyValue::CopyFrom(const CommandShowSetValueArchive_PropertyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowSetValueArchive_PropertyValue::IsInitialized() const {

  if (has_size_value()) {
    if (!this->size_value().IsInitialized()) return false;
  }
  return true;
}

void CommandShowSetValueArchive_PropertyValue::Swap(CommandShowSetValueArchive_PropertyValue* other) {
  if (other != this) {
    std::swap(bool_value_, other->bool_value_);
    std::swap(double_value_, other->double_value_);
    std::swap(show_mode_value_, other->show_mode_value_);
    std::swap(size_value_, other->size_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandShowSetValueArchive_PropertyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandShowSetValueArchive_PropertyValue_descriptor_;
  metadata.reflection = CommandShowSetValueArchive_PropertyValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CommandShowSetValueArchive::kSuperFieldNumber;
const int CommandShowSetValueArchive::kShowFieldNumber;
const int CommandShowSetValueArchive::kPropertyFieldNumber;
const int CommandShowSetValueArchive::kOldValueFieldNumber;
const int CommandShowSetValueArchive::kNewValueFieldNumber;
#endif  // !_MSC_VER

CommandShowSetValueArchive::CommandShowSetValueArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandShowSetValueArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  show_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  old_value_ = const_cast< ::KN::CommandShowSetValueArchive_PropertyValue*>(&::KN::CommandShowSetValueArchive_PropertyValue::default_instance());
  new_value_ = const_cast< ::KN::CommandShowSetValueArchive_PropertyValue*>(&::KN::CommandShowSetValueArchive_PropertyValue::default_instance());
}

CommandShowSetValueArchive::CommandShowSetValueArchive(const CommandShowSetValueArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandShowSetValueArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  show_ = NULL;
  property_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  old_value_ = NULL;
  new_value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandShowSetValueArchive::~CommandShowSetValueArchive() {
  SharedDtor();
}

void CommandShowSetValueArchive::SharedDtor() {
  if (property_ != &::google::protobuf::internal::kEmptyString) {
    delete property_;
  }
  if (this != default_instance_) {
    delete super_;
    delete show_;
    delete old_value_;
    delete new_value_;
  }
}

void CommandShowSetValueArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandShowSetValueArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandShowSetValueArchive_descriptor_;
}

const CommandShowSetValueArchive& CommandShowSetValueArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandShowSetValueArchive* CommandShowSetValueArchive::default_instance_ = NULL;

CommandShowSetValueArchive* CommandShowSetValueArchive::New() const {
  return new CommandShowSetValueArchive;
}

void CommandShowSetValueArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_show()) {
      if (show_ != NULL) show_->::TSP::Reference::Clear();
    }
    if (has_property()) {
      if (property_ != &::google::protobuf::internal::kEmptyString) {
        property_->clear();
      }
    }
    if (has_old_value()) {
      if (old_value_ != NULL) old_value_->::KN::CommandShowSetValueArchive_PropertyValue::Clear();
    }
    if (has_new_value()) {
      if (new_value_ != NULL) new_value_->::KN::CommandShowSetValueArchive_PropertyValue::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandShowSetValueArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_show;
        break;
      }

      // required .TSP.Reference show = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_show:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_show()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_property;
        break;
      }

      // required string property = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_property()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->property().data(), this->property().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_old_value;
        break;
      }

      // required .KN.CommandShowSetValueArchive.PropertyValue old_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_new_value;
        break;
      }

      // required .KN.CommandShowSetValueArchive.PropertyValue new_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandShowSetValueArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference show = 2;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->show(), output);
  }

  // required string property = 3;
  if (has_property()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->property().data(), this->property().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->property(), output);
  }

  // required .KN.CommandShowSetValueArchive.PropertyValue old_value = 4;
  if (has_old_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->old_value(), output);
  }

  // required .KN.CommandShowSetValueArchive.PropertyValue new_value = 5;
  if (has_new_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->new_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandShowSetValueArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference show = 2;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->show(), target);
  }

  // required string property = 3;
  if (has_property()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->property().data(), this->property().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->property(), target);
  }

  // required .KN.CommandShowSetValueArchive.PropertyValue old_value = 4;
  if (has_old_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->old_value(), target);
  }

  // required .KN.CommandShowSetValueArchive.PropertyValue new_value = 5;
  if (has_new_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->new_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandShowSetValueArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference show = 2;
    if (has_show()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->show());
    }

    // required string property = 3;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->property());
    }

    // required .KN.CommandShowSetValueArchive.PropertyValue old_value = 4;
    if (has_old_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_value());
    }

    // required .KN.CommandShowSetValueArchive.PropertyValue new_value = 5;
    if (has_new_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandShowSetValueArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandShowSetValueArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandShowSetValueArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandShowSetValueArchive::MergeFrom(const CommandShowSetValueArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_show()) {
      mutable_show()->::TSP::Reference::MergeFrom(from.show());
    }
    if (from.has_property()) {
      set_property(from.property());
    }
    if (from.has_old_value()) {
      mutable_old_value()->::KN::CommandShowSetValueArchive_PropertyValue::MergeFrom(from.old_value());
    }
    if (from.has_new_value()) {
      mutable_new_value()->::KN::CommandShowSetValueArchive_PropertyValue::MergeFrom(from.new_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandShowSetValueArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandShowSetValueArchive::CopyFrom(const CommandShowSetValueArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowSetValueArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_show()) {
    if (!this->show().IsInitialized()) return false;
  }
  if (has_old_value()) {
    if (!this->old_value().IsInitialized()) return false;
  }
  if (has_new_value()) {
    if (!this->new_value().IsInitialized()) return false;
  }
  return true;
}

void CommandShowSetValueArchive::Swap(CommandShowSetValueArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(show_, other->show_);
    std::swap(property_, other->property_);
    std::swap(old_value_, other->old_value_);
    std::swap(new_value_, other->new_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandShowSetValueArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandShowSetValueArchive_descriptor_;
  metadata.reflection = CommandShowSetValueArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CommandShowInsertSlideArchive_Kind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandShowInsertSlideArchive_Kind_descriptor_;
}
bool CommandShowInsertSlideArchive_Kind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CommandShowInsertSlideArchive_Kind CommandShowInsertSlideArchive::kKindInsertSlide;
const CommandShowInsertSlideArchive_Kind CommandShowInsertSlideArchive::kKindInsertSlideForPaste;
const CommandShowInsertSlideArchive_Kind CommandShowInsertSlideArchive::kKindInsertSlideForDuplicate;
const CommandShowInsertSlideArchive_Kind CommandShowInsertSlideArchive::Kind_MIN;
const CommandShowInsertSlideArchive_Kind CommandShowInsertSlideArchive::Kind_MAX;
const int CommandShowInsertSlideArchive::Kind_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CommandShowInsertSlideArchive::kSuperFieldNumber;
const int CommandShowInsertSlideArchive::kShowFieldNumber;
const int CommandShowInsertSlideArchive::kSlideNodeFieldNumber;
const int CommandShowInsertSlideArchive::kChildIndexFieldNumber;
const int CommandShowInsertSlideArchive::kParentSlideNodeFieldNumber;
const int CommandShowInsertSlideArchive::kKindFieldNumber;
#endif  // !_MSC_VER

CommandShowInsertSlideArchive::CommandShowInsertSlideArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandShowInsertSlideArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  show_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  slidenode_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  parentslidenode_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandShowInsertSlideArchive::CommandShowInsertSlideArchive(const CommandShowInsertSlideArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandShowInsertSlideArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  show_ = NULL;
  slidenode_ = NULL;
  childindex_ = 0u;
  parentslidenode_ = NULL;
  kind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandShowInsertSlideArchive::~CommandShowInsertSlideArchive() {
  SharedDtor();
}

void CommandShowInsertSlideArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete show_;
    delete slidenode_;
    delete parentslidenode_;
  }
}

void CommandShowInsertSlideArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandShowInsertSlideArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandShowInsertSlideArchive_descriptor_;
}

const CommandShowInsertSlideArchive& CommandShowInsertSlideArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandShowInsertSlideArchive* CommandShowInsertSlideArchive::default_instance_ = NULL;

CommandShowInsertSlideArchive* CommandShowInsertSlideArchive::New() const {
  return new CommandShowInsertSlideArchive;
}

void CommandShowInsertSlideArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_show()) {
      if (show_ != NULL) show_->::TSP::Reference::Clear();
    }
    if (has_slidenode()) {
      if (slidenode_ != NULL) slidenode_->::TSP::Reference::Clear();
    }
    childindex_ = 0u;
    if (has_parentslidenode()) {
      if (parentslidenode_ != NULL) parentslidenode_->::TSP::Reference::Clear();
    }
    kind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandShowInsertSlideArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_show;
        break;
      }

      // required .TSP.Reference show = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_show:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_show()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_slideNode;
        break;
      }

      // required .TSP.Reference slideNode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slideNode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slidenode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_childIndex;
        break;
      }

      // required uint32 childIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_childIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &childindex_)));
          set_has_childindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_parentSlideNode;
        break;
      }

      // required .TSP.Reference parentSlideNode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parentSlideNode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parentslidenode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_kind;
        break;
      }

      // optional .KN.CommandShowInsertSlideArchive.Kind kind = 6 [default = kKindInsertSlide];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::KN::CommandShowInsertSlideArchive_Kind_IsValid(value)) {
            set_kind(static_cast< ::KN::CommandShowInsertSlideArchive_Kind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandShowInsertSlideArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference show = 2;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->show(), output);
  }

  // required .TSP.Reference slideNode = 3;
  if (has_slidenode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->slidenode(), output);
  }

  // required uint32 childIndex = 4;
  if (has_childindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->childindex(), output);
  }

  // required .TSP.Reference parentSlideNode = 5;
  if (has_parentslidenode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->parentslidenode(), output);
  }

  // optional .KN.CommandShowInsertSlideArchive.Kind kind = 6 [default = kKindInsertSlide];
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->kind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandShowInsertSlideArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference show = 2;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->show(), target);
  }

  // required .TSP.Reference slideNode = 3;
  if (has_slidenode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->slidenode(), target);
  }

  // required uint32 childIndex = 4;
  if (has_childindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->childindex(), target);
  }

  // required .TSP.Reference parentSlideNode = 5;
  if (has_parentslidenode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->parentslidenode(), target);
  }

  // optional .KN.CommandShowInsertSlideArchive.Kind kind = 6 [default = kKindInsertSlide];
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->kind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandShowInsertSlideArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference show = 2;
    if (has_show()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->show());
    }

    // required .TSP.Reference slideNode = 3;
    if (has_slidenode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slidenode());
    }

    // required uint32 childIndex = 4;
    if (has_childindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->childindex());
    }

    // required .TSP.Reference parentSlideNode = 5;
    if (has_parentslidenode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parentslidenode());
    }

    // optional .KN.CommandShowInsertSlideArchive.Kind kind = 6 [default = kKindInsertSlide];
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandShowInsertSlideArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandShowInsertSlideArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandShowInsertSlideArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandShowInsertSlideArchive::MergeFrom(const CommandShowInsertSlideArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_show()) {
      mutable_show()->::TSP::Reference::MergeFrom(from.show());
    }
    if (from.has_slidenode()) {
      mutable_slidenode()->::TSP::Reference::MergeFrom(from.slidenode());
    }
    if (from.has_childindex()) {
      set_childindex(from.childindex());
    }
    if (from.has_parentslidenode()) {
      mutable_parentslidenode()->::TSP::Reference::MergeFrom(from.parentslidenode());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandShowInsertSlideArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandShowInsertSlideArchive::CopyFrom(const CommandShowInsertSlideArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowInsertSlideArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_show()) {
    if (!this->show().IsInitialized()) return false;
  }
  if (has_slidenode()) {
    if (!this->slidenode().IsInitialized()) return false;
  }
  if (has_parentslidenode()) {
    if (!this->parentslidenode().IsInitialized()) return false;
  }
  return true;
}

void CommandShowInsertSlideArchive::Swap(CommandShowInsertSlideArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(show_, other->show_);
    std::swap(slidenode_, other->slidenode_);
    std::swap(childindex_, other->childindex_);
    std::swap(parentslidenode_, other->parentslidenode_);
    std::swap(kind_, other->kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandShowInsertSlideArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandShowInsertSlideArchive_descriptor_;
  metadata.reflection = CommandShowInsertSlideArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandShowMoveSlideArchive::kSuperFieldNumber;
const int CommandShowMoveSlideArchive::kShowFieldNumber;
const int CommandShowMoveSlideArchive::kSlideNodeFieldNumber;
const int CommandShowMoveSlideArchive::kParentSlideNodesFieldNumber;
const int CommandShowMoveSlideArchive::kChildIndicesFieldNumber;
#endif  // !_MSC_VER

CommandShowMoveSlideArchive::CommandShowMoveSlideArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandShowMoveSlideArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  show_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  slidenode_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandShowMoveSlideArchive::CommandShowMoveSlideArchive(const CommandShowMoveSlideArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandShowMoveSlideArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  show_ = NULL;
  slidenode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandShowMoveSlideArchive::~CommandShowMoveSlideArchive() {
  SharedDtor();
}

void CommandShowMoveSlideArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete show_;
    delete slidenode_;
  }
}

void CommandShowMoveSlideArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandShowMoveSlideArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandShowMoveSlideArchive_descriptor_;
}

const CommandShowMoveSlideArchive& CommandShowMoveSlideArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandShowMoveSlideArchive* CommandShowMoveSlideArchive::default_instance_ = NULL;

CommandShowMoveSlideArchive* CommandShowMoveSlideArchive::New() const {
  return new CommandShowMoveSlideArchive;
}

void CommandShowMoveSlideArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_show()) {
      if (show_ != NULL) show_->::TSP::Reference::Clear();
    }
    if (has_slidenode()) {
      if (slidenode_ != NULL) slidenode_->::TSP::Reference::Clear();
    }
  }
  parentslidenodes_.Clear();
  childindices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandShowMoveSlideArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_show;
        break;
      }

      // required .TSP.Reference show = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_show:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_show()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_slideNode;
        break;
      }

      // required .TSP.Reference slideNode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slideNode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slidenode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_parentSlideNodes;
        break;
      }

      // repeated .TSP.Reference parentSlideNodes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parentSlideNodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parentslidenodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_parentSlideNodes;
        if (input->ExpectTag(40)) goto parse_childIndices;
        break;
      }

      // repeated uint32 childIndices = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_childIndices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_childindices())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_childindices())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_childIndices;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandShowMoveSlideArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference show = 2;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->show(), output);
  }

  // required .TSP.Reference slideNode = 3;
  if (has_slidenode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->slidenode(), output);
  }

  // repeated .TSP.Reference parentSlideNodes = 4;
  for (int i = 0; i < this->parentslidenodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->parentslidenodes(i), output);
  }

  // repeated uint32 childIndices = 5;
  for (int i = 0; i < this->childindices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->childindices(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandShowMoveSlideArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference show = 2;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->show(), target);
  }

  // required .TSP.Reference slideNode = 3;
  if (has_slidenode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->slidenode(), target);
  }

  // repeated .TSP.Reference parentSlideNodes = 4;
  for (int i = 0; i < this->parentslidenodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->parentslidenodes(i), target);
  }

  // repeated uint32 childIndices = 5;
  for (int i = 0; i < this->childindices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->childindices(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandShowMoveSlideArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference show = 2;
    if (has_show()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->show());
    }

    // required .TSP.Reference slideNode = 3;
    if (has_slidenode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slidenode());
    }

  }
  // repeated .TSP.Reference parentSlideNodes = 4;
  total_size += 1 * this->parentslidenodes_size();
  for (int i = 0; i < this->parentslidenodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parentslidenodes(i));
  }

  // repeated uint32 childIndices = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->childindices_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->childindices(i));
    }
    total_size += 1 * this->childindices_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandShowMoveSlideArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandShowMoveSlideArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandShowMoveSlideArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandShowMoveSlideArchive::MergeFrom(const CommandShowMoveSlideArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  parentslidenodes_.MergeFrom(from.parentslidenodes_);
  childindices_.MergeFrom(from.childindices_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_show()) {
      mutable_show()->::TSP::Reference::MergeFrom(from.show());
    }
    if (from.has_slidenode()) {
      mutable_slidenode()->::TSP::Reference::MergeFrom(from.slidenode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandShowMoveSlideArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandShowMoveSlideArchive::CopyFrom(const CommandShowMoveSlideArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowMoveSlideArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_show()) {
    if (!this->show().IsInitialized()) return false;
  }
  if (has_slidenode()) {
    if (!this->slidenode().IsInitialized()) return false;
  }
  for (int i = 0; i < parentslidenodes_size(); i++) {
    if (!this->parentslidenodes(i).IsInitialized()) return false;
  }
  return true;
}

void CommandShowMoveSlideArchive::Swap(CommandShowMoveSlideArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(show_, other->show_);
    std::swap(slidenode_, other->slidenode_);
    parentslidenodes_.Swap(&other->parentslidenodes_);
    childindices_.Swap(&other->childindices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandShowMoveSlideArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandShowMoveSlideArchive_descriptor_;
  metadata.reflection = CommandShowMoveSlideArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandShowRemoveSlideArchive::kSuperFieldNumber;
const int CommandShowRemoveSlideArchive::kShowFieldNumber;
const int CommandShowRemoveSlideArchive::kSlideNodeFieldNumber;
const int CommandShowRemoveSlideArchive::kParentSlideNodeFieldNumber;
const int CommandShowRemoveSlideArchive::kChildIndexFieldNumber;
#endif  // !_MSC_VER

CommandShowRemoveSlideArchive::CommandShowRemoveSlideArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandShowRemoveSlideArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  show_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  slidenode_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  parentslidenode_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandShowRemoveSlideArchive::CommandShowRemoveSlideArchive(const CommandShowRemoveSlideArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandShowRemoveSlideArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  show_ = NULL;
  slidenode_ = NULL;
  parentslidenode_ = NULL;
  childindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandShowRemoveSlideArchive::~CommandShowRemoveSlideArchive() {
  SharedDtor();
}

void CommandShowRemoveSlideArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete show_;
    delete slidenode_;
    delete parentslidenode_;
  }
}

void CommandShowRemoveSlideArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandShowRemoveSlideArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandShowRemoveSlideArchive_descriptor_;
}

const CommandShowRemoveSlideArchive& CommandShowRemoveSlideArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandShowRemoveSlideArchive* CommandShowRemoveSlideArchive::default_instance_ = NULL;

CommandShowRemoveSlideArchive* CommandShowRemoveSlideArchive::New() const {
  return new CommandShowRemoveSlideArchive;
}

void CommandShowRemoveSlideArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_show()) {
      if (show_ != NULL) show_->::TSP::Reference::Clear();
    }
    if (has_slidenode()) {
      if (slidenode_ != NULL) slidenode_->::TSP::Reference::Clear();
    }
    if (has_parentslidenode()) {
      if (parentslidenode_ != NULL) parentslidenode_->::TSP::Reference::Clear();
    }
    childindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandShowRemoveSlideArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_show;
        break;
      }

      // required .TSP.Reference show = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_show:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_show()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_slideNode;
        break;
      }

      // required .TSP.Reference slideNode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slideNode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slidenode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_parentSlideNode;
        break;
      }

      // required .TSP.Reference parentSlideNode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parentSlideNode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parentslidenode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_childIndex;
        break;
      }

      // required uint32 childIndex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_childIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &childindex_)));
          set_has_childindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandShowRemoveSlideArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference show = 2;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->show(), output);
  }

  // required .TSP.Reference slideNode = 3;
  if (has_slidenode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->slidenode(), output);
  }

  // required .TSP.Reference parentSlideNode = 4;
  if (has_parentslidenode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->parentslidenode(), output);
  }

  // required uint32 childIndex = 5;
  if (has_childindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->childindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandShowRemoveSlideArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference show = 2;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->show(), target);
  }

  // required .TSP.Reference slideNode = 3;
  if (has_slidenode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->slidenode(), target);
  }

  // required .TSP.Reference parentSlideNode = 4;
  if (has_parentslidenode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->parentslidenode(), target);
  }

  // required uint32 childIndex = 5;
  if (has_childindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->childindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandShowRemoveSlideArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference show = 2;
    if (has_show()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->show());
    }

    // required .TSP.Reference slideNode = 3;
    if (has_slidenode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slidenode());
    }

    // required .TSP.Reference parentSlideNode = 4;
    if (has_parentslidenode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parentslidenode());
    }

    // required uint32 childIndex = 5;
    if (has_childindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->childindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandShowRemoveSlideArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandShowRemoveSlideArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandShowRemoveSlideArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandShowRemoveSlideArchive::MergeFrom(const CommandShowRemoveSlideArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_show()) {
      mutable_show()->::TSP::Reference::MergeFrom(from.show());
    }
    if (from.has_slidenode()) {
      mutable_slidenode()->::TSP::Reference::MergeFrom(from.slidenode());
    }
    if (from.has_parentslidenode()) {
      mutable_parentslidenode()->::TSP::Reference::MergeFrom(from.parentslidenode());
    }
    if (from.has_childindex()) {
      set_childindex(from.childindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandShowRemoveSlideArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandShowRemoveSlideArchive::CopyFrom(const CommandShowRemoveSlideArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowRemoveSlideArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_show()) {
    if (!this->show().IsInitialized()) return false;
  }
  if (has_slidenode()) {
    if (!this->slidenode().IsInitialized()) return false;
  }
  if (has_parentslidenode()) {
    if (!this->parentslidenode().IsInitialized()) return false;
  }
  return true;
}

void CommandShowRemoveSlideArchive::Swap(CommandShowRemoveSlideArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(show_, other->show_);
    std::swap(slidenode_, other->slidenode_);
    std::swap(parentslidenode_, other->parentslidenode_);
    std::swap(childindex_, other->childindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandShowRemoveSlideArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandShowRemoveSlideArchive_descriptor_;
  metadata.reflection = CommandShowRemoveSlideArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandShowChangeThemeArchive::kSuperFieldNumber;
const int CommandShowChangeThemeArchive::kShowFieldNumber;
const int CommandShowChangeThemeArchive::kThemeFieldNumber;
const int CommandShowChangeThemeArchive::kOldThemeFieldNumber;
const int CommandShowChangeThemeArchive::kTemplateIdentifierFieldNumber;
const int CommandShowChangeThemeArchive::kOldTemplateIdentifierFieldNumber;
#endif  // !_MSC_VER

CommandShowChangeThemeArchive::CommandShowChangeThemeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandShowChangeThemeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  show_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  theme_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  old_theme_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandShowChangeThemeArchive::CommandShowChangeThemeArchive(const CommandShowChangeThemeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandShowChangeThemeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  show_ = NULL;
  theme_ = NULL;
  old_theme_ = NULL;
  template_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  old_template_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandShowChangeThemeArchive::~CommandShowChangeThemeArchive() {
  SharedDtor();
}

void CommandShowChangeThemeArchive::SharedDtor() {
  if (template_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete template_identifier_;
  }
  if (old_template_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete old_template_identifier_;
  }
  if (this != default_instance_) {
    delete super_;
    delete show_;
    delete theme_;
    delete old_theme_;
  }
}

void CommandShowChangeThemeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandShowChangeThemeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandShowChangeThemeArchive_descriptor_;
}

const CommandShowChangeThemeArchive& CommandShowChangeThemeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandShowChangeThemeArchive* CommandShowChangeThemeArchive::default_instance_ = NULL;

CommandShowChangeThemeArchive* CommandShowChangeThemeArchive::New() const {
  return new CommandShowChangeThemeArchive;
}

void CommandShowChangeThemeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_show()) {
      if (show_ != NULL) show_->::TSP::Reference::Clear();
    }
    if (has_theme()) {
      if (theme_ != NULL) theme_->::TSP::Reference::Clear();
    }
    if (has_old_theme()) {
      if (old_theme_ != NULL) old_theme_->::TSP::Reference::Clear();
    }
    if (has_template_identifier()) {
      if (template_identifier_ != &::google::protobuf::internal::kEmptyString) {
        template_identifier_->clear();
      }
    }
    if (has_old_template_identifier()) {
      if (old_template_identifier_ != &::google::protobuf::internal::kEmptyString) {
        old_template_identifier_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandShowChangeThemeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_show;
        break;
      }

      // required .TSP.Reference show = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_show:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_show()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_theme;
        break;
      }

      // required .TSP.Reference theme = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_theme()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_old_theme;
        break;
      }

      // required .TSP.Reference old_theme = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_theme()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_template_identifier;
        break;
      }

      // optional string template_identifier = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_template_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_template_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->template_identifier().data(), this->template_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_old_template_identifier;
        break;
      }

      // optional string old_template_identifier = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_template_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_template_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->old_template_identifier().data(), this->old_template_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandShowChangeThemeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference show = 2;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->show(), output);
  }

  // required .TSP.Reference theme = 3;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->theme(), output);
  }

  // required .TSP.Reference old_theme = 4;
  if (has_old_theme()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->old_theme(), output);
  }

  // optional string template_identifier = 5;
  if (has_template_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->template_identifier().data(), this->template_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->template_identifier(), output);
  }

  // optional string old_template_identifier = 6;
  if (has_old_template_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_template_identifier().data(), this->old_template_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->old_template_identifier(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandShowChangeThemeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference show = 2;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->show(), target);
  }

  // required .TSP.Reference theme = 3;
  if (has_theme()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->theme(), target);
  }

  // required .TSP.Reference old_theme = 4;
  if (has_old_theme()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->old_theme(), target);
  }

  // optional string template_identifier = 5;
  if (has_template_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->template_identifier().data(), this->template_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->template_identifier(), target);
  }

  // optional string old_template_identifier = 6;
  if (has_old_template_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_template_identifier().data(), this->old_template_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->old_template_identifier(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandShowChangeThemeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference show = 2;
    if (has_show()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->show());
    }

    // required .TSP.Reference theme = 3;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->theme());
    }

    // required .TSP.Reference old_theme = 4;
    if (has_old_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_theme());
    }

    // optional string template_identifier = 5;
    if (has_template_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->template_identifier());
    }

    // optional string old_template_identifier = 6;
    if (has_old_template_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->old_template_identifier());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandShowChangeThemeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandShowChangeThemeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandShowChangeThemeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandShowChangeThemeArchive::MergeFrom(const CommandShowChangeThemeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_show()) {
      mutable_show()->::TSP::Reference::MergeFrom(from.show());
    }
    if (from.has_theme()) {
      mutable_theme()->::TSP::Reference::MergeFrom(from.theme());
    }
    if (from.has_old_theme()) {
      mutable_old_theme()->::TSP::Reference::MergeFrom(from.old_theme());
    }
    if (from.has_template_identifier()) {
      set_template_identifier(from.template_identifier());
    }
    if (from.has_old_template_identifier()) {
      set_old_template_identifier(from.old_template_identifier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandShowChangeThemeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandShowChangeThemeArchive::CopyFrom(const CommandShowChangeThemeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowChangeThemeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_show()) {
    if (!this->show().IsInitialized()) return false;
  }
  if (has_theme()) {
    if (!this->theme().IsInitialized()) return false;
  }
  if (has_old_theme()) {
    if (!this->old_theme().IsInitialized()) return false;
  }
  return true;
}

void CommandShowChangeThemeArchive::Swap(CommandShowChangeThemeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(show_, other->show_);
    std::swap(theme_, other->theme_);
    std::swap(old_theme_, other->old_theme_);
    std::swap(template_identifier_, other->template_identifier_);
    std::swap(old_template_identifier_, other->old_template_identifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandShowChangeThemeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandShowChangeThemeArchive_descriptor_;
  metadata.reflection = CommandShowChangeThemeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandMoveMastersArchive::kSuperFieldNumber;
const int CommandMoveMastersArchive::kThemeFieldNumber;
const int CommandMoveMastersArchive::kMasterSlidesFieldNumber;
const int CommandMoveMastersArchive::kPreviousIndexesKeysFieldNumber;
const int CommandMoveMastersArchive::kPreviousIndexesValuesFieldNumber;
const int CommandMoveMastersArchive::kFinalMasterArrangementFieldNumber;
#endif  // !_MSC_VER

CommandMoveMastersArchive::CommandMoveMastersArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandMoveMastersArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  theme_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandMoveMastersArchive::CommandMoveMastersArchive(const CommandMoveMastersArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandMoveMastersArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  theme_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandMoveMastersArchive::~CommandMoveMastersArchive() {
  SharedDtor();
}

void CommandMoveMastersArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete theme_;
  }
}

void CommandMoveMastersArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandMoveMastersArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandMoveMastersArchive_descriptor_;
}

const CommandMoveMastersArchive& CommandMoveMastersArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandMoveMastersArchive* CommandMoveMastersArchive::default_instance_ = NULL;

CommandMoveMastersArchive* CommandMoveMastersArchive::New() const {
  return new CommandMoveMastersArchive;
}

void CommandMoveMastersArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_theme()) {
      if (theme_ != NULL) theme_->::TSP::Reference::Clear();
    }
  }
  master_slides_.Clear();
  previous_indexes_keys_.Clear();
  previous_indexes_values_.Clear();
  final_master_arrangement_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandMoveMastersArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_theme;
        break;
      }

      // required .TSP.Reference theme = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_theme()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_master_slides;
        break;
      }

      // repeated .TSP.Reference master_slides = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master_slides:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_master_slides()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_master_slides;
        if (input->ExpectTag(34)) goto parse_previous_indexes_keys;
        break;
      }

      // repeated .TSP.Reference previous_indexes_keys = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_previous_indexes_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_previous_indexes_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_previous_indexes_keys;
        if (input->ExpectTag(40)) goto parse_previous_indexes_values;
        break;
      }

      // repeated uint32 previous_indexes_values = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_previous_indexes_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_previous_indexes_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_previous_indexes_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_previous_indexes_values;
        if (input->ExpectTag(50)) goto parse_final_master_arrangement;
        break;
      }

      // repeated .TSP.Reference final_master_arrangement = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_final_master_arrangement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_final_master_arrangement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_final_master_arrangement;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandMoveMastersArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference theme = 2;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->theme(), output);
  }

  // repeated .TSP.Reference master_slides = 3;
  for (int i = 0; i < this->master_slides_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->master_slides(i), output);
  }

  // repeated .TSP.Reference previous_indexes_keys = 4;
  for (int i = 0; i < this->previous_indexes_keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->previous_indexes_keys(i), output);
  }

  // repeated uint32 previous_indexes_values = 5;
  for (int i = 0; i < this->previous_indexes_values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->previous_indexes_values(i), output);
  }

  // repeated .TSP.Reference final_master_arrangement = 6;
  for (int i = 0; i < this->final_master_arrangement_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->final_master_arrangement(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandMoveMastersArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference theme = 2;
  if (has_theme()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->theme(), target);
  }

  // repeated .TSP.Reference master_slides = 3;
  for (int i = 0; i < this->master_slides_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->master_slides(i), target);
  }

  // repeated .TSP.Reference previous_indexes_keys = 4;
  for (int i = 0; i < this->previous_indexes_keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->previous_indexes_keys(i), target);
  }

  // repeated uint32 previous_indexes_values = 5;
  for (int i = 0; i < this->previous_indexes_values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->previous_indexes_values(i), target);
  }

  // repeated .TSP.Reference final_master_arrangement = 6;
  for (int i = 0; i < this->final_master_arrangement_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->final_master_arrangement(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandMoveMastersArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference theme = 2;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->theme());
    }

  }
  // repeated .TSP.Reference master_slides = 3;
  total_size += 1 * this->master_slides_size();
  for (int i = 0; i < this->master_slides_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->master_slides(i));
  }

  // repeated .TSP.Reference previous_indexes_keys = 4;
  total_size += 1 * this->previous_indexes_keys_size();
  for (int i = 0; i < this->previous_indexes_keys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->previous_indexes_keys(i));
  }

  // repeated uint32 previous_indexes_values = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->previous_indexes_values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->previous_indexes_values(i));
    }
    total_size += 1 * this->previous_indexes_values_size() + data_size;
  }

  // repeated .TSP.Reference final_master_arrangement = 6;
  total_size += 1 * this->final_master_arrangement_size();
  for (int i = 0; i < this->final_master_arrangement_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->final_master_arrangement(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandMoveMastersArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandMoveMastersArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandMoveMastersArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandMoveMastersArchive::MergeFrom(const CommandMoveMastersArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  master_slides_.MergeFrom(from.master_slides_);
  previous_indexes_keys_.MergeFrom(from.previous_indexes_keys_);
  previous_indexes_values_.MergeFrom(from.previous_indexes_values_);
  final_master_arrangement_.MergeFrom(from.final_master_arrangement_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_theme()) {
      mutable_theme()->::TSP::Reference::MergeFrom(from.theme());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandMoveMastersArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandMoveMastersArchive::CopyFrom(const CommandMoveMastersArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMoveMastersArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_theme()) {
    if (!this->theme().IsInitialized()) return false;
  }
  for (int i = 0; i < master_slides_size(); i++) {
    if (!this->master_slides(i).IsInitialized()) return false;
  }
  for (int i = 0; i < previous_indexes_keys_size(); i++) {
    if (!this->previous_indexes_keys(i).IsInitialized()) return false;
  }
  for (int i = 0; i < final_master_arrangement_size(); i++) {
    if (!this->final_master_arrangement(i).IsInitialized()) return false;
  }
  return true;
}

void CommandMoveMastersArchive::Swap(CommandMoveMastersArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(theme_, other->theme_);
    master_slides_.Swap(&other->master_slides_);
    previous_indexes_keys_.Swap(&other->previous_indexes_keys_);
    previous_indexes_values_.Swap(&other->previous_indexes_values_);
    final_master_arrangement_.Swap(&other->final_master_arrangement_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandMoveMastersArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandMoveMastersArchive_descriptor_;
  metadata.reflection = CommandMoveMastersArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandInsertMasterArchive::kSuperFieldNumber;
const int CommandInsertMasterArchive::kThemeFieldNumber;
const int CommandInsertMasterArchive::kMasterSlideNodeFieldNumber;
const int CommandInsertMasterArchive::kInsertionIndexFieldNumber;
const int CommandInsertMasterArchive::kWasInsertedWithDropFieldNumber;
#endif  // !_MSC_VER

CommandInsertMasterArchive::CommandInsertMasterArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandInsertMasterArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  theme_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  master_slide_node_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandInsertMasterArchive::CommandInsertMasterArchive(const CommandInsertMasterArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandInsertMasterArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  theme_ = NULL;
  master_slide_node_ = NULL;
  insertion_index_ = 0u;
  was_inserted_with_drop_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandInsertMasterArchive::~CommandInsertMasterArchive() {
  SharedDtor();
}

void CommandInsertMasterArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete theme_;
    delete master_slide_node_;
  }
}

void CommandInsertMasterArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandInsertMasterArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandInsertMasterArchive_descriptor_;
}

const CommandInsertMasterArchive& CommandInsertMasterArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandInsertMasterArchive* CommandInsertMasterArchive::default_instance_ = NULL;

CommandInsertMasterArchive* CommandInsertMasterArchive::New() const {
  return new CommandInsertMasterArchive;
}

void CommandInsertMasterArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_theme()) {
      if (theme_ != NULL) theme_->::TSP::Reference::Clear();
    }
    if (has_master_slide_node()) {
      if (master_slide_node_ != NULL) master_slide_node_->::TSP::Reference::Clear();
    }
    insertion_index_ = 0u;
    was_inserted_with_drop_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandInsertMasterArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_theme;
        break;
      }

      // required .TSP.Reference theme = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_theme()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_master_slide_node;
        break;
      }

      // required .TSP.Reference master_slide_node = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master_slide_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_master_slide_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_insertion_index;
        break;
      }

      // required uint32 insertion_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_insertion_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &insertion_index_)));
          set_has_insertion_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_was_inserted_with_drop;
        break;
      }

      // required bool was_inserted_with_drop = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_was_inserted_with_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &was_inserted_with_drop_)));
          set_has_was_inserted_with_drop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandInsertMasterArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference theme = 2;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->theme(), output);
  }

  // required .TSP.Reference master_slide_node = 3;
  if (has_master_slide_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->master_slide_node(), output);
  }

  // required uint32 insertion_index = 4;
  if (has_insertion_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->insertion_index(), output);
  }

  // required bool was_inserted_with_drop = 5;
  if (has_was_inserted_with_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->was_inserted_with_drop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandInsertMasterArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference theme = 2;
  if (has_theme()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->theme(), target);
  }

  // required .TSP.Reference master_slide_node = 3;
  if (has_master_slide_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->master_slide_node(), target);
  }

  // required uint32 insertion_index = 4;
  if (has_insertion_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->insertion_index(), target);
  }

  // required bool was_inserted_with_drop = 5;
  if (has_was_inserted_with_drop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->was_inserted_with_drop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandInsertMasterArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference theme = 2;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->theme());
    }

    // required .TSP.Reference master_slide_node = 3;
    if (has_master_slide_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->master_slide_node());
    }

    // required uint32 insertion_index = 4;
    if (has_insertion_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->insertion_index());
    }

    // required bool was_inserted_with_drop = 5;
    if (has_was_inserted_with_drop()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandInsertMasterArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandInsertMasterArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandInsertMasterArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandInsertMasterArchive::MergeFrom(const CommandInsertMasterArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_theme()) {
      mutable_theme()->::TSP::Reference::MergeFrom(from.theme());
    }
    if (from.has_master_slide_node()) {
      mutable_master_slide_node()->::TSP::Reference::MergeFrom(from.master_slide_node());
    }
    if (from.has_insertion_index()) {
      set_insertion_index(from.insertion_index());
    }
    if (from.has_was_inserted_with_drop()) {
      set_was_inserted_with_drop(from.was_inserted_with_drop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandInsertMasterArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandInsertMasterArchive::CopyFrom(const CommandInsertMasterArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandInsertMasterArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_theme()) {
    if (!this->theme().IsInitialized()) return false;
  }
  if (has_master_slide_node()) {
    if (!this->master_slide_node().IsInitialized()) return false;
  }
  return true;
}

void CommandInsertMasterArchive::Swap(CommandInsertMasterArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(theme_, other->theme_);
    std::swap(master_slide_node_, other->master_slide_node_);
    std::swap(insertion_index_, other->insertion_index_);
    std::swap(was_inserted_with_drop_, other->was_inserted_with_drop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandInsertMasterArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandInsertMasterArchive_descriptor_;
  metadata.reflection = CommandInsertMasterArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandRemoveMasterArchive::kSuperFieldNumber;
const int CommandRemoveMasterArchive::kThemeFieldNumber;
const int CommandRemoveMasterArchive::kMasterSlideNodeFieldNumber;
const int CommandRemoveMasterArchive::kPreviousIndexFieldNumber;
const int CommandRemoveMasterArchive::kMasterChangeCommandsFieldNumber;
const int CommandRemoveMasterArchive::kDefaultMasterSlideNodeWasReplacedFieldNumber;
#endif  // !_MSC_VER

CommandRemoveMasterArchive::CommandRemoveMasterArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandRemoveMasterArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  theme_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  master_slide_node_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  master_change_commands_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandRemoveMasterArchive::CommandRemoveMasterArchive(const CommandRemoveMasterArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandRemoveMasterArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  theme_ = NULL;
  master_slide_node_ = NULL;
  previous_index_ = 0u;
  master_change_commands_ = NULL;
  default_master_slide_node_was_replaced_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandRemoveMasterArchive::~CommandRemoveMasterArchive() {
  SharedDtor();
}

void CommandRemoveMasterArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete theme_;
    delete master_slide_node_;
    delete master_change_commands_;
  }
}

void CommandRemoveMasterArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandRemoveMasterArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandRemoveMasterArchive_descriptor_;
}

const CommandRemoveMasterArchive& CommandRemoveMasterArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandRemoveMasterArchive* CommandRemoveMasterArchive::default_instance_ = NULL;

CommandRemoveMasterArchive* CommandRemoveMasterArchive::New() const {
  return new CommandRemoveMasterArchive;
}

void CommandRemoveMasterArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_theme()) {
      if (theme_ != NULL) theme_->::TSP::Reference::Clear();
    }
    if (has_master_slide_node()) {
      if (master_slide_node_ != NULL) master_slide_node_->::TSP::Reference::Clear();
    }
    previous_index_ = 0u;
    if (has_master_change_commands()) {
      if (master_change_commands_ != NULL) master_change_commands_->::TSP::Reference::Clear();
    }
    default_master_slide_node_was_replaced_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandRemoveMasterArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_theme;
        break;
      }

      // required .TSP.Reference theme = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_theme()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_master_slide_node;
        break;
      }

      // required .TSP.Reference master_slide_node = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master_slide_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_master_slide_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_previous_index;
        break;
      }

      // required uint32 previous_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_previous_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &previous_index_)));
          set_has_previous_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_master_change_commands;
        break;
      }

      // optional .TSP.Reference master_change_commands = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master_change_commands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_master_change_commands()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_default_master_slide_node_was_replaced;
        break;
      }

      // optional bool default_master_slide_node_was_replaced = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_default_master_slide_node_was_replaced:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &default_master_slide_node_was_replaced_)));
          set_has_default_master_slide_node_was_replaced();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandRemoveMasterArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference theme = 2;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->theme(), output);
  }

  // required .TSP.Reference master_slide_node = 3;
  if (has_master_slide_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->master_slide_node(), output);
  }

  // required uint32 previous_index = 4;
  if (has_previous_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->previous_index(), output);
  }

  // optional .TSP.Reference master_change_commands = 5;
  if (has_master_change_commands()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->master_change_commands(), output);
  }

  // optional bool default_master_slide_node_was_replaced = 6;
  if (has_default_master_slide_node_was_replaced()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->default_master_slide_node_was_replaced(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandRemoveMasterArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference theme = 2;
  if (has_theme()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->theme(), target);
  }

  // required .TSP.Reference master_slide_node = 3;
  if (has_master_slide_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->master_slide_node(), target);
  }

  // required uint32 previous_index = 4;
  if (has_previous_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->previous_index(), target);
  }

  // optional .TSP.Reference master_change_commands = 5;
  if (has_master_change_commands()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->master_change_commands(), target);
  }

  // optional bool default_master_slide_node_was_replaced = 6;
  if (has_default_master_slide_node_was_replaced()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->default_master_slide_node_was_replaced(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandRemoveMasterArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference theme = 2;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->theme());
    }

    // required .TSP.Reference master_slide_node = 3;
    if (has_master_slide_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->master_slide_node());
    }

    // required uint32 previous_index = 4;
    if (has_previous_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->previous_index());
    }

    // optional .TSP.Reference master_change_commands = 5;
    if (has_master_change_commands()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->master_change_commands());
    }

    // optional bool default_master_slide_node_was_replaced = 6;
    if (has_default_master_slide_node_was_replaced()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandRemoveMasterArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandRemoveMasterArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandRemoveMasterArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandRemoveMasterArchive::MergeFrom(const CommandRemoveMasterArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_theme()) {
      mutable_theme()->::TSP::Reference::MergeFrom(from.theme());
    }
    if (from.has_master_slide_node()) {
      mutable_master_slide_node()->::TSP::Reference::MergeFrom(from.master_slide_node());
    }
    if (from.has_previous_index()) {
      set_previous_index(from.previous_index());
    }
    if (from.has_master_change_commands()) {
      mutable_master_change_commands()->::TSP::Reference::MergeFrom(from.master_change_commands());
    }
    if (from.has_default_master_slide_node_was_replaced()) {
      set_default_master_slide_node_was_replaced(from.default_master_slide_node_was_replaced());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandRemoveMasterArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandRemoveMasterArchive::CopyFrom(const CommandRemoveMasterArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRemoveMasterArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_theme()) {
    if (!this->theme().IsInitialized()) return false;
  }
  if (has_master_slide_node()) {
    if (!this->master_slide_node().IsInitialized()) return false;
  }
  if (has_master_change_commands()) {
    if (!this->master_change_commands().IsInitialized()) return false;
  }
  return true;
}

void CommandRemoveMasterArchive::Swap(CommandRemoveMasterArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(theme_, other->theme_);
    std::swap(master_slide_node_, other->master_slide_node_);
    std::swap(previous_index_, other->previous_index_);
    std::swap(master_change_commands_, other->master_change_commands_);
    std::swap(default_master_slide_node_was_replaced_, other->default_master_slide_node_was_replaced_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandRemoveMasterArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandRemoveMasterArchive_descriptor_;
  metadata.reflection = CommandRemoveMasterArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandRenameMasterArchive::kSuperFieldNumber;
const int CommandRenameMasterArchive::kMasterSlideFieldNumber;
const int CommandRenameMasterArchive::kMasterNameFieldNumber;
const int CommandRenameMasterArchive::kOldMasterNameFieldNumber;
#endif  // !_MSC_VER

CommandRenameMasterArchive::CommandRenameMasterArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandRenameMasterArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  master_slide_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandRenameMasterArchive::CommandRenameMasterArchive(const CommandRenameMasterArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandRenameMasterArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  master_slide_ = NULL;
  master_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  old_master_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandRenameMasterArchive::~CommandRenameMasterArchive() {
  SharedDtor();
}

void CommandRenameMasterArchive::SharedDtor() {
  if (master_name_ != &::google::protobuf::internal::kEmptyString) {
    delete master_name_;
  }
  if (old_master_name_ != &::google::protobuf::internal::kEmptyString) {
    delete old_master_name_;
  }
  if (this != default_instance_) {
    delete super_;
    delete master_slide_;
  }
}

void CommandRenameMasterArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandRenameMasterArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandRenameMasterArchive_descriptor_;
}

const CommandRenameMasterArchive& CommandRenameMasterArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandRenameMasterArchive* CommandRenameMasterArchive::default_instance_ = NULL;

CommandRenameMasterArchive* CommandRenameMasterArchive::New() const {
  return new CommandRenameMasterArchive;
}

void CommandRenameMasterArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_master_slide()) {
      if (master_slide_ != NULL) master_slide_->::TSP::Reference::Clear();
    }
    if (has_master_name()) {
      if (master_name_ != &::google::protobuf::internal::kEmptyString) {
        master_name_->clear();
      }
    }
    if (has_old_master_name()) {
      if (old_master_name_ != &::google::protobuf::internal::kEmptyString) {
        old_master_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandRenameMasterArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_master_slide;
        break;
      }

      // required .TSP.Reference master_slide = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master_slide:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_master_slide()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_master_name;
        break;
      }

      // required string master_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->master_name().data(), this->master_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_old_master_name;
        break;
      }

      // required string old_master_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_master_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_master_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->old_master_name().data(), this->old_master_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandRenameMasterArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference master_slide = 2;
  if (has_master_slide()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->master_slide(), output);
  }

  // required string master_name = 3;
  if (has_master_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->master_name().data(), this->master_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->master_name(), output);
  }

  // required string old_master_name = 4;
  if (has_old_master_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_master_name().data(), this->old_master_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->old_master_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandRenameMasterArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference master_slide = 2;
  if (has_master_slide()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->master_slide(), target);
  }

  // required string master_name = 3;
  if (has_master_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->master_name().data(), this->master_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->master_name(), target);
  }

  // required string old_master_name = 4;
  if (has_old_master_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_master_name().data(), this->old_master_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->old_master_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandRenameMasterArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference master_slide = 2;
    if (has_master_slide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->master_slide());
    }

    // required string master_name = 3;
    if (has_master_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->master_name());
    }

    // required string old_master_name = 4;
    if (has_old_master_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->old_master_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandRenameMasterArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandRenameMasterArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandRenameMasterArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandRenameMasterArchive::MergeFrom(const CommandRenameMasterArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_master_slide()) {
      mutable_master_slide()->::TSP::Reference::MergeFrom(from.master_slide());
    }
    if (from.has_master_name()) {
      set_master_name(from.master_name());
    }
    if (from.has_old_master_name()) {
      set_old_master_name(from.old_master_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandRenameMasterArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandRenameMasterArchive::CopyFrom(const CommandRenameMasterArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRenameMasterArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_master_slide()) {
    if (!this->master_slide().IsInitialized()) return false;
  }
  return true;
}

void CommandRenameMasterArchive::Swap(CommandRenameMasterArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(master_slide_, other->master_slide_);
    std::swap(master_name_, other->master_name_);
    std::swap(old_master_name_, other->old_master_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandRenameMasterArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandRenameMasterArchive_descriptor_;
  metadata.reflection = CommandRenameMasterArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSlideInsertBuildArchive::kSuperFieldNumber;
const int CommandSlideInsertBuildArchive::kSlideNodeFieldNumber;
const int CommandSlideInsertBuildArchive::kBuildFieldNumber;
const int CommandSlideInsertBuildArchive::kIndexFieldNumber;
const int CommandSlideInsertBuildArchive::kShouldCreateChunksFieldNumber;
#endif  // !_MSC_VER

CommandSlideInsertBuildArchive::CommandSlideInsertBuildArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSlideInsertBuildArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  slidenode_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  build_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandSlideInsertBuildArchive::CommandSlideInsertBuildArchive(const CommandSlideInsertBuildArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSlideInsertBuildArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  slidenode_ = NULL;
  build_ = NULL;
  index_ = 0u;
  shouldcreatechunks_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSlideInsertBuildArchive::~CommandSlideInsertBuildArchive() {
  SharedDtor();
}

void CommandSlideInsertBuildArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete slidenode_;
    delete build_;
  }
}

void CommandSlideInsertBuildArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSlideInsertBuildArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSlideInsertBuildArchive_descriptor_;
}

const CommandSlideInsertBuildArchive& CommandSlideInsertBuildArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSlideInsertBuildArchive* CommandSlideInsertBuildArchive::default_instance_ = NULL;

CommandSlideInsertBuildArchive* CommandSlideInsertBuildArchive::New() const {
  return new CommandSlideInsertBuildArchive;
}

void CommandSlideInsertBuildArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_slidenode()) {
      if (slidenode_ != NULL) slidenode_->::TSP::Reference::Clear();
    }
    if (has_build()) {
      if (build_ != NULL) build_->::TSP::Reference::Clear();
    }
    index_ = 0u;
    shouldcreatechunks_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSlideInsertBuildArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_slideNode;
        break;
      }

      // required .TSP.Reference slideNode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slideNode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slidenode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_build;
        break;
      }

      // required .TSP.Reference build = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_build:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_build()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // required uint32 index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_shouldCreateChunks;
        break;
      }

      // optional bool shouldCreateChunks = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shouldCreateChunks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shouldcreatechunks_)));
          set_has_shouldcreatechunks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSlideInsertBuildArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference slideNode = 2;
  if (has_slidenode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slidenode(), output);
  }

  // required .TSP.Reference build = 3;
  if (has_build()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->build(), output);
  }

  // required uint32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->index(), output);
  }

  // optional bool shouldCreateChunks = 5;
  if (has_shouldcreatechunks()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->shouldcreatechunks(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSlideInsertBuildArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference slideNode = 2;
  if (has_slidenode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->slidenode(), target);
  }

  // required .TSP.Reference build = 3;
  if (has_build()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->build(), target);
  }

  // required uint32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->index(), target);
  }

  // optional bool shouldCreateChunks = 5;
  if (has_shouldcreatechunks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->shouldcreatechunks(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSlideInsertBuildArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference slideNode = 2;
    if (has_slidenode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slidenode());
    }

    // required .TSP.Reference build = 3;
    if (has_build()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->build());
    }

    // required uint32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional bool shouldCreateChunks = 5;
    if (has_shouldcreatechunks()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSlideInsertBuildArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSlideInsertBuildArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSlideInsertBuildArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSlideInsertBuildArchive::MergeFrom(const CommandSlideInsertBuildArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_slidenode()) {
      mutable_slidenode()->::TSP::Reference::MergeFrom(from.slidenode());
    }
    if (from.has_build()) {
      mutable_build()->::TSP::Reference::MergeFrom(from.build());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_shouldcreatechunks()) {
      set_shouldcreatechunks(from.shouldcreatechunks());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSlideInsertBuildArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSlideInsertBuildArchive::CopyFrom(const CommandSlideInsertBuildArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideInsertBuildArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_slidenode()) {
    if (!this->slidenode().IsInitialized()) return false;
  }
  if (has_build()) {
    if (!this->build().IsInitialized()) return false;
  }
  return true;
}

void CommandSlideInsertBuildArchive::Swap(CommandSlideInsertBuildArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(slidenode_, other->slidenode_);
    std::swap(build_, other->build_);
    std::swap(index_, other->index_);
    std::swap(shouldcreatechunks_, other->shouldcreatechunks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSlideInsertBuildArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSlideInsertBuildArchive_descriptor_;
  metadata.reflection = CommandSlideInsertBuildArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSlideRemoveBuildArchive::kSuperFieldNumber;
const int CommandSlideRemoveBuildArchive::kSlideNodeFieldNumber;
const int CommandSlideRemoveBuildArchive::kBuildFieldNumber;
const int CommandSlideRemoveBuildArchive::kIndexFieldNumber;
#endif  // !_MSC_VER

CommandSlideRemoveBuildArchive::CommandSlideRemoveBuildArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSlideRemoveBuildArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  slidenode_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  build_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandSlideRemoveBuildArchive::CommandSlideRemoveBuildArchive(const CommandSlideRemoveBuildArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSlideRemoveBuildArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  slidenode_ = NULL;
  build_ = NULL;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSlideRemoveBuildArchive::~CommandSlideRemoveBuildArchive() {
  SharedDtor();
}

void CommandSlideRemoveBuildArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete slidenode_;
    delete build_;
  }
}

void CommandSlideRemoveBuildArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSlideRemoveBuildArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSlideRemoveBuildArchive_descriptor_;
}

const CommandSlideRemoveBuildArchive& CommandSlideRemoveBuildArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSlideRemoveBuildArchive* CommandSlideRemoveBuildArchive::default_instance_ = NULL;

CommandSlideRemoveBuildArchive* CommandSlideRemoveBuildArchive::New() const {
  return new CommandSlideRemoveBuildArchive;
}

void CommandSlideRemoveBuildArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_slidenode()) {
      if (slidenode_ != NULL) slidenode_->::TSP::Reference::Clear();
    }
    if (has_build()) {
      if (build_ != NULL) build_->::TSP::Reference::Clear();
    }
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSlideRemoveBuildArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_slideNode;
        break;
      }

      // required .TSP.Reference slideNode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slideNode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slidenode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_build;
        break;
      }

      // required .TSP.Reference build = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_build:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_build()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // required uint32 index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSlideRemoveBuildArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference slideNode = 2;
  if (has_slidenode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slidenode(), output);
  }

  // required .TSP.Reference build = 3;
  if (has_build()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->build(), output);
  }

  // required uint32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSlideRemoveBuildArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference slideNode = 2;
  if (has_slidenode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->slidenode(), target);
  }

  // required .TSP.Reference build = 3;
  if (has_build()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->build(), target);
  }

  // required uint32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSlideRemoveBuildArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference slideNode = 2;
    if (has_slidenode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slidenode());
    }

    // required .TSP.Reference build = 3;
    if (has_build()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->build());
    }

    // required uint32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSlideRemoveBuildArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSlideRemoveBuildArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSlideRemoveBuildArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSlideRemoveBuildArchive::MergeFrom(const CommandSlideRemoveBuildArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_slidenode()) {
      mutable_slidenode()->::TSP::Reference::MergeFrom(from.slidenode());
    }
    if (from.has_build()) {
      mutable_build()->::TSP::Reference::MergeFrom(from.build());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSlideRemoveBuildArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSlideRemoveBuildArchive::CopyFrom(const CommandSlideRemoveBuildArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideRemoveBuildArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_slidenode()) {
    if (!this->slidenode().IsInitialized()) return false;
  }
  if (has_build()) {
    if (!this->build().IsInitialized()) return false;
  }
  return true;
}

void CommandSlideRemoveBuildArchive::Swap(CommandSlideRemoveBuildArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(slidenode_, other->slidenode_);
    std::swap(build_, other->build_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSlideRemoveBuildArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSlideRemoveBuildArchive_descriptor_;
  metadata.reflection = CommandSlideRemoveBuildArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSlideMoveBuildWithoutMovingChunksArchive::kSuperFieldNumber;
const int CommandSlideMoveBuildWithoutMovingChunksArchive::kSlideNodeFieldNumber;
const int CommandSlideMoveBuildWithoutMovingChunksArchive::kIndexFieldNumber;
const int CommandSlideMoveBuildWithoutMovingChunksArchive::kOldIndexFieldNumber;
#endif  // !_MSC_VER

CommandSlideMoveBuildWithoutMovingChunksArchive::CommandSlideMoveBuildWithoutMovingChunksArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSlideMoveBuildWithoutMovingChunksArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  slidenode_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandSlideMoveBuildWithoutMovingChunksArchive::CommandSlideMoveBuildWithoutMovingChunksArchive(const CommandSlideMoveBuildWithoutMovingChunksArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSlideMoveBuildWithoutMovingChunksArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  slidenode_ = NULL;
  index_ = 0u;
  oldindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSlideMoveBuildWithoutMovingChunksArchive::~CommandSlideMoveBuildWithoutMovingChunksArchive() {
  SharedDtor();
}

void CommandSlideMoveBuildWithoutMovingChunksArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete slidenode_;
  }
}

void CommandSlideMoveBuildWithoutMovingChunksArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSlideMoveBuildWithoutMovingChunksArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSlideMoveBuildWithoutMovingChunksArchive_descriptor_;
}

const CommandSlideMoveBuildWithoutMovingChunksArchive& CommandSlideMoveBuildWithoutMovingChunksArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSlideMoveBuildWithoutMovingChunksArchive* CommandSlideMoveBuildWithoutMovingChunksArchive::default_instance_ = NULL;

CommandSlideMoveBuildWithoutMovingChunksArchive* CommandSlideMoveBuildWithoutMovingChunksArchive::New() const {
  return new CommandSlideMoveBuildWithoutMovingChunksArchive;
}

void CommandSlideMoveBuildWithoutMovingChunksArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_slidenode()) {
      if (slidenode_ != NULL) slidenode_->::TSP::Reference::Clear();
    }
    index_ = 0u;
    oldindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSlideMoveBuildWithoutMovingChunksArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_slideNode;
        break;
      }

      // required .TSP.Reference slideNode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slideNode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slidenode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // required uint32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_oldIndex;
        break;
      }

      // required uint32 oldIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldindex_)));
          set_has_oldindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSlideMoveBuildWithoutMovingChunksArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference slideNode = 2;
  if (has_slidenode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slidenode(), output);
  }

  // required uint32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  // required uint32 oldIndex = 4;
  if (has_oldindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->oldindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSlideMoveBuildWithoutMovingChunksArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference slideNode = 2;
  if (has_slidenode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->slidenode(), target);
  }

  // required uint32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  // required uint32 oldIndex = 4;
  if (has_oldindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->oldindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSlideMoveBuildWithoutMovingChunksArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference slideNode = 2;
    if (has_slidenode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slidenode());
    }

    // required uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required uint32 oldIndex = 4;
    if (has_oldindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSlideMoveBuildWithoutMovingChunksArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSlideMoveBuildWithoutMovingChunksArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSlideMoveBuildWithoutMovingChunksArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSlideMoveBuildWithoutMovingChunksArchive::MergeFrom(const CommandSlideMoveBuildWithoutMovingChunksArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_slidenode()) {
      mutable_slidenode()->::TSP::Reference::MergeFrom(from.slidenode());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_oldindex()) {
      set_oldindex(from.oldindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSlideMoveBuildWithoutMovingChunksArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSlideMoveBuildWithoutMovingChunksArchive::CopyFrom(const CommandSlideMoveBuildWithoutMovingChunksArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideMoveBuildWithoutMovingChunksArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_slidenode()) {
    if (!this->slidenode().IsInitialized()) return false;
  }
  return true;
}

void CommandSlideMoveBuildWithoutMovingChunksArchive::Swap(CommandSlideMoveBuildWithoutMovingChunksArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(slidenode_, other->slidenode_);
    std::swap(index_, other->index_);
    std::swap(oldindex_, other->oldindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSlideMoveBuildWithoutMovingChunksArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSlideMoveBuildWithoutMovingChunksArchive_descriptor_;
  metadata.reflection = CommandSlideMoveBuildWithoutMovingChunksArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSlideMoveBuildsArchive::kSuperFieldNumber;
const int CommandSlideMoveBuildsArchive::kBuildsFieldNumber;
const int CommandSlideMoveBuildsArchive::kToIndexFieldNumber;
#endif  // !_MSC_VER

CommandSlideMoveBuildsArchive::CommandSlideMoveBuildsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSlideMoveBuildsArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

CommandSlideMoveBuildsArchive::CommandSlideMoveBuildsArchive(const CommandSlideMoveBuildsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSlideMoveBuildsArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  toindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSlideMoveBuildsArchive::~CommandSlideMoveBuildsArchive() {
  SharedDtor();
}

void CommandSlideMoveBuildsArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSlideMoveBuildsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSlideMoveBuildsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSlideMoveBuildsArchive_descriptor_;
}

const CommandSlideMoveBuildsArchive& CommandSlideMoveBuildsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSlideMoveBuildsArchive* CommandSlideMoveBuildsArchive::default_instance_ = NULL;

CommandSlideMoveBuildsArchive* CommandSlideMoveBuildsArchive::New() const {
  return new CommandSlideMoveBuildsArchive;
}

void CommandSlideMoveBuildsArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    toindex_ = 0u;
  }
  builds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSlideMoveBuildsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_builds;
        break;
      }

      // repeated .TSP.Reference builds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_builds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_builds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_builds;
        if (input->ExpectTag(24)) goto parse_toIndex;
        break;
      }

      // optional uint32 toIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &toindex_)));
          set_has_toindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSlideMoveBuildsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // repeated .TSP.Reference builds = 2;
  for (int i = 0; i < this->builds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->builds(i), output);
  }

  // optional uint32 toIndex = 3;
  if (has_toindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->toindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSlideMoveBuildsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // repeated .TSP.Reference builds = 2;
  for (int i = 0; i < this->builds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->builds(i), target);
  }

  // optional uint32 toIndex = 3;
  if (has_toindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->toindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSlideMoveBuildsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional uint32 toIndex = 3;
    if (has_toindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->toindex());
    }

  }
  // repeated .TSP.Reference builds = 2;
  total_size += 1 * this->builds_size();
  for (int i = 0; i < this->builds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->builds(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSlideMoveBuildsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSlideMoveBuildsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSlideMoveBuildsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSlideMoveBuildsArchive::MergeFrom(const CommandSlideMoveBuildsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  builds_.MergeFrom(from.builds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_toindex()) {
      set_toindex(from.toindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSlideMoveBuildsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSlideMoveBuildsArchive::CopyFrom(const CommandSlideMoveBuildsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideMoveBuildsArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  for (int i = 0; i < builds_size(); i++) {
    if (!this->builds(i).IsInitialized()) return false;
  }
  return true;
}

void CommandSlideMoveBuildsArchive::Swap(CommandSlideMoveBuildsArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    builds_.Swap(&other->builds_);
    std::swap(toindex_, other->toindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSlideMoveBuildsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSlideMoveBuildsArchive_descriptor_;
  metadata.reflection = CommandSlideMoveBuildsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSlideInsertBuildChunkArchive::kSuperFieldNumber;
const int CommandSlideInsertBuildChunkArchive::kSlideFieldNumber;
const int CommandSlideInsertBuildChunkArchive::kBuildChunkFieldNumber;
const int CommandSlideInsertBuildChunkArchive::kIndexFieldNumber;
#endif  // !_MSC_VER

CommandSlideInsertBuildChunkArchive::CommandSlideInsertBuildChunkArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSlideInsertBuildChunkArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  slide_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  buildchunk_ = const_cast< ::KN::BuildChunkArchive*>(&::KN::BuildChunkArchive::default_instance());
}

CommandSlideInsertBuildChunkArchive::CommandSlideInsertBuildChunkArchive(const CommandSlideInsertBuildChunkArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSlideInsertBuildChunkArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  slide_ = NULL;
  buildchunk_ = NULL;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSlideInsertBuildChunkArchive::~CommandSlideInsertBuildChunkArchive() {
  SharedDtor();
}

void CommandSlideInsertBuildChunkArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete slide_;
    delete buildchunk_;
  }
}

void CommandSlideInsertBuildChunkArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSlideInsertBuildChunkArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSlideInsertBuildChunkArchive_descriptor_;
}

const CommandSlideInsertBuildChunkArchive& CommandSlideInsertBuildChunkArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSlideInsertBuildChunkArchive* CommandSlideInsertBuildChunkArchive::default_instance_ = NULL;

CommandSlideInsertBuildChunkArchive* CommandSlideInsertBuildChunkArchive::New() const {
  return new CommandSlideInsertBuildChunkArchive;
}

void CommandSlideInsertBuildChunkArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_slide()) {
      if (slide_ != NULL) slide_->::TSP::Reference::Clear();
    }
    if (has_buildchunk()) {
      if (buildchunk_ != NULL) buildchunk_->::KN::BuildChunkArchive::Clear();
    }
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSlideInsertBuildChunkArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_slide;
        break;
      }

      // required .TSP.Reference slide = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slide:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slide()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_buildChunk;
        break;
      }

      // required .KN.BuildChunkArchive buildChunk = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildChunk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buildchunk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // required uint32 index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSlideInsertBuildChunkArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference slide = 2;
  if (has_slide()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slide(), output);
  }

  // required .KN.BuildChunkArchive buildChunk = 3;
  if (has_buildchunk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buildchunk(), output);
  }

  // required uint32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSlideInsertBuildChunkArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference slide = 2;
  if (has_slide()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->slide(), target);
  }

  // required .KN.BuildChunkArchive buildChunk = 3;
  if (has_buildchunk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->buildchunk(), target);
  }

  // required uint32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSlideInsertBuildChunkArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference slide = 2;
    if (has_slide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slide());
    }

    // required .KN.BuildChunkArchive buildChunk = 3;
    if (has_buildchunk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buildchunk());
    }

    // required uint32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSlideInsertBuildChunkArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSlideInsertBuildChunkArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSlideInsertBuildChunkArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSlideInsertBuildChunkArchive::MergeFrom(const CommandSlideInsertBuildChunkArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_slide()) {
      mutable_slide()->::TSP::Reference::MergeFrom(from.slide());
    }
    if (from.has_buildchunk()) {
      mutable_buildchunk()->::KN::BuildChunkArchive::MergeFrom(from.buildchunk());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSlideInsertBuildChunkArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSlideInsertBuildChunkArchive::CopyFrom(const CommandSlideInsertBuildChunkArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideInsertBuildChunkArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_slide()) {
    if (!this->slide().IsInitialized()) return false;
  }
  if (has_buildchunk()) {
    if (!this->buildchunk().IsInitialized()) return false;
  }
  return true;
}

void CommandSlideInsertBuildChunkArchive::Swap(CommandSlideInsertBuildChunkArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(slide_, other->slide_);
    std::swap(buildchunk_, other->buildchunk_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSlideInsertBuildChunkArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSlideInsertBuildChunkArchive_descriptor_;
  metadata.reflection = CommandSlideInsertBuildChunkArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSlideRemoveBuildChunkArchive::kSuperFieldNumber;
const int CommandSlideRemoveBuildChunkArchive::kSlideFieldNumber;
const int CommandSlideRemoveBuildChunkArchive::kBuildChunkFieldNumber;
const int CommandSlideRemoveBuildChunkArchive::kIndexFieldNumber;
#endif  // !_MSC_VER

CommandSlideRemoveBuildChunkArchive::CommandSlideRemoveBuildChunkArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSlideRemoveBuildChunkArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  slide_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  buildchunk_ = const_cast< ::KN::BuildChunkArchive*>(&::KN::BuildChunkArchive::default_instance());
}

CommandSlideRemoveBuildChunkArchive::CommandSlideRemoveBuildChunkArchive(const CommandSlideRemoveBuildChunkArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSlideRemoveBuildChunkArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  slide_ = NULL;
  buildchunk_ = NULL;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSlideRemoveBuildChunkArchive::~CommandSlideRemoveBuildChunkArchive() {
  SharedDtor();
}

void CommandSlideRemoveBuildChunkArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete slide_;
    delete buildchunk_;
  }
}

void CommandSlideRemoveBuildChunkArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSlideRemoveBuildChunkArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSlideRemoveBuildChunkArchive_descriptor_;
}

const CommandSlideRemoveBuildChunkArchive& CommandSlideRemoveBuildChunkArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSlideRemoveBuildChunkArchive* CommandSlideRemoveBuildChunkArchive::default_instance_ = NULL;

CommandSlideRemoveBuildChunkArchive* CommandSlideRemoveBuildChunkArchive::New() const {
  return new CommandSlideRemoveBuildChunkArchive;
}

void CommandSlideRemoveBuildChunkArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_slide()) {
      if (slide_ != NULL) slide_->::TSP::Reference::Clear();
    }
    if (has_buildchunk()) {
      if (buildchunk_ != NULL) buildchunk_->::KN::BuildChunkArchive::Clear();
    }
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSlideRemoveBuildChunkArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_slide;
        break;
      }

      // required .TSP.Reference slide = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slide:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slide()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_buildChunk;
        break;
      }

      // required .KN.BuildChunkArchive buildChunk = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildChunk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buildchunk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // required uint32 index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSlideRemoveBuildChunkArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference slide = 2;
  if (has_slide()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slide(), output);
  }

  // required .KN.BuildChunkArchive buildChunk = 3;
  if (has_buildchunk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buildchunk(), output);
  }

  // required uint32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSlideRemoveBuildChunkArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference slide = 2;
  if (has_slide()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->slide(), target);
  }

  // required .KN.BuildChunkArchive buildChunk = 3;
  if (has_buildchunk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->buildchunk(), target);
  }

  // required uint32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSlideRemoveBuildChunkArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference slide = 2;
    if (has_slide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slide());
    }

    // required .KN.BuildChunkArchive buildChunk = 3;
    if (has_buildchunk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buildchunk());
    }

    // required uint32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSlideRemoveBuildChunkArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSlideRemoveBuildChunkArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSlideRemoveBuildChunkArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSlideRemoveBuildChunkArchive::MergeFrom(const CommandSlideRemoveBuildChunkArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_slide()) {
      mutable_slide()->::TSP::Reference::MergeFrom(from.slide());
    }
    if (from.has_buildchunk()) {
      mutable_buildchunk()->::KN::BuildChunkArchive::MergeFrom(from.buildchunk());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSlideRemoveBuildChunkArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSlideRemoveBuildChunkArchive::CopyFrom(const CommandSlideRemoveBuildChunkArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideRemoveBuildChunkArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_slide()) {
    if (!this->slide().IsInitialized()) return false;
  }
  if (has_buildchunk()) {
    if (!this->buildchunk().IsInitialized()) return false;
  }
  return true;
}

void CommandSlideRemoveBuildChunkArchive::Swap(CommandSlideRemoveBuildChunkArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(slide_, other->slide_);
    std::swap(buildchunk_, other->buildchunk_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSlideRemoveBuildChunkArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSlideRemoveBuildChunkArchive_descriptor_;
  metadata.reflection = CommandSlideRemoveBuildChunkArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSlideMoveBuildChunkArchive::kSuperFieldNumber;
const int CommandSlideMoveBuildChunkArchive::kSlideFieldNumber;
const int CommandSlideMoveBuildChunkArchive::kIndexFieldNumber;
const int CommandSlideMoveBuildChunkArchive::kOldIndexFieldNumber;
#endif  // !_MSC_VER

CommandSlideMoveBuildChunkArchive::CommandSlideMoveBuildChunkArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSlideMoveBuildChunkArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  slide_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandSlideMoveBuildChunkArchive::CommandSlideMoveBuildChunkArchive(const CommandSlideMoveBuildChunkArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSlideMoveBuildChunkArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  slide_ = NULL;
  index_ = 0u;
  oldindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSlideMoveBuildChunkArchive::~CommandSlideMoveBuildChunkArchive() {
  SharedDtor();
}

void CommandSlideMoveBuildChunkArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete slide_;
  }
}

void CommandSlideMoveBuildChunkArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSlideMoveBuildChunkArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSlideMoveBuildChunkArchive_descriptor_;
}

const CommandSlideMoveBuildChunkArchive& CommandSlideMoveBuildChunkArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSlideMoveBuildChunkArchive* CommandSlideMoveBuildChunkArchive::default_instance_ = NULL;

CommandSlideMoveBuildChunkArchive* CommandSlideMoveBuildChunkArchive::New() const {
  return new CommandSlideMoveBuildChunkArchive;
}

void CommandSlideMoveBuildChunkArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_slide()) {
      if (slide_ != NULL) slide_->::TSP::Reference::Clear();
    }
    index_ = 0u;
    oldindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSlideMoveBuildChunkArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_slide;
        break;
      }

      // required .TSP.Reference slide = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slide:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slide()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // required uint32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_oldIndex;
        break;
      }

      // required uint32 oldIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldindex_)));
          set_has_oldindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSlideMoveBuildChunkArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference slide = 2;
  if (has_slide()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slide(), output);
  }

  // required uint32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  // required uint32 oldIndex = 4;
  if (has_oldindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->oldindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSlideMoveBuildChunkArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference slide = 2;
  if (has_slide()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->slide(), target);
  }

  // required uint32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  // required uint32 oldIndex = 4;
  if (has_oldindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->oldindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSlideMoveBuildChunkArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference slide = 2;
    if (has_slide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slide());
    }

    // required uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required uint32 oldIndex = 4;
    if (has_oldindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSlideMoveBuildChunkArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSlideMoveBuildChunkArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSlideMoveBuildChunkArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSlideMoveBuildChunkArchive::MergeFrom(const CommandSlideMoveBuildChunkArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_slide()) {
      mutable_slide()->::TSP::Reference::MergeFrom(from.slide());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_oldindex()) {
      set_oldindex(from.oldindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSlideMoveBuildChunkArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSlideMoveBuildChunkArchive::CopyFrom(const CommandSlideMoveBuildChunkArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideMoveBuildChunkArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_slide()) {
    if (!this->slide().IsInitialized()) return false;
  }
  return true;
}

void CommandSlideMoveBuildChunkArchive::Swap(CommandSlideMoveBuildChunkArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(slide_, other->slide_);
    std::swap(index_, other->index_);
    std::swap(oldindex_, other->oldindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSlideMoveBuildChunkArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSlideMoveBuildChunkArchive_descriptor_;
  metadata.reflection = CommandSlideMoveBuildChunkArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSlideMoveBuildChunksArchive::kSuperFieldNumber;
const int CommandSlideMoveBuildChunksArchive::kBuildChunksFieldNumber;
const int CommandSlideMoveBuildChunksArchive::kToIndexFieldNumber;
#endif  // !_MSC_VER

CommandSlideMoveBuildChunksArchive::CommandSlideMoveBuildChunksArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSlideMoveBuildChunksArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

CommandSlideMoveBuildChunksArchive::CommandSlideMoveBuildChunksArchive(const CommandSlideMoveBuildChunksArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSlideMoveBuildChunksArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  toindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSlideMoveBuildChunksArchive::~CommandSlideMoveBuildChunksArchive() {
  SharedDtor();
}

void CommandSlideMoveBuildChunksArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSlideMoveBuildChunksArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSlideMoveBuildChunksArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSlideMoveBuildChunksArchive_descriptor_;
}

const CommandSlideMoveBuildChunksArchive& CommandSlideMoveBuildChunksArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSlideMoveBuildChunksArchive* CommandSlideMoveBuildChunksArchive::default_instance_ = NULL;

CommandSlideMoveBuildChunksArchive* CommandSlideMoveBuildChunksArchive::New() const {
  return new CommandSlideMoveBuildChunksArchive;
}

void CommandSlideMoveBuildChunksArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    toindex_ = 0u;
  }
  buildchunks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSlideMoveBuildChunksArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_buildChunks;
        break;
      }

      // repeated .KN.BuildChunkArchive buildChunks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildChunks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildchunks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_buildChunks;
        if (input->ExpectTag(24)) goto parse_toIndex;
        break;
      }

      // optional uint32 toIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &toindex_)));
          set_has_toindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSlideMoveBuildChunksArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // repeated .KN.BuildChunkArchive buildChunks = 2;
  for (int i = 0; i < this->buildchunks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->buildchunks(i), output);
  }

  // optional uint32 toIndex = 3;
  if (has_toindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->toindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSlideMoveBuildChunksArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // repeated .KN.BuildChunkArchive buildChunks = 2;
  for (int i = 0; i < this->buildchunks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->buildchunks(i), target);
  }

  // optional uint32 toIndex = 3;
  if (has_toindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->toindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSlideMoveBuildChunksArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional uint32 toIndex = 3;
    if (has_toindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->toindex());
    }

  }
  // repeated .KN.BuildChunkArchive buildChunks = 2;
  total_size += 1 * this->buildchunks_size();
  for (int i = 0; i < this->buildchunks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buildchunks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSlideMoveBuildChunksArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSlideMoveBuildChunksArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSlideMoveBuildChunksArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSlideMoveBuildChunksArchive::MergeFrom(const CommandSlideMoveBuildChunksArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  buildchunks_.MergeFrom(from.buildchunks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_toindex()) {
      set_toindex(from.toindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSlideMoveBuildChunksArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSlideMoveBuildChunksArchive::CopyFrom(const CommandSlideMoveBuildChunksArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideMoveBuildChunksArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  for (int i = 0; i < buildchunks_size(); i++) {
    if (!this->buildchunks(i).IsInitialized()) return false;
  }
  return true;
}

void CommandSlideMoveBuildChunksArchive::Swap(CommandSlideMoveBuildChunksArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    buildchunks_.Swap(&other->buildchunks_);
    std::swap(toindex_, other->toindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSlideMoveBuildChunksArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSlideMoveBuildChunksArchive_descriptor_;
  metadata.reflection = CommandSlideMoveBuildChunksArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandBuildSetValueArchive::kSuperFieldNumber;
const int CommandBuildSetValueArchive::kBuildFieldNumber;
const int CommandBuildSetValueArchive::kPropertyFieldNumber;
const int CommandBuildSetValueArchive::kEffectsFieldNumber;
const int CommandBuildSetValueArchive::kTypesFieldNumber;
const int CommandBuildSetValueArchive::kDeliveriesFieldNumber;
const int CommandBuildSetValueArchive::kDirectionsFieldNumber;
const int CommandBuildSetValueArchive::kDurationsFieldNumber;
const int CommandBuildSetValueArchive::kDelaysFieldNumber;
const int CommandBuildSetValueArchive::kDelayAutomaticAftersFieldNumber;
const int CommandBuildSetValueArchive::kDelayAutomaticWithsFieldNumber;
const int CommandBuildSetValueArchive::kEventTriggersFieldNumber;
const int CommandBuildSetValueArchive::kOldAttributesFieldNumber;
const int CommandBuildSetValueArchive::kCurrentAttributesFieldNumber;
#endif  // !_MSC_VER

CommandBuildSetValueArchive::CommandBuildSetValueArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandBuildSetValueArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  build_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  oldattributes_ = const_cast< ::KN::BuildAttributesArchive*>(&::KN::BuildAttributesArchive::default_instance());
  currentattributes_ = const_cast< ::KN::BuildAttributesArchive*>(&::KN::BuildAttributesArchive::default_instance());
}

CommandBuildSetValueArchive::CommandBuildSetValueArchive(const CommandBuildSetValueArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandBuildSetValueArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  build_ = NULL;
  property_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  oldattributes_ = NULL;
  currentattributes_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandBuildSetValueArchive::~CommandBuildSetValueArchive() {
  SharedDtor();
}

void CommandBuildSetValueArchive::SharedDtor() {
  if (property_ != &::google::protobuf::internal::kEmptyString) {
    delete property_;
  }
  if (this != default_instance_) {
    delete super_;
    delete build_;
    delete oldattributes_;
    delete currentattributes_;
  }
}

void CommandBuildSetValueArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandBuildSetValueArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandBuildSetValueArchive_descriptor_;
}

const CommandBuildSetValueArchive& CommandBuildSetValueArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandBuildSetValueArchive* CommandBuildSetValueArchive::default_instance_ = NULL;

CommandBuildSetValueArchive* CommandBuildSetValueArchive::New() const {
  return new CommandBuildSetValueArchive;
}

void CommandBuildSetValueArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_build()) {
      if (build_ != NULL) build_->::TSP::Reference::Clear();
    }
    if (has_property()) {
      if (property_ != &::google::protobuf::internal::kEmptyString) {
        property_->clear();
      }
    }
  }
  if (_has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    if (has_oldattributes()) {
      if (oldattributes_ != NULL) oldattributes_->::KN::BuildAttributesArchive::Clear();
    }
    if (has_currentattributes()) {
      if (currentattributes_ != NULL) currentattributes_->::KN::BuildAttributesArchive::Clear();
    }
  }
  effects_.Clear();
  types_.Clear();
  deliveries_.Clear();
  directions_.Clear();
  durations_.Clear();
  delays_.Clear();
  delayautomaticafters_.Clear();
  delayautomaticwiths_.Clear();
  eventtriggers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandBuildSetValueArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_build;
        break;
      }

      // required .TSP.Reference build = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_build:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_build()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_property;
        break;
      }

      // required string property = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_property()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->property().data(), this->property().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_effects;
        break;
      }

      // repeated string effects = 4 [deprecated = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_effects()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->effects(this->effects_size() - 1).data(),
            this->effects(this->effects_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_effects;
        if (input->ExpectTag(42)) goto parse_types;
        break;
      }

      // repeated string types = 5 [deprecated = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_types()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->types(this->types_size() - 1).data(),
            this->types(this->types_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_types;
        if (input->ExpectTag(50)) goto parse_deliveries;
        break;
      }

      // repeated string deliveries = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deliveries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_deliveries()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deliveries(this->deliveries_size() - 1).data(),
            this->deliveries(this->deliveries_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_deliveries;
        if (input->ExpectTag(56)) goto parse_directions;
        break;
      }

      // repeated uint32 directions = 7 [deprecated = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_directions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_directions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_directions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_directions;
        if (input->ExpectTag(65)) goto parse_durations;
        break;
      }

      // repeated double durations = 8 [deprecated = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_durations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 65, input, this->mutable_durations())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_durations())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_durations;
        if (input->ExpectTag(73)) goto parse_delays;
        break;
      }

      // repeated double delays = 9 [deprecated = true];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_delays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 73, input, this->mutable_delays())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_delays())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_delays;
        if (input->ExpectTag(81)) goto parse_delayAutomaticAfters;
        break;
      }

      // repeated double delayAutomaticAfters = 10 [deprecated = true];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_delayAutomaticAfters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 81, input, this->mutable_delayautomaticafters())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_delayautomaticafters())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_delayAutomaticAfters;
        if (input->ExpectTag(89)) goto parse_delayAutomaticWiths;
        break;
      }

      // repeated double delayAutomaticWiths = 11 [deprecated = true];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_delayAutomaticWiths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 89, input, this->mutable_delayautomaticwiths())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_delayautomaticwiths())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_delayAutomaticWiths;
        if (input->ExpectTag(96)) goto parse_eventTriggers;
        break;
      }

      // repeated bool eventTriggers = 12 [deprecated = true];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventTriggers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 96, input, this->mutable_eventtriggers())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_eventtriggers())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_eventTriggers;
        if (input->ExpectTag(106)) goto parse_oldAttributes;
        break;
      }

      // optional .KN.BuildAttributesArchive oldAttributes = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldAttributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldattributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_currentAttributes;
        break;
      }

      // optional .KN.BuildAttributesArchive currentAttributes = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currentAttributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_currentattributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandBuildSetValueArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference build = 2;
  if (has_build()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->build(), output);
  }

  // required string property = 3;
  if (has_property()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->property().data(), this->property().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->property(), output);
  }

  // repeated string effects = 4 [deprecated = true];
  for (int i = 0; i < this->effects_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->effects(i).data(), this->effects(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->effects(i), output);
  }

  // repeated string types = 5 [deprecated = true];
  for (int i = 0; i < this->types_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->types(i).data(), this->types(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->types(i), output);
  }

  // repeated string deliveries = 6;
  for (int i = 0; i < this->deliveries_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->deliveries(i).data(), this->deliveries(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->deliveries(i), output);
  }

  // repeated uint32 directions = 7 [deprecated = true];
  for (int i = 0; i < this->directions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->directions(i), output);
  }

  // repeated double durations = 8 [deprecated = true];
  for (int i = 0; i < this->durations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      8, this->durations(i), output);
  }

  // repeated double delays = 9 [deprecated = true];
  for (int i = 0; i < this->delays_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      9, this->delays(i), output);
  }

  // repeated double delayAutomaticAfters = 10 [deprecated = true];
  for (int i = 0; i < this->delayautomaticafters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      10, this->delayautomaticafters(i), output);
  }

  // repeated double delayAutomaticWiths = 11 [deprecated = true];
  for (int i = 0; i < this->delayautomaticwiths_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      11, this->delayautomaticwiths(i), output);
  }

  // repeated bool eventTriggers = 12 [deprecated = true];
  for (int i = 0; i < this->eventtriggers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      12, this->eventtriggers(i), output);
  }

  // optional .KN.BuildAttributesArchive oldAttributes = 13;
  if (has_oldattributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->oldattributes(), output);
  }

  // optional .KN.BuildAttributesArchive currentAttributes = 14;
  if (has_currentattributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->currentattributes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandBuildSetValueArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference build = 2;
  if (has_build()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->build(), target);
  }

  // required string property = 3;
  if (has_property()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->property().data(), this->property().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->property(), target);
  }

  // repeated string effects = 4 [deprecated = true];
  for (int i = 0; i < this->effects_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effects(i).data(), this->effects(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->effects(i), target);
  }

  // repeated string types = 5 [deprecated = true];
  for (int i = 0; i < this->types_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->types(i).data(), this->types(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->types(i), target);
  }

  // repeated string deliveries = 6;
  for (int i = 0; i < this->deliveries_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deliveries(i).data(), this->deliveries(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->deliveries(i), target);
  }

  // repeated uint32 directions = 7 [deprecated = true];
  for (int i = 0; i < this->directions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->directions(i), target);
  }

  // repeated double durations = 8 [deprecated = true];
  for (int i = 0; i < this->durations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(8, this->durations(i), target);
  }

  // repeated double delays = 9 [deprecated = true];
  for (int i = 0; i < this->delays_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(9, this->delays(i), target);
  }

  // repeated double delayAutomaticAfters = 10 [deprecated = true];
  for (int i = 0; i < this->delayautomaticafters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(10, this->delayautomaticafters(i), target);
  }

  // repeated double delayAutomaticWiths = 11 [deprecated = true];
  for (int i = 0; i < this->delayautomaticwiths_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(11, this->delayautomaticwiths(i), target);
  }

  // repeated bool eventTriggers = 12 [deprecated = true];
  for (int i = 0; i < this->eventtriggers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(12, this->eventtriggers(i), target);
  }

  // optional .KN.BuildAttributesArchive oldAttributes = 13;
  if (has_oldattributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->oldattributes(), target);
  }

  // optional .KN.BuildAttributesArchive currentAttributes = 14;
  if (has_currentattributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->currentattributes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandBuildSetValueArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference build = 2;
    if (has_build()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->build());
    }

    // required string property = 3;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->property());
    }

  }
  if (_has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    // optional .KN.BuildAttributesArchive oldAttributes = 13;
    if (has_oldattributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oldattributes());
    }

    // optional .KN.BuildAttributesArchive currentAttributes = 14;
    if (has_currentattributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->currentattributes());
    }

  }
  // repeated string effects = 4 [deprecated = true];
  total_size += 1 * this->effects_size();
  for (int i = 0; i < this->effects_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->effects(i));
  }

  // repeated string types = 5 [deprecated = true];
  total_size += 1 * this->types_size();
  for (int i = 0; i < this->types_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->types(i));
  }

  // repeated string deliveries = 6;
  total_size += 1 * this->deliveries_size();
  for (int i = 0; i < this->deliveries_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->deliveries(i));
  }

  // repeated uint32 directions = 7 [deprecated = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->directions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->directions(i));
    }
    total_size += 1 * this->directions_size() + data_size;
  }

  // repeated double durations = 8 [deprecated = true];
  {
    int data_size = 0;
    data_size = 8 * this->durations_size();
    total_size += 1 * this->durations_size() + data_size;
  }

  // repeated double delays = 9 [deprecated = true];
  {
    int data_size = 0;
    data_size = 8 * this->delays_size();
    total_size += 1 * this->delays_size() + data_size;
  }

  // repeated double delayAutomaticAfters = 10 [deprecated = true];
  {
    int data_size = 0;
    data_size = 8 * this->delayautomaticafters_size();
    total_size += 1 * this->delayautomaticafters_size() + data_size;
  }

  // repeated double delayAutomaticWiths = 11 [deprecated = true];
  {
    int data_size = 0;
    data_size = 8 * this->delayautomaticwiths_size();
    total_size += 1 * this->delayautomaticwiths_size() + data_size;
  }

  // repeated bool eventTriggers = 12 [deprecated = true];
  {
    int data_size = 0;
    data_size = 1 * this->eventtriggers_size();
    total_size += 1 * this->eventtriggers_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandBuildSetValueArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandBuildSetValueArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandBuildSetValueArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandBuildSetValueArchive::MergeFrom(const CommandBuildSetValueArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  effects_.MergeFrom(from.effects_);
  types_.MergeFrom(from.types_);
  deliveries_.MergeFrom(from.deliveries_);
  directions_.MergeFrom(from.directions_);
  durations_.MergeFrom(from.durations_);
  delays_.MergeFrom(from.delays_);
  delayautomaticafters_.MergeFrom(from.delayautomaticafters_);
  delayautomaticwiths_.MergeFrom(from.delayautomaticwiths_);
  eventtriggers_.MergeFrom(from.eventtriggers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_build()) {
      mutable_build()->::TSP::Reference::MergeFrom(from.build());
    }
    if (from.has_property()) {
      set_property(from.property());
    }
  }
  if (from._has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    if (from.has_oldattributes()) {
      mutable_oldattributes()->::KN::BuildAttributesArchive::MergeFrom(from.oldattributes());
    }
    if (from.has_currentattributes()) {
      mutable_currentattributes()->::KN::BuildAttributesArchive::MergeFrom(from.currentattributes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandBuildSetValueArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandBuildSetValueArchive::CopyFrom(const CommandBuildSetValueArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandBuildSetValueArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_build()) {
    if (!this->build().IsInitialized()) return false;
  }
  if (has_oldattributes()) {
    if (!this->oldattributes().IsInitialized()) return false;
  }
  if (has_currentattributes()) {
    if (!this->currentattributes().IsInitialized()) return false;
  }
  return true;
}

void CommandBuildSetValueArchive::Swap(CommandBuildSetValueArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(build_, other->build_);
    std::swap(property_, other->property_);
    effects_.Swap(&other->effects_);
    types_.Swap(&other->types_);
    deliveries_.Swap(&other->deliveries_);
    directions_.Swap(&other->directions_);
    durations_.Swap(&other->durations_);
    delays_.Swap(&other->delays_);
    delayautomaticafters_.Swap(&other->delayautomaticafters_);
    delayautomaticwiths_.Swap(&other->delayautomaticwiths_);
    eventtriggers_.Swap(&other->eventtriggers_);
    std::swap(oldattributes_, other->oldattributes_);
    std::swap(currentattributes_, other->currentattributes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandBuildSetValueArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandBuildSetValueArchive_descriptor_;
  metadata.reflection = CommandBuildSetValueArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandBuildChunkSetValueArchive::kSuperFieldNumber;
const int CommandBuildChunkSetValueArchive::kBuildChunkFieldNumber;
const int CommandBuildChunkSetValueArchive::kPropertyFieldNumber;
const int CommandBuildChunkSetValueArchive::kReferentsFieldNumber;
const int CommandBuildChunkSetValueArchive::kAutomaticsFieldNumber;
const int CommandBuildChunkSetValueArchive::kDurationsFieldNumber;
const int CommandBuildChunkSetValueArchive::kDelaysFieldNumber;
const int CommandBuildChunkSetValueArchive::kOldOwnsValueFieldNumber;
#endif  // !_MSC_VER

CommandBuildChunkSetValueArchive::CommandBuildChunkSetValueArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandBuildChunkSetValueArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  buildchunk_ = const_cast< ::KN::BuildChunkArchive*>(&::KN::BuildChunkArchive::default_instance());
}

CommandBuildChunkSetValueArchive::CommandBuildChunkSetValueArchive(const CommandBuildChunkSetValueArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandBuildChunkSetValueArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  buildchunk_ = NULL;
  property_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  oldownsvalue_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandBuildChunkSetValueArchive::~CommandBuildChunkSetValueArchive() {
  SharedDtor();
}

void CommandBuildChunkSetValueArchive::SharedDtor() {
  if (property_ != &::google::protobuf::internal::kEmptyString) {
    delete property_;
  }
  if (this != default_instance_) {
    delete super_;
    delete buildchunk_;
  }
}

void CommandBuildChunkSetValueArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandBuildChunkSetValueArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandBuildChunkSetValueArchive_descriptor_;
}

const CommandBuildChunkSetValueArchive& CommandBuildChunkSetValueArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandBuildChunkSetValueArchive* CommandBuildChunkSetValueArchive::default_instance_ = NULL;

CommandBuildChunkSetValueArchive* CommandBuildChunkSetValueArchive::New() const {
  return new CommandBuildChunkSetValueArchive;
}

void CommandBuildChunkSetValueArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_buildchunk()) {
      if (buildchunk_ != NULL) buildchunk_->::KN::BuildChunkArchive::Clear();
    }
    if (has_property()) {
      if (property_ != &::google::protobuf::internal::kEmptyString) {
        property_->clear();
      }
    }
    oldownsvalue_ = false;
  }
  referents_.Clear();
  automatics_.Clear();
  durations_.Clear();
  delays_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandBuildChunkSetValueArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_buildChunk;
        break;
      }

      // required .KN.BuildChunkArchive buildChunk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildChunk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buildchunk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_property;
        break;
      }

      // required string property = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_property()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->property().data(), this->property().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_referents;
        break;
      }

      // repeated uint32 referents = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_referents:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_referents())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_referents())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_referents;
        if (input->ExpectTag(40)) goto parse_automatics;
        break;
      }

      // repeated bool automatics = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_automatics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 40, input, this->mutable_automatics())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_automatics())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_automatics;
        if (input->ExpectTag(49)) goto parse_durations;
        break;
      }

      // repeated double durations = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_durations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 49, input, this->mutable_durations())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_durations())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_durations;
        if (input->ExpectTag(57)) goto parse_delays;
        break;
      }

      // repeated double delays = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_delays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 57, input, this->mutable_delays())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_delays())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_delays;
        if (input->ExpectTag(64)) goto parse_oldOwnsValue;
        break;
      }

      // optional bool oldOwnsValue = 8 [deprecated = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldOwnsValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &oldownsvalue_)));
          set_has_oldownsvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandBuildChunkSetValueArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .KN.BuildChunkArchive buildChunk = 2;
  if (has_buildchunk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->buildchunk(), output);
  }

  // required string property = 3;
  if (has_property()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->property().data(), this->property().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->property(), output);
  }

  // repeated uint32 referents = 4;
  for (int i = 0; i < this->referents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->referents(i), output);
  }

  // repeated bool automatics = 5;
  for (int i = 0; i < this->automatics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      5, this->automatics(i), output);
  }

  // repeated double durations = 6;
  for (int i = 0; i < this->durations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      6, this->durations(i), output);
  }

  // repeated double delays = 7;
  for (int i = 0; i < this->delays_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      7, this->delays(i), output);
  }

  // optional bool oldOwnsValue = 8 [deprecated = true];
  if (has_oldownsvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->oldownsvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandBuildChunkSetValueArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .KN.BuildChunkArchive buildChunk = 2;
  if (has_buildchunk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->buildchunk(), target);
  }

  // required string property = 3;
  if (has_property()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->property().data(), this->property().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->property(), target);
  }

  // repeated uint32 referents = 4;
  for (int i = 0; i < this->referents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->referents(i), target);
  }

  // repeated bool automatics = 5;
  for (int i = 0; i < this->automatics_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(5, this->automatics(i), target);
  }

  // repeated double durations = 6;
  for (int i = 0; i < this->durations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(6, this->durations(i), target);
  }

  // repeated double delays = 7;
  for (int i = 0; i < this->delays_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(7, this->delays(i), target);
  }

  // optional bool oldOwnsValue = 8 [deprecated = true];
  if (has_oldownsvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->oldownsvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandBuildChunkSetValueArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .KN.BuildChunkArchive buildChunk = 2;
    if (has_buildchunk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buildchunk());
    }

    // required string property = 3;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->property());
    }

    // optional bool oldOwnsValue = 8 [deprecated = true];
    if (has_oldownsvalue()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 referents = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->referents_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->referents(i));
    }
    total_size += 1 * this->referents_size() + data_size;
  }

  // repeated bool automatics = 5;
  {
    int data_size = 0;
    data_size = 1 * this->automatics_size();
    total_size += 1 * this->automatics_size() + data_size;
  }

  // repeated double durations = 6;
  {
    int data_size = 0;
    data_size = 8 * this->durations_size();
    total_size += 1 * this->durations_size() + data_size;
  }

  // repeated double delays = 7;
  {
    int data_size = 0;
    data_size = 8 * this->delays_size();
    total_size += 1 * this->delays_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandBuildChunkSetValueArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandBuildChunkSetValueArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandBuildChunkSetValueArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandBuildChunkSetValueArchive::MergeFrom(const CommandBuildChunkSetValueArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  referents_.MergeFrom(from.referents_);
  automatics_.MergeFrom(from.automatics_);
  durations_.MergeFrom(from.durations_);
  delays_.MergeFrom(from.delays_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_buildchunk()) {
      mutable_buildchunk()->::KN::BuildChunkArchive::MergeFrom(from.buildchunk());
    }
    if (from.has_property()) {
      set_property(from.property());
    }
    if (from.has_oldownsvalue()) {
      set_oldownsvalue(from.oldownsvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandBuildChunkSetValueArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandBuildChunkSetValueArchive::CopyFrom(const CommandBuildChunkSetValueArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandBuildChunkSetValueArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_buildchunk()) {
    if (!this->buildchunk().IsInitialized()) return false;
  }
  return true;
}

void CommandBuildChunkSetValueArchive::Swap(CommandBuildChunkSetValueArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(buildchunk_, other->buildchunk_);
    std::swap(property_, other->property_);
    referents_.Swap(&other->referents_);
    automatics_.Swap(&other->automatics_);
    durations_.Swap(&other->durations_);
    delays_.Swap(&other->delays_);
    std::swap(oldownsvalue_, other->oldownsvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandBuildChunkSetValueArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandBuildChunkSetValueArchive_descriptor_;
  metadata.reflection = CommandBuildChunkSetValueArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandTransitionSetValueArchive::kSuperFieldNumber;
const int CommandTransitionSetValueArchive::kSlideNodeFieldNumber;
const int CommandTransitionSetValueArchive::kPropertyFieldNumber;
const int CommandTransitionSetValueArchive::kEffectsFieldNumber;
const int CommandTransitionSetValueArchive::kUnusedFieldNumber;
const int CommandTransitionSetValueArchive::kUnused2FieldNumber;
const int CommandTransitionSetValueArchive::kUnused3FieldNumber;
const int CommandTransitionSetValueArchive::kDurationsFieldNumber;
const int CommandTransitionSetValueArchive::kDirectionsFieldNumber;
const int CommandTransitionSetValueArchive::kIsAutomaticsFieldNumber;
const int CommandTransitionSetValueArchive::kDelaysFieldNumber;
const int CommandTransitionSetValueArchive::kOldAttributesFieldNumber;
const int CommandTransitionSetValueArchive::kCurrentAttributesFieldNumber;
#endif  // !_MSC_VER

CommandTransitionSetValueArchive::CommandTransitionSetValueArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandTransitionSetValueArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  slidenode_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  oldattributes_ = const_cast< ::KN::TransitionAttributesArchive*>(&::KN::TransitionAttributesArchive::default_instance());
  currentattributes_ = const_cast< ::KN::TransitionAttributesArchive*>(&::KN::TransitionAttributesArchive::default_instance());
}

CommandTransitionSetValueArchive::CommandTransitionSetValueArchive(const CommandTransitionSetValueArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandTransitionSetValueArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  slidenode_ = NULL;
  property_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  oldattributes_ = NULL;
  currentattributes_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandTransitionSetValueArchive::~CommandTransitionSetValueArchive() {
  SharedDtor();
}

void CommandTransitionSetValueArchive::SharedDtor() {
  if (property_ != &::google::protobuf::internal::kEmptyString) {
    delete property_;
  }
  if (this != default_instance_) {
    delete super_;
    delete slidenode_;
    delete oldattributes_;
    delete currentattributes_;
  }
}

void CommandTransitionSetValueArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandTransitionSetValueArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandTransitionSetValueArchive_descriptor_;
}

const CommandTransitionSetValueArchive& CommandTransitionSetValueArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandTransitionSetValueArchive* CommandTransitionSetValueArchive::default_instance_ = NULL;

CommandTransitionSetValueArchive* CommandTransitionSetValueArchive::New() const {
  return new CommandTransitionSetValueArchive;
}

void CommandTransitionSetValueArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_slidenode()) {
      if (slidenode_ != NULL) slidenode_->::TSP::Reference::Clear();
    }
    if (has_property()) {
      if (property_ != &::google::protobuf::internal::kEmptyString) {
        property_->clear();
      }
    }
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (has_oldattributes()) {
      if (oldattributes_ != NULL) oldattributes_->::KN::TransitionAttributesArchive::Clear();
    }
    if (has_currentattributes()) {
      if (currentattributes_ != NULL) currentattributes_->::KN::TransitionAttributesArchive::Clear();
    }
  }
  effects_.Clear();
  unused_.Clear();
  unused2_.Clear();
  unused3_.Clear();
  durations_.Clear();
  directions_.Clear();
  isautomatics_.Clear();
  delays_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandTransitionSetValueArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_slideNode;
        break;
      }

      // required .TSP.Reference slideNode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slideNode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slidenode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_property;
        break;
      }

      // required string property = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_property()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->property().data(), this->property().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_effects;
        break;
      }

      // repeated string effects = 4 [deprecated = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_effects()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->effects(this->effects_size() - 1).data(),
            this->effects(this->effects_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_effects;
        if (input->ExpectTag(42)) goto parse_unused;
        break;
      }

      // repeated string unused = 5 [deprecated = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unused:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_unused()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unused(this->unused_size() - 1).data(),
            this->unused(this->unused_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_unused;
        if (input->ExpectTag(50)) goto parse_unused2;
        break;
      }

      // repeated string unused2 = 6 [deprecated = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unused2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_unused2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unused2(this->unused2_size() - 1).data(),
            this->unused2(this->unused2_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_unused2;
        if (input->ExpectTag(58)) goto parse_unused3;
        break;
      }

      // repeated string unused3 = 7 [deprecated = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unused3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_unused3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unused3(this->unused3_size() - 1).data(),
            this->unused3(this->unused3_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_unused3;
        if (input->ExpectTag(65)) goto parse_durations;
        break;
      }

      // repeated double durations = 8 [deprecated = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_durations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 65, input, this->mutable_durations())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_durations())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_durations;
        if (input->ExpectTag(72)) goto parse_directions;
        break;
      }

      // repeated uint32 directions = 9 [deprecated = true];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_directions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_directions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_directions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_directions;
        if (input->ExpectTag(80)) goto parse_isAutomatics;
        break;
      }

      // repeated bool isAutomatics = 10 [deprecated = true];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAutomatics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 80, input, this->mutable_isautomatics())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_isautomatics())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isAutomatics;
        if (input->ExpectTag(89)) goto parse_delays;
        break;
      }

      // repeated double delays = 11 [deprecated = true];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_delays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 89, input, this->mutable_delays())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_delays())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_delays;
        if (input->ExpectTag(98)) goto parse_oldAttributes;
        break;
      }

      // optional .KN.TransitionAttributesArchive oldAttributes = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldAttributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldattributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_currentAttributes;
        break;
      }

      // optional .KN.TransitionAttributesArchive currentAttributes = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currentAttributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_currentattributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandTransitionSetValueArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference slideNode = 2;
  if (has_slidenode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slidenode(), output);
  }

  // required string property = 3;
  if (has_property()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->property().data(), this->property().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->property(), output);
  }

  // repeated string effects = 4 [deprecated = true];
  for (int i = 0; i < this->effects_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->effects(i).data(), this->effects(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->effects(i), output);
  }

  // repeated string unused = 5 [deprecated = true];
  for (int i = 0; i < this->unused_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->unused(i).data(), this->unused(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->unused(i), output);
  }

  // repeated string unused2 = 6 [deprecated = true];
  for (int i = 0; i < this->unused2_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->unused2(i).data(), this->unused2(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->unused2(i), output);
  }

  // repeated string unused3 = 7 [deprecated = true];
  for (int i = 0; i < this->unused3_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->unused3(i).data(), this->unused3(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->unused3(i), output);
  }

  // repeated double durations = 8 [deprecated = true];
  for (int i = 0; i < this->durations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      8, this->durations(i), output);
  }

  // repeated uint32 directions = 9 [deprecated = true];
  for (int i = 0; i < this->directions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->directions(i), output);
  }

  // repeated bool isAutomatics = 10 [deprecated = true];
  for (int i = 0; i < this->isautomatics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      10, this->isautomatics(i), output);
  }

  // repeated double delays = 11 [deprecated = true];
  for (int i = 0; i < this->delays_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      11, this->delays(i), output);
  }

  // optional .KN.TransitionAttributesArchive oldAttributes = 12;
  if (has_oldattributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->oldattributes(), output);
  }

  // optional .KN.TransitionAttributesArchive currentAttributes = 13;
  if (has_currentattributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->currentattributes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandTransitionSetValueArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference slideNode = 2;
  if (has_slidenode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->slidenode(), target);
  }

  // required string property = 3;
  if (has_property()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->property().data(), this->property().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->property(), target);
  }

  // repeated string effects = 4 [deprecated = true];
  for (int i = 0; i < this->effects_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effects(i).data(), this->effects(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->effects(i), target);
  }

  // repeated string unused = 5 [deprecated = true];
  for (int i = 0; i < this->unused_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unused(i).data(), this->unused(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->unused(i), target);
  }

  // repeated string unused2 = 6 [deprecated = true];
  for (int i = 0; i < this->unused2_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unused2(i).data(), this->unused2(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->unused2(i), target);
  }

  // repeated string unused3 = 7 [deprecated = true];
  for (int i = 0; i < this->unused3_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unused3(i).data(), this->unused3(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->unused3(i), target);
  }

  // repeated double durations = 8 [deprecated = true];
  for (int i = 0; i < this->durations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(8, this->durations(i), target);
  }

  // repeated uint32 directions = 9 [deprecated = true];
  for (int i = 0; i < this->directions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->directions(i), target);
  }

  // repeated bool isAutomatics = 10 [deprecated = true];
  for (int i = 0; i < this->isautomatics_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(10, this->isautomatics(i), target);
  }

  // repeated double delays = 11 [deprecated = true];
  for (int i = 0; i < this->delays_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(11, this->delays(i), target);
  }

  // optional .KN.TransitionAttributesArchive oldAttributes = 12;
  if (has_oldattributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->oldattributes(), target);
  }

  // optional .KN.TransitionAttributesArchive currentAttributes = 13;
  if (has_currentattributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->currentattributes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandTransitionSetValueArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference slideNode = 2;
    if (has_slidenode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slidenode());
    }

    // required string property = 3;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->property());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional .KN.TransitionAttributesArchive oldAttributes = 12;
    if (has_oldattributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oldattributes());
    }

    // optional .KN.TransitionAttributesArchive currentAttributes = 13;
    if (has_currentattributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->currentattributes());
    }

  }
  // repeated string effects = 4 [deprecated = true];
  total_size += 1 * this->effects_size();
  for (int i = 0; i < this->effects_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->effects(i));
  }

  // repeated string unused = 5 [deprecated = true];
  total_size += 1 * this->unused_size();
  for (int i = 0; i < this->unused_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->unused(i));
  }

  // repeated string unused2 = 6 [deprecated = true];
  total_size += 1 * this->unused2_size();
  for (int i = 0; i < this->unused2_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->unused2(i));
  }

  // repeated string unused3 = 7 [deprecated = true];
  total_size += 1 * this->unused3_size();
  for (int i = 0; i < this->unused3_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->unused3(i));
  }

  // repeated double durations = 8 [deprecated = true];
  {
    int data_size = 0;
    data_size = 8 * this->durations_size();
    total_size += 1 * this->durations_size() + data_size;
  }

  // repeated uint32 directions = 9 [deprecated = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->directions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->directions(i));
    }
    total_size += 1 * this->directions_size() + data_size;
  }

  // repeated bool isAutomatics = 10 [deprecated = true];
  {
    int data_size = 0;
    data_size = 1 * this->isautomatics_size();
    total_size += 1 * this->isautomatics_size() + data_size;
  }

  // repeated double delays = 11 [deprecated = true];
  {
    int data_size = 0;
    data_size = 8 * this->delays_size();
    total_size += 1 * this->delays_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandTransitionSetValueArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandTransitionSetValueArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandTransitionSetValueArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandTransitionSetValueArchive::MergeFrom(const CommandTransitionSetValueArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  effects_.MergeFrom(from.effects_);
  unused_.MergeFrom(from.unused_);
  unused2_.MergeFrom(from.unused2_);
  unused3_.MergeFrom(from.unused3_);
  durations_.MergeFrom(from.durations_);
  directions_.MergeFrom(from.directions_);
  isautomatics_.MergeFrom(from.isautomatics_);
  delays_.MergeFrom(from.delays_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_slidenode()) {
      mutable_slidenode()->::TSP::Reference::MergeFrom(from.slidenode());
    }
    if (from.has_property()) {
      set_property(from.property());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_oldattributes()) {
      mutable_oldattributes()->::KN::TransitionAttributesArchive::MergeFrom(from.oldattributes());
    }
    if (from.has_currentattributes()) {
      mutable_currentattributes()->::KN::TransitionAttributesArchive::MergeFrom(from.currentattributes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandTransitionSetValueArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandTransitionSetValueArchive::CopyFrom(const CommandTransitionSetValueArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandTransitionSetValueArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_slidenode()) {
    if (!this->slidenode().IsInitialized()) return false;
  }
  if (has_oldattributes()) {
    if (!this->oldattributes().IsInitialized()) return false;
  }
  if (has_currentattributes()) {
    if (!this->currentattributes().IsInitialized()) return false;
  }
  return true;
}

void CommandTransitionSetValueArchive::Swap(CommandTransitionSetValueArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(slidenode_, other->slidenode_);
    std::swap(property_, other->property_);
    effects_.Swap(&other->effects_);
    unused_.Swap(&other->unused_);
    unused2_.Swap(&other->unused2_);
    unused3_.Swap(&other->unused3_);
    durations_.Swap(&other->durations_);
    directions_.Swap(&other->directions_);
    isautomatics_.Swap(&other->isautomatics_);
    delays_.Swap(&other->delays_);
    std::swap(oldattributes_, other->oldattributes_);
    std::swap(currentattributes_, other->currentattributes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandTransitionSetValueArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandTransitionSetValueArchive_descriptor_;
  metadata.reflection = CommandTransitionSetValueArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandShowSetSlideNumberVisibilityArchive::kSuperFieldNumber;
const int CommandShowSetSlideNumberVisibilityArchive::kShowFieldNumber;
const int CommandShowSetSlideNumberVisibilityArchive::kSlideNumbersVisibleFieldNumber;
const int CommandShowSetSlideNumberVisibilityArchive::kProviderUndoFieldNumber;
#endif  // !_MSC_VER

CommandShowSetSlideNumberVisibilityArchive::CommandShowSetSlideNumberVisibilityArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandShowSetSlideNumberVisibilityArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  show_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  providerundo_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandShowSetSlideNumberVisibilityArchive::CommandShowSetSlideNumberVisibilityArchive(const CommandShowSetSlideNumberVisibilityArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandShowSetSlideNumberVisibilityArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  show_ = NULL;
  slidenumbersvisible_ = false;
  providerundo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandShowSetSlideNumberVisibilityArchive::~CommandShowSetSlideNumberVisibilityArchive() {
  SharedDtor();
}

void CommandShowSetSlideNumberVisibilityArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete show_;
    delete providerundo_;
  }
}

void CommandShowSetSlideNumberVisibilityArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandShowSetSlideNumberVisibilityArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandShowSetSlideNumberVisibilityArchive_descriptor_;
}

const CommandShowSetSlideNumberVisibilityArchive& CommandShowSetSlideNumberVisibilityArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandShowSetSlideNumberVisibilityArchive* CommandShowSetSlideNumberVisibilityArchive::default_instance_ = NULL;

CommandShowSetSlideNumberVisibilityArchive* CommandShowSetSlideNumberVisibilityArchive::New() const {
  return new CommandShowSetSlideNumberVisibilityArchive;
}

void CommandShowSetSlideNumberVisibilityArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_show()) {
      if (show_ != NULL) show_->::TSP::Reference::Clear();
    }
    slidenumbersvisible_ = false;
    if (has_providerundo()) {
      if (providerundo_ != NULL) providerundo_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandShowSetSlideNumberVisibilityArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_show;
        break;
      }

      // required .TSP.Reference show = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_show:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_show()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slideNumbersVisible;
        break;
      }

      // required bool slideNumbersVisible = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slideNumbersVisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &slidenumbersvisible_)));
          set_has_slidenumbersvisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_providerUndo;
        break;
      }

      // optional .TSP.Reference providerUndo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_providerUndo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_providerundo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandShowSetSlideNumberVisibilityArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference show = 2;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->show(), output);
  }

  // required bool slideNumbersVisible = 3;
  if (has_slidenumbersvisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->slidenumbersvisible(), output);
  }

  // optional .TSP.Reference providerUndo = 4;
  if (has_providerundo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->providerundo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandShowSetSlideNumberVisibilityArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference show = 2;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->show(), target);
  }

  // required bool slideNumbersVisible = 3;
  if (has_slidenumbersvisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->slidenumbersvisible(), target);
  }

  // optional .TSP.Reference providerUndo = 4;
  if (has_providerundo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->providerundo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandShowSetSlideNumberVisibilityArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference show = 2;
    if (has_show()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->show());
    }

    // required bool slideNumbersVisible = 3;
    if (has_slidenumbersvisible()) {
      total_size += 1 + 1;
    }

    // optional .TSP.Reference providerUndo = 4;
    if (has_providerundo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->providerundo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandShowSetSlideNumberVisibilityArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandShowSetSlideNumberVisibilityArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandShowSetSlideNumberVisibilityArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandShowSetSlideNumberVisibilityArchive::MergeFrom(const CommandShowSetSlideNumberVisibilityArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_show()) {
      mutable_show()->::TSP::Reference::MergeFrom(from.show());
    }
    if (from.has_slidenumbersvisible()) {
      set_slidenumbersvisible(from.slidenumbersvisible());
    }
    if (from.has_providerundo()) {
      mutable_providerundo()->::TSP::Reference::MergeFrom(from.providerundo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandShowSetSlideNumberVisibilityArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandShowSetSlideNumberVisibilityArchive::CopyFrom(const CommandShowSetSlideNumberVisibilityArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowSetSlideNumberVisibilityArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_show()) {
    if (!this->show().IsInitialized()) return false;
  }
  if (has_providerundo()) {
    if (!this->providerundo().IsInitialized()) return false;
  }
  return true;
}

void CommandShowSetSlideNumberVisibilityArchive::Swap(CommandShowSetSlideNumberVisibilityArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(show_, other->show_);
    std::swap(slidenumbersvisible_, other->slidenumbersvisible_);
    std::swap(providerundo_, other->providerundo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandShowSetSlideNumberVisibilityArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandShowSetSlideNumberVisibilityArchive_descriptor_;
  metadata.reflection = CommandShowSetSlideNumberVisibilityArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandMasterRescaleArchive::kSuperFieldNumber;
const int CommandMasterRescaleArchive::kMasterFieldNumber;
#endif  // !_MSC_VER

CommandMasterRescaleArchive::CommandMasterRescaleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandMasterRescaleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  master_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandMasterRescaleArchive::CommandMasterRescaleArchive(const CommandMasterRescaleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandMasterRescaleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  master_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandMasterRescaleArchive::~CommandMasterRescaleArchive() {
  SharedDtor();
}

void CommandMasterRescaleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete master_;
  }
}

void CommandMasterRescaleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandMasterRescaleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandMasterRescaleArchive_descriptor_;
}

const CommandMasterRescaleArchive& CommandMasterRescaleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandMasterRescaleArchive* CommandMasterRescaleArchive::default_instance_ = NULL;

CommandMasterRescaleArchive* CommandMasterRescaleArchive::New() const {
  return new CommandMasterRescaleArchive;
}

void CommandMasterRescaleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_master()) {
      if (master_ != NULL) master_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandMasterRescaleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_master;
        break;
      }

      // required .TSP.Reference master = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_master()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandMasterRescaleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference master = 2;
  if (has_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->master(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandMasterRescaleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference master = 2;
  if (has_master()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->master(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandMasterRescaleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference master = 2;
    if (has_master()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->master());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandMasterRescaleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandMasterRescaleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandMasterRescaleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandMasterRescaleArchive::MergeFrom(const CommandMasterRescaleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_master()) {
      mutable_master()->::TSP::Reference::MergeFrom(from.master());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandMasterRescaleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandMasterRescaleArchive::CopyFrom(const CommandMasterRescaleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMasterRescaleArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_master()) {
    if (!this->master().IsInitialized()) return false;
  }
  return true;
}

void CommandMasterRescaleArchive::Swap(CommandMasterRescaleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(master_, other->master_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandMasterRescaleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandMasterRescaleArchive_descriptor_;
  metadata.reflection = CommandMasterRescaleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandMasterSetThumbnailTextArchive::kSuperFieldNumber;
const int CommandMasterSetThumbnailTextArchive::kMasterFieldNumber;
const int CommandMasterSetThumbnailTextArchive::kIsBodyFieldNumber;
const int CommandMasterSetThumbnailTextArchive::kNewTextFieldNumber;
const int CommandMasterSetThumbnailTextArchive::kOldTextFieldNumber;
#endif  // !_MSC_VER

CommandMasterSetThumbnailTextArchive::CommandMasterSetThumbnailTextArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandMasterSetThumbnailTextArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  master_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandMasterSetThumbnailTextArchive::CommandMasterSetThumbnailTextArchive(const CommandMasterSetThumbnailTextArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandMasterSetThumbnailTextArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  master_ = NULL;
  is_body_ = false;
  new_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  old_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandMasterSetThumbnailTextArchive::~CommandMasterSetThumbnailTextArchive() {
  SharedDtor();
}

void CommandMasterSetThumbnailTextArchive::SharedDtor() {
  if (new_text_ != &::google::protobuf::internal::kEmptyString) {
    delete new_text_;
  }
  if (old_text_ != &::google::protobuf::internal::kEmptyString) {
    delete old_text_;
  }
  if (this != default_instance_) {
    delete super_;
    delete master_;
  }
}

void CommandMasterSetThumbnailTextArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandMasterSetThumbnailTextArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandMasterSetThumbnailTextArchive_descriptor_;
}

const CommandMasterSetThumbnailTextArchive& CommandMasterSetThumbnailTextArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandMasterSetThumbnailTextArchive* CommandMasterSetThumbnailTextArchive::default_instance_ = NULL;

CommandMasterSetThumbnailTextArchive* CommandMasterSetThumbnailTextArchive::New() const {
  return new CommandMasterSetThumbnailTextArchive;
}

void CommandMasterSetThumbnailTextArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_master()) {
      if (master_ != NULL) master_->::TSP::Reference::Clear();
    }
    is_body_ = false;
    if (has_new_text()) {
      if (new_text_ != &::google::protobuf::internal::kEmptyString) {
        new_text_->clear();
      }
    }
    if (has_old_text()) {
      if (old_text_ != &::google::protobuf::internal::kEmptyString) {
        old_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandMasterSetThumbnailTextArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_master;
        break;
      }

      // required .TSP.Reference master = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_master()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_body;
        break;
      }

      // required bool is_body = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_body_)));
          set_has_is_body();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_new_text;
        break;
      }

      // optional string new_text = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_text().data(), this->new_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_old_text;
        break;
      }

      // optional string old_text = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->old_text().data(), this->old_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandMasterSetThumbnailTextArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference master = 2;
  if (has_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->master(), output);
  }

  // required bool is_body = 3;
  if (has_is_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_body(), output);
  }

  // optional string new_text = 4;
  if (has_new_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_text().data(), this->new_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->new_text(), output);
  }

  // optional string old_text = 5;
  if (has_old_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_text().data(), this->old_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->old_text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandMasterSetThumbnailTextArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference master = 2;
  if (has_master()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->master(), target);
  }

  // required bool is_body = 3;
  if (has_is_body()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_body(), target);
  }

  // optional string new_text = 4;
  if (has_new_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_text().data(), this->new_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->new_text(), target);
  }

  // optional string old_text = 5;
  if (has_old_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_text().data(), this->old_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->old_text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandMasterSetThumbnailTextArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference master = 2;
    if (has_master()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->master());
    }

    // required bool is_body = 3;
    if (has_is_body()) {
      total_size += 1 + 1;
    }

    // optional string new_text = 4;
    if (has_new_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_text());
    }

    // optional string old_text = 5;
    if (has_old_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->old_text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandMasterSetThumbnailTextArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandMasterSetThumbnailTextArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandMasterSetThumbnailTextArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandMasterSetThumbnailTextArchive::MergeFrom(const CommandMasterSetThumbnailTextArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_master()) {
      mutable_master()->::TSP::Reference::MergeFrom(from.master());
    }
    if (from.has_is_body()) {
      set_is_body(from.is_body());
    }
    if (from.has_new_text()) {
      set_new_text(from.new_text());
    }
    if (from.has_old_text()) {
      set_old_text(from.old_text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandMasterSetThumbnailTextArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandMasterSetThumbnailTextArchive::CopyFrom(const CommandMasterSetThumbnailTextArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMasterSetThumbnailTextArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_master()) {
    if (!this->master().IsInitialized()) return false;
  }
  return true;
}

void CommandMasterSetThumbnailTextArchive::Swap(CommandMasterSetThumbnailTextArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(master_, other->master_);
    std::swap(is_body_, other->is_body_);
    std::swap(new_text_, other->new_text_);
    std::swap(old_text_, other->old_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandMasterSetThumbnailTextArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandMasterSetThumbnailTextArchive_descriptor_;
  metadata.reflection = CommandMasterSetThumbnailTextArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandMasterSetBodyStylesArchive::kSuperFieldNumber;
const int CommandMasterSetBodyStylesArchive::kMasterFieldNumber;
const int CommandMasterSetBodyStylesArchive::kNewParagraphStylesFieldNumber;
const int CommandMasterSetBodyStylesArchive::kNewListStylesFieldNumber;
const int CommandMasterSetBodyStylesArchive::kOldParagraphStylesFieldNumber;
const int CommandMasterSetBodyStylesArchive::kOldListStylesFieldNumber;
#endif  // !_MSC_VER

CommandMasterSetBodyStylesArchive::CommandMasterSetBodyStylesArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandMasterSetBodyStylesArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  master_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandMasterSetBodyStylesArchive::CommandMasterSetBodyStylesArchive(const CommandMasterSetBodyStylesArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandMasterSetBodyStylesArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  master_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandMasterSetBodyStylesArchive::~CommandMasterSetBodyStylesArchive() {
  SharedDtor();
}

void CommandMasterSetBodyStylesArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete master_;
  }
}

void CommandMasterSetBodyStylesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandMasterSetBodyStylesArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandMasterSetBodyStylesArchive_descriptor_;
}

const CommandMasterSetBodyStylesArchive& CommandMasterSetBodyStylesArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandMasterSetBodyStylesArchive* CommandMasterSetBodyStylesArchive::default_instance_ = NULL;

CommandMasterSetBodyStylesArchive* CommandMasterSetBodyStylesArchive::New() const {
  return new CommandMasterSetBodyStylesArchive;
}

void CommandMasterSetBodyStylesArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_master()) {
      if (master_ != NULL) master_->::TSP::Reference::Clear();
    }
  }
  new_paragraph_styles_.Clear();
  new_list_styles_.Clear();
  old_paragraph_styles_.Clear();
  old_list_styles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandMasterSetBodyStylesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_master;
        break;
      }

      // required .TSP.Reference master = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_master()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_paragraph_styles;
        break;
      }

      // repeated .TSP.Reference new_paragraph_styles = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_paragraph_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_new_paragraph_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_paragraph_styles;
        if (input->ExpectTag(34)) goto parse_new_list_styles;
        break;
      }

      // repeated .TSP.Reference new_list_styles = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_list_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_new_list_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_new_list_styles;
        if (input->ExpectTag(42)) goto parse_old_paragraph_styles;
        break;
      }

      // repeated .TSP.Reference old_paragraph_styles = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_paragraph_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_old_paragraph_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_old_paragraph_styles;
        if (input->ExpectTag(50)) goto parse_old_list_styles;
        break;
      }

      // repeated .TSP.Reference old_list_styles = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_list_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_old_list_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_old_list_styles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandMasterSetBodyStylesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference master = 2;
  if (has_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->master(), output);
  }

  // repeated .TSP.Reference new_paragraph_styles = 3;
  for (int i = 0; i < this->new_paragraph_styles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->new_paragraph_styles(i), output);
  }

  // repeated .TSP.Reference new_list_styles = 4;
  for (int i = 0; i < this->new_list_styles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->new_list_styles(i), output);
  }

  // repeated .TSP.Reference old_paragraph_styles = 5;
  for (int i = 0; i < this->old_paragraph_styles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->old_paragraph_styles(i), output);
  }

  // repeated .TSP.Reference old_list_styles = 6;
  for (int i = 0; i < this->old_list_styles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->old_list_styles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandMasterSetBodyStylesArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference master = 2;
  if (has_master()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->master(), target);
  }

  // repeated .TSP.Reference new_paragraph_styles = 3;
  for (int i = 0; i < this->new_paragraph_styles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->new_paragraph_styles(i), target);
  }

  // repeated .TSP.Reference new_list_styles = 4;
  for (int i = 0; i < this->new_list_styles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->new_list_styles(i), target);
  }

  // repeated .TSP.Reference old_paragraph_styles = 5;
  for (int i = 0; i < this->old_paragraph_styles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->old_paragraph_styles(i), target);
  }

  // repeated .TSP.Reference old_list_styles = 6;
  for (int i = 0; i < this->old_list_styles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->old_list_styles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandMasterSetBodyStylesArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference master = 2;
    if (has_master()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->master());
    }

  }
  // repeated .TSP.Reference new_paragraph_styles = 3;
  total_size += 1 * this->new_paragraph_styles_size();
  for (int i = 0; i < this->new_paragraph_styles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->new_paragraph_styles(i));
  }

  // repeated .TSP.Reference new_list_styles = 4;
  total_size += 1 * this->new_list_styles_size();
  for (int i = 0; i < this->new_list_styles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->new_list_styles(i));
  }

  // repeated .TSP.Reference old_paragraph_styles = 5;
  total_size += 1 * this->old_paragraph_styles_size();
  for (int i = 0; i < this->old_paragraph_styles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->old_paragraph_styles(i));
  }

  // repeated .TSP.Reference old_list_styles = 6;
  total_size += 1 * this->old_list_styles_size();
  for (int i = 0; i < this->old_list_styles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->old_list_styles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandMasterSetBodyStylesArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandMasterSetBodyStylesArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandMasterSetBodyStylesArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandMasterSetBodyStylesArchive::MergeFrom(const CommandMasterSetBodyStylesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  new_paragraph_styles_.MergeFrom(from.new_paragraph_styles_);
  new_list_styles_.MergeFrom(from.new_list_styles_);
  old_paragraph_styles_.MergeFrom(from.old_paragraph_styles_);
  old_list_styles_.MergeFrom(from.old_list_styles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_master()) {
      mutable_master()->::TSP::Reference::MergeFrom(from.master());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandMasterSetBodyStylesArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandMasterSetBodyStylesArchive::CopyFrom(const CommandMasterSetBodyStylesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMasterSetBodyStylesArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_master()) {
    if (!this->master().IsInitialized()) return false;
  }
  for (int i = 0; i < new_paragraph_styles_size(); i++) {
    if (!this->new_paragraph_styles(i).IsInitialized()) return false;
  }
  for (int i = 0; i < new_list_styles_size(); i++) {
    if (!this->new_list_styles(i).IsInitialized()) return false;
  }
  for (int i = 0; i < old_paragraph_styles_size(); i++) {
    if (!this->old_paragraph_styles(i).IsInitialized()) return false;
  }
  for (int i = 0; i < old_list_styles_size(); i++) {
    if (!this->old_list_styles(i).IsInitialized()) return false;
  }
  return true;
}

void CommandMasterSetBodyStylesArchive::Swap(CommandMasterSetBodyStylesArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(master_, other->master_);
    new_paragraph_styles_.Swap(&other->new_paragraph_styles_);
    new_list_styles_.Swap(&other->new_list_styles_);
    old_paragraph_styles_.Swap(&other->old_paragraph_styles_);
    old_list_styles_.Swap(&other->old_list_styles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandMasterSetBodyStylesArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandMasterSetBodyStylesArchive_descriptor_;
  metadata.reflection = CommandMasterSetBodyStylesArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandMasterSetSlideObjectsLayerWithMasterArchive::kSuperFieldNumber;
const int CommandMasterSetSlideObjectsLayerWithMasterArchive::kMasterFieldNumber;
const int CommandMasterSetSlideObjectsLayerWithMasterArchive::kNewValueFieldNumber;
const int CommandMasterSetSlideObjectsLayerWithMasterArchive::kOldValueFieldNumber;
#endif  // !_MSC_VER

CommandMasterSetSlideObjectsLayerWithMasterArchive::CommandMasterSetSlideObjectsLayerWithMasterArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandMasterSetSlideObjectsLayerWithMasterArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  master_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandMasterSetSlideObjectsLayerWithMasterArchive::CommandMasterSetSlideObjectsLayerWithMasterArchive(const CommandMasterSetSlideObjectsLayerWithMasterArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandMasterSetSlideObjectsLayerWithMasterArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  master_ = NULL;
  new_value_ = false;
  old_value_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandMasterSetSlideObjectsLayerWithMasterArchive::~CommandMasterSetSlideObjectsLayerWithMasterArchive() {
  SharedDtor();
}

void CommandMasterSetSlideObjectsLayerWithMasterArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete master_;
  }
}

void CommandMasterSetSlideObjectsLayerWithMasterArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandMasterSetSlideObjectsLayerWithMasterArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandMasterSetSlideObjectsLayerWithMasterArchive_descriptor_;
}

const CommandMasterSetSlideObjectsLayerWithMasterArchive& CommandMasterSetSlideObjectsLayerWithMasterArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandMasterSetSlideObjectsLayerWithMasterArchive* CommandMasterSetSlideObjectsLayerWithMasterArchive::default_instance_ = NULL;

CommandMasterSetSlideObjectsLayerWithMasterArchive* CommandMasterSetSlideObjectsLayerWithMasterArchive::New() const {
  return new CommandMasterSetSlideObjectsLayerWithMasterArchive;
}

void CommandMasterSetSlideObjectsLayerWithMasterArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_master()) {
      if (master_ != NULL) master_->::TSP::Reference::Clear();
    }
    new_value_ = false;
    old_value_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandMasterSetSlideObjectsLayerWithMasterArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_master;
        break;
      }

      // required .TSP.Reference master = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_master()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_new_value;
        break;
      }

      // required bool new_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &new_value_)));
          set_has_new_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_old_value;
        break;
      }

      // required bool old_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &old_value_)));
          set_has_old_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandMasterSetSlideObjectsLayerWithMasterArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference master = 2;
  if (has_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->master(), output);
  }

  // required bool new_value = 3;
  if (has_new_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->new_value(), output);
  }

  // required bool old_value = 4;
  if (has_old_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->old_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandMasterSetSlideObjectsLayerWithMasterArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference master = 2;
  if (has_master()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->master(), target);
  }

  // required bool new_value = 3;
  if (has_new_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->new_value(), target);
  }

  // required bool old_value = 4;
  if (has_old_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->old_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandMasterSetSlideObjectsLayerWithMasterArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference master = 2;
    if (has_master()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->master());
    }

    // required bool new_value = 3;
    if (has_new_value()) {
      total_size += 1 + 1;
    }

    // required bool old_value = 4;
    if (has_old_value()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandMasterSetSlideObjectsLayerWithMasterArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandMasterSetSlideObjectsLayerWithMasterArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandMasterSetSlideObjectsLayerWithMasterArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandMasterSetSlideObjectsLayerWithMasterArchive::MergeFrom(const CommandMasterSetSlideObjectsLayerWithMasterArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_master()) {
      mutable_master()->::TSP::Reference::MergeFrom(from.master());
    }
    if (from.has_new_value()) {
      set_new_value(from.new_value());
    }
    if (from.has_old_value()) {
      set_old_value(from.old_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandMasterSetSlideObjectsLayerWithMasterArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandMasterSetSlideObjectsLayerWithMasterArchive::CopyFrom(const CommandMasterSetSlideObjectsLayerWithMasterArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMasterSetSlideObjectsLayerWithMasterArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_master()) {
    if (!this->master().IsInitialized()) return false;
  }
  return true;
}

void CommandMasterSetSlideObjectsLayerWithMasterArchive::Swap(CommandMasterSetSlideObjectsLayerWithMasterArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(master_, other->master_);
    std::swap(new_value_, other->new_value_);
    std::swap(old_value_, other->old_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandMasterSetSlideObjectsLayerWithMasterArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandMasterSetSlideObjectsLayerWithMasterArchive_descriptor_;
  metadata.reflection = CommandMasterSetSlideObjectsLayerWithMasterArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSlideApplyThemeArchive::kSuperFieldNumber;
const int CommandSlideApplyThemeArchive::kBlobFieldNumber;
#endif  // !_MSC_VER

CommandSlideApplyThemeArchive::CommandSlideApplyThemeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSlideApplyThemeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::ApplyThemeChildCommandArchive*>(&::TSS::ApplyThemeChildCommandArchive::default_instance());
  blob_ = const_cast< ::KN::MasterChangeBlobArchive*>(&::KN::MasterChangeBlobArchive::default_instance());
}

CommandSlideApplyThemeArchive::CommandSlideApplyThemeArchive(const CommandSlideApplyThemeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSlideApplyThemeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  blob_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSlideApplyThemeArchive::~CommandSlideApplyThemeArchive() {
  SharedDtor();
}

void CommandSlideApplyThemeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete blob_;
  }
}

void CommandSlideApplyThemeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSlideApplyThemeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSlideApplyThemeArchive_descriptor_;
}

const CommandSlideApplyThemeArchive& CommandSlideApplyThemeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSlideApplyThemeArchive* CommandSlideApplyThemeArchive::default_instance_ = NULL;

CommandSlideApplyThemeArchive* CommandSlideApplyThemeArchive::New() const {
  return new CommandSlideApplyThemeArchive;
}

void CommandSlideApplyThemeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::ApplyThemeChildCommandArchive::Clear();
    }
    if (has_blob()) {
      if (blob_ != NULL) blob_->::KN::MasterChangeBlobArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSlideApplyThemeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSS.ApplyThemeChildCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_blob;
        break;
      }

      // required .KN.MasterChangeBlobArchive blob = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blob()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSlideApplyThemeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSS.ApplyThemeChildCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .KN.MasterChangeBlobArchive blob = 2;
  if (has_blob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->blob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSlideApplyThemeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSS.ApplyThemeChildCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .KN.MasterChangeBlobArchive blob = 2;
  if (has_blob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->blob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSlideApplyThemeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSS.ApplyThemeChildCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .KN.MasterChangeBlobArchive blob = 2;
    if (has_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blob());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSlideApplyThemeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSlideApplyThemeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSlideApplyThemeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSlideApplyThemeArchive::MergeFrom(const CommandSlideApplyThemeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::ApplyThemeChildCommandArchive::MergeFrom(from.super());
    }
    if (from.has_blob()) {
      mutable_blob()->::KN::MasterChangeBlobArchive::MergeFrom(from.blob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSlideApplyThemeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSlideApplyThemeArchive::CopyFrom(const CommandSlideApplyThemeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideApplyThemeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_blob()) {
    if (!this->blob().IsInitialized()) return false;
  }
  return true;
}

void CommandSlideApplyThemeArchive::Swap(CommandSlideApplyThemeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(blob_, other->blob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSlideApplyThemeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSlideApplyThemeArchive_descriptor_;
  metadata.reflection = CommandSlideApplyThemeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandChangeMasterSlideArchive::kSuperFieldNumber;
const int CommandChangeMasterSlideArchive::kSlideFieldNumber;
const int CommandChangeMasterSlideArchive::kMasterFieldNumber;
const int CommandChangeMasterSlideArchive::kPlaceholderCommandsFieldNumber;
#endif  // !_MSC_VER

CommandChangeMasterSlideArchive::CommandChangeMasterSlideArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandChangeMasterSlideArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  slide_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  master_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  placeholder_commands_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandChangeMasterSlideArchive::CommandChangeMasterSlideArchive(const CommandChangeMasterSlideArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandChangeMasterSlideArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  slide_ = NULL;
  master_ = NULL;
  placeholder_commands_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandChangeMasterSlideArchive::~CommandChangeMasterSlideArchive() {
  SharedDtor();
}

void CommandChangeMasterSlideArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete slide_;
    delete master_;
    delete placeholder_commands_;
  }
}

void CommandChangeMasterSlideArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandChangeMasterSlideArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandChangeMasterSlideArchive_descriptor_;
}

const CommandChangeMasterSlideArchive& CommandChangeMasterSlideArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandChangeMasterSlideArchive* CommandChangeMasterSlideArchive::default_instance_ = NULL;

CommandChangeMasterSlideArchive* CommandChangeMasterSlideArchive::New() const {
  return new CommandChangeMasterSlideArchive;
}

void CommandChangeMasterSlideArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_slide()) {
      if (slide_ != NULL) slide_->::TSP::Reference::Clear();
    }
    if (has_master()) {
      if (master_ != NULL) master_->::TSP::Reference::Clear();
    }
    if (has_placeholder_commands()) {
      if (placeholder_commands_ != NULL) placeholder_commands_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandChangeMasterSlideArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_slide;
        break;
      }

      // required .TSP.Reference slide = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slide:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slide()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_master;
        break;
      }

      // required .TSP.Reference master = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_master()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_placeholder_commands;
        break;
      }

      // required .TSP.Reference placeholder_commands = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_placeholder_commands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_placeholder_commands()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandChangeMasterSlideArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference slide = 2;
  if (has_slide()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slide(), output);
  }

  // required .TSP.Reference master = 3;
  if (has_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->master(), output);
  }

  // required .TSP.Reference placeholder_commands = 4;
  if (has_placeholder_commands()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->placeholder_commands(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandChangeMasterSlideArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference slide = 2;
  if (has_slide()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->slide(), target);
  }

  // required .TSP.Reference master = 3;
  if (has_master()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->master(), target);
  }

  // required .TSP.Reference placeholder_commands = 4;
  if (has_placeholder_commands()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->placeholder_commands(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandChangeMasterSlideArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference slide = 2;
    if (has_slide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slide());
    }

    // required .TSP.Reference master = 3;
    if (has_master()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->master());
    }

    // required .TSP.Reference placeholder_commands = 4;
    if (has_placeholder_commands()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->placeholder_commands());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandChangeMasterSlideArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandChangeMasterSlideArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandChangeMasterSlideArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandChangeMasterSlideArchive::MergeFrom(const CommandChangeMasterSlideArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_slide()) {
      mutable_slide()->::TSP::Reference::MergeFrom(from.slide());
    }
    if (from.has_master()) {
      mutable_master()->::TSP::Reference::MergeFrom(from.master());
    }
    if (from.has_placeholder_commands()) {
      mutable_placeholder_commands()->::TSP::Reference::MergeFrom(from.placeholder_commands());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandChangeMasterSlideArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandChangeMasterSlideArchive::CopyFrom(const CommandChangeMasterSlideArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandChangeMasterSlideArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_slide()) {
    if (!this->slide().IsInitialized()) return false;
  }
  if (has_master()) {
    if (!this->master().IsInitialized()) return false;
  }
  if (has_placeholder_commands()) {
    if (!this->placeholder_commands().IsInitialized()) return false;
  }
  return true;
}

void CommandChangeMasterSlideArchive::Swap(CommandChangeMasterSlideArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(slide_, other->slide_);
    std::swap(master_, other->master_);
    std::swap(placeholder_commands_, other->placeholder_commands_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandChangeMasterSlideArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandChangeMasterSlideArchive_descriptor_;
  metadata.reflection = CommandChangeMasterSlideArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSlidePrimitiveSetMasterArchive::kSuperFieldNumber;
const int CommandSlidePrimitiveSetMasterArchive::kSlideFieldNumber;
const int CommandSlidePrimitiveSetMasterArchive::kMasterFieldNumber;
const int CommandSlidePrimitiveSetMasterArchive::kOldMasterFieldNumber;
#endif  // !_MSC_VER

CommandSlidePrimitiveSetMasterArchive::CommandSlidePrimitiveSetMasterArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSlidePrimitiveSetMasterArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  slide_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  master_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  old_master_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandSlidePrimitiveSetMasterArchive::CommandSlidePrimitiveSetMasterArchive(const CommandSlidePrimitiveSetMasterArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSlidePrimitiveSetMasterArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  slide_ = NULL;
  master_ = NULL;
  old_master_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSlidePrimitiveSetMasterArchive::~CommandSlidePrimitiveSetMasterArchive() {
  SharedDtor();
}

void CommandSlidePrimitiveSetMasterArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete slide_;
    delete master_;
    delete old_master_;
  }
}

void CommandSlidePrimitiveSetMasterArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSlidePrimitiveSetMasterArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSlidePrimitiveSetMasterArchive_descriptor_;
}

const CommandSlidePrimitiveSetMasterArchive& CommandSlidePrimitiveSetMasterArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSlidePrimitiveSetMasterArchive* CommandSlidePrimitiveSetMasterArchive::default_instance_ = NULL;

CommandSlidePrimitiveSetMasterArchive* CommandSlidePrimitiveSetMasterArchive::New() const {
  return new CommandSlidePrimitiveSetMasterArchive;
}

void CommandSlidePrimitiveSetMasterArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_slide()) {
      if (slide_ != NULL) slide_->::TSP::Reference::Clear();
    }
    if (has_master()) {
      if (master_ != NULL) master_->::TSP::Reference::Clear();
    }
    if (has_old_master()) {
      if (old_master_ != NULL) old_master_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSlidePrimitiveSetMasterArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_slide;
        break;
      }

      // required .TSP.Reference slide = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slide:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slide()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_master;
        break;
      }

      // required .TSP.Reference master = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_master()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_old_master;
        break;
      }

      // required .TSP.Reference old_master = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_master()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSlidePrimitiveSetMasterArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference slide = 2;
  if (has_slide()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slide(), output);
  }

  // required .TSP.Reference master = 3;
  if (has_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->master(), output);
  }

  // required .TSP.Reference old_master = 4;
  if (has_old_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->old_master(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSlidePrimitiveSetMasterArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference slide = 2;
  if (has_slide()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->slide(), target);
  }

  // required .TSP.Reference master = 3;
  if (has_master()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->master(), target);
  }

  // required .TSP.Reference old_master = 4;
  if (has_old_master()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->old_master(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSlidePrimitiveSetMasterArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference slide = 2;
    if (has_slide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slide());
    }

    // required .TSP.Reference master = 3;
    if (has_master()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->master());
    }

    // required .TSP.Reference old_master = 4;
    if (has_old_master()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_master());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSlidePrimitiveSetMasterArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSlidePrimitiveSetMasterArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSlidePrimitiveSetMasterArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSlidePrimitiveSetMasterArchive::MergeFrom(const CommandSlidePrimitiveSetMasterArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_slide()) {
      mutable_slide()->::TSP::Reference::MergeFrom(from.slide());
    }
    if (from.has_master()) {
      mutable_master()->::TSP::Reference::MergeFrom(from.master());
    }
    if (from.has_old_master()) {
      mutable_old_master()->::TSP::Reference::MergeFrom(from.old_master());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSlidePrimitiveSetMasterArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSlidePrimitiveSetMasterArchive::CopyFrom(const CommandSlidePrimitiveSetMasterArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlidePrimitiveSetMasterArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_slide()) {
    if (!this->slide().IsInitialized()) return false;
  }
  if (has_master()) {
    if (!this->master().IsInitialized()) return false;
  }
  if (has_old_master()) {
    if (!this->old_master().IsInitialized()) return false;
  }
  return true;
}

void CommandSlidePrimitiveSetMasterArchive::Swap(CommandSlidePrimitiveSetMasterArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(slide_, other->slide_);
    std::swap(master_, other->master_);
    std::swap(old_master_, other->old_master_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSlidePrimitiveSetMasterArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSlidePrimitiveSetMasterArchive_descriptor_;
  metadata.reflection = CommandSlidePrimitiveSetMasterArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSlideReapplyMasterArchive::kSuperFieldNumber;
const int CommandSlideReapplyMasterArchive::kReapplyAccumulatedCommandFieldNumber;
#endif  // !_MSC_VER

CommandSlideReapplyMasterArchive::CommandSlideReapplyMasterArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSlideReapplyMasterArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  reapply_accumulated_command_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandSlideReapplyMasterArchive::CommandSlideReapplyMasterArchive(const CommandSlideReapplyMasterArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSlideReapplyMasterArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  reapply_accumulated_command_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSlideReapplyMasterArchive::~CommandSlideReapplyMasterArchive() {
  SharedDtor();
}

void CommandSlideReapplyMasterArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete reapply_accumulated_command_;
  }
}

void CommandSlideReapplyMasterArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSlideReapplyMasterArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSlideReapplyMasterArchive_descriptor_;
}

const CommandSlideReapplyMasterArchive& CommandSlideReapplyMasterArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSlideReapplyMasterArchive* CommandSlideReapplyMasterArchive::default_instance_ = NULL;

CommandSlideReapplyMasterArchive* CommandSlideReapplyMasterArchive::New() const {
  return new CommandSlideReapplyMasterArchive;
}

void CommandSlideReapplyMasterArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_reapply_accumulated_command()) {
      if (reapply_accumulated_command_ != NULL) reapply_accumulated_command_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSlideReapplyMasterArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reapply_accumulated_command;
        break;
      }

      // required .TSP.Reference reapply_accumulated_command = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reapply_accumulated_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reapply_accumulated_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSlideReapplyMasterArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference reapply_accumulated_command = 2;
  if (has_reapply_accumulated_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reapply_accumulated_command(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSlideReapplyMasterArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference reapply_accumulated_command = 2;
  if (has_reapply_accumulated_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reapply_accumulated_command(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSlideReapplyMasterArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference reapply_accumulated_command = 2;
    if (has_reapply_accumulated_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reapply_accumulated_command());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSlideReapplyMasterArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSlideReapplyMasterArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSlideReapplyMasterArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSlideReapplyMasterArchive::MergeFrom(const CommandSlideReapplyMasterArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_reapply_accumulated_command()) {
      mutable_reapply_accumulated_command()->::TSP::Reference::MergeFrom(from.reapply_accumulated_command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSlideReapplyMasterArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSlideReapplyMasterArchive::CopyFrom(const CommandSlideReapplyMasterArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideReapplyMasterArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_reapply_accumulated_command()) {
    if (!this->reapply_accumulated_command().IsInitialized()) return false;
  }
  return true;
}

void CommandSlideReapplyMasterArchive::Swap(CommandSlideReapplyMasterArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(reapply_accumulated_command_, other->reapply_accumulated_command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSlideReapplyMasterArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSlideReapplyMasterArchive_descriptor_;
  metadata.reflection = CommandSlideReapplyMasterArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandShowSetSoundtrack::kSuperFieldNumber;
const int CommandShowSetSoundtrack::kShowFieldNumber;
const int CommandShowSetSoundtrack::kSoundtrackFieldNumber;
const int CommandShowSetSoundtrack::kOldSoundtrackFieldNumber;
#endif  // !_MSC_VER

CommandShowSetSoundtrack::CommandShowSetSoundtrack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandShowSetSoundtrack::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  show_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  soundtrack_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  old_soundtrack_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandShowSetSoundtrack::CommandShowSetSoundtrack(const CommandShowSetSoundtrack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandShowSetSoundtrack::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  show_ = NULL;
  soundtrack_ = NULL;
  old_soundtrack_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandShowSetSoundtrack::~CommandShowSetSoundtrack() {
  SharedDtor();
}

void CommandShowSetSoundtrack::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete show_;
    delete soundtrack_;
    delete old_soundtrack_;
  }
}

void CommandShowSetSoundtrack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandShowSetSoundtrack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandShowSetSoundtrack_descriptor_;
}

const CommandShowSetSoundtrack& CommandShowSetSoundtrack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandShowSetSoundtrack* CommandShowSetSoundtrack::default_instance_ = NULL;

CommandShowSetSoundtrack* CommandShowSetSoundtrack::New() const {
  return new CommandShowSetSoundtrack;
}

void CommandShowSetSoundtrack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_show()) {
      if (show_ != NULL) show_->::TSP::Reference::Clear();
    }
    if (has_soundtrack()) {
      if (soundtrack_ != NULL) soundtrack_->::TSP::Reference::Clear();
    }
    if (has_old_soundtrack()) {
      if (old_soundtrack_ != NULL) old_soundtrack_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandShowSetSoundtrack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_show;
        break;
      }

      // optional .TSP.Reference show = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_show:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_show()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_soundtrack;
        break;
      }

      // optional .TSP.Reference soundtrack = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soundtrack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_soundtrack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_old_soundtrack;
        break;
      }

      // optional .TSP.Reference old_soundtrack = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_soundtrack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_soundtrack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandShowSetSoundtrack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference show = 2;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->show(), output);
  }

  // optional .TSP.Reference soundtrack = 3;
  if (has_soundtrack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->soundtrack(), output);
  }

  // optional .TSP.Reference old_soundtrack = 4;
  if (has_old_soundtrack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->old_soundtrack(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandShowSetSoundtrack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference show = 2;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->show(), target);
  }

  // optional .TSP.Reference soundtrack = 3;
  if (has_soundtrack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->soundtrack(), target);
  }

  // optional .TSP.Reference old_soundtrack = 4;
  if (has_old_soundtrack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->old_soundtrack(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandShowSetSoundtrack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference show = 2;
    if (has_show()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->show());
    }

    // optional .TSP.Reference soundtrack = 3;
    if (has_soundtrack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->soundtrack());
    }

    // optional .TSP.Reference old_soundtrack = 4;
    if (has_old_soundtrack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_soundtrack());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandShowSetSoundtrack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandShowSetSoundtrack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandShowSetSoundtrack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandShowSetSoundtrack::MergeFrom(const CommandShowSetSoundtrack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_show()) {
      mutable_show()->::TSP::Reference::MergeFrom(from.show());
    }
    if (from.has_soundtrack()) {
      mutable_soundtrack()->::TSP::Reference::MergeFrom(from.soundtrack());
    }
    if (from.has_old_soundtrack()) {
      mutable_old_soundtrack()->::TSP::Reference::MergeFrom(from.old_soundtrack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandShowSetSoundtrack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandShowSetSoundtrack::CopyFrom(const CommandShowSetSoundtrack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandShowSetSoundtrack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_show()) {
    if (!this->show().IsInitialized()) return false;
  }
  if (has_soundtrack()) {
    if (!this->soundtrack().IsInitialized()) return false;
  }
  if (has_old_soundtrack()) {
    if (!this->old_soundtrack().IsInitialized()) return false;
  }
  return true;
}

void CommandShowSetSoundtrack::Swap(CommandShowSetSoundtrack* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(show_, other->show_);
    std::swap(soundtrack_, other->soundtrack_);
    std::swap(old_soundtrack_, other->old_soundtrack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandShowSetSoundtrack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandShowSetSoundtrack_descriptor_;
  metadata.reflection = CommandShowSetSoundtrack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSoundtrackSetValue_PropertyValue::kDoubleValueFieldNumber;
const int CommandSoundtrackSetValue_PropertyValue::kModeValueFieldNumber;
const int CommandSoundtrackSetValue_PropertyValue::kMediaReferenceValuesFieldNumber;
#endif  // !_MSC_VER

CommandSoundtrackSetValue_PropertyValue::CommandSoundtrackSetValue_PropertyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSoundtrackSetValue_PropertyValue::InitAsDefaultInstance() {
}

CommandSoundtrackSetValue_PropertyValue::CommandSoundtrackSetValue_PropertyValue(const CommandSoundtrackSetValue_PropertyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSoundtrackSetValue_PropertyValue::SharedCtor() {
  _cached_size_ = 0;
  double_value_ = 0;
  mode_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSoundtrackSetValue_PropertyValue::~CommandSoundtrackSetValue_PropertyValue() {
  SharedDtor();
}

void CommandSoundtrackSetValue_PropertyValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommandSoundtrackSetValue_PropertyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSoundtrackSetValue_PropertyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSoundtrackSetValue_PropertyValue_descriptor_;
}

const CommandSoundtrackSetValue_PropertyValue& CommandSoundtrackSetValue_PropertyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSoundtrackSetValue_PropertyValue* CommandSoundtrackSetValue_PropertyValue::default_instance_ = NULL;

CommandSoundtrackSetValue_PropertyValue* CommandSoundtrackSetValue_PropertyValue::New() const {
  return new CommandSoundtrackSetValue_PropertyValue;
}

void CommandSoundtrackSetValue_PropertyValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    double_value_ = 0;
    mode_value_ = 0;
  }
  media_reference_values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSoundtrackSetValue_PropertyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double double_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &double_value_)));
          set_has_double_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mode_value;
        break;
      }

      // optional .KN.Soundtrack.SoundtrackMode mode_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode_value:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::KN::Soundtrack_SoundtrackMode_IsValid(value)) {
            set_mode_value(static_cast< ::KN::Soundtrack_SoundtrackMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_media_reference_values;
        break;
      }

      // repeated .TSP.DataReference media_reference_values = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_media_reference_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_media_reference_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_media_reference_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSoundtrackSetValue_PropertyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double double_value = 1;
  if (has_double_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->double_value(), output);
  }

  // optional .KN.Soundtrack.SoundtrackMode mode_value = 2;
  if (has_mode_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode_value(), output);
  }

  // repeated .TSP.DataReference media_reference_values = 3;
  for (int i = 0; i < this->media_reference_values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->media_reference_values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSoundtrackSetValue_PropertyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double double_value = 1;
  if (has_double_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->double_value(), target);
  }

  // optional .KN.Soundtrack.SoundtrackMode mode_value = 2;
  if (has_mode_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode_value(), target);
  }

  // repeated .TSP.DataReference media_reference_values = 3;
  for (int i = 0; i < this->media_reference_values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->media_reference_values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSoundtrackSetValue_PropertyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double double_value = 1;
    if (has_double_value()) {
      total_size += 1 + 8;
    }

    // optional .KN.Soundtrack.SoundtrackMode mode_value = 2;
    if (has_mode_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode_value());
    }

  }
  // repeated .TSP.DataReference media_reference_values = 3;
  total_size += 1 * this->media_reference_values_size();
  for (int i = 0; i < this->media_reference_values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->media_reference_values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSoundtrackSetValue_PropertyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSoundtrackSetValue_PropertyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSoundtrackSetValue_PropertyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSoundtrackSetValue_PropertyValue::MergeFrom(const CommandSoundtrackSetValue_PropertyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  media_reference_values_.MergeFrom(from.media_reference_values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_double_value()) {
      set_double_value(from.double_value());
    }
    if (from.has_mode_value()) {
      set_mode_value(from.mode_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSoundtrackSetValue_PropertyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSoundtrackSetValue_PropertyValue::CopyFrom(const CommandSoundtrackSetValue_PropertyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSoundtrackSetValue_PropertyValue::IsInitialized() const {

  for (int i = 0; i < media_reference_values_size(); i++) {
    if (!this->media_reference_values(i).IsInitialized()) return false;
  }
  return true;
}

void CommandSoundtrackSetValue_PropertyValue::Swap(CommandSoundtrackSetValue_PropertyValue* other) {
  if (other != this) {
    std::swap(double_value_, other->double_value_);
    std::swap(mode_value_, other->mode_value_);
    media_reference_values_.Swap(&other->media_reference_values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSoundtrackSetValue_PropertyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSoundtrackSetValue_PropertyValue_descriptor_;
  metadata.reflection = CommandSoundtrackSetValue_PropertyValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CommandSoundtrackSetValue::kSuperFieldNumber;
const int CommandSoundtrackSetValue::kSoundtrackFieldNumber;
const int CommandSoundtrackSetValue::kPropertyFieldNumber;
const int CommandSoundtrackSetValue::kOldValueFieldNumber;
const int CommandSoundtrackSetValue::kNewValueFieldNumber;
#endif  // !_MSC_VER

CommandSoundtrackSetValue::CommandSoundtrackSetValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSoundtrackSetValue::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  soundtrack_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  old_value_ = const_cast< ::KN::CommandSoundtrackSetValue_PropertyValue*>(&::KN::CommandSoundtrackSetValue_PropertyValue::default_instance());
  new_value_ = const_cast< ::KN::CommandSoundtrackSetValue_PropertyValue*>(&::KN::CommandSoundtrackSetValue_PropertyValue::default_instance());
}

CommandSoundtrackSetValue::CommandSoundtrackSetValue(const CommandSoundtrackSetValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSoundtrackSetValue::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  soundtrack_ = NULL;
  property_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  old_value_ = NULL;
  new_value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSoundtrackSetValue::~CommandSoundtrackSetValue() {
  SharedDtor();
}

void CommandSoundtrackSetValue::SharedDtor() {
  if (property_ != &::google::protobuf::internal::kEmptyString) {
    delete property_;
  }
  if (this != default_instance_) {
    delete super_;
    delete soundtrack_;
    delete old_value_;
    delete new_value_;
  }
}

void CommandSoundtrackSetValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSoundtrackSetValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSoundtrackSetValue_descriptor_;
}

const CommandSoundtrackSetValue& CommandSoundtrackSetValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSoundtrackSetValue* CommandSoundtrackSetValue::default_instance_ = NULL;

CommandSoundtrackSetValue* CommandSoundtrackSetValue::New() const {
  return new CommandSoundtrackSetValue;
}

void CommandSoundtrackSetValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_soundtrack()) {
      if (soundtrack_ != NULL) soundtrack_->::TSP::Reference::Clear();
    }
    if (has_property()) {
      if (property_ != &::google::protobuf::internal::kEmptyString) {
        property_->clear();
      }
    }
    if (has_old_value()) {
      if (old_value_ != NULL) old_value_->::KN::CommandSoundtrackSetValue_PropertyValue::Clear();
    }
    if (has_new_value()) {
      if (new_value_ != NULL) new_value_->::KN::CommandSoundtrackSetValue_PropertyValue::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSoundtrackSetValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_soundtrack;
        break;
      }

      // optional .TSP.Reference soundtrack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soundtrack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_soundtrack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_property;
        break;
      }

      // optional string property = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_property()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->property().data(), this->property().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_old_value;
        break;
      }

      // optional .KN.CommandSoundtrackSetValue.PropertyValue old_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_new_value;
        break;
      }

      // optional .KN.CommandSoundtrackSetValue.PropertyValue new_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSoundtrackSetValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference soundtrack = 2;
  if (has_soundtrack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->soundtrack(), output);
  }

  // optional string property = 3;
  if (has_property()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->property().data(), this->property().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->property(), output);
  }

  // optional .KN.CommandSoundtrackSetValue.PropertyValue old_value = 4;
  if (has_old_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->old_value(), output);
  }

  // optional .KN.CommandSoundtrackSetValue.PropertyValue new_value = 5;
  if (has_new_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->new_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSoundtrackSetValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference soundtrack = 2;
  if (has_soundtrack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->soundtrack(), target);
  }

  // optional string property = 3;
  if (has_property()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->property().data(), this->property().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->property(), target);
  }

  // optional .KN.CommandSoundtrackSetValue.PropertyValue old_value = 4;
  if (has_old_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->old_value(), target);
  }

  // optional .KN.CommandSoundtrackSetValue.PropertyValue new_value = 5;
  if (has_new_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->new_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSoundtrackSetValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference soundtrack = 2;
    if (has_soundtrack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->soundtrack());
    }

    // optional string property = 3;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->property());
    }

    // optional .KN.CommandSoundtrackSetValue.PropertyValue old_value = 4;
    if (has_old_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_value());
    }

    // optional .KN.CommandSoundtrackSetValue.PropertyValue new_value = 5;
    if (has_new_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSoundtrackSetValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSoundtrackSetValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSoundtrackSetValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSoundtrackSetValue::MergeFrom(const CommandSoundtrackSetValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_soundtrack()) {
      mutable_soundtrack()->::TSP::Reference::MergeFrom(from.soundtrack());
    }
    if (from.has_property()) {
      set_property(from.property());
    }
    if (from.has_old_value()) {
      mutable_old_value()->::KN::CommandSoundtrackSetValue_PropertyValue::MergeFrom(from.old_value());
    }
    if (from.has_new_value()) {
      mutable_new_value()->::KN::CommandSoundtrackSetValue_PropertyValue::MergeFrom(from.new_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSoundtrackSetValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSoundtrackSetValue::CopyFrom(const CommandSoundtrackSetValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSoundtrackSetValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_soundtrack()) {
    if (!this->soundtrack().IsInitialized()) return false;
  }
  if (has_old_value()) {
    if (!this->old_value().IsInitialized()) return false;
  }
  if (has_new_value()) {
    if (!this->new_value().IsInitialized()) return false;
  }
  return true;
}

void CommandSoundtrackSetValue::Swap(CommandSoundtrackSetValue* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(soundtrack_, other->soundtrack_);
    std::swap(property_, other->property_);
    std::swap(old_value_, other->old_value_);
    std::swap(new_value_, other->new_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSoundtrackSetValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSoundtrackSetValue_descriptor_;
  metadata.reflection = CommandSoundtrackSetValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSlideUpdateMasterDrawables::kSuperFieldNumber;
const int CommandSlideUpdateMasterDrawables::kSlideFieldNumber;
const int CommandSlideUpdateMasterDrawables::kDrawablesToInsertFieldNumber;
const int CommandSlideUpdateMasterDrawables::kSortedDrawablesToRemoveFieldNumber;
const int CommandSlideUpdateMasterDrawables::kIndexesOfRemovedDrawablesFieldNumber;
#endif  // !_MSC_VER

CommandSlideUpdateMasterDrawables::CommandSlideUpdateMasterDrawables()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSlideUpdateMasterDrawables::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  slide_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  indexes_of_removed_drawables_ = const_cast< ::TSP::IndexSet*>(&::TSP::IndexSet::default_instance());
}

CommandSlideUpdateMasterDrawables::CommandSlideUpdateMasterDrawables(const CommandSlideUpdateMasterDrawables& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSlideUpdateMasterDrawables::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  slide_ = NULL;
  indexes_of_removed_drawables_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSlideUpdateMasterDrawables::~CommandSlideUpdateMasterDrawables() {
  SharedDtor();
}

void CommandSlideUpdateMasterDrawables::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete slide_;
    delete indexes_of_removed_drawables_;
  }
}

void CommandSlideUpdateMasterDrawables::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSlideUpdateMasterDrawables::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSlideUpdateMasterDrawables_descriptor_;
}

const CommandSlideUpdateMasterDrawables& CommandSlideUpdateMasterDrawables::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

CommandSlideUpdateMasterDrawables* CommandSlideUpdateMasterDrawables::default_instance_ = NULL;

CommandSlideUpdateMasterDrawables* CommandSlideUpdateMasterDrawables::New() const {
  return new CommandSlideUpdateMasterDrawables;
}

void CommandSlideUpdateMasterDrawables::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_slide()) {
      if (slide_ != NULL) slide_->::TSP::Reference::Clear();
    }
    if (has_indexes_of_removed_drawables()) {
      if (indexes_of_removed_drawables_ != NULL) indexes_of_removed_drawables_->::TSP::IndexSet::Clear();
    }
  }
  drawables_to_insert_.Clear();
  sorted_drawables_to_remove_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSlideUpdateMasterDrawables::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_slide;
        break;
      }

      // required .TSP.Reference slide = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slide:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slide()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_drawables_to_insert;
        break;
      }

      // repeated .TSP.Reference drawables_to_insert = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drawables_to_insert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drawables_to_insert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_drawables_to_insert;
        if (input->ExpectTag(34)) goto parse_sorted_drawables_to_remove;
        break;
      }

      // repeated .TSP.Reference sorted_drawables_to_remove = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sorted_drawables_to_remove:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sorted_drawables_to_remove()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sorted_drawables_to_remove;
        if (input->ExpectTag(42)) goto parse_indexes_of_removed_drawables;
        break;
      }

      // required .TSP.IndexSet indexes_of_removed_drawables = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_indexes_of_removed_drawables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_indexes_of_removed_drawables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSlideUpdateMasterDrawables::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference slide = 2;
  if (has_slide()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slide(), output);
  }

  // repeated .TSP.Reference drawables_to_insert = 3;
  for (int i = 0; i < this->drawables_to_insert_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->drawables_to_insert(i), output);
  }

  // repeated .TSP.Reference sorted_drawables_to_remove = 4;
  for (int i = 0; i < this->sorted_drawables_to_remove_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sorted_drawables_to_remove(i), output);
  }

  // required .TSP.IndexSet indexes_of_removed_drawables = 5;
  if (has_indexes_of_removed_drawables()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->indexes_of_removed_drawables(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSlideUpdateMasterDrawables::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference slide = 2;
  if (has_slide()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->slide(), target);
  }

  // repeated .TSP.Reference drawables_to_insert = 3;
  for (int i = 0; i < this->drawables_to_insert_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->drawables_to_insert(i), target);
  }

  // repeated .TSP.Reference sorted_drawables_to_remove = 4;
  for (int i = 0; i < this->sorted_drawables_to_remove_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sorted_drawables_to_remove(i), target);
  }

  // required .TSP.IndexSet indexes_of_removed_drawables = 5;
  if (has_indexes_of_removed_drawables()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->indexes_of_removed_drawables(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSlideUpdateMasterDrawables::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference slide = 2;
    if (has_slide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slide());
    }

    // required .TSP.IndexSet indexes_of_removed_drawables = 5;
    if (has_indexes_of_removed_drawables()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->indexes_of_removed_drawables());
    }

  }
  // repeated .TSP.Reference drawables_to_insert = 3;
  total_size += 1 * this->drawables_to_insert_size();
  for (int i = 0; i < this->drawables_to_insert_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drawables_to_insert(i));
  }

  // repeated .TSP.Reference sorted_drawables_to_remove = 4;
  total_size += 1 * this->sorted_drawables_to_remove_size();
  for (int i = 0; i < this->sorted_drawables_to_remove_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sorted_drawables_to_remove(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSlideUpdateMasterDrawables::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSlideUpdateMasterDrawables* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSlideUpdateMasterDrawables*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSlideUpdateMasterDrawables::MergeFrom(const CommandSlideUpdateMasterDrawables& from) {
  GOOGLE_CHECK_NE(&from, this);
  drawables_to_insert_.MergeFrom(from.drawables_to_insert_);
  sorted_drawables_to_remove_.MergeFrom(from.sorted_drawables_to_remove_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_slide()) {
      mutable_slide()->::TSP::Reference::MergeFrom(from.slide());
    }
    if (from.has_indexes_of_removed_drawables()) {
      mutable_indexes_of_removed_drawables()->::TSP::IndexSet::MergeFrom(from.indexes_of_removed_drawables());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSlideUpdateMasterDrawables::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSlideUpdateMasterDrawables::CopyFrom(const CommandSlideUpdateMasterDrawables& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSlideUpdateMasterDrawables::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_slide()) {
    if (!this->slide().IsInitialized()) return false;
  }
  for (int i = 0; i < drawables_to_insert_size(); i++) {
    if (!this->drawables_to_insert(i).IsInitialized()) return false;
  }
  for (int i = 0; i < sorted_drawables_to_remove_size(); i++) {
    if (!this->sorted_drawables_to_remove(i).IsInitialized()) return false;
  }
  if (has_indexes_of_removed_drawables()) {
    if (!this->indexes_of_removed_drawables().IsInitialized()) return false;
  }
  return true;
}

void CommandSlideUpdateMasterDrawables::Swap(CommandSlideUpdateMasterDrawables* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(slide_, other->slide_);
    drawables_to_insert_.Swap(&other->drawables_to_insert_);
    sorted_drawables_to_remove_.Swap(&other->sorted_drawables_to_remove_);
    std::swap(indexes_of_removed_drawables_, other->indexes_of_removed_drawables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSlideUpdateMasterDrawables::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSlideUpdateMasterDrawables_descriptor_;
  metadata.reflection = CommandSlideUpdateMasterDrawables_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SlideCollectionCommandSelectionBehaviorArchive_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlideCollectionCommandSelectionBehaviorArchive_Type_descriptor_;
}
bool SlideCollectionCommandSelectionBehaviorArchive_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SlideCollectionCommandSelectionBehaviorArchive_Type SlideCollectionCommandSelectionBehaviorArchive::kKindSlideSelectionBehaviorTypeGeneral;
const SlideCollectionCommandSelectionBehaviorArchive_Type SlideCollectionCommandSelectionBehaviorArchive::kKindSlideSelectionBehaviorTypeInsertion;
const SlideCollectionCommandSelectionBehaviorArchive_Type SlideCollectionCommandSelectionBehaviorArchive::kKindSlideSelectionBehaviorTypeDeletion;
const SlideCollectionCommandSelectionBehaviorArchive_Type SlideCollectionCommandSelectionBehaviorArchive::kKindSlideSelectionBehaviorTypeMove;
const SlideCollectionCommandSelectionBehaviorArchive_Type SlideCollectionCommandSelectionBehaviorArchive::Type_MIN;
const SlideCollectionCommandSelectionBehaviorArchive_Type SlideCollectionCommandSelectionBehaviorArchive::Type_MAX;
const int SlideCollectionCommandSelectionBehaviorArchive::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SlideCollectionCommandSelectionBehaviorArchive::kArchivedNewSelectionFieldNumber;
const int SlideCollectionCommandSelectionBehaviorArchive::kArchivedOldSelectionFieldNumber;
const int SlideCollectionCommandSelectionBehaviorArchive::kTypeFieldNumber;
#endif  // !_MSC_VER

SlideCollectionCommandSelectionBehaviorArchive::SlideCollectionCommandSelectionBehaviorArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlideCollectionCommandSelectionBehaviorArchive::InitAsDefaultInstance() {
  archived_new_selection_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  archived_old_selection_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

SlideCollectionCommandSelectionBehaviorArchive::SlideCollectionCommandSelectionBehaviorArchive(const SlideCollectionCommandSelectionBehaviorArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlideCollectionCommandSelectionBehaviorArchive::SharedCtor() {
  _cached_size_ = 0;
  archived_new_selection_ = NULL;
  archived_old_selection_ = NULL;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlideCollectionCommandSelectionBehaviorArchive::~SlideCollectionCommandSelectionBehaviorArchive() {
  SharedDtor();
}

void SlideCollectionCommandSelectionBehaviorArchive::SharedDtor() {
  if (this != default_instance_) {
    delete archived_new_selection_;
    delete archived_old_selection_;
  }
}

void SlideCollectionCommandSelectionBehaviorArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlideCollectionCommandSelectionBehaviorArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlideCollectionCommandSelectionBehaviorArchive_descriptor_;
}

const SlideCollectionCommandSelectionBehaviorArchive& SlideCollectionCommandSelectionBehaviorArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

SlideCollectionCommandSelectionBehaviorArchive* SlideCollectionCommandSelectionBehaviorArchive::default_instance_ = NULL;

SlideCollectionCommandSelectionBehaviorArchive* SlideCollectionCommandSelectionBehaviorArchive::New() const {
  return new SlideCollectionCommandSelectionBehaviorArchive;
}

void SlideCollectionCommandSelectionBehaviorArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_archived_new_selection()) {
      if (archived_new_selection_ != NULL) archived_new_selection_->::TSP::Reference::Clear();
    }
    if (has_archived_old_selection()) {
      if (archived_old_selection_ != NULL) archived_old_selection_->::TSP::Reference::Clear();
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlideCollectionCommandSelectionBehaviorArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference archived_new_selection = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_archived_new_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_archived_old_selection;
        break;
      }

      // optional .TSP.Reference archived_old_selection = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_archived_old_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_archived_old_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .KN.SlideCollectionCommandSelectionBehaviorArchive.Type type = 3 [default = kKindSlideSelectionBehaviorTypeGeneral];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::KN::SlideCollectionCommandSelectionBehaviorArchive_Type_IsValid(value)) {
            set_type(static_cast< ::KN::SlideCollectionCommandSelectionBehaviorArchive_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlideCollectionCommandSelectionBehaviorArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference archived_new_selection = 1;
  if (has_archived_new_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->archived_new_selection(), output);
  }

  // optional .TSP.Reference archived_old_selection = 2;
  if (has_archived_old_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->archived_old_selection(), output);
  }

  // optional .KN.SlideCollectionCommandSelectionBehaviorArchive.Type type = 3 [default = kKindSlideSelectionBehaviorTypeGeneral];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlideCollectionCommandSelectionBehaviorArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference archived_new_selection = 1;
  if (has_archived_new_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->archived_new_selection(), target);
  }

  // optional .TSP.Reference archived_old_selection = 2;
  if (has_archived_old_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->archived_old_selection(), target);
  }

  // optional .KN.SlideCollectionCommandSelectionBehaviorArchive.Type type = 3 [default = kKindSlideSelectionBehaviorTypeGeneral];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlideCollectionCommandSelectionBehaviorArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference archived_new_selection = 1;
    if (has_archived_new_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->archived_new_selection());
    }

    // optional .TSP.Reference archived_old_selection = 2;
    if (has_archived_old_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->archived_old_selection());
    }

    // optional .KN.SlideCollectionCommandSelectionBehaviorArchive.Type type = 3 [default = kKindSlideSelectionBehaviorTypeGeneral];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlideCollectionCommandSelectionBehaviorArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlideCollectionCommandSelectionBehaviorArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlideCollectionCommandSelectionBehaviorArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlideCollectionCommandSelectionBehaviorArchive::MergeFrom(const SlideCollectionCommandSelectionBehaviorArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_archived_new_selection()) {
      mutable_archived_new_selection()->::TSP::Reference::MergeFrom(from.archived_new_selection());
    }
    if (from.has_archived_old_selection()) {
      mutable_archived_old_selection()->::TSP::Reference::MergeFrom(from.archived_old_selection());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlideCollectionCommandSelectionBehaviorArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlideCollectionCommandSelectionBehaviorArchive::CopyFrom(const SlideCollectionCommandSelectionBehaviorArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideCollectionCommandSelectionBehaviorArchive::IsInitialized() const {

  if (has_archived_new_selection()) {
    if (!this->archived_new_selection().IsInitialized()) return false;
  }
  if (has_archived_old_selection()) {
    if (!this->archived_old_selection().IsInitialized()) return false;
  }
  return true;
}

void SlideCollectionCommandSelectionBehaviorArchive::Swap(SlideCollectionCommandSelectionBehaviorArchive* other) {
  if (other != this) {
    std::swap(archived_new_selection_, other->archived_new_selection_);
    std::swap(archived_old_selection_, other->archived_old_selection_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlideCollectionCommandSelectionBehaviorArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlideCollectionCommandSelectionBehaviorArchive_descriptor_;
  metadata.reflection = SlideCollectionCommandSelectionBehaviorArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartInfoGeometryCommandArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

ChartInfoGeometryCommandArchive::ChartInfoGeometryCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartInfoGeometryCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

ChartInfoGeometryCommandArchive::ChartInfoGeometryCommandArchive(const ChartInfoGeometryCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartInfoGeometryCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartInfoGeometryCommandArchive::~ChartInfoGeometryCommandArchive() {
  SharedDtor();
}

void ChartInfoGeometryCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void ChartInfoGeometryCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartInfoGeometryCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartInfoGeometryCommandArchive_descriptor_;
}

const ChartInfoGeometryCommandArchive& ChartInfoGeometryCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNCommandArchives_2eproto();
  return *default_instance_;
}

ChartInfoGeometryCommandArchive* ChartInfoGeometryCommandArchive::default_instance_ = NULL;

ChartInfoGeometryCommandArchive* ChartInfoGeometryCommandArchive::New() const {
  return new ChartInfoGeometryCommandArchive;
}

void ChartInfoGeometryCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartInfoGeometryCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartInfoGeometryCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartInfoGeometryCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartInfoGeometryCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartInfoGeometryCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartInfoGeometryCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartInfoGeometryCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartInfoGeometryCommandArchive::MergeFrom(const ChartInfoGeometryCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartInfoGeometryCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartInfoGeometryCommandArchive::CopyFrom(const ChartInfoGeometryCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartInfoGeometryCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void ChartInfoGeometryCommandArchive::Swap(ChartInfoGeometryCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartInfoGeometryCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartInfoGeometryCommandArchive_descriptor_;
  metadata.reflection = ChartInfoGeometryCommandArchive_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KN

// @@protoc_insertion_point(global_scope)
