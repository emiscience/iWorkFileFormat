// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSWPArchives.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TSWPArchives.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TSWP {

namespace {

const ::google::protobuf::Descriptor* SelectionArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelectionArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectAttributeTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectAttributeTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectAttributeTable_ObjectAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectAttributeTable_ObjectAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringAttributeTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringAttributeTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringAttributeTable_StringAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringAttributeTable_StringAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParaDataAttributeTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParaDataAttributeTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParaDataAttributeTable_ParaDataAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParaDataAttributeTable_ParaDataAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* SparseObjectAttributeTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SparseObjectAttributeTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* SparseObjectAttributeTable_SparseObjectAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SparseObjectAttributeTable_SparseObjectAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* StorageArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StorageArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StorageArchive_KindType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* HighlightArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HighlightArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* FontFeatureArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FontFeatureArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterStylePropertiesArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterStylePropertiesArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CharacterStylePropertiesArchive_CapitalizationType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CharacterStylePropertiesArchive_UnderlineType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CharacterStylePropertiesArchive_LigaturesType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CharacterStylePropertiesArchive_StrikethruType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CharacterStylePropertiesArchive_SuperscriptType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CharacterStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TabArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TabArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TabArchive_TabAlignmentType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TabsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TabsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* LineSpacingArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineSpacingArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LineSpacingArchive_LineSpacingModeType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ParagraphStylePropertiesArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParagraphStylePropertiesArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ParagraphStylePropertiesArchive_TextAlignmentType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ParagraphStylePropertiesArchive_ParagraphBorderType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ParagraphStylePropertiesArchive_OutlineStyleType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ParagraphStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParagraphStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListStyleArchive_LabelGeometry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListStyleArchive_LabelGeometry_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListStyleArchive_LabelImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListStyleArchive_LabelImage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ListStyleArchive_LabelType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ListStyleArchive_NumberType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TextStylePresetArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TextStylePresetArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColumnsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColumnsArchive_EqualColumnsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnsArchive_EqualColumnsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColumnsArchive_NonEqualColumnsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnsArchive_NonEqualColumnsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PaddingArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PaddingArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColumnStylePropertiesArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnStylePropertiesArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ColumnStylePropertiesArchive_VerticalAlignmentType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ColumnStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShapeStylePropertiesArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShapeStylePropertiesArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ShapeStylePropertiesArchive_VerticalAlignmentType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ShapeStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShapeStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThemePresetsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThemePresetsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TextPresetDisplayItemArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TextPresetDisplayItemArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TOCEntryStylePropertiesArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TOCEntryStylePropertiesArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TOCEntryStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TOCEntryStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TOCSettingsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TOCSettingsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TOCSettingsArchive_TOCEntryData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TOCSettingsArchive_TOCEntryData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TOCEntryInstanceArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TOCEntryInstanceArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* UndoTransaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UndoTransaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* UndoTransaction_GenericTransaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UndoTransaction_GenericTransaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* UndoTransaction_TextTransaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UndoTransaction_TextTransaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* UndoTransaction_CharIndexTransaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UndoTransaction_CharIndexTransaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* UndoTransaction_ReplaceCharIndexTransaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UndoTransaction_ReplaceCharIndexTransaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* UndoTransaction_AttributeIndexTransaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UndoTransaction_AttributeIndexTransaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* UndoTransaction_InsertAttributeTransaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UndoTransaction_InsertAttributeTransaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* UndoTransaction_InsertNilTransaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UndoTransaction_InsertNilTransaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* UndoTransaction_CharDeltaTransaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UndoTransaction_CharDeltaTransaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* UndoTransaction_ParagraphDataTransaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UndoTransaction_ParagraphDataTransaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* UndoTransaction_ObjectDOLCTransaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UndoTransaction_ObjectDOLCTransaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* UndoTransaction_CTDateTransaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UndoTransaction_CTDateTransaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* UndoTransaction_UnionTransaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UndoTransaction_UnionTransaction_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UndoTransaction_UndoKind_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UndoTransactionWrapperArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UndoTransactionWrapperArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShapeInfoArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShapeInfoArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommentInfoArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommentInfoArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TOCInfoArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TOCInfoArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TOCLayoutHintArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TOCLayoutHintArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TextualAttachmentArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TextualAttachmentArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TextualAttachmentArchive_Kind_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TSWPTOCPageNumberAttachmentArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSWPTOCPageNumberAttachmentArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* UIGraphicalAttachment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UIGraphicalAttachment_reflection_ = NULL;
const ::google::protobuf::Descriptor* DrawableAttachmentArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DrawableAttachmentArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TOCAttachmentArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TOCAttachmentArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* FootnoteReferenceAttachmentArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FootnoteReferenceAttachmentArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* NumberAttachmentArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NumberAttachmentArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* SmartFieldArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmartFieldArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* HyperlinkFieldArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HyperlinkFieldArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlaceholderSmartFieldArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlaceholderSmartFieldArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnsupportedHyperlinkFieldArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnsupportedHyperlinkFieldArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* BibliographySmartFieldArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BibliographySmartFieldArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CitationRecordArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CitationRecordArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CitationSmartFieldArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CitationSmartFieldArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* DateTimeSmartFieldArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DateTimeSmartFieldArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DateTimeSmartFieldArchive_DateTimeUpdatePlan_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DateTimeSmartFieldArchive_DateTimeFormatterStyle_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BookmarkFieldArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BookmarkFieldArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* FilenameSmartFieldArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FilenameSmartFieldArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* MergeSmartFieldArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MergeSmartFieldArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MergeSmartFieldArchive_MergeCategory_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TOCSmartFieldArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TOCSmartFieldArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TOCSmartFieldArchive_TOCEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TOCSmartFieldArchive_TOCEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* RubyFieldArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RubyFieldArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChangeArchive_ChangeKind_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ChangeSessionArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeSessionArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* SectionPlaceholderArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SectionPlaceholderArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SelectionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StyleInsertionBehavior_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CaretAffinity_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WritingDirectionType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_TSWPArchives_2eproto() {
  protobuf_AddDesc_TSWPArchives_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TSWPArchives.proto");
  GOOGLE_CHECK(file != NULL);
  SelectionArchive_descriptor_ = file->message_type(0);
  static const int SelectionArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectionArchive, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectionArchive, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectionArchive, styleinsertionbehavior_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectionArchive, caretaffinity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectionArchive, smart_field_range_),
  };
  SelectionArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelectionArchive_descriptor_,
      SelectionArchive::default_instance_,
      SelectionArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectionArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectionArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelectionArchive));
  ObjectAttributeTable_descriptor_ = file->message_type(1);
  static const int ObjectAttributeTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeTable, entries_),
  };
  ObjectAttributeTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectAttributeTable_descriptor_,
      ObjectAttributeTable::default_instance_,
      ObjectAttributeTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectAttributeTable));
  ObjectAttributeTable_ObjectAttribute_descriptor_ = ObjectAttributeTable_descriptor_->nested_type(0);
  static const int ObjectAttributeTable_ObjectAttribute_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeTable_ObjectAttribute, character_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeTable_ObjectAttribute, object_),
  };
  ObjectAttributeTable_ObjectAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectAttributeTable_ObjectAttribute_descriptor_,
      ObjectAttributeTable_ObjectAttribute::default_instance_,
      ObjectAttributeTable_ObjectAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeTable_ObjectAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeTable_ObjectAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectAttributeTable_ObjectAttribute));
  StringAttributeTable_descriptor_ = file->message_type(2);
  static const int StringAttributeTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringAttributeTable, entries_),
  };
  StringAttributeTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringAttributeTable_descriptor_,
      StringAttributeTable::default_instance_,
      StringAttributeTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringAttributeTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringAttributeTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringAttributeTable));
  StringAttributeTable_StringAttribute_descriptor_ = StringAttributeTable_descriptor_->nested_type(0);
  static const int StringAttributeTable_StringAttribute_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringAttributeTable_StringAttribute, character_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringAttributeTable_StringAttribute, object_),
  };
  StringAttributeTable_StringAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringAttributeTable_StringAttribute_descriptor_,
      StringAttributeTable_StringAttribute::default_instance_,
      StringAttributeTable_StringAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringAttributeTable_StringAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringAttributeTable_StringAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringAttributeTable_StringAttribute));
  ParaDataAttributeTable_descriptor_ = file->message_type(3);
  static const int ParaDataAttributeTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaDataAttributeTable, entries_),
  };
  ParaDataAttributeTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParaDataAttributeTable_descriptor_,
      ParaDataAttributeTable::default_instance_,
      ParaDataAttributeTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaDataAttributeTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaDataAttributeTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParaDataAttributeTable));
  ParaDataAttributeTable_ParaDataAttribute_descriptor_ = ParaDataAttributeTable_descriptor_->nested_type(0);
  static const int ParaDataAttributeTable_ParaDataAttribute_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaDataAttributeTable_ParaDataAttribute, character_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaDataAttributeTable_ParaDataAttribute, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaDataAttributeTable_ParaDataAttribute, second_),
  };
  ParaDataAttributeTable_ParaDataAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParaDataAttributeTable_ParaDataAttribute_descriptor_,
      ParaDataAttributeTable_ParaDataAttribute::default_instance_,
      ParaDataAttributeTable_ParaDataAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaDataAttributeTable_ParaDataAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaDataAttributeTable_ParaDataAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParaDataAttributeTable_ParaDataAttribute));
  SparseObjectAttributeTable_descriptor_ = file->message_type(4);
  static const int SparseObjectAttributeTable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseObjectAttributeTable, total_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseObjectAttributeTable, entries_),
  };
  SparseObjectAttributeTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SparseObjectAttributeTable_descriptor_,
      SparseObjectAttributeTable::default_instance_,
      SparseObjectAttributeTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseObjectAttributeTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseObjectAttributeTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SparseObjectAttributeTable));
  SparseObjectAttributeTable_SparseObjectAttribute_descriptor_ = SparseObjectAttributeTable_descriptor_->nested_type(0);
  static const int SparseObjectAttributeTable_SparseObjectAttribute_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseObjectAttributeTable_SparseObjectAttribute, character_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseObjectAttributeTable_SparseObjectAttribute, object_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseObjectAttributeTable_SparseObjectAttribute, run_length_),
  };
  SparseObjectAttributeTable_SparseObjectAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SparseObjectAttributeTable_SparseObjectAttribute_descriptor_,
      SparseObjectAttributeTable_SparseObjectAttribute::default_instance_,
      SparseObjectAttributeTable_SparseObjectAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseObjectAttributeTable_SparseObjectAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseObjectAttributeTable_SparseObjectAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SparseObjectAttributeTable_SparseObjectAttribute));
  StorageArchive_descriptor_ = file->message_type(5);
  static const int StorageArchive_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageArchive, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageArchive, style_sheet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageArchive, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageArchive, has_itext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageArchive, in_document_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageArchive, table_para_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageArchive, table_para_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageArchive, table_list_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageArchive, table_char_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageArchive, table_attachment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageArchive, table_smartfield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageArchive, table_layout_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageArchive, table_para_starts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageArchive, table_bookmark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageArchive, table_footnote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageArchive, table_section_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageArchive, table_rubyfield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageArchive, table_language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageArchive, table_dictation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageArchive, table_insertion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageArchive, table_deletion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageArchive, table_highlight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageArchive, table_para_bidi_),
  };
  StorageArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StorageArchive_descriptor_,
      StorageArchive::default_instance_,
      StorageArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StorageArchive));
  StorageArchive_KindType_descriptor_ = StorageArchive_descriptor_->enum_type(0);
  HighlightArchive_descriptor_ = file->message_type(6);
  static const int HighlightArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighlightArchive, commentstorage_),
  };
  HighlightArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HighlightArchive_descriptor_,
      HighlightArchive::default_instance_,
      HighlightArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighlightArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HighlightArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HighlightArchive));
  FontFeatureArchive_descriptor_ = file->message_type(7);
  static const int FontFeatureArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontFeatureArchive, feature_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontFeatureArchive, feature_selector_),
  };
  FontFeatureArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FontFeatureArchive_descriptor_,
      FontFeatureArchive::default_instance_,
      FontFeatureArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontFeatureArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FontFeatureArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FontFeatureArchive));
  CharacterStylePropertiesArchive_descriptor_ = file->message_type(8);
  static const int CharacterStylePropertiesArchive_offsets_[39] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, bold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, italic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, font_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, font_name_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, font_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, font_color_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, font_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, language_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, superscript_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, underline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, strikethru_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, capitalization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, baseline_shift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, kerning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, ligatures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, outline_color_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, outline_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, outline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, shadow_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, shadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, strikethru_color_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, strikethru_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, strikethru_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, background_color_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, background_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, tracking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, underline_color_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, underline_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, underline_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, word_strikethru_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, word_underline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, font_features_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, font_features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, writing_direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, emphasis_marks_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, emphasis_marks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, compatibility_font_name_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, compatibility_font_name_),
  };
  CharacterStylePropertiesArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterStylePropertiesArchive_descriptor_,
      CharacterStylePropertiesArchive::default_instance_,
      CharacterStylePropertiesArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStylePropertiesArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterStylePropertiesArchive));
  CharacterStylePropertiesArchive_CapitalizationType_descriptor_ = CharacterStylePropertiesArchive_descriptor_->enum_type(0);
  CharacterStylePropertiesArchive_UnderlineType_descriptor_ = CharacterStylePropertiesArchive_descriptor_->enum_type(1);
  CharacterStylePropertiesArchive_LigaturesType_descriptor_ = CharacterStylePropertiesArchive_descriptor_->enum_type(2);
  CharacterStylePropertiesArchive_StrikethruType_descriptor_ = CharacterStylePropertiesArchive_descriptor_->enum_type(3);
  CharacterStylePropertiesArchive_SuperscriptType_descriptor_ = CharacterStylePropertiesArchive_descriptor_->enum_type(4);
  CharacterStyleArchive_descriptor_ = file->message_type(9);
  static const int CharacterStyleArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStyleArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStyleArchive, override_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStyleArchive, char_properties_),
  };
  CharacterStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterStyleArchive_descriptor_,
      CharacterStyleArchive::default_instance_,
      CharacterStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterStyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterStyleArchive));
  TabArchive_descriptor_ = file->message_type(10);
  static const int TabArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabArchive, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabArchive, alignment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabArchive, leader_),
  };
  TabArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TabArchive_descriptor_,
      TabArchive::default_instance_,
      TabArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TabArchive));
  TabArchive_TabAlignmentType_descriptor_ = TabArchive_descriptor_->enum_type(0);
  TabsArchive_descriptor_ = file->message_type(11);
  static const int TabsArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabsArchive, tabs_),
  };
  TabsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TabsArchive_descriptor_,
      TabsArchive::default_instance_,
      TabsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TabsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TabsArchive));
  LineSpacingArchive_descriptor_ = file->message_type(12);
  static const int LineSpacingArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSpacingArchive, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSpacingArchive, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSpacingArchive, baselinerule_),
  };
  LineSpacingArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LineSpacingArchive_descriptor_,
      LineSpacingArchive::default_instance_,
      LineSpacingArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSpacingArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineSpacingArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LineSpacingArchive));
  LineSpacingArchive_LineSpacingModeType_descriptor_ = LineSpacingArchive_descriptor_->enum_type(0);
  ParagraphStylePropertiesArchive_descriptor_ = file->message_type(13);
  static const int ParagraphStylePropertiesArchive_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, alignment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, decimal_tab_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, decimal_tab_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, default_tab_stops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, fill_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, fill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, first_line_indent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, hyphenate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, keep_lines_together_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, keep_with_next_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, left_indent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, line_spacing_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, line_spacing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, page_break_before_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, borders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, rule_offset_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, rule_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, rule_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, right_indent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, space_after_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, space_before_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, tabs_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, tabs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, widow_control_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, outline_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, outline_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, following_style_id_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, following_style_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, stroke_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, show_in_toc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, toc_style_id_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, toc_style_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, writing_direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, list_style_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, list_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, following_style_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, following_style_),
  };
  ParagraphStylePropertiesArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParagraphStylePropertiesArchive_descriptor_,
      ParagraphStylePropertiesArchive::default_instance_,
      ParagraphStylePropertiesArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStylePropertiesArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParagraphStylePropertiesArchive));
  ParagraphStylePropertiesArchive_TextAlignmentType_descriptor_ = ParagraphStylePropertiesArchive_descriptor_->enum_type(0);
  ParagraphStylePropertiesArchive_ParagraphBorderType_descriptor_ = ParagraphStylePropertiesArchive_descriptor_->enum_type(1);
  ParagraphStylePropertiesArchive_OutlineStyleType_descriptor_ = ParagraphStylePropertiesArchive_descriptor_->enum_type(2);
  ParagraphStyleArchive_descriptor_ = file->message_type(14);
  static const int ParagraphStyleArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStyleArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStyleArchive, override_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStyleArchive, char_properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStyleArchive, para_properties_),
  };
  ParagraphStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParagraphStyleArchive_descriptor_,
      ParagraphStyleArchive::default_instance_,
      ParagraphStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParagraphStyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParagraphStyleArchive));
  ListStyleArchive_descriptor_ = file->message_type(15);
  static const int ListStyleArchive_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStyleArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStyleArchive, override_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStyleArchive, label_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStyleArchive, text_indents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStyleArchive, indents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStyleArchive, geometries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStyleArchive, number_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStyleArchive, strings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStyleArchive, images_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStyleArchive, shadow_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStyleArchive, shadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStyleArchive, font_color_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStyleArchive, font_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStyleArchive, font_name_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStyleArchive, font_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStyleArchive, writing_direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStyleArchive, tiered_numbers_),
  };
  ListStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListStyleArchive_descriptor_,
      ListStyleArchive::default_instance_,
      ListStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListStyleArchive));
  ListStyleArchive_LabelGeometry_descriptor_ = ListStyleArchive_descriptor_->nested_type(0);
  static const int ListStyleArchive_LabelGeometry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStyleArchive_LabelGeometry, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStyleArchive_LabelGeometry, baseline_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStyleArchive_LabelGeometry, scale_with_text_),
  };
  ListStyleArchive_LabelGeometry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListStyleArchive_LabelGeometry_descriptor_,
      ListStyleArchive_LabelGeometry::default_instance_,
      ListStyleArchive_LabelGeometry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStyleArchive_LabelGeometry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStyleArchive_LabelGeometry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListStyleArchive_LabelGeometry));
  ListStyleArchive_LabelImage_descriptor_ = ListStyleArchive_descriptor_->nested_type(1);
  static const int ListStyleArchive_LabelImage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStyleArchive_LabelImage, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStyleArchive_LabelImage, image_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStyleArchive_LabelImage, database_image_),
  };
  ListStyleArchive_LabelImage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListStyleArchive_LabelImage_descriptor_,
      ListStyleArchive_LabelImage::default_instance_,
      ListStyleArchive_LabelImage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStyleArchive_LabelImage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStyleArchive_LabelImage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListStyleArchive_LabelImage));
  ListStyleArchive_LabelType_descriptor_ = ListStyleArchive_descriptor_->enum_type(0);
  ListStyleArchive_NumberType_descriptor_ = ListStyleArchive_descriptor_->enum_type(1);
  TextStylePresetArchive_descriptor_ = file->message_type(16);
  static const int TextStylePresetArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextStylePresetArchive, preset_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextStylePresetArchive, paragraph_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextStylePresetArchive, list_style_),
  };
  TextStylePresetArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TextStylePresetArchive_descriptor_,
      TextStylePresetArchive::default_instance_,
      TextStylePresetArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextStylePresetArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextStylePresetArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TextStylePresetArchive));
  ColumnsArchive_descriptor_ = file->message_type(17);
  static const int ColumnsArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnsArchive, equal_columns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnsArchive, non_equal_columns_),
  };
  ColumnsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColumnsArchive_descriptor_,
      ColumnsArchive::default_instance_,
      ColumnsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColumnsArchive));
  ColumnsArchive_EqualColumnsArchive_descriptor_ = ColumnsArchive_descriptor_->nested_type(0);
  static const int ColumnsArchive_EqualColumnsArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnsArchive_EqualColumnsArchive, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnsArchive_EqualColumnsArchive, gap_),
  };
  ColumnsArchive_EqualColumnsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColumnsArchive_EqualColumnsArchive_descriptor_,
      ColumnsArchive_EqualColumnsArchive::default_instance_,
      ColumnsArchive_EqualColumnsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnsArchive_EqualColumnsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnsArchive_EqualColumnsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColumnsArchive_EqualColumnsArchive));
  ColumnsArchive_NonEqualColumnsArchive_descriptor_ = ColumnsArchive_descriptor_->nested_type(1);
  static const int ColumnsArchive_NonEqualColumnsArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnsArchive_NonEqualColumnsArchive, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnsArchive_NonEqualColumnsArchive, following_),
  };
  ColumnsArchive_NonEqualColumnsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColumnsArchive_NonEqualColumnsArchive_descriptor_,
      ColumnsArchive_NonEqualColumnsArchive::default_instance_,
      ColumnsArchive_NonEqualColumnsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnsArchive_NonEqualColumnsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnsArchive_NonEqualColumnsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColumnsArchive_NonEqualColumnsArchive));
  ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive_descriptor_ = ColumnsArchive_NonEqualColumnsArchive_descriptor_->nested_type(0);
  static const int ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive, gap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive, width_),
  };
  ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive_descriptor_,
      ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::default_instance_,
      ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive));
  PaddingArchive_descriptor_ = file->message_type(18);
  static const int PaddingArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaddingArchive, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaddingArchive, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaddingArchive, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaddingArchive, bottom_),
  };
  PaddingArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PaddingArchive_descriptor_,
      PaddingArchive::default_instance_,
      PaddingArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaddingArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaddingArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PaddingArchive));
  ColumnStylePropertiesArchive_descriptor_ = file->message_type(19);
  static const int ColumnStylePropertiesArchive_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStylePropertiesArchive, continuous_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStylePropertiesArchive, shrink_to_fit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStylePropertiesArchive, vertical_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStylePropertiesArchive, min_horizontal_inset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStylePropertiesArchive, vertical_alignment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStylePropertiesArchive, columns_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStylePropertiesArchive, columns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStylePropertiesArchive, margins_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStylePropertiesArchive, margins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStylePropertiesArchive, padding_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStylePropertiesArchive, padding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStylePropertiesArchive, writing_direction_),
  };
  ColumnStylePropertiesArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColumnStylePropertiesArchive_descriptor_,
      ColumnStylePropertiesArchive::default_instance_,
      ColumnStylePropertiesArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStylePropertiesArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStylePropertiesArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColumnStylePropertiesArchive));
  ColumnStylePropertiesArchive_VerticalAlignmentType_descriptor_ = ColumnStylePropertiesArchive_descriptor_->enum_type(0);
  ColumnStyleArchive_descriptor_ = file->message_type(20);
  static const int ColumnStyleArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStyleArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStyleArchive, override_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStyleArchive, column_properties_),
  };
  ColumnStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColumnStyleArchive_descriptor_,
      ColumnStyleArchive::default_instance_,
      ColumnStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnStyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColumnStyleArchive));
  ShapeStylePropertiesArchive_descriptor_ = file->message_type(21);
  static const int ShapeStylePropertiesArchive_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStylePropertiesArchive, shrink_to_fit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStylePropertiesArchive, vertical_alignment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStylePropertiesArchive, columns_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStylePropertiesArchive, columns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStylePropertiesArchive, padding_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStylePropertiesArchive, padding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStylePropertiesArchive, default_text_preset_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStylePropertiesArchive, vertical_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStylePropertiesArchive, paragraph_style_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStylePropertiesArchive, paragraph_style_),
  };
  ShapeStylePropertiesArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShapeStylePropertiesArchive_descriptor_,
      ShapeStylePropertiesArchive::default_instance_,
      ShapeStylePropertiesArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStylePropertiesArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStylePropertiesArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShapeStylePropertiesArchive));
  ShapeStylePropertiesArchive_VerticalAlignmentType_descriptor_ = ShapeStylePropertiesArchive_descriptor_->enum_type(0);
  ShapeStyleArchive_descriptor_ = file->message_type(22);
  static const int ShapeStyleArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStyleArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStyleArchive, override_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStyleArchive, shape_properties_),
  };
  ShapeStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShapeStyleArchive_descriptor_,
      ShapeStyleArchive::default_instance_,
      ShapeStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShapeStyleArchive));
  ThemePresetsArchive_descriptor_ = file->message_type(23);
  static const int ThemePresetsArchive_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemePresetsArchive, list_style_presets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemePresetsArchive, text_style_presets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemePresetsArchive, imported_text_style_presets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemePresetsArchive, toc_entry_style_presets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemePresetsArchive, toc_settings_presets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemePresetsArchive, character_style_presets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemePresetsArchive, paragraph_style_presets_),
  };
  ThemePresetsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThemePresetsArchive_descriptor_,
      ThemePresetsArchive::default_instance_,
      ThemePresetsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemePresetsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemePresetsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThemePresetsArchive));
  TextPresetDisplayItemArchive_descriptor_ = file->message_type(24);
  static const int TextPresetDisplayItemArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextPresetDisplayItemArchive, preset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextPresetDisplayItemArchive, display_name_),
  };
  TextPresetDisplayItemArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TextPresetDisplayItemArchive_descriptor_,
      TextPresetDisplayItemArchive::default_instance_,
      TextPresetDisplayItemArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextPresetDisplayItemArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextPresetDisplayItemArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TextPresetDisplayItemArchive));
  TOCEntryStylePropertiesArchive_descriptor_ = file->message_type(25);
  static const int TOCEntryStylePropertiesArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCEntryStylePropertiesArchive, page_number_style_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCEntryStylePropertiesArchive, page_number_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCEntryStylePropertiesArchive, show_page_number_),
  };
  TOCEntryStylePropertiesArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TOCEntryStylePropertiesArchive_descriptor_,
      TOCEntryStylePropertiesArchive::default_instance_,
      TOCEntryStylePropertiesArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCEntryStylePropertiesArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCEntryStylePropertiesArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TOCEntryStylePropertiesArchive));
  TOCEntryStyleArchive_descriptor_ = file->message_type(26);
  static const int TOCEntryStyleArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCEntryStyleArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCEntryStyleArchive, toc_properties_),
  };
  TOCEntryStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TOCEntryStyleArchive_descriptor_,
      TOCEntryStyleArchive::default_instance_,
      TOCEntryStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCEntryStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCEntryStyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TOCEntryStyleArchive));
  TOCSettingsArchive_descriptor_ = file->message_type(27);
  static const int TOCSettingsArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCSettingsArchive, toc_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCSettingsArchive, toc_scope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCSettingsArchive, entries_),
  };
  TOCSettingsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TOCSettingsArchive_descriptor_,
      TOCSettingsArchive::default_instance_,
      TOCSettingsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCSettingsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCSettingsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TOCSettingsArchive));
  TOCSettingsArchive_TOCEntryData_descriptor_ = TOCSettingsArchive_descriptor_->nested_type(0);
  static const int TOCSettingsArchive_TOCEntryData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCSettingsArchive_TOCEntryData, paragraph_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCSettingsArchive_TOCEntryData, toc_entry_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCSettingsArchive_TOCEntryData, show_in_toc_),
  };
  TOCSettingsArchive_TOCEntryData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TOCSettingsArchive_TOCEntryData_descriptor_,
      TOCSettingsArchive_TOCEntryData::default_instance_,
      TOCSettingsArchive_TOCEntryData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCSettingsArchive_TOCEntryData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCSettingsArchive_TOCEntryData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TOCSettingsArchive_TOCEntryData));
  TOCEntryInstanceArchive_descriptor_ = file->message_type(28);
  static const int TOCEntryInstanceArchive_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCEntryInstanceArchive, paragraph_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCEntryInstanceArchive, page_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCEntryInstanceArchive, number_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCEntryInstanceArchive, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCEntryInstanceArchive, indexed_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCEntryInstanceArchive, indexed_list_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCEntryInstanceArchive, indexed_list_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCEntryInstanceArchive, indexed_paragraph_level_),
  };
  TOCEntryInstanceArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TOCEntryInstanceArchive_descriptor_,
      TOCEntryInstanceArchive::default_instance_,
      TOCEntryInstanceArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCEntryInstanceArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCEntryInstanceArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TOCEntryInstanceArchive));
  UndoTransaction_descriptor_ = file->message_type(29);
  static const int UndoTransaction_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction, entries_),
  };
  UndoTransaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UndoTransaction_descriptor_,
      UndoTransaction::default_instance_,
      UndoTransaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UndoTransaction));
  UndoTransaction_GenericTransaction_descriptor_ = UndoTransaction_descriptor_->nested_type(0);
  static const int UndoTransaction_GenericTransaction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_GenericTransaction, value1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_GenericTransaction, value2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_GenericTransaction, value3_),
  };
  UndoTransaction_GenericTransaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UndoTransaction_GenericTransaction_descriptor_,
      UndoTransaction_GenericTransaction::default_instance_,
      UndoTransaction_GenericTransaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_GenericTransaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_GenericTransaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UndoTransaction_GenericTransaction));
  UndoTransaction_TextTransaction_descriptor_ = UndoTransaction_descriptor_->nested_type(1);
  static const int UndoTransaction_TextTransaction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_TextTransaction, insert_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_TextTransaction, insert_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_TextTransaction, string_to_delete_),
  };
  UndoTransaction_TextTransaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UndoTransaction_TextTransaction_descriptor_,
      UndoTransaction_TextTransaction::default_instance_,
      UndoTransaction_TextTransaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_TextTransaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_TextTransaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UndoTransaction_TextTransaction));
  UndoTransaction_CharIndexTransaction_descriptor_ = UndoTransaction_descriptor_->nested_type(2);
  static const int UndoTransaction_CharIndexTransaction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_CharIndexTransaction, char_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_CharIndexTransaction, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_CharIndexTransaction, object_),
  };
  UndoTransaction_CharIndexTransaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UndoTransaction_CharIndexTransaction_descriptor_,
      UndoTransaction_CharIndexTransaction::default_instance_,
      UndoTransaction_CharIndexTransaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_CharIndexTransaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_CharIndexTransaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UndoTransaction_CharIndexTransaction));
  UndoTransaction_ReplaceCharIndexTransaction_descriptor_ = UndoTransaction_descriptor_->nested_type(3);
  static const int UndoTransaction_ReplaceCharIndexTransaction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_ReplaceCharIndexTransaction, attribute_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_ReplaceCharIndexTransaction, char_index_),
  };
  UndoTransaction_ReplaceCharIndexTransaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UndoTransaction_ReplaceCharIndexTransaction_descriptor_,
      UndoTransaction_ReplaceCharIndexTransaction::default_instance_,
      UndoTransaction_ReplaceCharIndexTransaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_ReplaceCharIndexTransaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_ReplaceCharIndexTransaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UndoTransaction_ReplaceCharIndexTransaction));
  UndoTransaction_AttributeIndexTransaction_descriptor_ = UndoTransaction_descriptor_->nested_type(4);
  static const int UndoTransaction_AttributeIndexTransaction_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_AttributeIndexTransaction, attribute_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_AttributeIndexTransaction, char_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_AttributeIndexTransaction, object_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_AttributeIndexTransaction, string_),
  };
  UndoTransaction_AttributeIndexTransaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UndoTransaction_AttributeIndexTransaction_descriptor_,
      UndoTransaction_AttributeIndexTransaction::default_instance_,
      UndoTransaction_AttributeIndexTransaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_AttributeIndexTransaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_AttributeIndexTransaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UndoTransaction_AttributeIndexTransaction));
  UndoTransaction_InsertAttributeTransaction_descriptor_ = UndoTransaction_descriptor_->nested_type(5);
  static const int UndoTransaction_InsertAttributeTransaction_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_InsertAttributeTransaction, attribute_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_InsertAttributeTransaction, attribute_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_InsertAttributeTransaction, object_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_InsertAttributeTransaction, string_),
  };
  UndoTransaction_InsertAttributeTransaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UndoTransaction_InsertAttributeTransaction_descriptor_,
      UndoTransaction_InsertAttributeTransaction::default_instance_,
      UndoTransaction_InsertAttributeTransaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_InsertAttributeTransaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_InsertAttributeTransaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UndoTransaction_InsertAttributeTransaction));
  UndoTransaction_InsertNilTransaction_descriptor_ = UndoTransaction_descriptor_->nested_type(6);
  static const int UndoTransaction_InsertNilTransaction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_InsertNilTransaction, attribute_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_InsertNilTransaction, attribute_count_),
  };
  UndoTransaction_InsertNilTransaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UndoTransaction_InsertNilTransaction_descriptor_,
      UndoTransaction_InsertNilTransaction::default_instance_,
      UndoTransaction_InsertNilTransaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_InsertNilTransaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_InsertNilTransaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UndoTransaction_InsertNilTransaction));
  UndoTransaction_CharDeltaTransaction_descriptor_ = UndoTransaction_descriptor_->nested_type(7);
  static const int UndoTransaction_CharDeltaTransaction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_CharDeltaTransaction, char_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_CharDeltaTransaction, attribute_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_CharDeltaTransaction, char_delta_),
  };
  UndoTransaction_CharDeltaTransaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UndoTransaction_CharDeltaTransaction_descriptor_,
      UndoTransaction_CharDeltaTransaction::default_instance_,
      UndoTransaction_CharDeltaTransaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_CharDeltaTransaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_CharDeltaTransaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UndoTransaction_CharDeltaTransaction));
  UndoTransaction_ParagraphDataTransaction_descriptor_ = UndoTransaction_descriptor_->nested_type(8);
  static const int UndoTransaction_ParagraphDataTransaction_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_ParagraphDataTransaction, attribute_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_ParagraphDataTransaction, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_ParagraphDataTransaction, second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_ParagraphDataTransaction, char_index_),
  };
  UndoTransaction_ParagraphDataTransaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UndoTransaction_ParagraphDataTransaction_descriptor_,
      UndoTransaction_ParagraphDataTransaction::default_instance_,
      UndoTransaction_ParagraphDataTransaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_ParagraphDataTransaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_ParagraphDataTransaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UndoTransaction_ParagraphDataTransaction));
  UndoTransaction_ObjectDOLCTransaction_descriptor_ = UndoTransaction_descriptor_->nested_type(9);
  static const int UndoTransaction_ObjectDOLCTransaction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_ObjectDOLCTransaction, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_ObjectDOLCTransaction, object_),
  };
  UndoTransaction_ObjectDOLCTransaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UndoTransaction_ObjectDOLCTransaction_descriptor_,
      UndoTransaction_ObjectDOLCTransaction::default_instance_,
      UndoTransaction_ObjectDOLCTransaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_ObjectDOLCTransaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_ObjectDOLCTransaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UndoTransaction_ObjectDOLCTransaction));
  UndoTransaction_CTDateTransaction_descriptor_ = UndoTransaction_descriptor_->nested_type(10);
  static const int UndoTransaction_CTDateTransaction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_CTDateTransaction, attribute_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_CTDateTransaction, date_),
  };
  UndoTransaction_CTDateTransaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UndoTransaction_CTDateTransaction_descriptor_,
      UndoTransaction_CTDateTransaction::default_instance_,
      UndoTransaction_CTDateTransaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_CTDateTransaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_CTDateTransaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UndoTransaction_CTDateTransaction));
  UndoTransaction_UnionTransaction_descriptor_ = UndoTransaction_descriptor_->nested_type(11);
  static const int UndoTransaction_UnionTransaction_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_UnionTransaction, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_UnionTransaction, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_UnionTransaction, generic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_UnionTransaction, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_UnionTransaction, char_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_UnionTransaction, replace_char_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_UnionTransaction, attribute_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_UnionTransaction, insert_nil_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_UnionTransaction, insert_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_UnionTransaction, char_delta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_UnionTransaction, paragraph_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_UnionTransaction, object_dolc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_UnionTransaction, ct_date_),
  };
  UndoTransaction_UnionTransaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UndoTransaction_UnionTransaction_descriptor_,
      UndoTransaction_UnionTransaction::default_instance_,
      UndoTransaction_UnionTransaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_UnionTransaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransaction_UnionTransaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UndoTransaction_UnionTransaction));
  UndoTransaction_UndoKind_descriptor_ = UndoTransaction_descriptor_->enum_type(0);
  UndoTransactionWrapperArchive_descriptor_ = file->message_type(30);
  static const int UndoTransactionWrapperArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransactionWrapperArchive, undo_transaction_),
  };
  UndoTransactionWrapperArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UndoTransactionWrapperArchive_descriptor_,
      UndoTransactionWrapperArchive::default_instance_,
      UndoTransactionWrapperArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransactionWrapperArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoTransactionWrapperArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UndoTransactionWrapperArchive));
  ShapeInfoArchive_descriptor_ = file->message_type(31);
  static const int ShapeInfoArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeInfoArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeInfoArchive, containedstorage_),
  };
  ShapeInfoArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShapeInfoArchive_descriptor_,
      ShapeInfoArchive::default_instance_,
      ShapeInfoArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeInfoArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeInfoArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShapeInfoArchive));
  CommentInfoArchive_descriptor_ = file->message_type(32);
  static const int CommentInfoArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentInfoArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentInfoArchive, comment_storage_),
  };
  CommentInfoArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommentInfoArchive_descriptor_,
      CommentInfoArchive::default_instance_,
      CommentInfoArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentInfoArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentInfoArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommentInfoArchive));
  TOCInfoArchive_descriptor_ = file->message_type(33);
  static const int TOCInfoArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCInfoArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCInfoArchive, toc_settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCInfoArchive, toc_entry_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCInfoArchive, page_number_ranges_),
  };
  TOCInfoArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TOCInfoArchive_descriptor_,
      TOCInfoArchive::default_instance_,
      TOCInfoArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCInfoArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCInfoArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TOCInfoArchive));
  TOCLayoutHintArchive_descriptor_ = file->message_type(34);
  static const int TOCLayoutHintArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCLayoutHintArchive, charrange_),
  };
  TOCLayoutHintArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TOCLayoutHintArchive_descriptor_,
      TOCLayoutHintArchive::default_instance_,
      TOCLayoutHintArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCLayoutHintArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCLayoutHintArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TOCLayoutHintArchive));
  TextualAttachmentArchive_descriptor_ = file->message_type(35);
  static const int TextualAttachmentArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextualAttachmentArchive, string_equivalent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextualAttachmentArchive, kind_),
  };
  TextualAttachmentArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TextualAttachmentArchive_descriptor_,
      TextualAttachmentArchive::default_instance_,
      TextualAttachmentArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextualAttachmentArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextualAttachmentArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TextualAttachmentArchive));
  TextualAttachmentArchive_Kind_descriptor_ = TextualAttachmentArchive_descriptor_->enum_type(0);
  TSWPTOCPageNumberAttachmentArchive_descriptor_ = file->message_type(36);
  static const int TSWPTOCPageNumberAttachmentArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSWPTOCPageNumberAttachmentArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSWPTOCPageNumberAttachmentArchive, page_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSWPTOCPageNumberAttachmentArchive, bookmark_name_),
  };
  TSWPTOCPageNumberAttachmentArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSWPTOCPageNumberAttachmentArchive_descriptor_,
      TSWPTOCPageNumberAttachmentArchive::default_instance_,
      TSWPTOCPageNumberAttachmentArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSWPTOCPageNumberAttachmentArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSWPTOCPageNumberAttachmentArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSWPTOCPageNumberAttachmentArchive));
  UIGraphicalAttachment_descriptor_ = file->message_type(37);
  static const int UIGraphicalAttachment_offsets_[1] = {
  };
  UIGraphicalAttachment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UIGraphicalAttachment_descriptor_,
      UIGraphicalAttachment::default_instance_,
      UIGraphicalAttachment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIGraphicalAttachment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIGraphicalAttachment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UIGraphicalAttachment));
  DrawableAttachmentArchive_descriptor_ = file->message_type(38);
  static const int DrawableAttachmentArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableAttachmentArchive, drawable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableAttachmentArchive, h_offset_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableAttachmentArchive, h_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableAttachmentArchive, v_offset_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableAttachmentArchive, v_offset_),
  };
  DrawableAttachmentArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DrawableAttachmentArchive_descriptor_,
      DrawableAttachmentArchive::default_instance_,
      DrawableAttachmentArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableAttachmentArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableAttachmentArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DrawableAttachmentArchive));
  TOCAttachmentArchive_descriptor_ = file->message_type(39);
  static const int TOCAttachmentArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCAttachmentArchive, super_),
  };
  TOCAttachmentArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TOCAttachmentArchive_descriptor_,
      TOCAttachmentArchive::default_instance_,
      TOCAttachmentArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCAttachmentArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCAttachmentArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TOCAttachmentArchive));
  FootnoteReferenceAttachmentArchive_descriptor_ = file->message_type(40);
  static const int FootnoteReferenceAttachmentArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FootnoteReferenceAttachmentArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FootnoteReferenceAttachmentArchive, contained_storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FootnoteReferenceAttachmentArchive, custom_mark_string_),
  };
  FootnoteReferenceAttachmentArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FootnoteReferenceAttachmentArchive_descriptor_,
      FootnoteReferenceAttachmentArchive::default_instance_,
      FootnoteReferenceAttachmentArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FootnoteReferenceAttachmentArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FootnoteReferenceAttachmentArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FootnoteReferenceAttachmentArchive));
  NumberAttachmentArchive_descriptor_ = file->message_type(41);
  static const int NumberAttachmentArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumberAttachmentArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumberAttachmentArchive, number_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumberAttachmentArchive, string_value_),
  };
  NumberAttachmentArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NumberAttachmentArchive_descriptor_,
      NumberAttachmentArchive::default_instance_,
      NumberAttachmentArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumberAttachmentArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumberAttachmentArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NumberAttachmentArchive));
  SmartFieldArchive_descriptor_ = file->message_type(42);
  static const int SmartFieldArchive_offsets_[1] = {
  };
  SmartFieldArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SmartFieldArchive_descriptor_,
      SmartFieldArchive::default_instance_,
      SmartFieldArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmartFieldArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmartFieldArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SmartFieldArchive));
  HyperlinkFieldArchive_descriptor_ = file->message_type(43);
  static const int HyperlinkFieldArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HyperlinkFieldArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HyperlinkFieldArchive, url_ref_),
  };
  HyperlinkFieldArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HyperlinkFieldArchive_descriptor_,
      HyperlinkFieldArchive::default_instance_,
      HyperlinkFieldArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HyperlinkFieldArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HyperlinkFieldArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HyperlinkFieldArchive));
  PlaceholderSmartFieldArchive_descriptor_ = file->message_type(44);
  static const int PlaceholderSmartFieldArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceholderSmartFieldArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceholderSmartFieldArchive, localizable_),
  };
  PlaceholderSmartFieldArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlaceholderSmartFieldArchive_descriptor_,
      PlaceholderSmartFieldArchive::default_instance_,
      PlaceholderSmartFieldArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceholderSmartFieldArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceholderSmartFieldArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlaceholderSmartFieldArchive));
  UnsupportedHyperlinkFieldArchive_descriptor_ = file->message_type(45);
  static const int UnsupportedHyperlinkFieldArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsupportedHyperlinkFieldArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsupportedHyperlinkFieldArchive, url_ref_),
  };
  UnsupportedHyperlinkFieldArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnsupportedHyperlinkFieldArchive_descriptor_,
      UnsupportedHyperlinkFieldArchive::default_instance_,
      UnsupportedHyperlinkFieldArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsupportedHyperlinkFieldArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsupportedHyperlinkFieldArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnsupportedHyperlinkFieldArchive));
  BibliographySmartFieldArchive_descriptor_ = file->message_type(46);
  static const int BibliographySmartFieldArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BibliographySmartFieldArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BibliographySmartFieldArchive, citation_records_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BibliographySmartFieldArchive, localizable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BibliographySmartFieldArchive, old_super_),
  };
  BibliographySmartFieldArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BibliographySmartFieldArchive_descriptor_,
      BibliographySmartFieldArchive::default_instance_,
      BibliographySmartFieldArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BibliographySmartFieldArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BibliographySmartFieldArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BibliographySmartFieldArchive));
  CitationRecordArchive_descriptor_ = file->message_type(47);
  static const int CitationRecordArchive_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CitationRecordArchive, endnote_xml_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CitationRecordArchive, hide_author_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CitationRecordArchive, hide_year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CitationRecordArchive, page_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CitationRecordArchive, prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CitationRecordArchive, suffix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CitationRecordArchive, authors_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CitationRecordArchive, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CitationRecordArchive, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CitationRecordArchive, type_),
  };
  CitationRecordArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CitationRecordArchive_descriptor_,
      CitationRecordArchive::default_instance_,
      CitationRecordArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CitationRecordArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CitationRecordArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CitationRecordArchive));
  CitationSmartFieldArchive_descriptor_ = file->message_type(48);
  static const int CitationSmartFieldArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CitationSmartFieldArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CitationSmartFieldArchive, citation_records_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CitationSmartFieldArchive, localizable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CitationSmartFieldArchive, old_super_),
  };
  CitationSmartFieldArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CitationSmartFieldArchive_descriptor_,
      CitationSmartFieldArchive::default_instance_,
      CitationSmartFieldArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CitationSmartFieldArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CitationSmartFieldArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CitationSmartFieldArchive));
  DateTimeSmartFieldArchive_descriptor_ = file->message_type(49);
  static const int DateTimeSmartFieldArchive_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTimeSmartFieldArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTimeSmartFieldArchive, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTimeSmartFieldArchive, locale_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTimeSmartFieldArchive, date_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTimeSmartFieldArchive, time_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTimeSmartFieldArchive, update_plan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTimeSmartFieldArchive, needs_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTimeSmartFieldArchive, date_),
  };
  DateTimeSmartFieldArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DateTimeSmartFieldArchive_descriptor_,
      DateTimeSmartFieldArchive::default_instance_,
      DateTimeSmartFieldArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTimeSmartFieldArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateTimeSmartFieldArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DateTimeSmartFieldArchive));
  DateTimeSmartFieldArchive_DateTimeUpdatePlan_descriptor_ = DateTimeSmartFieldArchive_descriptor_->enum_type(0);
  DateTimeSmartFieldArchive_DateTimeFormatterStyle_descriptor_ = DateTimeSmartFieldArchive_descriptor_->enum_type(1);
  BookmarkFieldArchive_descriptor_ = file->message_type(50);
  static const int BookmarkFieldArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookmarkFieldArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookmarkFieldArchive, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookmarkFieldArchive, ranged_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookmarkFieldArchive, hidden_),
  };
  BookmarkFieldArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BookmarkFieldArchive_descriptor_,
      BookmarkFieldArchive::default_instance_,
      BookmarkFieldArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookmarkFieldArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookmarkFieldArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BookmarkFieldArchive));
  FilenameSmartFieldArchive_descriptor_ = file->message_type(51);
  static const int FilenameSmartFieldArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilenameSmartFieldArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilenameSmartFieldArchive, display_flags_),
  };
  FilenameSmartFieldArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FilenameSmartFieldArchive_descriptor_,
      FilenameSmartFieldArchive::default_instance_,
      FilenameSmartFieldArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilenameSmartFieldArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilenameSmartFieldArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FilenameSmartFieldArchive));
  MergeSmartFieldArchive_descriptor_ = file->message_type(52);
  static const int MergeSmartFieldArchive_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeSmartFieldArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeSmartFieldArchive, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeSmartFieldArchive, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeSmartFieldArchive, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeSmartFieldArchive, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeSmartFieldArchive, requires_following_whitespace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeSmartFieldArchive, whitespace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeSmartFieldArchive, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeSmartFieldArchive, table_field_),
  };
  MergeSmartFieldArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MergeSmartFieldArchive_descriptor_,
      MergeSmartFieldArchive::default_instance_,
      MergeSmartFieldArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeSmartFieldArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeSmartFieldArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MergeSmartFieldArchive));
  MergeSmartFieldArchive_MergeCategory_descriptor_ = MergeSmartFieldArchive_descriptor_->enum_type(0);
  TOCSmartFieldArchive_descriptor_ = file->message_type(53);
  static const int TOCSmartFieldArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCSmartFieldArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCSmartFieldArchive, toc_entries_),
  };
  TOCSmartFieldArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TOCSmartFieldArchive_descriptor_,
      TOCSmartFieldArchive::default_instance_,
      TOCSmartFieldArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCSmartFieldArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCSmartFieldArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TOCSmartFieldArchive));
  TOCSmartFieldArchive_TOCEntry_descriptor_ = TOCSmartFieldArchive_descriptor_->nested_type(0);
  static const int TOCSmartFieldArchive_TOCEntry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCSmartFieldArchive_TOCEntry, bookmark_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCSmartFieldArchive_TOCEntry, target_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCSmartFieldArchive_TOCEntry, range_),
  };
  TOCSmartFieldArchive_TOCEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TOCSmartFieldArchive_TOCEntry_descriptor_,
      TOCSmartFieldArchive_TOCEntry::default_instance_,
      TOCSmartFieldArchive_TOCEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCSmartFieldArchive_TOCEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOCSmartFieldArchive_TOCEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TOCSmartFieldArchive_TOCEntry));
  RubyFieldArchive_descriptor_ = file->message_type(54);
  static const int RubyFieldArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RubyFieldArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RubyFieldArchive, ruby_text_),
  };
  RubyFieldArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RubyFieldArchive_descriptor_,
      RubyFieldArchive::default_instance_,
      RubyFieldArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RubyFieldArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RubyFieldArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RubyFieldArchive));
  ChangeArchive_descriptor_ = file->message_type(55);
  static const int ChangeArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeArchive, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeArchive, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeArchive, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeArchive, hidden_),
  };
  ChangeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeArchive_descriptor_,
      ChangeArchive::default_instance_,
      ChangeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeArchive));
  ChangeArchive_ChangeKind_descriptor_ = ChangeArchive_descriptor_->enum_type(0);
  ChangeSessionArchive_descriptor_ = file->message_type(56);
  static const int ChangeSessionArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSessionArchive, session_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSessionArchive, author_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSessionArchive, date_),
  };
  ChangeSessionArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeSessionArchive_descriptor_,
      ChangeSessionArchive::default_instance_,
      ChangeSessionArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSessionArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSessionArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeSessionArchive));
  SectionPlaceholderArchive_descriptor_ = file->message_type(57);
  static const int SectionPlaceholderArchive_offsets_[1] = {
  };
  SectionPlaceholderArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SectionPlaceholderArchive_descriptor_,
      SectionPlaceholderArchive::default_instance_,
      SectionPlaceholderArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionPlaceholderArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionPlaceholderArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SectionPlaceholderArchive));
  SelectionType_descriptor_ = file->enum_type(0);
  StyleInsertionBehavior_descriptor_ = file->enum_type(1);
  CaretAffinity_descriptor_ = file->enum_type(2);
  WritingDirectionType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TSWPArchives_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelectionArchive_descriptor_, &SelectionArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectAttributeTable_descriptor_, &ObjectAttributeTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectAttributeTable_ObjectAttribute_descriptor_, &ObjectAttributeTable_ObjectAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringAttributeTable_descriptor_, &StringAttributeTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringAttributeTable_StringAttribute_descriptor_, &StringAttributeTable_StringAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParaDataAttributeTable_descriptor_, &ParaDataAttributeTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParaDataAttributeTable_ParaDataAttribute_descriptor_, &ParaDataAttributeTable_ParaDataAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SparseObjectAttributeTable_descriptor_, &SparseObjectAttributeTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SparseObjectAttributeTable_SparseObjectAttribute_descriptor_, &SparseObjectAttributeTable_SparseObjectAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StorageArchive_descriptor_, &StorageArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HighlightArchive_descriptor_, &HighlightArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FontFeatureArchive_descriptor_, &FontFeatureArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterStylePropertiesArchive_descriptor_, &CharacterStylePropertiesArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterStyleArchive_descriptor_, &CharacterStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TabArchive_descriptor_, &TabArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TabsArchive_descriptor_, &TabsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LineSpacingArchive_descriptor_, &LineSpacingArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParagraphStylePropertiesArchive_descriptor_, &ParagraphStylePropertiesArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParagraphStyleArchive_descriptor_, &ParagraphStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListStyleArchive_descriptor_, &ListStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListStyleArchive_LabelGeometry_descriptor_, &ListStyleArchive_LabelGeometry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListStyleArchive_LabelImage_descriptor_, &ListStyleArchive_LabelImage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TextStylePresetArchive_descriptor_, &TextStylePresetArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColumnsArchive_descriptor_, &ColumnsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColumnsArchive_EqualColumnsArchive_descriptor_, &ColumnsArchive_EqualColumnsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColumnsArchive_NonEqualColumnsArchive_descriptor_, &ColumnsArchive_NonEqualColumnsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive_descriptor_, &ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PaddingArchive_descriptor_, &PaddingArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColumnStylePropertiesArchive_descriptor_, &ColumnStylePropertiesArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColumnStyleArchive_descriptor_, &ColumnStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShapeStylePropertiesArchive_descriptor_, &ShapeStylePropertiesArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShapeStyleArchive_descriptor_, &ShapeStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThemePresetsArchive_descriptor_, &ThemePresetsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TextPresetDisplayItemArchive_descriptor_, &TextPresetDisplayItemArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TOCEntryStylePropertiesArchive_descriptor_, &TOCEntryStylePropertiesArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TOCEntryStyleArchive_descriptor_, &TOCEntryStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TOCSettingsArchive_descriptor_, &TOCSettingsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TOCSettingsArchive_TOCEntryData_descriptor_, &TOCSettingsArchive_TOCEntryData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TOCEntryInstanceArchive_descriptor_, &TOCEntryInstanceArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UndoTransaction_descriptor_, &UndoTransaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UndoTransaction_GenericTransaction_descriptor_, &UndoTransaction_GenericTransaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UndoTransaction_TextTransaction_descriptor_, &UndoTransaction_TextTransaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UndoTransaction_CharIndexTransaction_descriptor_, &UndoTransaction_CharIndexTransaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UndoTransaction_ReplaceCharIndexTransaction_descriptor_, &UndoTransaction_ReplaceCharIndexTransaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UndoTransaction_AttributeIndexTransaction_descriptor_, &UndoTransaction_AttributeIndexTransaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UndoTransaction_InsertAttributeTransaction_descriptor_, &UndoTransaction_InsertAttributeTransaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UndoTransaction_InsertNilTransaction_descriptor_, &UndoTransaction_InsertNilTransaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UndoTransaction_CharDeltaTransaction_descriptor_, &UndoTransaction_CharDeltaTransaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UndoTransaction_ParagraphDataTransaction_descriptor_, &UndoTransaction_ParagraphDataTransaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UndoTransaction_ObjectDOLCTransaction_descriptor_, &UndoTransaction_ObjectDOLCTransaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UndoTransaction_CTDateTransaction_descriptor_, &UndoTransaction_CTDateTransaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UndoTransaction_UnionTransaction_descriptor_, &UndoTransaction_UnionTransaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UndoTransactionWrapperArchive_descriptor_, &UndoTransactionWrapperArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShapeInfoArchive_descriptor_, &ShapeInfoArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommentInfoArchive_descriptor_, &CommentInfoArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TOCInfoArchive_descriptor_, &TOCInfoArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TOCLayoutHintArchive_descriptor_, &TOCLayoutHintArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TextualAttachmentArchive_descriptor_, &TextualAttachmentArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSWPTOCPageNumberAttachmentArchive_descriptor_, &TSWPTOCPageNumberAttachmentArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UIGraphicalAttachment_descriptor_, &UIGraphicalAttachment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DrawableAttachmentArchive_descriptor_, &DrawableAttachmentArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TOCAttachmentArchive_descriptor_, &TOCAttachmentArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FootnoteReferenceAttachmentArchive_descriptor_, &FootnoteReferenceAttachmentArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NumberAttachmentArchive_descriptor_, &NumberAttachmentArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SmartFieldArchive_descriptor_, &SmartFieldArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HyperlinkFieldArchive_descriptor_, &HyperlinkFieldArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlaceholderSmartFieldArchive_descriptor_, &PlaceholderSmartFieldArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnsupportedHyperlinkFieldArchive_descriptor_, &UnsupportedHyperlinkFieldArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BibliographySmartFieldArchive_descriptor_, &BibliographySmartFieldArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CitationRecordArchive_descriptor_, &CitationRecordArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CitationSmartFieldArchive_descriptor_, &CitationSmartFieldArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DateTimeSmartFieldArchive_descriptor_, &DateTimeSmartFieldArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BookmarkFieldArchive_descriptor_, &BookmarkFieldArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FilenameSmartFieldArchive_descriptor_, &FilenameSmartFieldArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MergeSmartFieldArchive_descriptor_, &MergeSmartFieldArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TOCSmartFieldArchive_descriptor_, &TOCSmartFieldArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TOCSmartFieldArchive_TOCEntry_descriptor_, &TOCSmartFieldArchive_TOCEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RubyFieldArchive_descriptor_, &RubyFieldArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeArchive_descriptor_, &ChangeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeSessionArchive_descriptor_, &ChangeSessionArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SectionPlaceholderArchive_descriptor_, &SectionPlaceholderArchive::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TSWPArchives_2eproto() {
  delete SelectionArchive::default_instance_;
  delete SelectionArchive_reflection_;
  delete ObjectAttributeTable::default_instance_;
  delete ObjectAttributeTable_reflection_;
  delete ObjectAttributeTable_ObjectAttribute::default_instance_;
  delete ObjectAttributeTable_ObjectAttribute_reflection_;
  delete StringAttributeTable::default_instance_;
  delete StringAttributeTable_reflection_;
  delete StringAttributeTable_StringAttribute::default_instance_;
  delete StringAttributeTable_StringAttribute_reflection_;
  delete ParaDataAttributeTable::default_instance_;
  delete ParaDataAttributeTable_reflection_;
  delete ParaDataAttributeTable_ParaDataAttribute::default_instance_;
  delete ParaDataAttributeTable_ParaDataAttribute_reflection_;
  delete SparseObjectAttributeTable::default_instance_;
  delete SparseObjectAttributeTable_reflection_;
  delete SparseObjectAttributeTable_SparseObjectAttribute::default_instance_;
  delete SparseObjectAttributeTable_SparseObjectAttribute_reflection_;
  delete StorageArchive::default_instance_;
  delete StorageArchive_reflection_;
  delete HighlightArchive::default_instance_;
  delete HighlightArchive_reflection_;
  delete FontFeatureArchive::default_instance_;
  delete FontFeatureArchive_reflection_;
  delete CharacterStylePropertiesArchive::default_instance_;
  delete CharacterStylePropertiesArchive_reflection_;
  delete CharacterStyleArchive::default_instance_;
  delete CharacterStyleArchive_reflection_;
  delete TabArchive::default_instance_;
  delete TabArchive_reflection_;
  delete TabsArchive::default_instance_;
  delete TabsArchive_reflection_;
  delete LineSpacingArchive::default_instance_;
  delete LineSpacingArchive_reflection_;
  delete ParagraphStylePropertiesArchive::default_instance_;
  delete ParagraphStylePropertiesArchive_reflection_;
  delete ParagraphStyleArchive::default_instance_;
  delete ParagraphStyleArchive_reflection_;
  delete ListStyleArchive::default_instance_;
  delete ListStyleArchive_reflection_;
  delete ListStyleArchive_LabelGeometry::default_instance_;
  delete ListStyleArchive_LabelGeometry_reflection_;
  delete ListStyleArchive_LabelImage::default_instance_;
  delete ListStyleArchive_LabelImage_reflection_;
  delete TextStylePresetArchive::default_instance_;
  delete TextStylePresetArchive_reflection_;
  delete ColumnsArchive::default_instance_;
  delete ColumnsArchive_reflection_;
  delete ColumnsArchive_EqualColumnsArchive::default_instance_;
  delete ColumnsArchive_EqualColumnsArchive_reflection_;
  delete ColumnsArchive_NonEqualColumnsArchive::default_instance_;
  delete ColumnsArchive_NonEqualColumnsArchive_reflection_;
  delete ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::default_instance_;
  delete ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive_reflection_;
  delete PaddingArchive::default_instance_;
  delete PaddingArchive_reflection_;
  delete ColumnStylePropertiesArchive::default_instance_;
  delete ColumnStylePropertiesArchive_reflection_;
  delete ColumnStyleArchive::default_instance_;
  delete ColumnStyleArchive_reflection_;
  delete ShapeStylePropertiesArchive::default_instance_;
  delete ShapeStylePropertiesArchive_reflection_;
  delete ShapeStyleArchive::default_instance_;
  delete ShapeStyleArchive_reflection_;
  delete ThemePresetsArchive::default_instance_;
  delete ThemePresetsArchive_reflection_;
  delete TextPresetDisplayItemArchive::default_instance_;
  delete TextPresetDisplayItemArchive_reflection_;
  delete TOCEntryStylePropertiesArchive::default_instance_;
  delete TOCEntryStylePropertiesArchive_reflection_;
  delete TOCEntryStyleArchive::default_instance_;
  delete TOCEntryStyleArchive_reflection_;
  delete TOCSettingsArchive::default_instance_;
  delete TOCSettingsArchive_reflection_;
  delete TOCSettingsArchive_TOCEntryData::default_instance_;
  delete TOCSettingsArchive_TOCEntryData_reflection_;
  delete TOCEntryInstanceArchive::default_instance_;
  delete TOCEntryInstanceArchive_reflection_;
  delete UndoTransaction::default_instance_;
  delete UndoTransaction_reflection_;
  delete UndoTransaction_GenericTransaction::default_instance_;
  delete UndoTransaction_GenericTransaction_reflection_;
  delete UndoTransaction_TextTransaction::default_instance_;
  delete UndoTransaction_TextTransaction_reflection_;
  delete UndoTransaction_CharIndexTransaction::default_instance_;
  delete UndoTransaction_CharIndexTransaction_reflection_;
  delete UndoTransaction_ReplaceCharIndexTransaction::default_instance_;
  delete UndoTransaction_ReplaceCharIndexTransaction_reflection_;
  delete UndoTransaction_AttributeIndexTransaction::default_instance_;
  delete UndoTransaction_AttributeIndexTransaction_reflection_;
  delete UndoTransaction_InsertAttributeTransaction::default_instance_;
  delete UndoTransaction_InsertAttributeTransaction_reflection_;
  delete UndoTransaction_InsertNilTransaction::default_instance_;
  delete UndoTransaction_InsertNilTransaction_reflection_;
  delete UndoTransaction_CharDeltaTransaction::default_instance_;
  delete UndoTransaction_CharDeltaTransaction_reflection_;
  delete UndoTransaction_ParagraphDataTransaction::default_instance_;
  delete UndoTransaction_ParagraphDataTransaction_reflection_;
  delete UndoTransaction_ObjectDOLCTransaction::default_instance_;
  delete UndoTransaction_ObjectDOLCTransaction_reflection_;
  delete UndoTransaction_CTDateTransaction::default_instance_;
  delete UndoTransaction_CTDateTransaction_reflection_;
  delete UndoTransaction_UnionTransaction::default_instance_;
  delete UndoTransaction_UnionTransaction_reflection_;
  delete UndoTransactionWrapperArchive::default_instance_;
  delete UndoTransactionWrapperArchive_reflection_;
  delete ShapeInfoArchive::default_instance_;
  delete ShapeInfoArchive_reflection_;
  delete CommentInfoArchive::default_instance_;
  delete CommentInfoArchive_reflection_;
  delete TOCInfoArchive::default_instance_;
  delete TOCInfoArchive_reflection_;
  delete TOCLayoutHintArchive::default_instance_;
  delete TOCLayoutHintArchive_reflection_;
  delete TextualAttachmentArchive::default_instance_;
  delete TextualAttachmentArchive_reflection_;
  delete TSWPTOCPageNumberAttachmentArchive::default_instance_;
  delete TSWPTOCPageNumberAttachmentArchive_reflection_;
  delete UIGraphicalAttachment::default_instance_;
  delete UIGraphicalAttachment_reflection_;
  delete DrawableAttachmentArchive::default_instance_;
  delete DrawableAttachmentArchive_reflection_;
  delete TOCAttachmentArchive::default_instance_;
  delete TOCAttachmentArchive_reflection_;
  delete FootnoteReferenceAttachmentArchive::default_instance_;
  delete FootnoteReferenceAttachmentArchive_reflection_;
  delete NumberAttachmentArchive::default_instance_;
  delete NumberAttachmentArchive_reflection_;
  delete SmartFieldArchive::default_instance_;
  delete SmartFieldArchive_reflection_;
  delete HyperlinkFieldArchive::default_instance_;
  delete HyperlinkFieldArchive_reflection_;
  delete PlaceholderSmartFieldArchive::default_instance_;
  delete PlaceholderSmartFieldArchive_reflection_;
  delete UnsupportedHyperlinkFieldArchive::default_instance_;
  delete UnsupportedHyperlinkFieldArchive_reflection_;
  delete BibliographySmartFieldArchive::default_instance_;
  delete BibliographySmartFieldArchive_reflection_;
  delete CitationRecordArchive::default_instance_;
  delete CitationRecordArchive_reflection_;
  delete CitationSmartFieldArchive::default_instance_;
  delete CitationSmartFieldArchive_reflection_;
  delete DateTimeSmartFieldArchive::default_instance_;
  delete DateTimeSmartFieldArchive_reflection_;
  delete BookmarkFieldArchive::default_instance_;
  delete BookmarkFieldArchive_reflection_;
  delete FilenameSmartFieldArchive::default_instance_;
  delete FilenameSmartFieldArchive_reflection_;
  delete MergeSmartFieldArchive::default_instance_;
  delete MergeSmartFieldArchive_reflection_;
  delete TOCSmartFieldArchive::default_instance_;
  delete TOCSmartFieldArchive_reflection_;
  delete TOCSmartFieldArchive_TOCEntry::default_instance_;
  delete TOCSmartFieldArchive_TOCEntry_reflection_;
  delete RubyFieldArchive::default_instance_;
  delete RubyFieldArchive_reflection_;
  delete ChangeArchive::default_instance_;
  delete ChangeArchive_reflection_;
  delete ChangeSessionArchive::default_instance_;
  delete ChangeSessionArchive_reflection_;
  delete SectionPlaceholderArchive::default_instance_;
  delete SectionPlaceholderArchive_reflection_;
}

void protobuf_AddDesc_TSWPArchives_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::TSP::protobuf_AddDesc_TSPMessages_2eproto();
  ::TSS::protobuf_AddDesc_TSSArchives_2eproto();
  ::TSD::protobuf_AddDesc_TSDArchives_2eproto();
  ::TSK::protobuf_AddDesc_TSKArchives_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022TSWPArchives.proto\022\004TSWP\032\021TSPMessages."
    "proto\032\021TSSArchives.proto\032\021TSDArchives.pr"
    "oto\032\021TSKArchives.proto\"\341\001\n\020SelectionArch"
    "ive\022!\n\004type\030\001 \002(\0162\023.TSWP.SelectionType\022\031"
    "\n\005range\030\002 \002(\0132\n.TSP.Range\022<\n\026styleInsert"
    "ionBehavior\030\003 \002(\0162\034.TSWP.StyleInsertionB"
    "ehavior\022*\n\rcaretAffinity\030\004 \002(\0162\023.TSWP.Ca"
    "retAffinity\022%\n\021smart_field_range\030\005 \002(\0132\n"
    ".TSP.Range\"\237\001\n\024ObjectAttributeTable\022;\n\007e"
    "ntries\030\001 \003(\0132*.TSWP.ObjectAttributeTable"
    ".ObjectAttribute\032J\n\017ObjectAttribute\022\027\n\017c"
    "haracter_index\030\001 \002(\r\022\036\n\006object\030\002 \001(\0132\016.T"
    "SP.Reference\"\217\001\n\024StringAttributeTable\022;\n"
    "\007entries\030\001 \003(\0132*.TSWP.StringAttributeTab"
    "le.StringAttribute\032:\n\017StringAttribute\022\027\n"
    "\017character_index\030\001 \002(\r\022\016\n\006object\030\002 \001(\t\"\246"
    "\001\n\026ParaDataAttributeTable\022\?\n\007entries\030\001 \003"
    "(\0132..TSWP.ParaDataAttributeTable.ParaDat"
    "aAttribute\032K\n\021ParaDataAttribute\022\027\n\017chara"
    "cter_index\030\001 \002(\r\022\r\n\005first\030\002 \002(\r\022\016\n\006secon"
    "d\030\003 \002(\r\"\340\001\n\032SparseObjectAttributeTable\022\023"
    "\n\013total_count\030\001 \002(\r\022G\n\007entries\030\002 \003(\01326.T"
    "SWP.SparseObjectAttributeTable.SparseObj"
    "ectAttribute\032d\n\025SparseObjectAttribute\022\027\n"
    "\017character_index\030\001 \002(\r\022\036\n\006object\030\002 \001(\0132\016"
    ".TSP.Reference\022\022\n\nrun_length\030\003 \002(\r\"\353\t\n\016S"
    "torageArchive\0224\n\004kind\030\001 \001(\0162\035.TSWP.Stora"
    "geArchive.KindType:\007TEXTBOX\022#\n\013style_she"
    "et\030\002 \001(\0132\016.TSP.Reference\022\014\n\004text\030\003 \003(\t\022\030"
    "\n\thas_itext\030\004 \001(\010:\005false\022\032\n\013in_document\030"
    "\n \001(\010:\005false\0224\n\020table_para_style\030\005 \001(\0132\032"
    ".TSWP.ObjectAttributeTable\0225\n\017table_para"
    "_data\030\006 \001(\0132\034.TSWP.ParaDataAttributeTabl"
    "e\0224\n\020table_list_style\030\007 \001(\0132\032.TSWP.Objec"
    "tAttributeTable\0224\n\020table_char_style\030\010 \001("
    "\0132\032.TSWP.ObjectAttributeTable\0224\n\020table_a"
    "ttachment\030\t \001(\0132\032.TSWP.ObjectAttributeTa"
    "ble\0224\n\020table_smartfield\030\013 \001(\0132\032.TSWP.Obj"
    "ectAttributeTable\0226\n\022table_layout_style\030"
    "\014 \001(\0132\032.TSWP.ObjectAttributeTable\0227\n\021tab"
    "le_para_starts\030\016 \001(\0132\034.TSWP.ParaDataAttr"
    "ibuteTable\0222\n\016table_bookmark\030\017 \001(\0132\032.TSW"
    "P.ObjectAttributeTable\0222\n\016table_footnote"
    "\030\020 \001(\0132\032.TSWP.ObjectAttributeTable\0221\n\rta"
    "ble_section\030\021 \001(\0132\032.TSWP.ObjectAttribute"
    "Table\0223\n\017table_rubyfield\030\022 \001(\0132\032.TSWP.Ob"
    "jectAttributeTable\0222\n\016table_language\030\023 \001"
    "(\0132\032.TSWP.StringAttributeTable\0223\n\017table_"
    "dictation\030\024 \001(\0132\032.TSWP.StringAttributeTa"
    "ble\0223\n\017table_insertion\030\025 \001(\0132\032.TSWP.Obje"
    "ctAttributeTable\0222\n\016table_deletion\030\026 \001(\013"
    "2\032.TSWP.ObjectAttributeTable\0223\n\017table_hi"
    "ghlight\030\027 \001(\0132\032.TSWP.ObjectAttributeTabl"
    "e\0225\n\017table_para_bidi\030\030 \001(\0132\034.TSWP.ParaDa"
    "taAttributeTable\"v\n\010KindType\022\010\n\004BODY\020\000\022\n"
    "\n\006HEADER\020\001\022\014\n\010FOOTNOTE\020\002\022\013\n\007TEXTBOX\020\003\022\010\n"
    "\004NOTE\020\004\022\010\n\004CELL\020\005\022\020\n\014UNCLASSIFIED\020\006\022\023\n\017T"
    "ABLEOFCONTENTS\020\007\":\n\020HighlightArchive\022&\n\016"
    "commentStorage\030\001 \001(\0132\016.TSP.Reference\"D\n\022"
    "FontFeatureArchive\022\024\n\014feature_type\030\001 \002(\r"
    "\022\030\n\020feature_selector\030\002 \002(\r\"\231\016\n\037Character"
    "StylePropertiesArchive\022\014\n\004bold\030\001 \001(\010\022\016\n\006"
    "italic\030\002 \001(\010\022\021\n\tfont_size\030\003 \001(\002\022\026\n\016font_"
    "name_null\030\004 \001(\010\022\021\n\tfont_name\030\005 \001(\t\022\027\n\017fo"
    "nt_color_null\030\006 \001(\010\022\036\n\nfont_color\030\007 \001(\0132"
    "\n.TSP.Color\022\025\n\rlanguage_null\030\010 \001(\010\022\020\n\010la"
    "nguage\030\t \001(\t\022J\n\013superscript\030\n \001(\01625.TSWP"
    ".CharacterStylePropertiesArchive.Supersc"
    "riptType\022F\n\tunderline\030\013 \001(\01623.TSWP.Chara"
    "cterStylePropertiesArchive.UnderlineType"
    "\022H\n\nstrikethru\030\014 \001(\01624.TSWP.CharacterSty"
    "lePropertiesArchive.StrikethruType\022P\n\016ca"
    "pitalization\030\r \001(\01628.TSWP.CharacterStyle"
    "PropertiesArchive.CapitalizationType\022\026\n\016"
    "baseline_shift\030\016 \001(\002\022\017\n\007kerning\030\017 \001(\002\022F\n"
    "\tligatures\030\020 \001(\01623.TSWP.CharacterStylePr"
    "opertiesArchive.LigaturesType\022\032\n\022outline"
    "_color_null\030\021 \001(\010\022!\n\routline_color\030\022 \001(\013"
    "2\n.TSP.Color\022\017\n\007outline\030\023 \001(\002\022\023\n\013shadow_"
    "null\030\024 \001(\010\022\"\n\006shadow\030\025 \001(\0132\022.TSD.ShadowA"
    "rchive\022\035\n\025strikethru_color_null\030\026 \001(\010\022$\n"
    "\020strikethru_color\030\027 \001(\0132\n.TSP.Color\022\030\n\020s"
    "trikethru_width\030\030 \001(\002\022\035\n\025background_colo"
    "r_null\030\031 \001(\010\022$\n\020background_color\030\032 \001(\0132\n"
    ".TSP.Color\022\020\n\010tracking\030\033 \001(\002\022\034\n\024underlin"
    "e_color_null\030\034 \001(\010\022#\n\017underline_color\030\035 "
    "\001(\0132\n.TSP.Color\022\027\n\017underline_width\030\036 \001(\002"
    "\022\027\n\017word_strikethru\030\037 \001(\010\022\026\n\016word_underl"
    "ine\030  \001(\010\022\032\n\022font_features_null\030! \001(\010\022/\n"
    "\rfont_features\030\" \003(\0132\030.TSWP.FontFeatureA"
    "rchive\022O\n\021writing_direction\030# \001(\0162\032.TSWP"
    ".WritingDirectionType:\030kWritingDirection"
    "Natural\022\033\n\023emphasis_marks_null\030$ \001(\010\022\026\n\016"
    "emphasis_marks\030% \001(\t\022$\n\034compatibility_fo"
    "nt_name_null\030& \001(\010\022\037\n\027compatibility_font"
    "_name\030\' \001(\t\"L\n\022CapitalizationType\022\013\n\007kNo"
    "Caps\020\000\022\014\n\010kAllCaps\020\001\022\016\n\nkSmallCaps\020\002\022\013\n\007"
    "kTitled\020\003\"a\n\rUnderlineType\022\020\n\014kNoUnderli"
    "ne\020\000\022\024\n\020kSingleUnderline\020\001\022\024\n\020kDoubleUnd"
    "erline\020\002\022\022\n\016kWavyUnderline\020\003\"R\n\rLigature"
    "sType\022\026\n\022kRequiredLigatures\020\000\022\026\n\022kStanda"
    "rdLigatures\020\001\022\021\n\rkAllLigatures\020\002\"h\n\016Stri"
    "kethruType\022\021\n\rkNoStrikethru\020\000\022\025\n\021kSingle"
    "Strikethru\020\001\022\025\n\021kDoubleStrikethru\020\002\022\025\n\021k"
    "TripleStrikethru\020\003\"B\n\017SuperscriptType\022\r\n"
    "\tkNoScript\020\000\022\020\n\014kSuperscript\020\001\022\016\n\nkSubsc"
    "ript\020\002\"\224\001\n\025CharacterStyleArchive\022 \n\005supe"
    "r\030\001 \002(\0132\021.TSS.StyleArchive\022\031\n\016override_c"
    "ount\030\n \001(\r:\0010\022>\n\017char_properties\030\013 \001(\0132%"
    ".TSWP.CharacterStylePropertiesArchive\"\332\001"
    "\n\nTabArchive\022\020\n\010position\030\001 \001(\002\0224\n\talignm"
    "ent\030\002 \001(\0162!.TSWP.TabArchive.TabAlignment"
    "Type\022\016\n\006leader\030\003 \001(\t\"t\n\020TabAlignmentType"
    "\022\025\n\021kTabAlignmentLeft\020\000\022\027\n\023kTabAlignment"
    "Center\020\001\022\026\n\022kTabAlignmentRight\020\002\022\030\n\024kTab"
    "AlignmentDecimal\020\003\"-\n\013TabsArchive\022\036\n\004tab"
    "s\030\001 \003(\0132\020.TSWP.TabArchive\"\217\002\n\022LineSpacin"
    "gArchive\022:\n\004mode\030\001 \001(\0162,.TSWP.LineSpacin"
    "gArchive.LineSpacingModeType\022\016\n\006amount\030\002"
    " \001(\002\022\024\n\014baselineRule\030\003 \001(\002\"\226\001\n\023LineSpaci"
    "ngModeType\022\030\n\024kRelativeLineSpacing\020\000\022\027\n\023"
    "kMinimumLineSpacing\020\001\022\025\n\021kExactLineSpaci"
    "ng\020\002\022\027\n\023kMaximumLineSpacing\020\003\022\034\n\030kSpaceB"
    "etweenLineSpacing\020\004\"\343\013\n\037ParagraphStylePr"
    "opertiesArchive\022J\n\talignment\030\001 \001(\01627.TSW"
    "P.ParagraphStylePropertiesArchive.TextAl"
    "ignmentType\022\030\n\020decimal_tab_null\030\002 \001(\010\022\023\n"
    "\013decimal_tab\030\003 \001(\t\022\031\n\021default_tab_stops\030"
    "\004 \001(\002\022\021\n\tfill_null\030\005 \001(\010\022\030\n\004fill\030\006 \001(\0132\n"
    ".TSP.Color\022\031\n\021first_line_indent\030\007 \001(\002\022\021\n"
    "\thyphenate\030\010 \001(\010\022\033\n\023keep_lines_together\030"
    "\t \001(\010\022\026\n\016keep_with_next\030\n \001(\010\022\023\n\013left_in"
    "dent\030\013 \001(\002\022\031\n\021line_spacing_null\030\014 \001(\010\022.\n"
    "\014line_spacing\030\r \001(\0132\030.TSWP.LineSpacingAr"
    "chive\022\031\n\021page_break_before\030\016 \001(\010\022J\n\007bord"
    "ers\030\017 \001(\01629.TSWP.ParagraphStylePropertie"
    "sArchive.ParagraphBorderType\022\030\n\020rule_off"
    "set_null\030\020 \001(\010\022\037\n\013rule_offset\030\021 \001(\0132\n.TS"
    "P.Point\022\022\n\nrule_width\030\022 \001(\002\022\024\n\014right_ind"
    "ent\030\023 \001(\002\022\023\n\013space_after\030\024 \001(\002\022\024\n\014space_"
    "before\030\025 \001(\002\022\021\n\ttabs_null\030\030 \001(\010\022\037\n\004tabs\030"
    "\031 \001(\0132\021.TSWP.TabsArchive\022\025\n\rwidow_contro"
    "l\030\032 \001(\010\022\025\n\routline_level\030\033 \001(\r\022M\n\routlin"
    "e_style\030\034 \001(\01626.TSWP.ParagraphStylePrope"
    "rtiesArchive.OutlineStyleType\022\037\n\027followi"
    "ng_style_id_null\030\035 \001(\010\022\032\n\022following_styl"
    "e_id\030\036 \001(\t\022\023\n\013stroke_null\030\037 \001(\010\022\"\n\006strok"
    "e\030  \001(\0132\022.TSD.StrokeArchive\022\023\n\013show_in_t"
    "oc\030! \001(\010\022\031\n\021toc_style_id_null\030\" \001(\010\022\024\n\014t"
    "oc_style_id\030# \001(\t\022O\n\021writing_direction\030&"
    " \001(\0162\032.TSWP.WritingDirectionType:\030kWriti"
    "ngDirectionNatural\022\027\n\017list_style_null\030\' "
    "\001(\010\022\"\n\nlist_style\030( \001(\0132\016.TSP.Reference\022"
    "\034\n\024following_style_null\030) \001(\010\022\'\n\017followi"
    "ng_style\030* \001(\0132\016.TSP.Reference\"^\n\021TextAl"
    "ignmentType\022\r\n\tTATvalue0\020\000\022\r\n\tTATvalue1\020"
    "\001\022\r\n\tTATvalue2\020\002\022\r\n\tTATvalue3\020\003\022\r\n\tTATva"
    "lue4\020\004\"`\n\023ParagraphBorderType\022\r\n\tPBTvalu"
    "e0\020\000\022\r\n\tPBTvalue1\020\001\022\r\n\tPBTvalue2\020\002\022\r\n\tPB"
    "Tvalue3\020\003\022\r\n\tPBTvalue4\020\004\"\?\n\020OutlineStyle"
    "Type\022\r\n\tOSTvalue0\020\000\022\r\n\tOSTvalue1\020\001\022\r\n\tOS"
    "Tvalue2\020\002\"\324\001\n\025ParagraphStyleArchive\022 \n\005s"
    "uper\030\001 \002(\0132\021.TSS.StyleArchive\022\031\n\016overrid"
    "e_count\030\n \001(\r:\0010\022>\n\017char_properties\030\013 \001("
    "\0132%.TSWP.CharacterStylePropertiesArchive"
    "\022>\n\017para_properties\030\014 \001(\0132%.TSWP.Paragra"
    "phStylePropertiesArchive\"\360\030\n\020ListStyleAr"
    "chive\022 \n\005super\030\001 \002(\0132\021.TSS.StyleArchive\022"
    "\031\n\016override_count\030\n \001(\r:\0010\0225\n\013label_type"
    "s\030\013 \003(\0162 .TSWP.ListStyleArchive.LabelTyp"
    "e\022\024\n\014text_indents\030\014 \003(\002\022\017\n\007indents\030\r \003(\002"
    "\0228\n\ngeometries\030\016 \003(\0132$.TSWP.ListStyleArc"
    "hive.LabelGeometry\0227\n\014number_types\030\017 \003(\016"
    "2!.TSWP.ListStyleArchive.NumberType\022\017\n\007s"
    "trings\030\020 \003(\t\0221\n\006images\030\021 \003(\0132!.TSWP.List"
    "StyleArchive.LabelImage\022\023\n\013shadow_null\030\022"
    " \001(\010\022\"\n\006shadow\030\023 \001(\0132\022.TSD.ShadowArchive"
    "\022\027\n\017font_color_null\030\024 \001(\010\022\036\n\nfont_color\030"
    "\025 \001(\0132\n.TSP.Color\022\026\n\016font_name_null\030\026 \001("
    "\010\022\021\n\tfont_name\030\027 \001(\t\022O\n\021writing_directio"
    "n\030\030 \001(\0162\032.TSWP.WritingDirectionType:\030kWr"
    "itingDirectionNatural\022\026\n\016tiered_numbers\030"
    "\031 \003(\010\032\\\n\rLabelGeometry\022\020\n\005scale\030\001 \001(\002:\0011"
    "\022\032\n\017baseline_offset\030\002 \001(\002:\0010\022\035\n\017scale_wi"
    "th_text\030\003 \001(\010:\004true\032k\n\nLabelImage\022!\n\005ima"
    "ge\030\003 \001(\0132\022.TSP.DataReference\022\022\n\nimage_nu"
    "ll\030\002 \001(\010\022&\n\016database_image\030\001 \001(\0132\016.TSP.R"
    "eference\"<\n\tLabelType\022\t\n\005kNone\020\000\022\n\n\006kIma"
    "ge\020\001\022\013\n\007kString\020\002\022\013\n\007kNumber\020\003\"\372\021\n\nNumbe"
    "rType\022\023\n\017kNumericDecimal\020\000\022\027\n\023kNumericDo"
    "ubleParen\020\001\022\026\n\022kNumericRightParen\020\002\022\026\n\022k"
    "RomanUpperDecimal\020\003\022\032\n\026kRomanUpperDouble"
    "Paren\020\004\022\031\n\025kRomanUpperRightParen\020\005\022\026\n\022kR"
    "omanLowerDecimal\020\006\022\032\n\026kRomanLowerDoubleP"
    "aren\020\007\022\031\n\025kRomanLowerRightParen\020\010\022\026\n\022kAl"
    "phaUpperDecimal\020\t\022\032\n\026kAlphaUpperDoublePa"
    "ren\020\n\022\031\n\025kAlphaUpperRightParen\020\013\022\026\n\022kAlp"
    "haLowerDecimal\020\014\022\032\n\026kAlphaLowerDoublePar"
    "en\020\r\022\031\n\025kAlphaLowerRightParen\020\016\022#\n\037kIdeo"
    "graphicJapaneseDecimalKind\020\017\022\'\n#kIdeogra"
    "phicJapaneseDoubleParenKind\020\020\022&\n\"kIdeogr"
    "aphicJapaneseRightParenKind\020\021\022\030\n\024kHiraga"
    "naDecimalKind\020\022\022\034\n\030kHiraganaDoubleParenK"
    "ind\020\023\022\033\n\027kHiraganaRightParenKind\020\024\022\030\n\024kK"
    "atakanaDecimalKind\020\025\022\034\n\030kKatakanaDoubleP"
    "arenKind\020\026\022\033\n\027kKatakanaRightParenKind\020\027\022"
    "\035\n\031kHiraganaIrohaDecimalKind\020\030\022!\n\035kHirag"
    "anaIrohaDoubleParenKind\020\031\022 \n\034kHiraganaIr"
    "ohaRightParenKind\020\032\022\035\n\031kKatakanaIrohaDec"
    "imalKind\020\033\022!\n\035kKatakanaIrohaDoubleParenK"
    "ind\020\034\022 \n\034kKatakanaIrohaRightParenKind\020\035\022"
    ",\n(kIdeographicSimplifiedChineseDecimalK"
    "ind\020\036\0220\n,kIdeographicSimplifiedChineseDo"
    "ubleParenKind\020\037\022/\n+kIdeographicSimplifie"
    "dChineseRightParenKind\020 \022-\n)kIdeographic"
    "TraditionalChineseDecimalKind\020!\0221\n-kIdeo"
    "graphicTraditionalChineseDoubleParenKind"
    "\020\"\0220\n,kIdeographicTraditionalChineseRigh"
    "tParenKind\020#\022)\n%kIdeographicFormalJapane"
    "seDecimalKind\020$\022-\n)kIdeographicFormalJap"
    "aneseDoubleParenKind\020%\022,\n(kIdeographicFo"
    "rmalJapaneseRightParenKind\020&\0222\n.kIdeogra"
    "phicFormalSimplifiedChineseDecimalKind\020\'"
    "\0226\n2kIdeographicFormalSimplifiedChineseD"
    "oubleParenKind\020(\0225\n1kIdeographicFormalSi"
    "mplifiedChineseRightParenKind\020)\0223\n/kIdeo"
    "graphicFormalTraditionalChineseDecimalKi"
    "nd\020*\0227\n3kIdeographicFormalTraditionalChi"
    "neseDoubleParenKind\020+\0226\n2kIdeographicFor"
    "malTraditionalChineseRightParenKind\020,\022\036\n"
    "\032kKoreanAlphabetDecimalKind\020-\022\"\n\036kKorean"
    "AlphabetDoubleParenKind\020.\022!\n\035kKoreanAlph"
    "abetRightParenKind\020/\022\026\n\022kCircledNumberKi"
    "nd\0200\022\036\n\032kArabianNumericDecimalKind\0201\022\"\n\036"
    "kArabianNumericDoubleParenKind\0202\022!\n\035kAra"
    "bianNumericRightParenKind\0203\022\034\n\030kArabianA"
    "lphaDecimalKind\0204\022 \n\034kArabianAlphaDouble"
    "ParenKind\0205\022\037\n\033kArabianAlphaRightParenKi"
    "nd\0206\022\034\n\030kArabianAbjadDecimalKind\0207\022 \n\034kA"
    "rabianAbjadDoubleParenKind\0208\022\037\n\033kArabian"
    "AbjadRightParenKind\0209\022\033\n\027kHebrewAlphaDec"
    "imalKind\020:\022\037\n\033kHebrewAlphaDoubleParenKin"
    "d\020;\022\036\n\032kHebrewAlphaRightParenKind\020<\022\037\n\033k"
    "HebrewBiblicalStandardKind\020=\022\036\n\032kHebrewB"
    "iblicalDecimalKind\020>\022\"\n\036kHebrewBiblicalD"
    "oubleParenKind\020\?\022!\n\035kHebrewBiblicalRight"
    "ParenKind\020@\"\200\001\n\026TextStylePresetArchive\022\031"
    "\n\021preset_identifier\030\001 \001(\t\022\'\n\017paragraph_s"
    "tyle\030\002 \001(\0132\016.TSP.Reference\022\"\n\nlist_style"
    "\030\003 \001(\0132\016.TSP.Reference\"\365\002\n\016ColumnsArchiv"
    "e\022\?\n\requal_columns\030\001 \001(\0132(.TSWP.ColumnsA"
    "rchive.EqualColumnsArchive\022F\n\021non_equal_"
    "columns\030\002 \001(\0132+.TSWP.ColumnsArchive.NonE"
    "qualColumnsArchive\0321\n\023EqualColumnsArchiv"
    "e\022\r\n\005count\030\001 \001(\r\022\013\n\003gap\030\002 \001(\002\032\246\001\n\026NonEqu"
    "alColumnsArchive\022\r\n\005first\030\001 \002(\002\022N\n\tfollo"
    "wing\030\002 \003(\0132;.TSWP.ColumnsArchive.NonEqua"
    "lColumnsArchive.GapWidthArchive\032-\n\017GapWi"
    "dthArchive\022\013\n\003gap\030\001 \002(\002\022\r\n\005width\030\002 \002(\002\"J"
    "\n\016PaddingArchive\022\014\n\004left\030\001 \001(\002\022\013\n\003top\030\002 "
    "\001(\002\022\r\n\005right\030\003 \001(\002\022\016\n\006bottom\030\004 \001(\002\"\317\004\n\034C"
    "olumnStylePropertiesArchive\022\022\n\ncontinuou"
    "s\030\001 \001(\010\022\025\n\rshrink_to_fit\030\002 \001(\010\022\025\n\rvertic"
    "al_text\030\003 \001(\010\022\034\n\024min_horizontal_inset\030\004 "
    "\001(\002\022T\n\022vertical_alignment\030\005 \001(\01628.TSWP.C"
    "olumnStylePropertiesArchive.VerticalAlig"
    "nmentType\022\024\n\014columns_null\030\006 \001(\010\022%\n\007colum"
    "ns\030\007 \001(\0132\024.TSWP.ColumnsArchive\022\024\n\014margin"
    "s_null\030\010 \001(\010\022%\n\007margins\030\t \001(\0132\024.TSWP.Pad"
    "dingArchive\022\024\n\014padding_null\030\n \001(\010\022%\n\007pad"
    "ding\030\013 \001(\0132\024.TSWP.PaddingArchive\022O\n\021writ"
    "ing_direction\030\014 \001(\0162\032.TSWP.WritingDirect"
    "ionType:\030kWritingDirectionNatural\"q\n\025Ver"
    "ticalAlignmentType\022\022\n\016kFrameAlignTop\020\000\022\025"
    "\n\021kFrameAlignMiddle\020\001\022\025\n\021kFrameAlignBott"
    "om\020\002\022\026\n\022kFrameAlignJustify\020\003\"\220\001\n\022ColumnS"
    "tyleArchive\022 \n\005super\030\001 \002(\0132\021.TSS.StyleAr"
    "chive\022\031\n\016override_count\030\n \001(\r:\0010\022=\n\021colu"
    "mn_properties\030\013 \001(\0132\".TSWP.ColumnStylePr"
    "opertiesArchive\"\367\003\n\033ShapeStyleProperties"
    "Archive\022\025\n\rshrink_to_fit\030\001 \001(\010\022S\n\022vertic"
    "al_alignment\030\002 \001(\01627.TSWP.ShapeStyleProp"
    "ertiesArchive.VerticalAlignmentType\022\024\n\014c"
    "olumns_null\030\003 \001(\010\022%\n\007columns\030\004 \001(\0132\024.TSW"
    "P.ColumnsArchive\022\024\n\014padding_null\030\005 \001(\010\022%"
    "\n\007padding\030\006 \001(\0132\024.TSWP.PaddingArchive\022!\n"
    "\031default_text_preset_index\030\007 \001(\r\022\025\n\rvert"
    "ical_text\030\010 \001(\010\022\034\n\024paragraph_style_null\030"
    "\t \001(\010\022\'\n\017paragraph_style\030\n \001(\0132\016.TSP.Ref"
    "erence\"q\n\025VerticalAlignmentType\022\022\n\016kFram"
    "eAlignTop\020\000\022\025\n\021kFrameAlignMiddle\020\001\022\025\n\021kF"
    "rameAlignBottom\020\002\022\026\n\022kFrameAlignJustify\020"
    "\003\"\222\001\n\021ShapeStyleArchive\022%\n\005super\030\001 \002(\0132\026"
    ".TSD.ShapeStyleArchive\022\031\n\016override_count"
    "\030\n \001(\r:\0010\022;\n\020shape_properties\030\013 \001(\0132!.TS"
    "WP.ShapeStylePropertiesArchive\"\244\003\n\023Theme"
    "PresetsArchive\022*\n\022list_style_presets\030\001 \003"
    "(\0132\016.TSP.Reference\022*\n\022text_style_presets"
    "\030\002 \003(\0132\016.TSP.Reference\0223\n\033imported_text_"
    "style_presets\030\003 \003(\0132\016.TSP.Reference\022/\n\027t"
    "oc_entry_style_presets\030\004 \003(\0132\016.TSP.Refer"
    "ence\022,\n\024toc_settings_presets\030\005 \003(\0132\016.TSP"
    ".Reference\022/\n\027character_style_presets\030\006 "
    "\003(\0132\016.TSP.Reference\022/\n\027paragraph_style_p"
    "resets\030\007 \003(\0132\016.TSP.Reference2\?\n\textensio"
    "n\022\021.TSS.ThemeArchive\030n \002(\0132\031.TSWP.ThemeP"
    "resetsArchive\"T\n\034TextPresetDisplayItemAr"
    "chive\022\036\n\006preset\030\001 \002(\0132\016.TSP.Reference\022\024\n"
    "\014display_name\030\002 \002(\t\"\205\001\n\036TOCEntryStylePro"
    "pertiesArchive\022\036\n\026page_number_style_null"
    "\030\001 \001(\010\022)\n\021page_number_style\030\002 \001(\0132\016.TSP."
    "Reference\022\030\n\020show_page_number\030\003 \001(\010\"\200\001\n\024"
    "TOCEntryStyleArchive\022*\n\005super\030\001 \002(\0132\033.TS"
    "WP.ParagraphStyleArchive\022<\n\016toc_properti"
    "es\030\002 \001(\0132$.TSWP.TOCEntryStylePropertiesA"
    "rchive\"\350\001\n\022TOCSettingsArchive\022\020\n\010toc_nam"
    "e\030\001 \001(\t\022\021\n\ttoc_scope\030\002 \001(\r\0226\n\007entries\030\003 "
    "\003(\0132%.TSWP.TOCSettingsArchive.TOCEntryDa"
    "ta\032u\n\014TOCEntryData\022\'\n\017paragraph_style\030\001 "
    "\001(\0132\016.TSP.Reference\022\'\n\017toc_entry_style\030\002"
    " \001(\0132\016.TSP.Reference\022\023\n\013show_in_toc\030\003 \001("
    "\010\"\377\001\n\027TOCEntryInstanceArchive\022\027\n\017paragra"
    "ph_index\030\001 \002(\r\022\023\n\013page_number\030\002 \002(\r\022\025\n\rn"
    "umber_format\030\003 \002(\r\022\017\n\007heading\030\004 \002(\t\022%\n\ri"
    "ndexed_style\030\005 \002(\0132\016.TSP.Reference\022*\n\022in"
    "dexed_list_style\030\006 \001(\0132\016.TSP.Reference\022\032"
    "\n\022indexed_list_start\030\007 \001(\r\022\037\n\027indexed_pa"
    "ragraph_level\030\010 \001(\r\"\274\020\n\017UndoTransaction\022"
    "7\n\007entries\030\001 \003(\0132&.TSWP.UndoTransaction."
    "UnionTransaction\032D\n\022GenericTransaction\022\016"
    "\n\006value1\030\001 \002(\r\022\016\n\006value2\030\002 \002(\r\022\016\n\006value3"
    "\030\003 \002(\r\032[\n\017TextTransaction\022\027\n\017insert_loca"
    "tion\030\001 \002(\r\022\025\n\rinsert_length\030\002 \002(\r\022\030\n\020str"
    "ing_to_delete\030\003 \001(\t\032Y\n\024CharIndexTransact"
    "ion\022\022\n\nchar_index\030\001 \002(\r\022\r\n\005count\030\002 \002(\r\022\036"
    "\n\006object\030\003 \001(\0132\016.TSP.Reference\032J\n\033Replac"
    "eCharIndexTransaction\022\027\n\017attribute_index"
    "\030\001 \002(\r\022\022\n\nchar_index\030\002 \002(\r\032x\n\031AttributeI"
    "ndexTransaction\022\027\n\017attribute_index\030\001 \002(\r"
    "\022\022\n\nchar_index\030\002 \002(\r\022\036\n\006object\030\003 \001(\0132\016.T"
    "SP.Reference\022\016\n\006string\030\004 \001(\t\032~\n\032InsertAt"
    "tributeTransaction\022\027\n\017attribute_index\030\001 "
    "\002(\r\022\027\n\017attribute_count\030\002 \002(\r\022\036\n\006object\030\003"
    " \001(\0132\016.TSP.Reference\022\016\n\006string\030\004 \001(\t\032H\n\024"
    "InsertNilTransaction\022\027\n\017attribute_index\030"
    "\001 \002(\r\022\027\n\017attribute_count\030\002 \002(\r\032W\n\024CharDe"
    "ltaTransaction\022\022\n\nchar_index\030\001 \002(\r\022\027\n\017at"
    "tribute_index\030\002 \002(\r\022\022\n\nchar_delta\030\003 \002(\021\032"
    "f\n\030ParagraphDataTransaction\022\027\n\017attribute"
    "_index\030\001 \002(\r\022\r\n\005first\030\002 \002(\r\022\016\n\006second\030\003 "
    "\002(\r\022\022\n\nchar_index\030\004 \002(\r\032F\n\025ObjectDOLCTra"
    "nsaction\022\r\n\005flags\030\001 \002(\r\022\036\n\006object\030\002 \001(\0132"
    "\016.TSP.Reference\032E\n\021CTDateTransaction\022\027\n\017"
    "attribute_index\030\001 \002(\r\022\027\n\004date\030\002 \001(\0132\t.TS"
    "P.Date\032\250\006\n\020UnionTransaction\022,\n\004kind\030\001 \002("
    "\0162\036.TSWP.UndoTransaction.UndoKind\022\r\n\005tab"
    "le\030\002 \001(\r\0229\n\007generic\030\005 \001(\0132(.TSWP.UndoTra"
    "nsaction.GenericTransaction\0223\n\004text\030\006 \001("
    "\0132%.TSWP.UndoTransaction.TextTransaction"
    "\022>\n\nchar_index\030\007 \001(\0132*.TSWP.UndoTransact"
    "ion.CharIndexTransaction\022M\n\022replace_char"
    "_index\030\010 \001(\01321.TSWP.UndoTransaction.Repl"
    "aceCharIndexTransaction\022H\n\017attribute_ind"
    "ex\030\t \001(\0132/.TSWP.UndoTransaction.Attribut"
    "eIndexTransaction\022>\n\ninsert_nil\030\n \001(\0132*."
    "TSWP.UndoTransaction.InsertNilTransactio"
    "n\022J\n\020insert_attribute\030\013 \001(\01320.TSWP.UndoT"
    "ransaction.InsertAttributeTransaction\022>\n"
    "\nchar_delta\030\014 \001(\0132*.TSWP.UndoTransaction"
    ".CharDeltaTransaction\022F\n\016paragraph_data\030"
    "\r \001(\0132..TSWP.UndoTransaction.ParagraphDa"
    "taTransaction\022@\n\013object_dolc\030\016 \001(\0132+.TSW"
    "P.UndoTransaction.ObjectDOLCTransaction\022"
    "8\n\007ct_date\030\017 \001(\0132\'.TSWP.UndoTransaction."
    "CTDateTransaction\"\346\001\n\010UndoKind\022\020\n\014REPLAC"
    "E_TEXT\020\001\022\024\n\020INSERT_ATTRIBUTE\020\002\022\024\n\020DELETE"
    "_ATTRIBUTE\020\003\022\027\n\023ADJUST_CHAR_INDEXES\020\004\022\035\n"
    "\031COMPR_ADJUST_CHAR_INDEXES\020\005\022\026\n\022REPLACE_"
    "CHAR_INDEX\020\006\022\022\n\016REPLACE_OBJECT\020\007\022\032\n\026REPL"
    "ACE_PARAGRAPH_DATA\020\010\022\017\n\013OBJECT_DOLC\020\t\022\013\n"
    "\007CT_DATE\020\n\"P\n\035UndoTransactionWrapperArch"
    "ive\022/\n\020undo_transaction\030\001 \002(\0132\025.TSWP.Und"
    "oTransaction\"^\n\020ShapeInfoArchive\022 \n\005supe"
    "r\030\001 \002(\0132\021.TSD.ShapeArchive\022(\n\020containedS"
    "torage\030\002 \001(\0132\016.TSP.Reference\"d\n\022CommentI"
    "nfoArchive\022%\n\005super\030\001 \002(\0132\026.TSWP.ShapeIn"
    "foArchive\022\'\n\017comment_storage\030\002 \001(\0132\016.TSP"
    ".Reference\"\255\001\n\016TOCInfoArchive\022%\n\005super\030\001"
    " \002(\0132\026.TSWP.ShapeInfoArchive\022$\n\014toc_sett"
    "ings\030\002 \001(\0132\016.TSP.Reference\022&\n\016toc_entry_"
    "data\030\003 \003(\0132\016.TSP.Reference\022&\n\022page_numbe"
    "r_ranges\030\004 \003(\0132\n.TSP.Range\"5\n\024TOCLayoutH"
    "intArchive\022\035\n\tcharRange\030\001 \002(\0132\n.TSP.Rang"
    "e\"\260\001\n\030TextualAttachmentArchive\022\031\n\021string"
    "_equivalent\030\001 \001(\t\0221\n\004kind\030\002 \001(\0162#.TSWP.T"
    "extualAttachmentArchive.Kind\"F\n\004Kind\022\023\n\017"
    "kKindPageNumber\020\000\022\022\n\016kKindPageCount\020\001\022\025\n"
    "\021kKindFootnoteMark\020\002\"\177\n\"TSWPTOCPageNumbe"
    "rAttachmentArchive\022-\n\005super\030\001 \001(\0132\036.TSWP"
    ".TextualAttachmentArchive\022\023\n\013page_number"
    "\030\002 \001(\t\022\025\n\rbookmark_name\030\003 \001(\t\"\027\n\025UIGraph"
    "icalAttachment\"\217\001\n\031DrawableAttachmentArc"
    "hive\022 \n\010drawable\030\001 \001(\0132\016.TSP.Reference\022\025"
    "\n\rh_offset_type\030\002 \001(\r\022\020\n\010h_offset\030\003 \001(\002\022"
    "\025\n\rv_offset_type\030\004 \001(\r\022\020\n\010v_offset\030\005 \001(\002"
    "\"F\n\024TOCAttachmentArchive\022.\n\005super\030\001 \002(\0132"
    "\037.TSWP.DrawableAttachmentArchive\"\232\001\n\"Foo"
    "tnoteReferenceAttachmentArchive\022-\n\005super"
    "\030\001 \001(\0132\036.TSWP.TextualAttachmentArchive\022)"
    "\n\021contained_storage\030\002 \001(\0132\016.TSP.Referenc"
    "e\022\032\n\022custom_mark_string\030\003 \001(\t\"u\n\027NumberA"
    "ttachmentArchive\022-\n\005super\030\001 \001(\0132\036.TSWP.T"
    "extualAttachmentArchive\022\025\n\rnumber_format"
    "\030\002 \001(\r\022\024\n\014string_value\030\003 \001(\t\"\023\n\021SmartFie"
    "ldArchive\"P\n\025HyperlinkFieldArchive\022&\n\005su"
    "per\030\001 \001(\0132\027.TSWP.SmartFieldArchive\022\017\n\007ur"
    "l_ref\030\002 \001(\t\"[\n\034PlaceholderSmartFieldArch"
    "ive\022&\n\005super\030\001 \001(\0132\027.TSWP.SmartFieldArch"
    "ive\022\023\n\013localizable\030\002 \001(\010\"f\n UnsupportedH"
    "yperlinkFieldArchive\0221\n\005super\030\001 \001(\0132\".TS"
    "WP.PlaceholderSmartFieldArchive\022\017\n\007url_r"
    "ef\030\002 \001(\t\"\275\001\n\035BibliographySmartFieldArchi"
    "ve\022&\n\005super\030\003 \001(\0132\027.TSWP.SmartFieldArchi"
    "ve\022(\n\020citation_records\030\002 \003(\0132\016.TSP.Refer"
    "ence\022\023\n\013localizable\030\004 \001(\010\0225\n\told_super\030\001"
    " \001(\0132\".TSWP.PlaceholderSmartFieldArchive"
    "\"\321\001\n\025CitationRecordArchive\022\023\n\013endnote_xm"
    "l\030\001 \001(\t\022\031\n\021hide_author_names\030\002 \001(\010\022\021\n\thi"
    "de_year\030\003 \001(\010\022\022\n\npage_range\030\004 \001(\t\022\016\n\006pre"
    "fix\030\005 \001(\t\022\016\n\006suffix\030\006 \001(\t\022\026\n\016authors_str"
    "ing\030\007 \001(\t\022\r\n\005title\030\010 \001(\t\022\014\n\004year\030\t \001(\t\022\014"
    "\n\004type\030\n \001(\t\"\271\001\n\031CitationSmartFieldArchi"
    "ve\022&\n\005super\030\003 \001(\0132\027.TSWP.SmartFieldArchi"
    "ve\022(\n\020citation_records\030\002 \003(\0132\016.TSP.Refer"
    "ence\022\023\n\013localizable\030\004 \001(\010\0225\n\told_super\030\001"
    " \001(\0132\".TSWP.PlaceholderSmartFieldArchive"
    "\"\257\005\n\031DateTimeSmartFieldArchive\022&\n\005super\030"
    "\001 \001(\0132\027.TSWP.SmartFieldArchive\022\016\n\006format"
    "\030\002 \001(\t\022\031\n\021locale_identifier\030\003 \001(\t\022J\n\ndat"
    "e_style\030\004 \001(\01626.TSWP.DateTimeSmartFieldA"
    "rchive.DateTimeFormatterStyle\022J\n\ntime_st"
    "yle\030\005 \001(\01626.TSWP.DateTimeSmartFieldArchi"
    "ve.DateTimeFormatterStyle\022G\n\013update_plan"
    "\030\006 \001(\01622.TSWP.DateTimeSmartFieldArchive."
    "DateTimeUpdatePlan\022\024\n\014needs_update\030\007 \001(\010"
    "\022\027\n\004date\030\010 \001(\0132\t.TSP.Date\"l\n\022DateTimeUpd"
    "atePlan\022\034\n\030kDateTimeUpdatePlanNever\020\000\022\033\n"
    "\027kDateTimeUpdatePlanAuto\020\001\022\033\n\027kDateTimeU"
    "pdatePlanOnce\020\002\"\300\001\n\026DateTimeFormatterSty"
    "le\022\037\n\033kDateTimeFormatterStyleNone\020\000\022 \n\034k"
    "DateTimeFormatterStyleShort\020\001\022!\n\035kDateTi"
    "meFormatterStyleMedium\020\002\022\037\n\033kDateTimeFor"
    "matterStyleLong\020\003\022\037\n\033kDateTimeFormatterS"
    "tyleFull\020\004\"l\n\024BookmarkFieldArchive\022&\n\005su"
    "per\030\001 \001(\0132\027.TSWP.SmartFieldArchive\022\014\n\004na"
    "me\030\002 \001(\t\022\016\n\006ranged\030\003 \001(\r\022\016\n\006hidden\030\004 \001(\r"
    "\"e\n\031FilenameSmartFieldArchive\0221\n\005super\030\001"
    " \001(\0132\".TSWP.PlaceholderSmartFieldArchive"
    "\022\025\n\rdisplay_flags\030\002 \001(\r\"\324\002\n\026MergeSmartFi"
    "eldArchive\0221\n\005super\030\001 \001(\0132\".TSWP.Placeho"
    "lderSmartFieldArchive\022\020\n\010property\030\002 \001(\t\022"
    "\r\n\005label\030\003 \001(\t\022\013\n\003key\030\004 \001(\t\022<\n\010category\030"
    "\005 \001(\0162*.TSWP.MergeSmartFieldArchive.Merg"
    "eCategory\022%\n\035requires_following_whitespa"
    "ce\030\006 \001(\010\022\022\n\nwhitespace\030\007 \001(\t\022\014\n\004guid\030\010 \001"
    "(\t\022\023\n\013table_field\030\t \001(\t\"=\n\rMergeCategory"
    "\022\024\n\020kMergeCategoryTo\020\000\022\026\n\022kMergeCategory"
    "From\020\001\"\347\001\n\024TOCSmartFieldArchive\0221\n\005super"
    "\030\001 \001(\0132\".TSWP.PlaceholderSmartFieldArchi"
    "ve\0228\n\013toc_entries\030\002 \003(\0132#.TSWP.TOCSmartF"
    "ieldArchive.TOCEntry\032b\n\010TOCEntry\022\025\n\rbook"
    "mark_name\030\001 \001(\t\022$\n\014target_style\030\002 \001(\0132\016."
    "TSP.Reference\022\031\n\005range\030\003 \001(\0132\n.TSP.Range"
    "\"M\n\020RubyFieldArchive\022&\n\005super\030\001 \001(\0132\027.TS"
    "WP.SmartFieldArchive\022\021\n\truby_text\030\002 \001(\t\""
    "\310\001\n\rChangeArchive\022,\n\004kind\030\001 \001(\0162\036.TSWP.C"
    "hangeArchive.ChangeKind\022\037\n\007session\030\002 \001(\013"
    "2\016.TSP.Reference\022\027\n\004date\030\003 \001(\0132\t.TSP.Dat"
    "e\022\016\n\006hidden\030\004 \001(\010\"\?\n\nChangeKind\022\030\n\024kChan"
    "geKindInsertion\020\001\022\027\n\023kChangeKindDeletion"
    "\020\002\"d\n\024ChangeSessionArchive\022\023\n\013session_ui"
    "d\030\001 \001(\r\022\036\n\006author\030\002 \001(\0132\016.TSP.Reference\022"
    "\027\n\004date\030\003 \001(\0132\t.TSP.Date\"\033\n\031SectionPlace"
    "holderArchive*\364\001\n\rSelectionType\022\030\n\024Selec"
    "tionType_Normal\020\000\022\033\n\027SelectionType_ListL"
    "abel\020\001\022\033\n\027SelectionType_ListTopic\020\002\022\031\n\025S"
    "electionType_Replace\020\003\022 \n\034SelectionType_"
    "CopyPasteStyle\020\004\022\032\n\026SelectionType_Replac"
    "e2\020\005\022\034\n\030SelectionType_SmartField\020\006\022\030\n\024Se"
    "lectionType_Visual\020\007*\206\001\n\026StyleInsertionB"
    "ehavior\022!\n\035StyleInsertionBehavior_NoGrow"
    "\020\000\022#\n\037StyleInsertionBehavior_GrowLeft\020\001\022"
    "$\n StyleInsertionBehavior_GrowRight\020\002*\?\n"
    "\rCaretAffinity\022\027\n\023CaretAffinity_Start\020\000\022"
    "\025\n\021CaretAffinity_End\020\001*\201\001\n\024WritingDirect"
    "ionType\022%\n\030kWritingDirectionNatural\020\377\377\377\377"
    "\377\377\377\377\377\001\022 \n\034kWritingDirectionLeftToRight\020\000"
    "\022 \n\034kWritingDirectionRightToLeft\020\001", 19914);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TSWPArchives.proto", &protobuf_RegisterTypes);
  SelectionArchive::default_instance_ = new SelectionArchive();
  ObjectAttributeTable::default_instance_ = new ObjectAttributeTable();
  ObjectAttributeTable_ObjectAttribute::default_instance_ = new ObjectAttributeTable_ObjectAttribute();
  StringAttributeTable::default_instance_ = new StringAttributeTable();
  StringAttributeTable_StringAttribute::default_instance_ = new StringAttributeTable_StringAttribute();
  ParaDataAttributeTable::default_instance_ = new ParaDataAttributeTable();
  ParaDataAttributeTable_ParaDataAttribute::default_instance_ = new ParaDataAttributeTable_ParaDataAttribute();
  SparseObjectAttributeTable::default_instance_ = new SparseObjectAttributeTable();
  SparseObjectAttributeTable_SparseObjectAttribute::default_instance_ = new SparseObjectAttributeTable_SparseObjectAttribute();
  StorageArchive::default_instance_ = new StorageArchive();
  HighlightArchive::default_instance_ = new HighlightArchive();
  FontFeatureArchive::default_instance_ = new FontFeatureArchive();
  CharacterStylePropertiesArchive::default_instance_ = new CharacterStylePropertiesArchive();
  CharacterStyleArchive::default_instance_ = new CharacterStyleArchive();
  TabArchive::default_instance_ = new TabArchive();
  TabsArchive::default_instance_ = new TabsArchive();
  LineSpacingArchive::default_instance_ = new LineSpacingArchive();
  ParagraphStylePropertiesArchive::default_instance_ = new ParagraphStylePropertiesArchive();
  ParagraphStyleArchive::default_instance_ = new ParagraphStyleArchive();
  ListStyleArchive::default_instance_ = new ListStyleArchive();
  ListStyleArchive_LabelGeometry::default_instance_ = new ListStyleArchive_LabelGeometry();
  ListStyleArchive_LabelImage::default_instance_ = new ListStyleArchive_LabelImage();
  TextStylePresetArchive::default_instance_ = new TextStylePresetArchive();
  ColumnsArchive::default_instance_ = new ColumnsArchive();
  ColumnsArchive_EqualColumnsArchive::default_instance_ = new ColumnsArchive_EqualColumnsArchive();
  ColumnsArchive_NonEqualColumnsArchive::default_instance_ = new ColumnsArchive_NonEqualColumnsArchive();
  ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::default_instance_ = new ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive();
  PaddingArchive::default_instance_ = new PaddingArchive();
  ColumnStylePropertiesArchive::default_instance_ = new ColumnStylePropertiesArchive();
  ColumnStyleArchive::default_instance_ = new ColumnStyleArchive();
  ShapeStylePropertiesArchive::default_instance_ = new ShapeStylePropertiesArchive();
  ShapeStyleArchive::default_instance_ = new ShapeStyleArchive();
  ThemePresetsArchive::default_instance_ = new ThemePresetsArchive();
  TextPresetDisplayItemArchive::default_instance_ = new TextPresetDisplayItemArchive();
  TOCEntryStylePropertiesArchive::default_instance_ = new TOCEntryStylePropertiesArchive();
  TOCEntryStyleArchive::default_instance_ = new TOCEntryStyleArchive();
  TOCSettingsArchive::default_instance_ = new TOCSettingsArchive();
  TOCSettingsArchive_TOCEntryData::default_instance_ = new TOCSettingsArchive_TOCEntryData();
  TOCEntryInstanceArchive::default_instance_ = new TOCEntryInstanceArchive();
  UndoTransaction::default_instance_ = new UndoTransaction();
  UndoTransaction_GenericTransaction::default_instance_ = new UndoTransaction_GenericTransaction();
  UndoTransaction_TextTransaction::default_instance_ = new UndoTransaction_TextTransaction();
  UndoTransaction_CharIndexTransaction::default_instance_ = new UndoTransaction_CharIndexTransaction();
  UndoTransaction_ReplaceCharIndexTransaction::default_instance_ = new UndoTransaction_ReplaceCharIndexTransaction();
  UndoTransaction_AttributeIndexTransaction::default_instance_ = new UndoTransaction_AttributeIndexTransaction();
  UndoTransaction_InsertAttributeTransaction::default_instance_ = new UndoTransaction_InsertAttributeTransaction();
  UndoTransaction_InsertNilTransaction::default_instance_ = new UndoTransaction_InsertNilTransaction();
  UndoTransaction_CharDeltaTransaction::default_instance_ = new UndoTransaction_CharDeltaTransaction();
  UndoTransaction_ParagraphDataTransaction::default_instance_ = new UndoTransaction_ParagraphDataTransaction();
  UndoTransaction_ObjectDOLCTransaction::default_instance_ = new UndoTransaction_ObjectDOLCTransaction();
  UndoTransaction_CTDateTransaction::default_instance_ = new UndoTransaction_CTDateTransaction();
  UndoTransaction_UnionTransaction::default_instance_ = new UndoTransaction_UnionTransaction();
  UndoTransactionWrapperArchive::default_instance_ = new UndoTransactionWrapperArchive();
  ShapeInfoArchive::default_instance_ = new ShapeInfoArchive();
  CommentInfoArchive::default_instance_ = new CommentInfoArchive();
  TOCInfoArchive::default_instance_ = new TOCInfoArchive();
  TOCLayoutHintArchive::default_instance_ = new TOCLayoutHintArchive();
  TextualAttachmentArchive::default_instance_ = new TextualAttachmentArchive();
  TSWPTOCPageNumberAttachmentArchive::default_instance_ = new TSWPTOCPageNumberAttachmentArchive();
  UIGraphicalAttachment::default_instance_ = new UIGraphicalAttachment();
  DrawableAttachmentArchive::default_instance_ = new DrawableAttachmentArchive();
  TOCAttachmentArchive::default_instance_ = new TOCAttachmentArchive();
  FootnoteReferenceAttachmentArchive::default_instance_ = new FootnoteReferenceAttachmentArchive();
  NumberAttachmentArchive::default_instance_ = new NumberAttachmentArchive();
  SmartFieldArchive::default_instance_ = new SmartFieldArchive();
  HyperlinkFieldArchive::default_instance_ = new HyperlinkFieldArchive();
  PlaceholderSmartFieldArchive::default_instance_ = new PlaceholderSmartFieldArchive();
  UnsupportedHyperlinkFieldArchive::default_instance_ = new UnsupportedHyperlinkFieldArchive();
  BibliographySmartFieldArchive::default_instance_ = new BibliographySmartFieldArchive();
  CitationRecordArchive::default_instance_ = new CitationRecordArchive();
  CitationSmartFieldArchive::default_instance_ = new CitationSmartFieldArchive();
  DateTimeSmartFieldArchive::default_instance_ = new DateTimeSmartFieldArchive();
  BookmarkFieldArchive::default_instance_ = new BookmarkFieldArchive();
  FilenameSmartFieldArchive::default_instance_ = new FilenameSmartFieldArchive();
  MergeSmartFieldArchive::default_instance_ = new MergeSmartFieldArchive();
  TOCSmartFieldArchive::default_instance_ = new TOCSmartFieldArchive();
  TOCSmartFieldArchive_TOCEntry::default_instance_ = new TOCSmartFieldArchive_TOCEntry();
  RubyFieldArchive::default_instance_ = new RubyFieldArchive();
  ChangeArchive::default_instance_ = new ChangeArchive();
  ChangeSessionArchive::default_instance_ = new ChangeSessionArchive();
  SectionPlaceholderArchive::default_instance_ = new SectionPlaceholderArchive();
  SelectionArchive::default_instance_->InitAsDefaultInstance();
  ObjectAttributeTable::default_instance_->InitAsDefaultInstance();
  ObjectAttributeTable_ObjectAttribute::default_instance_->InitAsDefaultInstance();
  StringAttributeTable::default_instance_->InitAsDefaultInstance();
  StringAttributeTable_StringAttribute::default_instance_->InitAsDefaultInstance();
  ParaDataAttributeTable::default_instance_->InitAsDefaultInstance();
  ParaDataAttributeTable_ParaDataAttribute::default_instance_->InitAsDefaultInstance();
  SparseObjectAttributeTable::default_instance_->InitAsDefaultInstance();
  SparseObjectAttributeTable_SparseObjectAttribute::default_instance_->InitAsDefaultInstance();
  StorageArchive::default_instance_->InitAsDefaultInstance();
  HighlightArchive::default_instance_->InitAsDefaultInstance();
  FontFeatureArchive::default_instance_->InitAsDefaultInstance();
  CharacterStylePropertiesArchive::default_instance_->InitAsDefaultInstance();
  CharacterStyleArchive::default_instance_->InitAsDefaultInstance();
  TabArchive::default_instance_->InitAsDefaultInstance();
  TabsArchive::default_instance_->InitAsDefaultInstance();
  LineSpacingArchive::default_instance_->InitAsDefaultInstance();
  ParagraphStylePropertiesArchive::default_instance_->InitAsDefaultInstance();
  ParagraphStyleArchive::default_instance_->InitAsDefaultInstance();
  ListStyleArchive::default_instance_->InitAsDefaultInstance();
  ListStyleArchive_LabelGeometry::default_instance_->InitAsDefaultInstance();
  ListStyleArchive_LabelImage::default_instance_->InitAsDefaultInstance();
  TextStylePresetArchive::default_instance_->InitAsDefaultInstance();
  ColumnsArchive::default_instance_->InitAsDefaultInstance();
  ColumnsArchive_EqualColumnsArchive::default_instance_->InitAsDefaultInstance();
  ColumnsArchive_NonEqualColumnsArchive::default_instance_->InitAsDefaultInstance();
  ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::default_instance_->InitAsDefaultInstance();
  PaddingArchive::default_instance_->InitAsDefaultInstance();
  ColumnStylePropertiesArchive::default_instance_->InitAsDefaultInstance();
  ColumnStyleArchive::default_instance_->InitAsDefaultInstance();
  ShapeStylePropertiesArchive::default_instance_->InitAsDefaultInstance();
  ShapeStyleArchive::default_instance_->InitAsDefaultInstance();
  ThemePresetsArchive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::TSS::ThemeArchive::default_instance(),
    110, 11, false, false,
    &::TSWP::ThemePresetsArchive::default_instance());
  TextPresetDisplayItemArchive::default_instance_->InitAsDefaultInstance();
  TOCEntryStylePropertiesArchive::default_instance_->InitAsDefaultInstance();
  TOCEntryStyleArchive::default_instance_->InitAsDefaultInstance();
  TOCSettingsArchive::default_instance_->InitAsDefaultInstance();
  TOCSettingsArchive_TOCEntryData::default_instance_->InitAsDefaultInstance();
  TOCEntryInstanceArchive::default_instance_->InitAsDefaultInstance();
  UndoTransaction::default_instance_->InitAsDefaultInstance();
  UndoTransaction_GenericTransaction::default_instance_->InitAsDefaultInstance();
  UndoTransaction_TextTransaction::default_instance_->InitAsDefaultInstance();
  UndoTransaction_CharIndexTransaction::default_instance_->InitAsDefaultInstance();
  UndoTransaction_ReplaceCharIndexTransaction::default_instance_->InitAsDefaultInstance();
  UndoTransaction_AttributeIndexTransaction::default_instance_->InitAsDefaultInstance();
  UndoTransaction_InsertAttributeTransaction::default_instance_->InitAsDefaultInstance();
  UndoTransaction_InsertNilTransaction::default_instance_->InitAsDefaultInstance();
  UndoTransaction_CharDeltaTransaction::default_instance_->InitAsDefaultInstance();
  UndoTransaction_ParagraphDataTransaction::default_instance_->InitAsDefaultInstance();
  UndoTransaction_ObjectDOLCTransaction::default_instance_->InitAsDefaultInstance();
  UndoTransaction_CTDateTransaction::default_instance_->InitAsDefaultInstance();
  UndoTransaction_UnionTransaction::default_instance_->InitAsDefaultInstance();
  UndoTransactionWrapperArchive::default_instance_->InitAsDefaultInstance();
  ShapeInfoArchive::default_instance_->InitAsDefaultInstance();
  CommentInfoArchive::default_instance_->InitAsDefaultInstance();
  TOCInfoArchive::default_instance_->InitAsDefaultInstance();
  TOCLayoutHintArchive::default_instance_->InitAsDefaultInstance();
  TextualAttachmentArchive::default_instance_->InitAsDefaultInstance();
  TSWPTOCPageNumberAttachmentArchive::default_instance_->InitAsDefaultInstance();
  UIGraphicalAttachment::default_instance_->InitAsDefaultInstance();
  DrawableAttachmentArchive::default_instance_->InitAsDefaultInstance();
  TOCAttachmentArchive::default_instance_->InitAsDefaultInstance();
  FootnoteReferenceAttachmentArchive::default_instance_->InitAsDefaultInstance();
  NumberAttachmentArchive::default_instance_->InitAsDefaultInstance();
  SmartFieldArchive::default_instance_->InitAsDefaultInstance();
  HyperlinkFieldArchive::default_instance_->InitAsDefaultInstance();
  PlaceholderSmartFieldArchive::default_instance_->InitAsDefaultInstance();
  UnsupportedHyperlinkFieldArchive::default_instance_->InitAsDefaultInstance();
  BibliographySmartFieldArchive::default_instance_->InitAsDefaultInstance();
  CitationRecordArchive::default_instance_->InitAsDefaultInstance();
  CitationSmartFieldArchive::default_instance_->InitAsDefaultInstance();
  DateTimeSmartFieldArchive::default_instance_->InitAsDefaultInstance();
  BookmarkFieldArchive::default_instance_->InitAsDefaultInstance();
  FilenameSmartFieldArchive::default_instance_->InitAsDefaultInstance();
  MergeSmartFieldArchive::default_instance_->InitAsDefaultInstance();
  TOCSmartFieldArchive::default_instance_->InitAsDefaultInstance();
  TOCSmartFieldArchive_TOCEntry::default_instance_->InitAsDefaultInstance();
  RubyFieldArchive::default_instance_->InitAsDefaultInstance();
  ChangeArchive::default_instance_->InitAsDefaultInstance();
  ChangeSessionArchive::default_instance_->InitAsDefaultInstance();
  SectionPlaceholderArchive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TSWPArchives_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TSWPArchives_2eproto {
  StaticDescriptorInitializer_TSWPArchives_2eproto() {
    protobuf_AddDesc_TSWPArchives_2eproto();
  }
} static_descriptor_initializer_TSWPArchives_2eproto_;
const ::google::protobuf::EnumDescriptor* SelectionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectionType_descriptor_;
}
bool SelectionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StyleInsertionBehavior_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StyleInsertionBehavior_descriptor_;
}
bool StyleInsertionBehavior_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CaretAffinity_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaretAffinity_descriptor_;
}
bool CaretAffinity_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WritingDirectionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WritingDirectionType_descriptor_;
}
bool WritingDirectionType_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SelectionArchive::kTypeFieldNumber;
const int SelectionArchive::kRangeFieldNumber;
const int SelectionArchive::kStyleInsertionBehaviorFieldNumber;
const int SelectionArchive::kCaretAffinityFieldNumber;
const int SelectionArchive::kSmartFieldRangeFieldNumber;
#endif  // !_MSC_VER

SelectionArchive::SelectionArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SelectionArchive::InitAsDefaultInstance() {
  range_ = const_cast< ::TSP::Range*>(&::TSP::Range::default_instance());
  smart_field_range_ = const_cast< ::TSP::Range*>(&::TSP::Range::default_instance());
}

SelectionArchive::SelectionArchive(const SelectionArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SelectionArchive::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  range_ = NULL;
  styleinsertionbehavior_ = 0;
  caretaffinity_ = 0;
  smart_field_range_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelectionArchive::~SelectionArchive() {
  SharedDtor();
}

void SelectionArchive::SharedDtor() {
  if (this != default_instance_) {
    delete range_;
    delete smart_field_range_;
  }
}

void SelectionArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectionArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectionArchive_descriptor_;
}

const SelectionArchive& SelectionArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

SelectionArchive* SelectionArchive::default_instance_ = NULL;

SelectionArchive* SelectionArchive::New() const {
  return new SelectionArchive;
}

void SelectionArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_range()) {
      if (range_ != NULL) range_->::TSP::Range::Clear();
    }
    styleinsertionbehavior_ = 0;
    caretaffinity_ = 0;
    if (has_smart_field_range()) {
      if (smart_field_range_ != NULL) smart_field_range_->::TSP::Range::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelectionArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSWP.SelectionType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::SelectionType_IsValid(value)) {
            set_type(static_cast< ::TSWP::SelectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_range;
        break;
      }

      // required .TSP.Range range = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_styleInsertionBehavior;
        break;
      }

      // required .TSWP.StyleInsertionBehavior styleInsertionBehavior = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_styleInsertionBehavior:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::StyleInsertionBehavior_IsValid(value)) {
            set_styleinsertionbehavior(static_cast< ::TSWP::StyleInsertionBehavior >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_caretAffinity;
        break;
      }

      // required .TSWP.CaretAffinity caretAffinity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_caretAffinity:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::CaretAffinity_IsValid(value)) {
            set_caretaffinity(static_cast< ::TSWP::CaretAffinity >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_smart_field_range;
        break;
      }

      // required .TSP.Range smart_field_range = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_smart_field_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smart_field_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SelectionArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSWP.SelectionType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .TSP.Range range = 2;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->range(), output);
  }

  // required .TSWP.StyleInsertionBehavior styleInsertionBehavior = 3;
  if (has_styleinsertionbehavior()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->styleinsertionbehavior(), output);
  }

  // required .TSWP.CaretAffinity caretAffinity = 4;
  if (has_caretaffinity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->caretaffinity(), output);
  }

  // required .TSP.Range smart_field_range = 5;
  if (has_smart_field_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->smart_field_range(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SelectionArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSWP.SelectionType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .TSP.Range range = 2;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->range(), target);
  }

  // required .TSWP.StyleInsertionBehavior styleInsertionBehavior = 3;
  if (has_styleinsertionbehavior()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->styleinsertionbehavior(), target);
  }

  // required .TSWP.CaretAffinity caretAffinity = 4;
  if (has_caretaffinity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->caretaffinity(), target);
  }

  // required .TSP.Range smart_field_range = 5;
  if (has_smart_field_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->smart_field_range(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SelectionArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSWP.SelectionType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .TSP.Range range = 2;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->range());
    }

    // required .TSWP.StyleInsertionBehavior styleInsertionBehavior = 3;
    if (has_styleinsertionbehavior()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->styleinsertionbehavior());
    }

    // required .TSWP.CaretAffinity caretAffinity = 4;
    if (has_caretaffinity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->caretaffinity());
    }

    // required .TSP.Range smart_field_range = 5;
    if (has_smart_field_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->smart_field_range());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectionArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelectionArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelectionArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelectionArchive::MergeFrom(const SelectionArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_range()) {
      mutable_range()->::TSP::Range::MergeFrom(from.range());
    }
    if (from.has_styleinsertionbehavior()) {
      set_styleinsertionbehavior(from.styleinsertionbehavior());
    }
    if (from.has_caretaffinity()) {
      set_caretaffinity(from.caretaffinity());
    }
    if (from.has_smart_field_range()) {
      mutable_smart_field_range()->::TSP::Range::MergeFrom(from.smart_field_range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelectionArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectionArchive::CopyFrom(const SelectionArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectionArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_range()) {
    if (!this->range().IsInitialized()) return false;
  }
  if (has_smart_field_range()) {
    if (!this->smart_field_range().IsInitialized()) return false;
  }
  return true;
}

void SelectionArchive::Swap(SelectionArchive* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(range_, other->range_);
    std::swap(styleinsertionbehavior_, other->styleinsertionbehavior_);
    std::swap(caretaffinity_, other->caretaffinity_);
    std::swap(smart_field_range_, other->smart_field_range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelectionArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelectionArchive_descriptor_;
  metadata.reflection = SelectionArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectAttributeTable_ObjectAttribute::kCharacterIndexFieldNumber;
const int ObjectAttributeTable_ObjectAttribute::kObjectFieldNumber;
#endif  // !_MSC_VER

ObjectAttributeTable_ObjectAttribute::ObjectAttributeTable_ObjectAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectAttributeTable_ObjectAttribute::InitAsDefaultInstance() {
  object_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ObjectAttributeTable_ObjectAttribute::ObjectAttributeTable_ObjectAttribute(const ObjectAttributeTable_ObjectAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectAttributeTable_ObjectAttribute::SharedCtor() {
  _cached_size_ = 0;
  character_index_ = 0u;
  object_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectAttributeTable_ObjectAttribute::~ObjectAttributeTable_ObjectAttribute() {
  SharedDtor();
}

void ObjectAttributeTable_ObjectAttribute::SharedDtor() {
  if (this != default_instance_) {
    delete object_;
  }
}

void ObjectAttributeTable_ObjectAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectAttributeTable_ObjectAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectAttributeTable_ObjectAttribute_descriptor_;
}

const ObjectAttributeTable_ObjectAttribute& ObjectAttributeTable_ObjectAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

ObjectAttributeTable_ObjectAttribute* ObjectAttributeTable_ObjectAttribute::default_instance_ = NULL;

ObjectAttributeTable_ObjectAttribute* ObjectAttributeTable_ObjectAttribute::New() const {
  return new ObjectAttributeTable_ObjectAttribute;
}

void ObjectAttributeTable_ObjectAttribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    character_index_ = 0u;
    if (has_object()) {
      if (object_ != NULL) object_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectAttributeTable_ObjectAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 character_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_index_)));
          set_has_character_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_object;
        break;
      }

      // optional .TSP.Reference object = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectAttributeTable_ObjectAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 character_index = 1;
  if (has_character_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->character_index(), output);
  }

  // optional .TSP.Reference object = 2;
  if (has_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->object(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectAttributeTable_ObjectAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 character_index = 1;
  if (has_character_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->character_index(), target);
  }

  // optional .TSP.Reference object = 2;
  if (has_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->object(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectAttributeTable_ObjectAttribute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 character_index = 1;
    if (has_character_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->character_index());
    }

    // optional .TSP.Reference object = 2;
    if (has_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectAttributeTable_ObjectAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectAttributeTable_ObjectAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectAttributeTable_ObjectAttribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectAttributeTable_ObjectAttribute::MergeFrom(const ObjectAttributeTable_ObjectAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_index()) {
      set_character_index(from.character_index());
    }
    if (from.has_object()) {
      mutable_object()->::TSP::Reference::MergeFrom(from.object());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectAttributeTable_ObjectAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectAttributeTable_ObjectAttribute::CopyFrom(const ObjectAttributeTable_ObjectAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAttributeTable_ObjectAttribute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_object()) {
    if (!this->object().IsInitialized()) return false;
  }
  return true;
}

void ObjectAttributeTable_ObjectAttribute::Swap(ObjectAttributeTable_ObjectAttribute* other) {
  if (other != this) {
    std::swap(character_index_, other->character_index_);
    std::swap(object_, other->object_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectAttributeTable_ObjectAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectAttributeTable_ObjectAttribute_descriptor_;
  metadata.reflection = ObjectAttributeTable_ObjectAttribute_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ObjectAttributeTable::kEntriesFieldNumber;
#endif  // !_MSC_VER

ObjectAttributeTable::ObjectAttributeTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectAttributeTable::InitAsDefaultInstance() {
}

ObjectAttributeTable::ObjectAttributeTable(const ObjectAttributeTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectAttributeTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectAttributeTable::~ObjectAttributeTable() {
  SharedDtor();
}

void ObjectAttributeTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectAttributeTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectAttributeTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectAttributeTable_descriptor_;
}

const ObjectAttributeTable& ObjectAttributeTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

ObjectAttributeTable* ObjectAttributeTable::default_instance_ = NULL;

ObjectAttributeTable* ObjectAttributeTable::New() const {
  return new ObjectAttributeTable;
}

void ObjectAttributeTable::Clear() {
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectAttributeTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSWP.ObjectAttributeTable.ObjectAttribute entries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectAttributeTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSWP.ObjectAttributeTable.ObjectAttribute entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectAttributeTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSWP.ObjectAttributeTable.ObjectAttribute entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectAttributeTable::ByteSize() const {
  int total_size = 0;

  // repeated .TSWP.ObjectAttributeTable.ObjectAttribute entries = 1;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectAttributeTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectAttributeTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectAttributeTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectAttributeTable::MergeFrom(const ObjectAttributeTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectAttributeTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectAttributeTable::CopyFrom(const ObjectAttributeTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAttributeTable::IsInitialized() const {

  for (int i = 0; i < entries_size(); i++) {
    if (!this->entries(i).IsInitialized()) return false;
  }
  return true;
}

void ObjectAttributeTable::Swap(ObjectAttributeTable* other) {
  if (other != this) {
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectAttributeTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectAttributeTable_descriptor_;
  metadata.reflection = ObjectAttributeTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StringAttributeTable_StringAttribute::kCharacterIndexFieldNumber;
const int StringAttributeTable_StringAttribute::kObjectFieldNumber;
#endif  // !_MSC_VER

StringAttributeTable_StringAttribute::StringAttributeTable_StringAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StringAttributeTable_StringAttribute::InitAsDefaultInstance() {
}

StringAttributeTable_StringAttribute::StringAttributeTable_StringAttribute(const StringAttributeTable_StringAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StringAttributeTable_StringAttribute::SharedCtor() {
  _cached_size_ = 0;
  character_index_ = 0u;
  object_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringAttributeTable_StringAttribute::~StringAttributeTable_StringAttribute() {
  SharedDtor();
}

void StringAttributeTable_StringAttribute::SharedDtor() {
  if (object_ != &::google::protobuf::internal::kEmptyString) {
    delete object_;
  }
  if (this != default_instance_) {
  }
}

void StringAttributeTable_StringAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringAttributeTable_StringAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringAttributeTable_StringAttribute_descriptor_;
}

const StringAttributeTable_StringAttribute& StringAttributeTable_StringAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

StringAttributeTable_StringAttribute* StringAttributeTable_StringAttribute::default_instance_ = NULL;

StringAttributeTable_StringAttribute* StringAttributeTable_StringAttribute::New() const {
  return new StringAttributeTable_StringAttribute;
}

void StringAttributeTable_StringAttribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    character_index_ = 0u;
    if (has_object()) {
      if (object_ != &::google::protobuf::internal::kEmptyString) {
        object_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringAttributeTable_StringAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 character_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_index_)));
          set_has_character_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_object;
        break;
      }

      // optional string object = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->object().data(), this->object().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringAttributeTable_StringAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 character_index = 1;
  if (has_character_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->character_index(), output);
  }

  // optional string object = 2;
  if (has_object()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object().data(), this->object().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->object(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StringAttributeTable_StringAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 character_index = 1;
  if (has_character_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->character_index(), target);
  }

  // optional string object = 2;
  if (has_object()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object().data(), this->object().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->object(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StringAttributeTable_StringAttribute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 character_index = 1;
    if (has_character_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->character_index());
    }

    // optional string object = 2;
    if (has_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->object());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringAttributeTable_StringAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringAttributeTable_StringAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringAttributeTable_StringAttribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringAttributeTable_StringAttribute::MergeFrom(const StringAttributeTable_StringAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_index()) {
      set_character_index(from.character_index());
    }
    if (from.has_object()) {
      set_object(from.object());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringAttributeTable_StringAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringAttributeTable_StringAttribute::CopyFrom(const StringAttributeTable_StringAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringAttributeTable_StringAttribute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StringAttributeTable_StringAttribute::Swap(StringAttributeTable_StringAttribute* other) {
  if (other != this) {
    std::swap(character_index_, other->character_index_);
    std::swap(object_, other->object_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StringAttributeTable_StringAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringAttributeTable_StringAttribute_descriptor_;
  metadata.reflection = StringAttributeTable_StringAttribute_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StringAttributeTable::kEntriesFieldNumber;
#endif  // !_MSC_VER

StringAttributeTable::StringAttributeTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StringAttributeTable::InitAsDefaultInstance() {
}

StringAttributeTable::StringAttributeTable(const StringAttributeTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StringAttributeTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringAttributeTable::~StringAttributeTable() {
  SharedDtor();
}

void StringAttributeTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StringAttributeTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringAttributeTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringAttributeTable_descriptor_;
}

const StringAttributeTable& StringAttributeTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

StringAttributeTable* StringAttributeTable::default_instance_ = NULL;

StringAttributeTable* StringAttributeTable::New() const {
  return new StringAttributeTable;
}

void StringAttributeTable::Clear() {
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringAttributeTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSWP.StringAttributeTable.StringAttribute entries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringAttributeTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSWP.StringAttributeTable.StringAttribute entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StringAttributeTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSWP.StringAttributeTable.StringAttribute entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StringAttributeTable::ByteSize() const {
  int total_size = 0;

  // repeated .TSWP.StringAttributeTable.StringAttribute entries = 1;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringAttributeTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringAttributeTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringAttributeTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringAttributeTable::MergeFrom(const StringAttributeTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringAttributeTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringAttributeTable::CopyFrom(const StringAttributeTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringAttributeTable::IsInitialized() const {

  for (int i = 0; i < entries_size(); i++) {
    if (!this->entries(i).IsInitialized()) return false;
  }
  return true;
}

void StringAttributeTable::Swap(StringAttributeTable* other) {
  if (other != this) {
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StringAttributeTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringAttributeTable_descriptor_;
  metadata.reflection = StringAttributeTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParaDataAttributeTable_ParaDataAttribute::kCharacterIndexFieldNumber;
const int ParaDataAttributeTable_ParaDataAttribute::kFirstFieldNumber;
const int ParaDataAttributeTable_ParaDataAttribute::kSecondFieldNumber;
#endif  // !_MSC_VER

ParaDataAttributeTable_ParaDataAttribute::ParaDataAttributeTable_ParaDataAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParaDataAttributeTable_ParaDataAttribute::InitAsDefaultInstance() {
}

ParaDataAttributeTable_ParaDataAttribute::ParaDataAttributeTable_ParaDataAttribute(const ParaDataAttributeTable_ParaDataAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParaDataAttributeTable_ParaDataAttribute::SharedCtor() {
  _cached_size_ = 0;
  character_index_ = 0u;
  first_ = 0u;
  second_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParaDataAttributeTable_ParaDataAttribute::~ParaDataAttributeTable_ParaDataAttribute() {
  SharedDtor();
}

void ParaDataAttributeTable_ParaDataAttribute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ParaDataAttributeTable_ParaDataAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParaDataAttributeTable_ParaDataAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParaDataAttributeTable_ParaDataAttribute_descriptor_;
}

const ParaDataAttributeTable_ParaDataAttribute& ParaDataAttributeTable_ParaDataAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

ParaDataAttributeTable_ParaDataAttribute* ParaDataAttributeTable_ParaDataAttribute::default_instance_ = NULL;

ParaDataAttributeTable_ParaDataAttribute* ParaDataAttributeTable_ParaDataAttribute::New() const {
  return new ParaDataAttributeTable_ParaDataAttribute;
}

void ParaDataAttributeTable_ParaDataAttribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    character_index_ = 0u;
    first_ = 0u;
    second_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParaDataAttributeTable_ParaDataAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 character_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_index_)));
          set_has_character_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_first;
        break;
      }

      // required uint32 first = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_)));
          set_has_first();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_second;
        break;
      }

      // required uint32 second = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &second_)));
          set_has_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParaDataAttributeTable_ParaDataAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 character_index = 1;
  if (has_character_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->character_index(), output);
  }

  // required uint32 first = 2;
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->first(), output);
  }

  // required uint32 second = 3;
  if (has_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->second(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParaDataAttributeTable_ParaDataAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 character_index = 1;
  if (has_character_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->character_index(), target);
  }

  // required uint32 first = 2;
  if (has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->first(), target);
  }

  // required uint32 second = 3;
  if (has_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->second(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParaDataAttributeTable_ParaDataAttribute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 character_index = 1;
    if (has_character_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->character_index());
    }

    // required uint32 first = 2;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first());
    }

    // required uint32 second = 3;
    if (has_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->second());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParaDataAttributeTable_ParaDataAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParaDataAttributeTable_ParaDataAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParaDataAttributeTable_ParaDataAttribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParaDataAttributeTable_ParaDataAttribute::MergeFrom(const ParaDataAttributeTable_ParaDataAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_index()) {
      set_character_index(from.character_index());
    }
    if (from.has_first()) {
      set_first(from.first());
    }
    if (from.has_second()) {
      set_second(from.second());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParaDataAttributeTable_ParaDataAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParaDataAttributeTable_ParaDataAttribute::CopyFrom(const ParaDataAttributeTable_ParaDataAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParaDataAttributeTable_ParaDataAttribute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ParaDataAttributeTable_ParaDataAttribute::Swap(ParaDataAttributeTable_ParaDataAttribute* other) {
  if (other != this) {
    std::swap(character_index_, other->character_index_);
    std::swap(first_, other->first_);
    std::swap(second_, other->second_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParaDataAttributeTable_ParaDataAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParaDataAttributeTable_ParaDataAttribute_descriptor_;
  metadata.reflection = ParaDataAttributeTable_ParaDataAttribute_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ParaDataAttributeTable::kEntriesFieldNumber;
#endif  // !_MSC_VER

ParaDataAttributeTable::ParaDataAttributeTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParaDataAttributeTable::InitAsDefaultInstance() {
}

ParaDataAttributeTable::ParaDataAttributeTable(const ParaDataAttributeTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParaDataAttributeTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParaDataAttributeTable::~ParaDataAttributeTable() {
  SharedDtor();
}

void ParaDataAttributeTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ParaDataAttributeTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParaDataAttributeTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParaDataAttributeTable_descriptor_;
}

const ParaDataAttributeTable& ParaDataAttributeTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

ParaDataAttributeTable* ParaDataAttributeTable::default_instance_ = NULL;

ParaDataAttributeTable* ParaDataAttributeTable::New() const {
  return new ParaDataAttributeTable;
}

void ParaDataAttributeTable::Clear() {
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParaDataAttributeTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSWP.ParaDataAttributeTable.ParaDataAttribute entries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParaDataAttributeTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSWP.ParaDataAttributeTable.ParaDataAttribute entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParaDataAttributeTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSWP.ParaDataAttributeTable.ParaDataAttribute entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParaDataAttributeTable::ByteSize() const {
  int total_size = 0;

  // repeated .TSWP.ParaDataAttributeTable.ParaDataAttribute entries = 1;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParaDataAttributeTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParaDataAttributeTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParaDataAttributeTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParaDataAttributeTable::MergeFrom(const ParaDataAttributeTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParaDataAttributeTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParaDataAttributeTable::CopyFrom(const ParaDataAttributeTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParaDataAttributeTable::IsInitialized() const {

  for (int i = 0; i < entries_size(); i++) {
    if (!this->entries(i).IsInitialized()) return false;
  }
  return true;
}

void ParaDataAttributeTable::Swap(ParaDataAttributeTable* other) {
  if (other != this) {
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParaDataAttributeTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParaDataAttributeTable_descriptor_;
  metadata.reflection = ParaDataAttributeTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SparseObjectAttributeTable_SparseObjectAttribute::kCharacterIndexFieldNumber;
const int SparseObjectAttributeTable_SparseObjectAttribute::kObjectFieldNumber;
const int SparseObjectAttributeTable_SparseObjectAttribute::kRunLengthFieldNumber;
#endif  // !_MSC_VER

SparseObjectAttributeTable_SparseObjectAttribute::SparseObjectAttributeTable_SparseObjectAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SparseObjectAttributeTable_SparseObjectAttribute::InitAsDefaultInstance() {
  object_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

SparseObjectAttributeTable_SparseObjectAttribute::SparseObjectAttributeTable_SparseObjectAttribute(const SparseObjectAttributeTable_SparseObjectAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SparseObjectAttributeTable_SparseObjectAttribute::SharedCtor() {
  _cached_size_ = 0;
  character_index_ = 0u;
  object_ = NULL;
  run_length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SparseObjectAttributeTable_SparseObjectAttribute::~SparseObjectAttributeTable_SparseObjectAttribute() {
  SharedDtor();
}

void SparseObjectAttributeTable_SparseObjectAttribute::SharedDtor() {
  if (this != default_instance_) {
    delete object_;
  }
}

void SparseObjectAttributeTable_SparseObjectAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparseObjectAttributeTable_SparseObjectAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SparseObjectAttributeTable_SparseObjectAttribute_descriptor_;
}

const SparseObjectAttributeTable_SparseObjectAttribute& SparseObjectAttributeTable_SparseObjectAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

SparseObjectAttributeTable_SparseObjectAttribute* SparseObjectAttributeTable_SparseObjectAttribute::default_instance_ = NULL;

SparseObjectAttributeTable_SparseObjectAttribute* SparseObjectAttributeTable_SparseObjectAttribute::New() const {
  return new SparseObjectAttributeTable_SparseObjectAttribute;
}

void SparseObjectAttributeTable_SparseObjectAttribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    character_index_ = 0u;
    if (has_object()) {
      if (object_ != NULL) object_->::TSP::Reference::Clear();
    }
    run_length_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SparseObjectAttributeTable_SparseObjectAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 character_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_index_)));
          set_has_character_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_object;
        break;
      }

      // optional .TSP.Reference object = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_run_length;
        break;
      }

      // required uint32 run_length = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_run_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &run_length_)));
          set_has_run_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SparseObjectAttributeTable_SparseObjectAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 character_index = 1;
  if (has_character_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->character_index(), output);
  }

  // optional .TSP.Reference object = 2;
  if (has_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->object(), output);
  }

  // required uint32 run_length = 3;
  if (has_run_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->run_length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SparseObjectAttributeTable_SparseObjectAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 character_index = 1;
  if (has_character_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->character_index(), target);
  }

  // optional .TSP.Reference object = 2;
  if (has_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->object(), target);
  }

  // required uint32 run_length = 3;
  if (has_run_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->run_length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SparseObjectAttributeTable_SparseObjectAttribute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 character_index = 1;
    if (has_character_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->character_index());
    }

    // optional .TSP.Reference object = 2;
    if (has_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object());
    }

    // required uint32 run_length = 3;
    if (has_run_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->run_length());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparseObjectAttributeTable_SparseObjectAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SparseObjectAttributeTable_SparseObjectAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SparseObjectAttributeTable_SparseObjectAttribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SparseObjectAttributeTable_SparseObjectAttribute::MergeFrom(const SparseObjectAttributeTable_SparseObjectAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_index()) {
      set_character_index(from.character_index());
    }
    if (from.has_object()) {
      mutable_object()->::TSP::Reference::MergeFrom(from.object());
    }
    if (from.has_run_length()) {
      set_run_length(from.run_length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SparseObjectAttributeTable_SparseObjectAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseObjectAttributeTable_SparseObjectAttribute::CopyFrom(const SparseObjectAttributeTable_SparseObjectAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseObjectAttributeTable_SparseObjectAttribute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_object()) {
    if (!this->object().IsInitialized()) return false;
  }
  return true;
}

void SparseObjectAttributeTable_SparseObjectAttribute::Swap(SparseObjectAttributeTable_SparseObjectAttribute* other) {
  if (other != this) {
    std::swap(character_index_, other->character_index_);
    std::swap(object_, other->object_);
    std::swap(run_length_, other->run_length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SparseObjectAttributeTable_SparseObjectAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SparseObjectAttributeTable_SparseObjectAttribute_descriptor_;
  metadata.reflection = SparseObjectAttributeTable_SparseObjectAttribute_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SparseObjectAttributeTable::kTotalCountFieldNumber;
const int SparseObjectAttributeTable::kEntriesFieldNumber;
#endif  // !_MSC_VER

SparseObjectAttributeTable::SparseObjectAttributeTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SparseObjectAttributeTable::InitAsDefaultInstance() {
}

SparseObjectAttributeTable::SparseObjectAttributeTable(const SparseObjectAttributeTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SparseObjectAttributeTable::SharedCtor() {
  _cached_size_ = 0;
  total_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SparseObjectAttributeTable::~SparseObjectAttributeTable() {
  SharedDtor();
}

void SparseObjectAttributeTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SparseObjectAttributeTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparseObjectAttributeTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SparseObjectAttributeTable_descriptor_;
}

const SparseObjectAttributeTable& SparseObjectAttributeTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

SparseObjectAttributeTable* SparseObjectAttributeTable::default_instance_ = NULL;

SparseObjectAttributeTable* SparseObjectAttributeTable::New() const {
  return new SparseObjectAttributeTable;
}

void SparseObjectAttributeTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    total_count_ = 0u;
  }
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SparseObjectAttributeTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 total_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_count_)));
          set_has_total_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entries;
        break;
      }

      // repeated .TSWP.SparseObjectAttributeTable.SparseObjectAttribute entries = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SparseObjectAttributeTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 total_count = 1;
  if (has_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->total_count(), output);
  }

  // repeated .TSWP.SparseObjectAttributeTable.SparseObjectAttribute entries = 2;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SparseObjectAttributeTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 total_count = 1;
  if (has_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->total_count(), target);
  }

  // repeated .TSWP.SparseObjectAttributeTable.SparseObjectAttribute entries = 2;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SparseObjectAttributeTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 total_count = 1;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_count());
    }

  }
  // repeated .TSWP.SparseObjectAttributeTable.SparseObjectAttribute entries = 2;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparseObjectAttributeTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SparseObjectAttributeTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SparseObjectAttributeTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SparseObjectAttributeTable::MergeFrom(const SparseObjectAttributeTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_count()) {
      set_total_count(from.total_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SparseObjectAttributeTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseObjectAttributeTable::CopyFrom(const SparseObjectAttributeTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseObjectAttributeTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < entries_size(); i++) {
    if (!this->entries(i).IsInitialized()) return false;
  }
  return true;
}

void SparseObjectAttributeTable::Swap(SparseObjectAttributeTable* other) {
  if (other != this) {
    std::swap(total_count_, other->total_count_);
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SparseObjectAttributeTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SparseObjectAttributeTable_descriptor_;
  metadata.reflection = SparseObjectAttributeTable_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* StorageArchive_KindType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorageArchive_KindType_descriptor_;
}
bool StorageArchive_KindType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StorageArchive_KindType StorageArchive::BODY;
const StorageArchive_KindType StorageArchive::HEADER;
const StorageArchive_KindType StorageArchive::FOOTNOTE;
const StorageArchive_KindType StorageArchive::TEXTBOX;
const StorageArchive_KindType StorageArchive::NOTE;
const StorageArchive_KindType StorageArchive::CELL;
const StorageArchive_KindType StorageArchive::UNCLASSIFIED;
const StorageArchive_KindType StorageArchive::TABLEOFCONTENTS;
const StorageArchive_KindType StorageArchive::KindType_MIN;
const StorageArchive_KindType StorageArchive::KindType_MAX;
const int StorageArchive::KindType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int StorageArchive::kKindFieldNumber;
const int StorageArchive::kStyleSheetFieldNumber;
const int StorageArchive::kTextFieldNumber;
const int StorageArchive::kHasItextFieldNumber;
const int StorageArchive::kInDocumentFieldNumber;
const int StorageArchive::kTableParaStyleFieldNumber;
const int StorageArchive::kTableParaDataFieldNumber;
const int StorageArchive::kTableListStyleFieldNumber;
const int StorageArchive::kTableCharStyleFieldNumber;
const int StorageArchive::kTableAttachmentFieldNumber;
const int StorageArchive::kTableSmartfieldFieldNumber;
const int StorageArchive::kTableLayoutStyleFieldNumber;
const int StorageArchive::kTableParaStartsFieldNumber;
const int StorageArchive::kTableBookmarkFieldNumber;
const int StorageArchive::kTableFootnoteFieldNumber;
const int StorageArchive::kTableSectionFieldNumber;
const int StorageArchive::kTableRubyfieldFieldNumber;
const int StorageArchive::kTableLanguageFieldNumber;
const int StorageArchive::kTableDictationFieldNumber;
const int StorageArchive::kTableInsertionFieldNumber;
const int StorageArchive::kTableDeletionFieldNumber;
const int StorageArchive::kTableHighlightFieldNumber;
const int StorageArchive::kTableParaBidiFieldNumber;
#endif  // !_MSC_VER

StorageArchive::StorageArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StorageArchive::InitAsDefaultInstance() {
  style_sheet_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  table_para_style_ = const_cast< ::TSWP::ObjectAttributeTable*>(&::TSWP::ObjectAttributeTable::default_instance());
  table_para_data_ = const_cast< ::TSWP::ParaDataAttributeTable*>(&::TSWP::ParaDataAttributeTable::default_instance());
  table_list_style_ = const_cast< ::TSWP::ObjectAttributeTable*>(&::TSWP::ObjectAttributeTable::default_instance());
  table_char_style_ = const_cast< ::TSWP::ObjectAttributeTable*>(&::TSWP::ObjectAttributeTable::default_instance());
  table_attachment_ = const_cast< ::TSWP::ObjectAttributeTable*>(&::TSWP::ObjectAttributeTable::default_instance());
  table_smartfield_ = const_cast< ::TSWP::ObjectAttributeTable*>(&::TSWP::ObjectAttributeTable::default_instance());
  table_layout_style_ = const_cast< ::TSWP::ObjectAttributeTable*>(&::TSWP::ObjectAttributeTable::default_instance());
  table_para_starts_ = const_cast< ::TSWP::ParaDataAttributeTable*>(&::TSWP::ParaDataAttributeTable::default_instance());
  table_bookmark_ = const_cast< ::TSWP::ObjectAttributeTable*>(&::TSWP::ObjectAttributeTable::default_instance());
  table_footnote_ = const_cast< ::TSWP::ObjectAttributeTable*>(&::TSWP::ObjectAttributeTable::default_instance());
  table_section_ = const_cast< ::TSWP::ObjectAttributeTable*>(&::TSWP::ObjectAttributeTable::default_instance());
  table_rubyfield_ = const_cast< ::TSWP::ObjectAttributeTable*>(&::TSWP::ObjectAttributeTable::default_instance());
  table_language_ = const_cast< ::TSWP::StringAttributeTable*>(&::TSWP::StringAttributeTable::default_instance());
  table_dictation_ = const_cast< ::TSWP::StringAttributeTable*>(&::TSWP::StringAttributeTable::default_instance());
  table_insertion_ = const_cast< ::TSWP::ObjectAttributeTable*>(&::TSWP::ObjectAttributeTable::default_instance());
  table_deletion_ = const_cast< ::TSWP::ObjectAttributeTable*>(&::TSWP::ObjectAttributeTable::default_instance());
  table_highlight_ = const_cast< ::TSWP::ObjectAttributeTable*>(&::TSWP::ObjectAttributeTable::default_instance());
  table_para_bidi_ = const_cast< ::TSWP::ParaDataAttributeTable*>(&::TSWP::ParaDataAttributeTable::default_instance());
}

StorageArchive::StorageArchive(const StorageArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StorageArchive::SharedCtor() {
  _cached_size_ = 0;
  kind_ = 3;
  style_sheet_ = NULL;
  has_itext_ = false;
  in_document_ = false;
  table_para_style_ = NULL;
  table_para_data_ = NULL;
  table_list_style_ = NULL;
  table_char_style_ = NULL;
  table_attachment_ = NULL;
  table_smartfield_ = NULL;
  table_layout_style_ = NULL;
  table_para_starts_ = NULL;
  table_bookmark_ = NULL;
  table_footnote_ = NULL;
  table_section_ = NULL;
  table_rubyfield_ = NULL;
  table_language_ = NULL;
  table_dictation_ = NULL;
  table_insertion_ = NULL;
  table_deletion_ = NULL;
  table_highlight_ = NULL;
  table_para_bidi_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorageArchive::~StorageArchive() {
  SharedDtor();
}

void StorageArchive::SharedDtor() {
  if (this != default_instance_) {
    delete style_sheet_;
    delete table_para_style_;
    delete table_para_data_;
    delete table_list_style_;
    delete table_char_style_;
    delete table_attachment_;
    delete table_smartfield_;
    delete table_layout_style_;
    delete table_para_starts_;
    delete table_bookmark_;
    delete table_footnote_;
    delete table_section_;
    delete table_rubyfield_;
    delete table_language_;
    delete table_dictation_;
    delete table_insertion_;
    delete table_deletion_;
    delete table_highlight_;
    delete table_para_bidi_;
  }
}

void StorageArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorageArchive_descriptor_;
}

const StorageArchive& StorageArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

StorageArchive* StorageArchive::default_instance_ = NULL;

StorageArchive* StorageArchive::New() const {
  return new StorageArchive;
}

void StorageArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kind_ = 3;
    if (has_style_sheet()) {
      if (style_sheet_ != NULL) style_sheet_->::TSP::Reference::Clear();
    }
    has_itext_ = false;
    in_document_ = false;
    if (has_table_para_style()) {
      if (table_para_style_ != NULL) table_para_style_->::TSWP::ObjectAttributeTable::Clear();
    }
    if (has_table_para_data()) {
      if (table_para_data_ != NULL) table_para_data_->::TSWP::ParaDataAttributeTable::Clear();
    }
    if (has_table_list_style()) {
      if (table_list_style_ != NULL) table_list_style_->::TSWP::ObjectAttributeTable::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_table_char_style()) {
      if (table_char_style_ != NULL) table_char_style_->::TSWP::ObjectAttributeTable::Clear();
    }
    if (has_table_attachment()) {
      if (table_attachment_ != NULL) table_attachment_->::TSWP::ObjectAttributeTable::Clear();
    }
    if (has_table_smartfield()) {
      if (table_smartfield_ != NULL) table_smartfield_->::TSWP::ObjectAttributeTable::Clear();
    }
    if (has_table_layout_style()) {
      if (table_layout_style_ != NULL) table_layout_style_->::TSWP::ObjectAttributeTable::Clear();
    }
    if (has_table_para_starts()) {
      if (table_para_starts_ != NULL) table_para_starts_->::TSWP::ParaDataAttributeTable::Clear();
    }
    if (has_table_bookmark()) {
      if (table_bookmark_ != NULL) table_bookmark_->::TSWP::ObjectAttributeTable::Clear();
    }
    if (has_table_footnote()) {
      if (table_footnote_ != NULL) table_footnote_->::TSWP::ObjectAttributeTable::Clear();
    }
    if (has_table_section()) {
      if (table_section_ != NULL) table_section_->::TSWP::ObjectAttributeTable::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_table_rubyfield()) {
      if (table_rubyfield_ != NULL) table_rubyfield_->::TSWP::ObjectAttributeTable::Clear();
    }
    if (has_table_language()) {
      if (table_language_ != NULL) table_language_->::TSWP::StringAttributeTable::Clear();
    }
    if (has_table_dictation()) {
      if (table_dictation_ != NULL) table_dictation_->::TSWP::StringAttributeTable::Clear();
    }
    if (has_table_insertion()) {
      if (table_insertion_ != NULL) table_insertion_->::TSWP::ObjectAttributeTable::Clear();
    }
    if (has_table_deletion()) {
      if (table_deletion_ != NULL) table_deletion_->::TSWP::ObjectAttributeTable::Clear();
    }
    if (has_table_highlight()) {
      if (table_highlight_ != NULL) table_highlight_->::TSWP::ObjectAttributeTable::Clear();
    }
    if (has_table_para_bidi()) {
      if (table_para_bidi_ != NULL) table_para_bidi_->::TSWP::ParaDataAttributeTable::Clear();
    }
  }
  text_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StorageArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSWP.StorageArchive.KindType kind = 1 [default = TEXTBOX];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::StorageArchive_KindType_IsValid(value)) {
            set_kind(static_cast< ::TSWP::StorageArchive_KindType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_style_sheet;
        break;
      }

      // optional .TSP.Reference style_sheet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_style_sheet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_style_sheet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }

      // repeated string text = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text(this->text_size() - 1).data(),
            this->text(this->text_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_text;
        if (input->ExpectTag(32)) goto parse_has_itext;
        break;
      }

      // optional bool has_itext = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_itext:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_itext_)));
          set_has_has_itext();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_table_para_style;
        break;
      }

      // optional .TSWP.ObjectAttributeTable table_para_style = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_para_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_para_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_table_para_data;
        break;
      }

      // optional .TSWP.ParaDataAttributeTable table_para_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_para_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_para_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_table_list_style;
        break;
      }

      // optional .TSWP.ObjectAttributeTable table_list_style = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_list_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_list_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_table_char_style;
        break;
      }

      // optional .TSWP.ObjectAttributeTable table_char_style = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_char_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_char_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_table_attachment;
        break;
      }

      // optional .TSWP.ObjectAttributeTable table_attachment = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_attachment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_attachment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_in_document;
        break;
      }

      // optional bool in_document = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_document:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_document_)));
          set_has_in_document();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_table_smartfield;
        break;
      }

      // optional .TSWP.ObjectAttributeTable table_smartfield = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_smartfield:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_smartfield()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_table_layout_style;
        break;
      }

      // optional .TSWP.ObjectAttributeTable table_layout_style = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_layout_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_layout_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_table_para_starts;
        break;
      }

      // optional .TSWP.ParaDataAttributeTable table_para_starts = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_para_starts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_para_starts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_table_bookmark;
        break;
      }

      // optional .TSWP.ObjectAttributeTable table_bookmark = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_bookmark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_bookmark()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_table_footnote;
        break;
      }

      // optional .TSWP.ObjectAttributeTable table_footnote = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_footnote:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_footnote()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_table_section;
        break;
      }

      // optional .TSWP.ObjectAttributeTable table_section = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_section:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_section()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_table_rubyfield;
        break;
      }

      // optional .TSWP.ObjectAttributeTable table_rubyfield = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_rubyfield:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_rubyfield()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_table_language;
        break;
      }

      // optional .TSWP.StringAttributeTable table_language = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_language()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_table_dictation;
        break;
      }

      // optional .TSWP.StringAttributeTable table_dictation = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_dictation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_dictation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_table_insertion;
        break;
      }

      // optional .TSWP.ObjectAttributeTable table_insertion = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_insertion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_insertion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_table_deletion;
        break;
      }

      // optional .TSWP.ObjectAttributeTable table_deletion = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_deletion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_deletion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_table_highlight;
        break;
      }

      // optional .TSWP.ObjectAttributeTable table_highlight = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_highlight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_highlight()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_table_para_bidi;
        break;
      }

      // optional .TSWP.ParaDataAttributeTable table_para_bidi = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_para_bidi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_para_bidi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StorageArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSWP.StorageArchive.KindType kind = 1 [default = TEXTBOX];
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->kind(), output);
  }

  // optional .TSP.Reference style_sheet = 2;
  if (has_style_sheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->style_sheet(), output);
  }

  // repeated string text = 3;
  for (int i = 0; i < this->text_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->text(i).data(), this->text(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->text(i), output);
  }

  // optional bool has_itext = 4 [default = false];
  if (has_has_itext()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->has_itext(), output);
  }

  // optional .TSWP.ObjectAttributeTable table_para_style = 5;
  if (has_table_para_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->table_para_style(), output);
  }

  // optional .TSWP.ParaDataAttributeTable table_para_data = 6;
  if (has_table_para_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->table_para_data(), output);
  }

  // optional .TSWP.ObjectAttributeTable table_list_style = 7;
  if (has_table_list_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->table_list_style(), output);
  }

  // optional .TSWP.ObjectAttributeTable table_char_style = 8;
  if (has_table_char_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->table_char_style(), output);
  }

  // optional .TSWP.ObjectAttributeTable table_attachment = 9;
  if (has_table_attachment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->table_attachment(), output);
  }

  // optional bool in_document = 10 [default = false];
  if (has_in_document()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->in_document(), output);
  }

  // optional .TSWP.ObjectAttributeTable table_smartfield = 11;
  if (has_table_smartfield()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->table_smartfield(), output);
  }

  // optional .TSWP.ObjectAttributeTable table_layout_style = 12;
  if (has_table_layout_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->table_layout_style(), output);
  }

  // optional .TSWP.ParaDataAttributeTable table_para_starts = 14;
  if (has_table_para_starts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->table_para_starts(), output);
  }

  // optional .TSWP.ObjectAttributeTable table_bookmark = 15;
  if (has_table_bookmark()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->table_bookmark(), output);
  }

  // optional .TSWP.ObjectAttributeTable table_footnote = 16;
  if (has_table_footnote()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->table_footnote(), output);
  }

  // optional .TSWP.ObjectAttributeTable table_section = 17;
  if (has_table_section()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->table_section(), output);
  }

  // optional .TSWP.ObjectAttributeTable table_rubyfield = 18;
  if (has_table_rubyfield()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->table_rubyfield(), output);
  }

  // optional .TSWP.StringAttributeTable table_language = 19;
  if (has_table_language()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->table_language(), output);
  }

  // optional .TSWP.StringAttributeTable table_dictation = 20;
  if (has_table_dictation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->table_dictation(), output);
  }

  // optional .TSWP.ObjectAttributeTable table_insertion = 21;
  if (has_table_insertion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->table_insertion(), output);
  }

  // optional .TSWP.ObjectAttributeTable table_deletion = 22;
  if (has_table_deletion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->table_deletion(), output);
  }

  // optional .TSWP.ObjectAttributeTable table_highlight = 23;
  if (has_table_highlight()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->table_highlight(), output);
  }

  // optional .TSWP.ParaDataAttributeTable table_para_bidi = 24;
  if (has_table_para_bidi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->table_para_bidi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StorageArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSWP.StorageArchive.KindType kind = 1 [default = TEXTBOX];
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->kind(), target);
  }

  // optional .TSP.Reference style_sheet = 2;
  if (has_style_sheet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->style_sheet(), target);
  }

  // repeated string text = 3;
  for (int i = 0; i < this->text_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text(i).data(), this->text(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->text(i), target);
  }

  // optional bool has_itext = 4 [default = false];
  if (has_has_itext()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->has_itext(), target);
  }

  // optional .TSWP.ObjectAttributeTable table_para_style = 5;
  if (has_table_para_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->table_para_style(), target);
  }

  // optional .TSWP.ParaDataAttributeTable table_para_data = 6;
  if (has_table_para_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->table_para_data(), target);
  }

  // optional .TSWP.ObjectAttributeTable table_list_style = 7;
  if (has_table_list_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->table_list_style(), target);
  }

  // optional .TSWP.ObjectAttributeTable table_char_style = 8;
  if (has_table_char_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->table_char_style(), target);
  }

  // optional .TSWP.ObjectAttributeTable table_attachment = 9;
  if (has_table_attachment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->table_attachment(), target);
  }

  // optional bool in_document = 10 [default = false];
  if (has_in_document()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->in_document(), target);
  }

  // optional .TSWP.ObjectAttributeTable table_smartfield = 11;
  if (has_table_smartfield()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->table_smartfield(), target);
  }

  // optional .TSWP.ObjectAttributeTable table_layout_style = 12;
  if (has_table_layout_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->table_layout_style(), target);
  }

  // optional .TSWP.ParaDataAttributeTable table_para_starts = 14;
  if (has_table_para_starts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->table_para_starts(), target);
  }

  // optional .TSWP.ObjectAttributeTable table_bookmark = 15;
  if (has_table_bookmark()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->table_bookmark(), target);
  }

  // optional .TSWP.ObjectAttributeTable table_footnote = 16;
  if (has_table_footnote()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->table_footnote(), target);
  }

  // optional .TSWP.ObjectAttributeTable table_section = 17;
  if (has_table_section()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->table_section(), target);
  }

  // optional .TSWP.ObjectAttributeTable table_rubyfield = 18;
  if (has_table_rubyfield()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->table_rubyfield(), target);
  }

  // optional .TSWP.StringAttributeTable table_language = 19;
  if (has_table_language()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->table_language(), target);
  }

  // optional .TSWP.StringAttributeTable table_dictation = 20;
  if (has_table_dictation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->table_dictation(), target);
  }

  // optional .TSWP.ObjectAttributeTable table_insertion = 21;
  if (has_table_insertion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->table_insertion(), target);
  }

  // optional .TSWP.ObjectAttributeTable table_deletion = 22;
  if (has_table_deletion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->table_deletion(), target);
  }

  // optional .TSWP.ObjectAttributeTable table_highlight = 23;
  if (has_table_highlight()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->table_highlight(), target);
  }

  // optional .TSWP.ParaDataAttributeTable table_para_bidi = 24;
  if (has_table_para_bidi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->table_para_bidi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StorageArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSWP.StorageArchive.KindType kind = 1 [default = TEXTBOX];
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

    // optional .TSP.Reference style_sheet = 2;
    if (has_style_sheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->style_sheet());
    }

    // optional bool has_itext = 4 [default = false];
    if (has_has_itext()) {
      total_size += 1 + 1;
    }

    // optional bool in_document = 10 [default = false];
    if (has_in_document()) {
      total_size += 1 + 1;
    }

    // optional .TSWP.ObjectAttributeTable table_para_style = 5;
    if (has_table_para_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_para_style());
    }

    // optional .TSWP.ParaDataAttributeTable table_para_data = 6;
    if (has_table_para_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_para_data());
    }

    // optional .TSWP.ObjectAttributeTable table_list_style = 7;
    if (has_table_list_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_list_style());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TSWP.ObjectAttributeTable table_char_style = 8;
    if (has_table_char_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_char_style());
    }

    // optional .TSWP.ObjectAttributeTable table_attachment = 9;
    if (has_table_attachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_attachment());
    }

    // optional .TSWP.ObjectAttributeTable table_smartfield = 11;
    if (has_table_smartfield()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_smartfield());
    }

    // optional .TSWP.ObjectAttributeTable table_layout_style = 12;
    if (has_table_layout_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_layout_style());
    }

    // optional .TSWP.ParaDataAttributeTable table_para_starts = 14;
    if (has_table_para_starts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_para_starts());
    }

    // optional .TSWP.ObjectAttributeTable table_bookmark = 15;
    if (has_table_bookmark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_bookmark());
    }

    // optional .TSWP.ObjectAttributeTable table_footnote = 16;
    if (has_table_footnote()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_footnote());
    }

    // optional .TSWP.ObjectAttributeTable table_section = 17;
    if (has_table_section()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_section());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .TSWP.ObjectAttributeTable table_rubyfield = 18;
    if (has_table_rubyfield()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_rubyfield());
    }

    // optional .TSWP.StringAttributeTable table_language = 19;
    if (has_table_language()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_language());
    }

    // optional .TSWP.StringAttributeTable table_dictation = 20;
    if (has_table_dictation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_dictation());
    }

    // optional .TSWP.ObjectAttributeTable table_insertion = 21;
    if (has_table_insertion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_insertion());
    }

    // optional .TSWP.ObjectAttributeTable table_deletion = 22;
    if (has_table_deletion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_deletion());
    }

    // optional .TSWP.ObjectAttributeTable table_highlight = 23;
    if (has_table_highlight()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_highlight());
    }

    // optional .TSWP.ParaDataAttributeTable table_para_bidi = 24;
    if (has_table_para_bidi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_para_bidi());
    }

  }
  // repeated string text = 3;
  total_size += 1 * this->text_size();
  for (int i = 0; i < this->text_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->text(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StorageArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StorageArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StorageArchive::MergeFrom(const StorageArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  text_.MergeFrom(from.text_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_style_sheet()) {
      mutable_style_sheet()->::TSP::Reference::MergeFrom(from.style_sheet());
    }
    if (from.has_has_itext()) {
      set_has_itext(from.has_itext());
    }
    if (from.has_in_document()) {
      set_in_document(from.in_document());
    }
    if (from.has_table_para_style()) {
      mutable_table_para_style()->::TSWP::ObjectAttributeTable::MergeFrom(from.table_para_style());
    }
    if (from.has_table_para_data()) {
      mutable_table_para_data()->::TSWP::ParaDataAttributeTable::MergeFrom(from.table_para_data());
    }
    if (from.has_table_list_style()) {
      mutable_table_list_style()->::TSWP::ObjectAttributeTable::MergeFrom(from.table_list_style());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_table_char_style()) {
      mutable_table_char_style()->::TSWP::ObjectAttributeTable::MergeFrom(from.table_char_style());
    }
    if (from.has_table_attachment()) {
      mutable_table_attachment()->::TSWP::ObjectAttributeTable::MergeFrom(from.table_attachment());
    }
    if (from.has_table_smartfield()) {
      mutable_table_smartfield()->::TSWP::ObjectAttributeTable::MergeFrom(from.table_smartfield());
    }
    if (from.has_table_layout_style()) {
      mutable_table_layout_style()->::TSWP::ObjectAttributeTable::MergeFrom(from.table_layout_style());
    }
    if (from.has_table_para_starts()) {
      mutable_table_para_starts()->::TSWP::ParaDataAttributeTable::MergeFrom(from.table_para_starts());
    }
    if (from.has_table_bookmark()) {
      mutable_table_bookmark()->::TSWP::ObjectAttributeTable::MergeFrom(from.table_bookmark());
    }
    if (from.has_table_footnote()) {
      mutable_table_footnote()->::TSWP::ObjectAttributeTable::MergeFrom(from.table_footnote());
    }
    if (from.has_table_section()) {
      mutable_table_section()->::TSWP::ObjectAttributeTable::MergeFrom(from.table_section());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_table_rubyfield()) {
      mutable_table_rubyfield()->::TSWP::ObjectAttributeTable::MergeFrom(from.table_rubyfield());
    }
    if (from.has_table_language()) {
      mutable_table_language()->::TSWP::StringAttributeTable::MergeFrom(from.table_language());
    }
    if (from.has_table_dictation()) {
      mutable_table_dictation()->::TSWP::StringAttributeTable::MergeFrom(from.table_dictation());
    }
    if (from.has_table_insertion()) {
      mutable_table_insertion()->::TSWP::ObjectAttributeTable::MergeFrom(from.table_insertion());
    }
    if (from.has_table_deletion()) {
      mutable_table_deletion()->::TSWP::ObjectAttributeTable::MergeFrom(from.table_deletion());
    }
    if (from.has_table_highlight()) {
      mutable_table_highlight()->::TSWP::ObjectAttributeTable::MergeFrom(from.table_highlight());
    }
    if (from.has_table_para_bidi()) {
      mutable_table_para_bidi()->::TSWP::ParaDataAttributeTable::MergeFrom(from.table_para_bidi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StorageArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageArchive::CopyFrom(const StorageArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageArchive::IsInitialized() const {

  if (has_style_sheet()) {
    if (!this->style_sheet().IsInitialized()) return false;
  }
  if (has_table_para_style()) {
    if (!this->table_para_style().IsInitialized()) return false;
  }
  if (has_table_para_data()) {
    if (!this->table_para_data().IsInitialized()) return false;
  }
  if (has_table_list_style()) {
    if (!this->table_list_style().IsInitialized()) return false;
  }
  if (has_table_char_style()) {
    if (!this->table_char_style().IsInitialized()) return false;
  }
  if (has_table_attachment()) {
    if (!this->table_attachment().IsInitialized()) return false;
  }
  if (has_table_smartfield()) {
    if (!this->table_smartfield().IsInitialized()) return false;
  }
  if (has_table_layout_style()) {
    if (!this->table_layout_style().IsInitialized()) return false;
  }
  if (has_table_para_starts()) {
    if (!this->table_para_starts().IsInitialized()) return false;
  }
  if (has_table_bookmark()) {
    if (!this->table_bookmark().IsInitialized()) return false;
  }
  if (has_table_footnote()) {
    if (!this->table_footnote().IsInitialized()) return false;
  }
  if (has_table_section()) {
    if (!this->table_section().IsInitialized()) return false;
  }
  if (has_table_rubyfield()) {
    if (!this->table_rubyfield().IsInitialized()) return false;
  }
  if (has_table_language()) {
    if (!this->table_language().IsInitialized()) return false;
  }
  if (has_table_dictation()) {
    if (!this->table_dictation().IsInitialized()) return false;
  }
  if (has_table_insertion()) {
    if (!this->table_insertion().IsInitialized()) return false;
  }
  if (has_table_deletion()) {
    if (!this->table_deletion().IsInitialized()) return false;
  }
  if (has_table_highlight()) {
    if (!this->table_highlight().IsInitialized()) return false;
  }
  if (has_table_para_bidi()) {
    if (!this->table_para_bidi().IsInitialized()) return false;
  }
  return true;
}

void StorageArchive::Swap(StorageArchive* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    std::swap(style_sheet_, other->style_sheet_);
    text_.Swap(&other->text_);
    std::swap(has_itext_, other->has_itext_);
    std::swap(in_document_, other->in_document_);
    std::swap(table_para_style_, other->table_para_style_);
    std::swap(table_para_data_, other->table_para_data_);
    std::swap(table_list_style_, other->table_list_style_);
    std::swap(table_char_style_, other->table_char_style_);
    std::swap(table_attachment_, other->table_attachment_);
    std::swap(table_smartfield_, other->table_smartfield_);
    std::swap(table_layout_style_, other->table_layout_style_);
    std::swap(table_para_starts_, other->table_para_starts_);
    std::swap(table_bookmark_, other->table_bookmark_);
    std::swap(table_footnote_, other->table_footnote_);
    std::swap(table_section_, other->table_section_);
    std::swap(table_rubyfield_, other->table_rubyfield_);
    std::swap(table_language_, other->table_language_);
    std::swap(table_dictation_, other->table_dictation_);
    std::swap(table_insertion_, other->table_insertion_);
    std::swap(table_deletion_, other->table_deletion_);
    std::swap(table_highlight_, other->table_highlight_);
    std::swap(table_para_bidi_, other->table_para_bidi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StorageArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StorageArchive_descriptor_;
  metadata.reflection = StorageArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HighlightArchive::kCommentStorageFieldNumber;
#endif  // !_MSC_VER

HighlightArchive::HighlightArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HighlightArchive::InitAsDefaultInstance() {
  commentstorage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

HighlightArchive::HighlightArchive(const HighlightArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HighlightArchive::SharedCtor() {
  _cached_size_ = 0;
  commentstorage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HighlightArchive::~HighlightArchive() {
  SharedDtor();
}

void HighlightArchive::SharedDtor() {
  if (this != default_instance_) {
    delete commentstorage_;
  }
}

void HighlightArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HighlightArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HighlightArchive_descriptor_;
}

const HighlightArchive& HighlightArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

HighlightArchive* HighlightArchive::default_instance_ = NULL;

HighlightArchive* HighlightArchive::New() const {
  return new HighlightArchive;
}

void HighlightArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_commentstorage()) {
      if (commentstorage_ != NULL) commentstorage_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HighlightArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference commentStorage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commentstorage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HighlightArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference commentStorage = 1;
  if (has_commentstorage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commentstorage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HighlightArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference commentStorage = 1;
  if (has_commentstorage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commentstorage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HighlightArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference commentStorage = 1;
    if (has_commentstorage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commentstorage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HighlightArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HighlightArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HighlightArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HighlightArchive::MergeFrom(const HighlightArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commentstorage()) {
      mutable_commentstorage()->::TSP::Reference::MergeFrom(from.commentstorage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HighlightArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HighlightArchive::CopyFrom(const HighlightArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HighlightArchive::IsInitialized() const {

  if (has_commentstorage()) {
    if (!this->commentstorage().IsInitialized()) return false;
  }
  return true;
}

void HighlightArchive::Swap(HighlightArchive* other) {
  if (other != this) {
    std::swap(commentstorage_, other->commentstorage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HighlightArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HighlightArchive_descriptor_;
  metadata.reflection = HighlightArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FontFeatureArchive::kFeatureTypeFieldNumber;
const int FontFeatureArchive::kFeatureSelectorFieldNumber;
#endif  // !_MSC_VER

FontFeatureArchive::FontFeatureArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FontFeatureArchive::InitAsDefaultInstance() {
}

FontFeatureArchive::FontFeatureArchive(const FontFeatureArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FontFeatureArchive::SharedCtor() {
  _cached_size_ = 0;
  feature_type_ = 0u;
  feature_selector_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FontFeatureArchive::~FontFeatureArchive() {
  SharedDtor();
}

void FontFeatureArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FontFeatureArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FontFeatureArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FontFeatureArchive_descriptor_;
}

const FontFeatureArchive& FontFeatureArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

FontFeatureArchive* FontFeatureArchive::default_instance_ = NULL;

FontFeatureArchive* FontFeatureArchive::New() const {
  return new FontFeatureArchive;
}

void FontFeatureArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    feature_type_ = 0u;
    feature_selector_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FontFeatureArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 feature_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feature_type_)));
          set_has_feature_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_feature_selector;
        break;
      }

      // required uint32 feature_selector = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feature_selector:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feature_selector_)));
          set_has_feature_selector();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FontFeatureArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 feature_type = 1;
  if (has_feature_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->feature_type(), output);
  }

  // required uint32 feature_selector = 2;
  if (has_feature_selector()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->feature_selector(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FontFeatureArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 feature_type = 1;
  if (has_feature_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->feature_type(), target);
  }

  // required uint32 feature_selector = 2;
  if (has_feature_selector()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->feature_selector(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FontFeatureArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 feature_type = 1;
    if (has_feature_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->feature_type());
    }

    // required uint32 feature_selector = 2;
    if (has_feature_selector()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->feature_selector());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FontFeatureArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FontFeatureArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FontFeatureArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FontFeatureArchive::MergeFrom(const FontFeatureArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_feature_type()) {
      set_feature_type(from.feature_type());
    }
    if (from.has_feature_selector()) {
      set_feature_selector(from.feature_selector());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FontFeatureArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FontFeatureArchive::CopyFrom(const FontFeatureArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FontFeatureArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FontFeatureArchive::Swap(FontFeatureArchive* other) {
  if (other != this) {
    std::swap(feature_type_, other->feature_type_);
    std::swap(feature_selector_, other->feature_selector_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FontFeatureArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FontFeatureArchive_descriptor_;
  metadata.reflection = FontFeatureArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CharacterStylePropertiesArchive_CapitalizationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterStylePropertiesArchive_CapitalizationType_descriptor_;
}
bool CharacterStylePropertiesArchive_CapitalizationType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CharacterStylePropertiesArchive_CapitalizationType CharacterStylePropertiesArchive::kNoCaps;
const CharacterStylePropertiesArchive_CapitalizationType CharacterStylePropertiesArchive::kAllCaps;
const CharacterStylePropertiesArchive_CapitalizationType CharacterStylePropertiesArchive::kSmallCaps;
const CharacterStylePropertiesArchive_CapitalizationType CharacterStylePropertiesArchive::kTitled;
const CharacterStylePropertiesArchive_CapitalizationType CharacterStylePropertiesArchive::CapitalizationType_MIN;
const CharacterStylePropertiesArchive_CapitalizationType CharacterStylePropertiesArchive::CapitalizationType_MAX;
const int CharacterStylePropertiesArchive::CapitalizationType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CharacterStylePropertiesArchive_UnderlineType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterStylePropertiesArchive_UnderlineType_descriptor_;
}
bool CharacterStylePropertiesArchive_UnderlineType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CharacterStylePropertiesArchive_UnderlineType CharacterStylePropertiesArchive::kNoUnderline;
const CharacterStylePropertiesArchive_UnderlineType CharacterStylePropertiesArchive::kSingleUnderline;
const CharacterStylePropertiesArchive_UnderlineType CharacterStylePropertiesArchive::kDoubleUnderline;
const CharacterStylePropertiesArchive_UnderlineType CharacterStylePropertiesArchive::kWavyUnderline;
const CharacterStylePropertiesArchive_UnderlineType CharacterStylePropertiesArchive::UnderlineType_MIN;
const CharacterStylePropertiesArchive_UnderlineType CharacterStylePropertiesArchive::UnderlineType_MAX;
const int CharacterStylePropertiesArchive::UnderlineType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CharacterStylePropertiesArchive_LigaturesType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterStylePropertiesArchive_LigaturesType_descriptor_;
}
bool CharacterStylePropertiesArchive_LigaturesType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CharacterStylePropertiesArchive_LigaturesType CharacterStylePropertiesArchive::kRequiredLigatures;
const CharacterStylePropertiesArchive_LigaturesType CharacterStylePropertiesArchive::kStandardLigatures;
const CharacterStylePropertiesArchive_LigaturesType CharacterStylePropertiesArchive::kAllLigatures;
const CharacterStylePropertiesArchive_LigaturesType CharacterStylePropertiesArchive::LigaturesType_MIN;
const CharacterStylePropertiesArchive_LigaturesType CharacterStylePropertiesArchive::LigaturesType_MAX;
const int CharacterStylePropertiesArchive::LigaturesType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CharacterStylePropertiesArchive_StrikethruType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterStylePropertiesArchive_StrikethruType_descriptor_;
}
bool CharacterStylePropertiesArchive_StrikethruType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CharacterStylePropertiesArchive_StrikethruType CharacterStylePropertiesArchive::kNoStrikethru;
const CharacterStylePropertiesArchive_StrikethruType CharacterStylePropertiesArchive::kSingleStrikethru;
const CharacterStylePropertiesArchive_StrikethruType CharacterStylePropertiesArchive::kDoubleStrikethru;
const CharacterStylePropertiesArchive_StrikethruType CharacterStylePropertiesArchive::kTripleStrikethru;
const CharacterStylePropertiesArchive_StrikethruType CharacterStylePropertiesArchive::StrikethruType_MIN;
const CharacterStylePropertiesArchive_StrikethruType CharacterStylePropertiesArchive::StrikethruType_MAX;
const int CharacterStylePropertiesArchive::StrikethruType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CharacterStylePropertiesArchive_SuperscriptType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterStylePropertiesArchive_SuperscriptType_descriptor_;
}
bool CharacterStylePropertiesArchive_SuperscriptType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CharacterStylePropertiesArchive_SuperscriptType CharacterStylePropertiesArchive::kNoScript;
const CharacterStylePropertiesArchive_SuperscriptType CharacterStylePropertiesArchive::kSuperscript;
const CharacterStylePropertiesArchive_SuperscriptType CharacterStylePropertiesArchive::kSubscript;
const CharacterStylePropertiesArchive_SuperscriptType CharacterStylePropertiesArchive::SuperscriptType_MIN;
const CharacterStylePropertiesArchive_SuperscriptType CharacterStylePropertiesArchive::SuperscriptType_MAX;
const int CharacterStylePropertiesArchive::SuperscriptType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CharacterStylePropertiesArchive::kBoldFieldNumber;
const int CharacterStylePropertiesArchive::kItalicFieldNumber;
const int CharacterStylePropertiesArchive::kFontSizeFieldNumber;
const int CharacterStylePropertiesArchive::kFontNameNullFieldNumber;
const int CharacterStylePropertiesArchive::kFontNameFieldNumber;
const int CharacterStylePropertiesArchive::kFontColorNullFieldNumber;
const int CharacterStylePropertiesArchive::kFontColorFieldNumber;
const int CharacterStylePropertiesArchive::kLanguageNullFieldNumber;
const int CharacterStylePropertiesArchive::kLanguageFieldNumber;
const int CharacterStylePropertiesArchive::kSuperscriptFieldNumber;
const int CharacterStylePropertiesArchive::kUnderlineFieldNumber;
const int CharacterStylePropertiesArchive::kStrikethruFieldNumber;
const int CharacterStylePropertiesArchive::kCapitalizationFieldNumber;
const int CharacterStylePropertiesArchive::kBaselineShiftFieldNumber;
const int CharacterStylePropertiesArchive::kKerningFieldNumber;
const int CharacterStylePropertiesArchive::kLigaturesFieldNumber;
const int CharacterStylePropertiesArchive::kOutlineColorNullFieldNumber;
const int CharacterStylePropertiesArchive::kOutlineColorFieldNumber;
const int CharacterStylePropertiesArchive::kOutlineFieldNumber;
const int CharacterStylePropertiesArchive::kShadowNullFieldNumber;
const int CharacterStylePropertiesArchive::kShadowFieldNumber;
const int CharacterStylePropertiesArchive::kStrikethruColorNullFieldNumber;
const int CharacterStylePropertiesArchive::kStrikethruColorFieldNumber;
const int CharacterStylePropertiesArchive::kStrikethruWidthFieldNumber;
const int CharacterStylePropertiesArchive::kBackgroundColorNullFieldNumber;
const int CharacterStylePropertiesArchive::kBackgroundColorFieldNumber;
const int CharacterStylePropertiesArchive::kTrackingFieldNumber;
const int CharacterStylePropertiesArchive::kUnderlineColorNullFieldNumber;
const int CharacterStylePropertiesArchive::kUnderlineColorFieldNumber;
const int CharacterStylePropertiesArchive::kUnderlineWidthFieldNumber;
const int CharacterStylePropertiesArchive::kWordStrikethruFieldNumber;
const int CharacterStylePropertiesArchive::kWordUnderlineFieldNumber;
const int CharacterStylePropertiesArchive::kFontFeaturesNullFieldNumber;
const int CharacterStylePropertiesArchive::kFontFeaturesFieldNumber;
const int CharacterStylePropertiesArchive::kWritingDirectionFieldNumber;
const int CharacterStylePropertiesArchive::kEmphasisMarksNullFieldNumber;
const int CharacterStylePropertiesArchive::kEmphasisMarksFieldNumber;
const int CharacterStylePropertiesArchive::kCompatibilityFontNameNullFieldNumber;
const int CharacterStylePropertiesArchive::kCompatibilityFontNameFieldNumber;
#endif  // !_MSC_VER

CharacterStylePropertiesArchive::CharacterStylePropertiesArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterStylePropertiesArchive::InitAsDefaultInstance() {
  font_color_ = const_cast< ::TSP::Color*>(&::TSP::Color::default_instance());
  outline_color_ = const_cast< ::TSP::Color*>(&::TSP::Color::default_instance());
  shadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  strikethru_color_ = const_cast< ::TSP::Color*>(&::TSP::Color::default_instance());
  background_color_ = const_cast< ::TSP::Color*>(&::TSP::Color::default_instance());
  underline_color_ = const_cast< ::TSP::Color*>(&::TSP::Color::default_instance());
}

CharacterStylePropertiesArchive::CharacterStylePropertiesArchive(const CharacterStylePropertiesArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterStylePropertiesArchive::SharedCtor() {
  _cached_size_ = 0;
  bold_ = false;
  italic_ = false;
  font_size_ = 0;
  font_name_null_ = false;
  font_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  font_color_null_ = false;
  font_color_ = NULL;
  language_null_ = false;
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  superscript_ = 0;
  underline_ = 0;
  strikethru_ = 0;
  capitalization_ = 0;
  baseline_shift_ = 0;
  kerning_ = 0;
  ligatures_ = 0;
  outline_color_null_ = false;
  outline_color_ = NULL;
  outline_ = 0;
  shadow_null_ = false;
  shadow_ = NULL;
  strikethru_color_null_ = false;
  strikethru_color_ = NULL;
  strikethru_width_ = 0;
  background_color_null_ = false;
  background_color_ = NULL;
  tracking_ = 0;
  underline_color_null_ = false;
  underline_color_ = NULL;
  underline_width_ = 0;
  word_strikethru_ = false;
  word_underline_ = false;
  font_features_null_ = false;
  writing_direction_ = -1;
  emphasis_marks_null_ = false;
  emphasis_marks_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  compatibility_font_name_null_ = false;
  compatibility_font_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterStylePropertiesArchive::~CharacterStylePropertiesArchive() {
  SharedDtor();
}

void CharacterStylePropertiesArchive::SharedDtor() {
  if (font_name_ != &::google::protobuf::internal::kEmptyString) {
    delete font_name_;
  }
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    delete language_;
  }
  if (emphasis_marks_ != &::google::protobuf::internal::kEmptyString) {
    delete emphasis_marks_;
  }
  if (compatibility_font_name_ != &::google::protobuf::internal::kEmptyString) {
    delete compatibility_font_name_;
  }
  if (this != default_instance_) {
    delete font_color_;
    delete outline_color_;
    delete shadow_;
    delete strikethru_color_;
    delete background_color_;
    delete underline_color_;
  }
}

void CharacterStylePropertiesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterStylePropertiesArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterStylePropertiesArchive_descriptor_;
}

const CharacterStylePropertiesArchive& CharacterStylePropertiesArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

CharacterStylePropertiesArchive* CharacterStylePropertiesArchive::default_instance_ = NULL;

CharacterStylePropertiesArchive* CharacterStylePropertiesArchive::New() const {
  return new CharacterStylePropertiesArchive;
}

void CharacterStylePropertiesArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bold_ = false;
    italic_ = false;
    font_size_ = 0;
    font_name_null_ = false;
    if (has_font_name()) {
      if (font_name_ != &::google::protobuf::internal::kEmptyString) {
        font_name_->clear();
      }
    }
    font_color_null_ = false;
    if (has_font_color()) {
      if (font_color_ != NULL) font_color_->::TSP::Color::Clear();
    }
    language_null_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::kEmptyString) {
        language_->clear();
      }
    }
    superscript_ = 0;
    underline_ = 0;
    strikethru_ = 0;
    capitalization_ = 0;
    baseline_shift_ = 0;
    kerning_ = 0;
    ligatures_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    outline_color_null_ = false;
    if (has_outline_color()) {
      if (outline_color_ != NULL) outline_color_->::TSP::Color::Clear();
    }
    outline_ = 0;
    shadow_null_ = false;
    if (has_shadow()) {
      if (shadow_ != NULL) shadow_->::TSD::ShadowArchive::Clear();
    }
    strikethru_color_null_ = false;
    if (has_strikethru_color()) {
      if (strikethru_color_ != NULL) strikethru_color_->::TSP::Color::Clear();
    }
    strikethru_width_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    background_color_null_ = false;
    if (has_background_color()) {
      if (background_color_ != NULL) background_color_->::TSP::Color::Clear();
    }
    tracking_ = 0;
    underline_color_null_ = false;
    if (has_underline_color()) {
      if (underline_color_ != NULL) underline_color_->::TSP::Color::Clear();
    }
    underline_width_ = 0;
    word_strikethru_ = false;
    word_underline_ = false;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    font_features_null_ = false;
    writing_direction_ = -1;
    emphasis_marks_null_ = false;
    if (has_emphasis_marks()) {
      if (emphasis_marks_ != &::google::protobuf::internal::kEmptyString) {
        emphasis_marks_->clear();
      }
    }
    compatibility_font_name_null_ = false;
    if (has_compatibility_font_name()) {
      if (compatibility_font_name_ != &::google::protobuf::internal::kEmptyString) {
        compatibility_font_name_->clear();
      }
    }
  }
  font_features_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterStylePropertiesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bold = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bold_)));
          set_has_bold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_italic;
        break;
      }

      // optional bool italic = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_italic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &italic_)));
          set_has_italic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_font_size;
        break;
      }

      // optional float font_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_font_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &font_size_)));
          set_has_font_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_font_name_null;
        break;
      }

      // optional bool font_name_null = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_font_name_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &font_name_null_)));
          set_has_font_name_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_font_name;
        break;
      }

      // optional string font_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_font_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_font_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->font_name().data(), this->font_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_font_color_null;
        break;
      }

      // optional bool font_color_null = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_font_color_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &font_color_null_)));
          set_has_font_color_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_font_color;
        break;
      }

      // optional .TSP.Color font_color = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_font_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_font_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_language_null;
        break;
      }

      // optional bool language_null = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_language_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &language_null_)));
          set_has_language_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_language;
        break;
      }

      // optional string language = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_superscript;
        break;
      }

      // optional .TSWP.CharacterStylePropertiesArchive.SuperscriptType superscript = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_superscript:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::CharacterStylePropertiesArchive_SuperscriptType_IsValid(value)) {
            set_superscript(static_cast< ::TSWP::CharacterStylePropertiesArchive_SuperscriptType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_underline;
        break;
      }

      // optional .TSWP.CharacterStylePropertiesArchive.UnderlineType underline = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_underline:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::CharacterStylePropertiesArchive_UnderlineType_IsValid(value)) {
            set_underline(static_cast< ::TSWP::CharacterStylePropertiesArchive_UnderlineType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_strikethru;
        break;
      }

      // optional .TSWP.CharacterStylePropertiesArchive.StrikethruType strikethru = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strikethru:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::CharacterStylePropertiesArchive_StrikethruType_IsValid(value)) {
            set_strikethru(static_cast< ::TSWP::CharacterStylePropertiesArchive_StrikethruType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_capitalization;
        break;
      }

      // optional .TSWP.CharacterStylePropertiesArchive.CapitalizationType capitalization = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capitalization:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::CharacterStylePropertiesArchive_CapitalizationType_IsValid(value)) {
            set_capitalization(static_cast< ::TSWP::CharacterStylePropertiesArchive_CapitalizationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_baseline_shift;
        break;
      }

      // optional float baseline_shift = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_baseline_shift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &baseline_shift_)));
          set_has_baseline_shift();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_kerning;
        break;
      }

      // optional float kerning = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_kerning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kerning_)));
          set_has_kerning();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_ligatures;
        break;
      }

      // optional .TSWP.CharacterStylePropertiesArchive.LigaturesType ligatures = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ligatures:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::CharacterStylePropertiesArchive_LigaturesType_IsValid(value)) {
            set_ligatures(static_cast< ::TSWP::CharacterStylePropertiesArchive_LigaturesType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_outline_color_null;
        break;
      }

      // optional bool outline_color_null = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outline_color_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &outline_color_null_)));
          set_has_outline_color_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_outline_color;
        break;
      }

      // optional .TSP.Color outline_color = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outline_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_outline_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_outline;
        break;
      }

      // optional float outline = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_outline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &outline_)));
          set_has_outline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_shadow_null;
        break;
      }

      // optional bool shadow_null = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shadow_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shadow_null_)));
          set_has_shadow_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_shadow;
        break;
      }

      // optional .TSD.ShadowArchive shadow = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_strikethru_color_null;
        break;
      }

      // optional bool strikethru_color_null = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strikethru_color_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &strikethru_color_null_)));
          set_has_strikethru_color_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_strikethru_color;
        break;
      }

      // optional .TSP.Color strikethru_color = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strikethru_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strikethru_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_strikethru_width;
        break;
      }

      // optional float strikethru_width = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_strikethru_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &strikethru_width_)));
          set_has_strikethru_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_background_color_null;
        break;
      }

      // optional bool background_color_null = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_background_color_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &background_color_null_)));
          set_has_background_color_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_background_color;
        break;
      }

      // optional .TSP.Color background_color = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_background_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_background_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(221)) goto parse_tracking;
        break;
      }

      // optional float tracking = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tracking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tracking_)));
          set_has_tracking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_underline_color_null;
        break;
      }

      // optional bool underline_color_null = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_underline_color_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &underline_color_null_)));
          set_has_underline_color_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_underline_color;
        break;
      }

      // optional .TSP.Color underline_color = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underline_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_underline_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(245)) goto parse_underline_width;
        break;
      }

      // optional float underline_width = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_underline_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &underline_width_)));
          set_has_underline_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_word_strikethru;
        break;
      }

      // optional bool word_strikethru = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_word_strikethru:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &word_strikethru_)));
          set_has_word_strikethru();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_word_underline;
        break;
      }

      // optional bool word_underline = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_word_underline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &word_underline_)));
          set_has_word_underline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_font_features_null;
        break;
      }

      // optional bool font_features_null = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_font_features_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &font_features_null_)));
          set_has_font_features_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_font_features;
        break;
      }

      // repeated .TSWP.FontFeatureArchive font_features = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_font_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_font_features()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_font_features;
        if (input->ExpectTag(280)) goto parse_writing_direction;
        break;
      }

      // optional .TSWP.WritingDirectionType writing_direction = 35 [default = kWritingDirectionNatural];
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writing_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::WritingDirectionType_IsValid(value)) {
            set_writing_direction(static_cast< ::TSWP::WritingDirectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(35, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_emphasis_marks_null;
        break;
      }

      // optional bool emphasis_marks_null = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emphasis_marks_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &emphasis_marks_null_)));
          set_has_emphasis_marks_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_emphasis_marks;
        break;
      }

      // optional string emphasis_marks = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_emphasis_marks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_emphasis_marks()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->emphasis_marks().data(), this->emphasis_marks().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_compatibility_font_name_null;
        break;
      }

      // optional bool compatibility_font_name_null = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compatibility_font_name_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compatibility_font_name_null_)));
          set_has_compatibility_font_name_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_compatibility_font_name;
        break;
      }

      // optional string compatibility_font_name = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_compatibility_font_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_compatibility_font_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->compatibility_font_name().data(), this->compatibility_font_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterStylePropertiesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bold = 1;
  if (has_bold()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bold(), output);
  }

  // optional bool italic = 2;
  if (has_italic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->italic(), output);
  }

  // optional float font_size = 3;
  if (has_font_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->font_size(), output);
  }

  // optional bool font_name_null = 4;
  if (has_font_name_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->font_name_null(), output);
  }

  // optional string font_name = 5;
  if (has_font_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->font_name().data(), this->font_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->font_name(), output);
  }

  // optional bool font_color_null = 6;
  if (has_font_color_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->font_color_null(), output);
  }

  // optional .TSP.Color font_color = 7;
  if (has_font_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->font_color(), output);
  }

  // optional bool language_null = 8;
  if (has_language_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->language_null(), output);
  }

  // optional string language = 9;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->language(), output);
  }

  // optional .TSWP.CharacterStylePropertiesArchive.SuperscriptType superscript = 10;
  if (has_superscript()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->superscript(), output);
  }

  // optional .TSWP.CharacterStylePropertiesArchive.UnderlineType underline = 11;
  if (has_underline()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->underline(), output);
  }

  // optional .TSWP.CharacterStylePropertiesArchive.StrikethruType strikethru = 12;
  if (has_strikethru()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->strikethru(), output);
  }

  // optional .TSWP.CharacterStylePropertiesArchive.CapitalizationType capitalization = 13;
  if (has_capitalization()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->capitalization(), output);
  }

  // optional float baseline_shift = 14;
  if (has_baseline_shift()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->baseline_shift(), output);
  }

  // optional float kerning = 15;
  if (has_kerning()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->kerning(), output);
  }

  // optional .TSWP.CharacterStylePropertiesArchive.LigaturesType ligatures = 16;
  if (has_ligatures()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->ligatures(), output);
  }

  // optional bool outline_color_null = 17;
  if (has_outline_color_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->outline_color_null(), output);
  }

  // optional .TSP.Color outline_color = 18;
  if (has_outline_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->outline_color(), output);
  }

  // optional float outline = 19;
  if (has_outline()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->outline(), output);
  }

  // optional bool shadow_null = 20;
  if (has_shadow_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->shadow_null(), output);
  }

  // optional .TSD.ShadowArchive shadow = 21;
  if (has_shadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->shadow(), output);
  }

  // optional bool strikethru_color_null = 22;
  if (has_strikethru_color_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->strikethru_color_null(), output);
  }

  // optional .TSP.Color strikethru_color = 23;
  if (has_strikethru_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->strikethru_color(), output);
  }

  // optional float strikethru_width = 24;
  if (has_strikethru_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->strikethru_width(), output);
  }

  // optional bool background_color_null = 25;
  if (has_background_color_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->background_color_null(), output);
  }

  // optional .TSP.Color background_color = 26;
  if (has_background_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->background_color(), output);
  }

  // optional float tracking = 27;
  if (has_tracking()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->tracking(), output);
  }

  // optional bool underline_color_null = 28;
  if (has_underline_color_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->underline_color_null(), output);
  }

  // optional .TSP.Color underline_color = 29;
  if (has_underline_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->underline_color(), output);
  }

  // optional float underline_width = 30;
  if (has_underline_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->underline_width(), output);
  }

  // optional bool word_strikethru = 31;
  if (has_word_strikethru()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->word_strikethru(), output);
  }

  // optional bool word_underline = 32;
  if (has_word_underline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->word_underline(), output);
  }

  // optional bool font_features_null = 33;
  if (has_font_features_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->font_features_null(), output);
  }

  // repeated .TSWP.FontFeatureArchive font_features = 34;
  for (int i = 0; i < this->font_features_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->font_features(i), output);
  }

  // optional .TSWP.WritingDirectionType writing_direction = 35 [default = kWritingDirectionNatural];
  if (has_writing_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      35, this->writing_direction(), output);
  }

  // optional bool emphasis_marks_null = 36;
  if (has_emphasis_marks_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->emphasis_marks_null(), output);
  }

  // optional string emphasis_marks = 37;
  if (has_emphasis_marks()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->emphasis_marks().data(), this->emphasis_marks().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      37, this->emphasis_marks(), output);
  }

  // optional bool compatibility_font_name_null = 38;
  if (has_compatibility_font_name_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(38, this->compatibility_font_name_null(), output);
  }

  // optional string compatibility_font_name = 39;
  if (has_compatibility_font_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->compatibility_font_name().data(), this->compatibility_font_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      39, this->compatibility_font_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterStylePropertiesArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool bold = 1;
  if (has_bold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bold(), target);
  }

  // optional bool italic = 2;
  if (has_italic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->italic(), target);
  }

  // optional float font_size = 3;
  if (has_font_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->font_size(), target);
  }

  // optional bool font_name_null = 4;
  if (has_font_name_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->font_name_null(), target);
  }

  // optional string font_name = 5;
  if (has_font_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->font_name().data(), this->font_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->font_name(), target);
  }

  // optional bool font_color_null = 6;
  if (has_font_color_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->font_color_null(), target);
  }

  // optional .TSP.Color font_color = 7;
  if (has_font_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->font_color(), target);
  }

  // optional bool language_null = 8;
  if (has_language_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->language_null(), target);
  }

  // optional string language = 9;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->language(), target);
  }

  // optional .TSWP.CharacterStylePropertiesArchive.SuperscriptType superscript = 10;
  if (has_superscript()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->superscript(), target);
  }

  // optional .TSWP.CharacterStylePropertiesArchive.UnderlineType underline = 11;
  if (has_underline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->underline(), target);
  }

  // optional .TSWP.CharacterStylePropertiesArchive.StrikethruType strikethru = 12;
  if (has_strikethru()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->strikethru(), target);
  }

  // optional .TSWP.CharacterStylePropertiesArchive.CapitalizationType capitalization = 13;
  if (has_capitalization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->capitalization(), target);
  }

  // optional float baseline_shift = 14;
  if (has_baseline_shift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->baseline_shift(), target);
  }

  // optional float kerning = 15;
  if (has_kerning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->kerning(), target);
  }

  // optional .TSWP.CharacterStylePropertiesArchive.LigaturesType ligatures = 16;
  if (has_ligatures()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->ligatures(), target);
  }

  // optional bool outline_color_null = 17;
  if (has_outline_color_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->outline_color_null(), target);
  }

  // optional .TSP.Color outline_color = 18;
  if (has_outline_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->outline_color(), target);
  }

  // optional float outline = 19;
  if (has_outline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->outline(), target);
  }

  // optional bool shadow_null = 20;
  if (has_shadow_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->shadow_null(), target);
  }

  // optional .TSD.ShadowArchive shadow = 21;
  if (has_shadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->shadow(), target);
  }

  // optional bool strikethru_color_null = 22;
  if (has_strikethru_color_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->strikethru_color_null(), target);
  }

  // optional .TSP.Color strikethru_color = 23;
  if (has_strikethru_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->strikethru_color(), target);
  }

  // optional float strikethru_width = 24;
  if (has_strikethru_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->strikethru_width(), target);
  }

  // optional bool background_color_null = 25;
  if (has_background_color_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->background_color_null(), target);
  }

  // optional .TSP.Color background_color = 26;
  if (has_background_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->background_color(), target);
  }

  // optional float tracking = 27;
  if (has_tracking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->tracking(), target);
  }

  // optional bool underline_color_null = 28;
  if (has_underline_color_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->underline_color_null(), target);
  }

  // optional .TSP.Color underline_color = 29;
  if (has_underline_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->underline_color(), target);
  }

  // optional float underline_width = 30;
  if (has_underline_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->underline_width(), target);
  }

  // optional bool word_strikethru = 31;
  if (has_word_strikethru()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->word_strikethru(), target);
  }

  // optional bool word_underline = 32;
  if (has_word_underline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->word_underline(), target);
  }

  // optional bool font_features_null = 33;
  if (has_font_features_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->font_features_null(), target);
  }

  // repeated .TSWP.FontFeatureArchive font_features = 34;
  for (int i = 0; i < this->font_features_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->font_features(i), target);
  }

  // optional .TSWP.WritingDirectionType writing_direction = 35 [default = kWritingDirectionNatural];
  if (has_writing_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      35, this->writing_direction(), target);
  }

  // optional bool emphasis_marks_null = 36;
  if (has_emphasis_marks_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->emphasis_marks_null(), target);
  }

  // optional string emphasis_marks = 37;
  if (has_emphasis_marks()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->emphasis_marks().data(), this->emphasis_marks().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->emphasis_marks(), target);
  }

  // optional bool compatibility_font_name_null = 38;
  if (has_compatibility_font_name_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(38, this->compatibility_font_name_null(), target);
  }

  // optional string compatibility_font_name = 39;
  if (has_compatibility_font_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->compatibility_font_name().data(), this->compatibility_font_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        39, this->compatibility_font_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterStylePropertiesArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bold = 1;
    if (has_bold()) {
      total_size += 1 + 1;
    }

    // optional bool italic = 2;
    if (has_italic()) {
      total_size += 1 + 1;
    }

    // optional float font_size = 3;
    if (has_font_size()) {
      total_size += 1 + 4;
    }

    // optional bool font_name_null = 4;
    if (has_font_name_null()) {
      total_size += 1 + 1;
    }

    // optional string font_name = 5;
    if (has_font_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->font_name());
    }

    // optional bool font_color_null = 6;
    if (has_font_color_null()) {
      total_size += 1 + 1;
    }

    // optional .TSP.Color font_color = 7;
    if (has_font_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->font_color());
    }

    // optional bool language_null = 8;
    if (has_language_null()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string language = 9;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional .TSWP.CharacterStylePropertiesArchive.SuperscriptType superscript = 10;
    if (has_superscript()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->superscript());
    }

    // optional .TSWP.CharacterStylePropertiesArchive.UnderlineType underline = 11;
    if (has_underline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->underline());
    }

    // optional .TSWP.CharacterStylePropertiesArchive.StrikethruType strikethru = 12;
    if (has_strikethru()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->strikethru());
    }

    // optional .TSWP.CharacterStylePropertiesArchive.CapitalizationType capitalization = 13;
    if (has_capitalization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->capitalization());
    }

    // optional float baseline_shift = 14;
    if (has_baseline_shift()) {
      total_size += 1 + 4;
    }

    // optional float kerning = 15;
    if (has_kerning()) {
      total_size += 1 + 4;
    }

    // optional .TSWP.CharacterStylePropertiesArchive.LigaturesType ligatures = 16;
    if (has_ligatures()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ligatures());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool outline_color_null = 17;
    if (has_outline_color_null()) {
      total_size += 2 + 1;
    }

    // optional .TSP.Color outline_color = 18;
    if (has_outline_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->outline_color());
    }

    // optional float outline = 19;
    if (has_outline()) {
      total_size += 2 + 4;
    }

    // optional bool shadow_null = 20;
    if (has_shadow_null()) {
      total_size += 2 + 1;
    }

    // optional .TSD.ShadowArchive shadow = 21;
    if (has_shadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shadow());
    }

    // optional bool strikethru_color_null = 22;
    if (has_strikethru_color_null()) {
      total_size += 2 + 1;
    }

    // optional .TSP.Color strikethru_color = 23;
    if (has_strikethru_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->strikethru_color());
    }

    // optional float strikethru_width = 24;
    if (has_strikethru_width()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool background_color_null = 25;
    if (has_background_color_null()) {
      total_size += 2 + 1;
    }

    // optional .TSP.Color background_color = 26;
    if (has_background_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->background_color());
    }

    // optional float tracking = 27;
    if (has_tracking()) {
      total_size += 2 + 4;
    }

    // optional bool underline_color_null = 28;
    if (has_underline_color_null()) {
      total_size += 2 + 1;
    }

    // optional .TSP.Color underline_color = 29;
    if (has_underline_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->underline_color());
    }

    // optional float underline_width = 30;
    if (has_underline_width()) {
      total_size += 2 + 4;
    }

    // optional bool word_strikethru = 31;
    if (has_word_strikethru()) {
      total_size += 2 + 1;
    }

    // optional bool word_underline = 32;
    if (has_word_underline()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional bool font_features_null = 33;
    if (has_font_features_null()) {
      total_size += 2 + 1;
    }

    // optional .TSWP.WritingDirectionType writing_direction = 35 [default = kWritingDirectionNatural];
    if (has_writing_direction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->writing_direction());
    }

    // optional bool emphasis_marks_null = 36;
    if (has_emphasis_marks_null()) {
      total_size += 2 + 1;
    }

    // optional string emphasis_marks = 37;
    if (has_emphasis_marks()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->emphasis_marks());
    }

    // optional bool compatibility_font_name_null = 38;
    if (has_compatibility_font_name_null()) {
      total_size += 2 + 1;
    }

    // optional string compatibility_font_name = 39;
    if (has_compatibility_font_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->compatibility_font_name());
    }

  }
  // repeated .TSWP.FontFeatureArchive font_features = 34;
  total_size += 2 * this->font_features_size();
  for (int i = 0; i < this->font_features_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->font_features(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterStylePropertiesArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterStylePropertiesArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterStylePropertiesArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterStylePropertiesArchive::MergeFrom(const CharacterStylePropertiesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  font_features_.MergeFrom(from.font_features_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bold()) {
      set_bold(from.bold());
    }
    if (from.has_italic()) {
      set_italic(from.italic());
    }
    if (from.has_font_size()) {
      set_font_size(from.font_size());
    }
    if (from.has_font_name_null()) {
      set_font_name_null(from.font_name_null());
    }
    if (from.has_font_name()) {
      set_font_name(from.font_name());
    }
    if (from.has_font_color_null()) {
      set_font_color_null(from.font_color_null());
    }
    if (from.has_font_color()) {
      mutable_font_color()->::TSP::Color::MergeFrom(from.font_color());
    }
    if (from.has_language_null()) {
      set_language_null(from.language_null());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_superscript()) {
      set_superscript(from.superscript());
    }
    if (from.has_underline()) {
      set_underline(from.underline());
    }
    if (from.has_strikethru()) {
      set_strikethru(from.strikethru());
    }
    if (from.has_capitalization()) {
      set_capitalization(from.capitalization());
    }
    if (from.has_baseline_shift()) {
      set_baseline_shift(from.baseline_shift());
    }
    if (from.has_kerning()) {
      set_kerning(from.kerning());
    }
    if (from.has_ligatures()) {
      set_ligatures(from.ligatures());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_outline_color_null()) {
      set_outline_color_null(from.outline_color_null());
    }
    if (from.has_outline_color()) {
      mutable_outline_color()->::TSP::Color::MergeFrom(from.outline_color());
    }
    if (from.has_outline()) {
      set_outline(from.outline());
    }
    if (from.has_shadow_null()) {
      set_shadow_null(from.shadow_null());
    }
    if (from.has_shadow()) {
      mutable_shadow()->::TSD::ShadowArchive::MergeFrom(from.shadow());
    }
    if (from.has_strikethru_color_null()) {
      set_strikethru_color_null(from.strikethru_color_null());
    }
    if (from.has_strikethru_color()) {
      mutable_strikethru_color()->::TSP::Color::MergeFrom(from.strikethru_color());
    }
    if (from.has_strikethru_width()) {
      set_strikethru_width(from.strikethru_width());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_background_color_null()) {
      set_background_color_null(from.background_color_null());
    }
    if (from.has_background_color()) {
      mutable_background_color()->::TSP::Color::MergeFrom(from.background_color());
    }
    if (from.has_tracking()) {
      set_tracking(from.tracking());
    }
    if (from.has_underline_color_null()) {
      set_underline_color_null(from.underline_color_null());
    }
    if (from.has_underline_color()) {
      mutable_underline_color()->::TSP::Color::MergeFrom(from.underline_color());
    }
    if (from.has_underline_width()) {
      set_underline_width(from.underline_width());
    }
    if (from.has_word_strikethru()) {
      set_word_strikethru(from.word_strikethru());
    }
    if (from.has_word_underline()) {
      set_word_underline(from.word_underline());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_font_features_null()) {
      set_font_features_null(from.font_features_null());
    }
    if (from.has_writing_direction()) {
      set_writing_direction(from.writing_direction());
    }
    if (from.has_emphasis_marks_null()) {
      set_emphasis_marks_null(from.emphasis_marks_null());
    }
    if (from.has_emphasis_marks()) {
      set_emphasis_marks(from.emphasis_marks());
    }
    if (from.has_compatibility_font_name_null()) {
      set_compatibility_font_name_null(from.compatibility_font_name_null());
    }
    if (from.has_compatibility_font_name()) {
      set_compatibility_font_name(from.compatibility_font_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterStylePropertiesArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterStylePropertiesArchive::CopyFrom(const CharacterStylePropertiesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterStylePropertiesArchive::IsInitialized() const {

  if (has_font_color()) {
    if (!this->font_color().IsInitialized()) return false;
  }
  if (has_outline_color()) {
    if (!this->outline_color().IsInitialized()) return false;
  }
  if (has_shadow()) {
    if (!this->shadow().IsInitialized()) return false;
  }
  if (has_strikethru_color()) {
    if (!this->strikethru_color().IsInitialized()) return false;
  }
  if (has_background_color()) {
    if (!this->background_color().IsInitialized()) return false;
  }
  if (has_underline_color()) {
    if (!this->underline_color().IsInitialized()) return false;
  }
  for (int i = 0; i < font_features_size(); i++) {
    if (!this->font_features(i).IsInitialized()) return false;
  }
  return true;
}

void CharacterStylePropertiesArchive::Swap(CharacterStylePropertiesArchive* other) {
  if (other != this) {
    std::swap(bold_, other->bold_);
    std::swap(italic_, other->italic_);
    std::swap(font_size_, other->font_size_);
    std::swap(font_name_null_, other->font_name_null_);
    std::swap(font_name_, other->font_name_);
    std::swap(font_color_null_, other->font_color_null_);
    std::swap(font_color_, other->font_color_);
    std::swap(language_null_, other->language_null_);
    std::swap(language_, other->language_);
    std::swap(superscript_, other->superscript_);
    std::swap(underline_, other->underline_);
    std::swap(strikethru_, other->strikethru_);
    std::swap(capitalization_, other->capitalization_);
    std::swap(baseline_shift_, other->baseline_shift_);
    std::swap(kerning_, other->kerning_);
    std::swap(ligatures_, other->ligatures_);
    std::swap(outline_color_null_, other->outline_color_null_);
    std::swap(outline_color_, other->outline_color_);
    std::swap(outline_, other->outline_);
    std::swap(shadow_null_, other->shadow_null_);
    std::swap(shadow_, other->shadow_);
    std::swap(strikethru_color_null_, other->strikethru_color_null_);
    std::swap(strikethru_color_, other->strikethru_color_);
    std::swap(strikethru_width_, other->strikethru_width_);
    std::swap(background_color_null_, other->background_color_null_);
    std::swap(background_color_, other->background_color_);
    std::swap(tracking_, other->tracking_);
    std::swap(underline_color_null_, other->underline_color_null_);
    std::swap(underline_color_, other->underline_color_);
    std::swap(underline_width_, other->underline_width_);
    std::swap(word_strikethru_, other->word_strikethru_);
    std::swap(word_underline_, other->word_underline_);
    std::swap(font_features_null_, other->font_features_null_);
    font_features_.Swap(&other->font_features_);
    std::swap(writing_direction_, other->writing_direction_);
    std::swap(emphasis_marks_null_, other->emphasis_marks_null_);
    std::swap(emphasis_marks_, other->emphasis_marks_);
    std::swap(compatibility_font_name_null_, other->compatibility_font_name_null_);
    std::swap(compatibility_font_name_, other->compatibility_font_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterStylePropertiesArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterStylePropertiesArchive_descriptor_;
  metadata.reflection = CharacterStylePropertiesArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterStyleArchive::kSuperFieldNumber;
const int CharacterStyleArchive::kOverrideCountFieldNumber;
const int CharacterStyleArchive::kCharPropertiesFieldNumber;
#endif  // !_MSC_VER

CharacterStyleArchive::CharacterStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterStyleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::StyleArchive*>(&::TSS::StyleArchive::default_instance());
  char_properties_ = const_cast< ::TSWP::CharacterStylePropertiesArchive*>(&::TSWP::CharacterStylePropertiesArchive::default_instance());
}

CharacterStyleArchive::CharacterStyleArchive(const CharacterStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  override_count_ = 0u;
  char_properties_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterStyleArchive::~CharacterStyleArchive() {
  SharedDtor();
}

void CharacterStyleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete char_properties_;
  }
}

void CharacterStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterStyleArchive_descriptor_;
}

const CharacterStyleArchive& CharacterStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

CharacterStyleArchive* CharacterStyleArchive::default_instance_ = NULL;

CharacterStyleArchive* CharacterStyleArchive::New() const {
  return new CharacterStyleArchive;
}

void CharacterStyleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::StyleArchive::Clear();
    }
    override_count_ = 0u;
    if (has_char_properties()) {
      if (char_properties_ != NULL) char_properties_->::TSWP::CharacterStylePropertiesArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSS.StyleArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_override_count;
        break;
      }

      // optional uint32 override_count = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_override_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &override_count_)));
          set_has_override_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_char_properties;
        break;
      }

      // optional .TSWP.CharacterStylePropertiesArchive char_properties = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_char_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_char_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (has_override_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->override_count(), output);
  }

  // optional .TSWP.CharacterStylePropertiesArchive char_properties = 11;
  if (has_char_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->char_properties(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (has_override_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->override_count(), target);
  }

  // optional .TSWP.CharacterStylePropertiesArchive char_properties = 11;
  if (has_char_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->char_properties(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSS.StyleArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional uint32 override_count = 10 [default = 0];
    if (has_override_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->override_count());
    }

    // optional .TSWP.CharacterStylePropertiesArchive char_properties = 11;
    if (has_char_properties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->char_properties());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterStyleArchive::MergeFrom(const CharacterStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::StyleArchive::MergeFrom(from.super());
    }
    if (from.has_override_count()) {
      set_override_count(from.override_count());
    }
    if (from.has_char_properties()) {
      mutable_char_properties()->::TSWP::CharacterStylePropertiesArchive::MergeFrom(from.char_properties());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterStyleArchive::CopyFrom(const CharacterStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterStyleArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_char_properties()) {
    if (!this->char_properties().IsInitialized()) return false;
  }
  return true;
}

void CharacterStyleArchive::Swap(CharacterStyleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(override_count_, other->override_count_);
    std::swap(char_properties_, other->char_properties_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterStyleArchive_descriptor_;
  metadata.reflection = CharacterStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TabArchive_TabAlignmentType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TabArchive_TabAlignmentType_descriptor_;
}
bool TabArchive_TabAlignmentType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TabArchive_TabAlignmentType TabArchive::kTabAlignmentLeft;
const TabArchive_TabAlignmentType TabArchive::kTabAlignmentCenter;
const TabArchive_TabAlignmentType TabArchive::kTabAlignmentRight;
const TabArchive_TabAlignmentType TabArchive::kTabAlignmentDecimal;
const TabArchive_TabAlignmentType TabArchive::TabAlignmentType_MIN;
const TabArchive_TabAlignmentType TabArchive::TabAlignmentType_MAX;
const int TabArchive::TabAlignmentType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TabArchive::kPositionFieldNumber;
const int TabArchive::kAlignmentFieldNumber;
const int TabArchive::kLeaderFieldNumber;
#endif  // !_MSC_VER

TabArchive::TabArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TabArchive::InitAsDefaultInstance() {
}

TabArchive::TabArchive(const TabArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TabArchive::SharedCtor() {
  _cached_size_ = 0;
  position_ = 0;
  alignment_ = 0;
  leader_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TabArchive::~TabArchive() {
  SharedDtor();
}

void TabArchive::SharedDtor() {
  if (leader_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_;
  }
  if (this != default_instance_) {
  }
}

void TabArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TabArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TabArchive_descriptor_;
}

const TabArchive& TabArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

TabArchive* TabArchive::default_instance_ = NULL;

TabArchive* TabArchive::New() const {
  return new TabArchive;
}

void TabArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    position_ = 0;
    alignment_ = 0;
    if (has_leader()) {
      if (leader_ != &::google::protobuf::internal::kEmptyString) {
        leader_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TabArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_alignment;
        break;
      }

      // optional .TSWP.TabArchive.TabAlignmentType alignment = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alignment:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::TabArchive_TabAlignmentType_IsValid(value)) {
            set_alignment(static_cast< ::TSWP::TabArchive_TabAlignmentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_leader;
        break;
      }

      // optional string leader = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leader().data(), this->leader().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TabArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->position(), output);
  }

  // optional .TSWP.TabArchive.TabAlignmentType alignment = 2;
  if (has_alignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->alignment(), output);
  }

  // optional string leader = 3;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader().data(), this->leader().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->leader(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TabArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->position(), target);
  }

  // optional .TSWP.TabArchive.TabAlignmentType alignment = 2;
  if (has_alignment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->alignment(), target);
  }

  // optional string leader = 3;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader().data(), this->leader().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->leader(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TabArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float position = 1;
    if (has_position()) {
      total_size += 1 + 4;
    }

    // optional .TSWP.TabArchive.TabAlignmentType alignment = 2;
    if (has_alignment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->alignment());
    }

    // optional string leader = 3;
    if (has_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TabArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TabArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TabArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TabArchive::MergeFrom(const TabArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_alignment()) {
      set_alignment(from.alignment());
    }
    if (from.has_leader()) {
      set_leader(from.leader());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TabArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TabArchive::CopyFrom(const TabArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TabArchive::IsInitialized() const {

  return true;
}

void TabArchive::Swap(TabArchive* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(alignment_, other->alignment_);
    std::swap(leader_, other->leader_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TabArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TabArchive_descriptor_;
  metadata.reflection = TabArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TabsArchive::kTabsFieldNumber;
#endif  // !_MSC_VER

TabsArchive::TabsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TabsArchive::InitAsDefaultInstance() {
}

TabsArchive::TabsArchive(const TabsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TabsArchive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TabsArchive::~TabsArchive() {
  SharedDtor();
}

void TabsArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TabsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TabsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TabsArchive_descriptor_;
}

const TabsArchive& TabsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

TabsArchive* TabsArchive::default_instance_ = NULL;

TabsArchive* TabsArchive::New() const {
  return new TabsArchive;
}

void TabsArchive::Clear() {
  tabs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TabsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSWP.TabArchive tabs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tabs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tabs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tabs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TabsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSWP.TabArchive tabs = 1;
  for (int i = 0; i < this->tabs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tabs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TabsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSWP.TabArchive tabs = 1;
  for (int i = 0; i < this->tabs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tabs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TabsArchive::ByteSize() const {
  int total_size = 0;

  // repeated .TSWP.TabArchive tabs = 1;
  total_size += 1 * this->tabs_size();
  for (int i = 0; i < this->tabs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tabs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TabsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TabsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TabsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TabsArchive::MergeFrom(const TabsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  tabs_.MergeFrom(from.tabs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TabsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TabsArchive::CopyFrom(const TabsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TabsArchive::IsInitialized() const {

  return true;
}

void TabsArchive::Swap(TabsArchive* other) {
  if (other != this) {
    tabs_.Swap(&other->tabs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TabsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TabsArchive_descriptor_;
  metadata.reflection = TabsArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LineSpacingArchive_LineSpacingModeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineSpacingArchive_LineSpacingModeType_descriptor_;
}
bool LineSpacingArchive_LineSpacingModeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LineSpacingArchive_LineSpacingModeType LineSpacingArchive::kRelativeLineSpacing;
const LineSpacingArchive_LineSpacingModeType LineSpacingArchive::kMinimumLineSpacing;
const LineSpacingArchive_LineSpacingModeType LineSpacingArchive::kExactLineSpacing;
const LineSpacingArchive_LineSpacingModeType LineSpacingArchive::kMaximumLineSpacing;
const LineSpacingArchive_LineSpacingModeType LineSpacingArchive::kSpaceBetweenLineSpacing;
const LineSpacingArchive_LineSpacingModeType LineSpacingArchive::LineSpacingModeType_MIN;
const LineSpacingArchive_LineSpacingModeType LineSpacingArchive::LineSpacingModeType_MAX;
const int LineSpacingArchive::LineSpacingModeType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LineSpacingArchive::kModeFieldNumber;
const int LineSpacingArchive::kAmountFieldNumber;
const int LineSpacingArchive::kBaselineRuleFieldNumber;
#endif  // !_MSC_VER

LineSpacingArchive::LineSpacingArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LineSpacingArchive::InitAsDefaultInstance() {
}

LineSpacingArchive::LineSpacingArchive(const LineSpacingArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LineSpacingArchive::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 0;
  amount_ = 0;
  baselinerule_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineSpacingArchive::~LineSpacingArchive() {
  SharedDtor();
}

void LineSpacingArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LineSpacingArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineSpacingArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineSpacingArchive_descriptor_;
}

const LineSpacingArchive& LineSpacingArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

LineSpacingArchive* LineSpacingArchive::default_instance_ = NULL;

LineSpacingArchive* LineSpacingArchive::New() const {
  return new LineSpacingArchive;
}

void LineSpacingArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mode_ = 0;
    amount_ = 0;
    baselinerule_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LineSpacingArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSWP.LineSpacingArchive.LineSpacingModeType mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::LineSpacingArchive_LineSpacingModeType_IsValid(value)) {
            set_mode(static_cast< ::TSWP::LineSpacingArchive_LineSpacingModeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_amount;
        break;
      }

      // optional float amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_baselineRule;
        break;
      }

      // optional float baselineRule = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_baselineRule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &baselinerule_)));
          set_has_baselinerule();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LineSpacingArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSWP.LineSpacingArchive.LineSpacingModeType mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  // optional float amount = 2;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->amount(), output);
  }

  // optional float baselineRule = 3;
  if (has_baselinerule()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->baselinerule(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LineSpacingArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSWP.LineSpacingArchive.LineSpacingModeType mode = 1;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  // optional float amount = 2;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->amount(), target);
  }

  // optional float baselineRule = 3;
  if (has_baselinerule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->baselinerule(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LineSpacingArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSWP.LineSpacingArchive.LineSpacingModeType mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional float amount = 2;
    if (has_amount()) {
      total_size += 1 + 4;
    }

    // optional float baselineRule = 3;
    if (has_baselinerule()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineSpacingArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LineSpacingArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LineSpacingArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LineSpacingArchive::MergeFrom(const LineSpacingArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_baselinerule()) {
      set_baselinerule(from.baselinerule());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LineSpacingArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineSpacingArchive::CopyFrom(const LineSpacingArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineSpacingArchive::IsInitialized() const {

  return true;
}

void LineSpacingArchive::Swap(LineSpacingArchive* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(amount_, other->amount_);
    std::swap(baselinerule_, other->baselinerule_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LineSpacingArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineSpacingArchive_descriptor_;
  metadata.reflection = LineSpacingArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ParagraphStylePropertiesArchive_TextAlignmentType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParagraphStylePropertiesArchive_TextAlignmentType_descriptor_;
}
bool ParagraphStylePropertiesArchive_TextAlignmentType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ParagraphStylePropertiesArchive_TextAlignmentType ParagraphStylePropertiesArchive::TATvalue0;
const ParagraphStylePropertiesArchive_TextAlignmentType ParagraphStylePropertiesArchive::TATvalue1;
const ParagraphStylePropertiesArchive_TextAlignmentType ParagraphStylePropertiesArchive::TATvalue2;
const ParagraphStylePropertiesArchive_TextAlignmentType ParagraphStylePropertiesArchive::TATvalue3;
const ParagraphStylePropertiesArchive_TextAlignmentType ParagraphStylePropertiesArchive::TATvalue4;
const ParagraphStylePropertiesArchive_TextAlignmentType ParagraphStylePropertiesArchive::TextAlignmentType_MIN;
const ParagraphStylePropertiesArchive_TextAlignmentType ParagraphStylePropertiesArchive::TextAlignmentType_MAX;
const int ParagraphStylePropertiesArchive::TextAlignmentType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ParagraphStylePropertiesArchive_ParagraphBorderType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParagraphStylePropertiesArchive_ParagraphBorderType_descriptor_;
}
bool ParagraphStylePropertiesArchive_ParagraphBorderType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ParagraphStylePropertiesArchive_ParagraphBorderType ParagraphStylePropertiesArchive::PBTvalue0;
const ParagraphStylePropertiesArchive_ParagraphBorderType ParagraphStylePropertiesArchive::PBTvalue1;
const ParagraphStylePropertiesArchive_ParagraphBorderType ParagraphStylePropertiesArchive::PBTvalue2;
const ParagraphStylePropertiesArchive_ParagraphBorderType ParagraphStylePropertiesArchive::PBTvalue3;
const ParagraphStylePropertiesArchive_ParagraphBorderType ParagraphStylePropertiesArchive::PBTvalue4;
const ParagraphStylePropertiesArchive_ParagraphBorderType ParagraphStylePropertiesArchive::ParagraphBorderType_MIN;
const ParagraphStylePropertiesArchive_ParagraphBorderType ParagraphStylePropertiesArchive::ParagraphBorderType_MAX;
const int ParagraphStylePropertiesArchive::ParagraphBorderType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ParagraphStylePropertiesArchive_OutlineStyleType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParagraphStylePropertiesArchive_OutlineStyleType_descriptor_;
}
bool ParagraphStylePropertiesArchive_OutlineStyleType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ParagraphStylePropertiesArchive_OutlineStyleType ParagraphStylePropertiesArchive::OSTvalue0;
const ParagraphStylePropertiesArchive_OutlineStyleType ParagraphStylePropertiesArchive::OSTvalue1;
const ParagraphStylePropertiesArchive_OutlineStyleType ParagraphStylePropertiesArchive::OSTvalue2;
const ParagraphStylePropertiesArchive_OutlineStyleType ParagraphStylePropertiesArchive::OutlineStyleType_MIN;
const ParagraphStylePropertiesArchive_OutlineStyleType ParagraphStylePropertiesArchive::OutlineStyleType_MAX;
const int ParagraphStylePropertiesArchive::OutlineStyleType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ParagraphStylePropertiesArchive::kAlignmentFieldNumber;
const int ParagraphStylePropertiesArchive::kDecimalTabNullFieldNumber;
const int ParagraphStylePropertiesArchive::kDecimalTabFieldNumber;
const int ParagraphStylePropertiesArchive::kDefaultTabStopsFieldNumber;
const int ParagraphStylePropertiesArchive::kFillNullFieldNumber;
const int ParagraphStylePropertiesArchive::kFillFieldNumber;
const int ParagraphStylePropertiesArchive::kFirstLineIndentFieldNumber;
const int ParagraphStylePropertiesArchive::kHyphenateFieldNumber;
const int ParagraphStylePropertiesArchive::kKeepLinesTogetherFieldNumber;
const int ParagraphStylePropertiesArchive::kKeepWithNextFieldNumber;
const int ParagraphStylePropertiesArchive::kLeftIndentFieldNumber;
const int ParagraphStylePropertiesArchive::kLineSpacingNullFieldNumber;
const int ParagraphStylePropertiesArchive::kLineSpacingFieldNumber;
const int ParagraphStylePropertiesArchive::kPageBreakBeforeFieldNumber;
const int ParagraphStylePropertiesArchive::kBordersFieldNumber;
const int ParagraphStylePropertiesArchive::kRuleOffsetNullFieldNumber;
const int ParagraphStylePropertiesArchive::kRuleOffsetFieldNumber;
const int ParagraphStylePropertiesArchive::kRuleWidthFieldNumber;
const int ParagraphStylePropertiesArchive::kRightIndentFieldNumber;
const int ParagraphStylePropertiesArchive::kSpaceAfterFieldNumber;
const int ParagraphStylePropertiesArchive::kSpaceBeforeFieldNumber;
const int ParagraphStylePropertiesArchive::kTabsNullFieldNumber;
const int ParagraphStylePropertiesArchive::kTabsFieldNumber;
const int ParagraphStylePropertiesArchive::kWidowControlFieldNumber;
const int ParagraphStylePropertiesArchive::kOutlineLevelFieldNumber;
const int ParagraphStylePropertiesArchive::kOutlineStyleFieldNumber;
const int ParagraphStylePropertiesArchive::kFollowingStyleIdNullFieldNumber;
const int ParagraphStylePropertiesArchive::kFollowingStyleIdFieldNumber;
const int ParagraphStylePropertiesArchive::kStrokeNullFieldNumber;
const int ParagraphStylePropertiesArchive::kStrokeFieldNumber;
const int ParagraphStylePropertiesArchive::kShowInTocFieldNumber;
const int ParagraphStylePropertiesArchive::kTocStyleIdNullFieldNumber;
const int ParagraphStylePropertiesArchive::kTocStyleIdFieldNumber;
const int ParagraphStylePropertiesArchive::kWritingDirectionFieldNumber;
const int ParagraphStylePropertiesArchive::kListStyleNullFieldNumber;
const int ParagraphStylePropertiesArchive::kListStyleFieldNumber;
const int ParagraphStylePropertiesArchive::kFollowingStyleNullFieldNumber;
const int ParagraphStylePropertiesArchive::kFollowingStyleFieldNumber;
#endif  // !_MSC_VER

ParagraphStylePropertiesArchive::ParagraphStylePropertiesArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParagraphStylePropertiesArchive::InitAsDefaultInstance() {
  fill_ = const_cast< ::TSP::Color*>(&::TSP::Color::default_instance());
  line_spacing_ = const_cast< ::TSWP::LineSpacingArchive*>(&::TSWP::LineSpacingArchive::default_instance());
  rule_offset_ = const_cast< ::TSP::Point*>(&::TSP::Point::default_instance());
  tabs_ = const_cast< ::TSWP::TabsArchive*>(&::TSWP::TabsArchive::default_instance());
  stroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  list_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  following_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ParagraphStylePropertiesArchive::ParagraphStylePropertiesArchive(const ParagraphStylePropertiesArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParagraphStylePropertiesArchive::SharedCtor() {
  _cached_size_ = 0;
  alignment_ = 0;
  decimal_tab_null_ = false;
  decimal_tab_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  default_tab_stops_ = 0;
  fill_null_ = false;
  fill_ = NULL;
  first_line_indent_ = 0;
  hyphenate_ = false;
  keep_lines_together_ = false;
  keep_with_next_ = false;
  left_indent_ = 0;
  line_spacing_null_ = false;
  line_spacing_ = NULL;
  page_break_before_ = false;
  borders_ = 0;
  rule_offset_null_ = false;
  rule_offset_ = NULL;
  rule_width_ = 0;
  right_indent_ = 0;
  space_after_ = 0;
  space_before_ = 0;
  tabs_null_ = false;
  tabs_ = NULL;
  widow_control_ = false;
  outline_level_ = 0u;
  outline_style_ = 0;
  following_style_id_null_ = false;
  following_style_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stroke_null_ = false;
  stroke_ = NULL;
  show_in_toc_ = false;
  toc_style_id_null_ = false;
  toc_style_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  writing_direction_ = -1;
  list_style_null_ = false;
  list_style_ = NULL;
  following_style_null_ = false;
  following_style_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParagraphStylePropertiesArchive::~ParagraphStylePropertiesArchive() {
  SharedDtor();
}

void ParagraphStylePropertiesArchive::SharedDtor() {
  if (decimal_tab_ != &::google::protobuf::internal::kEmptyString) {
    delete decimal_tab_;
  }
  if (following_style_id_ != &::google::protobuf::internal::kEmptyString) {
    delete following_style_id_;
  }
  if (toc_style_id_ != &::google::protobuf::internal::kEmptyString) {
    delete toc_style_id_;
  }
  if (this != default_instance_) {
    delete fill_;
    delete line_spacing_;
    delete rule_offset_;
    delete tabs_;
    delete stroke_;
    delete list_style_;
    delete following_style_;
  }
}

void ParagraphStylePropertiesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParagraphStylePropertiesArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParagraphStylePropertiesArchive_descriptor_;
}

const ParagraphStylePropertiesArchive& ParagraphStylePropertiesArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

ParagraphStylePropertiesArchive* ParagraphStylePropertiesArchive::default_instance_ = NULL;

ParagraphStylePropertiesArchive* ParagraphStylePropertiesArchive::New() const {
  return new ParagraphStylePropertiesArchive;
}

void ParagraphStylePropertiesArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    alignment_ = 0;
    decimal_tab_null_ = false;
    if (has_decimal_tab()) {
      if (decimal_tab_ != &::google::protobuf::internal::kEmptyString) {
        decimal_tab_->clear();
      }
    }
    default_tab_stops_ = 0;
    fill_null_ = false;
    if (has_fill()) {
      if (fill_ != NULL) fill_->::TSP::Color::Clear();
    }
    first_line_indent_ = 0;
    hyphenate_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    keep_lines_together_ = false;
    keep_with_next_ = false;
    left_indent_ = 0;
    line_spacing_null_ = false;
    if (has_line_spacing()) {
      if (line_spacing_ != NULL) line_spacing_->::TSWP::LineSpacingArchive::Clear();
    }
    page_break_before_ = false;
    borders_ = 0;
    rule_offset_null_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_rule_offset()) {
      if (rule_offset_ != NULL) rule_offset_->::TSP::Point::Clear();
    }
    rule_width_ = 0;
    right_indent_ = 0;
    space_after_ = 0;
    space_before_ = 0;
    tabs_null_ = false;
    if (has_tabs()) {
      if (tabs_ != NULL) tabs_->::TSWP::TabsArchive::Clear();
    }
    widow_control_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    outline_level_ = 0u;
    outline_style_ = 0;
    following_style_id_null_ = false;
    if (has_following_style_id()) {
      if (following_style_id_ != &::google::protobuf::internal::kEmptyString) {
        following_style_id_->clear();
      }
    }
    stroke_null_ = false;
    if (has_stroke()) {
      if (stroke_ != NULL) stroke_->::TSD::StrokeArchive::Clear();
    }
    show_in_toc_ = false;
    toc_style_id_null_ = false;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_toc_style_id()) {
      if (toc_style_id_ != &::google::protobuf::internal::kEmptyString) {
        toc_style_id_->clear();
      }
    }
    writing_direction_ = -1;
    list_style_null_ = false;
    if (has_list_style()) {
      if (list_style_ != NULL) list_style_->::TSP::Reference::Clear();
    }
    following_style_null_ = false;
    if (has_following_style()) {
      if (following_style_ != NULL) following_style_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParagraphStylePropertiesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSWP.ParagraphStylePropertiesArchive.TextAlignmentType alignment = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::ParagraphStylePropertiesArchive_TextAlignmentType_IsValid(value)) {
            set_alignment(static_cast< ::TSWP::ParagraphStylePropertiesArchive_TextAlignmentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_decimal_tab_null;
        break;
      }

      // optional bool decimal_tab_null = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_decimal_tab_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &decimal_tab_null_)));
          set_has_decimal_tab_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_decimal_tab;
        break;
      }

      // optional string decimal_tab = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_decimal_tab:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_decimal_tab()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->decimal_tab().data(), this->decimal_tab().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_default_tab_stops;
        break;
      }

      // optional float default_tab_stops = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_default_tab_stops:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &default_tab_stops_)));
          set_has_default_tab_stops();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fill_null;
        break;
      }

      // optional bool fill_null = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fill_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fill_null_)));
          set_has_fill_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_fill;
        break;
      }

      // optional .TSP.Color fill = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_first_line_indent;
        break;
      }

      // optional float first_line_indent = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_first_line_indent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &first_line_indent_)));
          set_has_first_line_indent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hyphenate;
        break;
      }

      // optional bool hyphenate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hyphenate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hyphenate_)));
          set_has_hyphenate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_keep_lines_together;
        break;
      }

      // optional bool keep_lines_together = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keep_lines_together:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keep_lines_together_)));
          set_has_keep_lines_together();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_keep_with_next;
        break;
      }

      // optional bool keep_with_next = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keep_with_next:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keep_with_next_)));
          set_has_keep_with_next();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_left_indent;
        break;
      }

      // optional float left_indent = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_left_indent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_indent_)));
          set_has_left_indent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_line_spacing_null;
        break;
      }

      // optional bool line_spacing_null = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_line_spacing_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &line_spacing_null_)));
          set_has_line_spacing_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_line_spacing;
        break;
      }

      // optional .TSWP.LineSpacingArchive line_spacing = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_line_spacing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_line_spacing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_page_break_before;
        break;
      }

      // optional bool page_break_before = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_break_before:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &page_break_before_)));
          set_has_page_break_before();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_borders;
        break;
      }

      // optional .TSWP.ParagraphStylePropertiesArchive.ParagraphBorderType borders = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_borders:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::ParagraphStylePropertiesArchive_ParagraphBorderType_IsValid(value)) {
            set_borders(static_cast< ::TSWP::ParagraphStylePropertiesArchive_ParagraphBorderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_rule_offset_null;
        break;
      }

      // optional bool rule_offset_null = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rule_offset_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rule_offset_null_)));
          set_has_rule_offset_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_rule_offset;
        break;
      }

      // optional .TSP.Point rule_offset = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rule_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rule_offset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_rule_width;
        break;
      }

      // optional float rule_width = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rule_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rule_width_)));
          set_has_rule_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_right_indent;
        break;
      }

      // optional float right_indent = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_right_indent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_indent_)));
          set_has_right_indent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_space_after;
        break;
      }

      // optional float space_after = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_space_after:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &space_after_)));
          set_has_space_after();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_space_before;
        break;
      }

      // optional float space_before = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_space_before:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &space_before_)));
          set_has_space_before();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_tabs_null;
        break;
      }

      // optional bool tabs_null = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabs_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tabs_null_)));
          set_has_tabs_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_tabs;
        break;
      }

      // optional .TSWP.TabsArchive tabs = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tabs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tabs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_widow_control;
        break;
      }

      // optional bool widow_control = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_widow_control:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &widow_control_)));
          set_has_widow_control();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_outline_level;
        break;
      }

      // optional uint32 outline_level = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outline_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &outline_level_)));
          set_has_outline_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_outline_style;
        break;
      }

      // optional .TSWP.ParagraphStylePropertiesArchive.OutlineStyleType outline_style = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outline_style:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::ParagraphStylePropertiesArchive_OutlineStyleType_IsValid(value)) {
            set_outline_style(static_cast< ::TSWP::ParagraphStylePropertiesArchive_OutlineStyleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(28, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_following_style_id_null;
        break;
      }

      // optional bool following_style_id_null = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_following_style_id_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &following_style_id_null_)));
          set_has_following_style_id_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_following_style_id;
        break;
      }

      // optional string following_style_id = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_following_style_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_following_style_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->following_style_id().data(), this->following_style_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_stroke_null;
        break;
      }

      // optional bool stroke_null = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stroke_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stroke_null_)));
          set_has_stroke_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_stroke;
        break;
      }

      // optional .TSD.StrokeArchive stroke = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_show_in_toc;
        break;
      }

      // optional bool show_in_toc = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_in_toc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_in_toc_)));
          set_has_show_in_toc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_toc_style_id_null;
        break;
      }

      // optional bool toc_style_id_null = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toc_style_id_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &toc_style_id_null_)));
          set_has_toc_style_id_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_toc_style_id;
        break;
      }

      // optional string toc_style_id = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toc_style_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_toc_style_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->toc_style_id().data(), this->toc_style_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_writing_direction;
        break;
      }

      // optional .TSWP.WritingDirectionType writing_direction = 38 [default = kWritingDirectionNatural];
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writing_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::WritingDirectionType_IsValid(value)) {
            set_writing_direction(static_cast< ::TSWP::WritingDirectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(38, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_list_style_null;
        break;
      }

      // optional bool list_style_null = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list_style_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &list_style_null_)));
          set_has_list_style_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_list_style;
        break;
      }

      // optional .TSP.Reference list_style = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_following_style_null;
        break;
      }

      // optional bool following_style_null = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_following_style_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &following_style_null_)));
          set_has_following_style_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_following_style;
        break;
      }

      // optional .TSP.Reference following_style = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_following_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_following_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParagraphStylePropertiesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSWP.ParagraphStylePropertiesArchive.TextAlignmentType alignment = 1;
  if (has_alignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->alignment(), output);
  }

  // optional bool decimal_tab_null = 2;
  if (has_decimal_tab_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->decimal_tab_null(), output);
  }

  // optional string decimal_tab = 3;
  if (has_decimal_tab()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->decimal_tab().data(), this->decimal_tab().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->decimal_tab(), output);
  }

  // optional float default_tab_stops = 4;
  if (has_default_tab_stops()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->default_tab_stops(), output);
  }

  // optional bool fill_null = 5;
  if (has_fill_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->fill_null(), output);
  }

  // optional .TSP.Color fill = 6;
  if (has_fill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->fill(), output);
  }

  // optional float first_line_indent = 7;
  if (has_first_line_indent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->first_line_indent(), output);
  }

  // optional bool hyphenate = 8;
  if (has_hyphenate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->hyphenate(), output);
  }

  // optional bool keep_lines_together = 9;
  if (has_keep_lines_together()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->keep_lines_together(), output);
  }

  // optional bool keep_with_next = 10;
  if (has_keep_with_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->keep_with_next(), output);
  }

  // optional float left_indent = 11;
  if (has_left_indent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->left_indent(), output);
  }

  // optional bool line_spacing_null = 12;
  if (has_line_spacing_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->line_spacing_null(), output);
  }

  // optional .TSWP.LineSpacingArchive line_spacing = 13;
  if (has_line_spacing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->line_spacing(), output);
  }

  // optional bool page_break_before = 14;
  if (has_page_break_before()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->page_break_before(), output);
  }

  // optional .TSWP.ParagraphStylePropertiesArchive.ParagraphBorderType borders = 15;
  if (has_borders()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->borders(), output);
  }

  // optional bool rule_offset_null = 16;
  if (has_rule_offset_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->rule_offset_null(), output);
  }

  // optional .TSP.Point rule_offset = 17;
  if (has_rule_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->rule_offset(), output);
  }

  // optional float rule_width = 18;
  if (has_rule_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->rule_width(), output);
  }

  // optional float right_indent = 19;
  if (has_right_indent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->right_indent(), output);
  }

  // optional float space_after = 20;
  if (has_space_after()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->space_after(), output);
  }

  // optional float space_before = 21;
  if (has_space_before()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->space_before(), output);
  }

  // optional bool tabs_null = 24;
  if (has_tabs_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->tabs_null(), output);
  }

  // optional .TSWP.TabsArchive tabs = 25;
  if (has_tabs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->tabs(), output);
  }

  // optional bool widow_control = 26;
  if (has_widow_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->widow_control(), output);
  }

  // optional uint32 outline_level = 27;
  if (has_outline_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->outline_level(), output);
  }

  // optional .TSWP.ParagraphStylePropertiesArchive.OutlineStyleType outline_style = 28;
  if (has_outline_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      28, this->outline_style(), output);
  }

  // optional bool following_style_id_null = 29;
  if (has_following_style_id_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->following_style_id_null(), output);
  }

  // optional string following_style_id = 30;
  if (has_following_style_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->following_style_id().data(), this->following_style_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->following_style_id(), output);
  }

  // optional bool stroke_null = 31;
  if (has_stroke_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->stroke_null(), output);
  }

  // optional .TSD.StrokeArchive stroke = 32;
  if (has_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->stroke(), output);
  }

  // optional bool show_in_toc = 33;
  if (has_show_in_toc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->show_in_toc(), output);
  }

  // optional bool toc_style_id_null = 34;
  if (has_toc_style_id_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->toc_style_id_null(), output);
  }

  // optional string toc_style_id = 35;
  if (has_toc_style_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->toc_style_id().data(), this->toc_style_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      35, this->toc_style_id(), output);
  }

  // optional .TSWP.WritingDirectionType writing_direction = 38 [default = kWritingDirectionNatural];
  if (has_writing_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      38, this->writing_direction(), output);
  }

  // optional bool list_style_null = 39;
  if (has_list_style_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(39, this->list_style_null(), output);
  }

  // optional .TSP.Reference list_style = 40;
  if (has_list_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->list_style(), output);
  }

  // optional bool following_style_null = 41;
  if (has_following_style_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->following_style_null(), output);
  }

  // optional .TSP.Reference following_style = 42;
  if (has_following_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->following_style(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParagraphStylePropertiesArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSWP.ParagraphStylePropertiesArchive.TextAlignmentType alignment = 1;
  if (has_alignment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->alignment(), target);
  }

  // optional bool decimal_tab_null = 2;
  if (has_decimal_tab_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->decimal_tab_null(), target);
  }

  // optional string decimal_tab = 3;
  if (has_decimal_tab()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->decimal_tab().data(), this->decimal_tab().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->decimal_tab(), target);
  }

  // optional float default_tab_stops = 4;
  if (has_default_tab_stops()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->default_tab_stops(), target);
  }

  // optional bool fill_null = 5;
  if (has_fill_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->fill_null(), target);
  }

  // optional .TSP.Color fill = 6;
  if (has_fill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->fill(), target);
  }

  // optional float first_line_indent = 7;
  if (has_first_line_indent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->first_line_indent(), target);
  }

  // optional bool hyphenate = 8;
  if (has_hyphenate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->hyphenate(), target);
  }

  // optional bool keep_lines_together = 9;
  if (has_keep_lines_together()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->keep_lines_together(), target);
  }

  // optional bool keep_with_next = 10;
  if (has_keep_with_next()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->keep_with_next(), target);
  }

  // optional float left_indent = 11;
  if (has_left_indent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->left_indent(), target);
  }

  // optional bool line_spacing_null = 12;
  if (has_line_spacing_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->line_spacing_null(), target);
  }

  // optional .TSWP.LineSpacingArchive line_spacing = 13;
  if (has_line_spacing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->line_spacing(), target);
  }

  // optional bool page_break_before = 14;
  if (has_page_break_before()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->page_break_before(), target);
  }

  // optional .TSWP.ParagraphStylePropertiesArchive.ParagraphBorderType borders = 15;
  if (has_borders()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->borders(), target);
  }

  // optional bool rule_offset_null = 16;
  if (has_rule_offset_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->rule_offset_null(), target);
  }

  // optional .TSP.Point rule_offset = 17;
  if (has_rule_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->rule_offset(), target);
  }

  // optional float rule_width = 18;
  if (has_rule_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->rule_width(), target);
  }

  // optional float right_indent = 19;
  if (has_right_indent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->right_indent(), target);
  }

  // optional float space_after = 20;
  if (has_space_after()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->space_after(), target);
  }

  // optional float space_before = 21;
  if (has_space_before()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->space_before(), target);
  }

  // optional bool tabs_null = 24;
  if (has_tabs_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->tabs_null(), target);
  }

  // optional .TSWP.TabsArchive tabs = 25;
  if (has_tabs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->tabs(), target);
  }

  // optional bool widow_control = 26;
  if (has_widow_control()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->widow_control(), target);
  }

  // optional uint32 outline_level = 27;
  if (has_outline_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->outline_level(), target);
  }

  // optional .TSWP.ParagraphStylePropertiesArchive.OutlineStyleType outline_style = 28;
  if (has_outline_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      28, this->outline_style(), target);
  }

  // optional bool following_style_id_null = 29;
  if (has_following_style_id_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->following_style_id_null(), target);
  }

  // optional string following_style_id = 30;
  if (has_following_style_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->following_style_id().data(), this->following_style_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->following_style_id(), target);
  }

  // optional bool stroke_null = 31;
  if (has_stroke_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->stroke_null(), target);
  }

  // optional .TSD.StrokeArchive stroke = 32;
  if (has_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->stroke(), target);
  }

  // optional bool show_in_toc = 33;
  if (has_show_in_toc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->show_in_toc(), target);
  }

  // optional bool toc_style_id_null = 34;
  if (has_toc_style_id_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->toc_style_id_null(), target);
  }

  // optional string toc_style_id = 35;
  if (has_toc_style_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->toc_style_id().data(), this->toc_style_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->toc_style_id(), target);
  }

  // optional .TSWP.WritingDirectionType writing_direction = 38 [default = kWritingDirectionNatural];
  if (has_writing_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      38, this->writing_direction(), target);
  }

  // optional bool list_style_null = 39;
  if (has_list_style_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(39, this->list_style_null(), target);
  }

  // optional .TSP.Reference list_style = 40;
  if (has_list_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->list_style(), target);
  }

  // optional bool following_style_null = 41;
  if (has_following_style_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->following_style_null(), target);
  }

  // optional .TSP.Reference following_style = 42;
  if (has_following_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->following_style(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParagraphStylePropertiesArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSWP.ParagraphStylePropertiesArchive.TextAlignmentType alignment = 1;
    if (has_alignment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->alignment());
    }

    // optional bool decimal_tab_null = 2;
    if (has_decimal_tab_null()) {
      total_size += 1 + 1;
    }

    // optional string decimal_tab = 3;
    if (has_decimal_tab()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->decimal_tab());
    }

    // optional float default_tab_stops = 4;
    if (has_default_tab_stops()) {
      total_size += 1 + 4;
    }

    // optional bool fill_null = 5;
    if (has_fill_null()) {
      total_size += 1 + 1;
    }

    // optional .TSP.Color fill = 6;
    if (has_fill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fill());
    }

    // optional float first_line_indent = 7;
    if (has_first_line_indent()) {
      total_size += 1 + 4;
    }

    // optional bool hyphenate = 8;
    if (has_hyphenate()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool keep_lines_together = 9;
    if (has_keep_lines_together()) {
      total_size += 1 + 1;
    }

    // optional bool keep_with_next = 10;
    if (has_keep_with_next()) {
      total_size += 1 + 1;
    }

    // optional float left_indent = 11;
    if (has_left_indent()) {
      total_size += 1 + 4;
    }

    // optional bool line_spacing_null = 12;
    if (has_line_spacing_null()) {
      total_size += 1 + 1;
    }

    // optional .TSWP.LineSpacingArchive line_spacing = 13;
    if (has_line_spacing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->line_spacing());
    }

    // optional bool page_break_before = 14;
    if (has_page_break_before()) {
      total_size += 1 + 1;
    }

    // optional .TSWP.ParagraphStylePropertiesArchive.ParagraphBorderType borders = 15;
    if (has_borders()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->borders());
    }

    // optional bool rule_offset_null = 16;
    if (has_rule_offset_null()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .TSP.Point rule_offset = 17;
    if (has_rule_offset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rule_offset());
    }

    // optional float rule_width = 18;
    if (has_rule_width()) {
      total_size += 2 + 4;
    }

    // optional float right_indent = 19;
    if (has_right_indent()) {
      total_size += 2 + 4;
    }

    // optional float space_after = 20;
    if (has_space_after()) {
      total_size += 2 + 4;
    }

    // optional float space_before = 21;
    if (has_space_before()) {
      total_size += 2 + 4;
    }

    // optional bool tabs_null = 24;
    if (has_tabs_null()) {
      total_size += 2 + 1;
    }

    // optional .TSWP.TabsArchive tabs = 25;
    if (has_tabs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tabs());
    }

    // optional bool widow_control = 26;
    if (has_widow_control()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 outline_level = 27;
    if (has_outline_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->outline_level());
    }

    // optional .TSWP.ParagraphStylePropertiesArchive.OutlineStyleType outline_style = 28;
    if (has_outline_style()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->outline_style());
    }

    // optional bool following_style_id_null = 29;
    if (has_following_style_id_null()) {
      total_size += 2 + 1;
    }

    // optional string following_style_id = 30;
    if (has_following_style_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->following_style_id());
    }

    // optional bool stroke_null = 31;
    if (has_stroke_null()) {
      total_size += 2 + 1;
    }

    // optional .TSD.StrokeArchive stroke = 32;
    if (has_stroke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stroke());
    }

    // optional bool show_in_toc = 33;
    if (has_show_in_toc()) {
      total_size += 2 + 1;
    }

    // optional bool toc_style_id_null = 34;
    if (has_toc_style_id_null()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional string toc_style_id = 35;
    if (has_toc_style_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->toc_style_id());
    }

    // optional .TSWP.WritingDirectionType writing_direction = 38 [default = kWritingDirectionNatural];
    if (has_writing_direction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->writing_direction());
    }

    // optional bool list_style_null = 39;
    if (has_list_style_null()) {
      total_size += 2 + 1;
    }

    // optional .TSP.Reference list_style = 40;
    if (has_list_style()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_style());
    }

    // optional bool following_style_null = 41;
    if (has_following_style_null()) {
      total_size += 2 + 1;
    }

    // optional .TSP.Reference following_style = 42;
    if (has_following_style()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->following_style());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParagraphStylePropertiesArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParagraphStylePropertiesArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParagraphStylePropertiesArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParagraphStylePropertiesArchive::MergeFrom(const ParagraphStylePropertiesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alignment()) {
      set_alignment(from.alignment());
    }
    if (from.has_decimal_tab_null()) {
      set_decimal_tab_null(from.decimal_tab_null());
    }
    if (from.has_decimal_tab()) {
      set_decimal_tab(from.decimal_tab());
    }
    if (from.has_default_tab_stops()) {
      set_default_tab_stops(from.default_tab_stops());
    }
    if (from.has_fill_null()) {
      set_fill_null(from.fill_null());
    }
    if (from.has_fill()) {
      mutable_fill()->::TSP::Color::MergeFrom(from.fill());
    }
    if (from.has_first_line_indent()) {
      set_first_line_indent(from.first_line_indent());
    }
    if (from.has_hyphenate()) {
      set_hyphenate(from.hyphenate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_keep_lines_together()) {
      set_keep_lines_together(from.keep_lines_together());
    }
    if (from.has_keep_with_next()) {
      set_keep_with_next(from.keep_with_next());
    }
    if (from.has_left_indent()) {
      set_left_indent(from.left_indent());
    }
    if (from.has_line_spacing_null()) {
      set_line_spacing_null(from.line_spacing_null());
    }
    if (from.has_line_spacing()) {
      mutable_line_spacing()->::TSWP::LineSpacingArchive::MergeFrom(from.line_spacing());
    }
    if (from.has_page_break_before()) {
      set_page_break_before(from.page_break_before());
    }
    if (from.has_borders()) {
      set_borders(from.borders());
    }
    if (from.has_rule_offset_null()) {
      set_rule_offset_null(from.rule_offset_null());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_rule_offset()) {
      mutable_rule_offset()->::TSP::Point::MergeFrom(from.rule_offset());
    }
    if (from.has_rule_width()) {
      set_rule_width(from.rule_width());
    }
    if (from.has_right_indent()) {
      set_right_indent(from.right_indent());
    }
    if (from.has_space_after()) {
      set_space_after(from.space_after());
    }
    if (from.has_space_before()) {
      set_space_before(from.space_before());
    }
    if (from.has_tabs_null()) {
      set_tabs_null(from.tabs_null());
    }
    if (from.has_tabs()) {
      mutable_tabs()->::TSWP::TabsArchive::MergeFrom(from.tabs());
    }
    if (from.has_widow_control()) {
      set_widow_control(from.widow_control());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_outline_level()) {
      set_outline_level(from.outline_level());
    }
    if (from.has_outline_style()) {
      set_outline_style(from.outline_style());
    }
    if (from.has_following_style_id_null()) {
      set_following_style_id_null(from.following_style_id_null());
    }
    if (from.has_following_style_id()) {
      set_following_style_id(from.following_style_id());
    }
    if (from.has_stroke_null()) {
      set_stroke_null(from.stroke_null());
    }
    if (from.has_stroke()) {
      mutable_stroke()->::TSD::StrokeArchive::MergeFrom(from.stroke());
    }
    if (from.has_show_in_toc()) {
      set_show_in_toc(from.show_in_toc());
    }
    if (from.has_toc_style_id_null()) {
      set_toc_style_id_null(from.toc_style_id_null());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_toc_style_id()) {
      set_toc_style_id(from.toc_style_id());
    }
    if (from.has_writing_direction()) {
      set_writing_direction(from.writing_direction());
    }
    if (from.has_list_style_null()) {
      set_list_style_null(from.list_style_null());
    }
    if (from.has_list_style()) {
      mutable_list_style()->::TSP::Reference::MergeFrom(from.list_style());
    }
    if (from.has_following_style_null()) {
      set_following_style_null(from.following_style_null());
    }
    if (from.has_following_style()) {
      mutable_following_style()->::TSP::Reference::MergeFrom(from.following_style());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParagraphStylePropertiesArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParagraphStylePropertiesArchive::CopyFrom(const ParagraphStylePropertiesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParagraphStylePropertiesArchive::IsInitialized() const {

  if (has_fill()) {
    if (!this->fill().IsInitialized()) return false;
  }
  if (has_rule_offset()) {
    if (!this->rule_offset().IsInitialized()) return false;
  }
  if (has_stroke()) {
    if (!this->stroke().IsInitialized()) return false;
  }
  if (has_list_style()) {
    if (!this->list_style().IsInitialized()) return false;
  }
  if (has_following_style()) {
    if (!this->following_style().IsInitialized()) return false;
  }
  return true;
}

void ParagraphStylePropertiesArchive::Swap(ParagraphStylePropertiesArchive* other) {
  if (other != this) {
    std::swap(alignment_, other->alignment_);
    std::swap(decimal_tab_null_, other->decimal_tab_null_);
    std::swap(decimal_tab_, other->decimal_tab_);
    std::swap(default_tab_stops_, other->default_tab_stops_);
    std::swap(fill_null_, other->fill_null_);
    std::swap(fill_, other->fill_);
    std::swap(first_line_indent_, other->first_line_indent_);
    std::swap(hyphenate_, other->hyphenate_);
    std::swap(keep_lines_together_, other->keep_lines_together_);
    std::swap(keep_with_next_, other->keep_with_next_);
    std::swap(left_indent_, other->left_indent_);
    std::swap(line_spacing_null_, other->line_spacing_null_);
    std::swap(line_spacing_, other->line_spacing_);
    std::swap(page_break_before_, other->page_break_before_);
    std::swap(borders_, other->borders_);
    std::swap(rule_offset_null_, other->rule_offset_null_);
    std::swap(rule_offset_, other->rule_offset_);
    std::swap(rule_width_, other->rule_width_);
    std::swap(right_indent_, other->right_indent_);
    std::swap(space_after_, other->space_after_);
    std::swap(space_before_, other->space_before_);
    std::swap(tabs_null_, other->tabs_null_);
    std::swap(tabs_, other->tabs_);
    std::swap(widow_control_, other->widow_control_);
    std::swap(outline_level_, other->outline_level_);
    std::swap(outline_style_, other->outline_style_);
    std::swap(following_style_id_null_, other->following_style_id_null_);
    std::swap(following_style_id_, other->following_style_id_);
    std::swap(stroke_null_, other->stroke_null_);
    std::swap(stroke_, other->stroke_);
    std::swap(show_in_toc_, other->show_in_toc_);
    std::swap(toc_style_id_null_, other->toc_style_id_null_);
    std::swap(toc_style_id_, other->toc_style_id_);
    std::swap(writing_direction_, other->writing_direction_);
    std::swap(list_style_null_, other->list_style_null_);
    std::swap(list_style_, other->list_style_);
    std::swap(following_style_null_, other->following_style_null_);
    std::swap(following_style_, other->following_style_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParagraphStylePropertiesArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParagraphStylePropertiesArchive_descriptor_;
  metadata.reflection = ParagraphStylePropertiesArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParagraphStyleArchive::kSuperFieldNumber;
const int ParagraphStyleArchive::kOverrideCountFieldNumber;
const int ParagraphStyleArchive::kCharPropertiesFieldNumber;
const int ParagraphStyleArchive::kParaPropertiesFieldNumber;
#endif  // !_MSC_VER

ParagraphStyleArchive::ParagraphStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParagraphStyleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::StyleArchive*>(&::TSS::StyleArchive::default_instance());
  char_properties_ = const_cast< ::TSWP::CharacterStylePropertiesArchive*>(&::TSWP::CharacterStylePropertiesArchive::default_instance());
  para_properties_ = const_cast< ::TSWP::ParagraphStylePropertiesArchive*>(&::TSWP::ParagraphStylePropertiesArchive::default_instance());
}

ParagraphStyleArchive::ParagraphStyleArchive(const ParagraphStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParagraphStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  override_count_ = 0u;
  char_properties_ = NULL;
  para_properties_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParagraphStyleArchive::~ParagraphStyleArchive() {
  SharedDtor();
}

void ParagraphStyleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete char_properties_;
    delete para_properties_;
  }
}

void ParagraphStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParagraphStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParagraphStyleArchive_descriptor_;
}

const ParagraphStyleArchive& ParagraphStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

ParagraphStyleArchive* ParagraphStyleArchive::default_instance_ = NULL;

ParagraphStyleArchive* ParagraphStyleArchive::New() const {
  return new ParagraphStyleArchive;
}

void ParagraphStyleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::StyleArchive::Clear();
    }
    override_count_ = 0u;
    if (has_char_properties()) {
      if (char_properties_ != NULL) char_properties_->::TSWP::CharacterStylePropertiesArchive::Clear();
    }
    if (has_para_properties()) {
      if (para_properties_ != NULL) para_properties_->::TSWP::ParagraphStylePropertiesArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParagraphStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSS.StyleArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_override_count;
        break;
      }

      // optional uint32 override_count = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_override_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &override_count_)));
          set_has_override_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_char_properties;
        break;
      }

      // optional .TSWP.CharacterStylePropertiesArchive char_properties = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_char_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_char_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_para_properties;
        break;
      }

      // optional .TSWP.ParagraphStylePropertiesArchive para_properties = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_para_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_para_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParagraphStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (has_override_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->override_count(), output);
  }

  // optional .TSWP.CharacterStylePropertiesArchive char_properties = 11;
  if (has_char_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->char_properties(), output);
  }

  // optional .TSWP.ParagraphStylePropertiesArchive para_properties = 12;
  if (has_para_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->para_properties(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParagraphStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (has_override_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->override_count(), target);
  }

  // optional .TSWP.CharacterStylePropertiesArchive char_properties = 11;
  if (has_char_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->char_properties(), target);
  }

  // optional .TSWP.ParagraphStylePropertiesArchive para_properties = 12;
  if (has_para_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->para_properties(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParagraphStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSS.StyleArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional uint32 override_count = 10 [default = 0];
    if (has_override_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->override_count());
    }

    // optional .TSWP.CharacterStylePropertiesArchive char_properties = 11;
    if (has_char_properties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->char_properties());
    }

    // optional .TSWP.ParagraphStylePropertiesArchive para_properties = 12;
    if (has_para_properties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->para_properties());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParagraphStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParagraphStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParagraphStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParagraphStyleArchive::MergeFrom(const ParagraphStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::StyleArchive::MergeFrom(from.super());
    }
    if (from.has_override_count()) {
      set_override_count(from.override_count());
    }
    if (from.has_char_properties()) {
      mutable_char_properties()->::TSWP::CharacterStylePropertiesArchive::MergeFrom(from.char_properties());
    }
    if (from.has_para_properties()) {
      mutable_para_properties()->::TSWP::ParagraphStylePropertiesArchive::MergeFrom(from.para_properties());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParagraphStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParagraphStyleArchive::CopyFrom(const ParagraphStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParagraphStyleArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_char_properties()) {
    if (!this->char_properties().IsInitialized()) return false;
  }
  if (has_para_properties()) {
    if (!this->para_properties().IsInitialized()) return false;
  }
  return true;
}

void ParagraphStyleArchive::Swap(ParagraphStyleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(override_count_, other->override_count_);
    std::swap(char_properties_, other->char_properties_);
    std::swap(para_properties_, other->para_properties_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParagraphStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParagraphStyleArchive_descriptor_;
  metadata.reflection = ParagraphStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ListStyleArchive_LabelType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListStyleArchive_LabelType_descriptor_;
}
bool ListStyleArchive_LabelType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ListStyleArchive_LabelType ListStyleArchive::kNone;
const ListStyleArchive_LabelType ListStyleArchive::kImage;
const ListStyleArchive_LabelType ListStyleArchive::kString;
const ListStyleArchive_LabelType ListStyleArchive::kNumber;
const ListStyleArchive_LabelType ListStyleArchive::LabelType_MIN;
const ListStyleArchive_LabelType ListStyleArchive::LabelType_MAX;
const int ListStyleArchive::LabelType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ListStyleArchive_NumberType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListStyleArchive_NumberType_descriptor_;
}
bool ListStyleArchive_NumberType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ListStyleArchive_NumberType ListStyleArchive::kNumericDecimal;
const ListStyleArchive_NumberType ListStyleArchive::kNumericDoubleParen;
const ListStyleArchive_NumberType ListStyleArchive::kNumericRightParen;
const ListStyleArchive_NumberType ListStyleArchive::kRomanUpperDecimal;
const ListStyleArchive_NumberType ListStyleArchive::kRomanUpperDoubleParen;
const ListStyleArchive_NumberType ListStyleArchive::kRomanUpperRightParen;
const ListStyleArchive_NumberType ListStyleArchive::kRomanLowerDecimal;
const ListStyleArchive_NumberType ListStyleArchive::kRomanLowerDoubleParen;
const ListStyleArchive_NumberType ListStyleArchive::kRomanLowerRightParen;
const ListStyleArchive_NumberType ListStyleArchive::kAlphaUpperDecimal;
const ListStyleArchive_NumberType ListStyleArchive::kAlphaUpperDoubleParen;
const ListStyleArchive_NumberType ListStyleArchive::kAlphaUpperRightParen;
const ListStyleArchive_NumberType ListStyleArchive::kAlphaLowerDecimal;
const ListStyleArchive_NumberType ListStyleArchive::kAlphaLowerDoubleParen;
const ListStyleArchive_NumberType ListStyleArchive::kAlphaLowerRightParen;
const ListStyleArchive_NumberType ListStyleArchive::kIdeographicJapaneseDecimalKind;
const ListStyleArchive_NumberType ListStyleArchive::kIdeographicJapaneseDoubleParenKind;
const ListStyleArchive_NumberType ListStyleArchive::kIdeographicJapaneseRightParenKind;
const ListStyleArchive_NumberType ListStyleArchive::kHiraganaDecimalKind;
const ListStyleArchive_NumberType ListStyleArchive::kHiraganaDoubleParenKind;
const ListStyleArchive_NumberType ListStyleArchive::kHiraganaRightParenKind;
const ListStyleArchive_NumberType ListStyleArchive::kKatakanaDecimalKind;
const ListStyleArchive_NumberType ListStyleArchive::kKatakanaDoubleParenKind;
const ListStyleArchive_NumberType ListStyleArchive::kKatakanaRightParenKind;
const ListStyleArchive_NumberType ListStyleArchive::kHiraganaIrohaDecimalKind;
const ListStyleArchive_NumberType ListStyleArchive::kHiraganaIrohaDoubleParenKind;
const ListStyleArchive_NumberType ListStyleArchive::kHiraganaIrohaRightParenKind;
const ListStyleArchive_NumberType ListStyleArchive::kKatakanaIrohaDecimalKind;
const ListStyleArchive_NumberType ListStyleArchive::kKatakanaIrohaDoubleParenKind;
const ListStyleArchive_NumberType ListStyleArchive::kKatakanaIrohaRightParenKind;
const ListStyleArchive_NumberType ListStyleArchive::kIdeographicSimplifiedChineseDecimalKind;
const ListStyleArchive_NumberType ListStyleArchive::kIdeographicSimplifiedChineseDoubleParenKind;
const ListStyleArchive_NumberType ListStyleArchive::kIdeographicSimplifiedChineseRightParenKind;
const ListStyleArchive_NumberType ListStyleArchive::kIdeographicTraditionalChineseDecimalKind;
const ListStyleArchive_NumberType ListStyleArchive::kIdeographicTraditionalChineseDoubleParenKind;
const ListStyleArchive_NumberType ListStyleArchive::kIdeographicTraditionalChineseRightParenKind;
const ListStyleArchive_NumberType ListStyleArchive::kIdeographicFormalJapaneseDecimalKind;
const ListStyleArchive_NumberType ListStyleArchive::kIdeographicFormalJapaneseDoubleParenKind;
const ListStyleArchive_NumberType ListStyleArchive::kIdeographicFormalJapaneseRightParenKind;
const ListStyleArchive_NumberType ListStyleArchive::kIdeographicFormalSimplifiedChineseDecimalKind;
const ListStyleArchive_NumberType ListStyleArchive::kIdeographicFormalSimplifiedChineseDoubleParenKind;
const ListStyleArchive_NumberType ListStyleArchive::kIdeographicFormalSimplifiedChineseRightParenKind;
const ListStyleArchive_NumberType ListStyleArchive::kIdeographicFormalTraditionalChineseDecimalKind;
const ListStyleArchive_NumberType ListStyleArchive::kIdeographicFormalTraditionalChineseDoubleParenKind;
const ListStyleArchive_NumberType ListStyleArchive::kIdeographicFormalTraditionalChineseRightParenKind;
const ListStyleArchive_NumberType ListStyleArchive::kKoreanAlphabetDecimalKind;
const ListStyleArchive_NumberType ListStyleArchive::kKoreanAlphabetDoubleParenKind;
const ListStyleArchive_NumberType ListStyleArchive::kKoreanAlphabetRightParenKind;
const ListStyleArchive_NumberType ListStyleArchive::kCircledNumberKind;
const ListStyleArchive_NumberType ListStyleArchive::kArabianNumericDecimalKind;
const ListStyleArchive_NumberType ListStyleArchive::kArabianNumericDoubleParenKind;
const ListStyleArchive_NumberType ListStyleArchive::kArabianNumericRightParenKind;
const ListStyleArchive_NumberType ListStyleArchive::kArabianAlphaDecimalKind;
const ListStyleArchive_NumberType ListStyleArchive::kArabianAlphaDoubleParenKind;
const ListStyleArchive_NumberType ListStyleArchive::kArabianAlphaRightParenKind;
const ListStyleArchive_NumberType ListStyleArchive::kArabianAbjadDecimalKind;
const ListStyleArchive_NumberType ListStyleArchive::kArabianAbjadDoubleParenKind;
const ListStyleArchive_NumberType ListStyleArchive::kArabianAbjadRightParenKind;
const ListStyleArchive_NumberType ListStyleArchive::kHebrewAlphaDecimalKind;
const ListStyleArchive_NumberType ListStyleArchive::kHebrewAlphaDoubleParenKind;
const ListStyleArchive_NumberType ListStyleArchive::kHebrewAlphaRightParenKind;
const ListStyleArchive_NumberType ListStyleArchive::kHebrewBiblicalStandardKind;
const ListStyleArchive_NumberType ListStyleArchive::kHebrewBiblicalDecimalKind;
const ListStyleArchive_NumberType ListStyleArchive::kHebrewBiblicalDoubleParenKind;
const ListStyleArchive_NumberType ListStyleArchive::kHebrewBiblicalRightParenKind;
const ListStyleArchive_NumberType ListStyleArchive::NumberType_MIN;
const ListStyleArchive_NumberType ListStyleArchive::NumberType_MAX;
const int ListStyleArchive::NumberType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ListStyleArchive_LabelGeometry::kScaleFieldNumber;
const int ListStyleArchive_LabelGeometry::kBaselineOffsetFieldNumber;
const int ListStyleArchive_LabelGeometry::kScaleWithTextFieldNumber;
#endif  // !_MSC_VER

ListStyleArchive_LabelGeometry::ListStyleArchive_LabelGeometry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListStyleArchive_LabelGeometry::InitAsDefaultInstance() {
}

ListStyleArchive_LabelGeometry::ListStyleArchive_LabelGeometry(const ListStyleArchive_LabelGeometry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListStyleArchive_LabelGeometry::SharedCtor() {
  _cached_size_ = 0;
  scale_ = 1;
  baseline_offset_ = 0;
  scale_with_text_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListStyleArchive_LabelGeometry::~ListStyleArchive_LabelGeometry() {
  SharedDtor();
}

void ListStyleArchive_LabelGeometry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListStyleArchive_LabelGeometry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListStyleArchive_LabelGeometry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListStyleArchive_LabelGeometry_descriptor_;
}

const ListStyleArchive_LabelGeometry& ListStyleArchive_LabelGeometry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

ListStyleArchive_LabelGeometry* ListStyleArchive_LabelGeometry::default_instance_ = NULL;

ListStyleArchive_LabelGeometry* ListStyleArchive_LabelGeometry::New() const {
  return new ListStyleArchive_LabelGeometry;
}

void ListStyleArchive_LabelGeometry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scale_ = 1;
    baseline_offset_ = 0;
    scale_with_text_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListStyleArchive_LabelGeometry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float scale = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_baseline_offset;
        break;
      }

      // optional float baseline_offset = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_baseline_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &baseline_offset_)));
          set_has_baseline_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scale_with_text;
        break;
      }

      // optional bool scale_with_text = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scale_with_text:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scale_with_text_)));
          set_has_scale_with_text();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListStyleArchive_LabelGeometry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float scale = 1 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->scale(), output);
  }

  // optional float baseline_offset = 2 [default = 0];
  if (has_baseline_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->baseline_offset(), output);
  }

  // optional bool scale_with_text = 3 [default = true];
  if (has_scale_with_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->scale_with_text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListStyleArchive_LabelGeometry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float scale = 1 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->scale(), target);
  }

  // optional float baseline_offset = 2 [default = 0];
  if (has_baseline_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->baseline_offset(), target);
  }

  // optional bool scale_with_text = 3 [default = true];
  if (has_scale_with_text()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->scale_with_text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListStyleArchive_LabelGeometry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float scale = 1 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional float baseline_offset = 2 [default = 0];
    if (has_baseline_offset()) {
      total_size += 1 + 4;
    }

    // optional bool scale_with_text = 3 [default = true];
    if (has_scale_with_text()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListStyleArchive_LabelGeometry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListStyleArchive_LabelGeometry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListStyleArchive_LabelGeometry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListStyleArchive_LabelGeometry::MergeFrom(const ListStyleArchive_LabelGeometry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_baseline_offset()) {
      set_baseline_offset(from.baseline_offset());
    }
    if (from.has_scale_with_text()) {
      set_scale_with_text(from.scale_with_text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListStyleArchive_LabelGeometry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListStyleArchive_LabelGeometry::CopyFrom(const ListStyleArchive_LabelGeometry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListStyleArchive_LabelGeometry::IsInitialized() const {

  return true;
}

void ListStyleArchive_LabelGeometry::Swap(ListStyleArchive_LabelGeometry* other) {
  if (other != this) {
    std::swap(scale_, other->scale_);
    std::swap(baseline_offset_, other->baseline_offset_);
    std::swap(scale_with_text_, other->scale_with_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListStyleArchive_LabelGeometry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListStyleArchive_LabelGeometry_descriptor_;
  metadata.reflection = ListStyleArchive_LabelGeometry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ListStyleArchive_LabelImage::kImageFieldNumber;
const int ListStyleArchive_LabelImage::kImageNullFieldNumber;
const int ListStyleArchive_LabelImage::kDatabaseImageFieldNumber;
#endif  // !_MSC_VER

ListStyleArchive_LabelImage::ListStyleArchive_LabelImage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListStyleArchive_LabelImage::InitAsDefaultInstance() {
  image_ = const_cast< ::TSP::DataReference*>(&::TSP::DataReference::default_instance());
  database_image_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ListStyleArchive_LabelImage::ListStyleArchive_LabelImage(const ListStyleArchive_LabelImage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListStyleArchive_LabelImage::SharedCtor() {
  _cached_size_ = 0;
  image_ = NULL;
  image_null_ = false;
  database_image_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListStyleArchive_LabelImage::~ListStyleArchive_LabelImage() {
  SharedDtor();
}

void ListStyleArchive_LabelImage::SharedDtor() {
  if (this != default_instance_) {
    delete image_;
    delete database_image_;
  }
}

void ListStyleArchive_LabelImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListStyleArchive_LabelImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListStyleArchive_LabelImage_descriptor_;
}

const ListStyleArchive_LabelImage& ListStyleArchive_LabelImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

ListStyleArchive_LabelImage* ListStyleArchive_LabelImage::default_instance_ = NULL;

ListStyleArchive_LabelImage* ListStyleArchive_LabelImage::New() const {
  return new ListStyleArchive_LabelImage;
}

void ListStyleArchive_LabelImage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_image()) {
      if (image_ != NULL) image_->::TSP::DataReference::Clear();
    }
    image_null_ = false;
    if (has_database_image()) {
      if (database_image_ != NULL) database_image_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListStyleArchive_LabelImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference database_image = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_database_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_image_null;
        break;
      }

      // optional bool image_null = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_image_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &image_null_)));
          set_has_image_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_image;
        break;
      }

      // optional .TSP.DataReference image = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListStyleArchive_LabelImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference database_image = 1;
  if (has_database_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->database_image(), output);
  }

  // optional bool image_null = 2;
  if (has_image_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->image_null(), output);
  }

  // optional .TSP.DataReference image = 3;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->image(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListStyleArchive_LabelImage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference database_image = 1;
  if (has_database_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->database_image(), target);
  }

  // optional bool image_null = 2;
  if (has_image_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->image_null(), target);
  }

  // optional .TSP.DataReference image = 3;
  if (has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->image(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListStyleArchive_LabelImage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.DataReference image = 3;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image());
    }

    // optional bool image_null = 2;
    if (has_image_null()) {
      total_size += 1 + 1;
    }

    // optional .TSP.Reference database_image = 1;
    if (has_database_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->database_image());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListStyleArchive_LabelImage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListStyleArchive_LabelImage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListStyleArchive_LabelImage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListStyleArchive_LabelImage::MergeFrom(const ListStyleArchive_LabelImage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_image()) {
      mutable_image()->::TSP::DataReference::MergeFrom(from.image());
    }
    if (from.has_image_null()) {
      set_image_null(from.image_null());
    }
    if (from.has_database_image()) {
      mutable_database_image()->::TSP::Reference::MergeFrom(from.database_image());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListStyleArchive_LabelImage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListStyleArchive_LabelImage::CopyFrom(const ListStyleArchive_LabelImage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListStyleArchive_LabelImage::IsInitialized() const {

  if (has_image()) {
    if (!this->image().IsInitialized()) return false;
  }
  if (has_database_image()) {
    if (!this->database_image().IsInitialized()) return false;
  }
  return true;
}

void ListStyleArchive_LabelImage::Swap(ListStyleArchive_LabelImage* other) {
  if (other != this) {
    std::swap(image_, other->image_);
    std::swap(image_null_, other->image_null_);
    std::swap(database_image_, other->database_image_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListStyleArchive_LabelImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListStyleArchive_LabelImage_descriptor_;
  metadata.reflection = ListStyleArchive_LabelImage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ListStyleArchive::kSuperFieldNumber;
const int ListStyleArchive::kOverrideCountFieldNumber;
const int ListStyleArchive::kLabelTypesFieldNumber;
const int ListStyleArchive::kTextIndentsFieldNumber;
const int ListStyleArchive::kIndentsFieldNumber;
const int ListStyleArchive::kGeometriesFieldNumber;
const int ListStyleArchive::kNumberTypesFieldNumber;
const int ListStyleArchive::kStringsFieldNumber;
const int ListStyleArchive::kImagesFieldNumber;
const int ListStyleArchive::kShadowNullFieldNumber;
const int ListStyleArchive::kShadowFieldNumber;
const int ListStyleArchive::kFontColorNullFieldNumber;
const int ListStyleArchive::kFontColorFieldNumber;
const int ListStyleArchive::kFontNameNullFieldNumber;
const int ListStyleArchive::kFontNameFieldNumber;
const int ListStyleArchive::kWritingDirectionFieldNumber;
const int ListStyleArchive::kTieredNumbersFieldNumber;
#endif  // !_MSC_VER

ListStyleArchive::ListStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListStyleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::StyleArchive*>(&::TSS::StyleArchive::default_instance());
  shadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  font_color_ = const_cast< ::TSP::Color*>(&::TSP::Color::default_instance());
}

ListStyleArchive::ListStyleArchive(const ListStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  override_count_ = 0u;
  shadow_null_ = false;
  shadow_ = NULL;
  font_color_null_ = false;
  font_color_ = NULL;
  font_name_null_ = false;
  font_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  writing_direction_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListStyleArchive::~ListStyleArchive() {
  SharedDtor();
}

void ListStyleArchive::SharedDtor() {
  if (font_name_ != &::google::protobuf::internal::kEmptyString) {
    delete font_name_;
  }
  if (this != default_instance_) {
    delete super_;
    delete shadow_;
    delete font_color_;
  }
}

void ListStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListStyleArchive_descriptor_;
}

const ListStyleArchive& ListStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

ListStyleArchive* ListStyleArchive::default_instance_ = NULL;

ListStyleArchive* ListStyleArchive::New() const {
  return new ListStyleArchive;
}

void ListStyleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::StyleArchive::Clear();
    }
    override_count_ = 0u;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    shadow_null_ = false;
    if (has_shadow()) {
      if (shadow_ != NULL) shadow_->::TSD::ShadowArchive::Clear();
    }
    font_color_null_ = false;
    if (has_font_color()) {
      if (font_color_ != NULL) font_color_->::TSP::Color::Clear();
    }
    font_name_null_ = false;
    if (has_font_name()) {
      if (font_name_ != &::google::protobuf::internal::kEmptyString) {
        font_name_->clear();
      }
    }
    writing_direction_ = -1;
  }
  label_types_.Clear();
  text_indents_.Clear();
  indents_.Clear();
  geometries_.Clear();
  number_types_.Clear();
  strings_.Clear();
  images_.Clear();
  tiered_numbers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSS.StyleArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_override_count;
        break;
      }

      // optional uint32 override_count = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_override_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &override_count_)));
          set_has_override_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_label_types;
        break;
      }

      // repeated .TSWP.ListStyleArchive.LabelType label_types = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_label_types:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::ListStyleArchive_LabelType_IsValid(value)) {
            add_label_types(static_cast< ::TSWP::ListStyleArchive_LabelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::TSWP::ListStyleArchive_LabelType_IsValid,
                 this->mutable_label_types())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_label_types;
        if (input->ExpectTag(101)) goto parse_text_indents;
        break;
      }

      // repeated float text_indents = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_text_indents:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 101, input, this->mutable_text_indents())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_text_indents())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_text_indents;
        if (input->ExpectTag(109)) goto parse_indents;
        break;
      }

      // repeated float indents = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_indents:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 109, input, this->mutable_indents())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_indents())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_indents;
        if (input->ExpectTag(114)) goto parse_geometries;
        break;
      }

      // repeated .TSWP.ListStyleArchive.LabelGeometry geometries = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geometries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_geometries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_geometries;
        if (input->ExpectTag(120)) goto parse_number_types;
        break;
      }

      // repeated .TSWP.ListStyleArchive.NumberType number_types = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number_types:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::ListStyleArchive_NumberType_IsValid(value)) {
            add_number_types(static_cast< ::TSWP::ListStyleArchive_NumberType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::TSWP::ListStyleArchive_NumberType_IsValid,
                 this->mutable_number_types())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_number_types;
        if (input->ExpectTag(130)) goto parse_strings;
        break;
      }

      // repeated string strings = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_strings()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strings(this->strings_size() - 1).data(),
            this->strings(this->strings_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_strings;
        if (input->ExpectTag(138)) goto parse_images;
        break;
      }

      // repeated .TSWP.ListStyleArchive.LabelImage images = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_images:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_images()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_images;
        if (input->ExpectTag(144)) goto parse_shadow_null;
        break;
      }

      // optional bool shadow_null = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shadow_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shadow_null_)));
          set_has_shadow_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_shadow;
        break;
      }

      // optional .TSD.ShadowArchive shadow = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_font_color_null;
        break;
      }

      // optional bool font_color_null = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_font_color_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &font_color_null_)));
          set_has_font_color_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_font_color;
        break;
      }

      // optional .TSP.Color font_color = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_font_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_font_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_font_name_null;
        break;
      }

      // optional bool font_name_null = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_font_name_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &font_name_null_)));
          set_has_font_name_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_font_name;
        break;
      }

      // optional string font_name = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_font_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_font_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->font_name().data(), this->font_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_writing_direction;
        break;
      }

      // optional .TSWP.WritingDirectionType writing_direction = 24 [default = kWritingDirectionNatural];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writing_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::WritingDirectionType_IsValid(value)) {
            set_writing_direction(static_cast< ::TSWP::WritingDirectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(24, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_tiered_numbers;
        break;
      }

      // repeated bool tiered_numbers = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tiered_numbers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 200, input, this->mutable_tiered_numbers())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_tiered_numbers())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_tiered_numbers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (has_override_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->override_count(), output);
  }

  // repeated .TSWP.ListStyleArchive.LabelType label_types = 11;
  for (int i = 0; i < this->label_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->label_types(i), output);
  }

  // repeated float text_indents = 12;
  for (int i = 0; i < this->text_indents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      12, this->text_indents(i), output);
  }

  // repeated float indents = 13;
  for (int i = 0; i < this->indents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      13, this->indents(i), output);
  }

  // repeated .TSWP.ListStyleArchive.LabelGeometry geometries = 14;
  for (int i = 0; i < this->geometries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->geometries(i), output);
  }

  // repeated .TSWP.ListStyleArchive.NumberType number_types = 15;
  for (int i = 0; i < this->number_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->number_types(i), output);
  }

  // repeated string strings = 16;
  for (int i = 0; i < this->strings_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->strings(i).data(), this->strings(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->strings(i), output);
  }

  // repeated .TSWP.ListStyleArchive.LabelImage images = 17;
  for (int i = 0; i < this->images_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->images(i), output);
  }

  // optional bool shadow_null = 18;
  if (has_shadow_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->shadow_null(), output);
  }

  // optional .TSD.ShadowArchive shadow = 19;
  if (has_shadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->shadow(), output);
  }

  // optional bool font_color_null = 20;
  if (has_font_color_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->font_color_null(), output);
  }

  // optional .TSP.Color font_color = 21;
  if (has_font_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->font_color(), output);
  }

  // optional bool font_name_null = 22;
  if (has_font_name_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->font_name_null(), output);
  }

  // optional string font_name = 23;
  if (has_font_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->font_name().data(), this->font_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->font_name(), output);
  }

  // optional .TSWP.WritingDirectionType writing_direction = 24 [default = kWritingDirectionNatural];
  if (has_writing_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->writing_direction(), output);
  }

  // repeated bool tiered_numbers = 25;
  for (int i = 0; i < this->tiered_numbers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      25, this->tiered_numbers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (has_override_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->override_count(), target);
  }

  // repeated .TSWP.ListStyleArchive.LabelType label_types = 11;
  for (int i = 0; i < this->label_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->label_types(i), target);
  }

  // repeated float text_indents = 12;
  for (int i = 0; i < this->text_indents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(12, this->text_indents(i), target);
  }

  // repeated float indents = 13;
  for (int i = 0; i < this->indents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(13, this->indents(i), target);
  }

  // repeated .TSWP.ListStyleArchive.LabelGeometry geometries = 14;
  for (int i = 0; i < this->geometries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->geometries(i), target);
  }

  // repeated .TSWP.ListStyleArchive.NumberType number_types = 15;
  for (int i = 0; i < this->number_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->number_types(i), target);
  }

  // repeated string strings = 16;
  for (int i = 0; i < this->strings_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strings(i).data(), this->strings(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(16, this->strings(i), target);
  }

  // repeated .TSWP.ListStyleArchive.LabelImage images = 17;
  for (int i = 0; i < this->images_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->images(i), target);
  }

  // optional bool shadow_null = 18;
  if (has_shadow_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->shadow_null(), target);
  }

  // optional .TSD.ShadowArchive shadow = 19;
  if (has_shadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->shadow(), target);
  }

  // optional bool font_color_null = 20;
  if (has_font_color_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->font_color_null(), target);
  }

  // optional .TSP.Color font_color = 21;
  if (has_font_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->font_color(), target);
  }

  // optional bool font_name_null = 22;
  if (has_font_name_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->font_name_null(), target);
  }

  // optional string font_name = 23;
  if (has_font_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->font_name().data(), this->font_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->font_name(), target);
  }

  // optional .TSWP.WritingDirectionType writing_direction = 24 [default = kWritingDirectionNatural];
  if (has_writing_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->writing_direction(), target);
  }

  // repeated bool tiered_numbers = 25;
  for (int i = 0; i < this->tiered_numbers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(25, this->tiered_numbers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSS.StyleArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional uint32 override_count = 10 [default = 0];
    if (has_override_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->override_count());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional bool shadow_null = 18;
    if (has_shadow_null()) {
      total_size += 2 + 1;
    }

    // optional .TSD.ShadowArchive shadow = 19;
    if (has_shadow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shadow());
    }

    // optional bool font_color_null = 20;
    if (has_font_color_null()) {
      total_size += 2 + 1;
    }

    // optional .TSP.Color font_color = 21;
    if (has_font_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->font_color());
    }

    // optional bool font_name_null = 22;
    if (has_font_name_null()) {
      total_size += 2 + 1;
    }

    // optional string font_name = 23;
    if (has_font_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->font_name());
    }

    // optional .TSWP.WritingDirectionType writing_direction = 24 [default = kWritingDirectionNatural];
    if (has_writing_direction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->writing_direction());
    }

  }
  // repeated .TSWP.ListStyleArchive.LabelType label_types = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->label_types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->label_types(i));
    }
    total_size += 1 * this->label_types_size() + data_size;
  }

  // repeated float text_indents = 12;
  {
    int data_size = 0;
    data_size = 4 * this->text_indents_size();
    total_size += 1 * this->text_indents_size() + data_size;
  }

  // repeated float indents = 13;
  {
    int data_size = 0;
    data_size = 4 * this->indents_size();
    total_size += 1 * this->indents_size() + data_size;
  }

  // repeated .TSWP.ListStyleArchive.LabelGeometry geometries = 14;
  total_size += 1 * this->geometries_size();
  for (int i = 0; i < this->geometries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->geometries(i));
  }

  // repeated .TSWP.ListStyleArchive.NumberType number_types = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->number_types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->number_types(i));
    }
    total_size += 1 * this->number_types_size() + data_size;
  }

  // repeated string strings = 16;
  total_size += 2 * this->strings_size();
  for (int i = 0; i < this->strings_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->strings(i));
  }

  // repeated .TSWP.ListStyleArchive.LabelImage images = 17;
  total_size += 2 * this->images_size();
  for (int i = 0; i < this->images_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->images(i));
  }

  // repeated bool tiered_numbers = 25;
  {
    int data_size = 0;
    data_size = 1 * this->tiered_numbers_size();
    total_size += 2 * this->tiered_numbers_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListStyleArchive::MergeFrom(const ListStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  label_types_.MergeFrom(from.label_types_);
  text_indents_.MergeFrom(from.text_indents_);
  indents_.MergeFrom(from.indents_);
  geometries_.MergeFrom(from.geometries_);
  number_types_.MergeFrom(from.number_types_);
  strings_.MergeFrom(from.strings_);
  images_.MergeFrom(from.images_);
  tiered_numbers_.MergeFrom(from.tiered_numbers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::StyleArchive::MergeFrom(from.super());
    }
    if (from.has_override_count()) {
      set_override_count(from.override_count());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_shadow_null()) {
      set_shadow_null(from.shadow_null());
    }
    if (from.has_shadow()) {
      mutable_shadow()->::TSD::ShadowArchive::MergeFrom(from.shadow());
    }
    if (from.has_font_color_null()) {
      set_font_color_null(from.font_color_null());
    }
    if (from.has_font_color()) {
      mutable_font_color()->::TSP::Color::MergeFrom(from.font_color());
    }
    if (from.has_font_name_null()) {
      set_font_name_null(from.font_name_null());
    }
    if (from.has_font_name()) {
      set_font_name(from.font_name());
    }
    if (from.has_writing_direction()) {
      set_writing_direction(from.writing_direction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListStyleArchive::CopyFrom(const ListStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListStyleArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  for (int i = 0; i < images_size(); i++) {
    if (!this->images(i).IsInitialized()) return false;
  }
  if (has_shadow()) {
    if (!this->shadow().IsInitialized()) return false;
  }
  if (has_font_color()) {
    if (!this->font_color().IsInitialized()) return false;
  }
  return true;
}

void ListStyleArchive::Swap(ListStyleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(override_count_, other->override_count_);
    label_types_.Swap(&other->label_types_);
    text_indents_.Swap(&other->text_indents_);
    indents_.Swap(&other->indents_);
    geometries_.Swap(&other->geometries_);
    number_types_.Swap(&other->number_types_);
    strings_.Swap(&other->strings_);
    images_.Swap(&other->images_);
    std::swap(shadow_null_, other->shadow_null_);
    std::swap(shadow_, other->shadow_);
    std::swap(font_color_null_, other->font_color_null_);
    std::swap(font_color_, other->font_color_);
    std::swap(font_name_null_, other->font_name_null_);
    std::swap(font_name_, other->font_name_);
    std::swap(writing_direction_, other->writing_direction_);
    tiered_numbers_.Swap(&other->tiered_numbers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListStyleArchive_descriptor_;
  metadata.reflection = ListStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TextStylePresetArchive::kPresetIdentifierFieldNumber;
const int TextStylePresetArchive::kParagraphStyleFieldNumber;
const int TextStylePresetArchive::kListStyleFieldNumber;
#endif  // !_MSC_VER

TextStylePresetArchive::TextStylePresetArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TextStylePresetArchive::InitAsDefaultInstance() {
  paragraph_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  list_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

TextStylePresetArchive::TextStylePresetArchive(const TextStylePresetArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TextStylePresetArchive::SharedCtor() {
  _cached_size_ = 0;
  preset_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  paragraph_style_ = NULL;
  list_style_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TextStylePresetArchive::~TextStylePresetArchive() {
  SharedDtor();
}

void TextStylePresetArchive::SharedDtor() {
  if (preset_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete preset_identifier_;
  }
  if (this != default_instance_) {
    delete paragraph_style_;
    delete list_style_;
  }
}

void TextStylePresetArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextStylePresetArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TextStylePresetArchive_descriptor_;
}

const TextStylePresetArchive& TextStylePresetArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

TextStylePresetArchive* TextStylePresetArchive::default_instance_ = NULL;

TextStylePresetArchive* TextStylePresetArchive::New() const {
  return new TextStylePresetArchive;
}

void TextStylePresetArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_preset_identifier()) {
      if (preset_identifier_ != &::google::protobuf::internal::kEmptyString) {
        preset_identifier_->clear();
      }
    }
    if (has_paragraph_style()) {
      if (paragraph_style_ != NULL) paragraph_style_->::TSP::Reference::Clear();
    }
    if (has_list_style()) {
      if (list_style_ != NULL) list_style_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TextStylePresetArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string preset_identifier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preset_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->preset_identifier().data(), this->preset_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_paragraph_style;
        break;
      }

      // optional .TSP.Reference paragraph_style = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paragraph_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_paragraph_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_list_style;
        break;
      }

      // optional .TSP.Reference list_style = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TextStylePresetArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string preset_identifier = 1;
  if (has_preset_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->preset_identifier().data(), this->preset_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->preset_identifier(), output);
  }

  // optional .TSP.Reference paragraph_style = 2;
  if (has_paragraph_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->paragraph_style(), output);
  }

  // optional .TSP.Reference list_style = 3;
  if (has_list_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list_style(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TextStylePresetArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string preset_identifier = 1;
  if (has_preset_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->preset_identifier().data(), this->preset_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->preset_identifier(), target);
  }

  // optional .TSP.Reference paragraph_style = 2;
  if (has_paragraph_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->paragraph_style(), target);
  }

  // optional .TSP.Reference list_style = 3;
  if (has_list_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->list_style(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TextStylePresetArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string preset_identifier = 1;
    if (has_preset_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preset_identifier());
    }

    // optional .TSP.Reference paragraph_style = 2;
    if (has_paragraph_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->paragraph_style());
    }

    // optional .TSP.Reference list_style = 3;
    if (has_list_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_style());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextStylePresetArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TextStylePresetArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TextStylePresetArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TextStylePresetArchive::MergeFrom(const TextStylePresetArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_preset_identifier()) {
      set_preset_identifier(from.preset_identifier());
    }
    if (from.has_paragraph_style()) {
      mutable_paragraph_style()->::TSP::Reference::MergeFrom(from.paragraph_style());
    }
    if (from.has_list_style()) {
      mutable_list_style()->::TSP::Reference::MergeFrom(from.list_style());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TextStylePresetArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextStylePresetArchive::CopyFrom(const TextStylePresetArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextStylePresetArchive::IsInitialized() const {

  if (has_paragraph_style()) {
    if (!this->paragraph_style().IsInitialized()) return false;
  }
  if (has_list_style()) {
    if (!this->list_style().IsInitialized()) return false;
  }
  return true;
}

void TextStylePresetArchive::Swap(TextStylePresetArchive* other) {
  if (other != this) {
    std::swap(preset_identifier_, other->preset_identifier_);
    std::swap(paragraph_style_, other->paragraph_style_);
    std::swap(list_style_, other->list_style_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TextStylePresetArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TextStylePresetArchive_descriptor_;
  metadata.reflection = TextStylePresetArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ColumnsArchive_EqualColumnsArchive::kCountFieldNumber;
const int ColumnsArchive_EqualColumnsArchive::kGapFieldNumber;
#endif  // !_MSC_VER

ColumnsArchive_EqualColumnsArchive::ColumnsArchive_EqualColumnsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ColumnsArchive_EqualColumnsArchive::InitAsDefaultInstance() {
}

ColumnsArchive_EqualColumnsArchive::ColumnsArchive_EqualColumnsArchive(const ColumnsArchive_EqualColumnsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ColumnsArchive_EqualColumnsArchive::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  gap_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColumnsArchive_EqualColumnsArchive::~ColumnsArchive_EqualColumnsArchive() {
  SharedDtor();
}

void ColumnsArchive_EqualColumnsArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ColumnsArchive_EqualColumnsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnsArchive_EqualColumnsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnsArchive_EqualColumnsArchive_descriptor_;
}

const ColumnsArchive_EqualColumnsArchive& ColumnsArchive_EqualColumnsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

ColumnsArchive_EqualColumnsArchive* ColumnsArchive_EqualColumnsArchive::default_instance_ = NULL;

ColumnsArchive_EqualColumnsArchive* ColumnsArchive_EqualColumnsArchive::New() const {
  return new ColumnsArchive_EqualColumnsArchive;
}

void ColumnsArchive_EqualColumnsArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0u;
    gap_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColumnsArchive_EqualColumnsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_gap;
        break;
      }

      // optional float gap = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gap_)));
          set_has_gap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ColumnsArchive_EqualColumnsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // optional float gap = 2;
  if (has_gap()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->gap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ColumnsArchive_EqualColumnsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // optional float gap = 2;
  if (has_gap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->gap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ColumnsArchive_EqualColumnsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional float gap = 2;
    if (has_gap()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnsArchive_EqualColumnsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColumnsArchive_EqualColumnsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColumnsArchive_EqualColumnsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColumnsArchive_EqualColumnsArchive::MergeFrom(const ColumnsArchive_EqualColumnsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_gap()) {
      set_gap(from.gap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColumnsArchive_EqualColumnsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnsArchive_EqualColumnsArchive::CopyFrom(const ColumnsArchive_EqualColumnsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnsArchive_EqualColumnsArchive::IsInitialized() const {

  return true;
}

void ColumnsArchive_EqualColumnsArchive::Swap(ColumnsArchive_EqualColumnsArchive* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(gap_, other->gap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColumnsArchive_EqualColumnsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnsArchive_EqualColumnsArchive_descriptor_;
  metadata.reflection = ColumnsArchive_EqualColumnsArchive_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::kGapFieldNumber;
const int ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::kWidthFieldNumber;
#endif  // !_MSC_VER

ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::InitAsDefaultInstance() {
}

ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive(const ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::SharedCtor() {
  _cached_size_ = 0;
  gap_ = 0;
  width_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::~ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive() {
  SharedDtor();
}

void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive_descriptor_;
}

const ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive& ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive* ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::default_instance_ = NULL;

ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive* ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::New() const {
  return new ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive;
}

void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gap_ = 0;
    width_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float gap = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gap_)));
          set_has_gap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_width;
        break;
      }

      // required float width = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float gap = 1;
  if (has_gap()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->gap(), output);
  }

  // required float width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->width(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float gap = 1;
  if (has_gap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->gap(), target);
  }

  // required float width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->width(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float gap = 1;
    if (has_gap()) {
      total_size += 1 + 4;
    }

    // required float width = 2;
    if (has_width()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::MergeFrom(const ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gap()) {
      set_gap(from.gap());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::CopyFrom(const ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::Swap(ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive* other) {
  if (other != this) {
    std::swap(gap_, other->gap_);
    std::swap(width_, other->width_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive_descriptor_;
  metadata.reflection = ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ColumnsArchive_NonEqualColumnsArchive::kFirstFieldNumber;
const int ColumnsArchive_NonEqualColumnsArchive::kFollowingFieldNumber;
#endif  // !_MSC_VER

ColumnsArchive_NonEqualColumnsArchive::ColumnsArchive_NonEqualColumnsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ColumnsArchive_NonEqualColumnsArchive::InitAsDefaultInstance() {
}

ColumnsArchive_NonEqualColumnsArchive::ColumnsArchive_NonEqualColumnsArchive(const ColumnsArchive_NonEqualColumnsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ColumnsArchive_NonEqualColumnsArchive::SharedCtor() {
  _cached_size_ = 0;
  first_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColumnsArchive_NonEqualColumnsArchive::~ColumnsArchive_NonEqualColumnsArchive() {
  SharedDtor();
}

void ColumnsArchive_NonEqualColumnsArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ColumnsArchive_NonEqualColumnsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnsArchive_NonEqualColumnsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnsArchive_NonEqualColumnsArchive_descriptor_;
}

const ColumnsArchive_NonEqualColumnsArchive& ColumnsArchive_NonEqualColumnsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

ColumnsArchive_NonEqualColumnsArchive* ColumnsArchive_NonEqualColumnsArchive::default_instance_ = NULL;

ColumnsArchive_NonEqualColumnsArchive* ColumnsArchive_NonEqualColumnsArchive::New() const {
  return new ColumnsArchive_NonEqualColumnsArchive;
}

void ColumnsArchive_NonEqualColumnsArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    first_ = 0;
  }
  following_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColumnsArchive_NonEqualColumnsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float first = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &first_)));
          set_has_first();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_following;
        break;
      }

      // repeated .TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive following = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_following:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_following()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_following;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ColumnsArchive_NonEqualColumnsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float first = 1;
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->first(), output);
  }

  // repeated .TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive following = 2;
  for (int i = 0; i < this->following_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->following(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ColumnsArchive_NonEqualColumnsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float first = 1;
  if (has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->first(), target);
  }

  // repeated .TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive following = 2;
  for (int i = 0; i < this->following_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->following(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ColumnsArchive_NonEqualColumnsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float first = 1;
    if (has_first()) {
      total_size += 1 + 4;
    }

  }
  // repeated .TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive following = 2;
  total_size += 1 * this->following_size();
  for (int i = 0; i < this->following_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->following(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnsArchive_NonEqualColumnsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColumnsArchive_NonEqualColumnsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColumnsArchive_NonEqualColumnsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColumnsArchive_NonEqualColumnsArchive::MergeFrom(const ColumnsArchive_NonEqualColumnsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  following_.MergeFrom(from.following_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first()) {
      set_first(from.first());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColumnsArchive_NonEqualColumnsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnsArchive_NonEqualColumnsArchive::CopyFrom(const ColumnsArchive_NonEqualColumnsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnsArchive_NonEqualColumnsArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < following_size(); i++) {
    if (!this->following(i).IsInitialized()) return false;
  }
  return true;
}

void ColumnsArchive_NonEqualColumnsArchive::Swap(ColumnsArchive_NonEqualColumnsArchive* other) {
  if (other != this) {
    std::swap(first_, other->first_);
    following_.Swap(&other->following_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColumnsArchive_NonEqualColumnsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnsArchive_NonEqualColumnsArchive_descriptor_;
  metadata.reflection = ColumnsArchive_NonEqualColumnsArchive_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ColumnsArchive::kEqualColumnsFieldNumber;
const int ColumnsArchive::kNonEqualColumnsFieldNumber;
#endif  // !_MSC_VER

ColumnsArchive::ColumnsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ColumnsArchive::InitAsDefaultInstance() {
  equal_columns_ = const_cast< ::TSWP::ColumnsArchive_EqualColumnsArchive*>(&::TSWP::ColumnsArchive_EqualColumnsArchive::default_instance());
  non_equal_columns_ = const_cast< ::TSWP::ColumnsArchive_NonEqualColumnsArchive*>(&::TSWP::ColumnsArchive_NonEqualColumnsArchive::default_instance());
}

ColumnsArchive::ColumnsArchive(const ColumnsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ColumnsArchive::SharedCtor() {
  _cached_size_ = 0;
  equal_columns_ = NULL;
  non_equal_columns_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColumnsArchive::~ColumnsArchive() {
  SharedDtor();
}

void ColumnsArchive::SharedDtor() {
  if (this != default_instance_) {
    delete equal_columns_;
    delete non_equal_columns_;
  }
}

void ColumnsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnsArchive_descriptor_;
}

const ColumnsArchive& ColumnsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

ColumnsArchive* ColumnsArchive::default_instance_ = NULL;

ColumnsArchive* ColumnsArchive::New() const {
  return new ColumnsArchive;
}

void ColumnsArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_equal_columns()) {
      if (equal_columns_ != NULL) equal_columns_->::TSWP::ColumnsArchive_EqualColumnsArchive::Clear();
    }
    if (has_non_equal_columns()) {
      if (non_equal_columns_ != NULL) non_equal_columns_->::TSWP::ColumnsArchive_NonEqualColumnsArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColumnsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSWP.ColumnsArchive.EqualColumnsArchive equal_columns = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equal_columns()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_non_equal_columns;
        break;
      }

      // optional .TSWP.ColumnsArchive.NonEqualColumnsArchive non_equal_columns = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_non_equal_columns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_non_equal_columns()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ColumnsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSWP.ColumnsArchive.EqualColumnsArchive equal_columns = 1;
  if (has_equal_columns()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equal_columns(), output);
  }

  // optional .TSWP.ColumnsArchive.NonEqualColumnsArchive non_equal_columns = 2;
  if (has_non_equal_columns()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->non_equal_columns(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ColumnsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSWP.ColumnsArchive.EqualColumnsArchive equal_columns = 1;
  if (has_equal_columns()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equal_columns(), target);
  }

  // optional .TSWP.ColumnsArchive.NonEqualColumnsArchive non_equal_columns = 2;
  if (has_non_equal_columns()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->non_equal_columns(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ColumnsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSWP.ColumnsArchive.EqualColumnsArchive equal_columns = 1;
    if (has_equal_columns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equal_columns());
    }

    // optional .TSWP.ColumnsArchive.NonEqualColumnsArchive non_equal_columns = 2;
    if (has_non_equal_columns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->non_equal_columns());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColumnsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColumnsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColumnsArchive::MergeFrom(const ColumnsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equal_columns()) {
      mutable_equal_columns()->::TSWP::ColumnsArchive_EqualColumnsArchive::MergeFrom(from.equal_columns());
    }
    if (from.has_non_equal_columns()) {
      mutable_non_equal_columns()->::TSWP::ColumnsArchive_NonEqualColumnsArchive::MergeFrom(from.non_equal_columns());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColumnsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnsArchive::CopyFrom(const ColumnsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnsArchive::IsInitialized() const {

  if (has_non_equal_columns()) {
    if (!this->non_equal_columns().IsInitialized()) return false;
  }
  return true;
}

void ColumnsArchive::Swap(ColumnsArchive* other) {
  if (other != this) {
    std::swap(equal_columns_, other->equal_columns_);
    std::swap(non_equal_columns_, other->non_equal_columns_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColumnsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnsArchive_descriptor_;
  metadata.reflection = ColumnsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PaddingArchive::kLeftFieldNumber;
const int PaddingArchive::kTopFieldNumber;
const int PaddingArchive::kRightFieldNumber;
const int PaddingArchive::kBottomFieldNumber;
#endif  // !_MSC_VER

PaddingArchive::PaddingArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PaddingArchive::InitAsDefaultInstance() {
}

PaddingArchive::PaddingArchive(const PaddingArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PaddingArchive::SharedCtor() {
  _cached_size_ = 0;
  left_ = 0;
  top_ = 0;
  right_ = 0;
  bottom_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PaddingArchive::~PaddingArchive() {
  SharedDtor();
}

void PaddingArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PaddingArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PaddingArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PaddingArchive_descriptor_;
}

const PaddingArchive& PaddingArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

PaddingArchive* PaddingArchive::default_instance_ = NULL;

PaddingArchive* PaddingArchive::New() const {
  return new PaddingArchive;
}

void PaddingArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    left_ = 0;
    top_ = 0;
    right_ = 0;
    bottom_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PaddingArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float left = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_top;
        break;
      }

      // optional float top = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top_)));
          set_has_top();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_right;
        break;
      }

      // optional float right = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_bottom;
        break;
      }

      // optional float bottom = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bottom_)));
          set_has_bottom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PaddingArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float left = 1;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->left(), output);
  }

  // optional float top = 2;
  if (has_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->top(), output);
  }

  // optional float right = 3;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->right(), output);
  }

  // optional float bottom = 4;
  if (has_bottom()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->bottom(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PaddingArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float left = 1;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->left(), target);
  }

  // optional float top = 2;
  if (has_top()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->top(), target);
  }

  // optional float right = 3;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->right(), target);
  }

  // optional float bottom = 4;
  if (has_bottom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->bottom(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PaddingArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float left = 1;
    if (has_left()) {
      total_size += 1 + 4;
    }

    // optional float top = 2;
    if (has_top()) {
      total_size += 1 + 4;
    }

    // optional float right = 3;
    if (has_right()) {
      total_size += 1 + 4;
    }

    // optional float bottom = 4;
    if (has_bottom()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PaddingArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PaddingArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PaddingArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PaddingArchive::MergeFrom(const PaddingArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
    if (from.has_bottom()) {
      set_bottom(from.bottom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PaddingArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaddingArchive::CopyFrom(const PaddingArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaddingArchive::IsInitialized() const {

  return true;
}

void PaddingArchive::Swap(PaddingArchive* other) {
  if (other != this) {
    std::swap(left_, other->left_);
    std::swap(top_, other->top_);
    std::swap(right_, other->right_);
    std::swap(bottom_, other->bottom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PaddingArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PaddingArchive_descriptor_;
  metadata.reflection = PaddingArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ColumnStylePropertiesArchive_VerticalAlignmentType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnStylePropertiesArchive_VerticalAlignmentType_descriptor_;
}
bool ColumnStylePropertiesArchive_VerticalAlignmentType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ColumnStylePropertiesArchive_VerticalAlignmentType ColumnStylePropertiesArchive::kFrameAlignTop;
const ColumnStylePropertiesArchive_VerticalAlignmentType ColumnStylePropertiesArchive::kFrameAlignMiddle;
const ColumnStylePropertiesArchive_VerticalAlignmentType ColumnStylePropertiesArchive::kFrameAlignBottom;
const ColumnStylePropertiesArchive_VerticalAlignmentType ColumnStylePropertiesArchive::kFrameAlignJustify;
const ColumnStylePropertiesArchive_VerticalAlignmentType ColumnStylePropertiesArchive::VerticalAlignmentType_MIN;
const ColumnStylePropertiesArchive_VerticalAlignmentType ColumnStylePropertiesArchive::VerticalAlignmentType_MAX;
const int ColumnStylePropertiesArchive::VerticalAlignmentType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ColumnStylePropertiesArchive::kContinuousFieldNumber;
const int ColumnStylePropertiesArchive::kShrinkToFitFieldNumber;
const int ColumnStylePropertiesArchive::kVerticalTextFieldNumber;
const int ColumnStylePropertiesArchive::kMinHorizontalInsetFieldNumber;
const int ColumnStylePropertiesArchive::kVerticalAlignmentFieldNumber;
const int ColumnStylePropertiesArchive::kColumnsNullFieldNumber;
const int ColumnStylePropertiesArchive::kColumnsFieldNumber;
const int ColumnStylePropertiesArchive::kMarginsNullFieldNumber;
const int ColumnStylePropertiesArchive::kMarginsFieldNumber;
const int ColumnStylePropertiesArchive::kPaddingNullFieldNumber;
const int ColumnStylePropertiesArchive::kPaddingFieldNumber;
const int ColumnStylePropertiesArchive::kWritingDirectionFieldNumber;
#endif  // !_MSC_VER

ColumnStylePropertiesArchive::ColumnStylePropertiesArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ColumnStylePropertiesArchive::InitAsDefaultInstance() {
  columns_ = const_cast< ::TSWP::ColumnsArchive*>(&::TSWP::ColumnsArchive::default_instance());
  margins_ = const_cast< ::TSWP::PaddingArchive*>(&::TSWP::PaddingArchive::default_instance());
  padding_ = const_cast< ::TSWP::PaddingArchive*>(&::TSWP::PaddingArchive::default_instance());
}

ColumnStylePropertiesArchive::ColumnStylePropertiesArchive(const ColumnStylePropertiesArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ColumnStylePropertiesArchive::SharedCtor() {
  _cached_size_ = 0;
  continuous_ = false;
  shrink_to_fit_ = false;
  vertical_text_ = false;
  min_horizontal_inset_ = 0;
  vertical_alignment_ = 0;
  columns_null_ = false;
  columns_ = NULL;
  margins_null_ = false;
  margins_ = NULL;
  padding_null_ = false;
  padding_ = NULL;
  writing_direction_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColumnStylePropertiesArchive::~ColumnStylePropertiesArchive() {
  SharedDtor();
}

void ColumnStylePropertiesArchive::SharedDtor() {
  if (this != default_instance_) {
    delete columns_;
    delete margins_;
    delete padding_;
  }
}

void ColumnStylePropertiesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnStylePropertiesArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnStylePropertiesArchive_descriptor_;
}

const ColumnStylePropertiesArchive& ColumnStylePropertiesArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

ColumnStylePropertiesArchive* ColumnStylePropertiesArchive::default_instance_ = NULL;

ColumnStylePropertiesArchive* ColumnStylePropertiesArchive::New() const {
  return new ColumnStylePropertiesArchive;
}

void ColumnStylePropertiesArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    continuous_ = false;
    shrink_to_fit_ = false;
    vertical_text_ = false;
    min_horizontal_inset_ = 0;
    vertical_alignment_ = 0;
    columns_null_ = false;
    if (has_columns()) {
      if (columns_ != NULL) columns_->::TSWP::ColumnsArchive::Clear();
    }
    margins_null_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_margins()) {
      if (margins_ != NULL) margins_->::TSWP::PaddingArchive::Clear();
    }
    padding_null_ = false;
    if (has_padding()) {
      if (padding_ != NULL) padding_->::TSWP::PaddingArchive::Clear();
    }
    writing_direction_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColumnStylePropertiesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool continuous = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &continuous_)));
          set_has_continuous();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shrink_to_fit;
        break;
      }

      // optional bool shrink_to_fit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shrink_to_fit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shrink_to_fit_)));
          set_has_shrink_to_fit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vertical_text;
        break;
      }

      // optional bool vertical_text = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vertical_text:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vertical_text_)));
          set_has_vertical_text();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_min_horizontal_inset;
        break;
      }

      // optional float min_horizontal_inset = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_min_horizontal_inset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_horizontal_inset_)));
          set_has_min_horizontal_inset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vertical_alignment;
        break;
      }

      // optional .TSWP.ColumnStylePropertiesArchive.VerticalAlignmentType vertical_alignment = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vertical_alignment:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::ColumnStylePropertiesArchive_VerticalAlignmentType_IsValid(value)) {
            set_vertical_alignment(static_cast< ::TSWP::ColumnStylePropertiesArchive_VerticalAlignmentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_columns_null;
        break;
      }

      // optional bool columns_null = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_columns_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &columns_null_)));
          set_has_columns_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_columns;
        break;
      }

      // optional .TSWP.ColumnsArchive columns = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_columns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_columns()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_margins_null;
        break;
      }

      // optional bool margins_null = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_margins_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &margins_null_)));
          set_has_margins_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_margins;
        break;
      }

      // optional .TSWP.PaddingArchive margins = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_margins:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_margins()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_padding_null;
        break;
      }

      // optional bool padding_null = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_padding_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &padding_null_)));
          set_has_padding_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_padding;
        break;
      }

      // optional .TSWP.PaddingArchive padding = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_padding:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_padding()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_writing_direction;
        break;
      }

      // optional .TSWP.WritingDirectionType writing_direction = 12 [default = kWritingDirectionNatural];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writing_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::WritingDirectionType_IsValid(value)) {
            set_writing_direction(static_cast< ::TSWP::WritingDirectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ColumnStylePropertiesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool continuous = 1;
  if (has_continuous()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->continuous(), output);
  }

  // optional bool shrink_to_fit = 2;
  if (has_shrink_to_fit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->shrink_to_fit(), output);
  }

  // optional bool vertical_text = 3;
  if (has_vertical_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->vertical_text(), output);
  }

  // optional float min_horizontal_inset = 4;
  if (has_min_horizontal_inset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->min_horizontal_inset(), output);
  }

  // optional .TSWP.ColumnStylePropertiesArchive.VerticalAlignmentType vertical_alignment = 5;
  if (has_vertical_alignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->vertical_alignment(), output);
  }

  // optional bool columns_null = 6;
  if (has_columns_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->columns_null(), output);
  }

  // optional .TSWP.ColumnsArchive columns = 7;
  if (has_columns()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->columns(), output);
  }

  // optional bool margins_null = 8;
  if (has_margins_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->margins_null(), output);
  }

  // optional .TSWP.PaddingArchive margins = 9;
  if (has_margins()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->margins(), output);
  }

  // optional bool padding_null = 10;
  if (has_padding_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->padding_null(), output);
  }

  // optional .TSWP.PaddingArchive padding = 11;
  if (has_padding()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->padding(), output);
  }

  // optional .TSWP.WritingDirectionType writing_direction = 12 [default = kWritingDirectionNatural];
  if (has_writing_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->writing_direction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ColumnStylePropertiesArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool continuous = 1;
  if (has_continuous()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->continuous(), target);
  }

  // optional bool shrink_to_fit = 2;
  if (has_shrink_to_fit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->shrink_to_fit(), target);
  }

  // optional bool vertical_text = 3;
  if (has_vertical_text()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->vertical_text(), target);
  }

  // optional float min_horizontal_inset = 4;
  if (has_min_horizontal_inset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->min_horizontal_inset(), target);
  }

  // optional .TSWP.ColumnStylePropertiesArchive.VerticalAlignmentType vertical_alignment = 5;
  if (has_vertical_alignment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->vertical_alignment(), target);
  }

  // optional bool columns_null = 6;
  if (has_columns_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->columns_null(), target);
  }

  // optional .TSWP.ColumnsArchive columns = 7;
  if (has_columns()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->columns(), target);
  }

  // optional bool margins_null = 8;
  if (has_margins_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->margins_null(), target);
  }

  // optional .TSWP.PaddingArchive margins = 9;
  if (has_margins()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->margins(), target);
  }

  // optional bool padding_null = 10;
  if (has_padding_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->padding_null(), target);
  }

  // optional .TSWP.PaddingArchive padding = 11;
  if (has_padding()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->padding(), target);
  }

  // optional .TSWP.WritingDirectionType writing_direction = 12 [default = kWritingDirectionNatural];
  if (has_writing_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->writing_direction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ColumnStylePropertiesArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool continuous = 1;
    if (has_continuous()) {
      total_size += 1 + 1;
    }

    // optional bool shrink_to_fit = 2;
    if (has_shrink_to_fit()) {
      total_size += 1 + 1;
    }

    // optional bool vertical_text = 3;
    if (has_vertical_text()) {
      total_size += 1 + 1;
    }

    // optional float min_horizontal_inset = 4;
    if (has_min_horizontal_inset()) {
      total_size += 1 + 4;
    }

    // optional .TSWP.ColumnStylePropertiesArchive.VerticalAlignmentType vertical_alignment = 5;
    if (has_vertical_alignment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->vertical_alignment());
    }

    // optional bool columns_null = 6;
    if (has_columns_null()) {
      total_size += 1 + 1;
    }

    // optional .TSWP.ColumnsArchive columns = 7;
    if (has_columns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->columns());
    }

    // optional bool margins_null = 8;
    if (has_margins_null()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TSWP.PaddingArchive margins = 9;
    if (has_margins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->margins());
    }

    // optional bool padding_null = 10;
    if (has_padding_null()) {
      total_size += 1 + 1;
    }

    // optional .TSWP.PaddingArchive padding = 11;
    if (has_padding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->padding());
    }

    // optional .TSWP.WritingDirectionType writing_direction = 12 [default = kWritingDirectionNatural];
    if (has_writing_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->writing_direction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnStylePropertiesArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColumnStylePropertiesArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColumnStylePropertiesArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColumnStylePropertiesArchive::MergeFrom(const ColumnStylePropertiesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_continuous()) {
      set_continuous(from.continuous());
    }
    if (from.has_shrink_to_fit()) {
      set_shrink_to_fit(from.shrink_to_fit());
    }
    if (from.has_vertical_text()) {
      set_vertical_text(from.vertical_text());
    }
    if (from.has_min_horizontal_inset()) {
      set_min_horizontal_inset(from.min_horizontal_inset());
    }
    if (from.has_vertical_alignment()) {
      set_vertical_alignment(from.vertical_alignment());
    }
    if (from.has_columns_null()) {
      set_columns_null(from.columns_null());
    }
    if (from.has_columns()) {
      mutable_columns()->::TSWP::ColumnsArchive::MergeFrom(from.columns());
    }
    if (from.has_margins_null()) {
      set_margins_null(from.margins_null());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_margins()) {
      mutable_margins()->::TSWP::PaddingArchive::MergeFrom(from.margins());
    }
    if (from.has_padding_null()) {
      set_padding_null(from.padding_null());
    }
    if (from.has_padding()) {
      mutable_padding()->::TSWP::PaddingArchive::MergeFrom(from.padding());
    }
    if (from.has_writing_direction()) {
      set_writing_direction(from.writing_direction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColumnStylePropertiesArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnStylePropertiesArchive::CopyFrom(const ColumnStylePropertiesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnStylePropertiesArchive::IsInitialized() const {

  if (has_columns()) {
    if (!this->columns().IsInitialized()) return false;
  }
  return true;
}

void ColumnStylePropertiesArchive::Swap(ColumnStylePropertiesArchive* other) {
  if (other != this) {
    std::swap(continuous_, other->continuous_);
    std::swap(shrink_to_fit_, other->shrink_to_fit_);
    std::swap(vertical_text_, other->vertical_text_);
    std::swap(min_horizontal_inset_, other->min_horizontal_inset_);
    std::swap(vertical_alignment_, other->vertical_alignment_);
    std::swap(columns_null_, other->columns_null_);
    std::swap(columns_, other->columns_);
    std::swap(margins_null_, other->margins_null_);
    std::swap(margins_, other->margins_);
    std::swap(padding_null_, other->padding_null_);
    std::swap(padding_, other->padding_);
    std::swap(writing_direction_, other->writing_direction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColumnStylePropertiesArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnStylePropertiesArchive_descriptor_;
  metadata.reflection = ColumnStylePropertiesArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ColumnStyleArchive::kSuperFieldNumber;
const int ColumnStyleArchive::kOverrideCountFieldNumber;
const int ColumnStyleArchive::kColumnPropertiesFieldNumber;
#endif  // !_MSC_VER

ColumnStyleArchive::ColumnStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ColumnStyleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::StyleArchive*>(&::TSS::StyleArchive::default_instance());
  column_properties_ = const_cast< ::TSWP::ColumnStylePropertiesArchive*>(&::TSWP::ColumnStylePropertiesArchive::default_instance());
}

ColumnStyleArchive::ColumnStyleArchive(const ColumnStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ColumnStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  override_count_ = 0u;
  column_properties_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColumnStyleArchive::~ColumnStyleArchive() {
  SharedDtor();
}

void ColumnStyleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete column_properties_;
  }
}

void ColumnStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnStyleArchive_descriptor_;
}

const ColumnStyleArchive& ColumnStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

ColumnStyleArchive* ColumnStyleArchive::default_instance_ = NULL;

ColumnStyleArchive* ColumnStyleArchive::New() const {
  return new ColumnStyleArchive;
}

void ColumnStyleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::StyleArchive::Clear();
    }
    override_count_ = 0u;
    if (has_column_properties()) {
      if (column_properties_ != NULL) column_properties_->::TSWP::ColumnStylePropertiesArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColumnStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSS.StyleArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_override_count;
        break;
      }

      // optional uint32 override_count = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_override_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &override_count_)));
          set_has_override_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_column_properties;
        break;
      }

      // optional .TSWP.ColumnStylePropertiesArchive column_properties = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_column_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_column_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ColumnStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (has_override_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->override_count(), output);
  }

  // optional .TSWP.ColumnStylePropertiesArchive column_properties = 11;
  if (has_column_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->column_properties(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ColumnStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (has_override_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->override_count(), target);
  }

  // optional .TSWP.ColumnStylePropertiesArchive column_properties = 11;
  if (has_column_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->column_properties(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ColumnStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSS.StyleArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional uint32 override_count = 10 [default = 0];
    if (has_override_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->override_count());
    }

    // optional .TSWP.ColumnStylePropertiesArchive column_properties = 11;
    if (has_column_properties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->column_properties());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColumnStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColumnStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColumnStyleArchive::MergeFrom(const ColumnStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::StyleArchive::MergeFrom(from.super());
    }
    if (from.has_override_count()) {
      set_override_count(from.override_count());
    }
    if (from.has_column_properties()) {
      mutable_column_properties()->::TSWP::ColumnStylePropertiesArchive::MergeFrom(from.column_properties());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColumnStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnStyleArchive::CopyFrom(const ColumnStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnStyleArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_column_properties()) {
    if (!this->column_properties().IsInitialized()) return false;
  }
  return true;
}

void ColumnStyleArchive::Swap(ColumnStyleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(override_count_, other->override_count_);
    std::swap(column_properties_, other->column_properties_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColumnStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnStyleArchive_descriptor_;
  metadata.reflection = ColumnStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ShapeStylePropertiesArchive_VerticalAlignmentType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShapeStylePropertiesArchive_VerticalAlignmentType_descriptor_;
}
bool ShapeStylePropertiesArchive_VerticalAlignmentType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ShapeStylePropertiesArchive_VerticalAlignmentType ShapeStylePropertiesArchive::kFrameAlignTop;
const ShapeStylePropertiesArchive_VerticalAlignmentType ShapeStylePropertiesArchive::kFrameAlignMiddle;
const ShapeStylePropertiesArchive_VerticalAlignmentType ShapeStylePropertiesArchive::kFrameAlignBottom;
const ShapeStylePropertiesArchive_VerticalAlignmentType ShapeStylePropertiesArchive::kFrameAlignJustify;
const ShapeStylePropertiesArchive_VerticalAlignmentType ShapeStylePropertiesArchive::VerticalAlignmentType_MIN;
const ShapeStylePropertiesArchive_VerticalAlignmentType ShapeStylePropertiesArchive::VerticalAlignmentType_MAX;
const int ShapeStylePropertiesArchive::VerticalAlignmentType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ShapeStylePropertiesArchive::kShrinkToFitFieldNumber;
const int ShapeStylePropertiesArchive::kVerticalAlignmentFieldNumber;
const int ShapeStylePropertiesArchive::kColumnsNullFieldNumber;
const int ShapeStylePropertiesArchive::kColumnsFieldNumber;
const int ShapeStylePropertiesArchive::kPaddingNullFieldNumber;
const int ShapeStylePropertiesArchive::kPaddingFieldNumber;
const int ShapeStylePropertiesArchive::kDefaultTextPresetIndexFieldNumber;
const int ShapeStylePropertiesArchive::kVerticalTextFieldNumber;
const int ShapeStylePropertiesArchive::kParagraphStyleNullFieldNumber;
const int ShapeStylePropertiesArchive::kParagraphStyleFieldNumber;
#endif  // !_MSC_VER

ShapeStylePropertiesArchive::ShapeStylePropertiesArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShapeStylePropertiesArchive::InitAsDefaultInstance() {
  columns_ = const_cast< ::TSWP::ColumnsArchive*>(&::TSWP::ColumnsArchive::default_instance());
  padding_ = const_cast< ::TSWP::PaddingArchive*>(&::TSWP::PaddingArchive::default_instance());
  paragraph_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ShapeStylePropertiesArchive::ShapeStylePropertiesArchive(const ShapeStylePropertiesArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShapeStylePropertiesArchive::SharedCtor() {
  _cached_size_ = 0;
  shrink_to_fit_ = false;
  vertical_alignment_ = 0;
  columns_null_ = false;
  columns_ = NULL;
  padding_null_ = false;
  padding_ = NULL;
  default_text_preset_index_ = 0u;
  vertical_text_ = false;
  paragraph_style_null_ = false;
  paragraph_style_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShapeStylePropertiesArchive::~ShapeStylePropertiesArchive() {
  SharedDtor();
}

void ShapeStylePropertiesArchive::SharedDtor() {
  if (this != default_instance_) {
    delete columns_;
    delete padding_;
    delete paragraph_style_;
  }
}

void ShapeStylePropertiesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShapeStylePropertiesArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShapeStylePropertiesArchive_descriptor_;
}

const ShapeStylePropertiesArchive& ShapeStylePropertiesArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

ShapeStylePropertiesArchive* ShapeStylePropertiesArchive::default_instance_ = NULL;

ShapeStylePropertiesArchive* ShapeStylePropertiesArchive::New() const {
  return new ShapeStylePropertiesArchive;
}

void ShapeStylePropertiesArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shrink_to_fit_ = false;
    vertical_alignment_ = 0;
    columns_null_ = false;
    if (has_columns()) {
      if (columns_ != NULL) columns_->::TSWP::ColumnsArchive::Clear();
    }
    padding_null_ = false;
    if (has_padding()) {
      if (padding_ != NULL) padding_->::TSWP::PaddingArchive::Clear();
    }
    default_text_preset_index_ = 0u;
    vertical_text_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    paragraph_style_null_ = false;
    if (has_paragraph_style()) {
      if (paragraph_style_ != NULL) paragraph_style_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShapeStylePropertiesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool shrink_to_fit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shrink_to_fit_)));
          set_has_shrink_to_fit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vertical_alignment;
        break;
      }

      // optional .TSWP.ShapeStylePropertiesArchive.VerticalAlignmentType vertical_alignment = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vertical_alignment:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::ShapeStylePropertiesArchive_VerticalAlignmentType_IsValid(value)) {
            set_vertical_alignment(static_cast< ::TSWP::ShapeStylePropertiesArchive_VerticalAlignmentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_columns_null;
        break;
      }

      // optional bool columns_null = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_columns_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &columns_null_)));
          set_has_columns_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_columns;
        break;
      }

      // optional .TSWP.ColumnsArchive columns = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_columns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_columns()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_padding_null;
        break;
      }

      // optional bool padding_null = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_padding_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &padding_null_)));
          set_has_padding_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_padding;
        break;
      }

      // optional .TSWP.PaddingArchive padding = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_padding:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_padding()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_default_text_preset_index;
        break;
      }

      // optional uint32 default_text_preset_index = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_default_text_preset_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &default_text_preset_index_)));
          set_has_default_text_preset_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_vertical_text;
        break;
      }

      // optional bool vertical_text = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vertical_text:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vertical_text_)));
          set_has_vertical_text();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_paragraph_style_null;
        break;
      }

      // optional bool paragraph_style_null = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paragraph_style_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &paragraph_style_null_)));
          set_has_paragraph_style_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_paragraph_style;
        break;
      }

      // optional .TSP.Reference paragraph_style = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paragraph_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_paragraph_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShapeStylePropertiesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool shrink_to_fit = 1;
  if (has_shrink_to_fit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->shrink_to_fit(), output);
  }

  // optional .TSWP.ShapeStylePropertiesArchive.VerticalAlignmentType vertical_alignment = 2;
  if (has_vertical_alignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->vertical_alignment(), output);
  }

  // optional bool columns_null = 3;
  if (has_columns_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->columns_null(), output);
  }

  // optional .TSWP.ColumnsArchive columns = 4;
  if (has_columns()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->columns(), output);
  }

  // optional bool padding_null = 5;
  if (has_padding_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->padding_null(), output);
  }

  // optional .TSWP.PaddingArchive padding = 6;
  if (has_padding()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->padding(), output);
  }

  // optional uint32 default_text_preset_index = 7;
  if (has_default_text_preset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->default_text_preset_index(), output);
  }

  // optional bool vertical_text = 8;
  if (has_vertical_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->vertical_text(), output);
  }

  // optional bool paragraph_style_null = 9;
  if (has_paragraph_style_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->paragraph_style_null(), output);
  }

  // optional .TSP.Reference paragraph_style = 10;
  if (has_paragraph_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->paragraph_style(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShapeStylePropertiesArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool shrink_to_fit = 1;
  if (has_shrink_to_fit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->shrink_to_fit(), target);
  }

  // optional .TSWP.ShapeStylePropertiesArchive.VerticalAlignmentType vertical_alignment = 2;
  if (has_vertical_alignment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->vertical_alignment(), target);
  }

  // optional bool columns_null = 3;
  if (has_columns_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->columns_null(), target);
  }

  // optional .TSWP.ColumnsArchive columns = 4;
  if (has_columns()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->columns(), target);
  }

  // optional bool padding_null = 5;
  if (has_padding_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->padding_null(), target);
  }

  // optional .TSWP.PaddingArchive padding = 6;
  if (has_padding()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->padding(), target);
  }

  // optional uint32 default_text_preset_index = 7;
  if (has_default_text_preset_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->default_text_preset_index(), target);
  }

  // optional bool vertical_text = 8;
  if (has_vertical_text()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->vertical_text(), target);
  }

  // optional bool paragraph_style_null = 9;
  if (has_paragraph_style_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->paragraph_style_null(), target);
  }

  // optional .TSP.Reference paragraph_style = 10;
  if (has_paragraph_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->paragraph_style(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShapeStylePropertiesArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool shrink_to_fit = 1;
    if (has_shrink_to_fit()) {
      total_size += 1 + 1;
    }

    // optional .TSWP.ShapeStylePropertiesArchive.VerticalAlignmentType vertical_alignment = 2;
    if (has_vertical_alignment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->vertical_alignment());
    }

    // optional bool columns_null = 3;
    if (has_columns_null()) {
      total_size += 1 + 1;
    }

    // optional .TSWP.ColumnsArchive columns = 4;
    if (has_columns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->columns());
    }

    // optional bool padding_null = 5;
    if (has_padding_null()) {
      total_size += 1 + 1;
    }

    // optional .TSWP.PaddingArchive padding = 6;
    if (has_padding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->padding());
    }

    // optional uint32 default_text_preset_index = 7;
    if (has_default_text_preset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->default_text_preset_index());
    }

    // optional bool vertical_text = 8;
    if (has_vertical_text()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool paragraph_style_null = 9;
    if (has_paragraph_style_null()) {
      total_size += 1 + 1;
    }

    // optional .TSP.Reference paragraph_style = 10;
    if (has_paragraph_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->paragraph_style());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShapeStylePropertiesArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShapeStylePropertiesArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShapeStylePropertiesArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShapeStylePropertiesArchive::MergeFrom(const ShapeStylePropertiesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shrink_to_fit()) {
      set_shrink_to_fit(from.shrink_to_fit());
    }
    if (from.has_vertical_alignment()) {
      set_vertical_alignment(from.vertical_alignment());
    }
    if (from.has_columns_null()) {
      set_columns_null(from.columns_null());
    }
    if (from.has_columns()) {
      mutable_columns()->::TSWP::ColumnsArchive::MergeFrom(from.columns());
    }
    if (from.has_padding_null()) {
      set_padding_null(from.padding_null());
    }
    if (from.has_padding()) {
      mutable_padding()->::TSWP::PaddingArchive::MergeFrom(from.padding());
    }
    if (from.has_default_text_preset_index()) {
      set_default_text_preset_index(from.default_text_preset_index());
    }
    if (from.has_vertical_text()) {
      set_vertical_text(from.vertical_text());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_paragraph_style_null()) {
      set_paragraph_style_null(from.paragraph_style_null());
    }
    if (from.has_paragraph_style()) {
      mutable_paragraph_style()->::TSP::Reference::MergeFrom(from.paragraph_style());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShapeStylePropertiesArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeStylePropertiesArchive::CopyFrom(const ShapeStylePropertiesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeStylePropertiesArchive::IsInitialized() const {

  if (has_columns()) {
    if (!this->columns().IsInitialized()) return false;
  }
  if (has_paragraph_style()) {
    if (!this->paragraph_style().IsInitialized()) return false;
  }
  return true;
}

void ShapeStylePropertiesArchive::Swap(ShapeStylePropertiesArchive* other) {
  if (other != this) {
    std::swap(shrink_to_fit_, other->shrink_to_fit_);
    std::swap(vertical_alignment_, other->vertical_alignment_);
    std::swap(columns_null_, other->columns_null_);
    std::swap(columns_, other->columns_);
    std::swap(padding_null_, other->padding_null_);
    std::swap(padding_, other->padding_);
    std::swap(default_text_preset_index_, other->default_text_preset_index_);
    std::swap(vertical_text_, other->vertical_text_);
    std::swap(paragraph_style_null_, other->paragraph_style_null_);
    std::swap(paragraph_style_, other->paragraph_style_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShapeStylePropertiesArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShapeStylePropertiesArchive_descriptor_;
  metadata.reflection = ShapeStylePropertiesArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShapeStyleArchive::kSuperFieldNumber;
const int ShapeStyleArchive::kOverrideCountFieldNumber;
const int ShapeStyleArchive::kShapePropertiesFieldNumber;
#endif  // !_MSC_VER

ShapeStyleArchive::ShapeStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShapeStyleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSD::ShapeStyleArchive*>(&::TSD::ShapeStyleArchive::default_instance());
  shape_properties_ = const_cast< ::TSWP::ShapeStylePropertiesArchive*>(&::TSWP::ShapeStylePropertiesArchive::default_instance());
}

ShapeStyleArchive::ShapeStyleArchive(const ShapeStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShapeStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  override_count_ = 0u;
  shape_properties_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShapeStyleArchive::~ShapeStyleArchive() {
  SharedDtor();
}

void ShapeStyleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete shape_properties_;
  }
}

void ShapeStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShapeStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShapeStyleArchive_descriptor_;
}

const ShapeStyleArchive& ShapeStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

ShapeStyleArchive* ShapeStyleArchive::default_instance_ = NULL;

ShapeStyleArchive* ShapeStyleArchive::New() const {
  return new ShapeStyleArchive;
}

void ShapeStyleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSD::ShapeStyleArchive::Clear();
    }
    override_count_ = 0u;
    if (has_shape_properties()) {
      if (shape_properties_ != NULL) shape_properties_->::TSWP::ShapeStylePropertiesArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShapeStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSD.ShapeStyleArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_override_count;
        break;
      }

      // optional uint32 override_count = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_override_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &override_count_)));
          set_has_override_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_shape_properties;
        break;
      }

      // optional .TSWP.ShapeStylePropertiesArchive shape_properties = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shape_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShapeStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSD.ShapeStyleArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (has_override_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->override_count(), output);
  }

  // optional .TSWP.ShapeStylePropertiesArchive shape_properties = 11;
  if (has_shape_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->shape_properties(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShapeStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSD.ShapeStyleArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (has_override_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->override_count(), target);
  }

  // optional .TSWP.ShapeStylePropertiesArchive shape_properties = 11;
  if (has_shape_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->shape_properties(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShapeStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSD.ShapeStyleArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional uint32 override_count = 10 [default = 0];
    if (has_override_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->override_count());
    }

    // optional .TSWP.ShapeStylePropertiesArchive shape_properties = 11;
    if (has_shape_properties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shape_properties());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShapeStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShapeStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShapeStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShapeStyleArchive::MergeFrom(const ShapeStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSD::ShapeStyleArchive::MergeFrom(from.super());
    }
    if (from.has_override_count()) {
      set_override_count(from.override_count());
    }
    if (from.has_shape_properties()) {
      mutable_shape_properties()->::TSWP::ShapeStylePropertiesArchive::MergeFrom(from.shape_properties());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShapeStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeStyleArchive::CopyFrom(const ShapeStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeStyleArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_shape_properties()) {
    if (!this->shape_properties().IsInitialized()) return false;
  }
  return true;
}

void ShapeStyleArchive::Swap(ShapeStyleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(override_count_, other->override_count_);
    std::swap(shape_properties_, other->shape_properties_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShapeStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShapeStyleArchive_descriptor_;
  metadata.reflection = ShapeStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThemePresetsArchive::kListStylePresetsFieldNumber;
const int ThemePresetsArchive::kTextStylePresetsFieldNumber;
const int ThemePresetsArchive::kImportedTextStylePresetsFieldNumber;
const int ThemePresetsArchive::kTocEntryStylePresetsFieldNumber;
const int ThemePresetsArchive::kTocSettingsPresetsFieldNumber;
const int ThemePresetsArchive::kCharacterStylePresetsFieldNumber;
const int ThemePresetsArchive::kParagraphStylePresetsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ThemePresetsArchive::kExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::TSS::ThemeArchive,
    ::google::protobuf::internal::MessageTypeTraits< ::TSWP::ThemePresetsArchive >, 11, false >
  ThemePresetsArchive::extension(kExtensionFieldNumber, ::TSWP::ThemePresetsArchive::default_instance());
ThemePresetsArchive::ThemePresetsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThemePresetsArchive::InitAsDefaultInstance() {
}

ThemePresetsArchive::ThemePresetsArchive(const ThemePresetsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThemePresetsArchive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThemePresetsArchive::~ThemePresetsArchive() {
  SharedDtor();
}

void ThemePresetsArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ThemePresetsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThemePresetsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThemePresetsArchive_descriptor_;
}

const ThemePresetsArchive& ThemePresetsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

ThemePresetsArchive* ThemePresetsArchive::default_instance_ = NULL;

ThemePresetsArchive* ThemePresetsArchive::New() const {
  return new ThemePresetsArchive;
}

void ThemePresetsArchive::Clear() {
  list_style_presets_.Clear();
  text_style_presets_.Clear();
  imported_text_style_presets_.Clear();
  toc_entry_style_presets_.Clear();
  toc_settings_presets_.Clear();
  character_style_presets_.Clear();
  paragraph_style_presets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThemePresetsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSP.Reference list_style_presets = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_style_presets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_style_presets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list_style_presets;
        if (input->ExpectTag(18)) goto parse_text_style_presets;
        break;
      }

      // repeated .TSP.Reference text_style_presets = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text_style_presets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_text_style_presets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text_style_presets;
        if (input->ExpectTag(26)) goto parse_imported_text_style_presets;
        break;
      }

      // repeated .TSP.Reference imported_text_style_presets = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imported_text_style_presets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_imported_text_style_presets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_imported_text_style_presets;
        if (input->ExpectTag(34)) goto parse_toc_entry_style_presets;
        break;
      }

      // repeated .TSP.Reference toc_entry_style_presets = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toc_entry_style_presets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_toc_entry_style_presets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_toc_entry_style_presets;
        if (input->ExpectTag(42)) goto parse_toc_settings_presets;
        break;
      }

      // repeated .TSP.Reference toc_settings_presets = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toc_settings_presets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_toc_settings_presets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_toc_settings_presets;
        if (input->ExpectTag(50)) goto parse_character_style_presets;
        break;
      }

      // repeated .TSP.Reference character_style_presets = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_character_style_presets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_character_style_presets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_character_style_presets;
        if (input->ExpectTag(58)) goto parse_paragraph_style_presets;
        break;
      }

      // repeated .TSP.Reference paragraph_style_presets = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paragraph_style_presets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_paragraph_style_presets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_paragraph_style_presets;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThemePresetsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSP.Reference list_style_presets = 1;
  for (int i = 0; i < this->list_style_presets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list_style_presets(i), output);
  }

  // repeated .TSP.Reference text_style_presets = 2;
  for (int i = 0; i < this->text_style_presets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->text_style_presets(i), output);
  }

  // repeated .TSP.Reference imported_text_style_presets = 3;
  for (int i = 0; i < this->imported_text_style_presets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->imported_text_style_presets(i), output);
  }

  // repeated .TSP.Reference toc_entry_style_presets = 4;
  for (int i = 0; i < this->toc_entry_style_presets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->toc_entry_style_presets(i), output);
  }

  // repeated .TSP.Reference toc_settings_presets = 5;
  for (int i = 0; i < this->toc_settings_presets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->toc_settings_presets(i), output);
  }

  // repeated .TSP.Reference character_style_presets = 6;
  for (int i = 0; i < this->character_style_presets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->character_style_presets(i), output);
  }

  // repeated .TSP.Reference paragraph_style_presets = 7;
  for (int i = 0; i < this->paragraph_style_presets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->paragraph_style_presets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThemePresetsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSP.Reference list_style_presets = 1;
  for (int i = 0; i < this->list_style_presets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list_style_presets(i), target);
  }

  // repeated .TSP.Reference text_style_presets = 2;
  for (int i = 0; i < this->text_style_presets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->text_style_presets(i), target);
  }

  // repeated .TSP.Reference imported_text_style_presets = 3;
  for (int i = 0; i < this->imported_text_style_presets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->imported_text_style_presets(i), target);
  }

  // repeated .TSP.Reference toc_entry_style_presets = 4;
  for (int i = 0; i < this->toc_entry_style_presets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->toc_entry_style_presets(i), target);
  }

  // repeated .TSP.Reference toc_settings_presets = 5;
  for (int i = 0; i < this->toc_settings_presets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->toc_settings_presets(i), target);
  }

  // repeated .TSP.Reference character_style_presets = 6;
  for (int i = 0; i < this->character_style_presets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->character_style_presets(i), target);
  }

  // repeated .TSP.Reference paragraph_style_presets = 7;
  for (int i = 0; i < this->paragraph_style_presets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->paragraph_style_presets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThemePresetsArchive::ByteSize() const {
  int total_size = 0;

  // repeated .TSP.Reference list_style_presets = 1;
  total_size += 1 * this->list_style_presets_size();
  for (int i = 0; i < this->list_style_presets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_style_presets(i));
  }

  // repeated .TSP.Reference text_style_presets = 2;
  total_size += 1 * this->text_style_presets_size();
  for (int i = 0; i < this->text_style_presets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->text_style_presets(i));
  }

  // repeated .TSP.Reference imported_text_style_presets = 3;
  total_size += 1 * this->imported_text_style_presets_size();
  for (int i = 0; i < this->imported_text_style_presets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->imported_text_style_presets(i));
  }

  // repeated .TSP.Reference toc_entry_style_presets = 4;
  total_size += 1 * this->toc_entry_style_presets_size();
  for (int i = 0; i < this->toc_entry_style_presets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->toc_entry_style_presets(i));
  }

  // repeated .TSP.Reference toc_settings_presets = 5;
  total_size += 1 * this->toc_settings_presets_size();
  for (int i = 0; i < this->toc_settings_presets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->toc_settings_presets(i));
  }

  // repeated .TSP.Reference character_style_presets = 6;
  total_size += 1 * this->character_style_presets_size();
  for (int i = 0; i < this->character_style_presets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->character_style_presets(i));
  }

  // repeated .TSP.Reference paragraph_style_presets = 7;
  total_size += 1 * this->paragraph_style_presets_size();
  for (int i = 0; i < this->paragraph_style_presets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->paragraph_style_presets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThemePresetsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThemePresetsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThemePresetsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThemePresetsArchive::MergeFrom(const ThemePresetsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_style_presets_.MergeFrom(from.list_style_presets_);
  text_style_presets_.MergeFrom(from.text_style_presets_);
  imported_text_style_presets_.MergeFrom(from.imported_text_style_presets_);
  toc_entry_style_presets_.MergeFrom(from.toc_entry_style_presets_);
  toc_settings_presets_.MergeFrom(from.toc_settings_presets_);
  character_style_presets_.MergeFrom(from.character_style_presets_);
  paragraph_style_presets_.MergeFrom(from.paragraph_style_presets_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThemePresetsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThemePresetsArchive::CopyFrom(const ThemePresetsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemePresetsArchive::IsInitialized() const {

  for (int i = 0; i < list_style_presets_size(); i++) {
    if (!this->list_style_presets(i).IsInitialized()) return false;
  }
  for (int i = 0; i < text_style_presets_size(); i++) {
    if (!this->text_style_presets(i).IsInitialized()) return false;
  }
  for (int i = 0; i < imported_text_style_presets_size(); i++) {
    if (!this->imported_text_style_presets(i).IsInitialized()) return false;
  }
  for (int i = 0; i < toc_entry_style_presets_size(); i++) {
    if (!this->toc_entry_style_presets(i).IsInitialized()) return false;
  }
  for (int i = 0; i < toc_settings_presets_size(); i++) {
    if (!this->toc_settings_presets(i).IsInitialized()) return false;
  }
  for (int i = 0; i < character_style_presets_size(); i++) {
    if (!this->character_style_presets(i).IsInitialized()) return false;
  }
  for (int i = 0; i < paragraph_style_presets_size(); i++) {
    if (!this->paragraph_style_presets(i).IsInitialized()) return false;
  }
  return true;
}

void ThemePresetsArchive::Swap(ThemePresetsArchive* other) {
  if (other != this) {
    list_style_presets_.Swap(&other->list_style_presets_);
    text_style_presets_.Swap(&other->text_style_presets_);
    imported_text_style_presets_.Swap(&other->imported_text_style_presets_);
    toc_entry_style_presets_.Swap(&other->toc_entry_style_presets_);
    toc_settings_presets_.Swap(&other->toc_settings_presets_);
    character_style_presets_.Swap(&other->character_style_presets_);
    paragraph_style_presets_.Swap(&other->paragraph_style_presets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThemePresetsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThemePresetsArchive_descriptor_;
  metadata.reflection = ThemePresetsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TextPresetDisplayItemArchive::kPresetFieldNumber;
const int TextPresetDisplayItemArchive::kDisplayNameFieldNumber;
#endif  // !_MSC_VER

TextPresetDisplayItemArchive::TextPresetDisplayItemArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TextPresetDisplayItemArchive::InitAsDefaultInstance() {
  preset_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

TextPresetDisplayItemArchive::TextPresetDisplayItemArchive(const TextPresetDisplayItemArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TextPresetDisplayItemArchive::SharedCtor() {
  _cached_size_ = 0;
  preset_ = NULL;
  display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TextPresetDisplayItemArchive::~TextPresetDisplayItemArchive() {
  SharedDtor();
}

void TextPresetDisplayItemArchive::SharedDtor() {
  if (display_name_ != &::google::protobuf::internal::kEmptyString) {
    delete display_name_;
  }
  if (this != default_instance_) {
    delete preset_;
  }
}

void TextPresetDisplayItemArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextPresetDisplayItemArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TextPresetDisplayItemArchive_descriptor_;
}

const TextPresetDisplayItemArchive& TextPresetDisplayItemArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

TextPresetDisplayItemArchive* TextPresetDisplayItemArchive::default_instance_ = NULL;

TextPresetDisplayItemArchive* TextPresetDisplayItemArchive::New() const {
  return new TextPresetDisplayItemArchive;
}

void TextPresetDisplayItemArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_preset()) {
      if (preset_ != NULL) preset_->::TSP::Reference::Clear();
    }
    if (has_display_name()) {
      if (display_name_ != &::google::protobuf::internal::kEmptyString) {
        display_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TextPresetDisplayItemArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Reference preset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_display_name;
        break;
      }

      // required string display_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TextPresetDisplayItemArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Reference preset = 1;
  if (has_preset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->preset(), output);
  }

  // required string display_name = 2;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->display_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TextPresetDisplayItemArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Reference preset = 1;
  if (has_preset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->preset(), target);
  }

  // required string display_name = 2;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->display_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TextPresetDisplayItemArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.Reference preset = 1;
    if (has_preset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->preset());
    }

    // required string display_name = 2;
    if (has_display_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextPresetDisplayItemArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TextPresetDisplayItemArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TextPresetDisplayItemArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TextPresetDisplayItemArchive::MergeFrom(const TextPresetDisplayItemArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_preset()) {
      mutable_preset()->::TSP::Reference::MergeFrom(from.preset());
    }
    if (from.has_display_name()) {
      set_display_name(from.display_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TextPresetDisplayItemArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextPresetDisplayItemArchive::CopyFrom(const TextPresetDisplayItemArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextPresetDisplayItemArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_preset()) {
    if (!this->preset().IsInitialized()) return false;
  }
  return true;
}

void TextPresetDisplayItemArchive::Swap(TextPresetDisplayItemArchive* other) {
  if (other != this) {
    std::swap(preset_, other->preset_);
    std::swap(display_name_, other->display_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TextPresetDisplayItemArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TextPresetDisplayItemArchive_descriptor_;
  metadata.reflection = TextPresetDisplayItemArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TOCEntryStylePropertiesArchive::kPageNumberStyleNullFieldNumber;
const int TOCEntryStylePropertiesArchive::kPageNumberStyleFieldNumber;
const int TOCEntryStylePropertiesArchive::kShowPageNumberFieldNumber;
#endif  // !_MSC_VER

TOCEntryStylePropertiesArchive::TOCEntryStylePropertiesArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TOCEntryStylePropertiesArchive::InitAsDefaultInstance() {
  page_number_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

TOCEntryStylePropertiesArchive::TOCEntryStylePropertiesArchive(const TOCEntryStylePropertiesArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TOCEntryStylePropertiesArchive::SharedCtor() {
  _cached_size_ = 0;
  page_number_style_null_ = false;
  page_number_style_ = NULL;
  show_page_number_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TOCEntryStylePropertiesArchive::~TOCEntryStylePropertiesArchive() {
  SharedDtor();
}

void TOCEntryStylePropertiesArchive::SharedDtor() {
  if (this != default_instance_) {
    delete page_number_style_;
  }
}

void TOCEntryStylePropertiesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TOCEntryStylePropertiesArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TOCEntryStylePropertiesArchive_descriptor_;
}

const TOCEntryStylePropertiesArchive& TOCEntryStylePropertiesArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

TOCEntryStylePropertiesArchive* TOCEntryStylePropertiesArchive::default_instance_ = NULL;

TOCEntryStylePropertiesArchive* TOCEntryStylePropertiesArchive::New() const {
  return new TOCEntryStylePropertiesArchive;
}

void TOCEntryStylePropertiesArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    page_number_style_null_ = false;
    if (has_page_number_style()) {
      if (page_number_style_ != NULL) page_number_style_->::TSP::Reference::Clear();
    }
    show_page_number_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TOCEntryStylePropertiesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool page_number_style_null = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &page_number_style_null_)));
          set_has_page_number_style_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_page_number_style;
        break;
      }

      // optional .TSP.Reference page_number_style = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_number_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_page_number_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_show_page_number;
        break;
      }

      // optional bool show_page_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_page_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_page_number_)));
          set_has_show_page_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TOCEntryStylePropertiesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool page_number_style_null = 1;
  if (has_page_number_style_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->page_number_style_null(), output);
  }

  // optional .TSP.Reference page_number_style = 2;
  if (has_page_number_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->page_number_style(), output);
  }

  // optional bool show_page_number = 3;
  if (has_show_page_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->show_page_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TOCEntryStylePropertiesArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool page_number_style_null = 1;
  if (has_page_number_style_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->page_number_style_null(), target);
  }

  // optional .TSP.Reference page_number_style = 2;
  if (has_page_number_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->page_number_style(), target);
  }

  // optional bool show_page_number = 3;
  if (has_show_page_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->show_page_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TOCEntryStylePropertiesArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool page_number_style_null = 1;
    if (has_page_number_style_null()) {
      total_size += 1 + 1;
    }

    // optional .TSP.Reference page_number_style = 2;
    if (has_page_number_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->page_number_style());
    }

    // optional bool show_page_number = 3;
    if (has_show_page_number()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TOCEntryStylePropertiesArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TOCEntryStylePropertiesArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TOCEntryStylePropertiesArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TOCEntryStylePropertiesArchive::MergeFrom(const TOCEntryStylePropertiesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page_number_style_null()) {
      set_page_number_style_null(from.page_number_style_null());
    }
    if (from.has_page_number_style()) {
      mutable_page_number_style()->::TSP::Reference::MergeFrom(from.page_number_style());
    }
    if (from.has_show_page_number()) {
      set_show_page_number(from.show_page_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TOCEntryStylePropertiesArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TOCEntryStylePropertiesArchive::CopyFrom(const TOCEntryStylePropertiesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOCEntryStylePropertiesArchive::IsInitialized() const {

  if (has_page_number_style()) {
    if (!this->page_number_style().IsInitialized()) return false;
  }
  return true;
}

void TOCEntryStylePropertiesArchive::Swap(TOCEntryStylePropertiesArchive* other) {
  if (other != this) {
    std::swap(page_number_style_null_, other->page_number_style_null_);
    std::swap(page_number_style_, other->page_number_style_);
    std::swap(show_page_number_, other->show_page_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TOCEntryStylePropertiesArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TOCEntryStylePropertiesArchive_descriptor_;
  metadata.reflection = TOCEntryStylePropertiesArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TOCEntryStyleArchive::kSuperFieldNumber;
const int TOCEntryStyleArchive::kTocPropertiesFieldNumber;
#endif  // !_MSC_VER

TOCEntryStyleArchive::TOCEntryStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TOCEntryStyleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::ParagraphStyleArchive*>(&::TSWP::ParagraphStyleArchive::default_instance());
  toc_properties_ = const_cast< ::TSWP::TOCEntryStylePropertiesArchive*>(&::TSWP::TOCEntryStylePropertiesArchive::default_instance());
}

TOCEntryStyleArchive::TOCEntryStyleArchive(const TOCEntryStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TOCEntryStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  toc_properties_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TOCEntryStyleArchive::~TOCEntryStyleArchive() {
  SharedDtor();
}

void TOCEntryStyleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete toc_properties_;
  }
}

void TOCEntryStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TOCEntryStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TOCEntryStyleArchive_descriptor_;
}

const TOCEntryStyleArchive& TOCEntryStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

TOCEntryStyleArchive* TOCEntryStyleArchive::default_instance_ = NULL;

TOCEntryStyleArchive* TOCEntryStyleArchive::New() const {
  return new TOCEntryStyleArchive;
}

void TOCEntryStyleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::ParagraphStyleArchive::Clear();
    }
    if (has_toc_properties()) {
      if (toc_properties_ != NULL) toc_properties_->::TSWP::TOCEntryStylePropertiesArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TOCEntryStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSWP.ParagraphStyleArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_toc_properties;
        break;
      }

      // optional .TSWP.TOCEntryStylePropertiesArchive toc_properties = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toc_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toc_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TOCEntryStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSWP.ParagraphStyleArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSWP.TOCEntryStylePropertiesArchive toc_properties = 2;
  if (has_toc_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->toc_properties(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TOCEntryStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSWP.ParagraphStyleArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSWP.TOCEntryStylePropertiesArchive toc_properties = 2;
  if (has_toc_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->toc_properties(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TOCEntryStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSWP.ParagraphStyleArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSWP.TOCEntryStylePropertiesArchive toc_properties = 2;
    if (has_toc_properties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toc_properties());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TOCEntryStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TOCEntryStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TOCEntryStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TOCEntryStyleArchive::MergeFrom(const TOCEntryStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::ParagraphStyleArchive::MergeFrom(from.super());
    }
    if (from.has_toc_properties()) {
      mutable_toc_properties()->::TSWP::TOCEntryStylePropertiesArchive::MergeFrom(from.toc_properties());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TOCEntryStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TOCEntryStyleArchive::CopyFrom(const TOCEntryStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOCEntryStyleArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_toc_properties()) {
    if (!this->toc_properties().IsInitialized()) return false;
  }
  return true;
}

void TOCEntryStyleArchive::Swap(TOCEntryStyleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(toc_properties_, other->toc_properties_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TOCEntryStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TOCEntryStyleArchive_descriptor_;
  metadata.reflection = TOCEntryStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TOCSettingsArchive_TOCEntryData::kParagraphStyleFieldNumber;
const int TOCSettingsArchive_TOCEntryData::kTocEntryStyleFieldNumber;
const int TOCSettingsArchive_TOCEntryData::kShowInTocFieldNumber;
#endif  // !_MSC_VER

TOCSettingsArchive_TOCEntryData::TOCSettingsArchive_TOCEntryData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TOCSettingsArchive_TOCEntryData::InitAsDefaultInstance() {
  paragraph_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  toc_entry_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

TOCSettingsArchive_TOCEntryData::TOCSettingsArchive_TOCEntryData(const TOCSettingsArchive_TOCEntryData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TOCSettingsArchive_TOCEntryData::SharedCtor() {
  _cached_size_ = 0;
  paragraph_style_ = NULL;
  toc_entry_style_ = NULL;
  show_in_toc_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TOCSettingsArchive_TOCEntryData::~TOCSettingsArchive_TOCEntryData() {
  SharedDtor();
}

void TOCSettingsArchive_TOCEntryData::SharedDtor() {
  if (this != default_instance_) {
    delete paragraph_style_;
    delete toc_entry_style_;
  }
}

void TOCSettingsArchive_TOCEntryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TOCSettingsArchive_TOCEntryData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TOCSettingsArchive_TOCEntryData_descriptor_;
}

const TOCSettingsArchive_TOCEntryData& TOCSettingsArchive_TOCEntryData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

TOCSettingsArchive_TOCEntryData* TOCSettingsArchive_TOCEntryData::default_instance_ = NULL;

TOCSettingsArchive_TOCEntryData* TOCSettingsArchive_TOCEntryData::New() const {
  return new TOCSettingsArchive_TOCEntryData;
}

void TOCSettingsArchive_TOCEntryData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_paragraph_style()) {
      if (paragraph_style_ != NULL) paragraph_style_->::TSP::Reference::Clear();
    }
    if (has_toc_entry_style()) {
      if (toc_entry_style_ != NULL) toc_entry_style_->::TSP::Reference::Clear();
    }
    show_in_toc_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TOCSettingsArchive_TOCEntryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference paragraph_style = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_paragraph_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_toc_entry_style;
        break;
      }

      // optional .TSP.Reference toc_entry_style = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toc_entry_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toc_entry_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_show_in_toc;
        break;
      }

      // optional bool show_in_toc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_in_toc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_in_toc_)));
          set_has_show_in_toc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TOCSettingsArchive_TOCEntryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference paragraph_style = 1;
  if (has_paragraph_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->paragraph_style(), output);
  }

  // optional .TSP.Reference toc_entry_style = 2;
  if (has_toc_entry_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->toc_entry_style(), output);
  }

  // optional bool show_in_toc = 3;
  if (has_show_in_toc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->show_in_toc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TOCSettingsArchive_TOCEntryData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference paragraph_style = 1;
  if (has_paragraph_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->paragraph_style(), target);
  }

  // optional .TSP.Reference toc_entry_style = 2;
  if (has_toc_entry_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->toc_entry_style(), target);
  }

  // optional bool show_in_toc = 3;
  if (has_show_in_toc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->show_in_toc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TOCSettingsArchive_TOCEntryData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference paragraph_style = 1;
    if (has_paragraph_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->paragraph_style());
    }

    // optional .TSP.Reference toc_entry_style = 2;
    if (has_toc_entry_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toc_entry_style());
    }

    // optional bool show_in_toc = 3;
    if (has_show_in_toc()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TOCSettingsArchive_TOCEntryData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TOCSettingsArchive_TOCEntryData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TOCSettingsArchive_TOCEntryData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TOCSettingsArchive_TOCEntryData::MergeFrom(const TOCSettingsArchive_TOCEntryData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_paragraph_style()) {
      mutable_paragraph_style()->::TSP::Reference::MergeFrom(from.paragraph_style());
    }
    if (from.has_toc_entry_style()) {
      mutable_toc_entry_style()->::TSP::Reference::MergeFrom(from.toc_entry_style());
    }
    if (from.has_show_in_toc()) {
      set_show_in_toc(from.show_in_toc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TOCSettingsArchive_TOCEntryData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TOCSettingsArchive_TOCEntryData::CopyFrom(const TOCSettingsArchive_TOCEntryData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOCSettingsArchive_TOCEntryData::IsInitialized() const {

  if (has_paragraph_style()) {
    if (!this->paragraph_style().IsInitialized()) return false;
  }
  if (has_toc_entry_style()) {
    if (!this->toc_entry_style().IsInitialized()) return false;
  }
  return true;
}

void TOCSettingsArchive_TOCEntryData::Swap(TOCSettingsArchive_TOCEntryData* other) {
  if (other != this) {
    std::swap(paragraph_style_, other->paragraph_style_);
    std::swap(toc_entry_style_, other->toc_entry_style_);
    std::swap(show_in_toc_, other->show_in_toc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TOCSettingsArchive_TOCEntryData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TOCSettingsArchive_TOCEntryData_descriptor_;
  metadata.reflection = TOCSettingsArchive_TOCEntryData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TOCSettingsArchive::kTocNameFieldNumber;
const int TOCSettingsArchive::kTocScopeFieldNumber;
const int TOCSettingsArchive::kEntriesFieldNumber;
#endif  // !_MSC_VER

TOCSettingsArchive::TOCSettingsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TOCSettingsArchive::InitAsDefaultInstance() {
}

TOCSettingsArchive::TOCSettingsArchive(const TOCSettingsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TOCSettingsArchive::SharedCtor() {
  _cached_size_ = 0;
  toc_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  toc_scope_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TOCSettingsArchive::~TOCSettingsArchive() {
  SharedDtor();
}

void TOCSettingsArchive::SharedDtor() {
  if (toc_name_ != &::google::protobuf::internal::kEmptyString) {
    delete toc_name_;
  }
  if (this != default_instance_) {
  }
}

void TOCSettingsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TOCSettingsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TOCSettingsArchive_descriptor_;
}

const TOCSettingsArchive& TOCSettingsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

TOCSettingsArchive* TOCSettingsArchive::default_instance_ = NULL;

TOCSettingsArchive* TOCSettingsArchive::New() const {
  return new TOCSettingsArchive;
}

void TOCSettingsArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_toc_name()) {
      if (toc_name_ != &::google::protobuf::internal::kEmptyString) {
        toc_name_->clear();
      }
    }
    toc_scope_ = 0u;
  }
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TOCSettingsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string toc_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_toc_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->toc_name().data(), this->toc_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_toc_scope;
        break;
      }

      // optional uint32 toc_scope = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toc_scope:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &toc_scope_)));
          set_has_toc_scope();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_entries;
        break;
      }

      // repeated .TSWP.TOCSettingsArchive.TOCEntryData entries = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TOCSettingsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string toc_name = 1;
  if (has_toc_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->toc_name().data(), this->toc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->toc_name(), output);
  }

  // optional uint32 toc_scope = 2;
  if (has_toc_scope()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->toc_scope(), output);
  }

  // repeated .TSWP.TOCSettingsArchive.TOCEntryData entries = 3;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TOCSettingsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string toc_name = 1;
  if (has_toc_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->toc_name().data(), this->toc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->toc_name(), target);
  }

  // optional uint32 toc_scope = 2;
  if (has_toc_scope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->toc_scope(), target);
  }

  // repeated .TSWP.TOCSettingsArchive.TOCEntryData entries = 3;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TOCSettingsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string toc_name = 1;
    if (has_toc_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->toc_name());
    }

    // optional uint32 toc_scope = 2;
    if (has_toc_scope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->toc_scope());
    }

  }
  // repeated .TSWP.TOCSettingsArchive.TOCEntryData entries = 3;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TOCSettingsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TOCSettingsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TOCSettingsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TOCSettingsArchive::MergeFrom(const TOCSettingsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_toc_name()) {
      set_toc_name(from.toc_name());
    }
    if (from.has_toc_scope()) {
      set_toc_scope(from.toc_scope());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TOCSettingsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TOCSettingsArchive::CopyFrom(const TOCSettingsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOCSettingsArchive::IsInitialized() const {

  for (int i = 0; i < entries_size(); i++) {
    if (!this->entries(i).IsInitialized()) return false;
  }
  return true;
}

void TOCSettingsArchive::Swap(TOCSettingsArchive* other) {
  if (other != this) {
    std::swap(toc_name_, other->toc_name_);
    std::swap(toc_scope_, other->toc_scope_);
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TOCSettingsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TOCSettingsArchive_descriptor_;
  metadata.reflection = TOCSettingsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TOCEntryInstanceArchive::kParagraphIndexFieldNumber;
const int TOCEntryInstanceArchive::kPageNumberFieldNumber;
const int TOCEntryInstanceArchive::kNumberFormatFieldNumber;
const int TOCEntryInstanceArchive::kHeadingFieldNumber;
const int TOCEntryInstanceArchive::kIndexedStyleFieldNumber;
const int TOCEntryInstanceArchive::kIndexedListStyleFieldNumber;
const int TOCEntryInstanceArchive::kIndexedListStartFieldNumber;
const int TOCEntryInstanceArchive::kIndexedParagraphLevelFieldNumber;
#endif  // !_MSC_VER

TOCEntryInstanceArchive::TOCEntryInstanceArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TOCEntryInstanceArchive::InitAsDefaultInstance() {
  indexed_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  indexed_list_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

TOCEntryInstanceArchive::TOCEntryInstanceArchive(const TOCEntryInstanceArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TOCEntryInstanceArchive::SharedCtor() {
  _cached_size_ = 0;
  paragraph_index_ = 0u;
  page_number_ = 0u;
  number_format_ = 0u;
  heading_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  indexed_style_ = NULL;
  indexed_list_style_ = NULL;
  indexed_list_start_ = 0u;
  indexed_paragraph_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TOCEntryInstanceArchive::~TOCEntryInstanceArchive() {
  SharedDtor();
}

void TOCEntryInstanceArchive::SharedDtor() {
  if (heading_ != &::google::protobuf::internal::kEmptyString) {
    delete heading_;
  }
  if (this != default_instance_) {
    delete indexed_style_;
    delete indexed_list_style_;
  }
}

void TOCEntryInstanceArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TOCEntryInstanceArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TOCEntryInstanceArchive_descriptor_;
}

const TOCEntryInstanceArchive& TOCEntryInstanceArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

TOCEntryInstanceArchive* TOCEntryInstanceArchive::default_instance_ = NULL;

TOCEntryInstanceArchive* TOCEntryInstanceArchive::New() const {
  return new TOCEntryInstanceArchive;
}

void TOCEntryInstanceArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    paragraph_index_ = 0u;
    page_number_ = 0u;
    number_format_ = 0u;
    if (has_heading()) {
      if (heading_ != &::google::protobuf::internal::kEmptyString) {
        heading_->clear();
      }
    }
    if (has_indexed_style()) {
      if (indexed_style_ != NULL) indexed_style_->::TSP::Reference::Clear();
    }
    if (has_indexed_list_style()) {
      if (indexed_list_style_ != NULL) indexed_list_style_->::TSP::Reference::Clear();
    }
    indexed_list_start_ = 0u;
    indexed_paragraph_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TOCEntryInstanceArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 paragraph_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paragraph_index_)));
          set_has_paragraph_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_page_number;
        break;
      }

      // required uint32 page_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_number_)));
          set_has_page_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_number_format;
        break;
      }

      // required uint32 number_format = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number_format:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_format_)));
          set_has_number_format();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_heading;
        break;
      }

      // required string heading = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heading:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_heading()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->heading().data(), this->heading().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_indexed_style;
        break;
      }

      // required .TSP.Reference indexed_style = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_indexed_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_indexed_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_indexed_list_style;
        break;
      }

      // optional .TSP.Reference indexed_list_style = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_indexed_list_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_indexed_list_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_indexed_list_start;
        break;
      }

      // optional uint32 indexed_list_start = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_indexed_list_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &indexed_list_start_)));
          set_has_indexed_list_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_indexed_paragraph_level;
        break;
      }

      // optional uint32 indexed_paragraph_level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_indexed_paragraph_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &indexed_paragraph_level_)));
          set_has_indexed_paragraph_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TOCEntryInstanceArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 paragraph_index = 1;
  if (has_paragraph_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->paragraph_index(), output);
  }

  // required uint32 page_number = 2;
  if (has_page_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->page_number(), output);
  }

  // required uint32 number_format = 3;
  if (has_number_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->number_format(), output);
  }

  // required string heading = 4;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->heading().data(), this->heading().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->heading(), output);
  }

  // required .TSP.Reference indexed_style = 5;
  if (has_indexed_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->indexed_style(), output);
  }

  // optional .TSP.Reference indexed_list_style = 6;
  if (has_indexed_list_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->indexed_list_style(), output);
  }

  // optional uint32 indexed_list_start = 7;
  if (has_indexed_list_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->indexed_list_start(), output);
  }

  // optional uint32 indexed_paragraph_level = 8;
  if (has_indexed_paragraph_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->indexed_paragraph_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TOCEntryInstanceArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 paragraph_index = 1;
  if (has_paragraph_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->paragraph_index(), target);
  }

  // required uint32 page_number = 2;
  if (has_page_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->page_number(), target);
  }

  // required uint32 number_format = 3;
  if (has_number_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->number_format(), target);
  }

  // required string heading = 4;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->heading().data(), this->heading().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->heading(), target);
  }

  // required .TSP.Reference indexed_style = 5;
  if (has_indexed_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->indexed_style(), target);
  }

  // optional .TSP.Reference indexed_list_style = 6;
  if (has_indexed_list_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->indexed_list_style(), target);
  }

  // optional uint32 indexed_list_start = 7;
  if (has_indexed_list_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->indexed_list_start(), target);
  }

  // optional uint32 indexed_paragraph_level = 8;
  if (has_indexed_paragraph_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->indexed_paragraph_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TOCEntryInstanceArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 paragraph_index = 1;
    if (has_paragraph_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->paragraph_index());
    }

    // required uint32 page_number = 2;
    if (has_page_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_number());
    }

    // required uint32 number_format = 3;
    if (has_number_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_format());
    }

    // required string heading = 4;
    if (has_heading()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->heading());
    }

    // required .TSP.Reference indexed_style = 5;
    if (has_indexed_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->indexed_style());
    }

    // optional .TSP.Reference indexed_list_style = 6;
    if (has_indexed_list_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->indexed_list_style());
    }

    // optional uint32 indexed_list_start = 7;
    if (has_indexed_list_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->indexed_list_start());
    }

    // optional uint32 indexed_paragraph_level = 8;
    if (has_indexed_paragraph_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->indexed_paragraph_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TOCEntryInstanceArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TOCEntryInstanceArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TOCEntryInstanceArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TOCEntryInstanceArchive::MergeFrom(const TOCEntryInstanceArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_paragraph_index()) {
      set_paragraph_index(from.paragraph_index());
    }
    if (from.has_page_number()) {
      set_page_number(from.page_number());
    }
    if (from.has_number_format()) {
      set_number_format(from.number_format());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_indexed_style()) {
      mutable_indexed_style()->::TSP::Reference::MergeFrom(from.indexed_style());
    }
    if (from.has_indexed_list_style()) {
      mutable_indexed_list_style()->::TSP::Reference::MergeFrom(from.indexed_list_style());
    }
    if (from.has_indexed_list_start()) {
      set_indexed_list_start(from.indexed_list_start());
    }
    if (from.has_indexed_paragraph_level()) {
      set_indexed_paragraph_level(from.indexed_paragraph_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TOCEntryInstanceArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TOCEntryInstanceArchive::CopyFrom(const TOCEntryInstanceArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOCEntryInstanceArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_indexed_style()) {
    if (!this->indexed_style().IsInitialized()) return false;
  }
  if (has_indexed_list_style()) {
    if (!this->indexed_list_style().IsInitialized()) return false;
  }
  return true;
}

void TOCEntryInstanceArchive::Swap(TOCEntryInstanceArchive* other) {
  if (other != this) {
    std::swap(paragraph_index_, other->paragraph_index_);
    std::swap(page_number_, other->page_number_);
    std::swap(number_format_, other->number_format_);
    std::swap(heading_, other->heading_);
    std::swap(indexed_style_, other->indexed_style_);
    std::swap(indexed_list_style_, other->indexed_list_style_);
    std::swap(indexed_list_start_, other->indexed_list_start_);
    std::swap(indexed_paragraph_level_, other->indexed_paragraph_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TOCEntryInstanceArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TOCEntryInstanceArchive_descriptor_;
  metadata.reflection = TOCEntryInstanceArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* UndoTransaction_UndoKind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UndoTransaction_UndoKind_descriptor_;
}
bool UndoTransaction_UndoKind_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UndoTransaction_UndoKind UndoTransaction::REPLACE_TEXT;
const UndoTransaction_UndoKind UndoTransaction::INSERT_ATTRIBUTE;
const UndoTransaction_UndoKind UndoTransaction::DELETE_ATTRIBUTE;
const UndoTransaction_UndoKind UndoTransaction::ADJUST_CHAR_INDEXES;
const UndoTransaction_UndoKind UndoTransaction::COMPR_ADJUST_CHAR_INDEXES;
const UndoTransaction_UndoKind UndoTransaction::REPLACE_CHAR_INDEX;
const UndoTransaction_UndoKind UndoTransaction::REPLACE_OBJECT;
const UndoTransaction_UndoKind UndoTransaction::REPLACE_PARAGRAPH_DATA;
const UndoTransaction_UndoKind UndoTransaction::OBJECT_DOLC;
const UndoTransaction_UndoKind UndoTransaction::CT_DATE;
const UndoTransaction_UndoKind UndoTransaction::UndoKind_MIN;
const UndoTransaction_UndoKind UndoTransaction::UndoKind_MAX;
const int UndoTransaction::UndoKind_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UndoTransaction_GenericTransaction::kValue1FieldNumber;
const int UndoTransaction_GenericTransaction::kValue2FieldNumber;
const int UndoTransaction_GenericTransaction::kValue3FieldNumber;
#endif  // !_MSC_VER

UndoTransaction_GenericTransaction::UndoTransaction_GenericTransaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UndoTransaction_GenericTransaction::InitAsDefaultInstance() {
}

UndoTransaction_GenericTransaction::UndoTransaction_GenericTransaction(const UndoTransaction_GenericTransaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UndoTransaction_GenericTransaction::SharedCtor() {
  _cached_size_ = 0;
  value1_ = 0u;
  value2_ = 0u;
  value3_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UndoTransaction_GenericTransaction::~UndoTransaction_GenericTransaction() {
  SharedDtor();
}

void UndoTransaction_GenericTransaction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UndoTransaction_GenericTransaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UndoTransaction_GenericTransaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UndoTransaction_GenericTransaction_descriptor_;
}

const UndoTransaction_GenericTransaction& UndoTransaction_GenericTransaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

UndoTransaction_GenericTransaction* UndoTransaction_GenericTransaction::default_instance_ = NULL;

UndoTransaction_GenericTransaction* UndoTransaction_GenericTransaction::New() const {
  return new UndoTransaction_GenericTransaction;
}

void UndoTransaction_GenericTransaction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value1_ = 0u;
    value2_ = 0u;
    value3_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UndoTransaction_GenericTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 value1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value1_)));
          set_has_value1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value2;
        break;
      }

      // required uint32 value2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value2_)));
          set_has_value2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value3;
        break;
      }

      // required uint32 value3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value3_)));
          set_has_value3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UndoTransaction_GenericTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 value1 = 1;
  if (has_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->value1(), output);
  }

  // required uint32 value2 = 2;
  if (has_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value2(), output);
  }

  // required uint32 value3 = 3;
  if (has_value3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UndoTransaction_GenericTransaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 value1 = 1;
  if (has_value1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->value1(), target);
  }

  // required uint32 value2 = 2;
  if (has_value2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value2(), target);
  }

  // required uint32 value3 = 3;
  if (has_value3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UndoTransaction_GenericTransaction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 value1 = 1;
    if (has_value1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value1());
    }

    // required uint32 value2 = 2;
    if (has_value2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value2());
    }

    // required uint32 value3 = 3;
    if (has_value3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UndoTransaction_GenericTransaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UndoTransaction_GenericTransaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UndoTransaction_GenericTransaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UndoTransaction_GenericTransaction::MergeFrom(const UndoTransaction_GenericTransaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value1()) {
      set_value1(from.value1());
    }
    if (from.has_value2()) {
      set_value2(from.value2());
    }
    if (from.has_value3()) {
      set_value3(from.value3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UndoTransaction_GenericTransaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndoTransaction_GenericTransaction::CopyFrom(const UndoTransaction_GenericTransaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_GenericTransaction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UndoTransaction_GenericTransaction::Swap(UndoTransaction_GenericTransaction* other) {
  if (other != this) {
    std::swap(value1_, other->value1_);
    std::swap(value2_, other->value2_);
    std::swap(value3_, other->value3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UndoTransaction_GenericTransaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UndoTransaction_GenericTransaction_descriptor_;
  metadata.reflection = UndoTransaction_GenericTransaction_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UndoTransaction_TextTransaction::kInsertLocationFieldNumber;
const int UndoTransaction_TextTransaction::kInsertLengthFieldNumber;
const int UndoTransaction_TextTransaction::kStringToDeleteFieldNumber;
#endif  // !_MSC_VER

UndoTransaction_TextTransaction::UndoTransaction_TextTransaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UndoTransaction_TextTransaction::InitAsDefaultInstance() {
}

UndoTransaction_TextTransaction::UndoTransaction_TextTransaction(const UndoTransaction_TextTransaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UndoTransaction_TextTransaction::SharedCtor() {
  _cached_size_ = 0;
  insert_location_ = 0u;
  insert_length_ = 0u;
  string_to_delete_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UndoTransaction_TextTransaction::~UndoTransaction_TextTransaction() {
  SharedDtor();
}

void UndoTransaction_TextTransaction::SharedDtor() {
  if (string_to_delete_ != &::google::protobuf::internal::kEmptyString) {
    delete string_to_delete_;
  }
  if (this != default_instance_) {
  }
}

void UndoTransaction_TextTransaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UndoTransaction_TextTransaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UndoTransaction_TextTransaction_descriptor_;
}

const UndoTransaction_TextTransaction& UndoTransaction_TextTransaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

UndoTransaction_TextTransaction* UndoTransaction_TextTransaction::default_instance_ = NULL;

UndoTransaction_TextTransaction* UndoTransaction_TextTransaction::New() const {
  return new UndoTransaction_TextTransaction;
}

void UndoTransaction_TextTransaction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    insert_location_ = 0u;
    insert_length_ = 0u;
    if (has_string_to_delete()) {
      if (string_to_delete_ != &::google::protobuf::internal::kEmptyString) {
        string_to_delete_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UndoTransaction_TextTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 insert_location = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &insert_location_)));
          set_has_insert_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_insert_length;
        break;
      }

      // required uint32 insert_length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_insert_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &insert_length_)));
          set_has_insert_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_string_to_delete;
        break;
      }

      // optional string string_to_delete = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_to_delete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_to_delete()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_to_delete().data(), this->string_to_delete().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UndoTransaction_TextTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 insert_location = 1;
  if (has_insert_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->insert_location(), output);
  }

  // required uint32 insert_length = 2;
  if (has_insert_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->insert_length(), output);
  }

  // optional string string_to_delete = 3;
  if (has_string_to_delete()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_to_delete().data(), this->string_to_delete().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->string_to_delete(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UndoTransaction_TextTransaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 insert_location = 1;
  if (has_insert_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->insert_location(), target);
  }

  // required uint32 insert_length = 2;
  if (has_insert_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->insert_length(), target);
  }

  // optional string string_to_delete = 3;
  if (has_string_to_delete()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_to_delete().data(), this->string_to_delete().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->string_to_delete(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UndoTransaction_TextTransaction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 insert_location = 1;
    if (has_insert_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->insert_location());
    }

    // required uint32 insert_length = 2;
    if (has_insert_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->insert_length());
    }

    // optional string string_to_delete = 3;
    if (has_string_to_delete()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_to_delete());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UndoTransaction_TextTransaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UndoTransaction_TextTransaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UndoTransaction_TextTransaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UndoTransaction_TextTransaction::MergeFrom(const UndoTransaction_TextTransaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_insert_location()) {
      set_insert_location(from.insert_location());
    }
    if (from.has_insert_length()) {
      set_insert_length(from.insert_length());
    }
    if (from.has_string_to_delete()) {
      set_string_to_delete(from.string_to_delete());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UndoTransaction_TextTransaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndoTransaction_TextTransaction::CopyFrom(const UndoTransaction_TextTransaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_TextTransaction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UndoTransaction_TextTransaction::Swap(UndoTransaction_TextTransaction* other) {
  if (other != this) {
    std::swap(insert_location_, other->insert_location_);
    std::swap(insert_length_, other->insert_length_);
    std::swap(string_to_delete_, other->string_to_delete_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UndoTransaction_TextTransaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UndoTransaction_TextTransaction_descriptor_;
  metadata.reflection = UndoTransaction_TextTransaction_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UndoTransaction_CharIndexTransaction::kCharIndexFieldNumber;
const int UndoTransaction_CharIndexTransaction::kCountFieldNumber;
const int UndoTransaction_CharIndexTransaction::kObjectFieldNumber;
#endif  // !_MSC_VER

UndoTransaction_CharIndexTransaction::UndoTransaction_CharIndexTransaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UndoTransaction_CharIndexTransaction::InitAsDefaultInstance() {
  object_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

UndoTransaction_CharIndexTransaction::UndoTransaction_CharIndexTransaction(const UndoTransaction_CharIndexTransaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UndoTransaction_CharIndexTransaction::SharedCtor() {
  _cached_size_ = 0;
  char_index_ = 0u;
  count_ = 0u;
  object_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UndoTransaction_CharIndexTransaction::~UndoTransaction_CharIndexTransaction() {
  SharedDtor();
}

void UndoTransaction_CharIndexTransaction::SharedDtor() {
  if (this != default_instance_) {
    delete object_;
  }
}

void UndoTransaction_CharIndexTransaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UndoTransaction_CharIndexTransaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UndoTransaction_CharIndexTransaction_descriptor_;
}

const UndoTransaction_CharIndexTransaction& UndoTransaction_CharIndexTransaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

UndoTransaction_CharIndexTransaction* UndoTransaction_CharIndexTransaction::default_instance_ = NULL;

UndoTransaction_CharIndexTransaction* UndoTransaction_CharIndexTransaction::New() const {
  return new UndoTransaction_CharIndexTransaction;
}

void UndoTransaction_CharIndexTransaction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    char_index_ = 0u;
    count_ = 0u;
    if (has_object()) {
      if (object_ != NULL) object_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UndoTransaction_CharIndexTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 char_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_index_)));
          set_has_char_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_object;
        break;
      }

      // optional .TSP.Reference object = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UndoTransaction_CharIndexTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 char_index = 1;
  if (has_char_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->char_index(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // optional .TSP.Reference object = 3;
  if (has_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->object(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UndoTransaction_CharIndexTransaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 char_index = 1;
  if (has_char_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->char_index(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // optional .TSP.Reference object = 3;
  if (has_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->object(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UndoTransaction_CharIndexTransaction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 char_index = 1;
    if (has_char_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_index());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional .TSP.Reference object = 3;
    if (has_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UndoTransaction_CharIndexTransaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UndoTransaction_CharIndexTransaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UndoTransaction_CharIndexTransaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UndoTransaction_CharIndexTransaction::MergeFrom(const UndoTransaction_CharIndexTransaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_index()) {
      set_char_index(from.char_index());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_object()) {
      mutable_object()->::TSP::Reference::MergeFrom(from.object());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UndoTransaction_CharIndexTransaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndoTransaction_CharIndexTransaction::CopyFrom(const UndoTransaction_CharIndexTransaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_CharIndexTransaction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_object()) {
    if (!this->object().IsInitialized()) return false;
  }
  return true;
}

void UndoTransaction_CharIndexTransaction::Swap(UndoTransaction_CharIndexTransaction* other) {
  if (other != this) {
    std::swap(char_index_, other->char_index_);
    std::swap(count_, other->count_);
    std::swap(object_, other->object_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UndoTransaction_CharIndexTransaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UndoTransaction_CharIndexTransaction_descriptor_;
  metadata.reflection = UndoTransaction_CharIndexTransaction_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UndoTransaction_ReplaceCharIndexTransaction::kAttributeIndexFieldNumber;
const int UndoTransaction_ReplaceCharIndexTransaction::kCharIndexFieldNumber;
#endif  // !_MSC_VER

UndoTransaction_ReplaceCharIndexTransaction::UndoTransaction_ReplaceCharIndexTransaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UndoTransaction_ReplaceCharIndexTransaction::InitAsDefaultInstance() {
}

UndoTransaction_ReplaceCharIndexTransaction::UndoTransaction_ReplaceCharIndexTransaction(const UndoTransaction_ReplaceCharIndexTransaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UndoTransaction_ReplaceCharIndexTransaction::SharedCtor() {
  _cached_size_ = 0;
  attribute_index_ = 0u;
  char_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UndoTransaction_ReplaceCharIndexTransaction::~UndoTransaction_ReplaceCharIndexTransaction() {
  SharedDtor();
}

void UndoTransaction_ReplaceCharIndexTransaction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UndoTransaction_ReplaceCharIndexTransaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UndoTransaction_ReplaceCharIndexTransaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UndoTransaction_ReplaceCharIndexTransaction_descriptor_;
}

const UndoTransaction_ReplaceCharIndexTransaction& UndoTransaction_ReplaceCharIndexTransaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

UndoTransaction_ReplaceCharIndexTransaction* UndoTransaction_ReplaceCharIndexTransaction::default_instance_ = NULL;

UndoTransaction_ReplaceCharIndexTransaction* UndoTransaction_ReplaceCharIndexTransaction::New() const {
  return new UndoTransaction_ReplaceCharIndexTransaction;
}

void UndoTransaction_ReplaceCharIndexTransaction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attribute_index_ = 0u;
    char_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UndoTransaction_ReplaceCharIndexTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 attribute_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_index_)));
          set_has_attribute_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_char_index;
        break;
      }

      // required uint32 char_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_char_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_index_)));
          set_has_char_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UndoTransaction_ReplaceCharIndexTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 attribute_index = 1;
  if (has_attribute_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attribute_index(), output);
  }

  // required uint32 char_index = 2;
  if (has_char_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->char_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UndoTransaction_ReplaceCharIndexTransaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 attribute_index = 1;
  if (has_attribute_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attribute_index(), target);
  }

  // required uint32 char_index = 2;
  if (has_char_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->char_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UndoTransaction_ReplaceCharIndexTransaction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 attribute_index = 1;
    if (has_attribute_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_index());
    }

    // required uint32 char_index = 2;
    if (has_char_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UndoTransaction_ReplaceCharIndexTransaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UndoTransaction_ReplaceCharIndexTransaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UndoTransaction_ReplaceCharIndexTransaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UndoTransaction_ReplaceCharIndexTransaction::MergeFrom(const UndoTransaction_ReplaceCharIndexTransaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attribute_index()) {
      set_attribute_index(from.attribute_index());
    }
    if (from.has_char_index()) {
      set_char_index(from.char_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UndoTransaction_ReplaceCharIndexTransaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndoTransaction_ReplaceCharIndexTransaction::CopyFrom(const UndoTransaction_ReplaceCharIndexTransaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_ReplaceCharIndexTransaction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UndoTransaction_ReplaceCharIndexTransaction::Swap(UndoTransaction_ReplaceCharIndexTransaction* other) {
  if (other != this) {
    std::swap(attribute_index_, other->attribute_index_);
    std::swap(char_index_, other->char_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UndoTransaction_ReplaceCharIndexTransaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UndoTransaction_ReplaceCharIndexTransaction_descriptor_;
  metadata.reflection = UndoTransaction_ReplaceCharIndexTransaction_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UndoTransaction_AttributeIndexTransaction::kAttributeIndexFieldNumber;
const int UndoTransaction_AttributeIndexTransaction::kCharIndexFieldNumber;
const int UndoTransaction_AttributeIndexTransaction::kObjectFieldNumber;
const int UndoTransaction_AttributeIndexTransaction::kStringFieldNumber;
#endif  // !_MSC_VER

UndoTransaction_AttributeIndexTransaction::UndoTransaction_AttributeIndexTransaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UndoTransaction_AttributeIndexTransaction::InitAsDefaultInstance() {
  object_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

UndoTransaction_AttributeIndexTransaction::UndoTransaction_AttributeIndexTransaction(const UndoTransaction_AttributeIndexTransaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UndoTransaction_AttributeIndexTransaction::SharedCtor() {
  _cached_size_ = 0;
  attribute_index_ = 0u;
  char_index_ = 0u;
  object_ = NULL;
  string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UndoTransaction_AttributeIndexTransaction::~UndoTransaction_AttributeIndexTransaction() {
  SharedDtor();
}

void UndoTransaction_AttributeIndexTransaction::SharedDtor() {
  if (string_ != &::google::protobuf::internal::kEmptyString) {
    delete string_;
  }
  if (this != default_instance_) {
    delete object_;
  }
}

void UndoTransaction_AttributeIndexTransaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UndoTransaction_AttributeIndexTransaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UndoTransaction_AttributeIndexTransaction_descriptor_;
}

const UndoTransaction_AttributeIndexTransaction& UndoTransaction_AttributeIndexTransaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

UndoTransaction_AttributeIndexTransaction* UndoTransaction_AttributeIndexTransaction::default_instance_ = NULL;

UndoTransaction_AttributeIndexTransaction* UndoTransaction_AttributeIndexTransaction::New() const {
  return new UndoTransaction_AttributeIndexTransaction;
}

void UndoTransaction_AttributeIndexTransaction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attribute_index_ = 0u;
    char_index_ = 0u;
    if (has_object()) {
      if (object_ != NULL) object_->::TSP::Reference::Clear();
    }
    if (has_string()) {
      if (string_ != &::google::protobuf::internal::kEmptyString) {
        string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UndoTransaction_AttributeIndexTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 attribute_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_index_)));
          set_has_attribute_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_char_index;
        break;
      }

      // required uint32 char_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_char_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_index_)));
          set_has_char_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_object;
        break;
      }

      // optional .TSP.Reference object = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_string;
        break;
      }

      // optional string string = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string().data(), this->string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UndoTransaction_AttributeIndexTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 attribute_index = 1;
  if (has_attribute_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attribute_index(), output);
  }

  // required uint32 char_index = 2;
  if (has_char_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->char_index(), output);
  }

  // optional .TSP.Reference object = 3;
  if (has_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->object(), output);
  }

  // optional string string = 4;
  if (has_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string().data(), this->string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->string(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UndoTransaction_AttributeIndexTransaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 attribute_index = 1;
  if (has_attribute_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attribute_index(), target);
  }

  // required uint32 char_index = 2;
  if (has_char_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->char_index(), target);
  }

  // optional .TSP.Reference object = 3;
  if (has_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->object(), target);
  }

  // optional string string = 4;
  if (has_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string().data(), this->string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->string(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UndoTransaction_AttributeIndexTransaction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 attribute_index = 1;
    if (has_attribute_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_index());
    }

    // required uint32 char_index = 2;
    if (has_char_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_index());
    }

    // optional .TSP.Reference object = 3;
    if (has_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object());
    }

    // optional string string = 4;
    if (has_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UndoTransaction_AttributeIndexTransaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UndoTransaction_AttributeIndexTransaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UndoTransaction_AttributeIndexTransaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UndoTransaction_AttributeIndexTransaction::MergeFrom(const UndoTransaction_AttributeIndexTransaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attribute_index()) {
      set_attribute_index(from.attribute_index());
    }
    if (from.has_char_index()) {
      set_char_index(from.char_index());
    }
    if (from.has_object()) {
      mutable_object()->::TSP::Reference::MergeFrom(from.object());
    }
    if (from.has_string()) {
      set_string(from.string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UndoTransaction_AttributeIndexTransaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndoTransaction_AttributeIndexTransaction::CopyFrom(const UndoTransaction_AttributeIndexTransaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_AttributeIndexTransaction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_object()) {
    if (!this->object().IsInitialized()) return false;
  }
  return true;
}

void UndoTransaction_AttributeIndexTransaction::Swap(UndoTransaction_AttributeIndexTransaction* other) {
  if (other != this) {
    std::swap(attribute_index_, other->attribute_index_);
    std::swap(char_index_, other->char_index_);
    std::swap(object_, other->object_);
    std::swap(string_, other->string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UndoTransaction_AttributeIndexTransaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UndoTransaction_AttributeIndexTransaction_descriptor_;
  metadata.reflection = UndoTransaction_AttributeIndexTransaction_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UndoTransaction_InsertAttributeTransaction::kAttributeIndexFieldNumber;
const int UndoTransaction_InsertAttributeTransaction::kAttributeCountFieldNumber;
const int UndoTransaction_InsertAttributeTransaction::kObjectFieldNumber;
const int UndoTransaction_InsertAttributeTransaction::kStringFieldNumber;
#endif  // !_MSC_VER

UndoTransaction_InsertAttributeTransaction::UndoTransaction_InsertAttributeTransaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UndoTransaction_InsertAttributeTransaction::InitAsDefaultInstance() {
  object_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

UndoTransaction_InsertAttributeTransaction::UndoTransaction_InsertAttributeTransaction(const UndoTransaction_InsertAttributeTransaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UndoTransaction_InsertAttributeTransaction::SharedCtor() {
  _cached_size_ = 0;
  attribute_index_ = 0u;
  attribute_count_ = 0u;
  object_ = NULL;
  string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UndoTransaction_InsertAttributeTransaction::~UndoTransaction_InsertAttributeTransaction() {
  SharedDtor();
}

void UndoTransaction_InsertAttributeTransaction::SharedDtor() {
  if (string_ != &::google::protobuf::internal::kEmptyString) {
    delete string_;
  }
  if (this != default_instance_) {
    delete object_;
  }
}

void UndoTransaction_InsertAttributeTransaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UndoTransaction_InsertAttributeTransaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UndoTransaction_InsertAttributeTransaction_descriptor_;
}

const UndoTransaction_InsertAttributeTransaction& UndoTransaction_InsertAttributeTransaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

UndoTransaction_InsertAttributeTransaction* UndoTransaction_InsertAttributeTransaction::default_instance_ = NULL;

UndoTransaction_InsertAttributeTransaction* UndoTransaction_InsertAttributeTransaction::New() const {
  return new UndoTransaction_InsertAttributeTransaction;
}

void UndoTransaction_InsertAttributeTransaction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attribute_index_ = 0u;
    attribute_count_ = 0u;
    if (has_object()) {
      if (object_ != NULL) object_->::TSP::Reference::Clear();
    }
    if (has_string()) {
      if (string_ != &::google::protobuf::internal::kEmptyString) {
        string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UndoTransaction_InsertAttributeTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 attribute_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_index_)));
          set_has_attribute_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attribute_count;
        break;
      }

      // required uint32 attribute_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attribute_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_count_)));
          set_has_attribute_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_object;
        break;
      }

      // optional .TSP.Reference object = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_string;
        break;
      }

      // optional string string = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string().data(), this->string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UndoTransaction_InsertAttributeTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 attribute_index = 1;
  if (has_attribute_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attribute_index(), output);
  }

  // required uint32 attribute_count = 2;
  if (has_attribute_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attribute_count(), output);
  }

  // optional .TSP.Reference object = 3;
  if (has_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->object(), output);
  }

  // optional string string = 4;
  if (has_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string().data(), this->string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->string(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UndoTransaction_InsertAttributeTransaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 attribute_index = 1;
  if (has_attribute_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attribute_index(), target);
  }

  // required uint32 attribute_count = 2;
  if (has_attribute_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attribute_count(), target);
  }

  // optional .TSP.Reference object = 3;
  if (has_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->object(), target);
  }

  // optional string string = 4;
  if (has_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string().data(), this->string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->string(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UndoTransaction_InsertAttributeTransaction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 attribute_index = 1;
    if (has_attribute_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_index());
    }

    // required uint32 attribute_count = 2;
    if (has_attribute_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_count());
    }

    // optional .TSP.Reference object = 3;
    if (has_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object());
    }

    // optional string string = 4;
    if (has_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UndoTransaction_InsertAttributeTransaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UndoTransaction_InsertAttributeTransaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UndoTransaction_InsertAttributeTransaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UndoTransaction_InsertAttributeTransaction::MergeFrom(const UndoTransaction_InsertAttributeTransaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attribute_index()) {
      set_attribute_index(from.attribute_index());
    }
    if (from.has_attribute_count()) {
      set_attribute_count(from.attribute_count());
    }
    if (from.has_object()) {
      mutable_object()->::TSP::Reference::MergeFrom(from.object());
    }
    if (from.has_string()) {
      set_string(from.string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UndoTransaction_InsertAttributeTransaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndoTransaction_InsertAttributeTransaction::CopyFrom(const UndoTransaction_InsertAttributeTransaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_InsertAttributeTransaction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_object()) {
    if (!this->object().IsInitialized()) return false;
  }
  return true;
}

void UndoTransaction_InsertAttributeTransaction::Swap(UndoTransaction_InsertAttributeTransaction* other) {
  if (other != this) {
    std::swap(attribute_index_, other->attribute_index_);
    std::swap(attribute_count_, other->attribute_count_);
    std::swap(object_, other->object_);
    std::swap(string_, other->string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UndoTransaction_InsertAttributeTransaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UndoTransaction_InsertAttributeTransaction_descriptor_;
  metadata.reflection = UndoTransaction_InsertAttributeTransaction_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UndoTransaction_InsertNilTransaction::kAttributeIndexFieldNumber;
const int UndoTransaction_InsertNilTransaction::kAttributeCountFieldNumber;
#endif  // !_MSC_VER

UndoTransaction_InsertNilTransaction::UndoTransaction_InsertNilTransaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UndoTransaction_InsertNilTransaction::InitAsDefaultInstance() {
}

UndoTransaction_InsertNilTransaction::UndoTransaction_InsertNilTransaction(const UndoTransaction_InsertNilTransaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UndoTransaction_InsertNilTransaction::SharedCtor() {
  _cached_size_ = 0;
  attribute_index_ = 0u;
  attribute_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UndoTransaction_InsertNilTransaction::~UndoTransaction_InsertNilTransaction() {
  SharedDtor();
}

void UndoTransaction_InsertNilTransaction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UndoTransaction_InsertNilTransaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UndoTransaction_InsertNilTransaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UndoTransaction_InsertNilTransaction_descriptor_;
}

const UndoTransaction_InsertNilTransaction& UndoTransaction_InsertNilTransaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

UndoTransaction_InsertNilTransaction* UndoTransaction_InsertNilTransaction::default_instance_ = NULL;

UndoTransaction_InsertNilTransaction* UndoTransaction_InsertNilTransaction::New() const {
  return new UndoTransaction_InsertNilTransaction;
}

void UndoTransaction_InsertNilTransaction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attribute_index_ = 0u;
    attribute_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UndoTransaction_InsertNilTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 attribute_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_index_)));
          set_has_attribute_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attribute_count;
        break;
      }

      // required uint32 attribute_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attribute_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_count_)));
          set_has_attribute_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UndoTransaction_InsertNilTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 attribute_index = 1;
  if (has_attribute_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attribute_index(), output);
  }

  // required uint32 attribute_count = 2;
  if (has_attribute_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attribute_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UndoTransaction_InsertNilTransaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 attribute_index = 1;
  if (has_attribute_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attribute_index(), target);
  }

  // required uint32 attribute_count = 2;
  if (has_attribute_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attribute_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UndoTransaction_InsertNilTransaction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 attribute_index = 1;
    if (has_attribute_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_index());
    }

    // required uint32 attribute_count = 2;
    if (has_attribute_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UndoTransaction_InsertNilTransaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UndoTransaction_InsertNilTransaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UndoTransaction_InsertNilTransaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UndoTransaction_InsertNilTransaction::MergeFrom(const UndoTransaction_InsertNilTransaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attribute_index()) {
      set_attribute_index(from.attribute_index());
    }
    if (from.has_attribute_count()) {
      set_attribute_count(from.attribute_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UndoTransaction_InsertNilTransaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndoTransaction_InsertNilTransaction::CopyFrom(const UndoTransaction_InsertNilTransaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_InsertNilTransaction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UndoTransaction_InsertNilTransaction::Swap(UndoTransaction_InsertNilTransaction* other) {
  if (other != this) {
    std::swap(attribute_index_, other->attribute_index_);
    std::swap(attribute_count_, other->attribute_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UndoTransaction_InsertNilTransaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UndoTransaction_InsertNilTransaction_descriptor_;
  metadata.reflection = UndoTransaction_InsertNilTransaction_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UndoTransaction_CharDeltaTransaction::kCharIndexFieldNumber;
const int UndoTransaction_CharDeltaTransaction::kAttributeIndexFieldNumber;
const int UndoTransaction_CharDeltaTransaction::kCharDeltaFieldNumber;
#endif  // !_MSC_VER

UndoTransaction_CharDeltaTransaction::UndoTransaction_CharDeltaTransaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UndoTransaction_CharDeltaTransaction::InitAsDefaultInstance() {
}

UndoTransaction_CharDeltaTransaction::UndoTransaction_CharDeltaTransaction(const UndoTransaction_CharDeltaTransaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UndoTransaction_CharDeltaTransaction::SharedCtor() {
  _cached_size_ = 0;
  char_index_ = 0u;
  attribute_index_ = 0u;
  char_delta_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UndoTransaction_CharDeltaTransaction::~UndoTransaction_CharDeltaTransaction() {
  SharedDtor();
}

void UndoTransaction_CharDeltaTransaction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UndoTransaction_CharDeltaTransaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UndoTransaction_CharDeltaTransaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UndoTransaction_CharDeltaTransaction_descriptor_;
}

const UndoTransaction_CharDeltaTransaction& UndoTransaction_CharDeltaTransaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

UndoTransaction_CharDeltaTransaction* UndoTransaction_CharDeltaTransaction::default_instance_ = NULL;

UndoTransaction_CharDeltaTransaction* UndoTransaction_CharDeltaTransaction::New() const {
  return new UndoTransaction_CharDeltaTransaction;
}

void UndoTransaction_CharDeltaTransaction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    char_index_ = 0u;
    attribute_index_ = 0u;
    char_delta_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UndoTransaction_CharDeltaTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 char_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_index_)));
          set_has_char_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attribute_index;
        break;
      }

      // required uint32 attribute_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attribute_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_index_)));
          set_has_attribute_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_char_delta;
        break;
      }

      // required sint32 char_delta = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_char_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &char_delta_)));
          set_has_char_delta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UndoTransaction_CharDeltaTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 char_index = 1;
  if (has_char_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->char_index(), output);
  }

  // required uint32 attribute_index = 2;
  if (has_attribute_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attribute_index(), output);
  }

  // required sint32 char_delta = 3;
  if (has_char_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->char_delta(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UndoTransaction_CharDeltaTransaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 char_index = 1;
  if (has_char_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->char_index(), target);
  }

  // required uint32 attribute_index = 2;
  if (has_attribute_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attribute_index(), target);
  }

  // required sint32 char_delta = 3;
  if (has_char_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->char_delta(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UndoTransaction_CharDeltaTransaction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 char_index = 1;
    if (has_char_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_index());
    }

    // required uint32 attribute_index = 2;
    if (has_attribute_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_index());
    }

    // required sint32 char_delta = 3;
    if (has_char_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->char_delta());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UndoTransaction_CharDeltaTransaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UndoTransaction_CharDeltaTransaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UndoTransaction_CharDeltaTransaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UndoTransaction_CharDeltaTransaction::MergeFrom(const UndoTransaction_CharDeltaTransaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_index()) {
      set_char_index(from.char_index());
    }
    if (from.has_attribute_index()) {
      set_attribute_index(from.attribute_index());
    }
    if (from.has_char_delta()) {
      set_char_delta(from.char_delta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UndoTransaction_CharDeltaTransaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndoTransaction_CharDeltaTransaction::CopyFrom(const UndoTransaction_CharDeltaTransaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_CharDeltaTransaction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UndoTransaction_CharDeltaTransaction::Swap(UndoTransaction_CharDeltaTransaction* other) {
  if (other != this) {
    std::swap(char_index_, other->char_index_);
    std::swap(attribute_index_, other->attribute_index_);
    std::swap(char_delta_, other->char_delta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UndoTransaction_CharDeltaTransaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UndoTransaction_CharDeltaTransaction_descriptor_;
  metadata.reflection = UndoTransaction_CharDeltaTransaction_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UndoTransaction_ParagraphDataTransaction::kAttributeIndexFieldNumber;
const int UndoTransaction_ParagraphDataTransaction::kFirstFieldNumber;
const int UndoTransaction_ParagraphDataTransaction::kSecondFieldNumber;
const int UndoTransaction_ParagraphDataTransaction::kCharIndexFieldNumber;
#endif  // !_MSC_VER

UndoTransaction_ParagraphDataTransaction::UndoTransaction_ParagraphDataTransaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UndoTransaction_ParagraphDataTransaction::InitAsDefaultInstance() {
}

UndoTransaction_ParagraphDataTransaction::UndoTransaction_ParagraphDataTransaction(const UndoTransaction_ParagraphDataTransaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UndoTransaction_ParagraphDataTransaction::SharedCtor() {
  _cached_size_ = 0;
  attribute_index_ = 0u;
  first_ = 0u;
  second_ = 0u;
  char_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UndoTransaction_ParagraphDataTransaction::~UndoTransaction_ParagraphDataTransaction() {
  SharedDtor();
}

void UndoTransaction_ParagraphDataTransaction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UndoTransaction_ParagraphDataTransaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UndoTransaction_ParagraphDataTransaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UndoTransaction_ParagraphDataTransaction_descriptor_;
}

const UndoTransaction_ParagraphDataTransaction& UndoTransaction_ParagraphDataTransaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

UndoTransaction_ParagraphDataTransaction* UndoTransaction_ParagraphDataTransaction::default_instance_ = NULL;

UndoTransaction_ParagraphDataTransaction* UndoTransaction_ParagraphDataTransaction::New() const {
  return new UndoTransaction_ParagraphDataTransaction;
}

void UndoTransaction_ParagraphDataTransaction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attribute_index_ = 0u;
    first_ = 0u;
    second_ = 0u;
    char_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UndoTransaction_ParagraphDataTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 attribute_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_index_)));
          set_has_attribute_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_first;
        break;
      }

      // required uint32 first = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_)));
          set_has_first();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_second;
        break;
      }

      // required uint32 second = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &second_)));
          set_has_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_char_index;
        break;
      }

      // required uint32 char_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_char_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &char_index_)));
          set_has_char_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UndoTransaction_ParagraphDataTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 attribute_index = 1;
  if (has_attribute_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attribute_index(), output);
  }

  // required uint32 first = 2;
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->first(), output);
  }

  // required uint32 second = 3;
  if (has_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->second(), output);
  }

  // required uint32 char_index = 4;
  if (has_char_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->char_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UndoTransaction_ParagraphDataTransaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 attribute_index = 1;
  if (has_attribute_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attribute_index(), target);
  }

  // required uint32 first = 2;
  if (has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->first(), target);
  }

  // required uint32 second = 3;
  if (has_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->second(), target);
  }

  // required uint32 char_index = 4;
  if (has_char_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->char_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UndoTransaction_ParagraphDataTransaction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 attribute_index = 1;
    if (has_attribute_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_index());
    }

    // required uint32 first = 2;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first());
    }

    // required uint32 second = 3;
    if (has_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->second());
    }

    // required uint32 char_index = 4;
    if (has_char_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->char_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UndoTransaction_ParagraphDataTransaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UndoTransaction_ParagraphDataTransaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UndoTransaction_ParagraphDataTransaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UndoTransaction_ParagraphDataTransaction::MergeFrom(const UndoTransaction_ParagraphDataTransaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attribute_index()) {
      set_attribute_index(from.attribute_index());
    }
    if (from.has_first()) {
      set_first(from.first());
    }
    if (from.has_second()) {
      set_second(from.second());
    }
    if (from.has_char_index()) {
      set_char_index(from.char_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UndoTransaction_ParagraphDataTransaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndoTransaction_ParagraphDataTransaction::CopyFrom(const UndoTransaction_ParagraphDataTransaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_ParagraphDataTransaction::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void UndoTransaction_ParagraphDataTransaction::Swap(UndoTransaction_ParagraphDataTransaction* other) {
  if (other != this) {
    std::swap(attribute_index_, other->attribute_index_);
    std::swap(first_, other->first_);
    std::swap(second_, other->second_);
    std::swap(char_index_, other->char_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UndoTransaction_ParagraphDataTransaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UndoTransaction_ParagraphDataTransaction_descriptor_;
  metadata.reflection = UndoTransaction_ParagraphDataTransaction_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UndoTransaction_ObjectDOLCTransaction::kFlagsFieldNumber;
const int UndoTransaction_ObjectDOLCTransaction::kObjectFieldNumber;
#endif  // !_MSC_VER

UndoTransaction_ObjectDOLCTransaction::UndoTransaction_ObjectDOLCTransaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UndoTransaction_ObjectDOLCTransaction::InitAsDefaultInstance() {
  object_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

UndoTransaction_ObjectDOLCTransaction::UndoTransaction_ObjectDOLCTransaction(const UndoTransaction_ObjectDOLCTransaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UndoTransaction_ObjectDOLCTransaction::SharedCtor() {
  _cached_size_ = 0;
  flags_ = 0u;
  object_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UndoTransaction_ObjectDOLCTransaction::~UndoTransaction_ObjectDOLCTransaction() {
  SharedDtor();
}

void UndoTransaction_ObjectDOLCTransaction::SharedDtor() {
  if (this != default_instance_) {
    delete object_;
  }
}

void UndoTransaction_ObjectDOLCTransaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UndoTransaction_ObjectDOLCTransaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UndoTransaction_ObjectDOLCTransaction_descriptor_;
}

const UndoTransaction_ObjectDOLCTransaction& UndoTransaction_ObjectDOLCTransaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

UndoTransaction_ObjectDOLCTransaction* UndoTransaction_ObjectDOLCTransaction::default_instance_ = NULL;

UndoTransaction_ObjectDOLCTransaction* UndoTransaction_ObjectDOLCTransaction::New() const {
  return new UndoTransaction_ObjectDOLCTransaction;
}

void UndoTransaction_ObjectDOLCTransaction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flags_ = 0u;
    if (has_object()) {
      if (object_ != NULL) object_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UndoTransaction_ObjectDOLCTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 flags = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_object;
        break;
      }

      // optional .TSP.Reference object = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UndoTransaction_ObjectDOLCTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 flags = 1;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flags(), output);
  }

  // optional .TSP.Reference object = 2;
  if (has_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->object(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UndoTransaction_ObjectDOLCTransaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 flags = 1;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->flags(), target);
  }

  // optional .TSP.Reference object = 2;
  if (has_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->object(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UndoTransaction_ObjectDOLCTransaction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 flags = 1;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional .TSP.Reference object = 2;
    if (has_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UndoTransaction_ObjectDOLCTransaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UndoTransaction_ObjectDOLCTransaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UndoTransaction_ObjectDOLCTransaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UndoTransaction_ObjectDOLCTransaction::MergeFrom(const UndoTransaction_ObjectDOLCTransaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_object()) {
      mutable_object()->::TSP::Reference::MergeFrom(from.object());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UndoTransaction_ObjectDOLCTransaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndoTransaction_ObjectDOLCTransaction::CopyFrom(const UndoTransaction_ObjectDOLCTransaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_ObjectDOLCTransaction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_object()) {
    if (!this->object().IsInitialized()) return false;
  }
  return true;
}

void UndoTransaction_ObjectDOLCTransaction::Swap(UndoTransaction_ObjectDOLCTransaction* other) {
  if (other != this) {
    std::swap(flags_, other->flags_);
    std::swap(object_, other->object_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UndoTransaction_ObjectDOLCTransaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UndoTransaction_ObjectDOLCTransaction_descriptor_;
  metadata.reflection = UndoTransaction_ObjectDOLCTransaction_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UndoTransaction_CTDateTransaction::kAttributeIndexFieldNumber;
const int UndoTransaction_CTDateTransaction::kDateFieldNumber;
#endif  // !_MSC_VER

UndoTransaction_CTDateTransaction::UndoTransaction_CTDateTransaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UndoTransaction_CTDateTransaction::InitAsDefaultInstance() {
  date_ = const_cast< ::TSP::Date*>(&::TSP::Date::default_instance());
}

UndoTransaction_CTDateTransaction::UndoTransaction_CTDateTransaction(const UndoTransaction_CTDateTransaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UndoTransaction_CTDateTransaction::SharedCtor() {
  _cached_size_ = 0;
  attribute_index_ = 0u;
  date_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UndoTransaction_CTDateTransaction::~UndoTransaction_CTDateTransaction() {
  SharedDtor();
}

void UndoTransaction_CTDateTransaction::SharedDtor() {
  if (this != default_instance_) {
    delete date_;
  }
}

void UndoTransaction_CTDateTransaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UndoTransaction_CTDateTransaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UndoTransaction_CTDateTransaction_descriptor_;
}

const UndoTransaction_CTDateTransaction& UndoTransaction_CTDateTransaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

UndoTransaction_CTDateTransaction* UndoTransaction_CTDateTransaction::default_instance_ = NULL;

UndoTransaction_CTDateTransaction* UndoTransaction_CTDateTransaction::New() const {
  return new UndoTransaction_CTDateTransaction;
}

void UndoTransaction_CTDateTransaction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attribute_index_ = 0u;
    if (has_date()) {
      if (date_ != NULL) date_->::TSP::Date::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UndoTransaction_CTDateTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 attribute_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_index_)));
          set_has_attribute_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_date;
        break;
      }

      // optional .TSP.Date date = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_date()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UndoTransaction_CTDateTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 attribute_index = 1;
  if (has_attribute_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attribute_index(), output);
  }

  // optional .TSP.Date date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UndoTransaction_CTDateTransaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 attribute_index = 1;
  if (has_attribute_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attribute_index(), target);
  }

  // optional .TSP.Date date = 2;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UndoTransaction_CTDateTransaction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 attribute_index = 1;
    if (has_attribute_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_index());
    }

    // optional .TSP.Date date = 2;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->date());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UndoTransaction_CTDateTransaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UndoTransaction_CTDateTransaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UndoTransaction_CTDateTransaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UndoTransaction_CTDateTransaction::MergeFrom(const UndoTransaction_CTDateTransaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attribute_index()) {
      set_attribute_index(from.attribute_index());
    }
    if (from.has_date()) {
      mutable_date()->::TSP::Date::MergeFrom(from.date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UndoTransaction_CTDateTransaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndoTransaction_CTDateTransaction::CopyFrom(const UndoTransaction_CTDateTransaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_CTDateTransaction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_date()) {
    if (!this->date().IsInitialized()) return false;
  }
  return true;
}

void UndoTransaction_CTDateTransaction::Swap(UndoTransaction_CTDateTransaction* other) {
  if (other != this) {
    std::swap(attribute_index_, other->attribute_index_);
    std::swap(date_, other->date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UndoTransaction_CTDateTransaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UndoTransaction_CTDateTransaction_descriptor_;
  metadata.reflection = UndoTransaction_CTDateTransaction_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UndoTransaction_UnionTransaction::kKindFieldNumber;
const int UndoTransaction_UnionTransaction::kTableFieldNumber;
const int UndoTransaction_UnionTransaction::kGenericFieldNumber;
const int UndoTransaction_UnionTransaction::kTextFieldNumber;
const int UndoTransaction_UnionTransaction::kCharIndexFieldNumber;
const int UndoTransaction_UnionTransaction::kReplaceCharIndexFieldNumber;
const int UndoTransaction_UnionTransaction::kAttributeIndexFieldNumber;
const int UndoTransaction_UnionTransaction::kInsertNilFieldNumber;
const int UndoTransaction_UnionTransaction::kInsertAttributeFieldNumber;
const int UndoTransaction_UnionTransaction::kCharDeltaFieldNumber;
const int UndoTransaction_UnionTransaction::kParagraphDataFieldNumber;
const int UndoTransaction_UnionTransaction::kObjectDolcFieldNumber;
const int UndoTransaction_UnionTransaction::kCtDateFieldNumber;
#endif  // !_MSC_VER

UndoTransaction_UnionTransaction::UndoTransaction_UnionTransaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UndoTransaction_UnionTransaction::InitAsDefaultInstance() {
  generic_ = const_cast< ::TSWP::UndoTransaction_GenericTransaction*>(&::TSWP::UndoTransaction_GenericTransaction::default_instance());
  text_ = const_cast< ::TSWP::UndoTransaction_TextTransaction*>(&::TSWP::UndoTransaction_TextTransaction::default_instance());
  char_index_ = const_cast< ::TSWP::UndoTransaction_CharIndexTransaction*>(&::TSWP::UndoTransaction_CharIndexTransaction::default_instance());
  replace_char_index_ = const_cast< ::TSWP::UndoTransaction_ReplaceCharIndexTransaction*>(&::TSWP::UndoTransaction_ReplaceCharIndexTransaction::default_instance());
  attribute_index_ = const_cast< ::TSWP::UndoTransaction_AttributeIndexTransaction*>(&::TSWP::UndoTransaction_AttributeIndexTransaction::default_instance());
  insert_nil_ = const_cast< ::TSWP::UndoTransaction_InsertNilTransaction*>(&::TSWP::UndoTransaction_InsertNilTransaction::default_instance());
  insert_attribute_ = const_cast< ::TSWP::UndoTransaction_InsertAttributeTransaction*>(&::TSWP::UndoTransaction_InsertAttributeTransaction::default_instance());
  char_delta_ = const_cast< ::TSWP::UndoTransaction_CharDeltaTransaction*>(&::TSWP::UndoTransaction_CharDeltaTransaction::default_instance());
  paragraph_data_ = const_cast< ::TSWP::UndoTransaction_ParagraphDataTransaction*>(&::TSWP::UndoTransaction_ParagraphDataTransaction::default_instance());
  object_dolc_ = const_cast< ::TSWP::UndoTransaction_ObjectDOLCTransaction*>(&::TSWP::UndoTransaction_ObjectDOLCTransaction::default_instance());
  ct_date_ = const_cast< ::TSWP::UndoTransaction_CTDateTransaction*>(&::TSWP::UndoTransaction_CTDateTransaction::default_instance());
}

UndoTransaction_UnionTransaction::UndoTransaction_UnionTransaction(const UndoTransaction_UnionTransaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UndoTransaction_UnionTransaction::SharedCtor() {
  _cached_size_ = 0;
  kind_ = 1;
  table_ = 0u;
  generic_ = NULL;
  text_ = NULL;
  char_index_ = NULL;
  replace_char_index_ = NULL;
  attribute_index_ = NULL;
  insert_nil_ = NULL;
  insert_attribute_ = NULL;
  char_delta_ = NULL;
  paragraph_data_ = NULL;
  object_dolc_ = NULL;
  ct_date_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UndoTransaction_UnionTransaction::~UndoTransaction_UnionTransaction() {
  SharedDtor();
}

void UndoTransaction_UnionTransaction::SharedDtor() {
  if (this != default_instance_) {
    delete generic_;
    delete text_;
    delete char_index_;
    delete replace_char_index_;
    delete attribute_index_;
    delete insert_nil_;
    delete insert_attribute_;
    delete char_delta_;
    delete paragraph_data_;
    delete object_dolc_;
    delete ct_date_;
  }
}

void UndoTransaction_UnionTransaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UndoTransaction_UnionTransaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UndoTransaction_UnionTransaction_descriptor_;
}

const UndoTransaction_UnionTransaction& UndoTransaction_UnionTransaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

UndoTransaction_UnionTransaction* UndoTransaction_UnionTransaction::default_instance_ = NULL;

UndoTransaction_UnionTransaction* UndoTransaction_UnionTransaction::New() const {
  return new UndoTransaction_UnionTransaction;
}

void UndoTransaction_UnionTransaction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kind_ = 1;
    table_ = 0u;
    if (has_generic()) {
      if (generic_ != NULL) generic_->::TSWP::UndoTransaction_GenericTransaction::Clear();
    }
    if (has_text()) {
      if (text_ != NULL) text_->::TSWP::UndoTransaction_TextTransaction::Clear();
    }
    if (has_char_index()) {
      if (char_index_ != NULL) char_index_->::TSWP::UndoTransaction_CharIndexTransaction::Clear();
    }
    if (has_replace_char_index()) {
      if (replace_char_index_ != NULL) replace_char_index_->::TSWP::UndoTransaction_ReplaceCharIndexTransaction::Clear();
    }
    if (has_attribute_index()) {
      if (attribute_index_ != NULL) attribute_index_->::TSWP::UndoTransaction_AttributeIndexTransaction::Clear();
    }
    if (has_insert_nil()) {
      if (insert_nil_ != NULL) insert_nil_->::TSWP::UndoTransaction_InsertNilTransaction::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_insert_attribute()) {
      if (insert_attribute_ != NULL) insert_attribute_->::TSWP::UndoTransaction_InsertAttributeTransaction::Clear();
    }
    if (has_char_delta()) {
      if (char_delta_ != NULL) char_delta_->::TSWP::UndoTransaction_CharDeltaTransaction::Clear();
    }
    if (has_paragraph_data()) {
      if (paragraph_data_ != NULL) paragraph_data_->::TSWP::UndoTransaction_ParagraphDataTransaction::Clear();
    }
    if (has_object_dolc()) {
      if (object_dolc_ != NULL) object_dolc_->::TSWP::UndoTransaction_ObjectDOLCTransaction::Clear();
    }
    if (has_ct_date()) {
      if (ct_date_ != NULL) ct_date_->::TSWP::UndoTransaction_CTDateTransaction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UndoTransaction_UnionTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSWP.UndoTransaction.UndoKind kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::UndoTransaction_UndoKind_IsValid(value)) {
            set_kind(static_cast< ::TSWP::UndoTransaction_UndoKind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_table;
        break;
      }

      // optional uint32 table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_)));
          set_has_table();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_generic;
        break;
      }

      // optional .TSWP.UndoTransaction.GenericTransaction generic = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_generic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_generic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_text;
        break;
      }

      // optional .TSWP.UndoTransaction.TextTransaction text = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_char_index;
        break;
      }

      // optional .TSWP.UndoTransaction.CharIndexTransaction char_index = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_char_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_char_index()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_replace_char_index;
        break;
      }

      // optional .TSWP.UndoTransaction.ReplaceCharIndexTransaction replace_char_index = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_replace_char_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replace_char_index()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_attribute_index;
        break;
      }

      // optional .TSWP.UndoTransaction.AttributeIndexTransaction attribute_index = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attribute_index()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_insert_nil;
        break;
      }

      // optional .TSWP.UndoTransaction.InsertNilTransaction insert_nil = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_insert_nil:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_insert_nil()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_insert_attribute;
        break;
      }

      // optional .TSWP.UndoTransaction.InsertAttributeTransaction insert_attribute = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_insert_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_insert_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_char_delta;
        break;
      }

      // optional .TSWP.UndoTransaction.CharDeltaTransaction char_delta = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_char_delta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_char_delta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_paragraph_data;
        break;
      }

      // optional .TSWP.UndoTransaction.ParagraphDataTransaction paragraph_data = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paragraph_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_paragraph_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_object_dolc;
        break;
      }

      // optional .TSWP.UndoTransaction.ObjectDOLCTransaction object_dolc = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object_dolc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object_dolc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_ct_date;
        break;
      }

      // optional .TSWP.UndoTransaction.CTDateTransaction ct_date = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ct_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ct_date()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UndoTransaction_UnionTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSWP.UndoTransaction.UndoKind kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->kind(), output);
  }

  // optional uint32 table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->table(), output);
  }

  // optional .TSWP.UndoTransaction.GenericTransaction generic = 5;
  if (has_generic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->generic(), output);
  }

  // optional .TSWP.UndoTransaction.TextTransaction text = 6;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->text(), output);
  }

  // optional .TSWP.UndoTransaction.CharIndexTransaction char_index = 7;
  if (has_char_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->char_index(), output);
  }

  // optional .TSWP.UndoTransaction.ReplaceCharIndexTransaction replace_char_index = 8;
  if (has_replace_char_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->replace_char_index(), output);
  }

  // optional .TSWP.UndoTransaction.AttributeIndexTransaction attribute_index = 9;
  if (has_attribute_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->attribute_index(), output);
  }

  // optional .TSWP.UndoTransaction.InsertNilTransaction insert_nil = 10;
  if (has_insert_nil()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->insert_nil(), output);
  }

  // optional .TSWP.UndoTransaction.InsertAttributeTransaction insert_attribute = 11;
  if (has_insert_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->insert_attribute(), output);
  }

  // optional .TSWP.UndoTransaction.CharDeltaTransaction char_delta = 12;
  if (has_char_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->char_delta(), output);
  }

  // optional .TSWP.UndoTransaction.ParagraphDataTransaction paragraph_data = 13;
  if (has_paragraph_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->paragraph_data(), output);
  }

  // optional .TSWP.UndoTransaction.ObjectDOLCTransaction object_dolc = 14;
  if (has_object_dolc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->object_dolc(), output);
  }

  // optional .TSWP.UndoTransaction.CTDateTransaction ct_date = 15;
  if (has_ct_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->ct_date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UndoTransaction_UnionTransaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSWP.UndoTransaction.UndoKind kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->kind(), target);
  }

  // optional uint32 table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->table(), target);
  }

  // optional .TSWP.UndoTransaction.GenericTransaction generic = 5;
  if (has_generic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->generic(), target);
  }

  // optional .TSWP.UndoTransaction.TextTransaction text = 6;
  if (has_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->text(), target);
  }

  // optional .TSWP.UndoTransaction.CharIndexTransaction char_index = 7;
  if (has_char_index()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->char_index(), target);
  }

  // optional .TSWP.UndoTransaction.ReplaceCharIndexTransaction replace_char_index = 8;
  if (has_replace_char_index()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->replace_char_index(), target);
  }

  // optional .TSWP.UndoTransaction.AttributeIndexTransaction attribute_index = 9;
  if (has_attribute_index()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->attribute_index(), target);
  }

  // optional .TSWP.UndoTransaction.InsertNilTransaction insert_nil = 10;
  if (has_insert_nil()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->insert_nil(), target);
  }

  // optional .TSWP.UndoTransaction.InsertAttributeTransaction insert_attribute = 11;
  if (has_insert_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->insert_attribute(), target);
  }

  // optional .TSWP.UndoTransaction.CharDeltaTransaction char_delta = 12;
  if (has_char_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->char_delta(), target);
  }

  // optional .TSWP.UndoTransaction.ParagraphDataTransaction paragraph_data = 13;
  if (has_paragraph_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->paragraph_data(), target);
  }

  // optional .TSWP.UndoTransaction.ObjectDOLCTransaction object_dolc = 14;
  if (has_object_dolc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->object_dolc(), target);
  }

  // optional .TSWP.UndoTransaction.CTDateTransaction ct_date = 15;
  if (has_ct_date()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->ct_date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UndoTransaction_UnionTransaction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSWP.UndoTransaction.UndoKind kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

    // optional uint32 table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table());
    }

    // optional .TSWP.UndoTransaction.GenericTransaction generic = 5;
    if (has_generic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->generic());
    }

    // optional .TSWP.UndoTransaction.TextTransaction text = 6;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text());
    }

    // optional .TSWP.UndoTransaction.CharIndexTransaction char_index = 7;
    if (has_char_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->char_index());
    }

    // optional .TSWP.UndoTransaction.ReplaceCharIndexTransaction replace_char_index = 8;
    if (has_replace_char_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->replace_char_index());
    }

    // optional .TSWP.UndoTransaction.AttributeIndexTransaction attribute_index = 9;
    if (has_attribute_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attribute_index());
    }

    // optional .TSWP.UndoTransaction.InsertNilTransaction insert_nil = 10;
    if (has_insert_nil()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->insert_nil());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TSWP.UndoTransaction.InsertAttributeTransaction insert_attribute = 11;
    if (has_insert_attribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->insert_attribute());
    }

    // optional .TSWP.UndoTransaction.CharDeltaTransaction char_delta = 12;
    if (has_char_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->char_delta());
    }

    // optional .TSWP.UndoTransaction.ParagraphDataTransaction paragraph_data = 13;
    if (has_paragraph_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->paragraph_data());
    }

    // optional .TSWP.UndoTransaction.ObjectDOLCTransaction object_dolc = 14;
    if (has_object_dolc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object_dolc());
    }

    // optional .TSWP.UndoTransaction.CTDateTransaction ct_date = 15;
    if (has_ct_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ct_date());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UndoTransaction_UnionTransaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UndoTransaction_UnionTransaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UndoTransaction_UnionTransaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UndoTransaction_UnionTransaction::MergeFrom(const UndoTransaction_UnionTransaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_generic()) {
      mutable_generic()->::TSWP::UndoTransaction_GenericTransaction::MergeFrom(from.generic());
    }
    if (from.has_text()) {
      mutable_text()->::TSWP::UndoTransaction_TextTransaction::MergeFrom(from.text());
    }
    if (from.has_char_index()) {
      mutable_char_index()->::TSWP::UndoTransaction_CharIndexTransaction::MergeFrom(from.char_index());
    }
    if (from.has_replace_char_index()) {
      mutable_replace_char_index()->::TSWP::UndoTransaction_ReplaceCharIndexTransaction::MergeFrom(from.replace_char_index());
    }
    if (from.has_attribute_index()) {
      mutable_attribute_index()->::TSWP::UndoTransaction_AttributeIndexTransaction::MergeFrom(from.attribute_index());
    }
    if (from.has_insert_nil()) {
      mutable_insert_nil()->::TSWP::UndoTransaction_InsertNilTransaction::MergeFrom(from.insert_nil());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_insert_attribute()) {
      mutable_insert_attribute()->::TSWP::UndoTransaction_InsertAttributeTransaction::MergeFrom(from.insert_attribute());
    }
    if (from.has_char_delta()) {
      mutable_char_delta()->::TSWP::UndoTransaction_CharDeltaTransaction::MergeFrom(from.char_delta());
    }
    if (from.has_paragraph_data()) {
      mutable_paragraph_data()->::TSWP::UndoTransaction_ParagraphDataTransaction::MergeFrom(from.paragraph_data());
    }
    if (from.has_object_dolc()) {
      mutable_object_dolc()->::TSWP::UndoTransaction_ObjectDOLCTransaction::MergeFrom(from.object_dolc());
    }
    if (from.has_ct_date()) {
      mutable_ct_date()->::TSWP::UndoTransaction_CTDateTransaction::MergeFrom(from.ct_date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UndoTransaction_UnionTransaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndoTransaction_UnionTransaction::CopyFrom(const UndoTransaction_UnionTransaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction_UnionTransaction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_generic()) {
    if (!this->generic().IsInitialized()) return false;
  }
  if (has_text()) {
    if (!this->text().IsInitialized()) return false;
  }
  if (has_char_index()) {
    if (!this->char_index().IsInitialized()) return false;
  }
  if (has_replace_char_index()) {
    if (!this->replace_char_index().IsInitialized()) return false;
  }
  if (has_attribute_index()) {
    if (!this->attribute_index().IsInitialized()) return false;
  }
  if (has_insert_nil()) {
    if (!this->insert_nil().IsInitialized()) return false;
  }
  if (has_insert_attribute()) {
    if (!this->insert_attribute().IsInitialized()) return false;
  }
  if (has_char_delta()) {
    if (!this->char_delta().IsInitialized()) return false;
  }
  if (has_paragraph_data()) {
    if (!this->paragraph_data().IsInitialized()) return false;
  }
  if (has_object_dolc()) {
    if (!this->object_dolc().IsInitialized()) return false;
  }
  if (has_ct_date()) {
    if (!this->ct_date().IsInitialized()) return false;
  }
  return true;
}

void UndoTransaction_UnionTransaction::Swap(UndoTransaction_UnionTransaction* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    std::swap(table_, other->table_);
    std::swap(generic_, other->generic_);
    std::swap(text_, other->text_);
    std::swap(char_index_, other->char_index_);
    std::swap(replace_char_index_, other->replace_char_index_);
    std::swap(attribute_index_, other->attribute_index_);
    std::swap(insert_nil_, other->insert_nil_);
    std::swap(insert_attribute_, other->insert_attribute_);
    std::swap(char_delta_, other->char_delta_);
    std::swap(paragraph_data_, other->paragraph_data_);
    std::swap(object_dolc_, other->object_dolc_);
    std::swap(ct_date_, other->ct_date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UndoTransaction_UnionTransaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UndoTransaction_UnionTransaction_descriptor_;
  metadata.reflection = UndoTransaction_UnionTransaction_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UndoTransaction::kEntriesFieldNumber;
#endif  // !_MSC_VER

UndoTransaction::UndoTransaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UndoTransaction::InitAsDefaultInstance() {
}

UndoTransaction::UndoTransaction(const UndoTransaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UndoTransaction::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UndoTransaction::~UndoTransaction() {
  SharedDtor();
}

void UndoTransaction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UndoTransaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UndoTransaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UndoTransaction_descriptor_;
}

const UndoTransaction& UndoTransaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

UndoTransaction* UndoTransaction::default_instance_ = NULL;

UndoTransaction* UndoTransaction::New() const {
  return new UndoTransaction;
}

void UndoTransaction::Clear() {
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UndoTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSWP.UndoTransaction.UnionTransaction entries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UndoTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSWP.UndoTransaction.UnionTransaction entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UndoTransaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSWP.UndoTransaction.UnionTransaction entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UndoTransaction::ByteSize() const {
  int total_size = 0;

  // repeated .TSWP.UndoTransaction.UnionTransaction entries = 1;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UndoTransaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UndoTransaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UndoTransaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UndoTransaction::MergeFrom(const UndoTransaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UndoTransaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndoTransaction::CopyFrom(const UndoTransaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransaction::IsInitialized() const {

  for (int i = 0; i < entries_size(); i++) {
    if (!this->entries(i).IsInitialized()) return false;
  }
  return true;
}

void UndoTransaction::Swap(UndoTransaction* other) {
  if (other != this) {
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UndoTransaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UndoTransaction_descriptor_;
  metadata.reflection = UndoTransaction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UndoTransactionWrapperArchive::kUndoTransactionFieldNumber;
#endif  // !_MSC_VER

UndoTransactionWrapperArchive::UndoTransactionWrapperArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UndoTransactionWrapperArchive::InitAsDefaultInstance() {
  undo_transaction_ = const_cast< ::TSWP::UndoTransaction*>(&::TSWP::UndoTransaction::default_instance());
}

UndoTransactionWrapperArchive::UndoTransactionWrapperArchive(const UndoTransactionWrapperArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UndoTransactionWrapperArchive::SharedCtor() {
  _cached_size_ = 0;
  undo_transaction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UndoTransactionWrapperArchive::~UndoTransactionWrapperArchive() {
  SharedDtor();
}

void UndoTransactionWrapperArchive::SharedDtor() {
  if (this != default_instance_) {
    delete undo_transaction_;
  }
}

void UndoTransactionWrapperArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UndoTransactionWrapperArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UndoTransactionWrapperArchive_descriptor_;
}

const UndoTransactionWrapperArchive& UndoTransactionWrapperArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

UndoTransactionWrapperArchive* UndoTransactionWrapperArchive::default_instance_ = NULL;

UndoTransactionWrapperArchive* UndoTransactionWrapperArchive::New() const {
  return new UndoTransactionWrapperArchive;
}

void UndoTransactionWrapperArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_undo_transaction()) {
      if (undo_transaction_ != NULL) undo_transaction_->::TSWP::UndoTransaction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UndoTransactionWrapperArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSWP.UndoTransaction undo_transaction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_transaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UndoTransactionWrapperArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSWP.UndoTransaction undo_transaction = 1;
  if (has_undo_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->undo_transaction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UndoTransactionWrapperArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSWP.UndoTransaction undo_transaction = 1;
  if (has_undo_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->undo_transaction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UndoTransactionWrapperArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSWP.UndoTransaction undo_transaction = 1;
    if (has_undo_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_transaction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UndoTransactionWrapperArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UndoTransactionWrapperArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UndoTransactionWrapperArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UndoTransactionWrapperArchive::MergeFrom(const UndoTransactionWrapperArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_undo_transaction()) {
      mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from.undo_transaction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UndoTransactionWrapperArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndoTransactionWrapperArchive::CopyFrom(const UndoTransactionWrapperArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoTransactionWrapperArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_undo_transaction()) {
    if (!this->undo_transaction().IsInitialized()) return false;
  }
  return true;
}

void UndoTransactionWrapperArchive::Swap(UndoTransactionWrapperArchive* other) {
  if (other != this) {
    std::swap(undo_transaction_, other->undo_transaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UndoTransactionWrapperArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UndoTransactionWrapperArchive_descriptor_;
  metadata.reflection = UndoTransactionWrapperArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShapeInfoArchive::kSuperFieldNumber;
const int ShapeInfoArchive::kContainedStorageFieldNumber;
#endif  // !_MSC_VER

ShapeInfoArchive::ShapeInfoArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShapeInfoArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSD::ShapeArchive*>(&::TSD::ShapeArchive::default_instance());
  containedstorage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ShapeInfoArchive::ShapeInfoArchive(const ShapeInfoArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShapeInfoArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  containedstorage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShapeInfoArchive::~ShapeInfoArchive() {
  SharedDtor();
}

void ShapeInfoArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete containedstorage_;
  }
}

void ShapeInfoArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShapeInfoArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShapeInfoArchive_descriptor_;
}

const ShapeInfoArchive& ShapeInfoArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

ShapeInfoArchive* ShapeInfoArchive::default_instance_ = NULL;

ShapeInfoArchive* ShapeInfoArchive::New() const {
  return new ShapeInfoArchive;
}

void ShapeInfoArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSD::ShapeArchive::Clear();
    }
    if (has_containedstorage()) {
      if (containedstorage_ != NULL) containedstorage_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShapeInfoArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSD.ShapeArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_containedStorage;
        break;
      }

      // optional .TSP.Reference containedStorage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_containedStorage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_containedstorage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShapeInfoArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSD.ShapeArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference containedStorage = 2;
  if (has_containedstorage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->containedstorage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShapeInfoArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSD.ShapeArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference containedStorage = 2;
  if (has_containedstorage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->containedstorage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShapeInfoArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSD.ShapeArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference containedStorage = 2;
    if (has_containedstorage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->containedstorage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShapeInfoArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShapeInfoArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShapeInfoArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShapeInfoArchive::MergeFrom(const ShapeInfoArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSD::ShapeArchive::MergeFrom(from.super());
    }
    if (from.has_containedstorage()) {
      mutable_containedstorage()->::TSP::Reference::MergeFrom(from.containedstorage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShapeInfoArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeInfoArchive::CopyFrom(const ShapeInfoArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeInfoArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_containedstorage()) {
    if (!this->containedstorage().IsInitialized()) return false;
  }
  return true;
}

void ShapeInfoArchive::Swap(ShapeInfoArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(containedstorage_, other->containedstorage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShapeInfoArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShapeInfoArchive_descriptor_;
  metadata.reflection = ShapeInfoArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommentInfoArchive::kSuperFieldNumber;
const int CommentInfoArchive::kCommentStorageFieldNumber;
#endif  // !_MSC_VER

CommentInfoArchive::CommentInfoArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommentInfoArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::ShapeInfoArchive*>(&::TSWP::ShapeInfoArchive::default_instance());
  comment_storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommentInfoArchive::CommentInfoArchive(const CommentInfoArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommentInfoArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  comment_storage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommentInfoArchive::~CommentInfoArchive() {
  SharedDtor();
}

void CommentInfoArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete comment_storage_;
  }
}

void CommentInfoArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommentInfoArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommentInfoArchive_descriptor_;
}

const CommentInfoArchive& CommentInfoArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

CommentInfoArchive* CommentInfoArchive::default_instance_ = NULL;

CommentInfoArchive* CommentInfoArchive::New() const {
  return new CommentInfoArchive;
}

void CommentInfoArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::ShapeInfoArchive::Clear();
    }
    if (has_comment_storage()) {
      if (comment_storage_ != NULL) comment_storage_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommentInfoArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSWP.ShapeInfoArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_comment_storage;
        break;
      }

      // optional .TSP.Reference comment_storage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comment_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommentInfoArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSWP.ShapeInfoArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference comment_storage = 2;
  if (has_comment_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->comment_storage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommentInfoArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSWP.ShapeInfoArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference comment_storage = 2;
  if (has_comment_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->comment_storage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommentInfoArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSWP.ShapeInfoArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference comment_storage = 2;
    if (has_comment_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->comment_storage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommentInfoArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommentInfoArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommentInfoArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommentInfoArchive::MergeFrom(const CommentInfoArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::ShapeInfoArchive::MergeFrom(from.super());
    }
    if (from.has_comment_storage()) {
      mutable_comment_storage()->::TSP::Reference::MergeFrom(from.comment_storage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommentInfoArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommentInfoArchive::CopyFrom(const CommentInfoArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommentInfoArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_comment_storage()) {
    if (!this->comment_storage().IsInitialized()) return false;
  }
  return true;
}

void CommentInfoArchive::Swap(CommentInfoArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(comment_storage_, other->comment_storage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommentInfoArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommentInfoArchive_descriptor_;
  metadata.reflection = CommentInfoArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TOCInfoArchive::kSuperFieldNumber;
const int TOCInfoArchive::kTocSettingsFieldNumber;
const int TOCInfoArchive::kTocEntryDataFieldNumber;
const int TOCInfoArchive::kPageNumberRangesFieldNumber;
#endif  // !_MSC_VER

TOCInfoArchive::TOCInfoArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TOCInfoArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::ShapeInfoArchive*>(&::TSWP::ShapeInfoArchive::default_instance());
  toc_settings_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

TOCInfoArchive::TOCInfoArchive(const TOCInfoArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TOCInfoArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  toc_settings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TOCInfoArchive::~TOCInfoArchive() {
  SharedDtor();
}

void TOCInfoArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete toc_settings_;
  }
}

void TOCInfoArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TOCInfoArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TOCInfoArchive_descriptor_;
}

const TOCInfoArchive& TOCInfoArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

TOCInfoArchive* TOCInfoArchive::default_instance_ = NULL;

TOCInfoArchive* TOCInfoArchive::New() const {
  return new TOCInfoArchive;
}

void TOCInfoArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::ShapeInfoArchive::Clear();
    }
    if (has_toc_settings()) {
      if (toc_settings_ != NULL) toc_settings_->::TSP::Reference::Clear();
    }
  }
  toc_entry_data_.Clear();
  page_number_ranges_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TOCInfoArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSWP.ShapeInfoArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_toc_settings;
        break;
      }

      // optional .TSP.Reference toc_settings = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toc_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toc_settings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_toc_entry_data;
        break;
      }

      // repeated .TSP.Reference toc_entry_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toc_entry_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_toc_entry_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_toc_entry_data;
        if (input->ExpectTag(34)) goto parse_page_number_ranges;
        break;
      }

      // repeated .TSP.Range page_number_ranges = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_number_ranges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_page_number_ranges()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_page_number_ranges;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TOCInfoArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSWP.ShapeInfoArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference toc_settings = 2;
  if (has_toc_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->toc_settings(), output);
  }

  // repeated .TSP.Reference toc_entry_data = 3;
  for (int i = 0; i < this->toc_entry_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->toc_entry_data(i), output);
  }

  // repeated .TSP.Range page_number_ranges = 4;
  for (int i = 0; i < this->page_number_ranges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->page_number_ranges(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TOCInfoArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSWP.ShapeInfoArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference toc_settings = 2;
  if (has_toc_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->toc_settings(), target);
  }

  // repeated .TSP.Reference toc_entry_data = 3;
  for (int i = 0; i < this->toc_entry_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->toc_entry_data(i), target);
  }

  // repeated .TSP.Range page_number_ranges = 4;
  for (int i = 0; i < this->page_number_ranges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->page_number_ranges(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TOCInfoArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSWP.ShapeInfoArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference toc_settings = 2;
    if (has_toc_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toc_settings());
    }

  }
  // repeated .TSP.Reference toc_entry_data = 3;
  total_size += 1 * this->toc_entry_data_size();
  for (int i = 0; i < this->toc_entry_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->toc_entry_data(i));
  }

  // repeated .TSP.Range page_number_ranges = 4;
  total_size += 1 * this->page_number_ranges_size();
  for (int i = 0; i < this->page_number_ranges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->page_number_ranges(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TOCInfoArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TOCInfoArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TOCInfoArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TOCInfoArchive::MergeFrom(const TOCInfoArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  toc_entry_data_.MergeFrom(from.toc_entry_data_);
  page_number_ranges_.MergeFrom(from.page_number_ranges_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::ShapeInfoArchive::MergeFrom(from.super());
    }
    if (from.has_toc_settings()) {
      mutable_toc_settings()->::TSP::Reference::MergeFrom(from.toc_settings());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TOCInfoArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TOCInfoArchive::CopyFrom(const TOCInfoArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOCInfoArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_toc_settings()) {
    if (!this->toc_settings().IsInitialized()) return false;
  }
  for (int i = 0; i < toc_entry_data_size(); i++) {
    if (!this->toc_entry_data(i).IsInitialized()) return false;
  }
  for (int i = 0; i < page_number_ranges_size(); i++) {
    if (!this->page_number_ranges(i).IsInitialized()) return false;
  }
  return true;
}

void TOCInfoArchive::Swap(TOCInfoArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(toc_settings_, other->toc_settings_);
    toc_entry_data_.Swap(&other->toc_entry_data_);
    page_number_ranges_.Swap(&other->page_number_ranges_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TOCInfoArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TOCInfoArchive_descriptor_;
  metadata.reflection = TOCInfoArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TOCLayoutHintArchive::kCharRangeFieldNumber;
#endif  // !_MSC_VER

TOCLayoutHintArchive::TOCLayoutHintArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TOCLayoutHintArchive::InitAsDefaultInstance() {
  charrange_ = const_cast< ::TSP::Range*>(&::TSP::Range::default_instance());
}

TOCLayoutHintArchive::TOCLayoutHintArchive(const TOCLayoutHintArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TOCLayoutHintArchive::SharedCtor() {
  _cached_size_ = 0;
  charrange_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TOCLayoutHintArchive::~TOCLayoutHintArchive() {
  SharedDtor();
}

void TOCLayoutHintArchive::SharedDtor() {
  if (this != default_instance_) {
    delete charrange_;
  }
}

void TOCLayoutHintArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TOCLayoutHintArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TOCLayoutHintArchive_descriptor_;
}

const TOCLayoutHintArchive& TOCLayoutHintArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

TOCLayoutHintArchive* TOCLayoutHintArchive::default_instance_ = NULL;

TOCLayoutHintArchive* TOCLayoutHintArchive::New() const {
  return new TOCLayoutHintArchive;
}

void TOCLayoutHintArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_charrange()) {
      if (charrange_ != NULL) charrange_->::TSP::Range::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TOCLayoutHintArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Range charRange = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_charrange()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TOCLayoutHintArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Range charRange = 1;
  if (has_charrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->charrange(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TOCLayoutHintArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Range charRange = 1;
  if (has_charrange()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->charrange(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TOCLayoutHintArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.Range charRange = 1;
    if (has_charrange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->charrange());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TOCLayoutHintArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TOCLayoutHintArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TOCLayoutHintArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TOCLayoutHintArchive::MergeFrom(const TOCLayoutHintArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charrange()) {
      mutable_charrange()->::TSP::Range::MergeFrom(from.charrange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TOCLayoutHintArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TOCLayoutHintArchive::CopyFrom(const TOCLayoutHintArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOCLayoutHintArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_charrange()) {
    if (!this->charrange().IsInitialized()) return false;
  }
  return true;
}

void TOCLayoutHintArchive::Swap(TOCLayoutHintArchive* other) {
  if (other != this) {
    std::swap(charrange_, other->charrange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TOCLayoutHintArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TOCLayoutHintArchive_descriptor_;
  metadata.reflection = TOCLayoutHintArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TextualAttachmentArchive_Kind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TextualAttachmentArchive_Kind_descriptor_;
}
bool TextualAttachmentArchive_Kind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TextualAttachmentArchive_Kind TextualAttachmentArchive::kKindPageNumber;
const TextualAttachmentArchive_Kind TextualAttachmentArchive::kKindPageCount;
const TextualAttachmentArchive_Kind TextualAttachmentArchive::kKindFootnoteMark;
const TextualAttachmentArchive_Kind TextualAttachmentArchive::Kind_MIN;
const TextualAttachmentArchive_Kind TextualAttachmentArchive::Kind_MAX;
const int TextualAttachmentArchive::Kind_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TextualAttachmentArchive::kStringEquivalentFieldNumber;
const int TextualAttachmentArchive::kKindFieldNumber;
#endif  // !_MSC_VER

TextualAttachmentArchive::TextualAttachmentArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TextualAttachmentArchive::InitAsDefaultInstance() {
}

TextualAttachmentArchive::TextualAttachmentArchive(const TextualAttachmentArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TextualAttachmentArchive::SharedCtor() {
  _cached_size_ = 0;
  string_equivalent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TextualAttachmentArchive::~TextualAttachmentArchive() {
  SharedDtor();
}

void TextualAttachmentArchive::SharedDtor() {
  if (string_equivalent_ != &::google::protobuf::internal::kEmptyString) {
    delete string_equivalent_;
  }
  if (this != default_instance_) {
  }
}

void TextualAttachmentArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextualAttachmentArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TextualAttachmentArchive_descriptor_;
}

const TextualAttachmentArchive& TextualAttachmentArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

TextualAttachmentArchive* TextualAttachmentArchive::default_instance_ = NULL;

TextualAttachmentArchive* TextualAttachmentArchive::New() const {
  return new TextualAttachmentArchive;
}

void TextualAttachmentArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_string_equivalent()) {
      if (string_equivalent_ != &::google::protobuf::internal::kEmptyString) {
        string_equivalent_->clear();
      }
    }
    kind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TextualAttachmentArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string string_equivalent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_equivalent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_equivalent().data(), this->string_equivalent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kind;
        break;
      }

      // optional .TSWP.TextualAttachmentArchive.Kind kind = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::TextualAttachmentArchive_Kind_IsValid(value)) {
            set_kind(static_cast< ::TSWP::TextualAttachmentArchive_Kind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TextualAttachmentArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string string_equivalent = 1;
  if (has_string_equivalent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_equivalent().data(), this->string_equivalent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->string_equivalent(), output);
  }

  // optional .TSWP.TextualAttachmentArchive.Kind kind = 2;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->kind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TextualAttachmentArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string string_equivalent = 1;
  if (has_string_equivalent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_equivalent().data(), this->string_equivalent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->string_equivalent(), target);
  }

  // optional .TSWP.TextualAttachmentArchive.Kind kind = 2;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->kind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TextualAttachmentArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string string_equivalent = 1;
    if (has_string_equivalent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_equivalent());
    }

    // optional .TSWP.TextualAttachmentArchive.Kind kind = 2;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextualAttachmentArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TextualAttachmentArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TextualAttachmentArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TextualAttachmentArchive::MergeFrom(const TextualAttachmentArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_string_equivalent()) {
      set_string_equivalent(from.string_equivalent());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TextualAttachmentArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextualAttachmentArchive::CopyFrom(const TextualAttachmentArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextualAttachmentArchive::IsInitialized() const {

  return true;
}

void TextualAttachmentArchive::Swap(TextualAttachmentArchive* other) {
  if (other != this) {
    std::swap(string_equivalent_, other->string_equivalent_);
    std::swap(kind_, other->kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TextualAttachmentArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TextualAttachmentArchive_descriptor_;
  metadata.reflection = TextualAttachmentArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSWPTOCPageNumberAttachmentArchive::kSuperFieldNumber;
const int TSWPTOCPageNumberAttachmentArchive::kPageNumberFieldNumber;
const int TSWPTOCPageNumberAttachmentArchive::kBookmarkNameFieldNumber;
#endif  // !_MSC_VER

TSWPTOCPageNumberAttachmentArchive::TSWPTOCPageNumberAttachmentArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TSWPTOCPageNumberAttachmentArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::TextualAttachmentArchive*>(&::TSWP::TextualAttachmentArchive::default_instance());
}

TSWPTOCPageNumberAttachmentArchive::TSWPTOCPageNumberAttachmentArchive(const TSWPTOCPageNumberAttachmentArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TSWPTOCPageNumberAttachmentArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  page_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bookmark_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSWPTOCPageNumberAttachmentArchive::~TSWPTOCPageNumberAttachmentArchive() {
  SharedDtor();
}

void TSWPTOCPageNumberAttachmentArchive::SharedDtor() {
  if (page_number_ != &::google::protobuf::internal::kEmptyString) {
    delete page_number_;
  }
  if (bookmark_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bookmark_name_;
  }
  if (this != default_instance_) {
    delete super_;
  }
}

void TSWPTOCPageNumberAttachmentArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSWPTOCPageNumberAttachmentArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSWPTOCPageNumberAttachmentArchive_descriptor_;
}

const TSWPTOCPageNumberAttachmentArchive& TSWPTOCPageNumberAttachmentArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

TSWPTOCPageNumberAttachmentArchive* TSWPTOCPageNumberAttachmentArchive::default_instance_ = NULL;

TSWPTOCPageNumberAttachmentArchive* TSWPTOCPageNumberAttachmentArchive::New() const {
  return new TSWPTOCPageNumberAttachmentArchive;
}

void TSWPTOCPageNumberAttachmentArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::TextualAttachmentArchive::Clear();
    }
    if (has_page_number()) {
      if (page_number_ != &::google::protobuf::internal::kEmptyString) {
        page_number_->clear();
      }
    }
    if (has_bookmark_name()) {
      if (bookmark_name_ != &::google::protobuf::internal::kEmptyString) {
        bookmark_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSWPTOCPageNumberAttachmentArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSWP.TextualAttachmentArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_page_number;
        break;
      }

      // optional string page_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->page_number().data(), this->page_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bookmark_name;
        break;
      }

      // optional string bookmark_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bookmark_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bookmark_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bookmark_name().data(), this->bookmark_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TSWPTOCPageNumberAttachmentArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSWP.TextualAttachmentArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional string page_number = 2;
  if (has_page_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_number().data(), this->page_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->page_number(), output);
  }

  // optional string bookmark_name = 3;
  if (has_bookmark_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bookmark_name().data(), this->bookmark_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bookmark_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TSWPTOCPageNumberAttachmentArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSWP.TextualAttachmentArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional string page_number = 2;
  if (has_page_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_number().data(), this->page_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->page_number(), target);
  }

  // optional string bookmark_name = 3;
  if (has_bookmark_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bookmark_name().data(), this->bookmark_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bookmark_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TSWPTOCPageNumberAttachmentArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSWP.TextualAttachmentArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional string page_number = 2;
    if (has_page_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->page_number());
    }

    // optional string bookmark_name = 3;
    if (has_bookmark_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bookmark_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSWPTOCPageNumberAttachmentArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSWPTOCPageNumberAttachmentArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSWPTOCPageNumberAttachmentArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSWPTOCPageNumberAttachmentArchive::MergeFrom(const TSWPTOCPageNumberAttachmentArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::TextualAttachmentArchive::MergeFrom(from.super());
    }
    if (from.has_page_number()) {
      set_page_number(from.page_number());
    }
    if (from.has_bookmark_name()) {
      set_bookmark_name(from.bookmark_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSWPTOCPageNumberAttachmentArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSWPTOCPageNumberAttachmentArchive::CopyFrom(const TSWPTOCPageNumberAttachmentArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSWPTOCPageNumberAttachmentArchive::IsInitialized() const {

  return true;
}

void TSWPTOCPageNumberAttachmentArchive::Swap(TSWPTOCPageNumberAttachmentArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(page_number_, other->page_number_);
    std::swap(bookmark_name_, other->bookmark_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSWPTOCPageNumberAttachmentArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSWPTOCPageNumberAttachmentArchive_descriptor_;
  metadata.reflection = TSWPTOCPageNumberAttachmentArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UIGraphicalAttachment::UIGraphicalAttachment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UIGraphicalAttachment::InitAsDefaultInstance() {
}

UIGraphicalAttachment::UIGraphicalAttachment(const UIGraphicalAttachment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UIGraphicalAttachment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UIGraphicalAttachment::~UIGraphicalAttachment() {
  SharedDtor();
}

void UIGraphicalAttachment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UIGraphicalAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UIGraphicalAttachment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UIGraphicalAttachment_descriptor_;
}

const UIGraphicalAttachment& UIGraphicalAttachment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

UIGraphicalAttachment* UIGraphicalAttachment::default_instance_ = NULL;

UIGraphicalAttachment* UIGraphicalAttachment::New() const {
  return new UIGraphicalAttachment;
}

void UIGraphicalAttachment::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UIGraphicalAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void UIGraphicalAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UIGraphicalAttachment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UIGraphicalAttachment::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UIGraphicalAttachment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UIGraphicalAttachment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UIGraphicalAttachment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UIGraphicalAttachment::MergeFrom(const UIGraphicalAttachment& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UIGraphicalAttachment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIGraphicalAttachment::CopyFrom(const UIGraphicalAttachment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIGraphicalAttachment::IsInitialized() const {

  return true;
}

void UIGraphicalAttachment::Swap(UIGraphicalAttachment* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UIGraphicalAttachment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UIGraphicalAttachment_descriptor_;
  metadata.reflection = UIGraphicalAttachment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DrawableAttachmentArchive::kDrawableFieldNumber;
const int DrawableAttachmentArchive::kHOffsetTypeFieldNumber;
const int DrawableAttachmentArchive::kHOffsetFieldNumber;
const int DrawableAttachmentArchive::kVOffsetTypeFieldNumber;
const int DrawableAttachmentArchive::kVOffsetFieldNumber;
#endif  // !_MSC_VER

DrawableAttachmentArchive::DrawableAttachmentArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DrawableAttachmentArchive::InitAsDefaultInstance() {
  drawable_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

DrawableAttachmentArchive::DrawableAttachmentArchive(const DrawableAttachmentArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DrawableAttachmentArchive::SharedCtor() {
  _cached_size_ = 0;
  drawable_ = NULL;
  h_offset_type_ = 0u;
  h_offset_ = 0;
  v_offset_type_ = 0u;
  v_offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DrawableAttachmentArchive::~DrawableAttachmentArchive() {
  SharedDtor();
}

void DrawableAttachmentArchive::SharedDtor() {
  if (this != default_instance_) {
    delete drawable_;
  }
}

void DrawableAttachmentArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DrawableAttachmentArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrawableAttachmentArchive_descriptor_;
}

const DrawableAttachmentArchive& DrawableAttachmentArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

DrawableAttachmentArchive* DrawableAttachmentArchive::default_instance_ = NULL;

DrawableAttachmentArchive* DrawableAttachmentArchive::New() const {
  return new DrawableAttachmentArchive;
}

void DrawableAttachmentArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_drawable()) {
      if (drawable_ != NULL) drawable_->::TSP::Reference::Clear();
    }
    h_offset_type_ = 0u;
    h_offset_ = 0;
    v_offset_type_ = 0u;
    v_offset_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DrawableAttachmentArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference drawable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drawable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_h_offset_type;
        break;
      }

      // optional uint32 h_offset_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_h_offset_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &h_offset_type_)));
          set_has_h_offset_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_h_offset;
        break;
      }

      // optional float h_offset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_h_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_offset_)));
          set_has_h_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_v_offset_type;
        break;
      }

      // optional uint32 v_offset_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_v_offset_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &v_offset_type_)));
          set_has_v_offset_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_v_offset;
        break;
      }

      // optional float v_offset = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_v_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_offset_)));
          set_has_v_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DrawableAttachmentArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference drawable = 1;
  if (has_drawable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->drawable(), output);
  }

  // optional uint32 h_offset_type = 2;
  if (has_h_offset_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->h_offset_type(), output);
  }

  // optional float h_offset = 3;
  if (has_h_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->h_offset(), output);
  }

  // optional uint32 v_offset_type = 4;
  if (has_v_offset_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->v_offset_type(), output);
  }

  // optional float v_offset = 5;
  if (has_v_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->v_offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DrawableAttachmentArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference drawable = 1;
  if (has_drawable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->drawable(), target);
  }

  // optional uint32 h_offset_type = 2;
  if (has_h_offset_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->h_offset_type(), target);
  }

  // optional float h_offset = 3;
  if (has_h_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->h_offset(), target);
  }

  // optional uint32 v_offset_type = 4;
  if (has_v_offset_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->v_offset_type(), target);
  }

  // optional float v_offset = 5;
  if (has_v_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->v_offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DrawableAttachmentArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference drawable = 1;
    if (has_drawable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drawable());
    }

    // optional uint32 h_offset_type = 2;
    if (has_h_offset_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->h_offset_type());
    }

    // optional float h_offset = 3;
    if (has_h_offset()) {
      total_size += 1 + 4;
    }

    // optional uint32 v_offset_type = 4;
    if (has_v_offset_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->v_offset_type());
    }

    // optional float v_offset = 5;
    if (has_v_offset()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrawableAttachmentArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DrawableAttachmentArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DrawableAttachmentArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DrawableAttachmentArchive::MergeFrom(const DrawableAttachmentArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_drawable()) {
      mutable_drawable()->::TSP::Reference::MergeFrom(from.drawable());
    }
    if (from.has_h_offset_type()) {
      set_h_offset_type(from.h_offset_type());
    }
    if (from.has_h_offset()) {
      set_h_offset(from.h_offset());
    }
    if (from.has_v_offset_type()) {
      set_v_offset_type(from.v_offset_type());
    }
    if (from.has_v_offset()) {
      set_v_offset(from.v_offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DrawableAttachmentArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawableAttachmentArchive::CopyFrom(const DrawableAttachmentArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableAttachmentArchive::IsInitialized() const {

  if (has_drawable()) {
    if (!this->drawable().IsInitialized()) return false;
  }
  return true;
}

void DrawableAttachmentArchive::Swap(DrawableAttachmentArchive* other) {
  if (other != this) {
    std::swap(drawable_, other->drawable_);
    std::swap(h_offset_type_, other->h_offset_type_);
    std::swap(h_offset_, other->h_offset_);
    std::swap(v_offset_type_, other->v_offset_type_);
    std::swap(v_offset_, other->v_offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DrawableAttachmentArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DrawableAttachmentArchive_descriptor_;
  metadata.reflection = DrawableAttachmentArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TOCAttachmentArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

TOCAttachmentArchive::TOCAttachmentArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TOCAttachmentArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::DrawableAttachmentArchive*>(&::TSWP::DrawableAttachmentArchive::default_instance());
}

TOCAttachmentArchive::TOCAttachmentArchive(const TOCAttachmentArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TOCAttachmentArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TOCAttachmentArchive::~TOCAttachmentArchive() {
  SharedDtor();
}

void TOCAttachmentArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void TOCAttachmentArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TOCAttachmentArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TOCAttachmentArchive_descriptor_;
}

const TOCAttachmentArchive& TOCAttachmentArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

TOCAttachmentArchive* TOCAttachmentArchive::default_instance_ = NULL;

TOCAttachmentArchive* TOCAttachmentArchive::New() const {
  return new TOCAttachmentArchive;
}

void TOCAttachmentArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::DrawableAttachmentArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TOCAttachmentArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSWP.DrawableAttachmentArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TOCAttachmentArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSWP.DrawableAttachmentArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TOCAttachmentArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSWP.DrawableAttachmentArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TOCAttachmentArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSWP.DrawableAttachmentArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TOCAttachmentArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TOCAttachmentArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TOCAttachmentArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TOCAttachmentArchive::MergeFrom(const TOCAttachmentArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::DrawableAttachmentArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TOCAttachmentArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TOCAttachmentArchive::CopyFrom(const TOCAttachmentArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOCAttachmentArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void TOCAttachmentArchive::Swap(TOCAttachmentArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TOCAttachmentArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TOCAttachmentArchive_descriptor_;
  metadata.reflection = TOCAttachmentArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FootnoteReferenceAttachmentArchive::kSuperFieldNumber;
const int FootnoteReferenceAttachmentArchive::kContainedStorageFieldNumber;
const int FootnoteReferenceAttachmentArchive::kCustomMarkStringFieldNumber;
#endif  // !_MSC_VER

FootnoteReferenceAttachmentArchive::FootnoteReferenceAttachmentArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FootnoteReferenceAttachmentArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::TextualAttachmentArchive*>(&::TSWP::TextualAttachmentArchive::default_instance());
  contained_storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

FootnoteReferenceAttachmentArchive::FootnoteReferenceAttachmentArchive(const FootnoteReferenceAttachmentArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FootnoteReferenceAttachmentArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  contained_storage_ = NULL;
  custom_mark_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FootnoteReferenceAttachmentArchive::~FootnoteReferenceAttachmentArchive() {
  SharedDtor();
}

void FootnoteReferenceAttachmentArchive::SharedDtor() {
  if (custom_mark_string_ != &::google::protobuf::internal::kEmptyString) {
    delete custom_mark_string_;
  }
  if (this != default_instance_) {
    delete super_;
    delete contained_storage_;
  }
}

void FootnoteReferenceAttachmentArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FootnoteReferenceAttachmentArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FootnoteReferenceAttachmentArchive_descriptor_;
}

const FootnoteReferenceAttachmentArchive& FootnoteReferenceAttachmentArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

FootnoteReferenceAttachmentArchive* FootnoteReferenceAttachmentArchive::default_instance_ = NULL;

FootnoteReferenceAttachmentArchive* FootnoteReferenceAttachmentArchive::New() const {
  return new FootnoteReferenceAttachmentArchive;
}

void FootnoteReferenceAttachmentArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::TextualAttachmentArchive::Clear();
    }
    if (has_contained_storage()) {
      if (contained_storage_ != NULL) contained_storage_->::TSP::Reference::Clear();
    }
    if (has_custom_mark_string()) {
      if (custom_mark_string_ != &::google::protobuf::internal::kEmptyString) {
        custom_mark_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FootnoteReferenceAttachmentArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSWP.TextualAttachmentArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contained_storage;
        break;
      }

      // optional .TSP.Reference contained_storage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contained_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contained_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_custom_mark_string;
        break;
      }

      // optional string custom_mark_string = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custom_mark_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_mark_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->custom_mark_string().data(), this->custom_mark_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FootnoteReferenceAttachmentArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSWP.TextualAttachmentArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference contained_storage = 2;
  if (has_contained_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->contained_storage(), output);
  }

  // optional string custom_mark_string = 3;
  if (has_custom_mark_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custom_mark_string().data(), this->custom_mark_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->custom_mark_string(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FootnoteReferenceAttachmentArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSWP.TextualAttachmentArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference contained_storage = 2;
  if (has_contained_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->contained_storage(), target);
  }

  // optional string custom_mark_string = 3;
  if (has_custom_mark_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custom_mark_string().data(), this->custom_mark_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->custom_mark_string(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FootnoteReferenceAttachmentArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSWP.TextualAttachmentArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference contained_storage = 2;
    if (has_contained_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contained_storage());
    }

    // optional string custom_mark_string = 3;
    if (has_custom_mark_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_mark_string());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FootnoteReferenceAttachmentArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FootnoteReferenceAttachmentArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FootnoteReferenceAttachmentArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FootnoteReferenceAttachmentArchive::MergeFrom(const FootnoteReferenceAttachmentArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::TextualAttachmentArchive::MergeFrom(from.super());
    }
    if (from.has_contained_storage()) {
      mutable_contained_storage()->::TSP::Reference::MergeFrom(from.contained_storage());
    }
    if (from.has_custom_mark_string()) {
      set_custom_mark_string(from.custom_mark_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FootnoteReferenceAttachmentArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FootnoteReferenceAttachmentArchive::CopyFrom(const FootnoteReferenceAttachmentArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FootnoteReferenceAttachmentArchive::IsInitialized() const {

  if (has_contained_storage()) {
    if (!this->contained_storage().IsInitialized()) return false;
  }
  return true;
}

void FootnoteReferenceAttachmentArchive::Swap(FootnoteReferenceAttachmentArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(contained_storage_, other->contained_storage_);
    std::swap(custom_mark_string_, other->custom_mark_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FootnoteReferenceAttachmentArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FootnoteReferenceAttachmentArchive_descriptor_;
  metadata.reflection = FootnoteReferenceAttachmentArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NumberAttachmentArchive::kSuperFieldNumber;
const int NumberAttachmentArchive::kNumberFormatFieldNumber;
const int NumberAttachmentArchive::kStringValueFieldNumber;
#endif  // !_MSC_VER

NumberAttachmentArchive::NumberAttachmentArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NumberAttachmentArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::TextualAttachmentArchive*>(&::TSWP::TextualAttachmentArchive::default_instance());
}

NumberAttachmentArchive::NumberAttachmentArchive(const NumberAttachmentArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NumberAttachmentArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  number_format_ = 0u;
  string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NumberAttachmentArchive::~NumberAttachmentArchive() {
  SharedDtor();
}

void NumberAttachmentArchive::SharedDtor() {
  if (string_value_ != &::google::protobuf::internal::kEmptyString) {
    delete string_value_;
  }
  if (this != default_instance_) {
    delete super_;
  }
}

void NumberAttachmentArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NumberAttachmentArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NumberAttachmentArchive_descriptor_;
}

const NumberAttachmentArchive& NumberAttachmentArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

NumberAttachmentArchive* NumberAttachmentArchive::default_instance_ = NULL;

NumberAttachmentArchive* NumberAttachmentArchive::New() const {
  return new NumberAttachmentArchive;
}

void NumberAttachmentArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::TextualAttachmentArchive::Clear();
    }
    number_format_ = 0u;
    if (has_string_value()) {
      if (string_value_ != &::google::protobuf::internal::kEmptyString) {
        string_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NumberAttachmentArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSWP.TextualAttachmentArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_number_format;
        break;
      }

      // optional uint32 number_format = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number_format:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_format_)));
          set_has_number_format();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_string_value;
        break;
      }

      // optional string string_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_value().data(), this->string_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NumberAttachmentArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSWP.TextualAttachmentArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional uint32 number_format = 2;
  if (has_number_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->number_format(), output);
  }

  // optional string string_value = 3;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->string_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NumberAttachmentArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSWP.TextualAttachmentArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional uint32 number_format = 2;
  if (has_number_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->number_format(), target);
  }

  // optional string string_value = 3;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->string_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NumberAttachmentArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSWP.TextualAttachmentArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional uint32 number_format = 2;
    if (has_number_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_format());
    }

    // optional string string_value = 3;
    if (has_string_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NumberAttachmentArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NumberAttachmentArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NumberAttachmentArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NumberAttachmentArchive::MergeFrom(const NumberAttachmentArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::TextualAttachmentArchive::MergeFrom(from.super());
    }
    if (from.has_number_format()) {
      set_number_format(from.number_format());
    }
    if (from.has_string_value()) {
      set_string_value(from.string_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NumberAttachmentArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NumberAttachmentArchive::CopyFrom(const NumberAttachmentArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumberAttachmentArchive::IsInitialized() const {

  return true;
}

void NumberAttachmentArchive::Swap(NumberAttachmentArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(number_format_, other->number_format_);
    std::swap(string_value_, other->string_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NumberAttachmentArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NumberAttachmentArchive_descriptor_;
  metadata.reflection = NumberAttachmentArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SmartFieldArchive::SmartFieldArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SmartFieldArchive::InitAsDefaultInstance() {
}

SmartFieldArchive::SmartFieldArchive(const SmartFieldArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SmartFieldArchive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmartFieldArchive::~SmartFieldArchive() {
  SharedDtor();
}

void SmartFieldArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SmartFieldArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmartFieldArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmartFieldArchive_descriptor_;
}

const SmartFieldArchive& SmartFieldArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

SmartFieldArchive* SmartFieldArchive::default_instance_ = NULL;

SmartFieldArchive* SmartFieldArchive::New() const {
  return new SmartFieldArchive;
}

void SmartFieldArchive::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SmartFieldArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SmartFieldArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SmartFieldArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SmartFieldArchive::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmartFieldArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SmartFieldArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SmartFieldArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SmartFieldArchive::MergeFrom(const SmartFieldArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SmartFieldArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmartFieldArchive::CopyFrom(const SmartFieldArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmartFieldArchive::IsInitialized() const {

  return true;
}

void SmartFieldArchive::Swap(SmartFieldArchive* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SmartFieldArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmartFieldArchive_descriptor_;
  metadata.reflection = SmartFieldArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HyperlinkFieldArchive::kSuperFieldNumber;
const int HyperlinkFieldArchive::kUrlRefFieldNumber;
#endif  // !_MSC_VER

HyperlinkFieldArchive::HyperlinkFieldArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HyperlinkFieldArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::SmartFieldArchive*>(&::TSWP::SmartFieldArchive::default_instance());
}

HyperlinkFieldArchive::HyperlinkFieldArchive(const HyperlinkFieldArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HyperlinkFieldArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  url_ref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HyperlinkFieldArchive::~HyperlinkFieldArchive() {
  SharedDtor();
}

void HyperlinkFieldArchive::SharedDtor() {
  if (url_ref_ != &::google::protobuf::internal::kEmptyString) {
    delete url_ref_;
  }
  if (this != default_instance_) {
    delete super_;
  }
}

void HyperlinkFieldArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HyperlinkFieldArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HyperlinkFieldArchive_descriptor_;
}

const HyperlinkFieldArchive& HyperlinkFieldArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

HyperlinkFieldArchive* HyperlinkFieldArchive::default_instance_ = NULL;

HyperlinkFieldArchive* HyperlinkFieldArchive::New() const {
  return new HyperlinkFieldArchive;
}

void HyperlinkFieldArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::SmartFieldArchive::Clear();
    }
    if (has_url_ref()) {
      if (url_ref_ != &::google::protobuf::internal::kEmptyString) {
        url_ref_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HyperlinkFieldArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSWP.SmartFieldArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url_ref;
        break;
      }

      // optional string url_ref = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url_ref:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url_ref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url_ref().data(), this->url_ref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HyperlinkFieldArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSWP.SmartFieldArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional string url_ref = 2;
  if (has_url_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url_ref().data(), this->url_ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url_ref(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HyperlinkFieldArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSWP.SmartFieldArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional string url_ref = 2;
  if (has_url_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url_ref().data(), this->url_ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url_ref(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HyperlinkFieldArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSWP.SmartFieldArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional string url_ref = 2;
    if (has_url_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url_ref());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HyperlinkFieldArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HyperlinkFieldArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HyperlinkFieldArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HyperlinkFieldArchive::MergeFrom(const HyperlinkFieldArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::SmartFieldArchive::MergeFrom(from.super());
    }
    if (from.has_url_ref()) {
      set_url_ref(from.url_ref());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HyperlinkFieldArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HyperlinkFieldArchive::CopyFrom(const HyperlinkFieldArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HyperlinkFieldArchive::IsInitialized() const {

  return true;
}

void HyperlinkFieldArchive::Swap(HyperlinkFieldArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(url_ref_, other->url_ref_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HyperlinkFieldArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HyperlinkFieldArchive_descriptor_;
  metadata.reflection = HyperlinkFieldArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlaceholderSmartFieldArchive::kSuperFieldNumber;
const int PlaceholderSmartFieldArchive::kLocalizableFieldNumber;
#endif  // !_MSC_VER

PlaceholderSmartFieldArchive::PlaceholderSmartFieldArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlaceholderSmartFieldArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::SmartFieldArchive*>(&::TSWP::SmartFieldArchive::default_instance());
}

PlaceholderSmartFieldArchive::PlaceholderSmartFieldArchive(const PlaceholderSmartFieldArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlaceholderSmartFieldArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  localizable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlaceholderSmartFieldArchive::~PlaceholderSmartFieldArchive() {
  SharedDtor();
}

void PlaceholderSmartFieldArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void PlaceholderSmartFieldArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaceholderSmartFieldArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaceholderSmartFieldArchive_descriptor_;
}

const PlaceholderSmartFieldArchive& PlaceholderSmartFieldArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

PlaceholderSmartFieldArchive* PlaceholderSmartFieldArchive::default_instance_ = NULL;

PlaceholderSmartFieldArchive* PlaceholderSmartFieldArchive::New() const {
  return new PlaceholderSmartFieldArchive;
}

void PlaceholderSmartFieldArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::SmartFieldArchive::Clear();
    }
    localizable_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlaceholderSmartFieldArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSWP.SmartFieldArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_localizable;
        break;
      }

      // optional bool localizable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_localizable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &localizable_)));
          set_has_localizable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlaceholderSmartFieldArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSWP.SmartFieldArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional bool localizable = 2;
  if (has_localizable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->localizable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlaceholderSmartFieldArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSWP.SmartFieldArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional bool localizable = 2;
  if (has_localizable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->localizable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlaceholderSmartFieldArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSWP.SmartFieldArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional bool localizable = 2;
    if (has_localizable()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaceholderSmartFieldArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlaceholderSmartFieldArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlaceholderSmartFieldArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlaceholderSmartFieldArchive::MergeFrom(const PlaceholderSmartFieldArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::SmartFieldArchive::MergeFrom(from.super());
    }
    if (from.has_localizable()) {
      set_localizable(from.localizable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlaceholderSmartFieldArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceholderSmartFieldArchive::CopyFrom(const PlaceholderSmartFieldArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceholderSmartFieldArchive::IsInitialized() const {

  return true;
}

void PlaceholderSmartFieldArchive::Swap(PlaceholderSmartFieldArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(localizable_, other->localizable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlaceholderSmartFieldArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlaceholderSmartFieldArchive_descriptor_;
  metadata.reflection = PlaceholderSmartFieldArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnsupportedHyperlinkFieldArchive::kSuperFieldNumber;
const int UnsupportedHyperlinkFieldArchive::kUrlRefFieldNumber;
#endif  // !_MSC_VER

UnsupportedHyperlinkFieldArchive::UnsupportedHyperlinkFieldArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnsupportedHyperlinkFieldArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::PlaceholderSmartFieldArchive*>(&::TSWP::PlaceholderSmartFieldArchive::default_instance());
}

UnsupportedHyperlinkFieldArchive::UnsupportedHyperlinkFieldArchive(const UnsupportedHyperlinkFieldArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnsupportedHyperlinkFieldArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  url_ref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnsupportedHyperlinkFieldArchive::~UnsupportedHyperlinkFieldArchive() {
  SharedDtor();
}

void UnsupportedHyperlinkFieldArchive::SharedDtor() {
  if (url_ref_ != &::google::protobuf::internal::kEmptyString) {
    delete url_ref_;
  }
  if (this != default_instance_) {
    delete super_;
  }
}

void UnsupportedHyperlinkFieldArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnsupportedHyperlinkFieldArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnsupportedHyperlinkFieldArchive_descriptor_;
}

const UnsupportedHyperlinkFieldArchive& UnsupportedHyperlinkFieldArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

UnsupportedHyperlinkFieldArchive* UnsupportedHyperlinkFieldArchive::default_instance_ = NULL;

UnsupportedHyperlinkFieldArchive* UnsupportedHyperlinkFieldArchive::New() const {
  return new UnsupportedHyperlinkFieldArchive;
}

void UnsupportedHyperlinkFieldArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::PlaceholderSmartFieldArchive::Clear();
    }
    if (has_url_ref()) {
      if (url_ref_ != &::google::protobuf::internal::kEmptyString) {
        url_ref_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnsupportedHyperlinkFieldArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url_ref;
        break;
      }

      // optional string url_ref = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url_ref:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url_ref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url_ref().data(), this->url_ref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnsupportedHyperlinkFieldArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional string url_ref = 2;
  if (has_url_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url_ref().data(), this->url_ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url_ref(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnsupportedHyperlinkFieldArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional string url_ref = 2;
  if (has_url_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url_ref().data(), this->url_ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url_ref(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnsupportedHyperlinkFieldArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional string url_ref = 2;
    if (has_url_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url_ref());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnsupportedHyperlinkFieldArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnsupportedHyperlinkFieldArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnsupportedHyperlinkFieldArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnsupportedHyperlinkFieldArchive::MergeFrom(const UnsupportedHyperlinkFieldArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::PlaceholderSmartFieldArchive::MergeFrom(from.super());
    }
    if (from.has_url_ref()) {
      set_url_ref(from.url_ref());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnsupportedHyperlinkFieldArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsupportedHyperlinkFieldArchive::CopyFrom(const UnsupportedHyperlinkFieldArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsupportedHyperlinkFieldArchive::IsInitialized() const {

  return true;
}

void UnsupportedHyperlinkFieldArchive::Swap(UnsupportedHyperlinkFieldArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(url_ref_, other->url_ref_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnsupportedHyperlinkFieldArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnsupportedHyperlinkFieldArchive_descriptor_;
  metadata.reflection = UnsupportedHyperlinkFieldArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BibliographySmartFieldArchive::kSuperFieldNumber;
const int BibliographySmartFieldArchive::kCitationRecordsFieldNumber;
const int BibliographySmartFieldArchive::kLocalizableFieldNumber;
const int BibliographySmartFieldArchive::kOldSuperFieldNumber;
#endif  // !_MSC_VER

BibliographySmartFieldArchive::BibliographySmartFieldArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BibliographySmartFieldArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::SmartFieldArchive*>(&::TSWP::SmartFieldArchive::default_instance());
  old_super_ = const_cast< ::TSWP::PlaceholderSmartFieldArchive*>(&::TSWP::PlaceholderSmartFieldArchive::default_instance());
}

BibliographySmartFieldArchive::BibliographySmartFieldArchive(const BibliographySmartFieldArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BibliographySmartFieldArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  localizable_ = false;
  old_super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BibliographySmartFieldArchive::~BibliographySmartFieldArchive() {
  SharedDtor();
}

void BibliographySmartFieldArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete old_super_;
  }
}

void BibliographySmartFieldArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BibliographySmartFieldArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BibliographySmartFieldArchive_descriptor_;
}

const BibliographySmartFieldArchive& BibliographySmartFieldArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

BibliographySmartFieldArchive* BibliographySmartFieldArchive::default_instance_ = NULL;

BibliographySmartFieldArchive* BibliographySmartFieldArchive::New() const {
  return new BibliographySmartFieldArchive;
}

void BibliographySmartFieldArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::SmartFieldArchive::Clear();
    }
    localizable_ = false;
    if (has_old_super()) {
      if (old_super_ != NULL) old_super_->::TSWP::PlaceholderSmartFieldArchive::Clear();
    }
  }
  citation_records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BibliographySmartFieldArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSWP.PlaceholderSmartFieldArchive old_super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_citation_records;
        break;
      }

      // repeated .TSP.Reference citation_records = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_citation_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_citation_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_citation_records;
        if (input->ExpectTag(26)) goto parse_super;
        break;
      }

      // optional .TSWP.SmartFieldArchive super = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_localizable;
        break;
      }

      // optional bool localizable = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_localizable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &localizable_)));
          set_has_localizable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BibliographySmartFieldArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSWP.PlaceholderSmartFieldArchive old_super = 1;
  if (has_old_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->old_super(), output);
  }

  // repeated .TSP.Reference citation_records = 2;
  for (int i = 0; i < this->citation_records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->citation_records(i), output);
  }

  // optional .TSWP.SmartFieldArchive super = 3;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->super(), output);
  }

  // optional bool localizable = 4;
  if (has_localizable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->localizable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BibliographySmartFieldArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSWP.PlaceholderSmartFieldArchive old_super = 1;
  if (has_old_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->old_super(), target);
  }

  // repeated .TSP.Reference citation_records = 2;
  for (int i = 0; i < this->citation_records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->citation_records(i), target);
  }

  // optional .TSWP.SmartFieldArchive super = 3;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->super(), target);
  }

  // optional bool localizable = 4;
  if (has_localizable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->localizable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BibliographySmartFieldArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSWP.SmartFieldArchive super = 3;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional bool localizable = 4;
    if (has_localizable()) {
      total_size += 1 + 1;
    }

    // optional .TSWP.PlaceholderSmartFieldArchive old_super = 1;
    if (has_old_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_super());
    }

  }
  // repeated .TSP.Reference citation_records = 2;
  total_size += 1 * this->citation_records_size();
  for (int i = 0; i < this->citation_records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->citation_records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BibliographySmartFieldArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BibliographySmartFieldArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BibliographySmartFieldArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BibliographySmartFieldArchive::MergeFrom(const BibliographySmartFieldArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  citation_records_.MergeFrom(from.citation_records_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::SmartFieldArchive::MergeFrom(from.super());
    }
    if (from.has_localizable()) {
      set_localizable(from.localizable());
    }
    if (from.has_old_super()) {
      mutable_old_super()->::TSWP::PlaceholderSmartFieldArchive::MergeFrom(from.old_super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BibliographySmartFieldArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BibliographySmartFieldArchive::CopyFrom(const BibliographySmartFieldArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BibliographySmartFieldArchive::IsInitialized() const {

  for (int i = 0; i < citation_records_size(); i++) {
    if (!this->citation_records(i).IsInitialized()) return false;
  }
  return true;
}

void BibliographySmartFieldArchive::Swap(BibliographySmartFieldArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    citation_records_.Swap(&other->citation_records_);
    std::swap(localizable_, other->localizable_);
    std::swap(old_super_, other->old_super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BibliographySmartFieldArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BibliographySmartFieldArchive_descriptor_;
  metadata.reflection = BibliographySmartFieldArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CitationRecordArchive::kEndnoteXmlFieldNumber;
const int CitationRecordArchive::kHideAuthorNamesFieldNumber;
const int CitationRecordArchive::kHideYearFieldNumber;
const int CitationRecordArchive::kPageRangeFieldNumber;
const int CitationRecordArchive::kPrefixFieldNumber;
const int CitationRecordArchive::kSuffixFieldNumber;
const int CitationRecordArchive::kAuthorsStringFieldNumber;
const int CitationRecordArchive::kTitleFieldNumber;
const int CitationRecordArchive::kYearFieldNumber;
const int CitationRecordArchive::kTypeFieldNumber;
#endif  // !_MSC_VER

CitationRecordArchive::CitationRecordArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CitationRecordArchive::InitAsDefaultInstance() {
}

CitationRecordArchive::CitationRecordArchive(const CitationRecordArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CitationRecordArchive::SharedCtor() {
  _cached_size_ = 0;
  endnote_xml_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hide_author_names_ = false;
  hide_year_ = false;
  page_range_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  suffix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  authors_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  year_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CitationRecordArchive::~CitationRecordArchive() {
  SharedDtor();
}

void CitationRecordArchive::SharedDtor() {
  if (endnote_xml_ != &::google::protobuf::internal::kEmptyString) {
    delete endnote_xml_;
  }
  if (page_range_ != &::google::protobuf::internal::kEmptyString) {
    delete page_range_;
  }
  if (prefix_ != &::google::protobuf::internal::kEmptyString) {
    delete prefix_;
  }
  if (suffix_ != &::google::protobuf::internal::kEmptyString) {
    delete suffix_;
  }
  if (authors_string_ != &::google::protobuf::internal::kEmptyString) {
    delete authors_string_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (year_ != &::google::protobuf::internal::kEmptyString) {
    delete year_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void CitationRecordArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CitationRecordArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CitationRecordArchive_descriptor_;
}

const CitationRecordArchive& CitationRecordArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

CitationRecordArchive* CitationRecordArchive::default_instance_ = NULL;

CitationRecordArchive* CitationRecordArchive::New() const {
  return new CitationRecordArchive;
}

void CitationRecordArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_endnote_xml()) {
      if (endnote_xml_ != &::google::protobuf::internal::kEmptyString) {
        endnote_xml_->clear();
      }
    }
    hide_author_names_ = false;
    hide_year_ = false;
    if (has_page_range()) {
      if (page_range_ != &::google::protobuf::internal::kEmptyString) {
        page_range_->clear();
      }
    }
    if (has_prefix()) {
      if (prefix_ != &::google::protobuf::internal::kEmptyString) {
        prefix_->clear();
      }
    }
    if (has_suffix()) {
      if (suffix_ != &::google::protobuf::internal::kEmptyString) {
        suffix_->clear();
      }
    }
    if (has_authors_string()) {
      if (authors_string_ != &::google::protobuf::internal::kEmptyString) {
        authors_string_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_year()) {
      if (year_ != &::google::protobuf::internal::kEmptyString) {
        year_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CitationRecordArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string endnote_xml = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endnote_xml()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->endnote_xml().data(), this->endnote_xml().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hide_author_names;
        break;
      }

      // optional bool hide_author_names = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hide_author_names:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hide_author_names_)));
          set_has_hide_author_names();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hide_year;
        break;
      }

      // optional bool hide_year = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hide_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hide_year_)));
          set_has_hide_year();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_page_range;
        break;
      }

      // optional string page_range = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_range()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->page_range().data(), this->page_range().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_prefix;
        break;
      }

      // optional string prefix = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prefix().data(), this->prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_suffix;
        break;
      }

      // optional string suffix = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suffix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suffix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->suffix().data(), this->suffix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_authors_string;
        break;
      }

      // optional string authors_string = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authors_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authors_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->authors_string().data(), this->authors_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_title;
        break;
      }

      // optional string title = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_year;
        break;
      }

      // optional string year = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_year:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_year()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->year().data(), this->year().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_type;
        break;
      }

      // optional string type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CitationRecordArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string endnote_xml = 1;
  if (has_endnote_xml()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endnote_xml().data(), this->endnote_xml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->endnote_xml(), output);
  }

  // optional bool hide_author_names = 2;
  if (has_hide_author_names()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hide_author_names(), output);
  }

  // optional bool hide_year = 3;
  if (has_hide_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->hide_year(), output);
  }

  // optional string page_range = 4;
  if (has_page_range()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_range().data(), this->page_range().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->page_range(), output);
  }

  // optional string prefix = 5;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->prefix(), output);
  }

  // optional string suffix = 6;
  if (has_suffix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suffix().data(), this->suffix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->suffix(), output);
  }

  // optional string authors_string = 7;
  if (has_authors_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authors_string().data(), this->authors_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->authors_string(), output);
  }

  // optional string title = 8;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->title(), output);
  }

  // optional string year = 9;
  if (has_year()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->year().data(), this->year().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->year(), output);
  }

  // optional string type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CitationRecordArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string endnote_xml = 1;
  if (has_endnote_xml()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endnote_xml().data(), this->endnote_xml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->endnote_xml(), target);
  }

  // optional bool hide_author_names = 2;
  if (has_hide_author_names()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hide_author_names(), target);
  }

  // optional bool hide_year = 3;
  if (has_hide_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->hide_year(), target);
  }

  // optional string page_range = 4;
  if (has_page_range()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_range().data(), this->page_range().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->page_range(), target);
  }

  // optional string prefix = 5;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->prefix(), target);
  }

  // optional string suffix = 6;
  if (has_suffix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suffix().data(), this->suffix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->suffix(), target);
  }

  // optional string authors_string = 7;
  if (has_authors_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authors_string().data(), this->authors_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->authors_string(), target);
  }

  // optional string title = 8;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->title(), target);
  }

  // optional string year = 9;
  if (has_year()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->year().data(), this->year().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->year(), target);
  }

  // optional string type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CitationRecordArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string endnote_xml = 1;
    if (has_endnote_xml()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endnote_xml());
    }

    // optional bool hide_author_names = 2;
    if (has_hide_author_names()) {
      total_size += 1 + 1;
    }

    // optional bool hide_year = 3;
    if (has_hide_year()) {
      total_size += 1 + 1;
    }

    // optional string page_range = 4;
    if (has_page_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->page_range());
    }

    // optional string prefix = 5;
    if (has_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prefix());
    }

    // optional string suffix = 6;
    if (has_suffix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suffix());
    }

    // optional string authors_string = 7;
    if (has_authors_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authors_string());
    }

    // optional string title = 8;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string year = 9;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->year());
    }

    // optional string type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CitationRecordArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CitationRecordArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CitationRecordArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CitationRecordArchive::MergeFrom(const CitationRecordArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_endnote_xml()) {
      set_endnote_xml(from.endnote_xml());
    }
    if (from.has_hide_author_names()) {
      set_hide_author_names(from.hide_author_names());
    }
    if (from.has_hide_year()) {
      set_hide_year(from.hide_year());
    }
    if (from.has_page_range()) {
      set_page_range(from.page_range());
    }
    if (from.has_prefix()) {
      set_prefix(from.prefix());
    }
    if (from.has_suffix()) {
      set_suffix(from.suffix());
    }
    if (from.has_authors_string()) {
      set_authors_string(from.authors_string());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CitationRecordArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CitationRecordArchive::CopyFrom(const CitationRecordArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CitationRecordArchive::IsInitialized() const {

  return true;
}

void CitationRecordArchive::Swap(CitationRecordArchive* other) {
  if (other != this) {
    std::swap(endnote_xml_, other->endnote_xml_);
    std::swap(hide_author_names_, other->hide_author_names_);
    std::swap(hide_year_, other->hide_year_);
    std::swap(page_range_, other->page_range_);
    std::swap(prefix_, other->prefix_);
    std::swap(suffix_, other->suffix_);
    std::swap(authors_string_, other->authors_string_);
    std::swap(title_, other->title_);
    std::swap(year_, other->year_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CitationRecordArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CitationRecordArchive_descriptor_;
  metadata.reflection = CitationRecordArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CitationSmartFieldArchive::kSuperFieldNumber;
const int CitationSmartFieldArchive::kCitationRecordsFieldNumber;
const int CitationSmartFieldArchive::kLocalizableFieldNumber;
const int CitationSmartFieldArchive::kOldSuperFieldNumber;
#endif  // !_MSC_VER

CitationSmartFieldArchive::CitationSmartFieldArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CitationSmartFieldArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::SmartFieldArchive*>(&::TSWP::SmartFieldArchive::default_instance());
  old_super_ = const_cast< ::TSWP::PlaceholderSmartFieldArchive*>(&::TSWP::PlaceholderSmartFieldArchive::default_instance());
}

CitationSmartFieldArchive::CitationSmartFieldArchive(const CitationSmartFieldArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CitationSmartFieldArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  localizable_ = false;
  old_super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CitationSmartFieldArchive::~CitationSmartFieldArchive() {
  SharedDtor();
}

void CitationSmartFieldArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete old_super_;
  }
}

void CitationSmartFieldArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CitationSmartFieldArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CitationSmartFieldArchive_descriptor_;
}

const CitationSmartFieldArchive& CitationSmartFieldArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

CitationSmartFieldArchive* CitationSmartFieldArchive::default_instance_ = NULL;

CitationSmartFieldArchive* CitationSmartFieldArchive::New() const {
  return new CitationSmartFieldArchive;
}

void CitationSmartFieldArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::SmartFieldArchive::Clear();
    }
    localizable_ = false;
    if (has_old_super()) {
      if (old_super_ != NULL) old_super_->::TSWP::PlaceholderSmartFieldArchive::Clear();
    }
  }
  citation_records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CitationSmartFieldArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSWP.PlaceholderSmartFieldArchive old_super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_citation_records;
        break;
      }

      // repeated .TSP.Reference citation_records = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_citation_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_citation_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_citation_records;
        if (input->ExpectTag(26)) goto parse_super;
        break;
      }

      // optional .TSWP.SmartFieldArchive super = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_localizable;
        break;
      }

      // optional bool localizable = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_localizable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &localizable_)));
          set_has_localizable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CitationSmartFieldArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSWP.PlaceholderSmartFieldArchive old_super = 1;
  if (has_old_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->old_super(), output);
  }

  // repeated .TSP.Reference citation_records = 2;
  for (int i = 0; i < this->citation_records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->citation_records(i), output);
  }

  // optional .TSWP.SmartFieldArchive super = 3;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->super(), output);
  }

  // optional bool localizable = 4;
  if (has_localizable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->localizable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CitationSmartFieldArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSWP.PlaceholderSmartFieldArchive old_super = 1;
  if (has_old_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->old_super(), target);
  }

  // repeated .TSP.Reference citation_records = 2;
  for (int i = 0; i < this->citation_records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->citation_records(i), target);
  }

  // optional .TSWP.SmartFieldArchive super = 3;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->super(), target);
  }

  // optional bool localizable = 4;
  if (has_localizable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->localizable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CitationSmartFieldArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSWP.SmartFieldArchive super = 3;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional bool localizable = 4;
    if (has_localizable()) {
      total_size += 1 + 1;
    }

    // optional .TSWP.PlaceholderSmartFieldArchive old_super = 1;
    if (has_old_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_super());
    }

  }
  // repeated .TSP.Reference citation_records = 2;
  total_size += 1 * this->citation_records_size();
  for (int i = 0; i < this->citation_records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->citation_records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CitationSmartFieldArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CitationSmartFieldArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CitationSmartFieldArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CitationSmartFieldArchive::MergeFrom(const CitationSmartFieldArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  citation_records_.MergeFrom(from.citation_records_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::SmartFieldArchive::MergeFrom(from.super());
    }
    if (from.has_localizable()) {
      set_localizable(from.localizable());
    }
    if (from.has_old_super()) {
      mutable_old_super()->::TSWP::PlaceholderSmartFieldArchive::MergeFrom(from.old_super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CitationSmartFieldArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CitationSmartFieldArchive::CopyFrom(const CitationSmartFieldArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CitationSmartFieldArchive::IsInitialized() const {

  for (int i = 0; i < citation_records_size(); i++) {
    if (!this->citation_records(i).IsInitialized()) return false;
  }
  return true;
}

void CitationSmartFieldArchive::Swap(CitationSmartFieldArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    citation_records_.Swap(&other->citation_records_);
    std::swap(localizable_, other->localizable_);
    std::swap(old_super_, other->old_super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CitationSmartFieldArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CitationSmartFieldArchive_descriptor_;
  metadata.reflection = CitationSmartFieldArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DateTimeSmartFieldArchive_DateTimeUpdatePlan_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DateTimeSmartFieldArchive_DateTimeUpdatePlan_descriptor_;
}
bool DateTimeSmartFieldArchive_DateTimeUpdatePlan_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DateTimeSmartFieldArchive_DateTimeUpdatePlan DateTimeSmartFieldArchive::kDateTimeUpdatePlanNever;
const DateTimeSmartFieldArchive_DateTimeUpdatePlan DateTimeSmartFieldArchive::kDateTimeUpdatePlanAuto;
const DateTimeSmartFieldArchive_DateTimeUpdatePlan DateTimeSmartFieldArchive::kDateTimeUpdatePlanOnce;
const DateTimeSmartFieldArchive_DateTimeUpdatePlan DateTimeSmartFieldArchive::DateTimeUpdatePlan_MIN;
const DateTimeSmartFieldArchive_DateTimeUpdatePlan DateTimeSmartFieldArchive::DateTimeUpdatePlan_MAX;
const int DateTimeSmartFieldArchive::DateTimeUpdatePlan_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* DateTimeSmartFieldArchive_DateTimeFormatterStyle_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DateTimeSmartFieldArchive_DateTimeFormatterStyle_descriptor_;
}
bool DateTimeSmartFieldArchive_DateTimeFormatterStyle_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DateTimeSmartFieldArchive_DateTimeFormatterStyle DateTimeSmartFieldArchive::kDateTimeFormatterStyleNone;
const DateTimeSmartFieldArchive_DateTimeFormatterStyle DateTimeSmartFieldArchive::kDateTimeFormatterStyleShort;
const DateTimeSmartFieldArchive_DateTimeFormatterStyle DateTimeSmartFieldArchive::kDateTimeFormatterStyleMedium;
const DateTimeSmartFieldArchive_DateTimeFormatterStyle DateTimeSmartFieldArchive::kDateTimeFormatterStyleLong;
const DateTimeSmartFieldArchive_DateTimeFormatterStyle DateTimeSmartFieldArchive::kDateTimeFormatterStyleFull;
const DateTimeSmartFieldArchive_DateTimeFormatterStyle DateTimeSmartFieldArchive::DateTimeFormatterStyle_MIN;
const DateTimeSmartFieldArchive_DateTimeFormatterStyle DateTimeSmartFieldArchive::DateTimeFormatterStyle_MAX;
const int DateTimeSmartFieldArchive::DateTimeFormatterStyle_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DateTimeSmartFieldArchive::kSuperFieldNumber;
const int DateTimeSmartFieldArchive::kFormatFieldNumber;
const int DateTimeSmartFieldArchive::kLocaleIdentifierFieldNumber;
const int DateTimeSmartFieldArchive::kDateStyleFieldNumber;
const int DateTimeSmartFieldArchive::kTimeStyleFieldNumber;
const int DateTimeSmartFieldArchive::kUpdatePlanFieldNumber;
const int DateTimeSmartFieldArchive::kNeedsUpdateFieldNumber;
const int DateTimeSmartFieldArchive::kDateFieldNumber;
#endif  // !_MSC_VER

DateTimeSmartFieldArchive::DateTimeSmartFieldArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DateTimeSmartFieldArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::SmartFieldArchive*>(&::TSWP::SmartFieldArchive::default_instance());
  date_ = const_cast< ::TSP::Date*>(&::TSP::Date::default_instance());
}

DateTimeSmartFieldArchive::DateTimeSmartFieldArchive(const DateTimeSmartFieldArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DateTimeSmartFieldArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  locale_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  date_style_ = 0;
  time_style_ = 0;
  update_plan_ = 0;
  needs_update_ = false;
  date_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DateTimeSmartFieldArchive::~DateTimeSmartFieldArchive() {
  SharedDtor();
}

void DateTimeSmartFieldArchive::SharedDtor() {
  if (format_ != &::google::protobuf::internal::kEmptyString) {
    delete format_;
  }
  if (locale_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete locale_identifier_;
  }
  if (this != default_instance_) {
    delete super_;
    delete date_;
  }
}

void DateTimeSmartFieldArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DateTimeSmartFieldArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DateTimeSmartFieldArchive_descriptor_;
}

const DateTimeSmartFieldArchive& DateTimeSmartFieldArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

DateTimeSmartFieldArchive* DateTimeSmartFieldArchive::default_instance_ = NULL;

DateTimeSmartFieldArchive* DateTimeSmartFieldArchive::New() const {
  return new DateTimeSmartFieldArchive;
}

void DateTimeSmartFieldArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::SmartFieldArchive::Clear();
    }
    if (has_format()) {
      if (format_ != &::google::protobuf::internal::kEmptyString) {
        format_->clear();
      }
    }
    if (has_locale_identifier()) {
      if (locale_identifier_ != &::google::protobuf::internal::kEmptyString) {
        locale_identifier_->clear();
      }
    }
    date_style_ = 0;
    time_style_ = 0;
    update_plan_ = 0;
    needs_update_ = false;
    if (has_date()) {
      if (date_ != NULL) date_->::TSP::Date::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DateTimeSmartFieldArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSWP.SmartFieldArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_format;
        break;
      }

      // optional string format = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->format().data(), this->format().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_locale_identifier;
        break;
      }

      // optional string locale_identifier = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_locale_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_locale_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->locale_identifier().data(), this->locale_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_date_style;
        break;
      }

      // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle date_style = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date_style:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle_IsValid(value)) {
            set_date_style(static_cast< ::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time_style;
        break;
      }

      // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle time_style = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_style:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle_IsValid(value)) {
            set_time_style(static_cast< ::TSWP::DateTimeSmartFieldArchive_DateTimeFormatterStyle >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_update_plan;
        break;
      }

      // optional .TSWP.DateTimeSmartFieldArchive.DateTimeUpdatePlan update_plan = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_plan:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::DateTimeSmartFieldArchive_DateTimeUpdatePlan_IsValid(value)) {
            set_update_plan(static_cast< ::TSWP::DateTimeSmartFieldArchive_DateTimeUpdatePlan >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_needs_update;
        break;
      }

      // optional bool needs_update = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needs_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_update_)));
          set_has_needs_update();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_date;
        break;
      }

      // optional .TSP.Date date = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_date()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DateTimeSmartFieldArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSWP.SmartFieldArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional string format = 2;
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->format(), output);
  }

  // optional string locale_identifier = 3;
  if (has_locale_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locale_identifier().data(), this->locale_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->locale_identifier(), output);
  }

  // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle date_style = 4;
  if (has_date_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->date_style(), output);
  }

  // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle time_style = 5;
  if (has_time_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->time_style(), output);
  }

  // optional .TSWP.DateTimeSmartFieldArchive.DateTimeUpdatePlan update_plan = 6;
  if (has_update_plan()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->update_plan(), output);
  }

  // optional bool needs_update = 7;
  if (has_needs_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->needs_update(), output);
  }

  // optional .TSP.Date date = 8;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DateTimeSmartFieldArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSWP.SmartFieldArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional string format = 2;
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->format(), target);
  }

  // optional string locale_identifier = 3;
  if (has_locale_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locale_identifier().data(), this->locale_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->locale_identifier(), target);
  }

  // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle date_style = 4;
  if (has_date_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->date_style(), target);
  }

  // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle time_style = 5;
  if (has_time_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->time_style(), target);
  }

  // optional .TSWP.DateTimeSmartFieldArchive.DateTimeUpdatePlan update_plan = 6;
  if (has_update_plan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->update_plan(), target);
  }

  // optional bool needs_update = 7;
  if (has_needs_update()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->needs_update(), target);
  }

  // optional .TSP.Date date = 8;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DateTimeSmartFieldArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSWP.SmartFieldArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional string format = 2;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->format());
    }

    // optional string locale_identifier = 3;
    if (has_locale_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->locale_identifier());
    }

    // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle date_style = 4;
    if (has_date_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->date_style());
    }

    // optional .TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle time_style = 5;
    if (has_time_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->time_style());
    }

    // optional .TSWP.DateTimeSmartFieldArchive.DateTimeUpdatePlan update_plan = 6;
    if (has_update_plan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->update_plan());
    }

    // optional bool needs_update = 7;
    if (has_needs_update()) {
      total_size += 1 + 1;
    }

    // optional .TSP.Date date = 8;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->date());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DateTimeSmartFieldArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DateTimeSmartFieldArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DateTimeSmartFieldArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DateTimeSmartFieldArchive::MergeFrom(const DateTimeSmartFieldArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::SmartFieldArchive::MergeFrom(from.super());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_locale_identifier()) {
      set_locale_identifier(from.locale_identifier());
    }
    if (from.has_date_style()) {
      set_date_style(from.date_style());
    }
    if (from.has_time_style()) {
      set_time_style(from.time_style());
    }
    if (from.has_update_plan()) {
      set_update_plan(from.update_plan());
    }
    if (from.has_needs_update()) {
      set_needs_update(from.needs_update());
    }
    if (from.has_date()) {
      mutable_date()->::TSP::Date::MergeFrom(from.date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DateTimeSmartFieldArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateTimeSmartFieldArchive::CopyFrom(const DateTimeSmartFieldArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTimeSmartFieldArchive::IsInitialized() const {

  if (has_date()) {
    if (!this->date().IsInitialized()) return false;
  }
  return true;
}

void DateTimeSmartFieldArchive::Swap(DateTimeSmartFieldArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(format_, other->format_);
    std::swap(locale_identifier_, other->locale_identifier_);
    std::swap(date_style_, other->date_style_);
    std::swap(time_style_, other->time_style_);
    std::swap(update_plan_, other->update_plan_);
    std::swap(needs_update_, other->needs_update_);
    std::swap(date_, other->date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DateTimeSmartFieldArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DateTimeSmartFieldArchive_descriptor_;
  metadata.reflection = DateTimeSmartFieldArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BookmarkFieldArchive::kSuperFieldNumber;
const int BookmarkFieldArchive::kNameFieldNumber;
const int BookmarkFieldArchive::kRangedFieldNumber;
const int BookmarkFieldArchive::kHiddenFieldNumber;
#endif  // !_MSC_VER

BookmarkFieldArchive::BookmarkFieldArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BookmarkFieldArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::SmartFieldArchive*>(&::TSWP::SmartFieldArchive::default_instance());
}

BookmarkFieldArchive::BookmarkFieldArchive(const BookmarkFieldArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BookmarkFieldArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ranged_ = 0u;
  hidden_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BookmarkFieldArchive::~BookmarkFieldArchive() {
  SharedDtor();
}

void BookmarkFieldArchive::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete super_;
  }
}

void BookmarkFieldArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BookmarkFieldArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BookmarkFieldArchive_descriptor_;
}

const BookmarkFieldArchive& BookmarkFieldArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

BookmarkFieldArchive* BookmarkFieldArchive::default_instance_ = NULL;

BookmarkFieldArchive* BookmarkFieldArchive::New() const {
  return new BookmarkFieldArchive;
}

void BookmarkFieldArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::SmartFieldArchive::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    ranged_ = 0u;
    hidden_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BookmarkFieldArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSWP.SmartFieldArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ranged;
        break;
      }

      // optional uint32 ranged = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranged_)));
          set_has_ranged();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hidden;
        break;
      }

      // optional uint32 hidden = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hidden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hidden_)));
          set_has_hidden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BookmarkFieldArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSWP.SmartFieldArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 ranged = 3;
  if (has_ranged()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ranged(), output);
  }

  // optional uint32 hidden = 4;
  if (has_hidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hidden(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BookmarkFieldArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSWP.SmartFieldArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 ranged = 3;
  if (has_ranged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ranged(), target);
  }

  // optional uint32 hidden = 4;
  if (has_hidden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hidden(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BookmarkFieldArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSWP.SmartFieldArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 ranged = 3;
    if (has_ranged()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranged());
    }

    // optional uint32 hidden = 4;
    if (has_hidden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hidden());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BookmarkFieldArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BookmarkFieldArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BookmarkFieldArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BookmarkFieldArchive::MergeFrom(const BookmarkFieldArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::SmartFieldArchive::MergeFrom(from.super());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ranged()) {
      set_ranged(from.ranged());
    }
    if (from.has_hidden()) {
      set_hidden(from.hidden());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BookmarkFieldArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BookmarkFieldArchive::CopyFrom(const BookmarkFieldArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BookmarkFieldArchive::IsInitialized() const {

  return true;
}

void BookmarkFieldArchive::Swap(BookmarkFieldArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(name_, other->name_);
    std::swap(ranged_, other->ranged_);
    std::swap(hidden_, other->hidden_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BookmarkFieldArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BookmarkFieldArchive_descriptor_;
  metadata.reflection = BookmarkFieldArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FilenameSmartFieldArchive::kSuperFieldNumber;
const int FilenameSmartFieldArchive::kDisplayFlagsFieldNumber;
#endif  // !_MSC_VER

FilenameSmartFieldArchive::FilenameSmartFieldArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FilenameSmartFieldArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::PlaceholderSmartFieldArchive*>(&::TSWP::PlaceholderSmartFieldArchive::default_instance());
}

FilenameSmartFieldArchive::FilenameSmartFieldArchive(const FilenameSmartFieldArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FilenameSmartFieldArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  display_flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FilenameSmartFieldArchive::~FilenameSmartFieldArchive() {
  SharedDtor();
}

void FilenameSmartFieldArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void FilenameSmartFieldArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilenameSmartFieldArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FilenameSmartFieldArchive_descriptor_;
}

const FilenameSmartFieldArchive& FilenameSmartFieldArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

FilenameSmartFieldArchive* FilenameSmartFieldArchive::default_instance_ = NULL;

FilenameSmartFieldArchive* FilenameSmartFieldArchive::New() const {
  return new FilenameSmartFieldArchive;
}

void FilenameSmartFieldArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::PlaceholderSmartFieldArchive::Clear();
    }
    display_flags_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FilenameSmartFieldArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_display_flags;
        break;
      }

      // optional uint32 display_flags = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &display_flags_)));
          set_has_display_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FilenameSmartFieldArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional uint32 display_flags = 2;
  if (has_display_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->display_flags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FilenameSmartFieldArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional uint32 display_flags = 2;
  if (has_display_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->display_flags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FilenameSmartFieldArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional uint32 display_flags = 2;
    if (has_display_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->display_flags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilenameSmartFieldArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FilenameSmartFieldArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FilenameSmartFieldArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FilenameSmartFieldArchive::MergeFrom(const FilenameSmartFieldArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::PlaceholderSmartFieldArchive::MergeFrom(from.super());
    }
    if (from.has_display_flags()) {
      set_display_flags(from.display_flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FilenameSmartFieldArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilenameSmartFieldArchive::CopyFrom(const FilenameSmartFieldArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilenameSmartFieldArchive::IsInitialized() const {

  return true;
}

void FilenameSmartFieldArchive::Swap(FilenameSmartFieldArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(display_flags_, other->display_flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FilenameSmartFieldArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FilenameSmartFieldArchive_descriptor_;
  metadata.reflection = FilenameSmartFieldArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MergeSmartFieldArchive_MergeCategory_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MergeSmartFieldArchive_MergeCategory_descriptor_;
}
bool MergeSmartFieldArchive_MergeCategory_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MergeSmartFieldArchive_MergeCategory MergeSmartFieldArchive::kMergeCategoryTo;
const MergeSmartFieldArchive_MergeCategory MergeSmartFieldArchive::kMergeCategoryFrom;
const MergeSmartFieldArchive_MergeCategory MergeSmartFieldArchive::MergeCategory_MIN;
const MergeSmartFieldArchive_MergeCategory MergeSmartFieldArchive::MergeCategory_MAX;
const int MergeSmartFieldArchive::MergeCategory_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MergeSmartFieldArchive::kSuperFieldNumber;
const int MergeSmartFieldArchive::kPropertyFieldNumber;
const int MergeSmartFieldArchive::kLabelFieldNumber;
const int MergeSmartFieldArchive::kKeyFieldNumber;
const int MergeSmartFieldArchive::kCategoryFieldNumber;
const int MergeSmartFieldArchive::kRequiresFollowingWhitespaceFieldNumber;
const int MergeSmartFieldArchive::kWhitespaceFieldNumber;
const int MergeSmartFieldArchive::kGuidFieldNumber;
const int MergeSmartFieldArchive::kTableFieldFieldNumber;
#endif  // !_MSC_VER

MergeSmartFieldArchive::MergeSmartFieldArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MergeSmartFieldArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::PlaceholderSmartFieldArchive*>(&::TSWP::PlaceholderSmartFieldArchive::default_instance());
}

MergeSmartFieldArchive::MergeSmartFieldArchive(const MergeSmartFieldArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MergeSmartFieldArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  property_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  category_ = 0;
  requires_following_whitespace_ = false;
  whitespace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  table_field_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MergeSmartFieldArchive::~MergeSmartFieldArchive() {
  SharedDtor();
}

void MergeSmartFieldArchive::SharedDtor() {
  if (property_ != &::google::protobuf::internal::kEmptyString) {
    delete property_;
  }
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (whitespace_ != &::google::protobuf::internal::kEmptyString) {
    delete whitespace_;
  }
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    delete guid_;
  }
  if (table_field_ != &::google::protobuf::internal::kEmptyString) {
    delete table_field_;
  }
  if (this != default_instance_) {
    delete super_;
  }
}

void MergeSmartFieldArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MergeSmartFieldArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MergeSmartFieldArchive_descriptor_;
}

const MergeSmartFieldArchive& MergeSmartFieldArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

MergeSmartFieldArchive* MergeSmartFieldArchive::default_instance_ = NULL;

MergeSmartFieldArchive* MergeSmartFieldArchive::New() const {
  return new MergeSmartFieldArchive;
}

void MergeSmartFieldArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::PlaceholderSmartFieldArchive::Clear();
    }
    if (has_property()) {
      if (property_ != &::google::protobuf::internal::kEmptyString) {
        property_->clear();
      }
    }
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::kEmptyString) {
        label_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    category_ = 0;
    requires_following_whitespace_ = false;
    if (has_whitespace()) {
      if (whitespace_ != &::google::protobuf::internal::kEmptyString) {
        whitespace_->clear();
      }
    }
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::kEmptyString) {
        guid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_table_field()) {
      if (table_field_ != &::google::protobuf::internal::kEmptyString) {
        table_field_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MergeSmartFieldArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_property;
        break;
      }

      // optional string property = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_property()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->property().data(), this->property().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_label;
        break;
      }

      // optional string label = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_key;
        break;
      }

      // optional string key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_category;
        break;
      }

      // optional .TSWP.MergeSmartFieldArchive.MergeCategory category = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_category:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::MergeSmartFieldArchive_MergeCategory_IsValid(value)) {
            set_category(static_cast< ::TSWP::MergeSmartFieldArchive_MergeCategory >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_requires_following_whitespace;
        break;
      }

      // optional bool requires_following_whitespace = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requires_following_whitespace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_following_whitespace_)));
          set_has_requires_following_whitespace();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_whitespace;
        break;
      }

      // optional string whitespace = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_whitespace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_whitespace()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->whitespace().data(), this->whitespace().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_guid;
        break;
      }

      // optional string guid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_table_field;
        break;
      }

      // optional string table_field = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_field()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_field().data(), this->table_field().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MergeSmartFieldArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional string property = 2;
  if (has_property()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->property().data(), this->property().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->property(), output);
  }

  // optional string label = 3;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->label(), output);
  }

  // optional string key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->key(), output);
  }

  // optional .TSWP.MergeSmartFieldArchive.MergeCategory category = 5;
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->category(), output);
  }

  // optional bool requires_following_whitespace = 6;
  if (has_requires_following_whitespace()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->requires_following_whitespace(), output);
  }

  // optional string whitespace = 7;
  if (has_whitespace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->whitespace().data(), this->whitespace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->whitespace(), output);
  }

  // optional string guid = 8;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->guid(), output);
  }

  // optional string table_field = 9;
  if (has_table_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_field().data(), this->table_field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->table_field(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MergeSmartFieldArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional string property = 2;
  if (has_property()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->property().data(), this->property().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->property(), target);
  }

  // optional string label = 3;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->label(), target);
  }

  // optional string key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->key(), target);
  }

  // optional .TSWP.MergeSmartFieldArchive.MergeCategory category = 5;
  if (has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->category(), target);
  }

  // optional bool requires_following_whitespace = 6;
  if (has_requires_following_whitespace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->requires_following_whitespace(), target);
  }

  // optional string whitespace = 7;
  if (has_whitespace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->whitespace().data(), this->whitespace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->whitespace(), target);
  }

  // optional string guid = 8;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->guid(), target);
  }

  // optional string table_field = 9;
  if (has_table_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_field().data(), this->table_field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->table_field(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MergeSmartFieldArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional string property = 2;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->property());
    }

    // optional string label = 3;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional string key = 4;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional .TSWP.MergeSmartFieldArchive.MergeCategory category = 5;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->category());
    }

    // optional bool requires_following_whitespace = 6;
    if (has_requires_following_whitespace()) {
      total_size += 1 + 1;
    }

    // optional string whitespace = 7;
    if (has_whitespace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->whitespace());
    }

    // optional string guid = 8;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string table_field = 9;
    if (has_table_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_field());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MergeSmartFieldArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MergeSmartFieldArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MergeSmartFieldArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MergeSmartFieldArchive::MergeFrom(const MergeSmartFieldArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::PlaceholderSmartFieldArchive::MergeFrom(from.super());
    }
    if (from.has_property()) {
      set_property(from.property());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_requires_following_whitespace()) {
      set_requires_following_whitespace(from.requires_following_whitespace());
    }
    if (from.has_whitespace()) {
      set_whitespace(from.whitespace());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_table_field()) {
      set_table_field(from.table_field());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MergeSmartFieldArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MergeSmartFieldArchive::CopyFrom(const MergeSmartFieldArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeSmartFieldArchive::IsInitialized() const {

  return true;
}

void MergeSmartFieldArchive::Swap(MergeSmartFieldArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(property_, other->property_);
    std::swap(label_, other->label_);
    std::swap(key_, other->key_);
    std::swap(category_, other->category_);
    std::swap(requires_following_whitespace_, other->requires_following_whitespace_);
    std::swap(whitespace_, other->whitespace_);
    std::swap(guid_, other->guid_);
    std::swap(table_field_, other->table_field_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MergeSmartFieldArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MergeSmartFieldArchive_descriptor_;
  metadata.reflection = MergeSmartFieldArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TOCSmartFieldArchive_TOCEntry::kBookmarkNameFieldNumber;
const int TOCSmartFieldArchive_TOCEntry::kTargetStyleFieldNumber;
const int TOCSmartFieldArchive_TOCEntry::kRangeFieldNumber;
#endif  // !_MSC_VER

TOCSmartFieldArchive_TOCEntry::TOCSmartFieldArchive_TOCEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TOCSmartFieldArchive_TOCEntry::InitAsDefaultInstance() {
  target_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  range_ = const_cast< ::TSP::Range*>(&::TSP::Range::default_instance());
}

TOCSmartFieldArchive_TOCEntry::TOCSmartFieldArchive_TOCEntry(const TOCSmartFieldArchive_TOCEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TOCSmartFieldArchive_TOCEntry::SharedCtor() {
  _cached_size_ = 0;
  bookmark_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  target_style_ = NULL;
  range_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TOCSmartFieldArchive_TOCEntry::~TOCSmartFieldArchive_TOCEntry() {
  SharedDtor();
}

void TOCSmartFieldArchive_TOCEntry::SharedDtor() {
  if (bookmark_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bookmark_name_;
  }
  if (this != default_instance_) {
    delete target_style_;
    delete range_;
  }
}

void TOCSmartFieldArchive_TOCEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TOCSmartFieldArchive_TOCEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TOCSmartFieldArchive_TOCEntry_descriptor_;
}

const TOCSmartFieldArchive_TOCEntry& TOCSmartFieldArchive_TOCEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

TOCSmartFieldArchive_TOCEntry* TOCSmartFieldArchive_TOCEntry::default_instance_ = NULL;

TOCSmartFieldArchive_TOCEntry* TOCSmartFieldArchive_TOCEntry::New() const {
  return new TOCSmartFieldArchive_TOCEntry;
}

void TOCSmartFieldArchive_TOCEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bookmark_name()) {
      if (bookmark_name_ != &::google::protobuf::internal::kEmptyString) {
        bookmark_name_->clear();
      }
    }
    if (has_target_style()) {
      if (target_style_ != NULL) target_style_->::TSP::Reference::Clear();
    }
    if (has_range()) {
      if (range_ != NULL) range_->::TSP::Range::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TOCSmartFieldArchive_TOCEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bookmark_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bookmark_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bookmark_name().data(), this->bookmark_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target_style;
        break;
      }

      // optional .TSP.Reference target_style = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_range;
        break;
      }

      // optional .TSP.Range range = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TOCSmartFieldArchive_TOCEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string bookmark_name = 1;
  if (has_bookmark_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bookmark_name().data(), this->bookmark_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->bookmark_name(), output);
  }

  // optional .TSP.Reference target_style = 2;
  if (has_target_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->target_style(), output);
  }

  // optional .TSP.Range range = 3;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->range(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TOCSmartFieldArchive_TOCEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string bookmark_name = 1;
  if (has_bookmark_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bookmark_name().data(), this->bookmark_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bookmark_name(), target);
  }

  // optional .TSP.Reference target_style = 2;
  if (has_target_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->target_style(), target);
  }

  // optional .TSP.Range range = 3;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->range(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TOCSmartFieldArchive_TOCEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string bookmark_name = 1;
    if (has_bookmark_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bookmark_name());
    }

    // optional .TSP.Reference target_style = 2;
    if (has_target_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_style());
    }

    // optional .TSP.Range range = 3;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->range());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TOCSmartFieldArchive_TOCEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TOCSmartFieldArchive_TOCEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TOCSmartFieldArchive_TOCEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TOCSmartFieldArchive_TOCEntry::MergeFrom(const TOCSmartFieldArchive_TOCEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bookmark_name()) {
      set_bookmark_name(from.bookmark_name());
    }
    if (from.has_target_style()) {
      mutable_target_style()->::TSP::Reference::MergeFrom(from.target_style());
    }
    if (from.has_range()) {
      mutable_range()->::TSP::Range::MergeFrom(from.range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TOCSmartFieldArchive_TOCEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TOCSmartFieldArchive_TOCEntry::CopyFrom(const TOCSmartFieldArchive_TOCEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOCSmartFieldArchive_TOCEntry::IsInitialized() const {

  if (has_target_style()) {
    if (!this->target_style().IsInitialized()) return false;
  }
  if (has_range()) {
    if (!this->range().IsInitialized()) return false;
  }
  return true;
}

void TOCSmartFieldArchive_TOCEntry::Swap(TOCSmartFieldArchive_TOCEntry* other) {
  if (other != this) {
    std::swap(bookmark_name_, other->bookmark_name_);
    std::swap(target_style_, other->target_style_);
    std::swap(range_, other->range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TOCSmartFieldArchive_TOCEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TOCSmartFieldArchive_TOCEntry_descriptor_;
  metadata.reflection = TOCSmartFieldArchive_TOCEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TOCSmartFieldArchive::kSuperFieldNumber;
const int TOCSmartFieldArchive::kTocEntriesFieldNumber;
#endif  // !_MSC_VER

TOCSmartFieldArchive::TOCSmartFieldArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TOCSmartFieldArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::PlaceholderSmartFieldArchive*>(&::TSWP::PlaceholderSmartFieldArchive::default_instance());
}

TOCSmartFieldArchive::TOCSmartFieldArchive(const TOCSmartFieldArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TOCSmartFieldArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TOCSmartFieldArchive::~TOCSmartFieldArchive() {
  SharedDtor();
}

void TOCSmartFieldArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void TOCSmartFieldArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TOCSmartFieldArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TOCSmartFieldArchive_descriptor_;
}

const TOCSmartFieldArchive& TOCSmartFieldArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

TOCSmartFieldArchive* TOCSmartFieldArchive::default_instance_ = NULL;

TOCSmartFieldArchive* TOCSmartFieldArchive::New() const {
  return new TOCSmartFieldArchive;
}

void TOCSmartFieldArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::PlaceholderSmartFieldArchive::Clear();
    }
  }
  toc_entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TOCSmartFieldArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_toc_entries;
        break;
      }

      // repeated .TSWP.TOCSmartFieldArchive.TOCEntry toc_entries = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toc_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_toc_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_toc_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TOCSmartFieldArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // repeated .TSWP.TOCSmartFieldArchive.TOCEntry toc_entries = 2;
  for (int i = 0; i < this->toc_entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->toc_entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TOCSmartFieldArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // repeated .TSWP.TOCSmartFieldArchive.TOCEntry toc_entries = 2;
  for (int i = 0; i < this->toc_entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->toc_entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TOCSmartFieldArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSWP.PlaceholderSmartFieldArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  // repeated .TSWP.TOCSmartFieldArchive.TOCEntry toc_entries = 2;
  total_size += 1 * this->toc_entries_size();
  for (int i = 0; i < this->toc_entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->toc_entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TOCSmartFieldArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TOCSmartFieldArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TOCSmartFieldArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TOCSmartFieldArchive::MergeFrom(const TOCSmartFieldArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  toc_entries_.MergeFrom(from.toc_entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::PlaceholderSmartFieldArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TOCSmartFieldArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TOCSmartFieldArchive::CopyFrom(const TOCSmartFieldArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOCSmartFieldArchive::IsInitialized() const {

  for (int i = 0; i < toc_entries_size(); i++) {
    if (!this->toc_entries(i).IsInitialized()) return false;
  }
  return true;
}

void TOCSmartFieldArchive::Swap(TOCSmartFieldArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    toc_entries_.Swap(&other->toc_entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TOCSmartFieldArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TOCSmartFieldArchive_descriptor_;
  metadata.reflection = TOCSmartFieldArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RubyFieldArchive::kSuperFieldNumber;
const int RubyFieldArchive::kRubyTextFieldNumber;
#endif  // !_MSC_VER

RubyFieldArchive::RubyFieldArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RubyFieldArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::SmartFieldArchive*>(&::TSWP::SmartFieldArchive::default_instance());
}

RubyFieldArchive::RubyFieldArchive(const RubyFieldArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RubyFieldArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ruby_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RubyFieldArchive::~RubyFieldArchive() {
  SharedDtor();
}

void RubyFieldArchive::SharedDtor() {
  if (ruby_text_ != &::google::protobuf::internal::kEmptyString) {
    delete ruby_text_;
  }
  if (this != default_instance_) {
    delete super_;
  }
}

void RubyFieldArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RubyFieldArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RubyFieldArchive_descriptor_;
}

const RubyFieldArchive& RubyFieldArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

RubyFieldArchive* RubyFieldArchive::default_instance_ = NULL;

RubyFieldArchive* RubyFieldArchive::New() const {
  return new RubyFieldArchive;
}

void RubyFieldArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::SmartFieldArchive::Clear();
    }
    if (has_ruby_text()) {
      if (ruby_text_ != &::google::protobuf::internal::kEmptyString) {
        ruby_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RubyFieldArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSWP.SmartFieldArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ruby_text;
        break;
      }

      // optional string ruby_text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ruby_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ruby_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ruby_text().data(), this->ruby_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RubyFieldArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSWP.SmartFieldArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional string ruby_text = 2;
  if (has_ruby_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ruby_text().data(), this->ruby_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ruby_text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RubyFieldArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSWP.SmartFieldArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional string ruby_text = 2;
  if (has_ruby_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ruby_text().data(), this->ruby_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ruby_text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RubyFieldArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSWP.SmartFieldArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional string ruby_text = 2;
    if (has_ruby_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ruby_text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RubyFieldArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RubyFieldArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RubyFieldArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RubyFieldArchive::MergeFrom(const RubyFieldArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::SmartFieldArchive::MergeFrom(from.super());
    }
    if (from.has_ruby_text()) {
      set_ruby_text(from.ruby_text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RubyFieldArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RubyFieldArchive::CopyFrom(const RubyFieldArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RubyFieldArchive::IsInitialized() const {

  return true;
}

void RubyFieldArchive::Swap(RubyFieldArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(ruby_text_, other->ruby_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RubyFieldArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RubyFieldArchive_descriptor_;
  metadata.reflection = RubyFieldArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ChangeArchive_ChangeKind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeArchive_ChangeKind_descriptor_;
}
bool ChangeArchive_ChangeKind_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ChangeArchive_ChangeKind ChangeArchive::kChangeKindInsertion;
const ChangeArchive_ChangeKind ChangeArchive::kChangeKindDeletion;
const ChangeArchive_ChangeKind ChangeArchive::ChangeKind_MIN;
const ChangeArchive_ChangeKind ChangeArchive::ChangeKind_MAX;
const int ChangeArchive::ChangeKind_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ChangeArchive::kKindFieldNumber;
const int ChangeArchive::kSessionFieldNumber;
const int ChangeArchive::kDateFieldNumber;
const int ChangeArchive::kHiddenFieldNumber;
#endif  // !_MSC_VER

ChangeArchive::ChangeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeArchive::InitAsDefaultInstance() {
  session_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  date_ = const_cast< ::TSP::Date*>(&::TSP::Date::default_instance());
}

ChangeArchive::ChangeArchive(const ChangeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeArchive::SharedCtor() {
  _cached_size_ = 0;
  kind_ = 1;
  session_ = NULL;
  date_ = NULL;
  hidden_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeArchive::~ChangeArchive() {
  SharedDtor();
}

void ChangeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete session_;
    delete date_;
  }
}

void ChangeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeArchive_descriptor_;
}

const ChangeArchive& ChangeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

ChangeArchive* ChangeArchive::default_instance_ = NULL;

ChangeArchive* ChangeArchive::New() const {
  return new ChangeArchive;
}

void ChangeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kind_ = 1;
    if (has_session()) {
      if (session_ != NULL) session_->::TSP::Reference::Clear();
    }
    if (has_date()) {
      if (date_ != NULL) date_->::TSP::Date::Clear();
    }
    hidden_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSWP.ChangeArchive.ChangeKind kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSWP::ChangeArchive_ChangeKind_IsValid(value)) {
            set_kind(static_cast< ::TSWP::ChangeArchive_ChangeKind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session;
        break;
      }

      // optional .TSP.Reference session = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_date;
        break;
      }

      // optional .TSP.Date date = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_date()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hidden;
        break;
      }

      // optional bool hidden = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hidden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hidden_)));
          set_has_hidden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSWP.ChangeArchive.ChangeKind kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->kind(), output);
  }

  // optional .TSP.Reference session = 2;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->session(), output);
  }

  // optional .TSP.Date date = 3;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->date(), output);
  }

  // optional bool hidden = 4;
  if (has_hidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->hidden(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSWP.ChangeArchive.ChangeKind kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->kind(), target);
  }

  // optional .TSP.Reference session = 2;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->session(), target);
  }

  // optional .TSP.Date date = 3;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->date(), target);
  }

  // optional bool hidden = 4;
  if (has_hidden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->hidden(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSWP.ChangeArchive.ChangeKind kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

    // optional .TSP.Reference session = 2;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }

    // optional .TSP.Date date = 3;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->date());
    }

    // optional bool hidden = 4;
    if (has_hidden()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeArchive::MergeFrom(const ChangeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_session()) {
      mutable_session()->::TSP::Reference::MergeFrom(from.session());
    }
    if (from.has_date()) {
      mutable_date()->::TSP::Date::MergeFrom(from.date());
    }
    if (from.has_hidden()) {
      set_hidden(from.hidden());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeArchive::CopyFrom(const ChangeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeArchive::IsInitialized() const {

  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  if (has_date()) {
    if (!this->date().IsInitialized()) return false;
  }
  return true;
}

void ChangeArchive::Swap(ChangeArchive* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    std::swap(session_, other->session_);
    std::swap(date_, other->date_);
    std::swap(hidden_, other->hidden_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeArchive_descriptor_;
  metadata.reflection = ChangeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeSessionArchive::kSessionUidFieldNumber;
const int ChangeSessionArchive::kAuthorFieldNumber;
const int ChangeSessionArchive::kDateFieldNumber;
#endif  // !_MSC_VER

ChangeSessionArchive::ChangeSessionArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeSessionArchive::InitAsDefaultInstance() {
  author_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  date_ = const_cast< ::TSP::Date*>(&::TSP::Date::default_instance());
}

ChangeSessionArchive::ChangeSessionArchive(const ChangeSessionArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeSessionArchive::SharedCtor() {
  _cached_size_ = 0;
  session_uid_ = 0u;
  author_ = NULL;
  date_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeSessionArchive::~ChangeSessionArchive() {
  SharedDtor();
}

void ChangeSessionArchive::SharedDtor() {
  if (this != default_instance_) {
    delete author_;
    delete date_;
  }
}

void ChangeSessionArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeSessionArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeSessionArchive_descriptor_;
}

const ChangeSessionArchive& ChangeSessionArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

ChangeSessionArchive* ChangeSessionArchive::default_instance_ = NULL;

ChangeSessionArchive* ChangeSessionArchive::New() const {
  return new ChangeSessionArchive;
}

void ChangeSessionArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_uid_ = 0u;
    if (has_author()) {
      if (author_ != NULL) author_->::TSP::Reference::Clear();
    }
    if (has_date()) {
      if (date_ != NULL) date_->::TSP::Date::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeSessionArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 session_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_uid_)));
          set_has_session_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_author;
        break;
      }

      // optional .TSP.Reference author = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_author:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_author()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_date;
        break;
      }

      // optional .TSP.Date date = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_date()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeSessionArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 session_uid = 1;
  if (has_session_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session_uid(), output);
  }

  // optional .TSP.Reference author = 2;
  if (has_author()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->author(), output);
  }

  // optional .TSP.Date date = 3;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeSessionArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 session_uid = 1;
  if (has_session_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->session_uid(), target);
  }

  // optional .TSP.Reference author = 2;
  if (has_author()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->author(), target);
  }

  // optional .TSP.Date date = 3;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeSessionArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 session_uid = 1;
    if (has_session_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_uid());
    }

    // optional .TSP.Reference author = 2;
    if (has_author()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->author());
    }

    // optional .TSP.Date date = 3;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->date());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeSessionArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeSessionArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeSessionArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeSessionArchive::MergeFrom(const ChangeSessionArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_uid()) {
      set_session_uid(from.session_uid());
    }
    if (from.has_author()) {
      mutable_author()->::TSP::Reference::MergeFrom(from.author());
    }
    if (from.has_date()) {
      mutable_date()->::TSP::Date::MergeFrom(from.date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeSessionArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeSessionArchive::CopyFrom(const ChangeSessionArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeSessionArchive::IsInitialized() const {

  if (has_author()) {
    if (!this->author().IsInitialized()) return false;
  }
  if (has_date()) {
    if (!this->date().IsInitialized()) return false;
  }
  return true;
}

void ChangeSessionArchive::Swap(ChangeSessionArchive* other) {
  if (other != this) {
    std::swap(session_uid_, other->session_uid_);
    std::swap(author_, other->author_);
    std::swap(date_, other->date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeSessionArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeSessionArchive_descriptor_;
  metadata.reflection = ChangeSessionArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SectionPlaceholderArchive::SectionPlaceholderArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SectionPlaceholderArchive::InitAsDefaultInstance() {
}

SectionPlaceholderArchive::SectionPlaceholderArchive(const SectionPlaceholderArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SectionPlaceholderArchive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SectionPlaceholderArchive::~SectionPlaceholderArchive() {
  SharedDtor();
}

void SectionPlaceholderArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SectionPlaceholderArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SectionPlaceholderArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SectionPlaceholderArchive_descriptor_;
}

const SectionPlaceholderArchive& SectionPlaceholderArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSWPArchives_2eproto();
  return *default_instance_;
}

SectionPlaceholderArchive* SectionPlaceholderArchive::default_instance_ = NULL;

SectionPlaceholderArchive* SectionPlaceholderArchive::New() const {
  return new SectionPlaceholderArchive;
}

void SectionPlaceholderArchive::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SectionPlaceholderArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SectionPlaceholderArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SectionPlaceholderArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SectionPlaceholderArchive::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SectionPlaceholderArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SectionPlaceholderArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SectionPlaceholderArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SectionPlaceholderArchive::MergeFrom(const SectionPlaceholderArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SectionPlaceholderArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectionPlaceholderArchive::CopyFrom(const SectionPlaceholderArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionPlaceholderArchive::IsInitialized() const {

  return true;
}

void SectionPlaceholderArchive::Swap(SectionPlaceholderArchive* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SectionPlaceholderArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SectionPlaceholderArchive_descriptor_;
  metadata.reflection = SectionPlaceholderArchive_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSWP

// @@protoc_insertion_point(global_scope)
