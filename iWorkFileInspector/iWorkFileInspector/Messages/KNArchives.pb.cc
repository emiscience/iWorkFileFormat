// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KNArchives.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "KNArchives.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KN {

namespace {

const ::google::protobuf::Descriptor* AnimationAttributesArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnimationAttributesArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransitionAttributesArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransitionAttributesArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TransitionArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransitionArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildChunkArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildChunkArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildAttributesArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildAttributesArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BuildAttributesArchive_BuildAttributesAcceleration_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BuildAttributesArchive_BuildAttributesRotationDirection_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BuildAttributesArchive_BuildAttributesCurveStyle_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BuildAttributesArchive_BuildAttributesTextDelivery_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BuildAttributesArchive_BuildAttributesDeliveryOption_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BuildArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlaceholderArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlaceholderArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PlaceholderArchive_Kind_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NoteArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NoteArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClassicStylesheetRecordArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClassicStylesheetRecordArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClassicThemeRecordArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClassicThemeRecordArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlideArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlideArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlideArchive_SageTagMapEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlideArchive_SageTagMapEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlideNodeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlideNodeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* DesktopUILayoutArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DesktopUILayoutArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DesktopUILayoutArchive_SidebarViewMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DesktopUILayoutArchive_InspectorPaneViewMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UIStateArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UIStateArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CanvasSelectionArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CanvasSelectionArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThemeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThemeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlideTreeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlideTreeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShowArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShowArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ShowArchive_KNShowMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DocumentArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlideStylePropertiesArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlideStylePropertiesArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlideStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlideStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PasteboardNativeStorageArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PasteboardNativeStorageArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* MasterChangeBlobArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MasterChangeBlobArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordingArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordingArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RecordingArchive_RecordingSyncState_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RecordingEventTrackArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordingEventTrackArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordingEventArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordingEventArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordingNavigationEventArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordingNavigationEventArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RecordingLaserEventArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordingLaserEventArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordingPauseEventArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordingPauseEventArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RecordingPauseEventArchive_RecordingPauseEventType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RecordingMovieEventArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordingMovieEventArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RecordingMovieEventArchive_RecordingMovieEventType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RecordingMovieTrackArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordingMovieTrackArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* MovieSegmentArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MovieSegmentArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* Soundtrack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Soundtrack_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Soundtrack_SoundtrackMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SlideNumberAttachmentArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlideNumberAttachmentArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlideCollectionSelectionArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlideCollectionSelectionArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlideCollectionSelectionArchive_OutlineSelection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlideCollectionSelectionArchive_OutlineSelection_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_KNArchives_2eproto() {
  protobuf_AddDesc_KNArchives_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "KNArchives.proto");
  GOOGLE_CHECK(file != NULL);
  AnimationAttributesArchive_descriptor_ = file->message_type(0);
  static const int AnimationAttributesArchive_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimationAttributesArchive, animationtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimationAttributesArchive, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimationAttributesArchive, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimationAttributesArchive, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimationAttributesArchive, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimationAttributesArchive, isautomatic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimationAttributesArchive, color_),
  };
  AnimationAttributesArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnimationAttributesArchive_descriptor_,
      AnimationAttributesArchive::default_instance_,
      AnimationAttributesArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimationAttributesArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimationAttributesArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnimationAttributesArchive));
  TransitionAttributesArchive_descriptor_ = file->message_type(1);
  static const int TransitionAttributesArchive_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionAttributesArchive, animationattributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionAttributesArchive, isautomatic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionAttributesArchive, custom_twist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionAttributesArchive, custom_mosaic_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionAttributesArchive, custom_mosaic_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionAttributesArchive, custom_bounce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionAttributesArchive, custom_magic_move_fade_unmatched_objects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionAttributesArchive, custom_timing_curve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionAttributesArchive, custom_text_delivery_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionAttributesArchive, custom_motion_blur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionAttributesArchive, database_animationtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionAttributesArchive, database_effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionAttributesArchive, database_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionAttributesArchive, database_direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionAttributesArchive, database_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionAttributesArchive, database_color_),
  };
  TransitionAttributesArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransitionAttributesArchive_descriptor_,
      TransitionAttributesArchive::default_instance_,
      TransitionAttributesArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionAttributesArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionAttributesArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransitionAttributesArchive));
  TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_descriptor_ = TransitionAttributesArchive_descriptor_->enum_type(0);
  TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_descriptor_ = TransitionAttributesArchive_descriptor_->enum_type(1);
  TransitionArchive_descriptor_ = file->message_type(2);
  static const int TransitionArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionArchive, attributes_),
  };
  TransitionArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransitionArchive_descriptor_,
      TransitionArchive::default_instance_,
      TransitionArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransitionArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransitionArchive));
  BuildChunkArchive_descriptor_ = file->message_type(3);
  static const int BuildChunkArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildChunkArchive, build_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildChunkArchive, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildChunkArchive, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildChunkArchive, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildChunkArchive, automatic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildChunkArchive, referent_),
  };
  BuildChunkArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildChunkArchive_descriptor_,
      BuildChunkArchive::default_instance_,
      BuildChunkArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildChunkArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildChunkArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildChunkArchive));
  BuildAttributesArchive_descriptor_ = file->message_type(4);
  static const int BuildAttributesArchive_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAttributesArchive, animationattributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAttributesArchive, eventtrigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAttributesArchive, delayautomaticafter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAttributesArchive, delayautomaticwith_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAttributesArchive, curvestyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAttributesArchive, chartrotation3d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAttributesArchive, startoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAttributesArchive, endoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAttributesArchive, action_rotationangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAttributesArchive, action_rotationdirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAttributesArchive, action_scalesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAttributesArchive, action_coloralpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAttributesArchive, action_acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAttributesArchive, action_motionpathsource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAttributesArchive, custom_bounce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAttributesArchive, custom_textdelivery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAttributesArchive, custom_deliveryoption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAttributesArchive, custom_action_decay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAttributesArchive, custom_action_repeatcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAttributesArchive, custom_action_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAttributesArchive, custom_action_jiggleintensity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAttributesArchive, custom_motion_blur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAttributesArchive, database_animationtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAttributesArchive, database_effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAttributesArchive, database_direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAttributesArchive, database_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAttributesArchive, database_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAttributesArchive, database_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAttributesArchive, motionpathstring_),
  };
  BuildAttributesArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildAttributesArchive_descriptor_,
      BuildAttributesArchive::default_instance_,
      BuildAttributesArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAttributesArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildAttributesArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildAttributesArchive));
  BuildAttributesArchive_BuildAttributesAcceleration_descriptor_ = BuildAttributesArchive_descriptor_->enum_type(0);
  BuildAttributesArchive_BuildAttributesRotationDirection_descriptor_ = BuildAttributesArchive_descriptor_->enum_type(1);
  BuildAttributesArchive_BuildAttributesCurveStyle_descriptor_ = BuildAttributesArchive_descriptor_->enum_type(2);
  BuildAttributesArchive_BuildAttributesTextDelivery_descriptor_ = BuildAttributesArchive_descriptor_->enum_type(3);
  BuildAttributesArchive_BuildAttributesDeliveryOption_descriptor_ = BuildAttributesArchive_descriptor_->enum_type(4);
  BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_descriptor_ = BuildAttributesArchive_descriptor_->enum_type(5);
  BuildArchive_descriptor_ = file->message_type(5);
  static const int BuildArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildArchive, drawable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildArchive, delivery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildArchive, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildArchive, attributes_),
  };
  BuildArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildArchive_descriptor_,
      BuildArchive::default_instance_,
      BuildArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildArchive));
  PlaceholderArchive_descriptor_ = file->message_type(6);
  static const int PlaceholderArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceholderArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceholderArchive, kind_),
  };
  PlaceholderArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlaceholderArchive_descriptor_,
      PlaceholderArchive::default_instance_,
      PlaceholderArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceholderArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceholderArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlaceholderArchive));
  PlaceholderArchive_Kind_descriptor_ = PlaceholderArchive_descriptor_->enum_type(0);
  NoteArchive_descriptor_ = file->message_type(7);
  static const int NoteArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteArchive, containedstorage_),
  };
  NoteArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NoteArchive_descriptor_,
      NoteArchive::default_instance_,
      NoteArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NoteArchive));
  ClassicStylesheetRecordArchive_descriptor_ = file->message_type(8);
  static const int ClassicStylesheetRecordArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassicStylesheetRecordArchive, identifier_to_style_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassicStylesheetRecordArchive, theme_),
  };
  ClassicStylesheetRecordArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClassicStylesheetRecordArchive_descriptor_,
      ClassicStylesheetRecordArchive::default_instance_,
      ClassicStylesheetRecordArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassicStylesheetRecordArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassicStylesheetRecordArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClassicStylesheetRecordArchive));
  ClassicThemeRecordArchive_descriptor_ = file->message_type(9);
  static const int ClassicThemeRecordArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassicThemeRecordArchive, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassicThemeRecordArchive, stylesheetrecord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassicThemeRecordArchive, masters_),
  };
  ClassicThemeRecordArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClassicThemeRecordArchive_descriptor_,
      ClassicThemeRecordArchive::default_instance_,
      ClassicThemeRecordArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassicThemeRecordArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassicThemeRecordArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClassicThemeRecordArchive));
  SlideArchive_descriptor_ = file->message_type(10);
  static const int SlideArchive_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, builds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, buildchunks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, transition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, titleplaceholder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, bodyplaceholder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, objectplaceholder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, slidenumberplaceholder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, owned_drawables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, drawables_z_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, sage_tag_to_info_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, titleplaceholdergeometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, titleplaceholdershapestyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, titleplaceholdertextstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, titlelayoutproperties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, bodyplaceholdergeometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, bodyplaceholdershapestyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, bodyplaceholdertextstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, bodylayoutproperties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, slidenumberplaceholdergeometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, slidenumberplaceholdershapestyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, slidenumberplaceholdertextstyleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, slidenumberlayoutproperties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, classicstylesheetrecord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, bodyparagraphstyles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, bodyliststyles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, thumbnailtextfortitleplaceholder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, thumbnailtextforbodyplaceholder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, slideobjectslayerwithmaster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, staticguides_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, userdefinedguidestorage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, indocument_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, note_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, info_using_object_placeholder_geometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, info_using_object_placeholder_geometry_matches_object_placeholder_geometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, deprecated_objectplaceholdervisibleforexport_),
  };
  SlideArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlideArchive_descriptor_,
      SlideArchive::default_instance_,
      SlideArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlideArchive));
  SlideArchive_SageTagMapEntry_descriptor_ = SlideArchive_descriptor_->nested_type(0);
  static const int SlideArchive_SageTagMapEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive_SageTagMapEntry, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive_SageTagMapEntry, info_),
  };
  SlideArchive_SageTagMapEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlideArchive_SageTagMapEntry_descriptor_,
      SlideArchive_SageTagMapEntry::default_instance_,
      SlideArchive_SageTagMapEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive_SageTagMapEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideArchive_SageTagMapEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlideArchive_SageTagMapEntry));
  SlideNodeArchive_descriptor_ = file->message_type(11);
  static const int SlideNodeArchive_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideNodeArchive, children_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideNodeArchive, slide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideNodeArchive, thumbnails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideNodeArchive, thumbnailsizes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideNodeArchive, thumbnailsaredirty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideNodeArchive, ishidden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideNodeArchive, iscollapsed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideNodeArchive, iscollapsedinoutlineview_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideNodeArchive, hasbodyinoutlineview_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideNodeArchive, hasbuilds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideNodeArchive, hastransition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideNodeArchive, hasnote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideNodeArchive, isslidenumbervisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideNodeArchive, uniqueidentifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideNodeArchive, copyfromslideidentifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideNodeArchive, slidespecifichyperlinkcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideNodeArchive, eventcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideNodeArchive, has_explicit_builds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideNodeArchive, database_thumbnail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideNodeArchive, database_thumbnails_),
  };
  SlideNodeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlideNodeArchive_descriptor_,
      SlideNodeArchive::default_instance_,
      SlideNodeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideNodeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideNodeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlideNodeArchive));
  DesktopUILayoutArchive_descriptor_ = file->message_type(12);
  static const int DesktopUILayoutArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DesktopUILayoutArchive, sidebar_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DesktopUILayoutArchive, sidebar_view_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DesktopUILayoutArchive, notes_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DesktopUILayoutArchive, light_table_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DesktopUILayoutArchive, inspector_pane_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DesktopUILayoutArchive, inspector_pane_view_mode_),
  };
  DesktopUILayoutArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DesktopUILayoutArchive_descriptor_,
      DesktopUILayoutArchive::default_instance_,
      DesktopUILayoutArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DesktopUILayoutArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DesktopUILayoutArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DesktopUILayoutArchive));
  DesktopUILayoutArchive_SidebarViewMode_descriptor_ = DesktopUILayoutArchive_descriptor_->enum_type(0);
  DesktopUILayoutArchive_InspectorPaneViewMode_descriptor_ = DesktopUILayoutArchive_descriptor_->enum_type(1);
  UIStateArchive_descriptor_ = file->message_type(13);
  static const int UIStateArchive_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, slidenodetoedit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, deprecated_masterslidenodetoapply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, deprecated_slidethumbnailsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, canvasviewscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, canvasoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, selectedslidenodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, iphonecanvasviewscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, iphonecanvasoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, iphone568canvasviewscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, iphone568canvasoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, desktop_ui_layout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, desktop_slide_view_content_fits_window_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, desktop_canvas_view_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, desktop_canvas_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, light_table_zoom_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, chart_ui_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, show_slide_guides_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, show_master_guides_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, shows_comments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, collapsed_slide_nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, shows_ruler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, desktop_navigator_view_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, desktop_outline_view_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, desktop_main_content_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, desktop_presenter_notes_view_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, desktop_main_window_origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, light_table_hides_skipped_slides_),
  };
  UIStateArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UIStateArchive_descriptor_,
      UIStateArchive::default_instance_,
      UIStateArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIStateArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UIStateArchive));
  CanvasSelectionArchive_descriptor_ = file->message_type(14);
  static const int CanvasSelectionArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanvasSelectionArchive, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanvasSelectionArchive, action_ghost_indexes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanvasSelectionArchive, database_action_ghost_indexes_),
  };
  CanvasSelectionArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CanvasSelectionArchive_descriptor_,
      CanvasSelectionArchive::default_instance_,
      CanvasSelectionArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanvasSelectionArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanvasSelectionArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CanvasSelectionArchive));
  ThemeArchive_descriptor_ = file->message_type(15);
  static const int ThemeArchive_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeArchive, masters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeArchive, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeArchive, classicthemerecords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeArchive, defaultmasterslidenode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeArchive, default_master_slide_node_reference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeArchive, default_master_slide_node_is_our_best_guess_),
  };
  ThemeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThemeArchive_descriptor_,
      ThemeArchive::default_instance_,
      ThemeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThemeArchive));
  SlideTreeArchive_descriptor_ = file->message_type(16);
  static const int SlideTreeArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideTreeArchive, rootslidenode_),
  };
  SlideTreeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlideTreeArchive_descriptor_,
      SlideTreeArchive::default_instance_,
      SlideTreeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideTreeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideTreeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlideTreeArchive));
  ShowArchive_descriptor_ = file->message_type(17);
  static const int ShowArchive_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowArchive, uistate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowArchive, theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowArchive, slidetree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowArchive, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowArchive, stylesheet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowArchive, slidenumbersvisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowArchive, recording_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowArchive, loop_presentation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowArchive, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowArchive, autoplay_transition_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowArchive, autoplay_build_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowArchive, idle_timer_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowArchive, idle_timer_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowArchive, soundtrack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowArchive, automatically_plays_upon_open_),
  };
  ShowArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShowArchive_descriptor_,
      ShowArchive::default_instance_,
      ShowArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShowArchive));
  ShowArchive_KNShowMode_descriptor_ = ShowArchive_descriptor_->enum_type(0);
  DocumentArchive_descriptor_ = file->message_type(18);
  static const int DocumentArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, tables_custom_format_list_),
  };
  DocumentArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentArchive_descriptor_,
      DocumentArchive::default_instance_,
      DocumentArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentArchive));
  SlideStylePropertiesArchive_descriptor_ = file->message_type(19);
  static const int SlideStylePropertiesArchive_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideStylePropertiesArchive, fill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideStylePropertiesArchive, transition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideStylePropertiesArchive, transition_null_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideStylePropertiesArchive, titleplaceholdervisibility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideStylePropertiesArchive, bodyplaceholdervisibility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideStylePropertiesArchive, objectplaceholdervisibility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideStylePropertiesArchive, slidenumberplaceholdervisibility_),
  };
  SlideStylePropertiesArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlideStylePropertiesArchive_descriptor_,
      SlideStylePropertiesArchive::default_instance_,
      SlideStylePropertiesArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideStylePropertiesArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideStylePropertiesArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlideStylePropertiesArchive));
  SlideStyleArchive_descriptor_ = file->message_type(20);
  static const int SlideStyleArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideStyleArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideStyleArchive, override_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideStyleArchive, slide_properties_),
  };
  SlideStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlideStyleArchive_descriptor_,
      SlideStyleArchive::default_instance_,
      SlideStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideStyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlideStyleArchive));
  PasteboardNativeStorageArchive_descriptor_ = file->message_type(21);
  static const int PasteboardNativeStorageArchive_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteboardNativeStorageArchive, drawables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteboardNativeStorageArchive, builds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteboardNativeStorageArchive, buildchunks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteboardNativeStorageArchive, slidenodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteboardNativeStorageArchive, masterslidenodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteboardNativeStorageArchive, originalshowsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteboardNativeStorageArchive, titleranges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteboardNativeStorageArchive, geometries_in_root_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteboardNativeStorageArchive, slide_node_unique_identifier_),
  };
  PasteboardNativeStorageArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PasteboardNativeStorageArchive_descriptor_,
      PasteboardNativeStorageArchive::default_instance_,
      PasteboardNativeStorageArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteboardNativeStorageArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteboardNativeStorageArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PasteboardNativeStorageArchive));
  MasterChangeBlobArchive_descriptor_ = file->message_type(22);
  static const int MasterChangeBlobArchive_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterChangeBlobArchive, slide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterChangeBlobArchive, master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterChangeBlobArchive, slide_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterChangeBlobArchive, title_placeholder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterChangeBlobArchive, body_placeholder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterChangeBlobArchive, object_placeholder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterChangeBlobArchive, drawables_),
  };
  MasterChangeBlobArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MasterChangeBlobArchive_descriptor_,
      MasterChangeBlobArchive::default_instance_,
      MasterChangeBlobArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterChangeBlobArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterChangeBlobArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MasterChangeBlobArchive));
  RecordingArchive_descriptor_ = file->message_type(23);
  static const int RecordingArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingArchive, event_tracks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingArchive, movie_track_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingArchive, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingArchive, sync_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingArchive, modification_date_),
  };
  RecordingArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordingArchive_descriptor_,
      RecordingArchive::default_instance_,
      RecordingArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordingArchive));
  RecordingArchive_RecordingSyncState_descriptor_ = RecordingArchive_descriptor_->enum_type(0);
  RecordingEventTrackArchive_descriptor_ = file->message_type(24);
  static const int RecordingEventTrackArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingEventTrackArchive, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingEventTrackArchive, events_),
  };
  RecordingEventTrackArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordingEventTrackArchive_descriptor_,
      RecordingEventTrackArchive::default_instance_,
      RecordingEventTrackArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingEventTrackArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingEventTrackArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordingEventTrackArchive));
  RecordingEventArchive_descriptor_ = file->message_type(25);
  static const int RecordingEventArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingEventArchive, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingEventArchive, navigation_event_archive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingEventArchive, laser_event_archive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingEventArchive, pause_event_archive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingEventArchive, movie_event_archive_),
  };
  RecordingEventArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordingEventArchive_descriptor_,
      RecordingEventArchive::default_instance_,
      RecordingEventArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingEventArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingEventArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordingEventArchive));
  RecordingNavigationEventArchive_descriptor_ = file->message_type(26);
  static const int RecordingNavigationEventArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingNavigationEventArchive, target_slide_node_reference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingNavigationEventArchive, target_event_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingNavigationEventArchive, animation_phase_),
  };
  RecordingNavigationEventArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordingNavigationEventArchive_descriptor_,
      RecordingNavigationEventArchive::default_instance_,
      RecordingNavigationEventArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingNavigationEventArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingNavigationEventArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordingNavigationEventArchive));
  RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_descriptor_ = RecordingNavigationEventArchive_descriptor_->enum_type(0);
  RecordingLaserEventArchive_descriptor_ = file->message_type(27);
  static const int RecordingLaserEventArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingLaserEventArchive, unscaled_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingLaserEventArchive, unit_location_),
  };
  RecordingLaserEventArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordingLaserEventArchive_descriptor_,
      RecordingLaserEventArchive::default_instance_,
      RecordingLaserEventArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingLaserEventArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingLaserEventArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordingLaserEventArchive));
  RecordingPauseEventArchive_descriptor_ = file->message_type(28);
  static const int RecordingPauseEventArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingPauseEventArchive, pause_event_type_),
  };
  RecordingPauseEventArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordingPauseEventArchive_descriptor_,
      RecordingPauseEventArchive::default_instance_,
      RecordingPauseEventArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingPauseEventArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingPauseEventArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordingPauseEventArchive));
  RecordingPauseEventArchive_RecordingPauseEventType_descriptor_ = RecordingPauseEventArchive_descriptor_->enum_type(0);
  RecordingMovieEventArchive_descriptor_ = file->message_type(29);
  static const int RecordingMovieEventArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingMovieEventArchive, movie_info_reference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingMovieEventArchive, movie_event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingMovieEventArchive, movie_event_value_),
  };
  RecordingMovieEventArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordingMovieEventArchive_descriptor_,
      RecordingMovieEventArchive::default_instance_,
      RecordingMovieEventArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingMovieEventArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingMovieEventArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordingMovieEventArchive));
  RecordingMovieEventArchive_RecordingMovieEventType_descriptor_ = RecordingMovieEventArchive_descriptor_->enum_type(0);
  RecordingMovieTrackArchive_descriptor_ = file->message_type(30);
  static const int RecordingMovieTrackArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingMovieTrackArchive, movie_segments_),
  };
  RecordingMovieTrackArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordingMovieTrackArchive_descriptor_,
      RecordingMovieTrackArchive::default_instance_,
      RecordingMovieTrackArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingMovieTrackArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordingMovieTrackArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordingMovieTrackArchive));
  MovieSegmentArchive_descriptor_ = file->message_type(31);
  static const int MovieSegmentArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieSegmentArchive, movie_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieSegmentArchive, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieSegmentArchive, database_movie_data_),
  };
  MovieSegmentArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MovieSegmentArchive_descriptor_,
      MovieSegmentArchive::default_instance_,
      MovieSegmentArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieSegmentArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieSegmentArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MovieSegmentArchive));
  Soundtrack_descriptor_ = file->message_type(32);
  static const int Soundtrack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soundtrack, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soundtrack, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soundtrack, movie_media_),
  };
  Soundtrack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Soundtrack_descriptor_,
      Soundtrack::default_instance_,
      Soundtrack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soundtrack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soundtrack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Soundtrack));
  Soundtrack_SoundtrackMode_descriptor_ = Soundtrack_descriptor_->enum_type(0);
  SlideNumberAttachmentArchive_descriptor_ = file->message_type(33);
  static const int SlideNumberAttachmentArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideNumberAttachmentArchive, super_),
  };
  SlideNumberAttachmentArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlideNumberAttachmentArchive_descriptor_,
      SlideNumberAttachmentArchive::default_instance_,
      SlideNumberAttachmentArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideNumberAttachmentArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideNumberAttachmentArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlideNumberAttachmentArchive));
  SlideCollectionSelectionArchive_descriptor_ = file->message_type(34);
  static const int SlideCollectionSelectionArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideCollectionSelectionArchive, slide_nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideCollectionSelectionArchive, slide_node_to_edit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideCollectionSelectionArchive, selected_paragraph_indexes_for_slide_nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideCollectionSelectionArchive, range_in_selected_paragraph_),
  };
  SlideCollectionSelectionArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlideCollectionSelectionArchive_descriptor_,
      SlideCollectionSelectionArchive::default_instance_,
      SlideCollectionSelectionArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideCollectionSelectionArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideCollectionSelectionArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlideCollectionSelectionArchive));
  SlideCollectionSelectionArchive_OutlineSelection_descriptor_ = SlideCollectionSelectionArchive_descriptor_->nested_type(0);
  static const int SlideCollectionSelectionArchive_OutlineSelection_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideCollectionSelectionArchive_OutlineSelection, slide_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideCollectionSelectionArchive_OutlineSelection, selected_paragraph_indexes_),
  };
  SlideCollectionSelectionArchive_OutlineSelection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlideCollectionSelectionArchive_OutlineSelection_descriptor_,
      SlideCollectionSelectionArchive_OutlineSelection::default_instance_,
      SlideCollectionSelectionArchive_OutlineSelection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideCollectionSelectionArchive_OutlineSelection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlideCollectionSelectionArchive_OutlineSelection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlideCollectionSelectionArchive_OutlineSelection));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_KNArchives_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnimationAttributesArchive_descriptor_, &AnimationAttributesArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransitionAttributesArchive_descriptor_, &TransitionAttributesArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransitionArchive_descriptor_, &TransitionArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildChunkArchive_descriptor_, &BuildChunkArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildAttributesArchive_descriptor_, &BuildAttributesArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildArchive_descriptor_, &BuildArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlaceholderArchive_descriptor_, &PlaceholderArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NoteArchive_descriptor_, &NoteArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClassicStylesheetRecordArchive_descriptor_, &ClassicStylesheetRecordArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClassicThemeRecordArchive_descriptor_, &ClassicThemeRecordArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlideArchive_descriptor_, &SlideArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlideArchive_SageTagMapEntry_descriptor_, &SlideArchive_SageTagMapEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlideNodeArchive_descriptor_, &SlideNodeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DesktopUILayoutArchive_descriptor_, &DesktopUILayoutArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UIStateArchive_descriptor_, &UIStateArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CanvasSelectionArchive_descriptor_, &CanvasSelectionArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThemeArchive_descriptor_, &ThemeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlideTreeArchive_descriptor_, &SlideTreeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShowArchive_descriptor_, &ShowArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentArchive_descriptor_, &DocumentArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlideStylePropertiesArchive_descriptor_, &SlideStylePropertiesArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlideStyleArchive_descriptor_, &SlideStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PasteboardNativeStorageArchive_descriptor_, &PasteboardNativeStorageArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MasterChangeBlobArchive_descriptor_, &MasterChangeBlobArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordingArchive_descriptor_, &RecordingArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordingEventTrackArchive_descriptor_, &RecordingEventTrackArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordingEventArchive_descriptor_, &RecordingEventArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordingNavigationEventArchive_descriptor_, &RecordingNavigationEventArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordingLaserEventArchive_descriptor_, &RecordingLaserEventArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordingPauseEventArchive_descriptor_, &RecordingPauseEventArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordingMovieEventArchive_descriptor_, &RecordingMovieEventArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordingMovieTrackArchive_descriptor_, &RecordingMovieTrackArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MovieSegmentArchive_descriptor_, &MovieSegmentArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Soundtrack_descriptor_, &Soundtrack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlideNumberAttachmentArchive_descriptor_, &SlideNumberAttachmentArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlideCollectionSelectionArchive_descriptor_, &SlideCollectionSelectionArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlideCollectionSelectionArchive_OutlineSelection_descriptor_, &SlideCollectionSelectionArchive_OutlineSelection::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_KNArchives_2eproto() {
  delete AnimationAttributesArchive::default_instance_;
  delete AnimationAttributesArchive_reflection_;
  delete TransitionAttributesArchive::default_instance_;
  delete TransitionAttributesArchive_reflection_;
  delete TransitionArchive::default_instance_;
  delete TransitionArchive_reflection_;
  delete BuildChunkArchive::default_instance_;
  delete BuildChunkArchive_reflection_;
  delete BuildAttributesArchive::default_instance_;
  delete BuildAttributesArchive_reflection_;
  delete BuildArchive::default_instance_;
  delete BuildArchive_reflection_;
  delete PlaceholderArchive::default_instance_;
  delete PlaceholderArchive_reflection_;
  delete NoteArchive::default_instance_;
  delete NoteArchive_reflection_;
  delete ClassicStylesheetRecordArchive::default_instance_;
  delete ClassicStylesheetRecordArchive_reflection_;
  delete ClassicThemeRecordArchive::default_instance_;
  delete ClassicThemeRecordArchive_reflection_;
  delete SlideArchive::default_instance_;
  delete SlideArchive_reflection_;
  delete SlideArchive_SageTagMapEntry::default_instance_;
  delete SlideArchive_SageTagMapEntry_reflection_;
  delete SlideNodeArchive::default_instance_;
  delete SlideNodeArchive_reflection_;
  delete DesktopUILayoutArchive::default_instance_;
  delete DesktopUILayoutArchive_reflection_;
  delete UIStateArchive::default_instance_;
  delete UIStateArchive_reflection_;
  delete CanvasSelectionArchive::default_instance_;
  delete CanvasSelectionArchive_reflection_;
  delete ThemeArchive::default_instance_;
  delete ThemeArchive_reflection_;
  delete SlideTreeArchive::default_instance_;
  delete SlideTreeArchive_reflection_;
  delete ShowArchive::default_instance_;
  delete ShowArchive_reflection_;
  delete DocumentArchive::default_instance_;
  delete DocumentArchive_reflection_;
  delete SlideStylePropertiesArchive::default_instance_;
  delete SlideStylePropertiesArchive_reflection_;
  delete SlideStyleArchive::default_instance_;
  delete SlideStyleArchive_reflection_;
  delete PasteboardNativeStorageArchive::default_instance_;
  delete PasteboardNativeStorageArchive_reflection_;
  delete MasterChangeBlobArchive::default_instance_;
  delete MasterChangeBlobArchive_reflection_;
  delete RecordingArchive::default_instance_;
  delete RecordingArchive_reflection_;
  delete RecordingEventTrackArchive::default_instance_;
  delete RecordingEventTrackArchive_reflection_;
  delete RecordingEventArchive::default_instance_;
  delete RecordingEventArchive_reflection_;
  delete RecordingNavigationEventArchive::default_instance_;
  delete RecordingNavigationEventArchive_reflection_;
  delete RecordingLaserEventArchive::default_instance_;
  delete RecordingLaserEventArchive_reflection_;
  delete RecordingPauseEventArchive::default_instance_;
  delete RecordingPauseEventArchive_reflection_;
  delete RecordingMovieEventArchive::default_instance_;
  delete RecordingMovieEventArchive_reflection_;
  delete RecordingMovieTrackArchive::default_instance_;
  delete RecordingMovieTrackArchive_reflection_;
  delete MovieSegmentArchive::default_instance_;
  delete MovieSegmentArchive_reflection_;
  delete Soundtrack::default_instance_;
  delete Soundtrack_reflection_;
  delete SlideNumberAttachmentArchive::default_instance_;
  delete SlideNumberAttachmentArchive_reflection_;
  delete SlideCollectionSelectionArchive::default_instance_;
  delete SlideCollectionSelectionArchive_reflection_;
  delete SlideCollectionSelectionArchive_OutlineSelection::default_instance_;
  delete SlideCollectionSelectionArchive_OutlineSelection_reflection_;
}

void protobuf_AddDesc_KNArchives_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::TSP::protobuf_AddDesc_TSPMessages_2eproto();
  ::TSK::protobuf_AddDesc_TSKArchives_2eproto();
  ::TSS::protobuf_AddDesc_TSSArchives_2eproto();
  ::TSD::protobuf_AddDesc_TSDArchives_2eproto();
  ::TSWP::protobuf_AddDesc_TSWPArchives_2eproto();
  ::TSA::protobuf_AddDesc_TSAArchives_2eproto();
  ::TSCH::protobuf_AddDesc_TSCHArchives_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020KNArchives.proto\022\002KN\032\021TSPMessages.prot"
    "o\032\021TSKArchives.proto\032\021TSSArchives.proto\032"
    "\021TSDArchives.proto\032\022TSWPArchives.proto\032\021"
    "TSAArchives.proto\032\022TSCHArchives.proto\"\247\001"
    "\n\032AnimationAttributesArchive\022\025\n\ranimatio"
    "nType\030\001 \001(\t\022\016\n\006effect\030\002 \001(\t\022\020\n\010duration\030"
    "\003 \001(\001\022\021\n\tdirection\030\004 \001(\r\022\r\n\005delay\030\005 \001(\001\022"
    "\023\n\013isAutomatic\030\006 \001(\010\022\031\n\005color\030\007 \001(\0132\n.TS"
    "P.Color\"\325\t\n\033TransitionAttributesArchive\022"
    ";\n\023animationAttributes\030\010 \001(\0132\036.KN.Animat"
    "ionAttributesArchive\022\023\n\013isAutomatic\030\006 \001("
    "\010\022\024\n\014custom_twist\030\t \001(\002\022\032\n\022custom_mosaic"
    "_size\030\n \001(\r\022\032\n\022custom_mosaic_type\030\013 \001(\r\022"
    "\025\n\rcustom_bounce\030\014 \001(\010\0220\n(custom_magic_m"
    "ove_fade_unmatched_objects\030\r \001(\010\022f\n\023cust"
    "om_timing_curve\030\017 \001(\0162I.KN.TransitionAtt"
    "ributesArchive.TransitionCustomAttribute"
    "sTimingCurveType\022m\n\031custom_text_delivery"
    "_type\030\020 \001(\0162J.KN.TransitionAttributesArc"
    "hive.TransitionCustomAttributesTextDeliv"
    "eryType\022\032\n\022custom_motion_blur\030\021 \001(\010\022\"\n\026d"
    "atabase_animationType\030\001 \001(\tB\002\030\001\022\033\n\017datab"
    "ase_effect\030\002 \001(\tB\002\030\001\022\035\n\021database_duratio"
    "n\030\003 \001(\001B\002\030\001\022\036\n\022database_direction\030\004 \001(\rB"
    "\002\030\001\022\032\n\016database_delay\030\005 \001(\002B\002\030\001\022&\n\016datab"
    "ase_color\030\007 \001(\0132\n.TSP.ColorB\002\030\001\"\207\002\n)Tran"
    "sitionCustomAttributesTimingCurveType\0223\n"
    "/TransitionCustomAttributesTimingCurveTy"
    "peLinear\020\001\0223\n/TransitionCustomAttributes"
    "TimingCurveTypeEaseIn\020\002\0224\n0TransitionCus"
    "tomAttributesTimingCurveTypeEaseOut\020\003\022:\n"
    "6TransitionCustomAttributesTimingCurveTy"
    "peEaseInEaseOut\020\004\"\213\002\n*TransitionCustomAt"
    "tributesTextDeliveryType\0226\n2TransitionCu"
    "stomAttributesTextDeliveryTypeByObject\020\001"
    "\0224\n0TransitionCustomAttributesTextDelive"
    "ryTypeByWord\020\002\0229\n5TransitionCustomAttrib"
    "utesTextDeliveryTypeByCharacter\020\003\0224\n0Tra"
    "nsitionCustomAttributesTextDeliveryTypeB"
    "yLine\020\004\"H\n\021TransitionArchive\0223\n\nattribut"
    "es\030\002 \002(\0132\037.KN.TransitionAttributesArchiv"
    "e\"\207\001\n\021BuildChunkArchive\022\035\n\005build\030\001 \002(\0132\016"
    ".TSP.Reference\022\r\n\005index\030\002 \002(\r\022\r\n\005delay\030\003"
    " \001(\001\022\020\n\010duration\030\004 \001(\001\022\021\n\tautomatic\030\005 \001("
    "\010\022\020\n\010referent\030\006 \001(\010\"\311\017\n\026BuildAttributesA"
    "rchive\022;\n\023animationAttributes\030\022 \001(\0132\036.KN"
    ".AnimationAttributesArchive\022\024\n\014eventTrig"
    "ger\030\004 \001(\r\022\037\n\023delayAutomaticAfter\030\006 \001(\001B\002"
    "\030\001\022\036\n\022delayAutomaticWith\030\007 \001(\001B\002\030\001\022H\n\ncu"
    "rveStyle\030\016 \001(\01624.KN.BuildAttributesArchi"
    "ve.BuildAttributesCurveStyle\022\027\n\017ChartRot"
    "ation3D\030\021 \001(\001\022\023\n\013startOffset\030\033 \001(\r\022\021\n\ten"
    "dOffset\030\034 \001(\r\022\034\n\024action_rotationAngle\030\t "
    "\001(\001\022]\n\030action_rotationDirection\030\n \001(\0162;."
    "KN.BuildAttributesArchive.BuildAttribute"
    "sRotationDirection\022\030\n\020action_scaleSize\030\013"
    " \001(\001\022\031\n\021action_colorAlpha\030\014 \001(\001\022S\n\023actio"
    "n_acceleration\030\r \001(\01626.KN.BuildAttribute"
    "sArchive.BuildAttributesAcceleration\0227\n\027"
    "action_motionPathSource\030\026 \001(\0132\026.TSD.Path"
    "SourceArchive\022\025\n\rcustom_bounce\030\023 \001(\010\022S\n\023"
    "custom_textDelivery\030\024 \001(\01626.KN.BuildAttr"
    "ibutesArchive.BuildAttributesTextDeliver"
    "y\022W\n\025custom_deliveryOption\030\025 \001(\01628.KN.Bu"
    "ildAttributesArchive.BuildAttributesDeli"
    "veryOption\022\033\n\023custom_action_decay\030\027 \001(\010\022"
    "!\n\031custom_action_repeatCount\030\030 \001(\r\022\033\n\023cu"
    "stom_action_scale\030\031 \001(\001\022f\n\035custom_action"
    "_jiggleIntensity\030\032 \001(\0162\?.KN.BuildAttribu"
    "tesArchive.ActionBuildAttributesJiggleIn"
    "tensity\022\032\n\022custom_motion_blur\030\035 \001(\010\022\"\n\026d"
    "atabase_animationType\030\001 \001(\tB\002\030\001\022\033\n\017datab"
    "ase_effect\030\002 \001(\tB\002\030\001\022\036\n\022database_directi"
    "on\030\003 \001(\rB\002\030\001\022\032\n\016database_delay\030\005 \001(\001B\002\030\001"
    "\022\035\n\021database_duration\030\010 \001(\001B\002\030\001\022&\n\016datab"
    "ase_color\030\020 \001(\0132\n.TSP.ColorB\002\030\001\022\034\n\020motio"
    "nPathString\030\017 \001(\tB\002\030\001\"R\n\033BuildAttributes"
    "Acceleration\022\t\n\005kNone\020\000\022\013\n\007kEaseIn\020\001\022\014\n\010"
    "kEaseOut\020\002\022\r\n\tkEaseBoth\020\003\"I\n BuildAttrib"
    "utesRotationDirection\022\016\n\nkClockwise\020\037\022\025\n"
    "\021kCounterclockwise\020 \"7\n\031BuildAttributesC"
    "urveStyle\022\r\n\tkStraight\020\000\022\013\n\007kCurved\020\001\"\244\001"
    "\n\033BuildAttributesTextDelivery\022\032\n\026kTextDe"
    "liveryUndefined\020\000\022\031\n\025kTextDeliveryByObje"
    "ct\020\001\022\027\n\023kTextDeliveryByWord\020\002\022\034\n\030kTextDe"
    "liveryByCharacter\020\003\022\027\n\023kTextDeliveryByLi"
    "ne\020\004\"\316\001\n\035BuildAttributesDeliveryOption\022\034"
    "\n\030kDeliveryOptionUndefined\020\000\022\032\n\026kDeliver"
    "yOptionForward\020\001\022\033\n\027kDeliveryOptionBackw"
    "ard\020\002\022\035\n\031kDeliveryOptionFromCenter\020\003\022\034\n\030"
    "kDeliveryOptionFromEdges\020\004\022\031\n\025kDeliveryO"
    "ptionRandom\020\005\"x\n$ActionBuildAttributesJi"
    "ggleIntensity\022\031\n\025kJiggleIntensitySmall\020\000"
    "\022\032\n\026kJiggleIntensityMedium\020\001\022\031\n\025kJiggleI"
    "ntensityLarge\020\002\"\204\001\n\014BuildArchive\022 \n\010draw"
    "able\030\001 \002(\0132\016.TSP.Reference\022\020\n\010delivery\030\002"
    " \002(\t\022\020\n\010duration\030\003 \002(\001\022.\n\nattributes\030\004 \002"
    "(\0132\032.KN.BuildAttributesArchive\"\211\002\n\022Place"
    "holderArchive\022%\n\005super\030\001 \002(\0132\026.TSWP.Shap"
    "eInfoArchive\022;\n\004kind\030\002 \001(\0162\033.KN.Placehol"
    "derArchive.Kind:\020kKindPlaceholder\"\216\001\n\004Ki"
    "nd\022\024\n\020kKindPlaceholder\020\000\022\037\n\033kKindSlideNu"
    "mberPlaceholder\020\001\022\031\n\025kKindTitlePlacehold"
    "er\020\002\022\030\n\024kKindBodyPlaceholder\020\003\022\032\n\026kKindO"
    "bjectPlaceholder\020\004\"7\n\013NoteArchive\022(\n\020con"
    "tainedStorage\030\001 \002(\0132\016.TSP.Reference\"\215\001\n\036"
    "ClassicStylesheetRecordArchive\022L\n\027identi"
    "fier_to_style_map\030\001 \003(\0132+.TSS.Stylesheet"
    "Archive.IdentifiedStyleEntry\022\035\n\005theme\030\002 "
    "\001(\0132\016.TSP.Reference\"t\n\031ClassicThemeRecor"
    "dArchive\022\014\n\004uuid\030\001 \001(\t\022(\n\020stylesheetReco"
    "rd\030\002 \001(\0132\016.TSP.Reference\022\037\n\007masters\030\003 \003("
    "\0132\016.TSP.Reference\"\242\016\n\014SlideArchive\022\035\n\005st"
    "yle\030\001 \002(\0132\016.TSP.Reference\022\036\n\006builds\030\002 \003("
    "\0132\016.TSP.Reference\022*\n\013buildChunks\030\003 \003(\0132\025"
    ".KN.BuildChunkArchive\022)\n\ntransition\030\004 \002("
    "\0132\025.KN.TransitionArchive\022(\n\020titlePlaceho"
    "lder\030\005 \001(\0132\016.TSP.Reference\022\'\n\017bodyPlaceh"
    "older\030\006 \001(\0132\016.TSP.Reference\022)\n\021objectPla"
    "ceholder\030\036 \001(\0132\016.TSP.Reference\022.\n\026slideN"
    "umberPlaceholder\030\024 \001(\0132\016.TSP.Reference\022\'"
    "\n\017owned_drawables\030\007 \003(\0132\016.TSP.Reference\022"
    ")\n\021drawables_z_order\030* \003(\0132\016.TSP.Referen"
    "ce\022>\n\024sage_tag_to_info_map\030\034 \003(\0132 .KN.Sl"
    "ideArchive.SageTagMapEntry\022\014\n\004name\030\n \001(\t"
    "\0226\n\030titlePlaceholderGeometry\030\013 \001(\0132\024.TSD"
    ".GeometryArchive\022\'\n\037titlePlaceholderShap"
    "eStyleIndex\030\014 \001(\r\022&\n\036titlePlaceholderTex"
    "tStyleIndex\030\r \001(\r\022@\n\025titleLayoutProperti"
    "es\030\030 \001(\0132!.TSWP.ShapeStylePropertiesArch"
    "ive\0225\n\027bodyPlaceholderGeometry\030\016 \001(\0132\024.T"
    "SD.GeometryArchive\022&\n\036bodyPlaceholderSha"
    "peStyleIndex\030\017 \001(\r\022%\n\035bodyPlaceholderTex"
    "tStyleIndex\030\020 \001(\r\022\?\n\024bodyLayoutPropertie"
    "s\030\031 \001(\0132!.TSWP.ShapeStylePropertiesArchi"
    "ve\022<\n\036slideNumberPlaceholderGeometry\030\025 \001"
    "(\0132\024.TSD.GeometryArchive\022-\n%slideNumberP"
    "laceholderShapeStyleIndex\030\026 \001(\r\022,\n$slide"
    "NumberPlaceholderTextStyleIndex\030\027 \001(\r\022F\n"
    "\033slideNumberLayoutProperties\030\032 \001(\0132!.TSW"
    "P.ShapeStylePropertiesArchive\022/\n\027classic"
    "StylesheetRecord\030\035 \001(\0132\016.TSP.Reference\022+"
    "\n\023bodyParagraphStyles\030\037 \003(\0132\016.TSP.Refere"
    "nce\022&\n\016bodyListStyles\030# \003(\0132\016.TSP.Refere"
    "nce\022(\n thumbnailTextForTitlePlaceholder\030"
    "% \001(\t\022\'\n\037thumbnailTextForBodyPlaceholder"
    "\030& \001(\t\022*\n\033slideObjectsLayerWithMaster\030) "
    "\001(\010:\005false\022\036\n\006master\030\021 \001(\0132\016.TSP.Referen"
    "ce\022\'\n\014staticGuides\030\022 \003(\0132\021.TSD.GuideArch"
    "ive\022/\n\027userDefinedGuideStorage\030$ \001(\0132\016.T"
    "SP.Reference\022\022\n\ninDocument\030\023 \002(\010\022\034\n\004note"
    "\030\033 \001(\0132\016.TSP.Reference\022>\n&info_using_obj"
    "ect_placeholder_geometry\030\' \001(\0132\016.TSP.Ref"
    "erence\022R\nJinfo_using_object_placeholder_"
    "geometry_matches_object_placeholder_geom"
    "etry\030( \001(\010\0224\n,deprecated_objectPlacehold"
    "erVisibleForExport\030\" \001(\010\032<\n\017SageTagMapEn"
    "try\022\013\n\003tag\030\001 \002(\t\022\034\n\004info\030\002 \002(\0132\016.TSP.Ref"
    "erence\"\363\004\n\020SlideNodeArchive\022 \n\010children\030"
    "\001 \003(\0132\016.TSP.Reference\022\035\n\005slide\030\002 \001(\0132\016.T"
    "SP.Reference\022&\n\nthumbnails\030\020 \003(\0132\022.TSP.D"
    "ataReference\022!\n\016thumbnailSizes\030\n \003(\0132\t.T"
    "SP.Size\022\032\n\022thumbnailsAreDirty\030\016 \001(\010\022\020\n\010i"
    "sHidden\030\004 \002(\010\022\027\n\013isCollapsed\030\005 \002(\010B\002\030\001\022 "
    "\n\030isCollapsedInOutlineView\030\021 \001(\010\022\034\n\024hasB"
    "odyInOutlineView\030\023 \001(\010\022\025\n\thasBuilds\030\006 \002("
    "\010B\002\030\001\022\025\n\rhasTransition\030\007 \002(\010\022\017\n\007hasNote\030"
    "\010 \001(\010\022#\n\024isSlideNumberVisible\030\022 \001(\010:\005fal"
    "se\022\030\n\020uniqueIdentifier\030\013 \001(\t\022\037\n\027copyFrom"
    "SlideIdentifier\030\014 \001(\t\022#\n\033slideSpecificHy"
    "perlinkCount\030\r \001(\r\022\022\n\neventCount\030\017 \001(\r\022\033"
    "\n\023has_explicit_builds\030\024 \001(\010\022*\n\022database_"
    "thumbnail\030\003 \001(\0132\016.TSP.Reference\022+\n\023datab"
    "ase_thumbnails\030\t \003(\0132\016.TSP.Reference\"\222\004\n"
    "\026DesktopUILayoutArchive\022\027\n\017sidebar_visib"
    "le\030\001 \001(\010\022E\n\021sidebar_view_mode\030\002 \001(\0162*.KN"
    ".DesktopUILayoutArchive.SidebarViewMode\022"
    "\025\n\rnotes_visible\030\003 \001(\010\022\033\n\023light_table_vi"
    "sible\030\005 \001(\010\022$\n\026inspector_pane_visible\030\006 "
    "\001(\010:\004true\022p\n\030inspector_pane_view_mode\030\007 "
    "\001(\01620.KN.DesktopUILayoutArchive.Inspecto"
    "rPaneViewMode:\034kInspectorPaneViewModeFor"
    "mat\"M\n\017SidebarViewMode\022\035\n\031kSidebarViewMo"
    "deNavigator\020\000\022\033\n\027kSidebarViewModeOutline"
    "\020\001\"}\n\025InspectorPaneViewMode\022 \n\034kInspecto"
    "rPaneViewModeFormat\020\000\022!\n\035kInspectorPaneV"
    "iewModeAnimate\020\001\022\037\n\033kInspectorPaneViewMo"
    "deSetup\020\002\"\250\010\n\016UIStateArchive\022\'\n\017slideNod"
    "eToEdit\030\001 \001(\0132\016.TSP.Reference\0229\n!depreca"
    "ted_masterSlideNodeToApply\030\002 \001(\0132\016.TSP.R"
    "eference\0220\n\035deprecated_slideThumbnailSiz"
    "e\030\003 \001(\0132\t.TSP.Size\022\027\n\017canvasViewScale\030\004 "
    "\001(\002\022 \n\014canvasOffset\030\005 \001(\0132\n.TSP.Point\022*\n"
    "\022selectedSlideNodes\030\006 \003(\0132\016.TSP.Referenc"
    "e\022\035\n\025iPhoneCanvasViewScale\030\007 \001(\002\022&\n\022iPho"
    "neCanvasOffset\030\010 \001(\0132\n.TSP.Point\022 \n\030iPho"
    "ne568CanvasViewScale\030\t \001(\002\022)\n\025iPhone568C"
    "anvasOffset\030\n \001(\0132\n.TSP.Point\022)\n\021desktop"
    "_ui_layout\030\013 \001(\0132\016.TSP.Reference\022.\n&desk"
    "top_slide_view_content_fits_window\030\014 \001(\010"
    "\022!\n\031desktop_canvas_view_scale\030\r \001(\002\022)\n\025d"
    "esktop_canvas_offset\030\025 \001(\0132\n.TSP.Point\022\036"
    "\n\026light_table_zoom_scale\030\016 \001(\002\022*\n\016chart_"
    "ui_state\030\017 \003(\0132\022.TSCH.ChartUIState\022\031\n\021sh"
    "ow_slide_guides\030\020 \001(\010\022\032\n\022show_master_gui"
    "des\030\021 \001(\010\022\026\n\016shows_comments\030\022 \001(\010\022-\n\025col"
    "lapsed_slide_nodes\030\023 \003(\0132\016.TSP.Reference"
    "\022\023\n\013shows_ruler\030\024 \001(\010\022$\n\034desktop_navigat"
    "or_view_width\030\026 \001(\002\022\"\n\032desktop_outline_v"
    "iew_width\030\027 \001(\002\022,\n\031desktop_main_content_"
    "size\030\030 \001(\0132\t.TSP.Size\022+\n#desktop_present"
    "er_notes_view_height\030\031 \001(\002\022.\n\032desktop_ma"
    "in_window_origin\030\032 \001(\0132\n.TSP.Point\022(\n li"
    "ght_table_hides_skipped_slides\030\033 \001(\010\"\217\001\n"
    "\026CanvasSelectionArchive\022\035\n\005infos\030\001 \003(\0132\016"
    ".TSP.Reference\022+\n\024action_ghost_indexes\030\003"
    " \003(\0132\r.TSP.IndexSet\022)\n\035database_action_g"
    "host_indexes\030\002 \003(\rB\002\030\001\"\256\002\n\014ThemeArchive\022"
    " \n\005super\030\001 \002(\0132\021.TSS.ThemeArchive\022\037\n\007mas"
    "ters\030\002 \003(\0132\016.TSP.Reference\022\014\n\004uuid\030\003 \001(\t"
    "\022+\n\023classicThemeRecords\030\004 \003(\0132\016.TSP.Refe"
    "rence\022.\n\026defaultMasterSlideNode\030\005 \001(\0132\016."
    "TSP.Reference\022;\n#default_master_slide_no"
    "de_reference\030\006 \001(\0132\016.TSP.Reference\0223\n+de"
    "fault_master_slide_node_is_our_best_gues"
    "s\030\007 \001(\010\"9\n\020SlideTreeArchive\022%\n\rrootSlide"
    "Node\030\001 \001(\0132\016.TSP.Reference\"\364\004\n\013ShowArchi"
    "ve\022\037\n\007uiState\030\001 \001(\0132\016.TSP.Reference\022\035\n\005t"
    "heme\030\002 \002(\0132\016.TSP.Reference\022\'\n\tslideTree\030"
    "\003 \002(\0132\024.KN.SlideTreeArchive\022\027\n\004size\030\004 \002("
    "\0132\t.TSP.Size\022\"\n\nstylesheet\030\005 \002(\0132\016.TSP.R"
    "eference\022\033\n\023slideNumbersVisible\030\006 \001(\010\022!\n"
    "\trecording\030\007 \001(\0132\016.TSP.Reference\022\031\n\021loop"
    "_presentation\030\010 \001(\010\022;\n\004mode\030\t \001(\0162\032.KN.S"
    "howArchive.KNShowMode:\021kKNShowModeNormal"
    "\022$\n\031autoplay_transition_delay\030\n \001(\001:\0015\022\037"
    "\n\024autoplay_build_delay\030\013 \001(\001:\0012\022\031\n\021idle_"
    "timer_active\030\017 \001(\010\022\035\n\020idle_timer_delay\030\020"
    " \001(\001:\003900\022\"\n\nsoundtrack\030\021 \001(\0132\016.TSP.Refe"
    "rence\022%\n\035automatically_plays_upon_open\030\022"
    " \001(\010\"[\n\nKNShowMode\022\025\n\021kKNShowModeNormal\020"
    "\000\022\027\n\023kKNShowModeAutoPlay\020\001\022\035\n\031kKNShowMod"
    "eHyperlinksOnly\020\002\"\207\001\n\017DocumentArchive\022#\n"
    "\005super\030\003 \002(\0132\024.TSA.DocumentArchive\022\034\n\004sh"
    "ow\030\002 \002(\0132\016.TSP.Reference\0221\n\031tables_custo"
    "m_format_list\030\004 \001(\0132\016.TSP.Reference\"\241\002\n\033"
    "SlideStylePropertiesArchive\022\036\n\004fill\030\001 \001("
    "\0132\020.TSD.FillArchive\0223\n\ntransition\030\002 \001(\0132"
    "\037.KN.TransitionAttributesArchive\022\027\n\017tran"
    "sition_null\030\003 \001(\010\022\"\n\032titlePlaceholderVis"
    "ibility\030\004 \001(\010\022!\n\031bodyPlaceholderVisibili"
    "ty\030\005 \001(\010\022#\n\033objectPlaceholderVisibility\030"
    "\007 \001(\010\022(\n slideNumberPlaceholderVisibilit"
    "y\030\006 \001(\010\"\213\001\n\021SlideStyleArchive\022 \n\005super\030\001"
    " \002(\0132\021.TSS.StyleArchive\022\031\n\016override_coun"
    "t\030\n \001(\r:\0010\0229\n\020slide_properties\030\013 \001(\0132\037.K"
    "N.SlideStylePropertiesArchive\"\373\002\n\036Pasteb"
    "oardNativeStorageArchive\022!\n\tdrawables\030\001 "
    "\003(\0132\016.TSP.Reference\022\036\n\006builds\030\002 \003(\0132\016.TS"
    "P.Reference\022*\n\013buildChunks\030\003 \003(\0132\025.KN.Bu"
    "ildChunkArchive\022\"\n\nslideNodes\030\004 \003(\0132\016.TS"
    "P.Reference\022(\n\020masterSlideNodes\030\t \003(\0132\016."
    "TSP.Reference\022#\n\020originalShowSize\030\005 \001(\0132"
    "\t.TSP.Size\022\037\n\013titleRanges\030\006 \003(\0132\n.TSP.Ra"
    "nge\0220\n\022geometries_in_root\030\007 \003(\0132\024.TSD.Ge"
    "ometryArchive\022$\n\034slide_node_unique_ident"
    "ifier\030\010 \001(\t\"\241\002\n\027MasterChangeBlobArchive\022"
    "\035\n\005slide\030\001 \001(\0132\016.TSP.Reference\022\036\n\006master"
    "\030\002 \001(\0132\016.TSP.Reference\022#\n\013slide_style\030\003 "
    "\001(\0132\016.TSP.Reference\022)\n\021title_placeholder"
    "\030\004 \001(\0132\016.TSP.Reference\022(\n\020body_placehold"
    "er\030\005 \001(\0132\016.TSP.Reference\022*\n\022object_place"
    "holder\030\007 \001(\0132\016.TSP.Reference\022!\n\tdrawable"
    "s\030\006 \003(\0132\016.TSP.Reference\"\334\002\n\020RecordingArc"
    "hive\022$\n\014event_tracks\030\001 \003(\0132\016.TSP.Referen"
    "ce\022#\n\013movie_track\030\002 \001(\0132\016.TSP.Reference\022"
    "\020\n\010duration\030\003 \001(\001\022^\n\nsync_state\030\004 \001(\0162\'."
    "KN.RecordingArchive.RecordingSyncState:!"
    "kRecordingSyncStateInSyncWithShow\022$\n\021mod"
    "ification_date\030\005 \001(\0132\t.TSP.Date\"e\n\022Recor"
    "dingSyncState\022%\n!kRecordingSyncStateInSy"
    "ncWithShow\020\000\022(\n$kRecordingSyncStateOutOf"
    "SyncWithShow\020\001\"U\n\032RecordingEventTrackArc"
    "hive\022\014\n\004type\030\001 \001(\t\022)\n\006events\030\002 \003(\0132\031.KN."
    "RecordingEventArchive\"\261\002\n\025RecordingEvent"
    "Archive\022\026\n\nstart_time\030\001 \001(\001:\002-1\022F\n\030navig"
    "ation_event_archive\030\350\007 \001(\0132#.KN.Recordin"
    "gNavigationEventArchive\022<\n\023laser_event_a"
    "rchive\030\351\007 \001(\0132\036.KN.RecordingLaserEventAr"
    "chive\022<\n\023pause_event_archive\030\352\007 \001(\0132\036.KN"
    ".RecordingPauseEventArchive\022<\n\023movie_eve"
    "nt_archive\030\353\007 \001(\0132\036.KN.RecordingMovieEve"
    "ntArchive\"\257\003\n\037RecordingNavigationEventAr"
    "chive\0223\n\033target_slide_node_reference\030\001 \001"
    "(\0132\016.TSP.Reference\022\032\n\022target_event_index"
    "\030\002 \001(\r\022\213\001\n\017animation_phase\030\003 \001(\0162J.KN.Re"
    "cordingNavigationEventArchive.RecordingN"
    "avigationEventAnimationPhase:&kRecording"
    "NavigationEventAnimationNone\"\254\001\n&Recordi"
    "ngNavigationEventAnimationPhase\022*\n&kReco"
    "rdingNavigationEventAnimationNone\020\000\022+\n\'k"
    "RecordingNavigationEventAnimationStart\020\001"
    "\022)\n%kRecordingNavigationEventAnimationEn"
    "d\020\002\"j\n\032RecordingLaserEventArchive\022)\n\021uns"
    "caled_location\030\001 \001(\0132\n.TSP.PointB\002\030\001\022!\n\r"
    "unit_location\030\002 \001(\0132\n.TSP.Point\"\315\002\n\032Reco"
    "rdingPauseEventArchive\022p\n\020pause_event_ty"
    "pe\030\001 \001(\01626.KN.RecordingPauseEventArchive"
    ".RecordingPauseEventType:\036kRecordingPaus"
    "eEventTypeResume\"\274\001\n\027RecordingPauseEvent"
    "Type\022\"\n\036kRecordingPauseEventTypeResume\020\000"
    "\022!\n\035kRecordingPauseEventTypePause\020\001\022,\n(k"
    "RecordingPauseEventTypeConcealWithBlack\020"
    "\002\022,\n(kRecordingPauseEventTypeConcealWith"
    "White\020\003\"\345\003\n\032RecordingMovieEventArchive\022,"
    "\n\024movie_info_reference\030\001 \001(\0132\016.TSP.Refer"
    "ence\022j\n\020movie_event_type\030\002 \001(\01626.KN.Reco"
    "rdingMovieEventArchive.RecordingMovieEve"
    "ntType:\030kRecordingMovieEventSeek\022\031\n\021movi"
    "e_event_value\030\003 \001(\001\"\221\002\n\027RecordingMovieEv"
    "entType\022\034\n\030kRecordingMovieEventNone\020\000\022\034\n"
    "\030kRecordingMovieEventSeek\020\001\022\037\n\033kRecordin"
    "gMovieEventSetRate\020\002\022%\n!kRecordingMovieE"
    "ventStartPlayback\020\003\022$\n kRecordingMovieEv"
    "entStopPlayback\020\004\022&\n\"kRecordingMovieEven"
    "tBeginScrubbing\020\005\022$\n kRecordingMovieEven"
    "tEndScrubbing\020\006\"M\n\032RecordingMovieTrackAr"
    "chive\022/\n\016movie_segments\030\001 \003(\0132\027.KN.Movie"
    "SegmentArchive\"\202\001\n\023MovieSegmentArchive\022&"
    "\n\nmovie_data\030\003 \001(\0132\022.TSP.DataReference\022\026"
    "\n\nstart_time\030\002 \001(\001:\002-1\022+\n\023database_movie"
    "_data\030\001 \001(\0132\016.TSP.Reference\"\371\001\n\nSoundtra"
    "ck\022\016\n\006volume\030\001 \001(\001\022F\n\004mode\030\002 \001(\0162\035.KN.So"
    "undtrack.SoundtrackMode:\031kKNSoundtrackMo"
    "dePlayOnce\022\'\n\013movie_media\030\003 \003(\0132\022.TSP.Da"
    "taReference\"j\n\016SoundtrackMode\022\035\n\031kKNSoun"
    "dtrackModePlayOnce\020\000\022\031\n\025kKNSoundtrackMod"
    "eLoop\020\001\022\036\n\032kKNSoundtrackModeDoNotPlay\020\002\""
    "M\n\034SlideNumberAttachmentArchive\022-\n\005super"
    "\030\001 \002(\0132\036.TSWP.TextualAttachmentArchive\"\370"
    "\002\n\037SlideCollectionSelectionArchive\022#\n\013sl"
    "ide_nodes\030\001 \003(\0132\016.TSP.Reference\022*\n\022slide"
    "_node_to_edit\030\002 \001(\0132\016.TSP.Reference\022h\n*s"
    "elected_paragraph_indexes_for_slide_node"
    "s\030\003 \003(\01324.KN.SlideCollectionSelectionArc"
    "hive.OutlineSelection\022/\n\033range_in_select"
    "ed_paragraph\030\004 \001(\0132\n.TSP.Range\032i\n\020Outlin"
    "eSelection\022\"\n\nslide_node\030\001 \002(\0132\016.TSP.Ref"
    "erence\0221\n\032selected_paragraph_indexes\030\002 \002"
    "(\0132\r.TSP.IndexSet", 13977);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KNArchives.proto", &protobuf_RegisterTypes);
  AnimationAttributesArchive::default_instance_ = new AnimationAttributesArchive();
  TransitionAttributesArchive::default_instance_ = new TransitionAttributesArchive();
  TransitionArchive::default_instance_ = new TransitionArchive();
  BuildChunkArchive::default_instance_ = new BuildChunkArchive();
  BuildAttributesArchive::default_instance_ = new BuildAttributesArchive();
  BuildArchive::default_instance_ = new BuildArchive();
  PlaceholderArchive::default_instance_ = new PlaceholderArchive();
  NoteArchive::default_instance_ = new NoteArchive();
  ClassicStylesheetRecordArchive::default_instance_ = new ClassicStylesheetRecordArchive();
  ClassicThemeRecordArchive::default_instance_ = new ClassicThemeRecordArchive();
  SlideArchive::default_instance_ = new SlideArchive();
  SlideArchive_SageTagMapEntry::default_instance_ = new SlideArchive_SageTagMapEntry();
  SlideNodeArchive::default_instance_ = new SlideNodeArchive();
  DesktopUILayoutArchive::default_instance_ = new DesktopUILayoutArchive();
  UIStateArchive::default_instance_ = new UIStateArchive();
  CanvasSelectionArchive::default_instance_ = new CanvasSelectionArchive();
  ThemeArchive::default_instance_ = new ThemeArchive();
  SlideTreeArchive::default_instance_ = new SlideTreeArchive();
  ShowArchive::default_instance_ = new ShowArchive();
  DocumentArchive::default_instance_ = new DocumentArchive();
  SlideStylePropertiesArchive::default_instance_ = new SlideStylePropertiesArchive();
  SlideStyleArchive::default_instance_ = new SlideStyleArchive();
  PasteboardNativeStorageArchive::default_instance_ = new PasteboardNativeStorageArchive();
  MasterChangeBlobArchive::default_instance_ = new MasterChangeBlobArchive();
  RecordingArchive::default_instance_ = new RecordingArchive();
  RecordingEventTrackArchive::default_instance_ = new RecordingEventTrackArchive();
  RecordingEventArchive::default_instance_ = new RecordingEventArchive();
  RecordingNavigationEventArchive::default_instance_ = new RecordingNavigationEventArchive();
  RecordingLaserEventArchive::default_instance_ = new RecordingLaserEventArchive();
  RecordingPauseEventArchive::default_instance_ = new RecordingPauseEventArchive();
  RecordingMovieEventArchive::default_instance_ = new RecordingMovieEventArchive();
  RecordingMovieTrackArchive::default_instance_ = new RecordingMovieTrackArchive();
  MovieSegmentArchive::default_instance_ = new MovieSegmentArchive();
  Soundtrack::default_instance_ = new Soundtrack();
  SlideNumberAttachmentArchive::default_instance_ = new SlideNumberAttachmentArchive();
  SlideCollectionSelectionArchive::default_instance_ = new SlideCollectionSelectionArchive();
  SlideCollectionSelectionArchive_OutlineSelection::default_instance_ = new SlideCollectionSelectionArchive_OutlineSelection();
  AnimationAttributesArchive::default_instance_->InitAsDefaultInstance();
  TransitionAttributesArchive::default_instance_->InitAsDefaultInstance();
  TransitionArchive::default_instance_->InitAsDefaultInstance();
  BuildChunkArchive::default_instance_->InitAsDefaultInstance();
  BuildAttributesArchive::default_instance_->InitAsDefaultInstance();
  BuildArchive::default_instance_->InitAsDefaultInstance();
  PlaceholderArchive::default_instance_->InitAsDefaultInstance();
  NoteArchive::default_instance_->InitAsDefaultInstance();
  ClassicStylesheetRecordArchive::default_instance_->InitAsDefaultInstance();
  ClassicThemeRecordArchive::default_instance_->InitAsDefaultInstance();
  SlideArchive::default_instance_->InitAsDefaultInstance();
  SlideArchive_SageTagMapEntry::default_instance_->InitAsDefaultInstance();
  SlideNodeArchive::default_instance_->InitAsDefaultInstance();
  DesktopUILayoutArchive::default_instance_->InitAsDefaultInstance();
  UIStateArchive::default_instance_->InitAsDefaultInstance();
  CanvasSelectionArchive::default_instance_->InitAsDefaultInstance();
  ThemeArchive::default_instance_->InitAsDefaultInstance();
  SlideTreeArchive::default_instance_->InitAsDefaultInstance();
  ShowArchive::default_instance_->InitAsDefaultInstance();
  DocumentArchive::default_instance_->InitAsDefaultInstance();
  SlideStylePropertiesArchive::default_instance_->InitAsDefaultInstance();
  SlideStyleArchive::default_instance_->InitAsDefaultInstance();
  PasteboardNativeStorageArchive::default_instance_->InitAsDefaultInstance();
  MasterChangeBlobArchive::default_instance_->InitAsDefaultInstance();
  RecordingArchive::default_instance_->InitAsDefaultInstance();
  RecordingEventTrackArchive::default_instance_->InitAsDefaultInstance();
  RecordingEventArchive::default_instance_->InitAsDefaultInstance();
  RecordingNavigationEventArchive::default_instance_->InitAsDefaultInstance();
  RecordingLaserEventArchive::default_instance_->InitAsDefaultInstance();
  RecordingPauseEventArchive::default_instance_->InitAsDefaultInstance();
  RecordingMovieEventArchive::default_instance_->InitAsDefaultInstance();
  RecordingMovieTrackArchive::default_instance_->InitAsDefaultInstance();
  MovieSegmentArchive::default_instance_->InitAsDefaultInstance();
  Soundtrack::default_instance_->InitAsDefaultInstance();
  SlideNumberAttachmentArchive::default_instance_->InitAsDefaultInstance();
  SlideCollectionSelectionArchive::default_instance_->InitAsDefaultInstance();
  SlideCollectionSelectionArchive_OutlineSelection::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_KNArchives_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_KNArchives_2eproto {
  StaticDescriptorInitializer_KNArchives_2eproto() {
    protobuf_AddDesc_KNArchives_2eproto();
  }
} static_descriptor_initializer_KNArchives_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AnimationAttributesArchive::kAnimationTypeFieldNumber;
const int AnimationAttributesArchive::kEffectFieldNumber;
const int AnimationAttributesArchive::kDurationFieldNumber;
const int AnimationAttributesArchive::kDirectionFieldNumber;
const int AnimationAttributesArchive::kDelayFieldNumber;
const int AnimationAttributesArchive::kIsAutomaticFieldNumber;
const int AnimationAttributesArchive::kColorFieldNumber;
#endif  // !_MSC_VER

AnimationAttributesArchive::AnimationAttributesArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnimationAttributesArchive::InitAsDefaultInstance() {
  color_ = const_cast< ::TSP::Color*>(&::TSP::Color::default_instance());
}

AnimationAttributesArchive::AnimationAttributesArchive(const AnimationAttributesArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnimationAttributesArchive::SharedCtor() {
  _cached_size_ = 0;
  animationtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  effect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  duration_ = 0;
  direction_ = 0u;
  delay_ = 0;
  isautomatic_ = false;
  color_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnimationAttributesArchive::~AnimationAttributesArchive() {
  SharedDtor();
}

void AnimationAttributesArchive::SharedDtor() {
  if (animationtype_ != &::google::protobuf::internal::kEmptyString) {
    delete animationtype_;
  }
  if (effect_ != &::google::protobuf::internal::kEmptyString) {
    delete effect_;
  }
  if (this != default_instance_) {
    delete color_;
  }
}

void AnimationAttributesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnimationAttributesArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnimationAttributesArchive_descriptor_;
}

const AnimationAttributesArchive& AnimationAttributesArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

AnimationAttributesArchive* AnimationAttributesArchive::default_instance_ = NULL;

AnimationAttributesArchive* AnimationAttributesArchive::New() const {
  return new AnimationAttributesArchive;
}

void AnimationAttributesArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_animationtype()) {
      if (animationtype_ != &::google::protobuf::internal::kEmptyString) {
        animationtype_->clear();
      }
    }
    if (has_effect()) {
      if (effect_ != &::google::protobuf::internal::kEmptyString) {
        effect_->clear();
      }
    }
    duration_ = 0;
    direction_ = 0u;
    delay_ = 0;
    isautomatic_ = false;
    if (has_color()) {
      if (color_ != NULL) color_->::TSP::Color::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnimationAttributesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string animationType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_animationtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->animationtype().data(), this->animationtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_effect;
        break;
      }

      // optional string effect = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_effect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->effect().data(), this->effect().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_duration;
        break;
      }

      // optional double duration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_direction;
        break;
      }

      // optional uint32 direction = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_delay;
        break;
      }

      // optional double delay = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isAutomatic;
        break;
      }

      // optional bool isAutomatic = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAutomatic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isautomatic_)));
          set_has_isautomatic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_color;
        break;
      }

      // optional .TSP.Color color = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnimationAttributesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string animationType = 1;
  if (has_animationtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->animationtype().data(), this->animationtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->animationtype(), output);
  }

  // optional string effect = 2;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effect().data(), this->effect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->effect(), output);
  }

  // optional double duration = 3;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->duration(), output);
  }

  // optional uint32 direction = 4;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->direction(), output);
  }

  // optional double delay = 5;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->delay(), output);
  }

  // optional bool isAutomatic = 6;
  if (has_isautomatic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isautomatic(), output);
  }

  // optional .TSP.Color color = 7;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnimationAttributesArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string animationType = 1;
  if (has_animationtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->animationtype().data(), this->animationtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->animationtype(), target);
  }

  // optional string effect = 2;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effect().data(), this->effect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->effect(), target);
  }

  // optional double duration = 3;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->duration(), target);
  }

  // optional uint32 direction = 4;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->direction(), target);
  }

  // optional double delay = 5;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->delay(), target);
  }

  // optional bool isAutomatic = 6;
  if (has_isautomatic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isautomatic(), target);
  }

  // optional .TSP.Color color = 7;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnimationAttributesArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string animationType = 1;
    if (has_animationtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->animationtype());
    }

    // optional string effect = 2;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->effect());
    }

    // optional double duration = 3;
    if (has_duration()) {
      total_size += 1 + 8;
    }

    // optional uint32 direction = 4;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->direction());
    }

    // optional double delay = 5;
    if (has_delay()) {
      total_size += 1 + 8;
    }

    // optional bool isAutomatic = 6;
    if (has_isautomatic()) {
      total_size += 1 + 1;
    }

    // optional .TSP.Color color = 7;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->color());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnimationAttributesArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnimationAttributesArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnimationAttributesArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnimationAttributesArchive::MergeFrom(const AnimationAttributesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_animationtype()) {
      set_animationtype(from.animationtype());
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_isautomatic()) {
      set_isautomatic(from.isautomatic());
    }
    if (from.has_color()) {
      mutable_color()->::TSP::Color::MergeFrom(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnimationAttributesArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnimationAttributesArchive::CopyFrom(const AnimationAttributesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimationAttributesArchive::IsInitialized() const {

  if (has_color()) {
    if (!this->color().IsInitialized()) return false;
  }
  return true;
}

void AnimationAttributesArchive::Swap(AnimationAttributesArchive* other) {
  if (other != this) {
    std::swap(animationtype_, other->animationtype_);
    std::swap(effect_, other->effect_);
    std::swap(duration_, other->duration_);
    std::swap(direction_, other->direction_);
    std::swap(delay_, other->delay_);
    std::swap(isautomatic_, other->isautomatic_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnimationAttributesArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnimationAttributesArchive_descriptor_;
  metadata.reflection = AnimationAttributesArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_descriptor_;
}
bool TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive::TransitionCustomAttributesTimingCurveTypeLinear;
const TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive::TransitionCustomAttributesTimingCurveTypeEaseIn;
const TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive::TransitionCustomAttributesTimingCurveTypeEaseOut;
const TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive::TransitionCustomAttributesTimingCurveTypeEaseInEaseOut;
const TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive::TransitionCustomAttributesTimingCurveType_MIN;
const TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType TransitionAttributesArchive::TransitionCustomAttributesTimingCurveType_MAX;
const int TransitionAttributesArchive::TransitionCustomAttributesTimingCurveType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_descriptor_;
}
bool TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive::TransitionCustomAttributesTextDeliveryTypeByObject;
const TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive::TransitionCustomAttributesTextDeliveryTypeByWord;
const TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive::TransitionCustomAttributesTextDeliveryTypeByCharacter;
const TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive::TransitionCustomAttributesTextDeliveryTypeByLine;
const TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive::TransitionCustomAttributesTextDeliveryType_MIN;
const TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType TransitionAttributesArchive::TransitionCustomAttributesTextDeliveryType_MAX;
const int TransitionAttributesArchive::TransitionCustomAttributesTextDeliveryType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TransitionAttributesArchive::kAnimationAttributesFieldNumber;
const int TransitionAttributesArchive::kIsAutomaticFieldNumber;
const int TransitionAttributesArchive::kCustomTwistFieldNumber;
const int TransitionAttributesArchive::kCustomMosaicSizeFieldNumber;
const int TransitionAttributesArchive::kCustomMosaicTypeFieldNumber;
const int TransitionAttributesArchive::kCustomBounceFieldNumber;
const int TransitionAttributesArchive::kCustomMagicMoveFadeUnmatchedObjectsFieldNumber;
const int TransitionAttributesArchive::kCustomTimingCurveFieldNumber;
const int TransitionAttributesArchive::kCustomTextDeliveryTypeFieldNumber;
const int TransitionAttributesArchive::kCustomMotionBlurFieldNumber;
const int TransitionAttributesArchive::kDatabaseAnimationTypeFieldNumber;
const int TransitionAttributesArchive::kDatabaseEffectFieldNumber;
const int TransitionAttributesArchive::kDatabaseDurationFieldNumber;
const int TransitionAttributesArchive::kDatabaseDirectionFieldNumber;
const int TransitionAttributesArchive::kDatabaseDelayFieldNumber;
const int TransitionAttributesArchive::kDatabaseColorFieldNumber;
#endif  // !_MSC_VER

TransitionAttributesArchive::TransitionAttributesArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransitionAttributesArchive::InitAsDefaultInstance() {
  animationattributes_ = const_cast< ::KN::AnimationAttributesArchive*>(&::KN::AnimationAttributesArchive::default_instance());
  database_color_ = const_cast< ::TSP::Color*>(&::TSP::Color::default_instance());
}

TransitionAttributesArchive::TransitionAttributesArchive(const TransitionAttributesArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransitionAttributesArchive::SharedCtor() {
  _cached_size_ = 0;
  animationattributes_ = NULL;
  isautomatic_ = false;
  custom_twist_ = 0;
  custom_mosaic_size_ = 0u;
  custom_mosaic_type_ = 0u;
  custom_bounce_ = false;
  custom_magic_move_fade_unmatched_objects_ = false;
  custom_timing_curve_ = 1;
  custom_text_delivery_type_ = 1;
  custom_motion_blur_ = false;
  database_animationtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  database_effect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  database_duration_ = 0;
  database_direction_ = 0u;
  database_delay_ = 0;
  database_color_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransitionAttributesArchive::~TransitionAttributesArchive() {
  SharedDtor();
}

void TransitionAttributesArchive::SharedDtor() {
  if (database_animationtype_ != &::google::protobuf::internal::kEmptyString) {
    delete database_animationtype_;
  }
  if (database_effect_ != &::google::protobuf::internal::kEmptyString) {
    delete database_effect_;
  }
  if (this != default_instance_) {
    delete animationattributes_;
    delete database_color_;
  }
}

void TransitionAttributesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransitionAttributesArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransitionAttributesArchive_descriptor_;
}

const TransitionAttributesArchive& TransitionAttributesArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

TransitionAttributesArchive* TransitionAttributesArchive::default_instance_ = NULL;

TransitionAttributesArchive* TransitionAttributesArchive::New() const {
  return new TransitionAttributesArchive;
}

void TransitionAttributesArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_animationattributes()) {
      if (animationattributes_ != NULL) animationattributes_->::KN::AnimationAttributesArchive::Clear();
    }
    isautomatic_ = false;
    custom_twist_ = 0;
    custom_mosaic_size_ = 0u;
    custom_mosaic_type_ = 0u;
    custom_bounce_ = false;
    custom_magic_move_fade_unmatched_objects_ = false;
    custom_timing_curve_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    custom_text_delivery_type_ = 1;
    custom_motion_blur_ = false;
    if (has_database_animationtype()) {
      if (database_animationtype_ != &::google::protobuf::internal::kEmptyString) {
        database_animationtype_->clear();
      }
    }
    if (has_database_effect()) {
      if (database_effect_ != &::google::protobuf::internal::kEmptyString) {
        database_effect_->clear();
      }
    }
    database_duration_ = 0;
    database_direction_ = 0u;
    database_delay_ = 0;
    if (has_database_color()) {
      if (database_color_ != NULL) database_color_->::TSP::Color::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransitionAttributesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string database_animationType = 1 [deprecated = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_database_animationtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->database_animationtype().data(), this->database_animationtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_database_effect;
        break;
      }

      // optional string database_effect = 2 [deprecated = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_database_effect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_database_effect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->database_effect().data(), this->database_effect().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_database_duration;
        break;
      }

      // optional double database_duration = 3 [deprecated = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_database_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &database_duration_)));
          set_has_database_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_database_direction;
        break;
      }

      // optional uint32 database_direction = 4 [deprecated = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_database_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &database_direction_)));
          set_has_database_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_database_delay;
        break;
      }

      // optional float database_delay = 5 [deprecated = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_database_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &database_delay_)));
          set_has_database_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isAutomatic;
        break;
      }

      // optional bool isAutomatic = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAutomatic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isautomatic_)));
          set_has_isautomatic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_database_color;
        break;
      }

      // optional .TSP.Color database_color = 7 [deprecated = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_database_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_database_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_animationAttributes;
        break;
      }

      // optional .KN.AnimationAttributesArchive animationAttributes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_animationAttributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_animationattributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_custom_twist;
        break;
      }

      // optional float custom_twist = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_custom_twist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &custom_twist_)));
          set_has_custom_twist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_custom_mosaic_size;
        break;
      }

      // optional uint32 custom_mosaic_size = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_custom_mosaic_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_mosaic_size_)));
          set_has_custom_mosaic_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_custom_mosaic_type;
        break;
      }

      // optional uint32 custom_mosaic_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_custom_mosaic_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_mosaic_type_)));
          set_has_custom_mosaic_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_custom_bounce;
        break;
      }

      // optional bool custom_bounce = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_custom_bounce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &custom_bounce_)));
          set_has_custom_bounce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_custom_magic_move_fade_unmatched_objects;
        break;
      }

      // optional bool custom_magic_move_fade_unmatched_objects = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_custom_magic_move_fade_unmatched_objects:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &custom_magic_move_fade_unmatched_objects_)));
          set_has_custom_magic_move_fade_unmatched_objects();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_custom_timing_curve;
        break;
      }

      // optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTimingCurveType custom_timing_curve = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_custom_timing_curve:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_IsValid(value)) {
            set_custom_timing_curve(static_cast< ::KN::TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_custom_text_delivery_type;
        break;
      }

      // optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTextDeliveryType custom_text_delivery_type = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_custom_text_delivery_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_IsValid(value)) {
            set_custom_text_delivery_type(static_cast< ::KN::TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_custom_motion_blur;
        break;
      }

      // optional bool custom_motion_blur = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_custom_motion_blur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &custom_motion_blur_)));
          set_has_custom_motion_blur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransitionAttributesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string database_animationType = 1 [deprecated = true];
  if (has_database_animationtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->database_animationtype().data(), this->database_animationtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->database_animationtype(), output);
  }

  // optional string database_effect = 2 [deprecated = true];
  if (has_database_effect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->database_effect().data(), this->database_effect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->database_effect(), output);
  }

  // optional double database_duration = 3 [deprecated = true];
  if (has_database_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->database_duration(), output);
  }

  // optional uint32 database_direction = 4 [deprecated = true];
  if (has_database_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->database_direction(), output);
  }

  // optional float database_delay = 5 [deprecated = true];
  if (has_database_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->database_delay(), output);
  }

  // optional bool isAutomatic = 6;
  if (has_isautomatic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isautomatic(), output);
  }

  // optional .TSP.Color database_color = 7 [deprecated = true];
  if (has_database_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->database_color(), output);
  }

  // optional .KN.AnimationAttributesArchive animationAttributes = 8;
  if (has_animationattributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->animationattributes(), output);
  }

  // optional float custom_twist = 9;
  if (has_custom_twist()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->custom_twist(), output);
  }

  // optional uint32 custom_mosaic_size = 10;
  if (has_custom_mosaic_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->custom_mosaic_size(), output);
  }

  // optional uint32 custom_mosaic_type = 11;
  if (has_custom_mosaic_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->custom_mosaic_type(), output);
  }

  // optional bool custom_bounce = 12;
  if (has_custom_bounce()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->custom_bounce(), output);
  }

  // optional bool custom_magic_move_fade_unmatched_objects = 13;
  if (has_custom_magic_move_fade_unmatched_objects()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->custom_magic_move_fade_unmatched_objects(), output);
  }

  // optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTimingCurveType custom_timing_curve = 15;
  if (has_custom_timing_curve()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->custom_timing_curve(), output);
  }

  // optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTextDeliveryType custom_text_delivery_type = 16;
  if (has_custom_text_delivery_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->custom_text_delivery_type(), output);
  }

  // optional bool custom_motion_blur = 17;
  if (has_custom_motion_blur()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->custom_motion_blur(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransitionAttributesArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string database_animationType = 1 [deprecated = true];
  if (has_database_animationtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->database_animationtype().data(), this->database_animationtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->database_animationtype(), target);
  }

  // optional string database_effect = 2 [deprecated = true];
  if (has_database_effect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->database_effect().data(), this->database_effect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->database_effect(), target);
  }

  // optional double database_duration = 3 [deprecated = true];
  if (has_database_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->database_duration(), target);
  }

  // optional uint32 database_direction = 4 [deprecated = true];
  if (has_database_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->database_direction(), target);
  }

  // optional float database_delay = 5 [deprecated = true];
  if (has_database_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->database_delay(), target);
  }

  // optional bool isAutomatic = 6;
  if (has_isautomatic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isautomatic(), target);
  }

  // optional .TSP.Color database_color = 7 [deprecated = true];
  if (has_database_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->database_color(), target);
  }

  // optional .KN.AnimationAttributesArchive animationAttributes = 8;
  if (has_animationattributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->animationattributes(), target);
  }

  // optional float custom_twist = 9;
  if (has_custom_twist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->custom_twist(), target);
  }

  // optional uint32 custom_mosaic_size = 10;
  if (has_custom_mosaic_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->custom_mosaic_size(), target);
  }

  // optional uint32 custom_mosaic_type = 11;
  if (has_custom_mosaic_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->custom_mosaic_type(), target);
  }

  // optional bool custom_bounce = 12;
  if (has_custom_bounce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->custom_bounce(), target);
  }

  // optional bool custom_magic_move_fade_unmatched_objects = 13;
  if (has_custom_magic_move_fade_unmatched_objects()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->custom_magic_move_fade_unmatched_objects(), target);
  }

  // optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTimingCurveType custom_timing_curve = 15;
  if (has_custom_timing_curve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->custom_timing_curve(), target);
  }

  // optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTextDeliveryType custom_text_delivery_type = 16;
  if (has_custom_text_delivery_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->custom_text_delivery_type(), target);
  }

  // optional bool custom_motion_blur = 17;
  if (has_custom_motion_blur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->custom_motion_blur(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransitionAttributesArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .KN.AnimationAttributesArchive animationAttributes = 8;
    if (has_animationattributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->animationattributes());
    }

    // optional bool isAutomatic = 6;
    if (has_isautomatic()) {
      total_size += 1 + 1;
    }

    // optional float custom_twist = 9;
    if (has_custom_twist()) {
      total_size += 1 + 4;
    }

    // optional uint32 custom_mosaic_size = 10;
    if (has_custom_mosaic_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_mosaic_size());
    }

    // optional uint32 custom_mosaic_type = 11;
    if (has_custom_mosaic_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_mosaic_type());
    }

    // optional bool custom_bounce = 12;
    if (has_custom_bounce()) {
      total_size += 1 + 1;
    }

    // optional bool custom_magic_move_fade_unmatched_objects = 13;
    if (has_custom_magic_move_fade_unmatched_objects()) {
      total_size += 1 + 1;
    }

    // optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTimingCurveType custom_timing_curve = 15;
    if (has_custom_timing_curve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->custom_timing_curve());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .KN.TransitionAttributesArchive.TransitionCustomAttributesTextDeliveryType custom_text_delivery_type = 16;
    if (has_custom_text_delivery_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->custom_text_delivery_type());
    }

    // optional bool custom_motion_blur = 17;
    if (has_custom_motion_blur()) {
      total_size += 2 + 1;
    }

    // optional string database_animationType = 1 [deprecated = true];
    if (has_database_animationtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->database_animationtype());
    }

    // optional string database_effect = 2 [deprecated = true];
    if (has_database_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->database_effect());
    }

    // optional double database_duration = 3 [deprecated = true];
    if (has_database_duration()) {
      total_size += 1 + 8;
    }

    // optional uint32 database_direction = 4 [deprecated = true];
    if (has_database_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->database_direction());
    }

    // optional float database_delay = 5 [deprecated = true];
    if (has_database_delay()) {
      total_size += 1 + 4;
    }

    // optional .TSP.Color database_color = 7 [deprecated = true];
    if (has_database_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->database_color());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransitionAttributesArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransitionAttributesArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransitionAttributesArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransitionAttributesArchive::MergeFrom(const TransitionAttributesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_animationattributes()) {
      mutable_animationattributes()->::KN::AnimationAttributesArchive::MergeFrom(from.animationattributes());
    }
    if (from.has_isautomatic()) {
      set_isautomatic(from.isautomatic());
    }
    if (from.has_custom_twist()) {
      set_custom_twist(from.custom_twist());
    }
    if (from.has_custom_mosaic_size()) {
      set_custom_mosaic_size(from.custom_mosaic_size());
    }
    if (from.has_custom_mosaic_type()) {
      set_custom_mosaic_type(from.custom_mosaic_type());
    }
    if (from.has_custom_bounce()) {
      set_custom_bounce(from.custom_bounce());
    }
    if (from.has_custom_magic_move_fade_unmatched_objects()) {
      set_custom_magic_move_fade_unmatched_objects(from.custom_magic_move_fade_unmatched_objects());
    }
    if (from.has_custom_timing_curve()) {
      set_custom_timing_curve(from.custom_timing_curve());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_custom_text_delivery_type()) {
      set_custom_text_delivery_type(from.custom_text_delivery_type());
    }
    if (from.has_custom_motion_blur()) {
      set_custom_motion_blur(from.custom_motion_blur());
    }
    if (from.has_database_animationtype()) {
      set_database_animationtype(from.database_animationtype());
    }
    if (from.has_database_effect()) {
      set_database_effect(from.database_effect());
    }
    if (from.has_database_duration()) {
      set_database_duration(from.database_duration());
    }
    if (from.has_database_direction()) {
      set_database_direction(from.database_direction());
    }
    if (from.has_database_delay()) {
      set_database_delay(from.database_delay());
    }
    if (from.has_database_color()) {
      mutable_database_color()->::TSP::Color::MergeFrom(from.database_color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransitionAttributesArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransitionAttributesArchive::CopyFrom(const TransitionAttributesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransitionAttributesArchive::IsInitialized() const {

  if (has_animationattributes()) {
    if (!this->animationattributes().IsInitialized()) return false;
  }
  if (has_database_color()) {
    if (!this->database_color().IsInitialized()) return false;
  }
  return true;
}

void TransitionAttributesArchive::Swap(TransitionAttributesArchive* other) {
  if (other != this) {
    std::swap(animationattributes_, other->animationattributes_);
    std::swap(isautomatic_, other->isautomatic_);
    std::swap(custom_twist_, other->custom_twist_);
    std::swap(custom_mosaic_size_, other->custom_mosaic_size_);
    std::swap(custom_mosaic_type_, other->custom_mosaic_type_);
    std::swap(custom_bounce_, other->custom_bounce_);
    std::swap(custom_magic_move_fade_unmatched_objects_, other->custom_magic_move_fade_unmatched_objects_);
    std::swap(custom_timing_curve_, other->custom_timing_curve_);
    std::swap(custom_text_delivery_type_, other->custom_text_delivery_type_);
    std::swap(custom_motion_blur_, other->custom_motion_blur_);
    std::swap(database_animationtype_, other->database_animationtype_);
    std::swap(database_effect_, other->database_effect_);
    std::swap(database_duration_, other->database_duration_);
    std::swap(database_direction_, other->database_direction_);
    std::swap(database_delay_, other->database_delay_);
    std::swap(database_color_, other->database_color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransitionAttributesArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransitionAttributesArchive_descriptor_;
  metadata.reflection = TransitionAttributesArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransitionArchive::kAttributesFieldNumber;
#endif  // !_MSC_VER

TransitionArchive::TransitionArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransitionArchive::InitAsDefaultInstance() {
  attributes_ = const_cast< ::KN::TransitionAttributesArchive*>(&::KN::TransitionAttributesArchive::default_instance());
}

TransitionArchive::TransitionArchive(const TransitionArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransitionArchive::SharedCtor() {
  _cached_size_ = 0;
  attributes_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransitionArchive::~TransitionArchive() {
  SharedDtor();
}

void TransitionArchive::SharedDtor() {
  if (this != default_instance_) {
    delete attributes_;
  }
}

void TransitionArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransitionArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransitionArchive_descriptor_;
}

const TransitionArchive& TransitionArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

TransitionArchive* TransitionArchive::default_instance_ = NULL;

TransitionArchive* TransitionArchive::New() const {
  return new TransitionArchive;
}

void TransitionArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_attributes()) {
      if (attributes_ != NULL) attributes_->::KN::TransitionAttributesArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransitionArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KN.TransitionAttributesArchive attributes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransitionArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .KN.TransitionAttributesArchive attributes = 2;
  if (has_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attributes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransitionArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .KN.TransitionAttributesArchive attributes = 2;
  if (has_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attributes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransitionArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KN.TransitionAttributesArchive attributes = 2;
    if (has_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attributes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransitionArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransitionArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransitionArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransitionArchive::MergeFrom(const TransitionArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attributes()) {
      mutable_attributes()->::KN::TransitionAttributesArchive::MergeFrom(from.attributes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransitionArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransitionArchive::CopyFrom(const TransitionArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransitionArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_attributes()) {
    if (!this->attributes().IsInitialized()) return false;
  }
  return true;
}

void TransitionArchive::Swap(TransitionArchive* other) {
  if (other != this) {
    std::swap(attributes_, other->attributes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransitionArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransitionArchive_descriptor_;
  metadata.reflection = TransitionArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildChunkArchive::kBuildFieldNumber;
const int BuildChunkArchive::kIndexFieldNumber;
const int BuildChunkArchive::kDelayFieldNumber;
const int BuildChunkArchive::kDurationFieldNumber;
const int BuildChunkArchive::kAutomaticFieldNumber;
const int BuildChunkArchive::kReferentFieldNumber;
#endif  // !_MSC_VER

BuildChunkArchive::BuildChunkArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildChunkArchive::InitAsDefaultInstance() {
  build_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

BuildChunkArchive::BuildChunkArchive(const BuildChunkArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildChunkArchive::SharedCtor() {
  _cached_size_ = 0;
  build_ = NULL;
  index_ = 0u;
  delay_ = 0;
  duration_ = 0;
  automatic_ = false;
  referent_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildChunkArchive::~BuildChunkArchive() {
  SharedDtor();
}

void BuildChunkArchive::SharedDtor() {
  if (this != default_instance_) {
    delete build_;
  }
}

void BuildChunkArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildChunkArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildChunkArchive_descriptor_;
}

const BuildChunkArchive& BuildChunkArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

BuildChunkArchive* BuildChunkArchive::default_instance_ = NULL;

BuildChunkArchive* BuildChunkArchive::New() const {
  return new BuildChunkArchive;
}

void BuildChunkArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_build()) {
      if (build_ != NULL) build_->::TSP::Reference::Clear();
    }
    index_ = 0u;
    delay_ = 0;
    duration_ = 0;
    automatic_ = false;
    referent_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildChunkArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Reference build = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_build()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required uint32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_delay;
        break;
      }

      // optional double delay = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_duration;
        break;
      }

      // optional double duration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_automatic;
        break;
      }

      // optional bool automatic = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_automatic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &automatic_)));
          set_has_automatic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_referent;
        break;
      }

      // optional bool referent = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_referent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &referent_)));
          set_has_referent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildChunkArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Reference build = 1;
  if (has_build()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->build(), output);
  }

  // required uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // optional double delay = 3;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->delay(), output);
  }

  // optional double duration = 4;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->duration(), output);
  }

  // optional bool automatic = 5;
  if (has_automatic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->automatic(), output);
  }

  // optional bool referent = 6;
  if (has_referent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->referent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildChunkArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Reference build = 1;
  if (has_build()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->build(), target);
  }

  // required uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // optional double delay = 3;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->delay(), target);
  }

  // optional double duration = 4;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->duration(), target);
  }

  // optional bool automatic = 5;
  if (has_automatic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->automatic(), target);
  }

  // optional bool referent = 6;
  if (has_referent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->referent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildChunkArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.Reference build = 1;
    if (has_build()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->build());
    }

    // required uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional double delay = 3;
    if (has_delay()) {
      total_size += 1 + 8;
    }

    // optional double duration = 4;
    if (has_duration()) {
      total_size += 1 + 8;
    }

    // optional bool automatic = 5;
    if (has_automatic()) {
      total_size += 1 + 1;
    }

    // optional bool referent = 6;
    if (has_referent()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildChunkArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildChunkArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildChunkArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildChunkArchive::MergeFrom(const BuildChunkArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_build()) {
      mutable_build()->::TSP::Reference::MergeFrom(from.build());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_automatic()) {
      set_automatic(from.automatic());
    }
    if (from.has_referent()) {
      set_referent(from.referent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildChunkArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildChunkArchive::CopyFrom(const BuildChunkArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildChunkArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_build()) {
    if (!this->build().IsInitialized()) return false;
  }
  return true;
}

void BuildChunkArchive::Swap(BuildChunkArchive* other) {
  if (other != this) {
    std::swap(build_, other->build_);
    std::swap(index_, other->index_);
    std::swap(delay_, other->delay_);
    std::swap(duration_, other->duration_);
    std::swap(automatic_, other->automatic_);
    std::swap(referent_, other->referent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildChunkArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildChunkArchive_descriptor_;
  metadata.reflection = BuildChunkArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BuildAttributesArchive_BuildAttributesAcceleration_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildAttributesArchive_BuildAttributesAcceleration_descriptor_;
}
bool BuildAttributesArchive_BuildAttributesAcceleration_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive::kNone;
const BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive::kEaseIn;
const BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive::kEaseOut;
const BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive::kEaseBoth;
const BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive::BuildAttributesAcceleration_MIN;
const BuildAttributesArchive_BuildAttributesAcceleration BuildAttributesArchive::BuildAttributesAcceleration_MAX;
const int BuildAttributesArchive::BuildAttributesAcceleration_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BuildAttributesArchive_BuildAttributesRotationDirection_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildAttributesArchive_BuildAttributesRotationDirection_descriptor_;
}
bool BuildAttributesArchive_BuildAttributesRotationDirection_IsValid(int value) {
  switch(value) {
    case 31:
    case 32:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BuildAttributesArchive_BuildAttributesRotationDirection BuildAttributesArchive::kClockwise;
const BuildAttributesArchive_BuildAttributesRotationDirection BuildAttributesArchive::kCounterclockwise;
const BuildAttributesArchive_BuildAttributesRotationDirection BuildAttributesArchive::BuildAttributesRotationDirection_MIN;
const BuildAttributesArchive_BuildAttributesRotationDirection BuildAttributesArchive::BuildAttributesRotationDirection_MAX;
const int BuildAttributesArchive::BuildAttributesRotationDirection_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BuildAttributesArchive_BuildAttributesCurveStyle_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildAttributesArchive_BuildAttributesCurveStyle_descriptor_;
}
bool BuildAttributesArchive_BuildAttributesCurveStyle_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BuildAttributesArchive_BuildAttributesCurveStyle BuildAttributesArchive::kStraight;
const BuildAttributesArchive_BuildAttributesCurveStyle BuildAttributesArchive::kCurved;
const BuildAttributesArchive_BuildAttributesCurveStyle BuildAttributesArchive::BuildAttributesCurveStyle_MIN;
const BuildAttributesArchive_BuildAttributesCurveStyle BuildAttributesArchive::BuildAttributesCurveStyle_MAX;
const int BuildAttributesArchive::BuildAttributesCurveStyle_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BuildAttributesArchive_BuildAttributesTextDelivery_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildAttributesArchive_BuildAttributesTextDelivery_descriptor_;
}
bool BuildAttributesArchive_BuildAttributesTextDelivery_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::kTextDeliveryUndefined;
const BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::kTextDeliveryByObject;
const BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::kTextDeliveryByWord;
const BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::kTextDeliveryByCharacter;
const BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::kTextDeliveryByLine;
const BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::BuildAttributesTextDelivery_MIN;
const BuildAttributesArchive_BuildAttributesTextDelivery BuildAttributesArchive::BuildAttributesTextDelivery_MAX;
const int BuildAttributesArchive::BuildAttributesTextDelivery_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BuildAttributesArchive_BuildAttributesDeliveryOption_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildAttributesArchive_BuildAttributesDeliveryOption_descriptor_;
}
bool BuildAttributesArchive_BuildAttributesDeliveryOption_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::kDeliveryOptionUndefined;
const BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::kDeliveryOptionForward;
const BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::kDeliveryOptionBackward;
const BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::kDeliveryOptionFromCenter;
const BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::kDeliveryOptionFromEdges;
const BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::kDeliveryOptionRandom;
const BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::BuildAttributesDeliveryOption_MIN;
const BuildAttributesArchive_BuildAttributesDeliveryOption BuildAttributesArchive::BuildAttributesDeliveryOption_MAX;
const int BuildAttributesArchive::BuildAttributesDeliveryOption_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_descriptor_;
}
bool BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BuildAttributesArchive_ActionBuildAttributesJiggleIntensity BuildAttributesArchive::kJiggleIntensitySmall;
const BuildAttributesArchive_ActionBuildAttributesJiggleIntensity BuildAttributesArchive::kJiggleIntensityMedium;
const BuildAttributesArchive_ActionBuildAttributesJiggleIntensity BuildAttributesArchive::kJiggleIntensityLarge;
const BuildAttributesArchive_ActionBuildAttributesJiggleIntensity BuildAttributesArchive::ActionBuildAttributesJiggleIntensity_MIN;
const BuildAttributesArchive_ActionBuildAttributesJiggleIntensity BuildAttributesArchive::ActionBuildAttributesJiggleIntensity_MAX;
const int BuildAttributesArchive::ActionBuildAttributesJiggleIntensity_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BuildAttributesArchive::kAnimationAttributesFieldNumber;
const int BuildAttributesArchive::kEventTriggerFieldNumber;
const int BuildAttributesArchive::kDelayAutomaticAfterFieldNumber;
const int BuildAttributesArchive::kDelayAutomaticWithFieldNumber;
const int BuildAttributesArchive::kCurveStyleFieldNumber;
const int BuildAttributesArchive::kChartRotation3DFieldNumber;
const int BuildAttributesArchive::kStartOffsetFieldNumber;
const int BuildAttributesArchive::kEndOffsetFieldNumber;
const int BuildAttributesArchive::kActionRotationAngleFieldNumber;
const int BuildAttributesArchive::kActionRotationDirectionFieldNumber;
const int BuildAttributesArchive::kActionScaleSizeFieldNumber;
const int BuildAttributesArchive::kActionColorAlphaFieldNumber;
const int BuildAttributesArchive::kActionAccelerationFieldNumber;
const int BuildAttributesArchive::kActionMotionPathSourceFieldNumber;
const int BuildAttributesArchive::kCustomBounceFieldNumber;
const int BuildAttributesArchive::kCustomTextDeliveryFieldNumber;
const int BuildAttributesArchive::kCustomDeliveryOptionFieldNumber;
const int BuildAttributesArchive::kCustomActionDecayFieldNumber;
const int BuildAttributesArchive::kCustomActionRepeatCountFieldNumber;
const int BuildAttributesArchive::kCustomActionScaleFieldNumber;
const int BuildAttributesArchive::kCustomActionJiggleIntensityFieldNumber;
const int BuildAttributesArchive::kCustomMotionBlurFieldNumber;
const int BuildAttributesArchive::kDatabaseAnimationTypeFieldNumber;
const int BuildAttributesArchive::kDatabaseEffectFieldNumber;
const int BuildAttributesArchive::kDatabaseDirectionFieldNumber;
const int BuildAttributesArchive::kDatabaseDelayFieldNumber;
const int BuildAttributesArchive::kDatabaseDurationFieldNumber;
const int BuildAttributesArchive::kDatabaseColorFieldNumber;
const int BuildAttributesArchive::kMotionPathStringFieldNumber;
#endif  // !_MSC_VER

BuildAttributesArchive::BuildAttributesArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildAttributesArchive::InitAsDefaultInstance() {
  animationattributes_ = const_cast< ::KN::AnimationAttributesArchive*>(&::KN::AnimationAttributesArchive::default_instance());
  action_motionpathsource_ = const_cast< ::TSD::PathSourceArchive*>(&::TSD::PathSourceArchive::default_instance());
  database_color_ = const_cast< ::TSP::Color*>(&::TSP::Color::default_instance());
}

BuildAttributesArchive::BuildAttributesArchive(const BuildAttributesArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildAttributesArchive::SharedCtor() {
  _cached_size_ = 0;
  animationattributes_ = NULL;
  eventtrigger_ = 0u;
  delayautomaticafter_ = 0;
  delayautomaticwith_ = 0;
  curvestyle_ = 0;
  chartrotation3d_ = 0;
  startoffset_ = 0u;
  endoffset_ = 0u;
  action_rotationangle_ = 0;
  action_rotationdirection_ = 31;
  action_scalesize_ = 0;
  action_coloralpha_ = 0;
  action_acceleration_ = 0;
  action_motionpathsource_ = NULL;
  custom_bounce_ = false;
  custom_textdelivery_ = 0;
  custom_deliveryoption_ = 0;
  custom_action_decay_ = false;
  custom_action_repeatcount_ = 0u;
  custom_action_scale_ = 0;
  custom_action_jiggleintensity_ = 0;
  custom_motion_blur_ = false;
  database_animationtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  database_effect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  database_direction_ = 0u;
  database_delay_ = 0;
  database_duration_ = 0;
  database_color_ = NULL;
  motionpathstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildAttributesArchive::~BuildAttributesArchive() {
  SharedDtor();
}

void BuildAttributesArchive::SharedDtor() {
  if (database_animationtype_ != &::google::protobuf::internal::kEmptyString) {
    delete database_animationtype_;
  }
  if (database_effect_ != &::google::protobuf::internal::kEmptyString) {
    delete database_effect_;
  }
  if (motionpathstring_ != &::google::protobuf::internal::kEmptyString) {
    delete motionpathstring_;
  }
  if (this != default_instance_) {
    delete animationattributes_;
    delete action_motionpathsource_;
    delete database_color_;
  }
}

void BuildAttributesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildAttributesArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildAttributesArchive_descriptor_;
}

const BuildAttributesArchive& BuildAttributesArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

BuildAttributesArchive* BuildAttributesArchive::default_instance_ = NULL;

BuildAttributesArchive* BuildAttributesArchive::New() const {
  return new BuildAttributesArchive;
}

void BuildAttributesArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_animationattributes()) {
      if (animationattributes_ != NULL) animationattributes_->::KN::AnimationAttributesArchive::Clear();
    }
    eventtrigger_ = 0u;
    delayautomaticafter_ = 0;
    delayautomaticwith_ = 0;
    curvestyle_ = 0;
    chartrotation3d_ = 0;
    startoffset_ = 0u;
    endoffset_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    action_rotationangle_ = 0;
    action_rotationdirection_ = 31;
    action_scalesize_ = 0;
    action_coloralpha_ = 0;
    action_acceleration_ = 0;
    if (has_action_motionpathsource()) {
      if (action_motionpathsource_ != NULL) action_motionpathsource_->::TSD::PathSourceArchive::Clear();
    }
    custom_bounce_ = false;
    custom_textdelivery_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    custom_deliveryoption_ = 0;
    custom_action_decay_ = false;
    custom_action_repeatcount_ = 0u;
    custom_action_scale_ = 0;
    custom_action_jiggleintensity_ = 0;
    custom_motion_blur_ = false;
    if (has_database_animationtype()) {
      if (database_animationtype_ != &::google::protobuf::internal::kEmptyString) {
        database_animationtype_->clear();
      }
    }
    if (has_database_effect()) {
      if (database_effect_ != &::google::protobuf::internal::kEmptyString) {
        database_effect_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    database_direction_ = 0u;
    database_delay_ = 0;
    database_duration_ = 0;
    if (has_database_color()) {
      if (database_color_ != NULL) database_color_->::TSP::Color::Clear();
    }
    if (has_motionpathstring()) {
      if (motionpathstring_ != &::google::protobuf::internal::kEmptyString) {
        motionpathstring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildAttributesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string database_animationType = 1 [deprecated = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_database_animationtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->database_animationtype().data(), this->database_animationtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_database_effect;
        break;
      }

      // optional string database_effect = 2 [deprecated = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_database_effect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_database_effect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->database_effect().data(), this->database_effect().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_database_direction;
        break;
      }

      // optional uint32 database_direction = 3 [deprecated = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_database_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &database_direction_)));
          set_has_database_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_eventTrigger;
        break;
      }

      // optional uint32 eventTrigger = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventTrigger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventtrigger_)));
          set_has_eventtrigger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_database_delay;
        break;
      }

      // optional double database_delay = 5 [deprecated = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_database_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &database_delay_)));
          set_has_database_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_delayAutomaticAfter;
        break;
      }

      // optional double delayAutomaticAfter = 6 [deprecated = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_delayAutomaticAfter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delayautomaticafter_)));
          set_has_delayautomaticafter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_delayAutomaticWith;
        break;
      }

      // optional double delayAutomaticWith = 7 [deprecated = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_delayAutomaticWith:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delayautomaticwith_)));
          set_has_delayautomaticwith();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_database_duration;
        break;
      }

      // optional double database_duration = 8 [deprecated = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_database_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &database_duration_)));
          set_has_database_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_action_rotationAngle;
        break;
      }

      // optional double action_rotationAngle = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_action_rotationAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &action_rotationangle_)));
          set_has_action_rotationangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_action_rotationDirection;
        break;
      }

      // optional .KN.BuildAttributesArchive.BuildAttributesRotationDirection action_rotationDirection = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_rotationDirection:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::KN::BuildAttributesArchive_BuildAttributesRotationDirection_IsValid(value)) {
            set_action_rotationdirection(static_cast< ::KN::BuildAttributesArchive_BuildAttributesRotationDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_action_scaleSize;
        break;
      }

      // optional double action_scaleSize = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_action_scaleSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &action_scalesize_)));
          set_has_action_scalesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_action_colorAlpha;
        break;
      }

      // optional double action_colorAlpha = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_action_colorAlpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &action_coloralpha_)));
          set_has_action_coloralpha();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_action_acceleration;
        break;
      }

      // optional .KN.BuildAttributesArchive.BuildAttributesAcceleration action_acceleration = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_acceleration:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::KN::BuildAttributesArchive_BuildAttributesAcceleration_IsValid(value)) {
            set_action_acceleration(static_cast< ::KN::BuildAttributesArchive_BuildAttributesAcceleration >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_curveStyle;
        break;
      }

      // optional .KN.BuildAttributesArchive.BuildAttributesCurveStyle curveStyle = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curveStyle:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::KN::BuildAttributesArchive_BuildAttributesCurveStyle_IsValid(value)) {
            set_curvestyle(static_cast< ::KN::BuildAttributesArchive_BuildAttributesCurveStyle >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_motionPathString;
        break;
      }

      // optional string motionPathString = 15 [deprecated = true];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_motionPathString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_motionpathstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->motionpathstring().data(), this->motionpathstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_database_color;
        break;
      }

      // optional .TSP.Color database_color = 16 [deprecated = true];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_database_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_database_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_ChartRotation3D;
        break;
      }

      // optional double ChartRotation3D = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ChartRotation3D:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &chartrotation3d_)));
          set_has_chartrotation3d();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_animationAttributes;
        break;
      }

      // optional .KN.AnimationAttributesArchive animationAttributes = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_animationAttributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_animationattributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_custom_bounce;
        break;
      }

      // optional bool custom_bounce = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_custom_bounce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &custom_bounce_)));
          set_has_custom_bounce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_custom_textDelivery;
        break;
      }

      // optional .KN.BuildAttributesArchive.BuildAttributesTextDelivery custom_textDelivery = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_custom_textDelivery:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::KN::BuildAttributesArchive_BuildAttributesTextDelivery_IsValid(value)) {
            set_custom_textdelivery(static_cast< ::KN::BuildAttributesArchive_BuildAttributesTextDelivery >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_custom_deliveryOption;
        break;
      }

      // optional .KN.BuildAttributesArchive.BuildAttributesDeliveryOption custom_deliveryOption = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_custom_deliveryOption:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::KN::BuildAttributesArchive_BuildAttributesDeliveryOption_IsValid(value)) {
            set_custom_deliveryoption(static_cast< ::KN::BuildAttributesArchive_BuildAttributesDeliveryOption >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_action_motionPathSource;
        break;
      }

      // optional .TSD.PathSourceArchive action_motionPathSource = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_action_motionPathSource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action_motionpathsource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_custom_action_decay;
        break;
      }

      // optional bool custom_action_decay = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_custom_action_decay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &custom_action_decay_)));
          set_has_custom_action_decay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_custom_action_repeatCount;
        break;
      }

      // optional uint32 custom_action_repeatCount = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_custom_action_repeatCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_action_repeatcount_)));
          set_has_custom_action_repeatcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_custom_action_scale;
        break;
      }

      // optional double custom_action_scale = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_custom_action_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &custom_action_scale_)));
          set_has_custom_action_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_custom_action_jiggleIntensity;
        break;
      }

      // optional .KN.BuildAttributesArchive.ActionBuildAttributesJiggleIntensity custom_action_jiggleIntensity = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_custom_action_jiggleIntensity:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_IsValid(value)) {
            set_custom_action_jiggleintensity(static_cast< ::KN::BuildAttributesArchive_ActionBuildAttributesJiggleIntensity >(value));
          } else {
            mutable_unknown_fields()->AddVarint(26, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_startOffset;
        break;
      }

      // optional uint32 startOffset = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startoffset_)));
          set_has_startoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_endOffset;
        break;
      }

      // optional uint32 endOffset = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endoffset_)));
          set_has_endoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_custom_motion_blur;
        break;
      }

      // optional bool custom_motion_blur = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_custom_motion_blur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &custom_motion_blur_)));
          set_has_custom_motion_blur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildAttributesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string database_animationType = 1 [deprecated = true];
  if (has_database_animationtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->database_animationtype().data(), this->database_animationtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->database_animationtype(), output);
  }

  // optional string database_effect = 2 [deprecated = true];
  if (has_database_effect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->database_effect().data(), this->database_effect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->database_effect(), output);
  }

  // optional uint32 database_direction = 3 [deprecated = true];
  if (has_database_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->database_direction(), output);
  }

  // optional uint32 eventTrigger = 4;
  if (has_eventtrigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->eventtrigger(), output);
  }

  // optional double database_delay = 5 [deprecated = true];
  if (has_database_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->database_delay(), output);
  }

  // optional double delayAutomaticAfter = 6 [deprecated = true];
  if (has_delayautomaticafter()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->delayautomaticafter(), output);
  }

  // optional double delayAutomaticWith = 7 [deprecated = true];
  if (has_delayautomaticwith()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->delayautomaticwith(), output);
  }

  // optional double database_duration = 8 [deprecated = true];
  if (has_database_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->database_duration(), output);
  }

  // optional double action_rotationAngle = 9;
  if (has_action_rotationangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->action_rotationangle(), output);
  }

  // optional .KN.BuildAttributesArchive.BuildAttributesRotationDirection action_rotationDirection = 10;
  if (has_action_rotationdirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->action_rotationdirection(), output);
  }

  // optional double action_scaleSize = 11;
  if (has_action_scalesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->action_scalesize(), output);
  }

  // optional double action_colorAlpha = 12;
  if (has_action_coloralpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->action_coloralpha(), output);
  }

  // optional .KN.BuildAttributesArchive.BuildAttributesAcceleration action_acceleration = 13;
  if (has_action_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->action_acceleration(), output);
  }

  // optional .KN.BuildAttributesArchive.BuildAttributesCurveStyle curveStyle = 14;
  if (has_curvestyle()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->curvestyle(), output);
  }

  // optional string motionPathString = 15 [deprecated = true];
  if (has_motionpathstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->motionpathstring().data(), this->motionpathstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->motionpathstring(), output);
  }

  // optional .TSP.Color database_color = 16 [deprecated = true];
  if (has_database_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->database_color(), output);
  }

  // optional double ChartRotation3D = 17;
  if (has_chartrotation3d()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->chartrotation3d(), output);
  }

  // optional .KN.AnimationAttributesArchive animationAttributes = 18;
  if (has_animationattributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->animationattributes(), output);
  }

  // optional bool custom_bounce = 19;
  if (has_custom_bounce()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->custom_bounce(), output);
  }

  // optional .KN.BuildAttributesArchive.BuildAttributesTextDelivery custom_textDelivery = 20;
  if (has_custom_textdelivery()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->custom_textdelivery(), output);
  }

  // optional .KN.BuildAttributesArchive.BuildAttributesDeliveryOption custom_deliveryOption = 21;
  if (has_custom_deliveryoption()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->custom_deliveryoption(), output);
  }

  // optional .TSD.PathSourceArchive action_motionPathSource = 22;
  if (has_action_motionpathsource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->action_motionpathsource(), output);
  }

  // optional bool custom_action_decay = 23;
  if (has_custom_action_decay()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->custom_action_decay(), output);
  }

  // optional uint32 custom_action_repeatCount = 24;
  if (has_custom_action_repeatcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->custom_action_repeatcount(), output);
  }

  // optional double custom_action_scale = 25;
  if (has_custom_action_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->custom_action_scale(), output);
  }

  // optional .KN.BuildAttributesArchive.ActionBuildAttributesJiggleIntensity custom_action_jiggleIntensity = 26;
  if (has_custom_action_jiggleintensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      26, this->custom_action_jiggleintensity(), output);
  }

  // optional uint32 startOffset = 27;
  if (has_startoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->startoffset(), output);
  }

  // optional uint32 endOffset = 28;
  if (has_endoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->endoffset(), output);
  }

  // optional bool custom_motion_blur = 29;
  if (has_custom_motion_blur()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->custom_motion_blur(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildAttributesArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string database_animationType = 1 [deprecated = true];
  if (has_database_animationtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->database_animationtype().data(), this->database_animationtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->database_animationtype(), target);
  }

  // optional string database_effect = 2 [deprecated = true];
  if (has_database_effect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->database_effect().data(), this->database_effect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->database_effect(), target);
  }

  // optional uint32 database_direction = 3 [deprecated = true];
  if (has_database_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->database_direction(), target);
  }

  // optional uint32 eventTrigger = 4;
  if (has_eventtrigger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->eventtrigger(), target);
  }

  // optional double database_delay = 5 [deprecated = true];
  if (has_database_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->database_delay(), target);
  }

  // optional double delayAutomaticAfter = 6 [deprecated = true];
  if (has_delayautomaticafter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->delayautomaticafter(), target);
  }

  // optional double delayAutomaticWith = 7 [deprecated = true];
  if (has_delayautomaticwith()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->delayautomaticwith(), target);
  }

  // optional double database_duration = 8 [deprecated = true];
  if (has_database_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->database_duration(), target);
  }

  // optional double action_rotationAngle = 9;
  if (has_action_rotationangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->action_rotationangle(), target);
  }

  // optional .KN.BuildAttributesArchive.BuildAttributesRotationDirection action_rotationDirection = 10;
  if (has_action_rotationdirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->action_rotationdirection(), target);
  }

  // optional double action_scaleSize = 11;
  if (has_action_scalesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->action_scalesize(), target);
  }

  // optional double action_colorAlpha = 12;
  if (has_action_coloralpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->action_coloralpha(), target);
  }

  // optional .KN.BuildAttributesArchive.BuildAttributesAcceleration action_acceleration = 13;
  if (has_action_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->action_acceleration(), target);
  }

  // optional .KN.BuildAttributesArchive.BuildAttributesCurveStyle curveStyle = 14;
  if (has_curvestyle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->curvestyle(), target);
  }

  // optional string motionPathString = 15 [deprecated = true];
  if (has_motionpathstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->motionpathstring().data(), this->motionpathstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->motionpathstring(), target);
  }

  // optional .TSP.Color database_color = 16 [deprecated = true];
  if (has_database_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->database_color(), target);
  }

  // optional double ChartRotation3D = 17;
  if (has_chartrotation3d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->chartrotation3d(), target);
  }

  // optional .KN.AnimationAttributesArchive animationAttributes = 18;
  if (has_animationattributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->animationattributes(), target);
  }

  // optional bool custom_bounce = 19;
  if (has_custom_bounce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->custom_bounce(), target);
  }

  // optional .KN.BuildAttributesArchive.BuildAttributesTextDelivery custom_textDelivery = 20;
  if (has_custom_textdelivery()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->custom_textdelivery(), target);
  }

  // optional .KN.BuildAttributesArchive.BuildAttributesDeliveryOption custom_deliveryOption = 21;
  if (has_custom_deliveryoption()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->custom_deliveryoption(), target);
  }

  // optional .TSD.PathSourceArchive action_motionPathSource = 22;
  if (has_action_motionpathsource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->action_motionpathsource(), target);
  }

  // optional bool custom_action_decay = 23;
  if (has_custom_action_decay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->custom_action_decay(), target);
  }

  // optional uint32 custom_action_repeatCount = 24;
  if (has_custom_action_repeatcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->custom_action_repeatcount(), target);
  }

  // optional double custom_action_scale = 25;
  if (has_custom_action_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->custom_action_scale(), target);
  }

  // optional .KN.BuildAttributesArchive.ActionBuildAttributesJiggleIntensity custom_action_jiggleIntensity = 26;
  if (has_custom_action_jiggleintensity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      26, this->custom_action_jiggleintensity(), target);
  }

  // optional uint32 startOffset = 27;
  if (has_startoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->startoffset(), target);
  }

  // optional uint32 endOffset = 28;
  if (has_endoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->endoffset(), target);
  }

  // optional bool custom_motion_blur = 29;
  if (has_custom_motion_blur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->custom_motion_blur(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildAttributesArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .KN.AnimationAttributesArchive animationAttributes = 18;
    if (has_animationattributes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->animationattributes());
    }

    // optional uint32 eventTrigger = 4;
    if (has_eventtrigger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventtrigger());
    }

    // optional double delayAutomaticAfter = 6 [deprecated = true];
    if (has_delayautomaticafter()) {
      total_size += 1 + 8;
    }

    // optional double delayAutomaticWith = 7 [deprecated = true];
    if (has_delayautomaticwith()) {
      total_size += 1 + 8;
    }

    // optional .KN.BuildAttributesArchive.BuildAttributesCurveStyle curveStyle = 14;
    if (has_curvestyle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->curvestyle());
    }

    // optional double ChartRotation3D = 17;
    if (has_chartrotation3d()) {
      total_size += 2 + 8;
    }

    // optional uint32 startOffset = 27;
    if (has_startoffset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startoffset());
    }

    // optional uint32 endOffset = 28;
    if (has_endoffset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endoffset());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double action_rotationAngle = 9;
    if (has_action_rotationangle()) {
      total_size += 1 + 8;
    }

    // optional .KN.BuildAttributesArchive.BuildAttributesRotationDirection action_rotationDirection = 10;
    if (has_action_rotationdirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action_rotationdirection());
    }

    // optional double action_scaleSize = 11;
    if (has_action_scalesize()) {
      total_size += 1 + 8;
    }

    // optional double action_colorAlpha = 12;
    if (has_action_coloralpha()) {
      total_size += 1 + 8;
    }

    // optional .KN.BuildAttributesArchive.BuildAttributesAcceleration action_acceleration = 13;
    if (has_action_acceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action_acceleration());
    }

    // optional .TSD.PathSourceArchive action_motionPathSource = 22;
    if (has_action_motionpathsource()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->action_motionpathsource());
    }

    // optional bool custom_bounce = 19;
    if (has_custom_bounce()) {
      total_size += 2 + 1;
    }

    // optional .KN.BuildAttributesArchive.BuildAttributesTextDelivery custom_textDelivery = 20;
    if (has_custom_textdelivery()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->custom_textdelivery());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .KN.BuildAttributesArchive.BuildAttributesDeliveryOption custom_deliveryOption = 21;
    if (has_custom_deliveryoption()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->custom_deliveryoption());
    }

    // optional bool custom_action_decay = 23;
    if (has_custom_action_decay()) {
      total_size += 2 + 1;
    }

    // optional uint32 custom_action_repeatCount = 24;
    if (has_custom_action_repeatcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_action_repeatcount());
    }

    // optional double custom_action_scale = 25;
    if (has_custom_action_scale()) {
      total_size += 2 + 8;
    }

    // optional .KN.BuildAttributesArchive.ActionBuildAttributesJiggleIntensity custom_action_jiggleIntensity = 26;
    if (has_custom_action_jiggleintensity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->custom_action_jiggleintensity());
    }

    // optional bool custom_motion_blur = 29;
    if (has_custom_motion_blur()) {
      total_size += 2 + 1;
    }

    // optional string database_animationType = 1 [deprecated = true];
    if (has_database_animationtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->database_animationtype());
    }

    // optional string database_effect = 2 [deprecated = true];
    if (has_database_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->database_effect());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 database_direction = 3 [deprecated = true];
    if (has_database_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->database_direction());
    }

    // optional double database_delay = 5 [deprecated = true];
    if (has_database_delay()) {
      total_size += 1 + 8;
    }

    // optional double database_duration = 8 [deprecated = true];
    if (has_database_duration()) {
      total_size += 1 + 8;
    }

    // optional .TSP.Color database_color = 16 [deprecated = true];
    if (has_database_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->database_color());
    }

    // optional string motionPathString = 15 [deprecated = true];
    if (has_motionpathstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->motionpathstring());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildAttributesArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildAttributesArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildAttributesArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildAttributesArchive::MergeFrom(const BuildAttributesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_animationattributes()) {
      mutable_animationattributes()->::KN::AnimationAttributesArchive::MergeFrom(from.animationattributes());
    }
    if (from.has_eventtrigger()) {
      set_eventtrigger(from.eventtrigger());
    }
    if (from.has_delayautomaticafter()) {
      set_delayautomaticafter(from.delayautomaticafter());
    }
    if (from.has_delayautomaticwith()) {
      set_delayautomaticwith(from.delayautomaticwith());
    }
    if (from.has_curvestyle()) {
      set_curvestyle(from.curvestyle());
    }
    if (from.has_chartrotation3d()) {
      set_chartrotation3d(from.chartrotation3d());
    }
    if (from.has_startoffset()) {
      set_startoffset(from.startoffset());
    }
    if (from.has_endoffset()) {
      set_endoffset(from.endoffset());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_action_rotationangle()) {
      set_action_rotationangle(from.action_rotationangle());
    }
    if (from.has_action_rotationdirection()) {
      set_action_rotationdirection(from.action_rotationdirection());
    }
    if (from.has_action_scalesize()) {
      set_action_scalesize(from.action_scalesize());
    }
    if (from.has_action_coloralpha()) {
      set_action_coloralpha(from.action_coloralpha());
    }
    if (from.has_action_acceleration()) {
      set_action_acceleration(from.action_acceleration());
    }
    if (from.has_action_motionpathsource()) {
      mutable_action_motionpathsource()->::TSD::PathSourceArchive::MergeFrom(from.action_motionpathsource());
    }
    if (from.has_custom_bounce()) {
      set_custom_bounce(from.custom_bounce());
    }
    if (from.has_custom_textdelivery()) {
      set_custom_textdelivery(from.custom_textdelivery());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_custom_deliveryoption()) {
      set_custom_deliveryoption(from.custom_deliveryoption());
    }
    if (from.has_custom_action_decay()) {
      set_custom_action_decay(from.custom_action_decay());
    }
    if (from.has_custom_action_repeatcount()) {
      set_custom_action_repeatcount(from.custom_action_repeatcount());
    }
    if (from.has_custom_action_scale()) {
      set_custom_action_scale(from.custom_action_scale());
    }
    if (from.has_custom_action_jiggleintensity()) {
      set_custom_action_jiggleintensity(from.custom_action_jiggleintensity());
    }
    if (from.has_custom_motion_blur()) {
      set_custom_motion_blur(from.custom_motion_blur());
    }
    if (from.has_database_animationtype()) {
      set_database_animationtype(from.database_animationtype());
    }
    if (from.has_database_effect()) {
      set_database_effect(from.database_effect());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_database_direction()) {
      set_database_direction(from.database_direction());
    }
    if (from.has_database_delay()) {
      set_database_delay(from.database_delay());
    }
    if (from.has_database_duration()) {
      set_database_duration(from.database_duration());
    }
    if (from.has_database_color()) {
      mutable_database_color()->::TSP::Color::MergeFrom(from.database_color());
    }
    if (from.has_motionpathstring()) {
      set_motionpathstring(from.motionpathstring());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildAttributesArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildAttributesArchive::CopyFrom(const BuildAttributesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildAttributesArchive::IsInitialized() const {

  if (has_animationattributes()) {
    if (!this->animationattributes().IsInitialized()) return false;
  }
  if (has_action_motionpathsource()) {
    if (!this->action_motionpathsource().IsInitialized()) return false;
  }
  if (has_database_color()) {
    if (!this->database_color().IsInitialized()) return false;
  }
  return true;
}

void BuildAttributesArchive::Swap(BuildAttributesArchive* other) {
  if (other != this) {
    std::swap(animationattributes_, other->animationattributes_);
    std::swap(eventtrigger_, other->eventtrigger_);
    std::swap(delayautomaticafter_, other->delayautomaticafter_);
    std::swap(delayautomaticwith_, other->delayautomaticwith_);
    std::swap(curvestyle_, other->curvestyle_);
    std::swap(chartrotation3d_, other->chartrotation3d_);
    std::swap(startoffset_, other->startoffset_);
    std::swap(endoffset_, other->endoffset_);
    std::swap(action_rotationangle_, other->action_rotationangle_);
    std::swap(action_rotationdirection_, other->action_rotationdirection_);
    std::swap(action_scalesize_, other->action_scalesize_);
    std::swap(action_coloralpha_, other->action_coloralpha_);
    std::swap(action_acceleration_, other->action_acceleration_);
    std::swap(action_motionpathsource_, other->action_motionpathsource_);
    std::swap(custom_bounce_, other->custom_bounce_);
    std::swap(custom_textdelivery_, other->custom_textdelivery_);
    std::swap(custom_deliveryoption_, other->custom_deliveryoption_);
    std::swap(custom_action_decay_, other->custom_action_decay_);
    std::swap(custom_action_repeatcount_, other->custom_action_repeatcount_);
    std::swap(custom_action_scale_, other->custom_action_scale_);
    std::swap(custom_action_jiggleintensity_, other->custom_action_jiggleintensity_);
    std::swap(custom_motion_blur_, other->custom_motion_blur_);
    std::swap(database_animationtype_, other->database_animationtype_);
    std::swap(database_effect_, other->database_effect_);
    std::swap(database_direction_, other->database_direction_);
    std::swap(database_delay_, other->database_delay_);
    std::swap(database_duration_, other->database_duration_);
    std::swap(database_color_, other->database_color_);
    std::swap(motionpathstring_, other->motionpathstring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildAttributesArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildAttributesArchive_descriptor_;
  metadata.reflection = BuildAttributesArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildArchive::kDrawableFieldNumber;
const int BuildArchive::kDeliveryFieldNumber;
const int BuildArchive::kDurationFieldNumber;
const int BuildArchive::kAttributesFieldNumber;
#endif  // !_MSC_VER

BuildArchive::BuildArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildArchive::InitAsDefaultInstance() {
  drawable_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  attributes_ = const_cast< ::KN::BuildAttributesArchive*>(&::KN::BuildAttributesArchive::default_instance());
}

BuildArchive::BuildArchive(const BuildArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildArchive::SharedCtor() {
  _cached_size_ = 0;
  drawable_ = NULL;
  delivery_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  duration_ = 0;
  attributes_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildArchive::~BuildArchive() {
  SharedDtor();
}

void BuildArchive::SharedDtor() {
  if (delivery_ != &::google::protobuf::internal::kEmptyString) {
    delete delivery_;
  }
  if (this != default_instance_) {
    delete drawable_;
    delete attributes_;
  }
}

void BuildArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildArchive_descriptor_;
}

const BuildArchive& BuildArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

BuildArchive* BuildArchive::default_instance_ = NULL;

BuildArchive* BuildArchive::New() const {
  return new BuildArchive;
}

void BuildArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_drawable()) {
      if (drawable_ != NULL) drawable_->::TSP::Reference::Clear();
    }
    if (has_delivery()) {
      if (delivery_ != &::google::protobuf::internal::kEmptyString) {
        delivery_->clear();
      }
    }
    duration_ = 0;
    if (has_attributes()) {
      if (attributes_ != NULL) attributes_->::KN::BuildAttributesArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Reference drawable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drawable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_delivery;
        break;
      }

      // required string delivery = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_delivery:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_delivery()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->delivery().data(), this->delivery().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_duration;
        break;
      }

      // required double duration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attributes;
        break;
      }

      // required .KN.BuildAttributesArchive attributes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Reference drawable = 1;
  if (has_drawable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->drawable(), output);
  }

  // required string delivery = 2;
  if (has_delivery()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->delivery().data(), this->delivery().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->delivery(), output);
  }

  // required double duration = 3;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->duration(), output);
  }

  // required .KN.BuildAttributesArchive attributes = 4;
  if (has_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attributes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Reference drawable = 1;
  if (has_drawable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->drawable(), target);
  }

  // required string delivery = 2;
  if (has_delivery()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->delivery().data(), this->delivery().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->delivery(), target);
  }

  // required double duration = 3;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->duration(), target);
  }

  // required .KN.BuildAttributesArchive attributes = 4;
  if (has_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attributes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.Reference drawable = 1;
    if (has_drawable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drawable());
    }

    // required string delivery = 2;
    if (has_delivery()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->delivery());
    }

    // required double duration = 3;
    if (has_duration()) {
      total_size += 1 + 8;
    }

    // required .KN.BuildAttributesArchive attributes = 4;
    if (has_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attributes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildArchive::MergeFrom(const BuildArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_drawable()) {
      mutable_drawable()->::TSP::Reference::MergeFrom(from.drawable());
    }
    if (from.has_delivery()) {
      set_delivery(from.delivery());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_attributes()) {
      mutable_attributes()->::KN::BuildAttributesArchive::MergeFrom(from.attributes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildArchive::CopyFrom(const BuildArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_drawable()) {
    if (!this->drawable().IsInitialized()) return false;
  }
  if (has_attributes()) {
    if (!this->attributes().IsInitialized()) return false;
  }
  return true;
}

void BuildArchive::Swap(BuildArchive* other) {
  if (other != this) {
    std::swap(drawable_, other->drawable_);
    std::swap(delivery_, other->delivery_);
    std::swap(duration_, other->duration_);
    std::swap(attributes_, other->attributes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildArchive_descriptor_;
  metadata.reflection = BuildArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PlaceholderArchive_Kind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaceholderArchive_Kind_descriptor_;
}
bool PlaceholderArchive_Kind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PlaceholderArchive_Kind PlaceholderArchive::kKindPlaceholder;
const PlaceholderArchive_Kind PlaceholderArchive::kKindSlideNumberPlaceholder;
const PlaceholderArchive_Kind PlaceholderArchive::kKindTitlePlaceholder;
const PlaceholderArchive_Kind PlaceholderArchive::kKindBodyPlaceholder;
const PlaceholderArchive_Kind PlaceholderArchive::kKindObjectPlaceholder;
const PlaceholderArchive_Kind PlaceholderArchive::Kind_MIN;
const PlaceholderArchive_Kind PlaceholderArchive::Kind_MAX;
const int PlaceholderArchive::Kind_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PlaceholderArchive::kSuperFieldNumber;
const int PlaceholderArchive::kKindFieldNumber;
#endif  // !_MSC_VER

PlaceholderArchive::PlaceholderArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlaceholderArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::ShapeInfoArchive*>(&::TSWP::ShapeInfoArchive::default_instance());
}

PlaceholderArchive::PlaceholderArchive(const PlaceholderArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlaceholderArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  kind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlaceholderArchive::~PlaceholderArchive() {
  SharedDtor();
}

void PlaceholderArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void PlaceholderArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaceholderArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaceholderArchive_descriptor_;
}

const PlaceholderArchive& PlaceholderArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

PlaceholderArchive* PlaceholderArchive::default_instance_ = NULL;

PlaceholderArchive* PlaceholderArchive::New() const {
  return new PlaceholderArchive;
}

void PlaceholderArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::ShapeInfoArchive::Clear();
    }
    kind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlaceholderArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSWP.ShapeInfoArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kind;
        break;
      }

      // optional .KN.PlaceholderArchive.Kind kind = 2 [default = kKindPlaceholder];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::KN::PlaceholderArchive_Kind_IsValid(value)) {
            set_kind(static_cast< ::KN::PlaceholderArchive_Kind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlaceholderArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSWP.ShapeInfoArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .KN.PlaceholderArchive.Kind kind = 2 [default = kKindPlaceholder];
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->kind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlaceholderArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSWP.ShapeInfoArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .KN.PlaceholderArchive.Kind kind = 2 [default = kKindPlaceholder];
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->kind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlaceholderArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSWP.ShapeInfoArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .KN.PlaceholderArchive.Kind kind = 2 [default = kKindPlaceholder];
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaceholderArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlaceholderArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlaceholderArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlaceholderArchive::MergeFrom(const PlaceholderArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::ShapeInfoArchive::MergeFrom(from.super());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlaceholderArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceholderArchive::CopyFrom(const PlaceholderArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceholderArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void PlaceholderArchive::Swap(PlaceholderArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(kind_, other->kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlaceholderArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlaceholderArchive_descriptor_;
  metadata.reflection = PlaceholderArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NoteArchive::kContainedStorageFieldNumber;
#endif  // !_MSC_VER

NoteArchive::NoteArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NoteArchive::InitAsDefaultInstance() {
  containedstorage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

NoteArchive::NoteArchive(const NoteArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NoteArchive::SharedCtor() {
  _cached_size_ = 0;
  containedstorage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NoteArchive::~NoteArchive() {
  SharedDtor();
}

void NoteArchive::SharedDtor() {
  if (this != default_instance_) {
    delete containedstorage_;
  }
}

void NoteArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoteArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoteArchive_descriptor_;
}

const NoteArchive& NoteArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

NoteArchive* NoteArchive::default_instance_ = NULL;

NoteArchive* NoteArchive::New() const {
  return new NoteArchive;
}

void NoteArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_containedstorage()) {
      if (containedstorage_ != NULL) containedstorage_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NoteArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Reference containedStorage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_containedstorage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NoteArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Reference containedStorage = 1;
  if (has_containedstorage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->containedstorage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NoteArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Reference containedStorage = 1;
  if (has_containedstorage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->containedstorage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NoteArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.Reference containedStorage = 1;
    if (has_containedstorage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->containedstorage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoteArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NoteArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NoteArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NoteArchive::MergeFrom(const NoteArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_containedstorage()) {
      mutable_containedstorage()->::TSP::Reference::MergeFrom(from.containedstorage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NoteArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoteArchive::CopyFrom(const NoteArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoteArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_containedstorage()) {
    if (!this->containedstorage().IsInitialized()) return false;
  }
  return true;
}

void NoteArchive::Swap(NoteArchive* other) {
  if (other != this) {
    std::swap(containedstorage_, other->containedstorage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NoteArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NoteArchive_descriptor_;
  metadata.reflection = NoteArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClassicStylesheetRecordArchive::kIdentifierToStyleMapFieldNumber;
const int ClassicStylesheetRecordArchive::kThemeFieldNumber;
#endif  // !_MSC_VER

ClassicStylesheetRecordArchive::ClassicStylesheetRecordArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClassicStylesheetRecordArchive::InitAsDefaultInstance() {
  theme_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ClassicStylesheetRecordArchive::ClassicStylesheetRecordArchive(const ClassicStylesheetRecordArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClassicStylesheetRecordArchive::SharedCtor() {
  _cached_size_ = 0;
  theme_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClassicStylesheetRecordArchive::~ClassicStylesheetRecordArchive() {
  SharedDtor();
}

void ClassicStylesheetRecordArchive::SharedDtor() {
  if (this != default_instance_) {
    delete theme_;
  }
}

void ClassicStylesheetRecordArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClassicStylesheetRecordArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClassicStylesheetRecordArchive_descriptor_;
}

const ClassicStylesheetRecordArchive& ClassicStylesheetRecordArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

ClassicStylesheetRecordArchive* ClassicStylesheetRecordArchive::default_instance_ = NULL;

ClassicStylesheetRecordArchive* ClassicStylesheetRecordArchive::New() const {
  return new ClassicStylesheetRecordArchive;
}

void ClassicStylesheetRecordArchive::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_theme()) {
      if (theme_ != NULL) theme_->::TSP::Reference::Clear();
    }
  }
  identifier_to_style_map_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClassicStylesheetRecordArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_identifier_to_style_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_identifier_to_style_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_identifier_to_style_map;
        if (input->ExpectTag(18)) goto parse_theme;
        break;
      }

      // optional .TSP.Reference theme = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_theme()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClassicStylesheetRecordArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 1;
  for (int i = 0; i < this->identifier_to_style_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->identifier_to_style_map(i), output);
  }

  // optional .TSP.Reference theme = 2;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->theme(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClassicStylesheetRecordArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 1;
  for (int i = 0; i < this->identifier_to_style_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->identifier_to_style_map(i), target);
  }

  // optional .TSP.Reference theme = 2;
  if (has_theme()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->theme(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClassicStylesheetRecordArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .TSP.Reference theme = 2;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->theme());
    }

  }
  // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 1;
  total_size += 1 * this->identifier_to_style_map_size();
  for (int i = 0; i < this->identifier_to_style_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->identifier_to_style_map(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClassicStylesheetRecordArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClassicStylesheetRecordArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClassicStylesheetRecordArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClassicStylesheetRecordArchive::MergeFrom(const ClassicStylesheetRecordArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  identifier_to_style_map_.MergeFrom(from.identifier_to_style_map_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_theme()) {
      mutable_theme()->::TSP::Reference::MergeFrom(from.theme());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClassicStylesheetRecordArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassicStylesheetRecordArchive::CopyFrom(const ClassicStylesheetRecordArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassicStylesheetRecordArchive::IsInitialized() const {

  for (int i = 0; i < identifier_to_style_map_size(); i++) {
    if (!this->identifier_to_style_map(i).IsInitialized()) return false;
  }
  if (has_theme()) {
    if (!this->theme().IsInitialized()) return false;
  }
  return true;
}

void ClassicStylesheetRecordArchive::Swap(ClassicStylesheetRecordArchive* other) {
  if (other != this) {
    identifier_to_style_map_.Swap(&other->identifier_to_style_map_);
    std::swap(theme_, other->theme_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClassicStylesheetRecordArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClassicStylesheetRecordArchive_descriptor_;
  metadata.reflection = ClassicStylesheetRecordArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClassicThemeRecordArchive::kUuidFieldNumber;
const int ClassicThemeRecordArchive::kStylesheetRecordFieldNumber;
const int ClassicThemeRecordArchive::kMastersFieldNumber;
#endif  // !_MSC_VER

ClassicThemeRecordArchive::ClassicThemeRecordArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClassicThemeRecordArchive::InitAsDefaultInstance() {
  stylesheetrecord_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ClassicThemeRecordArchive::ClassicThemeRecordArchive(const ClassicThemeRecordArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClassicThemeRecordArchive::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stylesheetrecord_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClassicThemeRecordArchive::~ClassicThemeRecordArchive() {
  SharedDtor();
}

void ClassicThemeRecordArchive::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
    delete stylesheetrecord_;
  }
}

void ClassicThemeRecordArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClassicThemeRecordArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClassicThemeRecordArchive_descriptor_;
}

const ClassicThemeRecordArchive& ClassicThemeRecordArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

ClassicThemeRecordArchive* ClassicThemeRecordArchive::default_instance_ = NULL;

ClassicThemeRecordArchive* ClassicThemeRecordArchive::New() const {
  return new ClassicThemeRecordArchive;
}

void ClassicThemeRecordArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    if (has_stylesheetrecord()) {
      if (stylesheetrecord_ != NULL) stylesheetrecord_->::TSP::Reference::Clear();
    }
  }
  masters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClassicThemeRecordArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stylesheetRecord;
        break;
      }

      // optional .TSP.Reference stylesheetRecord = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stylesheetRecord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stylesheetrecord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_masters;
        break;
      }

      // repeated .TSP.Reference masters = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_masters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_masters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_masters;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClassicThemeRecordArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uuid(), output);
  }

  // optional .TSP.Reference stylesheetRecord = 2;
  if (has_stylesheetrecord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stylesheetrecord(), output);
  }

  // repeated .TSP.Reference masters = 3;
  for (int i = 0; i < this->masters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->masters(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClassicThemeRecordArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // optional .TSP.Reference stylesheetRecord = 2;
  if (has_stylesheetrecord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stylesheetrecord(), target);
  }

  // repeated .TSP.Reference masters = 3;
  for (int i = 0; i < this->masters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->masters(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClassicThemeRecordArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional .TSP.Reference stylesheetRecord = 2;
    if (has_stylesheetrecord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stylesheetrecord());
    }

  }
  // repeated .TSP.Reference masters = 3;
  total_size += 1 * this->masters_size();
  for (int i = 0; i < this->masters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->masters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClassicThemeRecordArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClassicThemeRecordArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClassicThemeRecordArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClassicThemeRecordArchive::MergeFrom(const ClassicThemeRecordArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  masters_.MergeFrom(from.masters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_stylesheetrecord()) {
      mutable_stylesheetrecord()->::TSP::Reference::MergeFrom(from.stylesheetrecord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClassicThemeRecordArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassicThemeRecordArchive::CopyFrom(const ClassicThemeRecordArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassicThemeRecordArchive::IsInitialized() const {

  if (has_stylesheetrecord()) {
    if (!this->stylesheetrecord().IsInitialized()) return false;
  }
  for (int i = 0; i < masters_size(); i++) {
    if (!this->masters(i).IsInitialized()) return false;
  }
  return true;
}

void ClassicThemeRecordArchive::Swap(ClassicThemeRecordArchive* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(stylesheetrecord_, other->stylesheetrecord_);
    masters_.Swap(&other->masters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClassicThemeRecordArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClassicThemeRecordArchive_descriptor_;
  metadata.reflection = ClassicThemeRecordArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SlideArchive_SageTagMapEntry::kTagFieldNumber;
const int SlideArchive_SageTagMapEntry::kInfoFieldNumber;
#endif  // !_MSC_VER

SlideArchive_SageTagMapEntry::SlideArchive_SageTagMapEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlideArchive_SageTagMapEntry::InitAsDefaultInstance() {
  info_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

SlideArchive_SageTagMapEntry::SlideArchive_SageTagMapEntry(const SlideArchive_SageTagMapEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlideArchive_SageTagMapEntry::SharedCtor() {
  _cached_size_ = 0;
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlideArchive_SageTagMapEntry::~SlideArchive_SageTagMapEntry() {
  SharedDtor();
}

void SlideArchive_SageTagMapEntry::SharedDtor() {
  if (tag_ != &::google::protobuf::internal::kEmptyString) {
    delete tag_;
  }
  if (this != default_instance_) {
    delete info_;
  }
}

void SlideArchive_SageTagMapEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlideArchive_SageTagMapEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlideArchive_SageTagMapEntry_descriptor_;
}

const SlideArchive_SageTagMapEntry& SlideArchive_SageTagMapEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

SlideArchive_SageTagMapEntry* SlideArchive_SageTagMapEntry::default_instance_ = NULL;

SlideArchive_SageTagMapEntry* SlideArchive_SageTagMapEntry::New() const {
  return new SlideArchive_SageTagMapEntry;
}

void SlideArchive_SageTagMapEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::kEmptyString) {
        tag_->clear();
      }
    }
    if (has_info()) {
      if (info_ != NULL) info_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlideArchive_SageTagMapEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string tag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // required .TSP.Reference info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlideArchive_SageTagMapEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tag(), output);
  }

  // required .TSP.Reference info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlideArchive_SageTagMapEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tag(), target);
  }

  // required .TSP.Reference info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlideArchive_SageTagMapEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // required .TSP.Reference info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlideArchive_SageTagMapEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlideArchive_SageTagMapEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlideArchive_SageTagMapEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlideArchive_SageTagMapEntry::MergeFrom(const SlideArchive_SageTagMapEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_info()) {
      mutable_info()->::TSP::Reference::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlideArchive_SageTagMapEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlideArchive_SageTagMapEntry::CopyFrom(const SlideArchive_SageTagMapEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideArchive_SageTagMapEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void SlideArchive_SageTagMapEntry::Swap(SlideArchive_SageTagMapEntry* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlideArchive_SageTagMapEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlideArchive_SageTagMapEntry_descriptor_;
  metadata.reflection = SlideArchive_SageTagMapEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SlideArchive::kStyleFieldNumber;
const int SlideArchive::kBuildsFieldNumber;
const int SlideArchive::kBuildChunksFieldNumber;
const int SlideArchive::kTransitionFieldNumber;
const int SlideArchive::kTitlePlaceholderFieldNumber;
const int SlideArchive::kBodyPlaceholderFieldNumber;
const int SlideArchive::kObjectPlaceholderFieldNumber;
const int SlideArchive::kSlideNumberPlaceholderFieldNumber;
const int SlideArchive::kOwnedDrawablesFieldNumber;
const int SlideArchive::kDrawablesZOrderFieldNumber;
const int SlideArchive::kSageTagToInfoMapFieldNumber;
const int SlideArchive::kNameFieldNumber;
const int SlideArchive::kTitlePlaceholderGeometryFieldNumber;
const int SlideArchive::kTitlePlaceholderShapeStyleIndexFieldNumber;
const int SlideArchive::kTitlePlaceholderTextStyleIndexFieldNumber;
const int SlideArchive::kTitleLayoutPropertiesFieldNumber;
const int SlideArchive::kBodyPlaceholderGeometryFieldNumber;
const int SlideArchive::kBodyPlaceholderShapeStyleIndexFieldNumber;
const int SlideArchive::kBodyPlaceholderTextStyleIndexFieldNumber;
const int SlideArchive::kBodyLayoutPropertiesFieldNumber;
const int SlideArchive::kSlideNumberPlaceholderGeometryFieldNumber;
const int SlideArchive::kSlideNumberPlaceholderShapeStyleIndexFieldNumber;
const int SlideArchive::kSlideNumberPlaceholderTextStyleIndexFieldNumber;
const int SlideArchive::kSlideNumberLayoutPropertiesFieldNumber;
const int SlideArchive::kClassicStylesheetRecordFieldNumber;
const int SlideArchive::kBodyParagraphStylesFieldNumber;
const int SlideArchive::kBodyListStylesFieldNumber;
const int SlideArchive::kThumbnailTextForTitlePlaceholderFieldNumber;
const int SlideArchive::kThumbnailTextForBodyPlaceholderFieldNumber;
const int SlideArchive::kSlideObjectsLayerWithMasterFieldNumber;
const int SlideArchive::kMasterFieldNumber;
const int SlideArchive::kStaticGuidesFieldNumber;
const int SlideArchive::kUserDefinedGuideStorageFieldNumber;
const int SlideArchive::kInDocumentFieldNumber;
const int SlideArchive::kNoteFieldNumber;
const int SlideArchive::kInfoUsingObjectPlaceholderGeometryFieldNumber;
const int SlideArchive::kInfoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometryFieldNumber;
const int SlideArchive::kDeprecatedObjectPlaceholderVisibleForExportFieldNumber;
#endif  // !_MSC_VER

SlideArchive::SlideArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlideArchive::InitAsDefaultInstance() {
  style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  transition_ = const_cast< ::KN::TransitionArchive*>(&::KN::TransitionArchive::default_instance());
  titleplaceholder_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  bodyplaceholder_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  objectplaceholder_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  slidenumberplaceholder_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  titleplaceholdergeometry_ = const_cast< ::TSD::GeometryArchive*>(&::TSD::GeometryArchive::default_instance());
  titlelayoutproperties_ = const_cast< ::TSWP::ShapeStylePropertiesArchive*>(&::TSWP::ShapeStylePropertiesArchive::default_instance());
  bodyplaceholdergeometry_ = const_cast< ::TSD::GeometryArchive*>(&::TSD::GeometryArchive::default_instance());
  bodylayoutproperties_ = const_cast< ::TSWP::ShapeStylePropertiesArchive*>(&::TSWP::ShapeStylePropertiesArchive::default_instance());
  slidenumberplaceholdergeometry_ = const_cast< ::TSD::GeometryArchive*>(&::TSD::GeometryArchive::default_instance());
  slidenumberlayoutproperties_ = const_cast< ::TSWP::ShapeStylePropertiesArchive*>(&::TSWP::ShapeStylePropertiesArchive::default_instance());
  classicstylesheetrecord_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  master_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  userdefinedguidestorage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  note_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  info_using_object_placeholder_geometry_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

SlideArchive::SlideArchive(const SlideArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlideArchive::SharedCtor() {
  _cached_size_ = 0;
  style_ = NULL;
  transition_ = NULL;
  titleplaceholder_ = NULL;
  bodyplaceholder_ = NULL;
  objectplaceholder_ = NULL;
  slidenumberplaceholder_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  titleplaceholdergeometry_ = NULL;
  titleplaceholdershapestyleindex_ = 0u;
  titleplaceholdertextstyleindex_ = 0u;
  titlelayoutproperties_ = NULL;
  bodyplaceholdergeometry_ = NULL;
  bodyplaceholdershapestyleindex_ = 0u;
  bodyplaceholdertextstyleindex_ = 0u;
  bodylayoutproperties_ = NULL;
  slidenumberplaceholdergeometry_ = NULL;
  slidenumberplaceholdershapestyleindex_ = 0u;
  slidenumberplaceholdertextstyleindex_ = 0u;
  slidenumberlayoutproperties_ = NULL;
  classicstylesheetrecord_ = NULL;
  thumbnailtextfortitleplaceholder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  thumbnailtextforbodyplaceholder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  slideobjectslayerwithmaster_ = false;
  master_ = NULL;
  userdefinedguidestorage_ = NULL;
  indocument_ = false;
  note_ = NULL;
  info_using_object_placeholder_geometry_ = NULL;
  info_using_object_placeholder_geometry_matches_object_placeholder_geometry_ = false;
  deprecated_objectplaceholdervisibleforexport_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlideArchive::~SlideArchive() {
  SharedDtor();
}

void SlideArchive::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (thumbnailtextfortitleplaceholder_ != &::google::protobuf::internal::kEmptyString) {
    delete thumbnailtextfortitleplaceholder_;
  }
  if (thumbnailtextforbodyplaceholder_ != &::google::protobuf::internal::kEmptyString) {
    delete thumbnailtextforbodyplaceholder_;
  }
  if (this != default_instance_) {
    delete style_;
    delete transition_;
    delete titleplaceholder_;
    delete bodyplaceholder_;
    delete objectplaceholder_;
    delete slidenumberplaceholder_;
    delete titleplaceholdergeometry_;
    delete titlelayoutproperties_;
    delete bodyplaceholdergeometry_;
    delete bodylayoutproperties_;
    delete slidenumberplaceholdergeometry_;
    delete slidenumberlayoutproperties_;
    delete classicstylesheetrecord_;
    delete master_;
    delete userdefinedguidestorage_;
    delete note_;
    delete info_using_object_placeholder_geometry_;
  }
}

void SlideArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlideArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlideArchive_descriptor_;
}

const SlideArchive& SlideArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

SlideArchive* SlideArchive::default_instance_ = NULL;

SlideArchive* SlideArchive::New() const {
  return new SlideArchive;
}

void SlideArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_style()) {
      if (style_ != NULL) style_->::TSP::Reference::Clear();
    }
    if (has_transition()) {
      if (transition_ != NULL) transition_->::KN::TransitionArchive::Clear();
    }
    if (has_titleplaceholder()) {
      if (titleplaceholder_ != NULL) titleplaceholder_->::TSP::Reference::Clear();
    }
    if (has_bodyplaceholder()) {
      if (bodyplaceholder_ != NULL) bodyplaceholder_->::TSP::Reference::Clear();
    }
    if (has_objectplaceholder()) {
      if (objectplaceholder_ != NULL) objectplaceholder_->::TSP::Reference::Clear();
    }
    if (has_slidenumberplaceholder()) {
      if (slidenumberplaceholder_ != NULL) slidenumberplaceholder_->::TSP::Reference::Clear();
    }
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_titleplaceholdergeometry()) {
      if (titleplaceholdergeometry_ != NULL) titleplaceholdergeometry_->::TSD::GeometryArchive::Clear();
    }
    titleplaceholdershapestyleindex_ = 0u;
    titleplaceholdertextstyleindex_ = 0u;
    if (has_titlelayoutproperties()) {
      if (titlelayoutproperties_ != NULL) titlelayoutproperties_->::TSWP::ShapeStylePropertiesArchive::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_bodyplaceholdergeometry()) {
      if (bodyplaceholdergeometry_ != NULL) bodyplaceholdergeometry_->::TSD::GeometryArchive::Clear();
    }
    bodyplaceholdershapestyleindex_ = 0u;
    bodyplaceholdertextstyleindex_ = 0u;
    if (has_bodylayoutproperties()) {
      if (bodylayoutproperties_ != NULL) bodylayoutproperties_->::TSWP::ShapeStylePropertiesArchive::Clear();
    }
    if (has_slidenumberplaceholdergeometry()) {
      if (slidenumberplaceholdergeometry_ != NULL) slidenumberplaceholdergeometry_->::TSD::GeometryArchive::Clear();
    }
    slidenumberplaceholdershapestyleindex_ = 0u;
    slidenumberplaceholdertextstyleindex_ = 0u;
    if (has_slidenumberlayoutproperties()) {
      if (slidenumberlayoutproperties_ != NULL) slidenumberlayoutproperties_->::TSWP::ShapeStylePropertiesArchive::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_classicstylesheetrecord()) {
      if (classicstylesheetrecord_ != NULL) classicstylesheetrecord_->::TSP::Reference::Clear();
    }
    if (has_thumbnailtextfortitleplaceholder()) {
      if (thumbnailtextfortitleplaceholder_ != &::google::protobuf::internal::kEmptyString) {
        thumbnailtextfortitleplaceholder_->clear();
      }
    }
    if (has_thumbnailtextforbodyplaceholder()) {
      if (thumbnailtextforbodyplaceholder_ != &::google::protobuf::internal::kEmptyString) {
        thumbnailtextforbodyplaceholder_->clear();
      }
    }
    slideobjectslayerwithmaster_ = false;
    if (has_master()) {
      if (master_ != NULL) master_->::TSP::Reference::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_userdefinedguidestorage()) {
      if (userdefinedguidestorage_ != NULL) userdefinedguidestorage_->::TSP::Reference::Clear();
    }
    indocument_ = false;
    if (has_note()) {
      if (note_ != NULL) note_->::TSP::Reference::Clear();
    }
    if (has_info_using_object_placeholder_geometry()) {
      if (info_using_object_placeholder_geometry_ != NULL) info_using_object_placeholder_geometry_->::TSP::Reference::Clear();
    }
    info_using_object_placeholder_geometry_matches_object_placeholder_geometry_ = false;
    deprecated_objectplaceholdervisibleforexport_ = false;
  }
  builds_.Clear();
  buildchunks_.Clear();
  owned_drawables_.Clear();
  drawables_z_order_.Clear();
  sage_tag_to_info_map_.Clear();
  bodyparagraphstyles_.Clear();
  bodyliststyles_.Clear();
  staticguides_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlideArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Reference style = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_builds;
        break;
      }

      // repeated .TSP.Reference builds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_builds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_builds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_builds;
        if (input->ExpectTag(26)) goto parse_buildChunks;
        break;
      }

      // repeated .KN.BuildChunkArchive buildChunks = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildChunks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildchunks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_buildChunks;
        if (input->ExpectTag(34)) goto parse_transition;
        break;
      }

      // required .KN.TransitionArchive transition = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_titlePlaceholder;
        break;
      }

      // optional .TSP.Reference titlePlaceholder = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titlePlaceholder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_titleplaceholder()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bodyPlaceholder;
        break;
      }

      // optional .TSP.Reference bodyPlaceholder = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bodyPlaceholder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bodyplaceholder()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_owned_drawables;
        break;
      }

      // repeated .TSP.Reference owned_drawables = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owned_drawables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_owned_drawables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_owned_drawables;
        if (input->ExpectTag(82)) goto parse_name;
        break;
      }

      // optional string name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_titlePlaceholderGeometry;
        break;
      }

      // optional .TSD.GeometryArchive titlePlaceholderGeometry = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titlePlaceholderGeometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_titleplaceholdergeometry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_titlePlaceholderShapeStyleIndex;
        break;
      }

      // optional uint32 titlePlaceholderShapeStyleIndex = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titlePlaceholderShapeStyleIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &titleplaceholdershapestyleindex_)));
          set_has_titleplaceholdershapestyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_titlePlaceholderTextStyleIndex;
        break;
      }

      // optional uint32 titlePlaceholderTextStyleIndex = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titlePlaceholderTextStyleIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &titleplaceholdertextstyleindex_)));
          set_has_titleplaceholdertextstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_bodyPlaceholderGeometry;
        break;
      }

      // optional .TSD.GeometryArchive bodyPlaceholderGeometry = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bodyPlaceholderGeometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bodyplaceholdergeometry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_bodyPlaceholderShapeStyleIndex;
        break;
      }

      // optional uint32 bodyPlaceholderShapeStyleIndex = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bodyPlaceholderShapeStyleIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bodyplaceholdershapestyleindex_)));
          set_has_bodyplaceholdershapestyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_bodyPlaceholderTextStyleIndex;
        break;
      }

      // optional uint32 bodyPlaceholderTextStyleIndex = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bodyPlaceholderTextStyleIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bodyplaceholdertextstyleindex_)));
          set_has_bodyplaceholdertextstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_master;
        break;
      }

      // optional .TSP.Reference master = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_master()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_staticGuides;
        break;
      }

      // repeated .TSD.GuideArchive staticGuides = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_staticGuides:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_staticguides()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_staticGuides;
        if (input->ExpectTag(152)) goto parse_inDocument;
        break;
      }

      // required bool inDocument = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inDocument:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &indocument_)));
          set_has_indocument();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_slideNumberPlaceholder;
        break;
      }

      // optional .TSP.Reference slideNumberPlaceholder = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slideNumberPlaceholder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slidenumberplaceholder()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_slideNumberPlaceholderGeometry;
        break;
      }

      // optional .TSD.GeometryArchive slideNumberPlaceholderGeometry = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slideNumberPlaceholderGeometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slidenumberplaceholdergeometry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_slideNumberPlaceholderShapeStyleIndex;
        break;
      }

      // optional uint32 slideNumberPlaceholderShapeStyleIndex = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slideNumberPlaceholderShapeStyleIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slidenumberplaceholdershapestyleindex_)));
          set_has_slidenumberplaceholdershapestyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_slideNumberPlaceholderTextStyleIndex;
        break;
      }

      // optional uint32 slideNumberPlaceholderTextStyleIndex = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slideNumberPlaceholderTextStyleIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slidenumberplaceholdertextstyleindex_)));
          set_has_slidenumberplaceholdertextstyleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_titleLayoutProperties;
        break;
      }

      // optional .TSWP.ShapeStylePropertiesArchive titleLayoutProperties = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titleLayoutProperties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_titlelayoutproperties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_bodyLayoutProperties;
        break;
      }

      // optional .TSWP.ShapeStylePropertiesArchive bodyLayoutProperties = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bodyLayoutProperties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bodylayoutproperties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_slideNumberLayoutProperties;
        break;
      }

      // optional .TSWP.ShapeStylePropertiesArchive slideNumberLayoutProperties = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slideNumberLayoutProperties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slidenumberlayoutproperties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_note;
        break;
      }

      // optional .TSP.Reference note = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_note:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_note()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_sage_tag_to_info_map;
        break;
      }

      // repeated .KN.SlideArchive.SageTagMapEntry sage_tag_to_info_map = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sage_tag_to_info_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sage_tag_to_info_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_sage_tag_to_info_map;
        if (input->ExpectTag(234)) goto parse_classicStylesheetRecord;
        break;
      }

      // optional .TSP.Reference classicStylesheetRecord = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classicStylesheetRecord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_classicstylesheetrecord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_objectPlaceholder;
        break;
      }

      // optional .TSP.Reference objectPlaceholder = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objectPlaceholder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_objectplaceholder()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_bodyParagraphStyles;
        break;
      }

      // repeated .TSP.Reference bodyParagraphStyles = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bodyParagraphStyles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bodyparagraphstyles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_bodyParagraphStyles;
        if (input->ExpectTag(272)) goto parse_deprecated_objectPlaceholderVisibleForExport;
        break;
      }

      // optional bool deprecated_objectPlaceholderVisibleForExport = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deprecated_objectPlaceholderVisibleForExport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deprecated_objectplaceholdervisibleforexport_)));
          set_has_deprecated_objectplaceholdervisibleforexport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_bodyListStyles;
        break;
      }

      // repeated .TSP.Reference bodyListStyles = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bodyListStyles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bodyliststyles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_bodyListStyles;
        if (input->ExpectTag(290)) goto parse_userDefinedGuideStorage;
        break;
      }

      // optional .TSP.Reference userDefinedGuideStorage = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userDefinedGuideStorage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userdefinedguidestorage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_thumbnailTextForTitlePlaceholder;
        break;
      }

      // optional string thumbnailTextForTitlePlaceholder = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thumbnailTextForTitlePlaceholder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbnailtextfortitleplaceholder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->thumbnailtextfortitleplaceholder().data(), this->thumbnailtextfortitleplaceholder().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_thumbnailTextForBodyPlaceholder;
        break;
      }

      // optional string thumbnailTextForBodyPlaceholder = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thumbnailTextForBodyPlaceholder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbnailtextforbodyplaceholder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->thumbnailtextforbodyplaceholder().data(), this->thumbnailtextforbodyplaceholder().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_info_using_object_placeholder_geometry;
        break;
      }

      // optional .TSP.Reference info_using_object_placeholder_geometry = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_using_object_placeholder_geometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info_using_object_placeholder_geometry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_info_using_object_placeholder_geometry_matches_object_placeholder_geometry;
        break;
      }

      // optional bool info_using_object_placeholder_geometry_matches_object_placeholder_geometry = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info_using_object_placeholder_geometry_matches_object_placeholder_geometry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &info_using_object_placeholder_geometry_matches_object_placeholder_geometry_)));
          set_has_info_using_object_placeholder_geometry_matches_object_placeholder_geometry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_slideObjectsLayerWithMaster;
        break;
      }

      // optional bool slideObjectsLayerWithMaster = 41 [default = false];
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slideObjectsLayerWithMaster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &slideobjectslayerwithmaster_)));
          set_has_slideobjectslayerwithmaster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_drawables_z_order;
        break;
      }

      // repeated .TSP.Reference drawables_z_order = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drawables_z_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drawables_z_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_drawables_z_order;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlideArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Reference style = 1;
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->style(), output);
  }

  // repeated .TSP.Reference builds = 2;
  for (int i = 0; i < this->builds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->builds(i), output);
  }

  // repeated .KN.BuildChunkArchive buildChunks = 3;
  for (int i = 0; i < this->buildchunks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buildchunks(i), output);
  }

  // required .KN.TransitionArchive transition = 4;
  if (has_transition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->transition(), output);
  }

  // optional .TSP.Reference titlePlaceholder = 5;
  if (has_titleplaceholder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->titleplaceholder(), output);
  }

  // optional .TSP.Reference bodyPlaceholder = 6;
  if (has_bodyplaceholder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->bodyplaceholder(), output);
  }

  // repeated .TSP.Reference owned_drawables = 7;
  for (int i = 0; i < this->owned_drawables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->owned_drawables(i), output);
  }

  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->name(), output);
  }

  // optional .TSD.GeometryArchive titlePlaceholderGeometry = 11;
  if (has_titleplaceholdergeometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->titleplaceholdergeometry(), output);
  }

  // optional uint32 titlePlaceholderShapeStyleIndex = 12;
  if (has_titleplaceholdershapestyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->titleplaceholdershapestyleindex(), output);
  }

  // optional uint32 titlePlaceholderTextStyleIndex = 13;
  if (has_titleplaceholdertextstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->titleplaceholdertextstyleindex(), output);
  }

  // optional .TSD.GeometryArchive bodyPlaceholderGeometry = 14;
  if (has_bodyplaceholdergeometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->bodyplaceholdergeometry(), output);
  }

  // optional uint32 bodyPlaceholderShapeStyleIndex = 15;
  if (has_bodyplaceholdershapestyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->bodyplaceholdershapestyleindex(), output);
  }

  // optional uint32 bodyPlaceholderTextStyleIndex = 16;
  if (has_bodyplaceholdertextstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->bodyplaceholdertextstyleindex(), output);
  }

  // optional .TSP.Reference master = 17;
  if (has_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->master(), output);
  }

  // repeated .TSD.GuideArchive staticGuides = 18;
  for (int i = 0; i < this->staticguides_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->staticguides(i), output);
  }

  // required bool inDocument = 19;
  if (has_indocument()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->indocument(), output);
  }

  // optional .TSP.Reference slideNumberPlaceholder = 20;
  if (has_slidenumberplaceholder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->slidenumberplaceholder(), output);
  }

  // optional .TSD.GeometryArchive slideNumberPlaceholderGeometry = 21;
  if (has_slidenumberplaceholdergeometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->slidenumberplaceholdergeometry(), output);
  }

  // optional uint32 slideNumberPlaceholderShapeStyleIndex = 22;
  if (has_slidenumberplaceholdershapestyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->slidenumberplaceholdershapestyleindex(), output);
  }

  // optional uint32 slideNumberPlaceholderTextStyleIndex = 23;
  if (has_slidenumberplaceholdertextstyleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->slidenumberplaceholdertextstyleindex(), output);
  }

  // optional .TSWP.ShapeStylePropertiesArchive titleLayoutProperties = 24;
  if (has_titlelayoutproperties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->titlelayoutproperties(), output);
  }

  // optional .TSWP.ShapeStylePropertiesArchive bodyLayoutProperties = 25;
  if (has_bodylayoutproperties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->bodylayoutproperties(), output);
  }

  // optional .TSWP.ShapeStylePropertiesArchive slideNumberLayoutProperties = 26;
  if (has_slidenumberlayoutproperties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->slidenumberlayoutproperties(), output);
  }

  // optional .TSP.Reference note = 27;
  if (has_note()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->note(), output);
  }

  // repeated .KN.SlideArchive.SageTagMapEntry sage_tag_to_info_map = 28;
  for (int i = 0; i < this->sage_tag_to_info_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->sage_tag_to_info_map(i), output);
  }

  // optional .TSP.Reference classicStylesheetRecord = 29;
  if (has_classicstylesheetrecord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->classicstylesheetrecord(), output);
  }

  // optional .TSP.Reference objectPlaceholder = 30;
  if (has_objectplaceholder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->objectplaceholder(), output);
  }

  // repeated .TSP.Reference bodyParagraphStyles = 31;
  for (int i = 0; i < this->bodyparagraphstyles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->bodyparagraphstyles(i), output);
  }

  // optional bool deprecated_objectPlaceholderVisibleForExport = 34;
  if (has_deprecated_objectplaceholdervisibleforexport()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->deprecated_objectplaceholdervisibleforexport(), output);
  }

  // repeated .TSP.Reference bodyListStyles = 35;
  for (int i = 0; i < this->bodyliststyles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->bodyliststyles(i), output);
  }

  // optional .TSP.Reference userDefinedGuideStorage = 36;
  if (has_userdefinedguidestorage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->userdefinedguidestorage(), output);
  }

  // optional string thumbnailTextForTitlePlaceholder = 37;
  if (has_thumbnailtextfortitleplaceholder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->thumbnailtextfortitleplaceholder().data(), this->thumbnailtextfortitleplaceholder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      37, this->thumbnailtextfortitleplaceholder(), output);
  }

  // optional string thumbnailTextForBodyPlaceholder = 38;
  if (has_thumbnailtextforbodyplaceholder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->thumbnailtextforbodyplaceholder().data(), this->thumbnailtextforbodyplaceholder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      38, this->thumbnailtextforbodyplaceholder(), output);
  }

  // optional .TSP.Reference info_using_object_placeholder_geometry = 39;
  if (has_info_using_object_placeholder_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->info_using_object_placeholder_geometry(), output);
  }

  // optional bool info_using_object_placeholder_geometry_matches_object_placeholder_geometry = 40;
  if (has_info_using_object_placeholder_geometry_matches_object_placeholder_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->info_using_object_placeholder_geometry_matches_object_placeholder_geometry(), output);
  }

  // optional bool slideObjectsLayerWithMaster = 41 [default = false];
  if (has_slideobjectslayerwithmaster()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->slideobjectslayerwithmaster(), output);
  }

  // repeated .TSP.Reference drawables_z_order = 42;
  for (int i = 0; i < this->drawables_z_order_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->drawables_z_order(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlideArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Reference style = 1;
  if (has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->style(), target);
  }

  // repeated .TSP.Reference builds = 2;
  for (int i = 0; i < this->builds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->builds(i), target);
  }

  // repeated .KN.BuildChunkArchive buildChunks = 3;
  for (int i = 0; i < this->buildchunks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->buildchunks(i), target);
  }

  // required .KN.TransitionArchive transition = 4;
  if (has_transition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->transition(), target);
  }

  // optional .TSP.Reference titlePlaceholder = 5;
  if (has_titleplaceholder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->titleplaceholder(), target);
  }

  // optional .TSP.Reference bodyPlaceholder = 6;
  if (has_bodyplaceholder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->bodyplaceholder(), target);
  }

  // repeated .TSP.Reference owned_drawables = 7;
  for (int i = 0; i < this->owned_drawables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->owned_drawables(i), target);
  }

  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional .TSD.GeometryArchive titlePlaceholderGeometry = 11;
  if (has_titleplaceholdergeometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->titleplaceholdergeometry(), target);
  }

  // optional uint32 titlePlaceholderShapeStyleIndex = 12;
  if (has_titleplaceholdershapestyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->titleplaceholdershapestyleindex(), target);
  }

  // optional uint32 titlePlaceholderTextStyleIndex = 13;
  if (has_titleplaceholdertextstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->titleplaceholdertextstyleindex(), target);
  }

  // optional .TSD.GeometryArchive bodyPlaceholderGeometry = 14;
  if (has_bodyplaceholdergeometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->bodyplaceholdergeometry(), target);
  }

  // optional uint32 bodyPlaceholderShapeStyleIndex = 15;
  if (has_bodyplaceholdershapestyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->bodyplaceholdershapestyleindex(), target);
  }

  // optional uint32 bodyPlaceholderTextStyleIndex = 16;
  if (has_bodyplaceholdertextstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->bodyplaceholdertextstyleindex(), target);
  }

  // optional .TSP.Reference master = 17;
  if (has_master()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->master(), target);
  }

  // repeated .TSD.GuideArchive staticGuides = 18;
  for (int i = 0; i < this->staticguides_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->staticguides(i), target);
  }

  // required bool inDocument = 19;
  if (has_indocument()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->indocument(), target);
  }

  // optional .TSP.Reference slideNumberPlaceholder = 20;
  if (has_slidenumberplaceholder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->slidenumberplaceholder(), target);
  }

  // optional .TSD.GeometryArchive slideNumberPlaceholderGeometry = 21;
  if (has_slidenumberplaceholdergeometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->slidenumberplaceholdergeometry(), target);
  }

  // optional uint32 slideNumberPlaceholderShapeStyleIndex = 22;
  if (has_slidenumberplaceholdershapestyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->slidenumberplaceholdershapestyleindex(), target);
  }

  // optional uint32 slideNumberPlaceholderTextStyleIndex = 23;
  if (has_slidenumberplaceholdertextstyleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->slidenumberplaceholdertextstyleindex(), target);
  }

  // optional .TSWP.ShapeStylePropertiesArchive titleLayoutProperties = 24;
  if (has_titlelayoutproperties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->titlelayoutproperties(), target);
  }

  // optional .TSWP.ShapeStylePropertiesArchive bodyLayoutProperties = 25;
  if (has_bodylayoutproperties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->bodylayoutproperties(), target);
  }

  // optional .TSWP.ShapeStylePropertiesArchive slideNumberLayoutProperties = 26;
  if (has_slidenumberlayoutproperties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->slidenumberlayoutproperties(), target);
  }

  // optional .TSP.Reference note = 27;
  if (has_note()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->note(), target);
  }

  // repeated .KN.SlideArchive.SageTagMapEntry sage_tag_to_info_map = 28;
  for (int i = 0; i < this->sage_tag_to_info_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->sage_tag_to_info_map(i), target);
  }

  // optional .TSP.Reference classicStylesheetRecord = 29;
  if (has_classicstylesheetrecord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->classicstylesheetrecord(), target);
  }

  // optional .TSP.Reference objectPlaceholder = 30;
  if (has_objectplaceholder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->objectplaceholder(), target);
  }

  // repeated .TSP.Reference bodyParagraphStyles = 31;
  for (int i = 0; i < this->bodyparagraphstyles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->bodyparagraphstyles(i), target);
  }

  // optional bool deprecated_objectPlaceholderVisibleForExport = 34;
  if (has_deprecated_objectplaceholdervisibleforexport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->deprecated_objectplaceholdervisibleforexport(), target);
  }

  // repeated .TSP.Reference bodyListStyles = 35;
  for (int i = 0; i < this->bodyliststyles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->bodyliststyles(i), target);
  }

  // optional .TSP.Reference userDefinedGuideStorage = 36;
  if (has_userdefinedguidestorage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->userdefinedguidestorage(), target);
  }

  // optional string thumbnailTextForTitlePlaceholder = 37;
  if (has_thumbnailtextfortitleplaceholder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->thumbnailtextfortitleplaceholder().data(), this->thumbnailtextfortitleplaceholder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->thumbnailtextfortitleplaceholder(), target);
  }

  // optional string thumbnailTextForBodyPlaceholder = 38;
  if (has_thumbnailtextforbodyplaceholder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->thumbnailtextforbodyplaceholder().data(), this->thumbnailtextforbodyplaceholder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->thumbnailtextforbodyplaceholder(), target);
  }

  // optional .TSP.Reference info_using_object_placeholder_geometry = 39;
  if (has_info_using_object_placeholder_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->info_using_object_placeholder_geometry(), target);
  }

  // optional bool info_using_object_placeholder_geometry_matches_object_placeholder_geometry = 40;
  if (has_info_using_object_placeholder_geometry_matches_object_placeholder_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->info_using_object_placeholder_geometry_matches_object_placeholder_geometry(), target);
  }

  // optional bool slideObjectsLayerWithMaster = 41 [default = false];
  if (has_slideobjectslayerwithmaster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->slideobjectslayerwithmaster(), target);
  }

  // repeated .TSP.Reference drawables_z_order = 42;
  for (int i = 0; i < this->drawables_z_order_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->drawables_z_order(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlideArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.Reference style = 1;
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->style());
    }

    // required .KN.TransitionArchive transition = 4;
    if (has_transition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition());
    }

    // optional .TSP.Reference titlePlaceholder = 5;
    if (has_titleplaceholder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->titleplaceholder());
    }

    // optional .TSP.Reference bodyPlaceholder = 6;
    if (has_bodyplaceholder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bodyplaceholder());
    }

    // optional .TSP.Reference objectPlaceholder = 30;
    if (has_objectplaceholder()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objectplaceholder());
    }

    // optional .TSP.Reference slideNumberPlaceholder = 20;
    if (has_slidenumberplaceholder()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slidenumberplaceholder());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .TSD.GeometryArchive titlePlaceholderGeometry = 11;
    if (has_titleplaceholdergeometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->titleplaceholdergeometry());
    }

    // optional uint32 titlePlaceholderShapeStyleIndex = 12;
    if (has_titleplaceholdershapestyleindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->titleplaceholdershapestyleindex());
    }

    // optional uint32 titlePlaceholderTextStyleIndex = 13;
    if (has_titleplaceholdertextstyleindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->titleplaceholdertextstyleindex());
    }

    // optional .TSWP.ShapeStylePropertiesArchive titleLayoutProperties = 24;
    if (has_titlelayoutproperties()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->titlelayoutproperties());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .TSD.GeometryArchive bodyPlaceholderGeometry = 14;
    if (has_bodyplaceholdergeometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bodyplaceholdergeometry());
    }

    // optional uint32 bodyPlaceholderShapeStyleIndex = 15;
    if (has_bodyplaceholdershapestyleindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bodyplaceholdershapestyleindex());
    }

    // optional uint32 bodyPlaceholderTextStyleIndex = 16;
    if (has_bodyplaceholdertextstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bodyplaceholdertextstyleindex());
    }

    // optional .TSWP.ShapeStylePropertiesArchive bodyLayoutProperties = 25;
    if (has_bodylayoutproperties()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bodylayoutproperties());
    }

    // optional .TSD.GeometryArchive slideNumberPlaceholderGeometry = 21;
    if (has_slidenumberplaceholdergeometry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slidenumberplaceholdergeometry());
    }

    // optional uint32 slideNumberPlaceholderShapeStyleIndex = 22;
    if (has_slidenumberplaceholdershapestyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slidenumberplaceholdershapestyleindex());
    }

    // optional uint32 slideNumberPlaceholderTextStyleIndex = 23;
    if (has_slidenumberplaceholdertextstyleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slidenumberplaceholdertextstyleindex());
    }

    // optional .TSWP.ShapeStylePropertiesArchive slideNumberLayoutProperties = 26;
    if (has_slidenumberlayoutproperties()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slidenumberlayoutproperties());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .TSP.Reference classicStylesheetRecord = 29;
    if (has_classicstylesheetrecord()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->classicstylesheetrecord());
    }

    // optional string thumbnailTextForTitlePlaceholder = 37;
    if (has_thumbnailtextfortitleplaceholder()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumbnailtextfortitleplaceholder());
    }

    // optional string thumbnailTextForBodyPlaceholder = 38;
    if (has_thumbnailtextforbodyplaceholder()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumbnailtextforbodyplaceholder());
    }

    // optional bool slideObjectsLayerWithMaster = 41 [default = false];
    if (has_slideobjectslayerwithmaster()) {
      total_size += 2 + 1;
    }

    // optional .TSP.Reference master = 17;
    if (has_master()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->master());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .TSP.Reference userDefinedGuideStorage = 36;
    if (has_userdefinedguidestorage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userdefinedguidestorage());
    }

    // required bool inDocument = 19;
    if (has_indocument()) {
      total_size += 2 + 1;
    }

    // optional .TSP.Reference note = 27;
    if (has_note()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->note());
    }

    // optional .TSP.Reference info_using_object_placeholder_geometry = 39;
    if (has_info_using_object_placeholder_geometry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info_using_object_placeholder_geometry());
    }

    // optional bool info_using_object_placeholder_geometry_matches_object_placeholder_geometry = 40;
    if (has_info_using_object_placeholder_geometry_matches_object_placeholder_geometry()) {
      total_size += 2 + 1;
    }

    // optional bool deprecated_objectPlaceholderVisibleForExport = 34;
    if (has_deprecated_objectplaceholdervisibleforexport()) {
      total_size += 2 + 1;
    }

  }
  // repeated .TSP.Reference builds = 2;
  total_size += 1 * this->builds_size();
  for (int i = 0; i < this->builds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->builds(i));
  }

  // repeated .KN.BuildChunkArchive buildChunks = 3;
  total_size += 1 * this->buildchunks_size();
  for (int i = 0; i < this->buildchunks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buildchunks(i));
  }

  // repeated .TSP.Reference owned_drawables = 7;
  total_size += 1 * this->owned_drawables_size();
  for (int i = 0; i < this->owned_drawables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->owned_drawables(i));
  }

  // repeated .TSP.Reference drawables_z_order = 42;
  total_size += 2 * this->drawables_z_order_size();
  for (int i = 0; i < this->drawables_z_order_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drawables_z_order(i));
  }

  // repeated .KN.SlideArchive.SageTagMapEntry sage_tag_to_info_map = 28;
  total_size += 2 * this->sage_tag_to_info_map_size();
  for (int i = 0; i < this->sage_tag_to_info_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sage_tag_to_info_map(i));
  }

  // repeated .TSP.Reference bodyParagraphStyles = 31;
  total_size += 2 * this->bodyparagraphstyles_size();
  for (int i = 0; i < this->bodyparagraphstyles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bodyparagraphstyles(i));
  }

  // repeated .TSP.Reference bodyListStyles = 35;
  total_size += 2 * this->bodyliststyles_size();
  for (int i = 0; i < this->bodyliststyles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bodyliststyles(i));
  }

  // repeated .TSD.GuideArchive staticGuides = 18;
  total_size += 2 * this->staticguides_size();
  for (int i = 0; i < this->staticguides_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->staticguides(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlideArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlideArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlideArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlideArchive::MergeFrom(const SlideArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  builds_.MergeFrom(from.builds_);
  buildchunks_.MergeFrom(from.buildchunks_);
  owned_drawables_.MergeFrom(from.owned_drawables_);
  drawables_z_order_.MergeFrom(from.drawables_z_order_);
  sage_tag_to_info_map_.MergeFrom(from.sage_tag_to_info_map_);
  bodyparagraphstyles_.MergeFrom(from.bodyparagraphstyles_);
  bodyliststyles_.MergeFrom(from.bodyliststyles_);
  staticguides_.MergeFrom(from.staticguides_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_style()) {
      mutable_style()->::TSP::Reference::MergeFrom(from.style());
    }
    if (from.has_transition()) {
      mutable_transition()->::KN::TransitionArchive::MergeFrom(from.transition());
    }
    if (from.has_titleplaceholder()) {
      mutable_titleplaceholder()->::TSP::Reference::MergeFrom(from.titleplaceholder());
    }
    if (from.has_bodyplaceholder()) {
      mutable_bodyplaceholder()->::TSP::Reference::MergeFrom(from.bodyplaceholder());
    }
    if (from.has_objectplaceholder()) {
      mutable_objectplaceholder()->::TSP::Reference::MergeFrom(from.objectplaceholder());
    }
    if (from.has_slidenumberplaceholder()) {
      mutable_slidenumberplaceholder()->::TSP::Reference::MergeFrom(from.slidenumberplaceholder());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_titleplaceholdergeometry()) {
      mutable_titleplaceholdergeometry()->::TSD::GeometryArchive::MergeFrom(from.titleplaceholdergeometry());
    }
    if (from.has_titleplaceholdershapestyleindex()) {
      set_titleplaceholdershapestyleindex(from.titleplaceholdershapestyleindex());
    }
    if (from.has_titleplaceholdertextstyleindex()) {
      set_titleplaceholdertextstyleindex(from.titleplaceholdertextstyleindex());
    }
    if (from.has_titlelayoutproperties()) {
      mutable_titlelayoutproperties()->::TSWP::ShapeStylePropertiesArchive::MergeFrom(from.titlelayoutproperties());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bodyplaceholdergeometry()) {
      mutable_bodyplaceholdergeometry()->::TSD::GeometryArchive::MergeFrom(from.bodyplaceholdergeometry());
    }
    if (from.has_bodyplaceholdershapestyleindex()) {
      set_bodyplaceholdershapestyleindex(from.bodyplaceholdershapestyleindex());
    }
    if (from.has_bodyplaceholdertextstyleindex()) {
      set_bodyplaceholdertextstyleindex(from.bodyplaceholdertextstyleindex());
    }
    if (from.has_bodylayoutproperties()) {
      mutable_bodylayoutproperties()->::TSWP::ShapeStylePropertiesArchive::MergeFrom(from.bodylayoutproperties());
    }
    if (from.has_slidenumberplaceholdergeometry()) {
      mutable_slidenumberplaceholdergeometry()->::TSD::GeometryArchive::MergeFrom(from.slidenumberplaceholdergeometry());
    }
    if (from.has_slidenumberplaceholdershapestyleindex()) {
      set_slidenumberplaceholdershapestyleindex(from.slidenumberplaceholdershapestyleindex());
    }
    if (from.has_slidenumberplaceholdertextstyleindex()) {
      set_slidenumberplaceholdertextstyleindex(from.slidenumberplaceholdertextstyleindex());
    }
    if (from.has_slidenumberlayoutproperties()) {
      mutable_slidenumberlayoutproperties()->::TSWP::ShapeStylePropertiesArchive::MergeFrom(from.slidenumberlayoutproperties());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_classicstylesheetrecord()) {
      mutable_classicstylesheetrecord()->::TSP::Reference::MergeFrom(from.classicstylesheetrecord());
    }
    if (from.has_thumbnailtextfortitleplaceholder()) {
      set_thumbnailtextfortitleplaceholder(from.thumbnailtextfortitleplaceholder());
    }
    if (from.has_thumbnailtextforbodyplaceholder()) {
      set_thumbnailtextforbodyplaceholder(from.thumbnailtextforbodyplaceholder());
    }
    if (from.has_slideobjectslayerwithmaster()) {
      set_slideobjectslayerwithmaster(from.slideobjectslayerwithmaster());
    }
    if (from.has_master()) {
      mutable_master()->::TSP::Reference::MergeFrom(from.master());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_userdefinedguidestorage()) {
      mutable_userdefinedguidestorage()->::TSP::Reference::MergeFrom(from.userdefinedguidestorage());
    }
    if (from.has_indocument()) {
      set_indocument(from.indocument());
    }
    if (from.has_note()) {
      mutable_note()->::TSP::Reference::MergeFrom(from.note());
    }
    if (from.has_info_using_object_placeholder_geometry()) {
      mutable_info_using_object_placeholder_geometry()->::TSP::Reference::MergeFrom(from.info_using_object_placeholder_geometry());
    }
    if (from.has_info_using_object_placeholder_geometry_matches_object_placeholder_geometry()) {
      set_info_using_object_placeholder_geometry_matches_object_placeholder_geometry(from.info_using_object_placeholder_geometry_matches_object_placeholder_geometry());
    }
    if (from.has_deprecated_objectplaceholdervisibleforexport()) {
      set_deprecated_objectplaceholdervisibleforexport(from.deprecated_objectplaceholdervisibleforexport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlideArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlideArchive::CopyFrom(const SlideArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;
  if ((_has_bits_[1] & 0x00000002) != 0x00000002) return false;

  if (has_style()) {
    if (!this->style().IsInitialized()) return false;
  }
  for (int i = 0; i < builds_size(); i++) {
    if (!this->builds(i).IsInitialized()) return false;
  }
  for (int i = 0; i < buildchunks_size(); i++) {
    if (!this->buildchunks(i).IsInitialized()) return false;
  }
  if (has_transition()) {
    if (!this->transition().IsInitialized()) return false;
  }
  if (has_titleplaceholder()) {
    if (!this->titleplaceholder().IsInitialized()) return false;
  }
  if (has_bodyplaceholder()) {
    if (!this->bodyplaceholder().IsInitialized()) return false;
  }
  if (has_objectplaceholder()) {
    if (!this->objectplaceholder().IsInitialized()) return false;
  }
  if (has_slidenumberplaceholder()) {
    if (!this->slidenumberplaceholder().IsInitialized()) return false;
  }
  for (int i = 0; i < owned_drawables_size(); i++) {
    if (!this->owned_drawables(i).IsInitialized()) return false;
  }
  for (int i = 0; i < drawables_z_order_size(); i++) {
    if (!this->drawables_z_order(i).IsInitialized()) return false;
  }
  for (int i = 0; i < sage_tag_to_info_map_size(); i++) {
    if (!this->sage_tag_to_info_map(i).IsInitialized()) return false;
  }
  if (has_titleplaceholdergeometry()) {
    if (!this->titleplaceholdergeometry().IsInitialized()) return false;
  }
  if (has_titlelayoutproperties()) {
    if (!this->titlelayoutproperties().IsInitialized()) return false;
  }
  if (has_bodyplaceholdergeometry()) {
    if (!this->bodyplaceholdergeometry().IsInitialized()) return false;
  }
  if (has_bodylayoutproperties()) {
    if (!this->bodylayoutproperties().IsInitialized()) return false;
  }
  if (has_slidenumberplaceholdergeometry()) {
    if (!this->slidenumberplaceholdergeometry().IsInitialized()) return false;
  }
  if (has_slidenumberlayoutproperties()) {
    if (!this->slidenumberlayoutproperties().IsInitialized()) return false;
  }
  if (has_classicstylesheetrecord()) {
    if (!this->classicstylesheetrecord().IsInitialized()) return false;
  }
  for (int i = 0; i < bodyparagraphstyles_size(); i++) {
    if (!this->bodyparagraphstyles(i).IsInitialized()) return false;
  }
  for (int i = 0; i < bodyliststyles_size(); i++) {
    if (!this->bodyliststyles(i).IsInitialized()) return false;
  }
  if (has_master()) {
    if (!this->master().IsInitialized()) return false;
  }
  if (has_userdefinedguidestorage()) {
    if (!this->userdefinedguidestorage().IsInitialized()) return false;
  }
  if (has_note()) {
    if (!this->note().IsInitialized()) return false;
  }
  if (has_info_using_object_placeholder_geometry()) {
    if (!this->info_using_object_placeholder_geometry().IsInitialized()) return false;
  }
  return true;
}

void SlideArchive::Swap(SlideArchive* other) {
  if (other != this) {
    std::swap(style_, other->style_);
    builds_.Swap(&other->builds_);
    buildchunks_.Swap(&other->buildchunks_);
    std::swap(transition_, other->transition_);
    std::swap(titleplaceholder_, other->titleplaceholder_);
    std::swap(bodyplaceholder_, other->bodyplaceholder_);
    std::swap(objectplaceholder_, other->objectplaceholder_);
    std::swap(slidenumberplaceholder_, other->slidenumberplaceholder_);
    owned_drawables_.Swap(&other->owned_drawables_);
    drawables_z_order_.Swap(&other->drawables_z_order_);
    sage_tag_to_info_map_.Swap(&other->sage_tag_to_info_map_);
    std::swap(name_, other->name_);
    std::swap(titleplaceholdergeometry_, other->titleplaceholdergeometry_);
    std::swap(titleplaceholdershapestyleindex_, other->titleplaceholdershapestyleindex_);
    std::swap(titleplaceholdertextstyleindex_, other->titleplaceholdertextstyleindex_);
    std::swap(titlelayoutproperties_, other->titlelayoutproperties_);
    std::swap(bodyplaceholdergeometry_, other->bodyplaceholdergeometry_);
    std::swap(bodyplaceholdershapestyleindex_, other->bodyplaceholdershapestyleindex_);
    std::swap(bodyplaceholdertextstyleindex_, other->bodyplaceholdertextstyleindex_);
    std::swap(bodylayoutproperties_, other->bodylayoutproperties_);
    std::swap(slidenumberplaceholdergeometry_, other->slidenumberplaceholdergeometry_);
    std::swap(slidenumberplaceholdershapestyleindex_, other->slidenumberplaceholdershapestyleindex_);
    std::swap(slidenumberplaceholdertextstyleindex_, other->slidenumberplaceholdertextstyleindex_);
    std::swap(slidenumberlayoutproperties_, other->slidenumberlayoutproperties_);
    std::swap(classicstylesheetrecord_, other->classicstylesheetrecord_);
    bodyparagraphstyles_.Swap(&other->bodyparagraphstyles_);
    bodyliststyles_.Swap(&other->bodyliststyles_);
    std::swap(thumbnailtextfortitleplaceholder_, other->thumbnailtextfortitleplaceholder_);
    std::swap(thumbnailtextforbodyplaceholder_, other->thumbnailtextforbodyplaceholder_);
    std::swap(slideobjectslayerwithmaster_, other->slideobjectslayerwithmaster_);
    std::swap(master_, other->master_);
    staticguides_.Swap(&other->staticguides_);
    std::swap(userdefinedguidestorage_, other->userdefinedguidestorage_);
    std::swap(indocument_, other->indocument_);
    std::swap(note_, other->note_);
    std::swap(info_using_object_placeholder_geometry_, other->info_using_object_placeholder_geometry_);
    std::swap(info_using_object_placeholder_geometry_matches_object_placeholder_geometry_, other->info_using_object_placeholder_geometry_matches_object_placeholder_geometry_);
    std::swap(deprecated_objectplaceholdervisibleforexport_, other->deprecated_objectplaceholdervisibleforexport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlideArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlideArchive_descriptor_;
  metadata.reflection = SlideArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SlideNodeArchive::kChildrenFieldNumber;
const int SlideNodeArchive::kSlideFieldNumber;
const int SlideNodeArchive::kThumbnailsFieldNumber;
const int SlideNodeArchive::kThumbnailSizesFieldNumber;
const int SlideNodeArchive::kThumbnailsAreDirtyFieldNumber;
const int SlideNodeArchive::kIsHiddenFieldNumber;
const int SlideNodeArchive::kIsCollapsedFieldNumber;
const int SlideNodeArchive::kIsCollapsedInOutlineViewFieldNumber;
const int SlideNodeArchive::kHasBodyInOutlineViewFieldNumber;
const int SlideNodeArchive::kHasBuildsFieldNumber;
const int SlideNodeArchive::kHasTransitionFieldNumber;
const int SlideNodeArchive::kHasNoteFieldNumber;
const int SlideNodeArchive::kIsSlideNumberVisibleFieldNumber;
const int SlideNodeArchive::kUniqueIdentifierFieldNumber;
const int SlideNodeArchive::kCopyFromSlideIdentifierFieldNumber;
const int SlideNodeArchive::kSlideSpecificHyperlinkCountFieldNumber;
const int SlideNodeArchive::kEventCountFieldNumber;
const int SlideNodeArchive::kHasExplicitBuildsFieldNumber;
const int SlideNodeArchive::kDatabaseThumbnailFieldNumber;
const int SlideNodeArchive::kDatabaseThumbnailsFieldNumber;
#endif  // !_MSC_VER

SlideNodeArchive::SlideNodeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlideNodeArchive::InitAsDefaultInstance() {
  slide_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  database_thumbnail_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

SlideNodeArchive::SlideNodeArchive(const SlideNodeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlideNodeArchive::SharedCtor() {
  _cached_size_ = 0;
  slide_ = NULL;
  thumbnailsaredirty_ = false;
  ishidden_ = false;
  iscollapsed_ = false;
  iscollapsedinoutlineview_ = false;
  hasbodyinoutlineview_ = false;
  hasbuilds_ = false;
  hastransition_ = false;
  hasnote_ = false;
  isslidenumbervisible_ = false;
  uniqueidentifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  copyfromslideidentifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  slidespecifichyperlinkcount_ = 0u;
  eventcount_ = 0u;
  has_explicit_builds_ = false;
  database_thumbnail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlideNodeArchive::~SlideNodeArchive() {
  SharedDtor();
}

void SlideNodeArchive::SharedDtor() {
  if (uniqueidentifier_ != &::google::protobuf::internal::kEmptyString) {
    delete uniqueidentifier_;
  }
  if (copyfromslideidentifier_ != &::google::protobuf::internal::kEmptyString) {
    delete copyfromslideidentifier_;
  }
  if (this != default_instance_) {
    delete slide_;
    delete database_thumbnail_;
  }
}

void SlideNodeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlideNodeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlideNodeArchive_descriptor_;
}

const SlideNodeArchive& SlideNodeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

SlideNodeArchive* SlideNodeArchive::default_instance_ = NULL;

SlideNodeArchive* SlideNodeArchive::New() const {
  return new SlideNodeArchive;
}

void SlideNodeArchive::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_slide()) {
      if (slide_ != NULL) slide_->::TSP::Reference::Clear();
    }
    thumbnailsaredirty_ = false;
    ishidden_ = false;
    iscollapsed_ = false;
    iscollapsedinoutlineview_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hasbodyinoutlineview_ = false;
    hasbuilds_ = false;
    hastransition_ = false;
    hasnote_ = false;
    isslidenumbervisible_ = false;
    if (has_uniqueidentifier()) {
      if (uniqueidentifier_ != &::google::protobuf::internal::kEmptyString) {
        uniqueidentifier_->clear();
      }
    }
    if (has_copyfromslideidentifier()) {
      if (copyfromslideidentifier_ != &::google::protobuf::internal::kEmptyString) {
        copyfromslideidentifier_->clear();
      }
    }
    slidespecifichyperlinkcount_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    eventcount_ = 0u;
    has_explicit_builds_ = false;
    if (has_database_thumbnail()) {
      if (database_thumbnail_ != NULL) database_thumbnail_->::TSP::Reference::Clear();
    }
  }
  children_.Clear();
  thumbnails_.Clear();
  thumbnailsizes_.Clear();
  database_thumbnails_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlideNodeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSP.Reference children = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_children;
        if (input->ExpectTag(18)) goto parse_slide;
        break;
      }

      // optional .TSP.Reference slide = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slide:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slide()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_database_thumbnail;
        break;
      }

      // optional .TSP.Reference database_thumbnail = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_database_thumbnail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_database_thumbnail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isHidden;
        break;
      }

      // required bool isHidden = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isHidden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishidden_)));
          set_has_ishidden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isCollapsed;
        break;
      }

      // required bool isCollapsed = 5 [deprecated = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCollapsed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscollapsed_)));
          set_has_iscollapsed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hasBuilds;
        break;
      }

      // required bool hasBuilds = 6 [deprecated = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasBuilds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasbuilds_)));
          set_has_hasbuilds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hasTransition;
        break;
      }

      // required bool hasTransition = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasTransition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hastransition_)));
          set_has_hastransition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hasNote;
        break;
      }

      // optional bool hasNote = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasNote:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasnote_)));
          set_has_hasnote();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_database_thumbnails;
        break;
      }

      // repeated .TSP.Reference database_thumbnails = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_database_thumbnails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_database_thumbnails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_database_thumbnails;
        if (input->ExpectTag(82)) goto parse_thumbnailSizes;
        break;
      }

      // repeated .TSP.Size thumbnailSizes = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thumbnailSizes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_thumbnailsizes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_thumbnailSizes;
        if (input->ExpectTag(90)) goto parse_uniqueIdentifier;
        break;
      }

      // optional string uniqueIdentifier = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uniqueIdentifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniqueidentifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniqueidentifier().data(), this->uniqueidentifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_copyFromSlideIdentifier;
        break;
      }

      // optional string copyFromSlideIdentifier = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_copyFromSlideIdentifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_copyfromslideidentifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->copyfromslideidentifier().data(), this->copyfromslideidentifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_slideSpecificHyperlinkCount;
        break;
      }

      // optional uint32 slideSpecificHyperlinkCount = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slideSpecificHyperlinkCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slidespecifichyperlinkcount_)));
          set_has_slidespecifichyperlinkcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_thumbnailsAreDirty;
        break;
      }

      // optional bool thumbnailsAreDirty = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thumbnailsAreDirty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &thumbnailsaredirty_)));
          set_has_thumbnailsaredirty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_eventCount;
        break;
      }

      // optional uint32 eventCount = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventcount_)));
          set_has_eventcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_thumbnails;
        break;
      }

      // repeated .TSP.DataReference thumbnails = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thumbnails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_thumbnails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_thumbnails;
        if (input->ExpectTag(136)) goto parse_isCollapsedInOutlineView;
        break;
      }

      // optional bool isCollapsedInOutlineView = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCollapsedInOutlineView:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscollapsedinoutlineview_)));
          set_has_iscollapsedinoutlineview();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_isSlideNumberVisible;
        break;
      }

      // optional bool isSlideNumberVisible = 18 [default = false];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSlideNumberVisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isslidenumbervisible_)));
          set_has_isslidenumbervisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_hasBodyInOutlineView;
        break;
      }

      // optional bool hasBodyInOutlineView = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasBodyInOutlineView:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasbodyinoutlineview_)));
          set_has_hasbodyinoutlineview();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_has_explicit_builds;
        break;
      }

      // optional bool has_explicit_builds = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_explicit_builds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_explicit_builds_)));
          set_has_has_explicit_builds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlideNodeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSP.Reference children = 1;
  for (int i = 0; i < this->children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->children(i), output);
  }

  // optional .TSP.Reference slide = 2;
  if (has_slide()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slide(), output);
  }

  // optional .TSP.Reference database_thumbnail = 3;
  if (has_database_thumbnail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->database_thumbnail(), output);
  }

  // required bool isHidden = 4;
  if (has_ishidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ishidden(), output);
  }

  // required bool isCollapsed = 5 [deprecated = true];
  if (has_iscollapsed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->iscollapsed(), output);
  }

  // required bool hasBuilds = 6 [deprecated = true];
  if (has_hasbuilds()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->hasbuilds(), output);
  }

  // required bool hasTransition = 7;
  if (has_hastransition()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->hastransition(), output);
  }

  // optional bool hasNote = 8;
  if (has_hasnote()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->hasnote(), output);
  }

  // repeated .TSP.Reference database_thumbnails = 9;
  for (int i = 0; i < this->database_thumbnails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->database_thumbnails(i), output);
  }

  // repeated .TSP.Size thumbnailSizes = 10;
  for (int i = 0; i < this->thumbnailsizes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->thumbnailsizes(i), output);
  }

  // optional string uniqueIdentifier = 11;
  if (has_uniqueidentifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueidentifier().data(), this->uniqueidentifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->uniqueidentifier(), output);
  }

  // optional string copyFromSlideIdentifier = 12;
  if (has_copyfromslideidentifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->copyfromslideidentifier().data(), this->copyfromslideidentifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->copyfromslideidentifier(), output);
  }

  // optional uint32 slideSpecificHyperlinkCount = 13;
  if (has_slidespecifichyperlinkcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->slidespecifichyperlinkcount(), output);
  }

  // optional bool thumbnailsAreDirty = 14;
  if (has_thumbnailsaredirty()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->thumbnailsaredirty(), output);
  }

  // optional uint32 eventCount = 15;
  if (has_eventcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->eventcount(), output);
  }

  // repeated .TSP.DataReference thumbnails = 16;
  for (int i = 0; i < this->thumbnails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->thumbnails(i), output);
  }

  // optional bool isCollapsedInOutlineView = 17;
  if (has_iscollapsedinoutlineview()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->iscollapsedinoutlineview(), output);
  }

  // optional bool isSlideNumberVisible = 18 [default = false];
  if (has_isslidenumbervisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->isslidenumbervisible(), output);
  }

  // optional bool hasBodyInOutlineView = 19;
  if (has_hasbodyinoutlineview()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->hasbodyinoutlineview(), output);
  }

  // optional bool has_explicit_builds = 20;
  if (has_has_explicit_builds()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->has_explicit_builds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlideNodeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSP.Reference children = 1;
  for (int i = 0; i < this->children_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->children(i), target);
  }

  // optional .TSP.Reference slide = 2;
  if (has_slide()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->slide(), target);
  }

  // optional .TSP.Reference database_thumbnail = 3;
  if (has_database_thumbnail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->database_thumbnail(), target);
  }

  // required bool isHidden = 4;
  if (has_ishidden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ishidden(), target);
  }

  // required bool isCollapsed = 5 [deprecated = true];
  if (has_iscollapsed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->iscollapsed(), target);
  }

  // required bool hasBuilds = 6 [deprecated = true];
  if (has_hasbuilds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->hasbuilds(), target);
  }

  // required bool hasTransition = 7;
  if (has_hastransition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->hastransition(), target);
  }

  // optional bool hasNote = 8;
  if (has_hasnote()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->hasnote(), target);
  }

  // repeated .TSP.Reference database_thumbnails = 9;
  for (int i = 0; i < this->database_thumbnails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->database_thumbnails(i), target);
  }

  // repeated .TSP.Size thumbnailSizes = 10;
  for (int i = 0; i < this->thumbnailsizes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->thumbnailsizes(i), target);
  }

  // optional string uniqueIdentifier = 11;
  if (has_uniqueidentifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueidentifier().data(), this->uniqueidentifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->uniqueidentifier(), target);
  }

  // optional string copyFromSlideIdentifier = 12;
  if (has_copyfromslideidentifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->copyfromslideidentifier().data(), this->copyfromslideidentifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->copyfromslideidentifier(), target);
  }

  // optional uint32 slideSpecificHyperlinkCount = 13;
  if (has_slidespecifichyperlinkcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->slidespecifichyperlinkcount(), target);
  }

  // optional bool thumbnailsAreDirty = 14;
  if (has_thumbnailsaredirty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->thumbnailsaredirty(), target);
  }

  // optional uint32 eventCount = 15;
  if (has_eventcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->eventcount(), target);
  }

  // repeated .TSP.DataReference thumbnails = 16;
  for (int i = 0; i < this->thumbnails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->thumbnails(i), target);
  }

  // optional bool isCollapsedInOutlineView = 17;
  if (has_iscollapsedinoutlineview()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->iscollapsedinoutlineview(), target);
  }

  // optional bool isSlideNumberVisible = 18 [default = false];
  if (has_isslidenumbervisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->isslidenumbervisible(), target);
  }

  // optional bool hasBodyInOutlineView = 19;
  if (has_hasbodyinoutlineview()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->hasbodyinoutlineview(), target);
  }

  // optional bool has_explicit_builds = 20;
  if (has_has_explicit_builds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->has_explicit_builds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlideNodeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .TSP.Reference slide = 2;
    if (has_slide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slide());
    }

    // optional bool thumbnailsAreDirty = 14;
    if (has_thumbnailsaredirty()) {
      total_size += 1 + 1;
    }

    // required bool isHidden = 4;
    if (has_ishidden()) {
      total_size += 1 + 1;
    }

    // required bool isCollapsed = 5 [deprecated = true];
    if (has_iscollapsed()) {
      total_size += 1 + 1;
    }

    // optional bool isCollapsedInOutlineView = 17;
    if (has_iscollapsedinoutlineview()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool hasBodyInOutlineView = 19;
    if (has_hasbodyinoutlineview()) {
      total_size += 2 + 1;
    }

    // required bool hasBuilds = 6 [deprecated = true];
    if (has_hasbuilds()) {
      total_size += 1 + 1;
    }

    // required bool hasTransition = 7;
    if (has_hastransition()) {
      total_size += 1 + 1;
    }

    // optional bool hasNote = 8;
    if (has_hasnote()) {
      total_size += 1 + 1;
    }

    // optional bool isSlideNumberVisible = 18 [default = false];
    if (has_isslidenumbervisible()) {
      total_size += 2 + 1;
    }

    // optional string uniqueIdentifier = 11;
    if (has_uniqueidentifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniqueidentifier());
    }

    // optional string copyFromSlideIdentifier = 12;
    if (has_copyfromslideidentifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->copyfromslideidentifier());
    }

    // optional uint32 slideSpecificHyperlinkCount = 13;
    if (has_slidespecifichyperlinkcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slidespecifichyperlinkcount());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 eventCount = 15;
    if (has_eventcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventcount());
    }

    // optional bool has_explicit_builds = 20;
    if (has_has_explicit_builds()) {
      total_size += 2 + 1;
    }

    // optional .TSP.Reference database_thumbnail = 3;
    if (has_database_thumbnail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->database_thumbnail());
    }

  }
  // repeated .TSP.Reference children = 1;
  total_size += 1 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children(i));
  }

  // repeated .TSP.DataReference thumbnails = 16;
  total_size += 2 * this->thumbnails_size();
  for (int i = 0; i < this->thumbnails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->thumbnails(i));
  }

  // repeated .TSP.Size thumbnailSizes = 10;
  total_size += 1 * this->thumbnailsizes_size();
  for (int i = 0; i < this->thumbnailsizes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->thumbnailsizes(i));
  }

  // repeated .TSP.Reference database_thumbnails = 9;
  total_size += 1 * this->database_thumbnails_size();
  for (int i = 0; i < this->database_thumbnails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->database_thumbnails(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlideNodeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlideNodeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlideNodeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlideNodeArchive::MergeFrom(const SlideNodeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  children_.MergeFrom(from.children_);
  thumbnails_.MergeFrom(from.thumbnails_);
  thumbnailsizes_.MergeFrom(from.thumbnailsizes_);
  database_thumbnails_.MergeFrom(from.database_thumbnails_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_slide()) {
      mutable_slide()->::TSP::Reference::MergeFrom(from.slide());
    }
    if (from.has_thumbnailsaredirty()) {
      set_thumbnailsaredirty(from.thumbnailsaredirty());
    }
    if (from.has_ishidden()) {
      set_ishidden(from.ishidden());
    }
    if (from.has_iscollapsed()) {
      set_iscollapsed(from.iscollapsed());
    }
    if (from.has_iscollapsedinoutlineview()) {
      set_iscollapsedinoutlineview(from.iscollapsedinoutlineview());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hasbodyinoutlineview()) {
      set_hasbodyinoutlineview(from.hasbodyinoutlineview());
    }
    if (from.has_hasbuilds()) {
      set_hasbuilds(from.hasbuilds());
    }
    if (from.has_hastransition()) {
      set_hastransition(from.hastransition());
    }
    if (from.has_hasnote()) {
      set_hasnote(from.hasnote());
    }
    if (from.has_isslidenumbervisible()) {
      set_isslidenumbervisible(from.isslidenumbervisible());
    }
    if (from.has_uniqueidentifier()) {
      set_uniqueidentifier(from.uniqueidentifier());
    }
    if (from.has_copyfromslideidentifier()) {
      set_copyfromslideidentifier(from.copyfromslideidentifier());
    }
    if (from.has_slidespecifichyperlinkcount()) {
      set_slidespecifichyperlinkcount(from.slidespecifichyperlinkcount());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_eventcount()) {
      set_eventcount(from.eventcount());
    }
    if (from.has_has_explicit_builds()) {
      set_has_explicit_builds(from.has_explicit_builds());
    }
    if (from.has_database_thumbnail()) {
      mutable_database_thumbnail()->::TSP::Reference::MergeFrom(from.database_thumbnail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlideNodeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlideNodeArchive::CopyFrom(const SlideNodeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideNodeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000660) != 0x00000660) return false;

  for (int i = 0; i < children_size(); i++) {
    if (!this->children(i).IsInitialized()) return false;
  }
  if (has_slide()) {
    if (!this->slide().IsInitialized()) return false;
  }
  for (int i = 0; i < thumbnails_size(); i++) {
    if (!this->thumbnails(i).IsInitialized()) return false;
  }
  for (int i = 0; i < thumbnailsizes_size(); i++) {
    if (!this->thumbnailsizes(i).IsInitialized()) return false;
  }
  if (has_database_thumbnail()) {
    if (!this->database_thumbnail().IsInitialized()) return false;
  }
  for (int i = 0; i < database_thumbnails_size(); i++) {
    if (!this->database_thumbnails(i).IsInitialized()) return false;
  }
  return true;
}

void SlideNodeArchive::Swap(SlideNodeArchive* other) {
  if (other != this) {
    children_.Swap(&other->children_);
    std::swap(slide_, other->slide_);
    thumbnails_.Swap(&other->thumbnails_);
    thumbnailsizes_.Swap(&other->thumbnailsizes_);
    std::swap(thumbnailsaredirty_, other->thumbnailsaredirty_);
    std::swap(ishidden_, other->ishidden_);
    std::swap(iscollapsed_, other->iscollapsed_);
    std::swap(iscollapsedinoutlineview_, other->iscollapsedinoutlineview_);
    std::swap(hasbodyinoutlineview_, other->hasbodyinoutlineview_);
    std::swap(hasbuilds_, other->hasbuilds_);
    std::swap(hastransition_, other->hastransition_);
    std::swap(hasnote_, other->hasnote_);
    std::swap(isslidenumbervisible_, other->isslidenumbervisible_);
    std::swap(uniqueidentifier_, other->uniqueidentifier_);
    std::swap(copyfromslideidentifier_, other->copyfromslideidentifier_);
    std::swap(slidespecifichyperlinkcount_, other->slidespecifichyperlinkcount_);
    std::swap(eventcount_, other->eventcount_);
    std::swap(has_explicit_builds_, other->has_explicit_builds_);
    std::swap(database_thumbnail_, other->database_thumbnail_);
    database_thumbnails_.Swap(&other->database_thumbnails_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlideNodeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlideNodeArchive_descriptor_;
  metadata.reflection = SlideNodeArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DesktopUILayoutArchive_SidebarViewMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DesktopUILayoutArchive_SidebarViewMode_descriptor_;
}
bool DesktopUILayoutArchive_SidebarViewMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DesktopUILayoutArchive_SidebarViewMode DesktopUILayoutArchive::kSidebarViewModeNavigator;
const DesktopUILayoutArchive_SidebarViewMode DesktopUILayoutArchive::kSidebarViewModeOutline;
const DesktopUILayoutArchive_SidebarViewMode DesktopUILayoutArchive::SidebarViewMode_MIN;
const DesktopUILayoutArchive_SidebarViewMode DesktopUILayoutArchive::SidebarViewMode_MAX;
const int DesktopUILayoutArchive::SidebarViewMode_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* DesktopUILayoutArchive_InspectorPaneViewMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DesktopUILayoutArchive_InspectorPaneViewMode_descriptor_;
}
bool DesktopUILayoutArchive_InspectorPaneViewMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DesktopUILayoutArchive_InspectorPaneViewMode DesktopUILayoutArchive::kInspectorPaneViewModeFormat;
const DesktopUILayoutArchive_InspectorPaneViewMode DesktopUILayoutArchive::kInspectorPaneViewModeAnimate;
const DesktopUILayoutArchive_InspectorPaneViewMode DesktopUILayoutArchive::kInspectorPaneViewModeSetup;
const DesktopUILayoutArchive_InspectorPaneViewMode DesktopUILayoutArchive::InspectorPaneViewMode_MIN;
const DesktopUILayoutArchive_InspectorPaneViewMode DesktopUILayoutArchive::InspectorPaneViewMode_MAX;
const int DesktopUILayoutArchive::InspectorPaneViewMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DesktopUILayoutArchive::kSidebarVisibleFieldNumber;
const int DesktopUILayoutArchive::kSidebarViewModeFieldNumber;
const int DesktopUILayoutArchive::kNotesVisibleFieldNumber;
const int DesktopUILayoutArchive::kLightTableVisibleFieldNumber;
const int DesktopUILayoutArchive::kInspectorPaneVisibleFieldNumber;
const int DesktopUILayoutArchive::kInspectorPaneViewModeFieldNumber;
#endif  // !_MSC_VER

DesktopUILayoutArchive::DesktopUILayoutArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DesktopUILayoutArchive::InitAsDefaultInstance() {
}

DesktopUILayoutArchive::DesktopUILayoutArchive(const DesktopUILayoutArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DesktopUILayoutArchive::SharedCtor() {
  _cached_size_ = 0;
  sidebar_visible_ = false;
  sidebar_view_mode_ = 0;
  notes_visible_ = false;
  light_table_visible_ = false;
  inspector_pane_visible_ = true;
  inspector_pane_view_mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DesktopUILayoutArchive::~DesktopUILayoutArchive() {
  SharedDtor();
}

void DesktopUILayoutArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DesktopUILayoutArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DesktopUILayoutArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DesktopUILayoutArchive_descriptor_;
}

const DesktopUILayoutArchive& DesktopUILayoutArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

DesktopUILayoutArchive* DesktopUILayoutArchive::default_instance_ = NULL;

DesktopUILayoutArchive* DesktopUILayoutArchive::New() const {
  return new DesktopUILayoutArchive;
}

void DesktopUILayoutArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sidebar_visible_ = false;
    sidebar_view_mode_ = 0;
    notes_visible_ = false;
    light_table_visible_ = false;
    inspector_pane_visible_ = true;
    inspector_pane_view_mode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DesktopUILayoutArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool sidebar_visible = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sidebar_visible_)));
          set_has_sidebar_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sidebar_view_mode;
        break;
      }

      // optional .KN.DesktopUILayoutArchive.SidebarViewMode sidebar_view_mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sidebar_view_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::KN::DesktopUILayoutArchive_SidebarViewMode_IsValid(value)) {
            set_sidebar_view_mode(static_cast< ::KN::DesktopUILayoutArchive_SidebarViewMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_notes_visible;
        break;
      }

      // optional bool notes_visible = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notes_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notes_visible_)));
          set_has_notes_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_light_table_visible;
        break;
      }

      // optional bool light_table_visible = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_light_table_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &light_table_visible_)));
          set_has_light_table_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_inspector_pane_visible;
        break;
      }

      // optional bool inspector_pane_visible = 6 [default = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inspector_pane_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inspector_pane_visible_)));
          set_has_inspector_pane_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_inspector_pane_view_mode;
        break;
      }

      // optional .KN.DesktopUILayoutArchive.InspectorPaneViewMode inspector_pane_view_mode = 7 [default = kInspectorPaneViewModeFormat];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inspector_pane_view_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::KN::DesktopUILayoutArchive_InspectorPaneViewMode_IsValid(value)) {
            set_inspector_pane_view_mode(static_cast< ::KN::DesktopUILayoutArchive_InspectorPaneViewMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DesktopUILayoutArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool sidebar_visible = 1;
  if (has_sidebar_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->sidebar_visible(), output);
  }

  // optional .KN.DesktopUILayoutArchive.SidebarViewMode sidebar_view_mode = 2;
  if (has_sidebar_view_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sidebar_view_mode(), output);
  }

  // optional bool notes_visible = 3;
  if (has_notes_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->notes_visible(), output);
  }

  // optional bool light_table_visible = 5;
  if (has_light_table_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->light_table_visible(), output);
  }

  // optional bool inspector_pane_visible = 6 [default = true];
  if (has_inspector_pane_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->inspector_pane_visible(), output);
  }

  // optional .KN.DesktopUILayoutArchive.InspectorPaneViewMode inspector_pane_view_mode = 7 [default = kInspectorPaneViewModeFormat];
  if (has_inspector_pane_view_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->inspector_pane_view_mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DesktopUILayoutArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool sidebar_visible = 1;
  if (has_sidebar_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->sidebar_visible(), target);
  }

  // optional .KN.DesktopUILayoutArchive.SidebarViewMode sidebar_view_mode = 2;
  if (has_sidebar_view_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sidebar_view_mode(), target);
  }

  // optional bool notes_visible = 3;
  if (has_notes_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->notes_visible(), target);
  }

  // optional bool light_table_visible = 5;
  if (has_light_table_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->light_table_visible(), target);
  }

  // optional bool inspector_pane_visible = 6 [default = true];
  if (has_inspector_pane_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->inspector_pane_visible(), target);
  }

  // optional .KN.DesktopUILayoutArchive.InspectorPaneViewMode inspector_pane_view_mode = 7 [default = kInspectorPaneViewModeFormat];
  if (has_inspector_pane_view_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->inspector_pane_view_mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DesktopUILayoutArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool sidebar_visible = 1;
    if (has_sidebar_visible()) {
      total_size += 1 + 1;
    }

    // optional .KN.DesktopUILayoutArchive.SidebarViewMode sidebar_view_mode = 2;
    if (has_sidebar_view_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sidebar_view_mode());
    }

    // optional bool notes_visible = 3;
    if (has_notes_visible()) {
      total_size += 1 + 1;
    }

    // optional bool light_table_visible = 5;
    if (has_light_table_visible()) {
      total_size += 1 + 1;
    }

    // optional bool inspector_pane_visible = 6 [default = true];
    if (has_inspector_pane_visible()) {
      total_size += 1 + 1;
    }

    // optional .KN.DesktopUILayoutArchive.InspectorPaneViewMode inspector_pane_view_mode = 7 [default = kInspectorPaneViewModeFormat];
    if (has_inspector_pane_view_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->inspector_pane_view_mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DesktopUILayoutArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DesktopUILayoutArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DesktopUILayoutArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DesktopUILayoutArchive::MergeFrom(const DesktopUILayoutArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sidebar_visible()) {
      set_sidebar_visible(from.sidebar_visible());
    }
    if (from.has_sidebar_view_mode()) {
      set_sidebar_view_mode(from.sidebar_view_mode());
    }
    if (from.has_notes_visible()) {
      set_notes_visible(from.notes_visible());
    }
    if (from.has_light_table_visible()) {
      set_light_table_visible(from.light_table_visible());
    }
    if (from.has_inspector_pane_visible()) {
      set_inspector_pane_visible(from.inspector_pane_visible());
    }
    if (from.has_inspector_pane_view_mode()) {
      set_inspector_pane_view_mode(from.inspector_pane_view_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DesktopUILayoutArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DesktopUILayoutArchive::CopyFrom(const DesktopUILayoutArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DesktopUILayoutArchive::IsInitialized() const {

  return true;
}

void DesktopUILayoutArchive::Swap(DesktopUILayoutArchive* other) {
  if (other != this) {
    std::swap(sidebar_visible_, other->sidebar_visible_);
    std::swap(sidebar_view_mode_, other->sidebar_view_mode_);
    std::swap(notes_visible_, other->notes_visible_);
    std::swap(light_table_visible_, other->light_table_visible_);
    std::swap(inspector_pane_visible_, other->inspector_pane_visible_);
    std::swap(inspector_pane_view_mode_, other->inspector_pane_view_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DesktopUILayoutArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DesktopUILayoutArchive_descriptor_;
  metadata.reflection = DesktopUILayoutArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UIStateArchive::kSlideNodeToEditFieldNumber;
const int UIStateArchive::kDeprecatedMasterSlideNodeToApplyFieldNumber;
const int UIStateArchive::kDeprecatedSlideThumbnailSizeFieldNumber;
const int UIStateArchive::kCanvasViewScaleFieldNumber;
const int UIStateArchive::kCanvasOffsetFieldNumber;
const int UIStateArchive::kSelectedSlideNodesFieldNumber;
const int UIStateArchive::kIPhoneCanvasViewScaleFieldNumber;
const int UIStateArchive::kIPhoneCanvasOffsetFieldNumber;
const int UIStateArchive::kIPhone568CanvasViewScaleFieldNumber;
const int UIStateArchive::kIPhone568CanvasOffsetFieldNumber;
const int UIStateArchive::kDesktopUiLayoutFieldNumber;
const int UIStateArchive::kDesktopSlideViewContentFitsWindowFieldNumber;
const int UIStateArchive::kDesktopCanvasViewScaleFieldNumber;
const int UIStateArchive::kDesktopCanvasOffsetFieldNumber;
const int UIStateArchive::kLightTableZoomScaleFieldNumber;
const int UIStateArchive::kChartUiStateFieldNumber;
const int UIStateArchive::kShowSlideGuidesFieldNumber;
const int UIStateArchive::kShowMasterGuidesFieldNumber;
const int UIStateArchive::kShowsCommentsFieldNumber;
const int UIStateArchive::kCollapsedSlideNodesFieldNumber;
const int UIStateArchive::kShowsRulerFieldNumber;
const int UIStateArchive::kDesktopNavigatorViewWidthFieldNumber;
const int UIStateArchive::kDesktopOutlineViewWidthFieldNumber;
const int UIStateArchive::kDesktopMainContentSizeFieldNumber;
const int UIStateArchive::kDesktopPresenterNotesViewHeightFieldNumber;
const int UIStateArchive::kDesktopMainWindowOriginFieldNumber;
const int UIStateArchive::kLightTableHidesSkippedSlidesFieldNumber;
#endif  // !_MSC_VER

UIStateArchive::UIStateArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UIStateArchive::InitAsDefaultInstance() {
  slidenodetoedit_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  deprecated_masterslidenodetoapply_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  deprecated_slidethumbnailsize_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
  canvasoffset_ = const_cast< ::TSP::Point*>(&::TSP::Point::default_instance());
  iphonecanvasoffset_ = const_cast< ::TSP::Point*>(&::TSP::Point::default_instance());
  iphone568canvasoffset_ = const_cast< ::TSP::Point*>(&::TSP::Point::default_instance());
  desktop_ui_layout_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  desktop_canvas_offset_ = const_cast< ::TSP::Point*>(&::TSP::Point::default_instance());
  desktop_main_content_size_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
  desktop_main_window_origin_ = const_cast< ::TSP::Point*>(&::TSP::Point::default_instance());
}

UIStateArchive::UIStateArchive(const UIStateArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UIStateArchive::SharedCtor() {
  _cached_size_ = 0;
  slidenodetoedit_ = NULL;
  deprecated_masterslidenodetoapply_ = NULL;
  deprecated_slidethumbnailsize_ = NULL;
  canvasviewscale_ = 0;
  canvasoffset_ = NULL;
  iphonecanvasviewscale_ = 0;
  iphonecanvasoffset_ = NULL;
  iphone568canvasviewscale_ = 0;
  iphone568canvasoffset_ = NULL;
  desktop_ui_layout_ = NULL;
  desktop_slide_view_content_fits_window_ = false;
  desktop_canvas_view_scale_ = 0;
  desktop_canvas_offset_ = NULL;
  light_table_zoom_scale_ = 0;
  show_slide_guides_ = false;
  show_master_guides_ = false;
  shows_comments_ = false;
  shows_ruler_ = false;
  desktop_navigator_view_width_ = 0;
  desktop_outline_view_width_ = 0;
  desktop_main_content_size_ = NULL;
  desktop_presenter_notes_view_height_ = 0;
  desktop_main_window_origin_ = NULL;
  light_table_hides_skipped_slides_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UIStateArchive::~UIStateArchive() {
  SharedDtor();
}

void UIStateArchive::SharedDtor() {
  if (this != default_instance_) {
    delete slidenodetoedit_;
    delete deprecated_masterslidenodetoapply_;
    delete deprecated_slidethumbnailsize_;
    delete canvasoffset_;
    delete iphonecanvasoffset_;
    delete iphone568canvasoffset_;
    delete desktop_ui_layout_;
    delete desktop_canvas_offset_;
    delete desktop_main_content_size_;
    delete desktop_main_window_origin_;
  }
}

void UIStateArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UIStateArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UIStateArchive_descriptor_;
}

const UIStateArchive& UIStateArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

UIStateArchive* UIStateArchive::default_instance_ = NULL;

UIStateArchive* UIStateArchive::New() const {
  return new UIStateArchive;
}

void UIStateArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_slidenodetoedit()) {
      if (slidenodetoedit_ != NULL) slidenodetoedit_->::TSP::Reference::Clear();
    }
    if (has_deprecated_masterslidenodetoapply()) {
      if (deprecated_masterslidenodetoapply_ != NULL) deprecated_masterslidenodetoapply_->::TSP::Reference::Clear();
    }
    if (has_deprecated_slidethumbnailsize()) {
      if (deprecated_slidethumbnailsize_ != NULL) deprecated_slidethumbnailsize_->::TSP::Size::Clear();
    }
    canvasviewscale_ = 0;
    if (has_canvasoffset()) {
      if (canvasoffset_ != NULL) canvasoffset_->::TSP::Point::Clear();
    }
    iphonecanvasviewscale_ = 0;
    if (has_iphonecanvasoffset()) {
      if (iphonecanvasoffset_ != NULL) iphonecanvasoffset_->::TSP::Point::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    iphone568canvasviewscale_ = 0;
    if (has_iphone568canvasoffset()) {
      if (iphone568canvasoffset_ != NULL) iphone568canvasoffset_->::TSP::Point::Clear();
    }
    if (has_desktop_ui_layout()) {
      if (desktop_ui_layout_ != NULL) desktop_ui_layout_->::TSP::Reference::Clear();
    }
    desktop_slide_view_content_fits_window_ = false;
    desktop_canvas_view_scale_ = 0;
    if (has_desktop_canvas_offset()) {
      if (desktop_canvas_offset_ != NULL) desktop_canvas_offset_->::TSP::Point::Clear();
    }
    light_table_zoom_scale_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    show_slide_guides_ = false;
    show_master_guides_ = false;
    shows_comments_ = false;
    shows_ruler_ = false;
    desktop_navigator_view_width_ = 0;
    desktop_outline_view_width_ = 0;
    if (has_desktop_main_content_size()) {
      if (desktop_main_content_size_ != NULL) desktop_main_content_size_->::TSP::Size::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    desktop_presenter_notes_view_height_ = 0;
    if (has_desktop_main_window_origin()) {
      if (desktop_main_window_origin_ != NULL) desktop_main_window_origin_->::TSP::Point::Clear();
    }
    light_table_hides_skipped_slides_ = false;
  }
  selectedslidenodes_.Clear();
  chart_ui_state_.Clear();
  collapsed_slide_nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UIStateArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference slideNodeToEdit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slidenodetoedit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_deprecated_masterSlideNodeToApply;
        break;
      }

      // optional .TSP.Reference deprecated_masterSlideNodeToApply = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_masterSlideNodeToApply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_masterslidenodetoapply()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_deprecated_slideThumbnailSize;
        break;
      }

      // optional .TSP.Size deprecated_slideThumbnailSize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deprecated_slideThumbnailSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_slidethumbnailsize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_canvasViewScale;
        break;
      }

      // optional float canvasViewScale = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_canvasViewScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &canvasviewscale_)));
          set_has_canvasviewscale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_canvasOffset;
        break;
      }

      // optional .TSP.Point canvasOffset = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_canvasOffset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_canvasoffset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_selectedSlideNodes;
        break;
      }

      // repeated .TSP.Reference selectedSlideNodes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selectedSlideNodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selectedslidenodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_selectedSlideNodes;
        if (input->ExpectTag(61)) goto parse_iPhoneCanvasViewScale;
        break;
      }

      // optional float iPhoneCanvasViewScale = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_iPhoneCanvasViewScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &iphonecanvasviewscale_)));
          set_has_iphonecanvasviewscale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_iPhoneCanvasOffset;
        break;
      }

      // optional .TSP.Point iPhoneCanvasOffset = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iPhoneCanvasOffset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iphonecanvasoffset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_iPhone568CanvasViewScale;
        break;
      }

      // optional float iPhone568CanvasViewScale = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_iPhone568CanvasViewScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &iphone568canvasviewscale_)));
          set_has_iphone568canvasviewscale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_iPhone568CanvasOffset;
        break;
      }

      // optional .TSP.Point iPhone568CanvasOffset = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iPhone568CanvasOffset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iphone568canvasoffset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_desktop_ui_layout;
        break;
      }

      // optional .TSP.Reference desktop_ui_layout = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desktop_ui_layout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_desktop_ui_layout()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_desktop_slide_view_content_fits_window;
        break;
      }

      // optional bool desktop_slide_view_content_fits_window = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_desktop_slide_view_content_fits_window:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &desktop_slide_view_content_fits_window_)));
          set_has_desktop_slide_view_content_fits_window();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_desktop_canvas_view_scale;
        break;
      }

      // optional float desktop_canvas_view_scale = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_desktop_canvas_view_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desktop_canvas_view_scale_)));
          set_has_desktop_canvas_view_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_light_table_zoom_scale;
        break;
      }

      // optional float light_table_zoom_scale = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_light_table_zoom_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &light_table_zoom_scale_)));
          set_has_light_table_zoom_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_chart_ui_state;
        break;
      }

      // repeated .TSCH.ChartUIState chart_ui_state = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chart_ui_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chart_ui_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_chart_ui_state;
        if (input->ExpectTag(128)) goto parse_show_slide_guides;
        break;
      }

      // optional bool show_slide_guides = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_slide_guides:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_slide_guides_)));
          set_has_show_slide_guides();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_show_master_guides;
        break;
      }

      // optional bool show_master_guides = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_master_guides:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_master_guides_)));
          set_has_show_master_guides();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_shows_comments;
        break;
      }

      // optional bool shows_comments = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shows_comments:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shows_comments_)));
          set_has_shows_comments();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_collapsed_slide_nodes;
        break;
      }

      // repeated .TSP.Reference collapsed_slide_nodes = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_collapsed_slide_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_collapsed_slide_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_collapsed_slide_nodes;
        if (input->ExpectTag(160)) goto parse_shows_ruler;
        break;
      }

      // optional bool shows_ruler = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shows_ruler:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shows_ruler_)));
          set_has_shows_ruler();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_desktop_canvas_offset;
        break;
      }

      // optional .TSP.Point desktop_canvas_offset = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desktop_canvas_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_desktop_canvas_offset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_desktop_navigator_view_width;
        break;
      }

      // optional float desktop_navigator_view_width = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_desktop_navigator_view_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desktop_navigator_view_width_)));
          set_has_desktop_navigator_view_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(189)) goto parse_desktop_outline_view_width;
        break;
      }

      // optional float desktop_outline_view_width = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_desktop_outline_view_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desktop_outline_view_width_)));
          set_has_desktop_outline_view_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_desktop_main_content_size;
        break;
      }

      // optional .TSP.Size desktop_main_content_size = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desktop_main_content_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_desktop_main_content_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_desktop_presenter_notes_view_height;
        break;
      }

      // optional float desktop_presenter_notes_view_height = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_desktop_presenter_notes_view_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desktop_presenter_notes_view_height_)));
          set_has_desktop_presenter_notes_view_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_desktop_main_window_origin;
        break;
      }

      // optional .TSP.Point desktop_main_window_origin = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desktop_main_window_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_desktop_main_window_origin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_light_table_hides_skipped_slides;
        break;
      }

      // optional bool light_table_hides_skipped_slides = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_light_table_hides_skipped_slides:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &light_table_hides_skipped_slides_)));
          set_has_light_table_hides_skipped_slides();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UIStateArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference slideNodeToEdit = 1;
  if (has_slidenodetoedit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->slidenodetoedit(), output);
  }

  // optional .TSP.Reference deprecated_masterSlideNodeToApply = 2;
  if (has_deprecated_masterslidenodetoapply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->deprecated_masterslidenodetoapply(), output);
  }

  // optional .TSP.Size deprecated_slideThumbnailSize = 3;
  if (has_deprecated_slidethumbnailsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->deprecated_slidethumbnailsize(), output);
  }

  // optional float canvasViewScale = 4;
  if (has_canvasviewscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->canvasviewscale(), output);
  }

  // optional .TSP.Point canvasOffset = 5;
  if (has_canvasoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->canvasoffset(), output);
  }

  // repeated .TSP.Reference selectedSlideNodes = 6;
  for (int i = 0; i < this->selectedslidenodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->selectedslidenodes(i), output);
  }

  // optional float iPhoneCanvasViewScale = 7;
  if (has_iphonecanvasviewscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->iphonecanvasviewscale(), output);
  }

  // optional .TSP.Point iPhoneCanvasOffset = 8;
  if (has_iphonecanvasoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->iphonecanvasoffset(), output);
  }

  // optional float iPhone568CanvasViewScale = 9;
  if (has_iphone568canvasviewscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->iphone568canvasviewscale(), output);
  }

  // optional .TSP.Point iPhone568CanvasOffset = 10;
  if (has_iphone568canvasoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->iphone568canvasoffset(), output);
  }

  // optional .TSP.Reference desktop_ui_layout = 11;
  if (has_desktop_ui_layout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->desktop_ui_layout(), output);
  }

  // optional bool desktop_slide_view_content_fits_window = 12;
  if (has_desktop_slide_view_content_fits_window()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->desktop_slide_view_content_fits_window(), output);
  }

  // optional float desktop_canvas_view_scale = 13;
  if (has_desktop_canvas_view_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->desktop_canvas_view_scale(), output);
  }

  // optional float light_table_zoom_scale = 14;
  if (has_light_table_zoom_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->light_table_zoom_scale(), output);
  }

  // repeated .TSCH.ChartUIState chart_ui_state = 15;
  for (int i = 0; i < this->chart_ui_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->chart_ui_state(i), output);
  }

  // optional bool show_slide_guides = 16;
  if (has_show_slide_guides()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->show_slide_guides(), output);
  }

  // optional bool show_master_guides = 17;
  if (has_show_master_guides()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->show_master_guides(), output);
  }

  // optional bool shows_comments = 18;
  if (has_shows_comments()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->shows_comments(), output);
  }

  // repeated .TSP.Reference collapsed_slide_nodes = 19;
  for (int i = 0; i < this->collapsed_slide_nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->collapsed_slide_nodes(i), output);
  }

  // optional bool shows_ruler = 20;
  if (has_shows_ruler()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->shows_ruler(), output);
  }

  // optional .TSP.Point desktop_canvas_offset = 21;
  if (has_desktop_canvas_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->desktop_canvas_offset(), output);
  }

  // optional float desktop_navigator_view_width = 22;
  if (has_desktop_navigator_view_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->desktop_navigator_view_width(), output);
  }

  // optional float desktop_outline_view_width = 23;
  if (has_desktop_outline_view_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->desktop_outline_view_width(), output);
  }

  // optional .TSP.Size desktop_main_content_size = 24;
  if (has_desktop_main_content_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->desktop_main_content_size(), output);
  }

  // optional float desktop_presenter_notes_view_height = 25;
  if (has_desktop_presenter_notes_view_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->desktop_presenter_notes_view_height(), output);
  }

  // optional .TSP.Point desktop_main_window_origin = 26;
  if (has_desktop_main_window_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->desktop_main_window_origin(), output);
  }

  // optional bool light_table_hides_skipped_slides = 27;
  if (has_light_table_hides_skipped_slides()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->light_table_hides_skipped_slides(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UIStateArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference slideNodeToEdit = 1;
  if (has_slidenodetoedit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->slidenodetoedit(), target);
  }

  // optional .TSP.Reference deprecated_masterSlideNodeToApply = 2;
  if (has_deprecated_masterslidenodetoapply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->deprecated_masterslidenodetoapply(), target);
  }

  // optional .TSP.Size deprecated_slideThumbnailSize = 3;
  if (has_deprecated_slidethumbnailsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->deprecated_slidethumbnailsize(), target);
  }

  // optional float canvasViewScale = 4;
  if (has_canvasviewscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->canvasviewscale(), target);
  }

  // optional .TSP.Point canvasOffset = 5;
  if (has_canvasoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->canvasoffset(), target);
  }

  // repeated .TSP.Reference selectedSlideNodes = 6;
  for (int i = 0; i < this->selectedslidenodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->selectedslidenodes(i), target);
  }

  // optional float iPhoneCanvasViewScale = 7;
  if (has_iphonecanvasviewscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->iphonecanvasviewscale(), target);
  }

  // optional .TSP.Point iPhoneCanvasOffset = 8;
  if (has_iphonecanvasoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->iphonecanvasoffset(), target);
  }

  // optional float iPhone568CanvasViewScale = 9;
  if (has_iphone568canvasviewscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->iphone568canvasviewscale(), target);
  }

  // optional .TSP.Point iPhone568CanvasOffset = 10;
  if (has_iphone568canvasoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->iphone568canvasoffset(), target);
  }

  // optional .TSP.Reference desktop_ui_layout = 11;
  if (has_desktop_ui_layout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->desktop_ui_layout(), target);
  }

  // optional bool desktop_slide_view_content_fits_window = 12;
  if (has_desktop_slide_view_content_fits_window()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->desktop_slide_view_content_fits_window(), target);
  }

  // optional float desktop_canvas_view_scale = 13;
  if (has_desktop_canvas_view_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->desktop_canvas_view_scale(), target);
  }

  // optional float light_table_zoom_scale = 14;
  if (has_light_table_zoom_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->light_table_zoom_scale(), target);
  }

  // repeated .TSCH.ChartUIState chart_ui_state = 15;
  for (int i = 0; i < this->chart_ui_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->chart_ui_state(i), target);
  }

  // optional bool show_slide_guides = 16;
  if (has_show_slide_guides()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->show_slide_guides(), target);
  }

  // optional bool show_master_guides = 17;
  if (has_show_master_guides()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->show_master_guides(), target);
  }

  // optional bool shows_comments = 18;
  if (has_shows_comments()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->shows_comments(), target);
  }

  // repeated .TSP.Reference collapsed_slide_nodes = 19;
  for (int i = 0; i < this->collapsed_slide_nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->collapsed_slide_nodes(i), target);
  }

  // optional bool shows_ruler = 20;
  if (has_shows_ruler()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->shows_ruler(), target);
  }

  // optional .TSP.Point desktop_canvas_offset = 21;
  if (has_desktop_canvas_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->desktop_canvas_offset(), target);
  }

  // optional float desktop_navigator_view_width = 22;
  if (has_desktop_navigator_view_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->desktop_navigator_view_width(), target);
  }

  // optional float desktop_outline_view_width = 23;
  if (has_desktop_outline_view_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->desktop_outline_view_width(), target);
  }

  // optional .TSP.Size desktop_main_content_size = 24;
  if (has_desktop_main_content_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->desktop_main_content_size(), target);
  }

  // optional float desktop_presenter_notes_view_height = 25;
  if (has_desktop_presenter_notes_view_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->desktop_presenter_notes_view_height(), target);
  }

  // optional .TSP.Point desktop_main_window_origin = 26;
  if (has_desktop_main_window_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->desktop_main_window_origin(), target);
  }

  // optional bool light_table_hides_skipped_slides = 27;
  if (has_light_table_hides_skipped_slides()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->light_table_hides_skipped_slides(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UIStateArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference slideNodeToEdit = 1;
    if (has_slidenodetoedit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slidenodetoedit());
    }

    // optional .TSP.Reference deprecated_masterSlideNodeToApply = 2;
    if (has_deprecated_masterslidenodetoapply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_masterslidenodetoapply());
    }

    // optional .TSP.Size deprecated_slideThumbnailSize = 3;
    if (has_deprecated_slidethumbnailsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_slidethumbnailsize());
    }

    // optional float canvasViewScale = 4;
    if (has_canvasviewscale()) {
      total_size += 1 + 4;
    }

    // optional .TSP.Point canvasOffset = 5;
    if (has_canvasoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->canvasoffset());
    }

    // optional float iPhoneCanvasViewScale = 7;
    if (has_iphonecanvasviewscale()) {
      total_size += 1 + 4;
    }

    // optional .TSP.Point iPhoneCanvasOffset = 8;
    if (has_iphonecanvasoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iphonecanvasoffset());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float iPhone568CanvasViewScale = 9;
    if (has_iphone568canvasviewscale()) {
      total_size += 1 + 4;
    }

    // optional .TSP.Point iPhone568CanvasOffset = 10;
    if (has_iphone568canvasoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iphone568canvasoffset());
    }

    // optional .TSP.Reference desktop_ui_layout = 11;
    if (has_desktop_ui_layout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->desktop_ui_layout());
    }

    // optional bool desktop_slide_view_content_fits_window = 12;
    if (has_desktop_slide_view_content_fits_window()) {
      total_size += 1 + 1;
    }

    // optional float desktop_canvas_view_scale = 13;
    if (has_desktop_canvas_view_scale()) {
      total_size += 1 + 4;
    }

    // optional .TSP.Point desktop_canvas_offset = 21;
    if (has_desktop_canvas_offset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->desktop_canvas_offset());
    }

    // optional float light_table_zoom_scale = 14;
    if (has_light_table_zoom_scale()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool show_slide_guides = 16;
    if (has_show_slide_guides()) {
      total_size += 2 + 1;
    }

    // optional bool show_master_guides = 17;
    if (has_show_master_guides()) {
      total_size += 2 + 1;
    }

    // optional bool shows_comments = 18;
    if (has_shows_comments()) {
      total_size += 2 + 1;
    }

    // optional bool shows_ruler = 20;
    if (has_shows_ruler()) {
      total_size += 2 + 1;
    }

    // optional float desktop_navigator_view_width = 22;
    if (has_desktop_navigator_view_width()) {
      total_size += 2 + 4;
    }

    // optional float desktop_outline_view_width = 23;
    if (has_desktop_outline_view_width()) {
      total_size += 2 + 4;
    }

    // optional .TSP.Size desktop_main_content_size = 24;
    if (has_desktop_main_content_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->desktop_main_content_size());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float desktop_presenter_notes_view_height = 25;
    if (has_desktop_presenter_notes_view_height()) {
      total_size += 2 + 4;
    }

    // optional .TSP.Point desktop_main_window_origin = 26;
    if (has_desktop_main_window_origin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->desktop_main_window_origin());
    }

    // optional bool light_table_hides_skipped_slides = 27;
    if (has_light_table_hides_skipped_slides()) {
      total_size += 2 + 1;
    }

  }
  // repeated .TSP.Reference selectedSlideNodes = 6;
  total_size += 1 * this->selectedslidenodes_size();
  for (int i = 0; i < this->selectedslidenodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->selectedslidenodes(i));
  }

  // repeated .TSCH.ChartUIState chart_ui_state = 15;
  total_size += 1 * this->chart_ui_state_size();
  for (int i = 0; i < this->chart_ui_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chart_ui_state(i));
  }

  // repeated .TSP.Reference collapsed_slide_nodes = 19;
  total_size += 2 * this->collapsed_slide_nodes_size();
  for (int i = 0; i < this->collapsed_slide_nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->collapsed_slide_nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UIStateArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UIStateArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UIStateArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UIStateArchive::MergeFrom(const UIStateArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  selectedslidenodes_.MergeFrom(from.selectedslidenodes_);
  chart_ui_state_.MergeFrom(from.chart_ui_state_);
  collapsed_slide_nodes_.MergeFrom(from.collapsed_slide_nodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slidenodetoedit()) {
      mutable_slidenodetoedit()->::TSP::Reference::MergeFrom(from.slidenodetoedit());
    }
    if (from.has_deprecated_masterslidenodetoapply()) {
      mutable_deprecated_masterslidenodetoapply()->::TSP::Reference::MergeFrom(from.deprecated_masterslidenodetoapply());
    }
    if (from.has_deprecated_slidethumbnailsize()) {
      mutable_deprecated_slidethumbnailsize()->::TSP::Size::MergeFrom(from.deprecated_slidethumbnailsize());
    }
    if (from.has_canvasviewscale()) {
      set_canvasviewscale(from.canvasviewscale());
    }
    if (from.has_canvasoffset()) {
      mutable_canvasoffset()->::TSP::Point::MergeFrom(from.canvasoffset());
    }
    if (from.has_iphonecanvasviewscale()) {
      set_iphonecanvasviewscale(from.iphonecanvasviewscale());
    }
    if (from.has_iphonecanvasoffset()) {
      mutable_iphonecanvasoffset()->::TSP::Point::MergeFrom(from.iphonecanvasoffset());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_iphone568canvasviewscale()) {
      set_iphone568canvasviewscale(from.iphone568canvasviewscale());
    }
    if (from.has_iphone568canvasoffset()) {
      mutable_iphone568canvasoffset()->::TSP::Point::MergeFrom(from.iphone568canvasoffset());
    }
    if (from.has_desktop_ui_layout()) {
      mutable_desktop_ui_layout()->::TSP::Reference::MergeFrom(from.desktop_ui_layout());
    }
    if (from.has_desktop_slide_view_content_fits_window()) {
      set_desktop_slide_view_content_fits_window(from.desktop_slide_view_content_fits_window());
    }
    if (from.has_desktop_canvas_view_scale()) {
      set_desktop_canvas_view_scale(from.desktop_canvas_view_scale());
    }
    if (from.has_desktop_canvas_offset()) {
      mutable_desktop_canvas_offset()->::TSP::Point::MergeFrom(from.desktop_canvas_offset());
    }
    if (from.has_light_table_zoom_scale()) {
      set_light_table_zoom_scale(from.light_table_zoom_scale());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_show_slide_guides()) {
      set_show_slide_guides(from.show_slide_guides());
    }
    if (from.has_show_master_guides()) {
      set_show_master_guides(from.show_master_guides());
    }
    if (from.has_shows_comments()) {
      set_shows_comments(from.shows_comments());
    }
    if (from.has_shows_ruler()) {
      set_shows_ruler(from.shows_ruler());
    }
    if (from.has_desktop_navigator_view_width()) {
      set_desktop_navigator_view_width(from.desktop_navigator_view_width());
    }
    if (from.has_desktop_outline_view_width()) {
      set_desktop_outline_view_width(from.desktop_outline_view_width());
    }
    if (from.has_desktop_main_content_size()) {
      mutable_desktop_main_content_size()->::TSP::Size::MergeFrom(from.desktop_main_content_size());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_desktop_presenter_notes_view_height()) {
      set_desktop_presenter_notes_view_height(from.desktop_presenter_notes_view_height());
    }
    if (from.has_desktop_main_window_origin()) {
      mutable_desktop_main_window_origin()->::TSP::Point::MergeFrom(from.desktop_main_window_origin());
    }
    if (from.has_light_table_hides_skipped_slides()) {
      set_light_table_hides_skipped_slides(from.light_table_hides_skipped_slides());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UIStateArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIStateArchive::CopyFrom(const UIStateArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIStateArchive::IsInitialized() const {

  if (has_slidenodetoedit()) {
    if (!this->slidenodetoedit().IsInitialized()) return false;
  }
  if (has_deprecated_masterslidenodetoapply()) {
    if (!this->deprecated_masterslidenodetoapply().IsInitialized()) return false;
  }
  if (has_deprecated_slidethumbnailsize()) {
    if (!this->deprecated_slidethumbnailsize().IsInitialized()) return false;
  }
  if (has_canvasoffset()) {
    if (!this->canvasoffset().IsInitialized()) return false;
  }
  for (int i = 0; i < selectedslidenodes_size(); i++) {
    if (!this->selectedslidenodes(i).IsInitialized()) return false;
  }
  if (has_iphonecanvasoffset()) {
    if (!this->iphonecanvasoffset().IsInitialized()) return false;
  }
  if (has_iphone568canvasoffset()) {
    if (!this->iphone568canvasoffset().IsInitialized()) return false;
  }
  if (has_desktop_ui_layout()) {
    if (!this->desktop_ui_layout().IsInitialized()) return false;
  }
  if (has_desktop_canvas_offset()) {
    if (!this->desktop_canvas_offset().IsInitialized()) return false;
  }
  for (int i = 0; i < chart_ui_state_size(); i++) {
    if (!this->chart_ui_state(i).IsInitialized()) return false;
  }
  for (int i = 0; i < collapsed_slide_nodes_size(); i++) {
    if (!this->collapsed_slide_nodes(i).IsInitialized()) return false;
  }
  if (has_desktop_main_content_size()) {
    if (!this->desktop_main_content_size().IsInitialized()) return false;
  }
  if (has_desktop_main_window_origin()) {
    if (!this->desktop_main_window_origin().IsInitialized()) return false;
  }
  return true;
}

void UIStateArchive::Swap(UIStateArchive* other) {
  if (other != this) {
    std::swap(slidenodetoedit_, other->slidenodetoedit_);
    std::swap(deprecated_masterslidenodetoapply_, other->deprecated_masterslidenodetoapply_);
    std::swap(deprecated_slidethumbnailsize_, other->deprecated_slidethumbnailsize_);
    std::swap(canvasviewscale_, other->canvasviewscale_);
    std::swap(canvasoffset_, other->canvasoffset_);
    selectedslidenodes_.Swap(&other->selectedslidenodes_);
    std::swap(iphonecanvasviewscale_, other->iphonecanvasviewscale_);
    std::swap(iphonecanvasoffset_, other->iphonecanvasoffset_);
    std::swap(iphone568canvasviewscale_, other->iphone568canvasviewscale_);
    std::swap(iphone568canvasoffset_, other->iphone568canvasoffset_);
    std::swap(desktop_ui_layout_, other->desktop_ui_layout_);
    std::swap(desktop_slide_view_content_fits_window_, other->desktop_slide_view_content_fits_window_);
    std::swap(desktop_canvas_view_scale_, other->desktop_canvas_view_scale_);
    std::swap(desktop_canvas_offset_, other->desktop_canvas_offset_);
    std::swap(light_table_zoom_scale_, other->light_table_zoom_scale_);
    chart_ui_state_.Swap(&other->chart_ui_state_);
    std::swap(show_slide_guides_, other->show_slide_guides_);
    std::swap(show_master_guides_, other->show_master_guides_);
    std::swap(shows_comments_, other->shows_comments_);
    collapsed_slide_nodes_.Swap(&other->collapsed_slide_nodes_);
    std::swap(shows_ruler_, other->shows_ruler_);
    std::swap(desktop_navigator_view_width_, other->desktop_navigator_view_width_);
    std::swap(desktop_outline_view_width_, other->desktop_outline_view_width_);
    std::swap(desktop_main_content_size_, other->desktop_main_content_size_);
    std::swap(desktop_presenter_notes_view_height_, other->desktop_presenter_notes_view_height_);
    std::swap(desktop_main_window_origin_, other->desktop_main_window_origin_);
    std::swap(light_table_hides_skipped_slides_, other->light_table_hides_skipped_slides_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UIStateArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UIStateArchive_descriptor_;
  metadata.reflection = UIStateArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CanvasSelectionArchive::kInfosFieldNumber;
const int CanvasSelectionArchive::kActionGhostIndexesFieldNumber;
const int CanvasSelectionArchive::kDatabaseActionGhostIndexesFieldNumber;
#endif  // !_MSC_VER

CanvasSelectionArchive::CanvasSelectionArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CanvasSelectionArchive::InitAsDefaultInstance() {
}

CanvasSelectionArchive::CanvasSelectionArchive(const CanvasSelectionArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CanvasSelectionArchive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CanvasSelectionArchive::~CanvasSelectionArchive() {
  SharedDtor();
}

void CanvasSelectionArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CanvasSelectionArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CanvasSelectionArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CanvasSelectionArchive_descriptor_;
}

const CanvasSelectionArchive& CanvasSelectionArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

CanvasSelectionArchive* CanvasSelectionArchive::default_instance_ = NULL;

CanvasSelectionArchive* CanvasSelectionArchive::New() const {
  return new CanvasSelectionArchive;
}

void CanvasSelectionArchive::Clear() {
  infos_.Clear();
  action_ghost_indexes_.Clear();
  database_action_ghost_indexes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CanvasSelectionArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSP.Reference infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectTag(16)) goto parse_database_action_ghost_indexes;
        break;
      }

      // repeated uint32 database_action_ghost_indexes = 2 [deprecated = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_database_action_ghost_indexes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_database_action_ghost_indexes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_database_action_ghost_indexes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_database_action_ghost_indexes;
        if (input->ExpectTag(26)) goto parse_action_ghost_indexes;
        break;
      }

      // repeated .TSP.IndexSet action_ghost_indexes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_action_ghost_indexes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_action_ghost_indexes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_action_ghost_indexes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CanvasSelectionArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSP.Reference infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  // repeated uint32 database_action_ghost_indexes = 2 [deprecated = true];
  for (int i = 0; i < this->database_action_ghost_indexes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->database_action_ghost_indexes(i), output);
  }

  // repeated .TSP.IndexSet action_ghost_indexes = 3;
  for (int i = 0; i < this->action_ghost_indexes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->action_ghost_indexes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CanvasSelectionArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSP.Reference infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  // repeated uint32 database_action_ghost_indexes = 2 [deprecated = true];
  for (int i = 0; i < this->database_action_ghost_indexes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->database_action_ghost_indexes(i), target);
  }

  // repeated .TSP.IndexSet action_ghost_indexes = 3;
  for (int i = 0; i < this->action_ghost_indexes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->action_ghost_indexes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CanvasSelectionArchive::ByteSize() const {
  int total_size = 0;

  // repeated .TSP.Reference infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  // repeated .TSP.IndexSet action_ghost_indexes = 3;
  total_size += 1 * this->action_ghost_indexes_size();
  for (int i = 0; i < this->action_ghost_indexes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->action_ghost_indexes(i));
  }

  // repeated uint32 database_action_ghost_indexes = 2 [deprecated = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->database_action_ghost_indexes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->database_action_ghost_indexes(i));
    }
    total_size += 1 * this->database_action_ghost_indexes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CanvasSelectionArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CanvasSelectionArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CanvasSelectionArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CanvasSelectionArchive::MergeFrom(const CanvasSelectionArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  action_ghost_indexes_.MergeFrom(from.action_ghost_indexes_);
  database_action_ghost_indexes_.MergeFrom(from.database_action_ghost_indexes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CanvasSelectionArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CanvasSelectionArchive::CopyFrom(const CanvasSelectionArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanvasSelectionArchive::IsInitialized() const {

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  for (int i = 0; i < action_ghost_indexes_size(); i++) {
    if (!this->action_ghost_indexes(i).IsInitialized()) return false;
  }
  return true;
}

void CanvasSelectionArchive::Swap(CanvasSelectionArchive* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    action_ghost_indexes_.Swap(&other->action_ghost_indexes_);
    database_action_ghost_indexes_.Swap(&other->database_action_ghost_indexes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CanvasSelectionArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CanvasSelectionArchive_descriptor_;
  metadata.reflection = CanvasSelectionArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThemeArchive::kSuperFieldNumber;
const int ThemeArchive::kMastersFieldNumber;
const int ThemeArchive::kUuidFieldNumber;
const int ThemeArchive::kClassicThemeRecordsFieldNumber;
const int ThemeArchive::kDefaultMasterSlideNodeFieldNumber;
const int ThemeArchive::kDefaultMasterSlideNodeReferenceFieldNumber;
const int ThemeArchive::kDefaultMasterSlideNodeIsOurBestGuessFieldNumber;
#endif  // !_MSC_VER

ThemeArchive::ThemeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThemeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::ThemeArchive*>(&::TSS::ThemeArchive::default_instance());
  defaultmasterslidenode_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  default_master_slide_node_reference_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ThemeArchive::ThemeArchive(const ThemeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThemeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  defaultmasterslidenode_ = NULL;
  default_master_slide_node_reference_ = NULL;
  default_master_slide_node_is_our_best_guess_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThemeArchive::~ThemeArchive() {
  SharedDtor();
}

void ThemeArchive::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
    delete super_;
    delete defaultmasterslidenode_;
    delete default_master_slide_node_reference_;
  }
}

void ThemeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThemeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThemeArchive_descriptor_;
}

const ThemeArchive& ThemeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

ThemeArchive* ThemeArchive::default_instance_ = NULL;

ThemeArchive* ThemeArchive::New() const {
  return new ThemeArchive;
}

void ThemeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::ThemeArchive::Clear();
    }
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    if (has_defaultmasterslidenode()) {
      if (defaultmasterslidenode_ != NULL) defaultmasterslidenode_->::TSP::Reference::Clear();
    }
    if (has_default_master_slide_node_reference()) {
      if (default_master_slide_node_reference_ != NULL) default_master_slide_node_reference_->::TSP::Reference::Clear();
    }
    default_master_slide_node_is_our_best_guess_ = false;
  }
  masters_.Clear();
  classicthemerecords_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThemeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSS.ThemeArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_masters;
        break;
      }

      // repeated .TSP.Reference masters = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_masters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_masters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_masters;
        if (input->ExpectTag(26)) goto parse_uuid;
        break;
      }

      // optional string uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_classicThemeRecords;
        break;
      }

      // repeated .TSP.Reference classicThemeRecords = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classicThemeRecords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_classicthemerecords()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_classicThemeRecords;
        if (input->ExpectTag(42)) goto parse_defaultMasterSlideNode;
        break;
      }

      // optional .TSP.Reference defaultMasterSlideNode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defaultMasterSlideNode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defaultmasterslidenode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_default_master_slide_node_reference;
        break;
      }

      // optional .TSP.Reference default_master_slide_node_reference = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_default_master_slide_node_reference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_master_slide_node_reference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_default_master_slide_node_is_our_best_guess;
        break;
      }

      // optional bool default_master_slide_node_is_our_best_guess = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_default_master_slide_node_is_our_best_guess:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &default_master_slide_node_is_our_best_guess_)));
          set_has_default_master_slide_node_is_our_best_guess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThemeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSS.ThemeArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // repeated .TSP.Reference masters = 2;
  for (int i = 0; i < this->masters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->masters(i), output);
  }

  // optional string uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->uuid(), output);
  }

  // repeated .TSP.Reference classicThemeRecords = 4;
  for (int i = 0; i < this->classicthemerecords_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->classicthemerecords(i), output);
  }

  // optional .TSP.Reference defaultMasterSlideNode = 5;
  if (has_defaultmasterslidenode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->defaultmasterslidenode(), output);
  }

  // optional .TSP.Reference default_master_slide_node_reference = 6;
  if (has_default_master_slide_node_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->default_master_slide_node_reference(), output);
  }

  // optional bool default_master_slide_node_is_our_best_guess = 7;
  if (has_default_master_slide_node_is_our_best_guess()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->default_master_slide_node_is_our_best_guess(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThemeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSS.ThemeArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // repeated .TSP.Reference masters = 2;
  for (int i = 0; i < this->masters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->masters(i), target);
  }

  // optional string uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uuid(), target);
  }

  // repeated .TSP.Reference classicThemeRecords = 4;
  for (int i = 0; i < this->classicthemerecords_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->classicthemerecords(i), target);
  }

  // optional .TSP.Reference defaultMasterSlideNode = 5;
  if (has_defaultmasterslidenode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->defaultmasterslidenode(), target);
  }

  // optional .TSP.Reference default_master_slide_node_reference = 6;
  if (has_default_master_slide_node_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->default_master_slide_node_reference(), target);
  }

  // optional bool default_master_slide_node_is_our_best_guess = 7;
  if (has_default_master_slide_node_is_our_best_guess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->default_master_slide_node_is_our_best_guess(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThemeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSS.ThemeArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional string uuid = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional .TSP.Reference defaultMasterSlideNode = 5;
    if (has_defaultmasterslidenode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defaultmasterslidenode());
    }

    // optional .TSP.Reference default_master_slide_node_reference = 6;
    if (has_default_master_slide_node_reference()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->default_master_slide_node_reference());
    }

    // optional bool default_master_slide_node_is_our_best_guess = 7;
    if (has_default_master_slide_node_is_our_best_guess()) {
      total_size += 1 + 1;
    }

  }
  // repeated .TSP.Reference masters = 2;
  total_size += 1 * this->masters_size();
  for (int i = 0; i < this->masters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->masters(i));
  }

  // repeated .TSP.Reference classicThemeRecords = 4;
  total_size += 1 * this->classicthemerecords_size();
  for (int i = 0; i < this->classicthemerecords_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->classicthemerecords(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThemeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThemeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThemeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThemeArchive::MergeFrom(const ThemeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  masters_.MergeFrom(from.masters_);
  classicthemerecords_.MergeFrom(from.classicthemerecords_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::ThemeArchive::MergeFrom(from.super());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_defaultmasterslidenode()) {
      mutable_defaultmasterslidenode()->::TSP::Reference::MergeFrom(from.defaultmasterslidenode());
    }
    if (from.has_default_master_slide_node_reference()) {
      mutable_default_master_slide_node_reference()->::TSP::Reference::MergeFrom(from.default_master_slide_node_reference());
    }
    if (from.has_default_master_slide_node_is_our_best_guess()) {
      set_default_master_slide_node_is_our_best_guess(from.default_master_slide_node_is_our_best_guess());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThemeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThemeArchive::CopyFrom(const ThemeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  for (int i = 0; i < masters_size(); i++) {
    if (!this->masters(i).IsInitialized()) return false;
  }
  for (int i = 0; i < classicthemerecords_size(); i++) {
    if (!this->classicthemerecords(i).IsInitialized()) return false;
  }
  if (has_defaultmasterslidenode()) {
    if (!this->defaultmasterslidenode().IsInitialized()) return false;
  }
  if (has_default_master_slide_node_reference()) {
    if (!this->default_master_slide_node_reference().IsInitialized()) return false;
  }
  return true;
}

void ThemeArchive::Swap(ThemeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    masters_.Swap(&other->masters_);
    std::swap(uuid_, other->uuid_);
    classicthemerecords_.Swap(&other->classicthemerecords_);
    std::swap(defaultmasterslidenode_, other->defaultmasterslidenode_);
    std::swap(default_master_slide_node_reference_, other->default_master_slide_node_reference_);
    std::swap(default_master_slide_node_is_our_best_guess_, other->default_master_slide_node_is_our_best_guess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThemeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThemeArchive_descriptor_;
  metadata.reflection = ThemeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SlideTreeArchive::kRootSlideNodeFieldNumber;
#endif  // !_MSC_VER

SlideTreeArchive::SlideTreeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlideTreeArchive::InitAsDefaultInstance() {
  rootslidenode_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

SlideTreeArchive::SlideTreeArchive(const SlideTreeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlideTreeArchive::SharedCtor() {
  _cached_size_ = 0;
  rootslidenode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlideTreeArchive::~SlideTreeArchive() {
  SharedDtor();
}

void SlideTreeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete rootslidenode_;
  }
}

void SlideTreeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlideTreeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlideTreeArchive_descriptor_;
}

const SlideTreeArchive& SlideTreeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

SlideTreeArchive* SlideTreeArchive::default_instance_ = NULL;

SlideTreeArchive* SlideTreeArchive::New() const {
  return new SlideTreeArchive;
}

void SlideTreeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rootslidenode()) {
      if (rootslidenode_ != NULL) rootslidenode_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlideTreeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference rootSlideNode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rootslidenode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlideTreeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference rootSlideNode = 1;
  if (has_rootslidenode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rootslidenode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlideTreeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference rootSlideNode = 1;
  if (has_rootslidenode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rootslidenode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlideTreeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference rootSlideNode = 1;
    if (has_rootslidenode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rootslidenode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlideTreeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlideTreeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlideTreeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlideTreeArchive::MergeFrom(const SlideTreeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rootslidenode()) {
      mutable_rootslidenode()->::TSP::Reference::MergeFrom(from.rootslidenode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlideTreeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlideTreeArchive::CopyFrom(const SlideTreeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideTreeArchive::IsInitialized() const {

  if (has_rootslidenode()) {
    if (!this->rootslidenode().IsInitialized()) return false;
  }
  return true;
}

void SlideTreeArchive::Swap(SlideTreeArchive* other) {
  if (other != this) {
    std::swap(rootslidenode_, other->rootslidenode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlideTreeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlideTreeArchive_descriptor_;
  metadata.reflection = SlideTreeArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ShowArchive_KNShowMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShowArchive_KNShowMode_descriptor_;
}
bool ShowArchive_KNShowMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ShowArchive_KNShowMode ShowArchive::kKNShowModeNormal;
const ShowArchive_KNShowMode ShowArchive::kKNShowModeAutoPlay;
const ShowArchive_KNShowMode ShowArchive::kKNShowModeHyperlinksOnly;
const ShowArchive_KNShowMode ShowArchive::KNShowMode_MIN;
const ShowArchive_KNShowMode ShowArchive::KNShowMode_MAX;
const int ShowArchive::KNShowMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ShowArchive::kUiStateFieldNumber;
const int ShowArchive::kThemeFieldNumber;
const int ShowArchive::kSlideTreeFieldNumber;
const int ShowArchive::kSizeFieldNumber;
const int ShowArchive::kStylesheetFieldNumber;
const int ShowArchive::kSlideNumbersVisibleFieldNumber;
const int ShowArchive::kRecordingFieldNumber;
const int ShowArchive::kLoopPresentationFieldNumber;
const int ShowArchive::kModeFieldNumber;
const int ShowArchive::kAutoplayTransitionDelayFieldNumber;
const int ShowArchive::kAutoplayBuildDelayFieldNumber;
const int ShowArchive::kIdleTimerActiveFieldNumber;
const int ShowArchive::kIdleTimerDelayFieldNumber;
const int ShowArchive::kSoundtrackFieldNumber;
const int ShowArchive::kAutomaticallyPlaysUponOpenFieldNumber;
#endif  // !_MSC_VER

ShowArchive::ShowArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShowArchive::InitAsDefaultInstance() {
  uistate_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  theme_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  slidetree_ = const_cast< ::KN::SlideTreeArchive*>(&::KN::SlideTreeArchive::default_instance());
  size_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
  stylesheet_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  recording_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  soundtrack_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ShowArchive::ShowArchive(const ShowArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShowArchive::SharedCtor() {
  _cached_size_ = 0;
  uistate_ = NULL;
  theme_ = NULL;
  slidetree_ = NULL;
  size_ = NULL;
  stylesheet_ = NULL;
  slidenumbersvisible_ = false;
  recording_ = NULL;
  loop_presentation_ = false;
  mode_ = 0;
  autoplay_transition_delay_ = 5;
  autoplay_build_delay_ = 2;
  idle_timer_active_ = false;
  idle_timer_delay_ = 900;
  soundtrack_ = NULL;
  automatically_plays_upon_open_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShowArchive::~ShowArchive() {
  SharedDtor();
}

void ShowArchive::SharedDtor() {
  if (this != default_instance_) {
    delete uistate_;
    delete theme_;
    delete slidetree_;
    delete size_;
    delete stylesheet_;
    delete recording_;
    delete soundtrack_;
  }
}

void ShowArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShowArchive_descriptor_;
}

const ShowArchive& ShowArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

ShowArchive* ShowArchive::default_instance_ = NULL;

ShowArchive* ShowArchive::New() const {
  return new ShowArchive;
}

void ShowArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uistate()) {
      if (uistate_ != NULL) uistate_->::TSP::Reference::Clear();
    }
    if (has_theme()) {
      if (theme_ != NULL) theme_->::TSP::Reference::Clear();
    }
    if (has_slidetree()) {
      if (slidetree_ != NULL) slidetree_->::KN::SlideTreeArchive::Clear();
    }
    if (has_size()) {
      if (size_ != NULL) size_->::TSP::Size::Clear();
    }
    if (has_stylesheet()) {
      if (stylesheet_ != NULL) stylesheet_->::TSP::Reference::Clear();
    }
    slidenumbersvisible_ = false;
    if (has_recording()) {
      if (recording_ != NULL) recording_->::TSP::Reference::Clear();
    }
    loop_presentation_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mode_ = 0;
    autoplay_transition_delay_ = 5;
    autoplay_build_delay_ = 2;
    idle_timer_active_ = false;
    idle_timer_delay_ = 900;
    if (has_soundtrack()) {
      if (soundtrack_ != NULL) soundtrack_->::TSP::Reference::Clear();
    }
    automatically_plays_upon_open_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShowArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference uiState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uistate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_theme;
        break;
      }

      // required .TSP.Reference theme = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_theme()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_slideTree;
        break;
      }

      // required .KN.SlideTreeArchive slideTree = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slideTree:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slidetree()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_size;
        break;
      }

      // required .TSP.Size size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stylesheet;
        break;
      }

      // required .TSP.Reference stylesheet = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stylesheet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stylesheet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_slideNumbersVisible;
        break;
      }

      // optional bool slideNumbersVisible = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slideNumbersVisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &slidenumbersvisible_)));
          set_has_slidenumbersvisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_recording;
        break;
      }

      // optional .TSP.Reference recording = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recording:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recording()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_loop_presentation;
        break;
      }

      // optional bool loop_presentation = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loop_presentation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &loop_presentation_)));
          set_has_loop_presentation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_mode;
        break;
      }

      // optional .KN.ShowArchive.KNShowMode mode = 9 [default = kKNShowModeNormal];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::KN::ShowArchive_KNShowMode_IsValid(value)) {
            set_mode(static_cast< ::KN::ShowArchive_KNShowMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_autoplay_transition_delay;
        break;
      }

      // optional double autoplay_transition_delay = 10 [default = 5];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_autoplay_transition_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &autoplay_transition_delay_)));
          set_has_autoplay_transition_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_autoplay_build_delay;
        break;
      }

      // optional double autoplay_build_delay = 11 [default = 2];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_autoplay_build_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &autoplay_build_delay_)));
          set_has_autoplay_build_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_idle_timer_active;
        break;
      }

      // optional bool idle_timer_active = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idle_timer_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &idle_timer_active_)));
          set_has_idle_timer_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_idle_timer_delay;
        break;
      }

      // optional double idle_timer_delay = 16 [default = 900];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_idle_timer_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &idle_timer_delay_)));
          set_has_idle_timer_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_soundtrack;
        break;
      }

      // optional .TSP.Reference soundtrack = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soundtrack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_soundtrack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_automatically_plays_upon_open;
        break;
      }

      // optional bool automatically_plays_upon_open = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_automatically_plays_upon_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &automatically_plays_upon_open_)));
          set_has_automatically_plays_upon_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShowArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference uiState = 1;
  if (has_uistate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uistate(), output);
  }

  // required .TSP.Reference theme = 2;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->theme(), output);
  }

  // required .KN.SlideTreeArchive slideTree = 3;
  if (has_slidetree()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->slidetree(), output);
  }

  // required .TSP.Size size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->size(), output);
  }

  // required .TSP.Reference stylesheet = 5;
  if (has_stylesheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stylesheet(), output);
  }

  // optional bool slideNumbersVisible = 6;
  if (has_slidenumbersvisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->slidenumbersvisible(), output);
  }

  // optional .TSP.Reference recording = 7;
  if (has_recording()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->recording(), output);
  }

  // optional bool loop_presentation = 8;
  if (has_loop_presentation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->loop_presentation(), output);
  }

  // optional .KN.ShowArchive.KNShowMode mode = 9 [default = kKNShowModeNormal];
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->mode(), output);
  }

  // optional double autoplay_transition_delay = 10 [default = 5];
  if (has_autoplay_transition_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->autoplay_transition_delay(), output);
  }

  // optional double autoplay_build_delay = 11 [default = 2];
  if (has_autoplay_build_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->autoplay_build_delay(), output);
  }

  // optional bool idle_timer_active = 15;
  if (has_idle_timer_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->idle_timer_active(), output);
  }

  // optional double idle_timer_delay = 16 [default = 900];
  if (has_idle_timer_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->idle_timer_delay(), output);
  }

  // optional .TSP.Reference soundtrack = 17;
  if (has_soundtrack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->soundtrack(), output);
  }

  // optional bool automatically_plays_upon_open = 18;
  if (has_automatically_plays_upon_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->automatically_plays_upon_open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShowArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference uiState = 1;
  if (has_uistate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uistate(), target);
  }

  // required .TSP.Reference theme = 2;
  if (has_theme()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->theme(), target);
  }

  // required .KN.SlideTreeArchive slideTree = 3;
  if (has_slidetree()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->slidetree(), target);
  }

  // required .TSP.Size size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->size(), target);
  }

  // required .TSP.Reference stylesheet = 5;
  if (has_stylesheet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stylesheet(), target);
  }

  // optional bool slideNumbersVisible = 6;
  if (has_slidenumbersvisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->slidenumbersvisible(), target);
  }

  // optional .TSP.Reference recording = 7;
  if (has_recording()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->recording(), target);
  }

  // optional bool loop_presentation = 8;
  if (has_loop_presentation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->loop_presentation(), target);
  }

  // optional .KN.ShowArchive.KNShowMode mode = 9 [default = kKNShowModeNormal];
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->mode(), target);
  }

  // optional double autoplay_transition_delay = 10 [default = 5];
  if (has_autoplay_transition_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->autoplay_transition_delay(), target);
  }

  // optional double autoplay_build_delay = 11 [default = 2];
  if (has_autoplay_build_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->autoplay_build_delay(), target);
  }

  // optional bool idle_timer_active = 15;
  if (has_idle_timer_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->idle_timer_active(), target);
  }

  // optional double idle_timer_delay = 16 [default = 900];
  if (has_idle_timer_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->idle_timer_delay(), target);
  }

  // optional .TSP.Reference soundtrack = 17;
  if (has_soundtrack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->soundtrack(), target);
  }

  // optional bool automatically_plays_upon_open = 18;
  if (has_automatically_plays_upon_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->automatically_plays_upon_open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShowArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference uiState = 1;
    if (has_uistate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uistate());
    }

    // required .TSP.Reference theme = 2;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->theme());
    }

    // required .KN.SlideTreeArchive slideTree = 3;
    if (has_slidetree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slidetree());
    }

    // required .TSP.Size size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->size());
    }

    // required .TSP.Reference stylesheet = 5;
    if (has_stylesheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stylesheet());
    }

    // optional bool slideNumbersVisible = 6;
    if (has_slidenumbersvisible()) {
      total_size += 1 + 1;
    }

    // optional .TSP.Reference recording = 7;
    if (has_recording()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recording());
    }

    // optional bool loop_presentation = 8;
    if (has_loop_presentation()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .KN.ShowArchive.KNShowMode mode = 9 [default = kKNShowModeNormal];
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional double autoplay_transition_delay = 10 [default = 5];
    if (has_autoplay_transition_delay()) {
      total_size += 1 + 8;
    }

    // optional double autoplay_build_delay = 11 [default = 2];
    if (has_autoplay_build_delay()) {
      total_size += 1 + 8;
    }

    // optional bool idle_timer_active = 15;
    if (has_idle_timer_active()) {
      total_size += 1 + 1;
    }

    // optional double idle_timer_delay = 16 [default = 900];
    if (has_idle_timer_delay()) {
      total_size += 2 + 8;
    }

    // optional .TSP.Reference soundtrack = 17;
    if (has_soundtrack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->soundtrack());
    }

    // optional bool automatically_plays_upon_open = 18;
    if (has_automatically_plays_upon_open()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShowArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShowArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShowArchive::MergeFrom(const ShowArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uistate()) {
      mutable_uistate()->::TSP::Reference::MergeFrom(from.uistate());
    }
    if (from.has_theme()) {
      mutable_theme()->::TSP::Reference::MergeFrom(from.theme());
    }
    if (from.has_slidetree()) {
      mutable_slidetree()->::KN::SlideTreeArchive::MergeFrom(from.slidetree());
    }
    if (from.has_size()) {
      mutable_size()->::TSP::Size::MergeFrom(from.size());
    }
    if (from.has_stylesheet()) {
      mutable_stylesheet()->::TSP::Reference::MergeFrom(from.stylesheet());
    }
    if (from.has_slidenumbersvisible()) {
      set_slidenumbersvisible(from.slidenumbersvisible());
    }
    if (from.has_recording()) {
      mutable_recording()->::TSP::Reference::MergeFrom(from.recording());
    }
    if (from.has_loop_presentation()) {
      set_loop_presentation(from.loop_presentation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_autoplay_transition_delay()) {
      set_autoplay_transition_delay(from.autoplay_transition_delay());
    }
    if (from.has_autoplay_build_delay()) {
      set_autoplay_build_delay(from.autoplay_build_delay());
    }
    if (from.has_idle_timer_active()) {
      set_idle_timer_active(from.idle_timer_active());
    }
    if (from.has_idle_timer_delay()) {
      set_idle_timer_delay(from.idle_timer_delay());
    }
    if (from.has_soundtrack()) {
      mutable_soundtrack()->::TSP::Reference::MergeFrom(from.soundtrack());
    }
    if (from.has_automatically_plays_upon_open()) {
      set_automatically_plays_upon_open(from.automatically_plays_upon_open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShowArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowArchive::CopyFrom(const ShowArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  if (has_uistate()) {
    if (!this->uistate().IsInitialized()) return false;
  }
  if (has_theme()) {
    if (!this->theme().IsInitialized()) return false;
  }
  if (has_slidetree()) {
    if (!this->slidetree().IsInitialized()) return false;
  }
  if (has_size()) {
    if (!this->size().IsInitialized()) return false;
  }
  if (has_stylesheet()) {
    if (!this->stylesheet().IsInitialized()) return false;
  }
  if (has_recording()) {
    if (!this->recording().IsInitialized()) return false;
  }
  if (has_soundtrack()) {
    if (!this->soundtrack().IsInitialized()) return false;
  }
  return true;
}

void ShowArchive::Swap(ShowArchive* other) {
  if (other != this) {
    std::swap(uistate_, other->uistate_);
    std::swap(theme_, other->theme_);
    std::swap(slidetree_, other->slidetree_);
    std::swap(size_, other->size_);
    std::swap(stylesheet_, other->stylesheet_);
    std::swap(slidenumbersvisible_, other->slidenumbersvisible_);
    std::swap(recording_, other->recording_);
    std::swap(loop_presentation_, other->loop_presentation_);
    std::swap(mode_, other->mode_);
    std::swap(autoplay_transition_delay_, other->autoplay_transition_delay_);
    std::swap(autoplay_build_delay_, other->autoplay_build_delay_);
    std::swap(idle_timer_active_, other->idle_timer_active_);
    std::swap(idle_timer_delay_, other->idle_timer_delay_);
    std::swap(soundtrack_, other->soundtrack_);
    std::swap(automatically_plays_upon_open_, other->automatically_plays_upon_open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShowArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShowArchive_descriptor_;
  metadata.reflection = ShowArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocumentArchive::kSuperFieldNumber;
const int DocumentArchive::kShowFieldNumber;
const int DocumentArchive::kTablesCustomFormatListFieldNumber;
#endif  // !_MSC_VER

DocumentArchive::DocumentArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DocumentArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSA::DocumentArchive*>(&::TSA::DocumentArchive::default_instance());
  show_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  tables_custom_format_list_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

DocumentArchive::DocumentArchive(const DocumentArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DocumentArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  show_ = NULL;
  tables_custom_format_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentArchive::~DocumentArchive() {
  SharedDtor();
}

void DocumentArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete show_;
    delete tables_custom_format_list_;
  }
}

void DocumentArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentArchive_descriptor_;
}

const DocumentArchive& DocumentArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

DocumentArchive* DocumentArchive::default_instance_ = NULL;

DocumentArchive* DocumentArchive::New() const {
  return new DocumentArchive;
}

void DocumentArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSA::DocumentArchive::Clear();
    }
    if (has_show()) {
      if (show_ != NULL) show_->::TSP::Reference::Clear();
    }
    if (has_tables_custom_format_list()) {
      if (tables_custom_format_list_ != NULL) tables_custom_format_list_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Reference show = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_show()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_super;
        break;
      }

      // required .TSA.DocumentArchive super = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tables_custom_format_list;
        break;
      }

      // optional .TSP.Reference tables_custom_format_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tables_custom_format_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tables_custom_format_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DocumentArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Reference show = 2;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->show(), output);
  }

  // required .TSA.DocumentArchive super = 3;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->super(), output);
  }

  // optional .TSP.Reference tables_custom_format_list = 4;
  if (has_tables_custom_format_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tables_custom_format_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DocumentArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Reference show = 2;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->show(), target);
  }

  // required .TSA.DocumentArchive super = 3;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->super(), target);
  }

  // optional .TSP.Reference tables_custom_format_list = 4;
  if (has_tables_custom_format_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tables_custom_format_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DocumentArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSA.DocumentArchive super = 3;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference show = 2;
    if (has_show()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->show());
    }

    // optional .TSP.Reference tables_custom_format_list = 4;
    if (has_tables_custom_format_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tables_custom_format_list());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentArchive::MergeFrom(const DocumentArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSA::DocumentArchive::MergeFrom(from.super());
    }
    if (from.has_show()) {
      mutable_show()->::TSP::Reference::MergeFrom(from.show());
    }
    if (from.has_tables_custom_format_list()) {
      mutable_tables_custom_format_list()->::TSP::Reference::MergeFrom(from.tables_custom_format_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentArchive::CopyFrom(const DocumentArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_show()) {
    if (!this->show().IsInitialized()) return false;
  }
  if (has_tables_custom_format_list()) {
    if (!this->tables_custom_format_list().IsInitialized()) return false;
  }
  return true;
}

void DocumentArchive::Swap(DocumentArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(show_, other->show_);
    std::swap(tables_custom_format_list_, other->tables_custom_format_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentArchive_descriptor_;
  metadata.reflection = DocumentArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SlideStylePropertiesArchive::kFillFieldNumber;
const int SlideStylePropertiesArchive::kTransitionFieldNumber;
const int SlideStylePropertiesArchive::kTransitionNullFieldNumber;
const int SlideStylePropertiesArchive::kTitlePlaceholderVisibilityFieldNumber;
const int SlideStylePropertiesArchive::kBodyPlaceholderVisibilityFieldNumber;
const int SlideStylePropertiesArchive::kObjectPlaceholderVisibilityFieldNumber;
const int SlideStylePropertiesArchive::kSlideNumberPlaceholderVisibilityFieldNumber;
#endif  // !_MSC_VER

SlideStylePropertiesArchive::SlideStylePropertiesArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlideStylePropertiesArchive::InitAsDefaultInstance() {
  fill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  transition_ = const_cast< ::KN::TransitionAttributesArchive*>(&::KN::TransitionAttributesArchive::default_instance());
}

SlideStylePropertiesArchive::SlideStylePropertiesArchive(const SlideStylePropertiesArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlideStylePropertiesArchive::SharedCtor() {
  _cached_size_ = 0;
  fill_ = NULL;
  transition_ = NULL;
  transition_null_ = false;
  titleplaceholdervisibility_ = false;
  bodyplaceholdervisibility_ = false;
  objectplaceholdervisibility_ = false;
  slidenumberplaceholdervisibility_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlideStylePropertiesArchive::~SlideStylePropertiesArchive() {
  SharedDtor();
}

void SlideStylePropertiesArchive::SharedDtor() {
  if (this != default_instance_) {
    delete fill_;
    delete transition_;
  }
}

void SlideStylePropertiesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlideStylePropertiesArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlideStylePropertiesArchive_descriptor_;
}

const SlideStylePropertiesArchive& SlideStylePropertiesArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

SlideStylePropertiesArchive* SlideStylePropertiesArchive::default_instance_ = NULL;

SlideStylePropertiesArchive* SlideStylePropertiesArchive::New() const {
  return new SlideStylePropertiesArchive;
}

void SlideStylePropertiesArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fill()) {
      if (fill_ != NULL) fill_->::TSD::FillArchive::Clear();
    }
    if (has_transition()) {
      if (transition_ != NULL) transition_->::KN::TransitionAttributesArchive::Clear();
    }
    transition_null_ = false;
    titleplaceholdervisibility_ = false;
    bodyplaceholdervisibility_ = false;
    objectplaceholdervisibility_ = false;
    slidenumberplaceholdervisibility_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlideStylePropertiesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSD.FillArchive fill = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_transition;
        break;
      }

      // optional .KN.TransitionAttributesArchive transition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_transition_null;
        break;
      }

      // optional bool transition_null = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transition_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transition_null_)));
          set_has_transition_null();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_titlePlaceholderVisibility;
        break;
      }

      // optional bool titlePlaceholderVisibility = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titlePlaceholderVisibility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &titleplaceholdervisibility_)));
          set_has_titleplaceholdervisibility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bodyPlaceholderVisibility;
        break;
      }

      // optional bool bodyPlaceholderVisibility = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bodyPlaceholderVisibility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bodyplaceholdervisibility_)));
          set_has_bodyplaceholdervisibility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_slideNumberPlaceholderVisibility;
        break;
      }

      // optional bool slideNumberPlaceholderVisibility = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slideNumberPlaceholderVisibility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &slidenumberplaceholdervisibility_)));
          set_has_slidenumberplaceholdervisibility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_objectPlaceholderVisibility;
        break;
      }

      // optional bool objectPlaceholderVisibility = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectPlaceholderVisibility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &objectplaceholdervisibility_)));
          set_has_objectplaceholdervisibility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlideStylePropertiesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSD.FillArchive fill = 1;
  if (has_fill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fill(), output);
  }

  // optional .KN.TransitionAttributesArchive transition = 2;
  if (has_transition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->transition(), output);
  }

  // optional bool transition_null = 3;
  if (has_transition_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->transition_null(), output);
  }

  // optional bool titlePlaceholderVisibility = 4;
  if (has_titleplaceholdervisibility()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->titleplaceholdervisibility(), output);
  }

  // optional bool bodyPlaceholderVisibility = 5;
  if (has_bodyplaceholdervisibility()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bodyplaceholdervisibility(), output);
  }

  // optional bool slideNumberPlaceholderVisibility = 6;
  if (has_slidenumberplaceholdervisibility()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->slidenumberplaceholdervisibility(), output);
  }

  // optional bool objectPlaceholderVisibility = 7;
  if (has_objectplaceholdervisibility()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->objectplaceholdervisibility(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlideStylePropertiesArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSD.FillArchive fill = 1;
  if (has_fill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fill(), target);
  }

  // optional .KN.TransitionAttributesArchive transition = 2;
  if (has_transition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->transition(), target);
  }

  // optional bool transition_null = 3;
  if (has_transition_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->transition_null(), target);
  }

  // optional bool titlePlaceholderVisibility = 4;
  if (has_titleplaceholdervisibility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->titleplaceholdervisibility(), target);
  }

  // optional bool bodyPlaceholderVisibility = 5;
  if (has_bodyplaceholdervisibility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bodyplaceholdervisibility(), target);
  }

  // optional bool slideNumberPlaceholderVisibility = 6;
  if (has_slidenumberplaceholdervisibility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->slidenumberplaceholdervisibility(), target);
  }

  // optional bool objectPlaceholderVisibility = 7;
  if (has_objectplaceholdervisibility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->objectplaceholdervisibility(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlideStylePropertiesArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSD.FillArchive fill = 1;
    if (has_fill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fill());
    }

    // optional .KN.TransitionAttributesArchive transition = 2;
    if (has_transition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transition());
    }

    // optional bool transition_null = 3;
    if (has_transition_null()) {
      total_size += 1 + 1;
    }

    // optional bool titlePlaceholderVisibility = 4;
    if (has_titleplaceholdervisibility()) {
      total_size += 1 + 1;
    }

    // optional bool bodyPlaceholderVisibility = 5;
    if (has_bodyplaceholdervisibility()) {
      total_size += 1 + 1;
    }

    // optional bool objectPlaceholderVisibility = 7;
    if (has_objectplaceholdervisibility()) {
      total_size += 1 + 1;
    }

    // optional bool slideNumberPlaceholderVisibility = 6;
    if (has_slidenumberplaceholdervisibility()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlideStylePropertiesArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlideStylePropertiesArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlideStylePropertiesArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlideStylePropertiesArchive::MergeFrom(const SlideStylePropertiesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fill()) {
      mutable_fill()->::TSD::FillArchive::MergeFrom(from.fill());
    }
    if (from.has_transition()) {
      mutable_transition()->::KN::TransitionAttributesArchive::MergeFrom(from.transition());
    }
    if (from.has_transition_null()) {
      set_transition_null(from.transition_null());
    }
    if (from.has_titleplaceholdervisibility()) {
      set_titleplaceholdervisibility(from.titleplaceholdervisibility());
    }
    if (from.has_bodyplaceholdervisibility()) {
      set_bodyplaceholdervisibility(from.bodyplaceholdervisibility());
    }
    if (from.has_objectplaceholdervisibility()) {
      set_objectplaceholdervisibility(from.objectplaceholdervisibility());
    }
    if (from.has_slidenumberplaceholdervisibility()) {
      set_slidenumberplaceholdervisibility(from.slidenumberplaceholdervisibility());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlideStylePropertiesArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlideStylePropertiesArchive::CopyFrom(const SlideStylePropertiesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideStylePropertiesArchive::IsInitialized() const {

  if (has_fill()) {
    if (!this->fill().IsInitialized()) return false;
  }
  if (has_transition()) {
    if (!this->transition().IsInitialized()) return false;
  }
  return true;
}

void SlideStylePropertiesArchive::Swap(SlideStylePropertiesArchive* other) {
  if (other != this) {
    std::swap(fill_, other->fill_);
    std::swap(transition_, other->transition_);
    std::swap(transition_null_, other->transition_null_);
    std::swap(titleplaceholdervisibility_, other->titleplaceholdervisibility_);
    std::swap(bodyplaceholdervisibility_, other->bodyplaceholdervisibility_);
    std::swap(objectplaceholdervisibility_, other->objectplaceholdervisibility_);
    std::swap(slidenumberplaceholdervisibility_, other->slidenumberplaceholdervisibility_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlideStylePropertiesArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlideStylePropertiesArchive_descriptor_;
  metadata.reflection = SlideStylePropertiesArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SlideStyleArchive::kSuperFieldNumber;
const int SlideStyleArchive::kOverrideCountFieldNumber;
const int SlideStyleArchive::kSlidePropertiesFieldNumber;
#endif  // !_MSC_VER

SlideStyleArchive::SlideStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlideStyleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::StyleArchive*>(&::TSS::StyleArchive::default_instance());
  slide_properties_ = const_cast< ::KN::SlideStylePropertiesArchive*>(&::KN::SlideStylePropertiesArchive::default_instance());
}

SlideStyleArchive::SlideStyleArchive(const SlideStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlideStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  override_count_ = 0u;
  slide_properties_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlideStyleArchive::~SlideStyleArchive() {
  SharedDtor();
}

void SlideStyleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete slide_properties_;
  }
}

void SlideStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlideStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlideStyleArchive_descriptor_;
}

const SlideStyleArchive& SlideStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

SlideStyleArchive* SlideStyleArchive::default_instance_ = NULL;

SlideStyleArchive* SlideStyleArchive::New() const {
  return new SlideStyleArchive;
}

void SlideStyleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::StyleArchive::Clear();
    }
    override_count_ = 0u;
    if (has_slide_properties()) {
      if (slide_properties_ != NULL) slide_properties_->::KN::SlideStylePropertiesArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlideStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSS.StyleArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_override_count;
        break;
      }

      // optional uint32 override_count = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_override_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &override_count_)));
          set_has_override_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_slide_properties;
        break;
      }

      // optional .KN.SlideStylePropertiesArchive slide_properties = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slide_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slide_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlideStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (has_override_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->override_count(), output);
  }

  // optional .KN.SlideStylePropertiesArchive slide_properties = 11;
  if (has_slide_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->slide_properties(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlideStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (has_override_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->override_count(), target);
  }

  // optional .KN.SlideStylePropertiesArchive slide_properties = 11;
  if (has_slide_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->slide_properties(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlideStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSS.StyleArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional uint32 override_count = 10 [default = 0];
    if (has_override_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->override_count());
    }

    // optional .KN.SlideStylePropertiesArchive slide_properties = 11;
    if (has_slide_properties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slide_properties());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlideStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlideStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlideStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlideStyleArchive::MergeFrom(const SlideStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::StyleArchive::MergeFrom(from.super());
    }
    if (from.has_override_count()) {
      set_override_count(from.override_count());
    }
    if (from.has_slide_properties()) {
      mutable_slide_properties()->::KN::SlideStylePropertiesArchive::MergeFrom(from.slide_properties());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlideStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlideStyleArchive::CopyFrom(const SlideStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideStyleArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_slide_properties()) {
    if (!this->slide_properties().IsInitialized()) return false;
  }
  return true;
}

void SlideStyleArchive::Swap(SlideStyleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(override_count_, other->override_count_);
    std::swap(slide_properties_, other->slide_properties_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlideStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlideStyleArchive_descriptor_;
  metadata.reflection = SlideStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PasteboardNativeStorageArchive::kDrawablesFieldNumber;
const int PasteboardNativeStorageArchive::kBuildsFieldNumber;
const int PasteboardNativeStorageArchive::kBuildChunksFieldNumber;
const int PasteboardNativeStorageArchive::kSlideNodesFieldNumber;
const int PasteboardNativeStorageArchive::kMasterSlideNodesFieldNumber;
const int PasteboardNativeStorageArchive::kOriginalShowSizeFieldNumber;
const int PasteboardNativeStorageArchive::kTitleRangesFieldNumber;
const int PasteboardNativeStorageArchive::kGeometriesInRootFieldNumber;
const int PasteboardNativeStorageArchive::kSlideNodeUniqueIdentifierFieldNumber;
#endif  // !_MSC_VER

PasteboardNativeStorageArchive::PasteboardNativeStorageArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PasteboardNativeStorageArchive::InitAsDefaultInstance() {
  originalshowsize_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
}

PasteboardNativeStorageArchive::PasteboardNativeStorageArchive(const PasteboardNativeStorageArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PasteboardNativeStorageArchive::SharedCtor() {
  _cached_size_ = 0;
  originalshowsize_ = NULL;
  slide_node_unique_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PasteboardNativeStorageArchive::~PasteboardNativeStorageArchive() {
  SharedDtor();
}

void PasteboardNativeStorageArchive::SharedDtor() {
  if (slide_node_unique_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete slide_node_unique_identifier_;
  }
  if (this != default_instance_) {
    delete originalshowsize_;
  }
}

void PasteboardNativeStorageArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PasteboardNativeStorageArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PasteboardNativeStorageArchive_descriptor_;
}

const PasteboardNativeStorageArchive& PasteboardNativeStorageArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

PasteboardNativeStorageArchive* PasteboardNativeStorageArchive::default_instance_ = NULL;

PasteboardNativeStorageArchive* PasteboardNativeStorageArchive::New() const {
  return new PasteboardNativeStorageArchive;
}

void PasteboardNativeStorageArchive::Clear() {
  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    if (has_originalshowsize()) {
      if (originalshowsize_ != NULL) originalshowsize_->::TSP::Size::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_slide_node_unique_identifier()) {
      if (slide_node_unique_identifier_ != &::google::protobuf::internal::kEmptyString) {
        slide_node_unique_identifier_->clear();
      }
    }
  }
  drawables_.Clear();
  builds_.Clear();
  buildchunks_.Clear();
  slidenodes_.Clear();
  masterslidenodes_.Clear();
  titleranges_.Clear();
  geometries_in_root_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PasteboardNativeStorageArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSP.Reference drawables = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drawables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drawables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_drawables;
        if (input->ExpectTag(18)) goto parse_builds;
        break;
      }

      // repeated .TSP.Reference builds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_builds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_builds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_builds;
        if (input->ExpectTag(26)) goto parse_buildChunks;
        break;
      }

      // repeated .KN.BuildChunkArchive buildChunks = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildChunks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildchunks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_buildChunks;
        if (input->ExpectTag(34)) goto parse_slideNodes;
        break;
      }

      // repeated .TSP.Reference slideNodes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slideNodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slidenodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_slideNodes;
        if (input->ExpectTag(42)) goto parse_originalShowSize;
        break;
      }

      // optional .TSP.Size originalShowSize = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_originalShowSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_originalshowsize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_titleRanges;
        break;
      }

      // repeated .TSP.Range titleRanges = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titleRanges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_titleranges()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_titleRanges;
        if (input->ExpectTag(58)) goto parse_geometries_in_root;
        break;
      }

      // repeated .TSD.GeometryArchive geometries_in_root = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geometries_in_root:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_geometries_in_root()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_geometries_in_root;
        if (input->ExpectTag(66)) goto parse_slide_node_unique_identifier;
        break;
      }

      // optional string slide_node_unique_identifier = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slide_node_unique_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slide_node_unique_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->slide_node_unique_identifier().data(), this->slide_node_unique_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_masterSlideNodes;
        break;
      }

      // repeated .TSP.Reference masterSlideNodes = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_masterSlideNodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_masterslidenodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_masterSlideNodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PasteboardNativeStorageArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSP.Reference drawables = 1;
  for (int i = 0; i < this->drawables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->drawables(i), output);
  }

  // repeated .TSP.Reference builds = 2;
  for (int i = 0; i < this->builds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->builds(i), output);
  }

  // repeated .KN.BuildChunkArchive buildChunks = 3;
  for (int i = 0; i < this->buildchunks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buildchunks(i), output);
  }

  // repeated .TSP.Reference slideNodes = 4;
  for (int i = 0; i < this->slidenodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->slidenodes(i), output);
  }

  // optional .TSP.Size originalShowSize = 5;
  if (has_originalshowsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->originalshowsize(), output);
  }

  // repeated .TSP.Range titleRanges = 6;
  for (int i = 0; i < this->titleranges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->titleranges(i), output);
  }

  // repeated .TSD.GeometryArchive geometries_in_root = 7;
  for (int i = 0; i < this->geometries_in_root_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->geometries_in_root(i), output);
  }

  // optional string slide_node_unique_identifier = 8;
  if (has_slide_node_unique_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->slide_node_unique_identifier().data(), this->slide_node_unique_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->slide_node_unique_identifier(), output);
  }

  // repeated .TSP.Reference masterSlideNodes = 9;
  for (int i = 0; i < this->masterslidenodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->masterslidenodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PasteboardNativeStorageArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSP.Reference drawables = 1;
  for (int i = 0; i < this->drawables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->drawables(i), target);
  }

  // repeated .TSP.Reference builds = 2;
  for (int i = 0; i < this->builds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->builds(i), target);
  }

  // repeated .KN.BuildChunkArchive buildChunks = 3;
  for (int i = 0; i < this->buildchunks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->buildchunks(i), target);
  }

  // repeated .TSP.Reference slideNodes = 4;
  for (int i = 0; i < this->slidenodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->slidenodes(i), target);
  }

  // optional .TSP.Size originalShowSize = 5;
  if (has_originalshowsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->originalshowsize(), target);
  }

  // repeated .TSP.Range titleRanges = 6;
  for (int i = 0; i < this->titleranges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->titleranges(i), target);
  }

  // repeated .TSD.GeometryArchive geometries_in_root = 7;
  for (int i = 0; i < this->geometries_in_root_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->geometries_in_root(i), target);
  }

  // optional string slide_node_unique_identifier = 8;
  if (has_slide_node_unique_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->slide_node_unique_identifier().data(), this->slide_node_unique_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->slide_node_unique_identifier(), target);
  }

  // repeated .TSP.Reference masterSlideNodes = 9;
  for (int i = 0; i < this->masterslidenodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->masterslidenodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PasteboardNativeStorageArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    // optional .TSP.Size originalShowSize = 5;
    if (has_originalshowsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->originalshowsize());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string slide_node_unique_identifier = 8;
    if (has_slide_node_unique_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->slide_node_unique_identifier());
    }

  }
  // repeated .TSP.Reference drawables = 1;
  total_size += 1 * this->drawables_size();
  for (int i = 0; i < this->drawables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drawables(i));
  }

  // repeated .TSP.Reference builds = 2;
  total_size += 1 * this->builds_size();
  for (int i = 0; i < this->builds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->builds(i));
  }

  // repeated .KN.BuildChunkArchive buildChunks = 3;
  total_size += 1 * this->buildchunks_size();
  for (int i = 0; i < this->buildchunks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buildchunks(i));
  }

  // repeated .TSP.Reference slideNodes = 4;
  total_size += 1 * this->slidenodes_size();
  for (int i = 0; i < this->slidenodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slidenodes(i));
  }

  // repeated .TSP.Reference masterSlideNodes = 9;
  total_size += 1 * this->masterslidenodes_size();
  for (int i = 0; i < this->masterslidenodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->masterslidenodes(i));
  }

  // repeated .TSP.Range titleRanges = 6;
  total_size += 1 * this->titleranges_size();
  for (int i = 0; i < this->titleranges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->titleranges(i));
  }

  // repeated .TSD.GeometryArchive geometries_in_root = 7;
  total_size += 1 * this->geometries_in_root_size();
  for (int i = 0; i < this->geometries_in_root_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->geometries_in_root(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PasteboardNativeStorageArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PasteboardNativeStorageArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PasteboardNativeStorageArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PasteboardNativeStorageArchive::MergeFrom(const PasteboardNativeStorageArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  drawables_.MergeFrom(from.drawables_);
  builds_.MergeFrom(from.builds_);
  buildchunks_.MergeFrom(from.buildchunks_);
  slidenodes_.MergeFrom(from.slidenodes_);
  masterslidenodes_.MergeFrom(from.masterslidenodes_);
  titleranges_.MergeFrom(from.titleranges_);
  geometries_in_root_.MergeFrom(from.geometries_in_root_);
  if (from._has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    if (from.has_originalshowsize()) {
      mutable_originalshowsize()->::TSP::Size::MergeFrom(from.originalshowsize());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_slide_node_unique_identifier()) {
      set_slide_node_unique_identifier(from.slide_node_unique_identifier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PasteboardNativeStorageArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PasteboardNativeStorageArchive::CopyFrom(const PasteboardNativeStorageArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasteboardNativeStorageArchive::IsInitialized() const {

  for (int i = 0; i < drawables_size(); i++) {
    if (!this->drawables(i).IsInitialized()) return false;
  }
  for (int i = 0; i < builds_size(); i++) {
    if (!this->builds(i).IsInitialized()) return false;
  }
  for (int i = 0; i < buildchunks_size(); i++) {
    if (!this->buildchunks(i).IsInitialized()) return false;
  }
  for (int i = 0; i < slidenodes_size(); i++) {
    if (!this->slidenodes(i).IsInitialized()) return false;
  }
  for (int i = 0; i < masterslidenodes_size(); i++) {
    if (!this->masterslidenodes(i).IsInitialized()) return false;
  }
  if (has_originalshowsize()) {
    if (!this->originalshowsize().IsInitialized()) return false;
  }
  for (int i = 0; i < titleranges_size(); i++) {
    if (!this->titleranges(i).IsInitialized()) return false;
  }
  for (int i = 0; i < geometries_in_root_size(); i++) {
    if (!this->geometries_in_root(i).IsInitialized()) return false;
  }
  return true;
}

void PasteboardNativeStorageArchive::Swap(PasteboardNativeStorageArchive* other) {
  if (other != this) {
    drawables_.Swap(&other->drawables_);
    builds_.Swap(&other->builds_);
    buildchunks_.Swap(&other->buildchunks_);
    slidenodes_.Swap(&other->slidenodes_);
    masterslidenodes_.Swap(&other->masterslidenodes_);
    std::swap(originalshowsize_, other->originalshowsize_);
    titleranges_.Swap(&other->titleranges_);
    geometries_in_root_.Swap(&other->geometries_in_root_);
    std::swap(slide_node_unique_identifier_, other->slide_node_unique_identifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PasteboardNativeStorageArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PasteboardNativeStorageArchive_descriptor_;
  metadata.reflection = PasteboardNativeStorageArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MasterChangeBlobArchive::kSlideFieldNumber;
const int MasterChangeBlobArchive::kMasterFieldNumber;
const int MasterChangeBlobArchive::kSlideStyleFieldNumber;
const int MasterChangeBlobArchive::kTitlePlaceholderFieldNumber;
const int MasterChangeBlobArchive::kBodyPlaceholderFieldNumber;
const int MasterChangeBlobArchive::kObjectPlaceholderFieldNumber;
const int MasterChangeBlobArchive::kDrawablesFieldNumber;
#endif  // !_MSC_VER

MasterChangeBlobArchive::MasterChangeBlobArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MasterChangeBlobArchive::InitAsDefaultInstance() {
  slide_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  master_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  slide_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  title_placeholder_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  body_placeholder_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  object_placeholder_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

MasterChangeBlobArchive::MasterChangeBlobArchive(const MasterChangeBlobArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MasterChangeBlobArchive::SharedCtor() {
  _cached_size_ = 0;
  slide_ = NULL;
  master_ = NULL;
  slide_style_ = NULL;
  title_placeholder_ = NULL;
  body_placeholder_ = NULL;
  object_placeholder_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MasterChangeBlobArchive::~MasterChangeBlobArchive() {
  SharedDtor();
}

void MasterChangeBlobArchive::SharedDtor() {
  if (this != default_instance_) {
    delete slide_;
    delete master_;
    delete slide_style_;
    delete title_placeholder_;
    delete body_placeholder_;
    delete object_placeholder_;
  }
}

void MasterChangeBlobArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterChangeBlobArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterChangeBlobArchive_descriptor_;
}

const MasterChangeBlobArchive& MasterChangeBlobArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

MasterChangeBlobArchive* MasterChangeBlobArchive::default_instance_ = NULL;

MasterChangeBlobArchive* MasterChangeBlobArchive::New() const {
  return new MasterChangeBlobArchive;
}

void MasterChangeBlobArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_slide()) {
      if (slide_ != NULL) slide_->::TSP::Reference::Clear();
    }
    if (has_master()) {
      if (master_ != NULL) master_->::TSP::Reference::Clear();
    }
    if (has_slide_style()) {
      if (slide_style_ != NULL) slide_style_->::TSP::Reference::Clear();
    }
    if (has_title_placeholder()) {
      if (title_placeholder_ != NULL) title_placeholder_->::TSP::Reference::Clear();
    }
    if (has_body_placeholder()) {
      if (body_placeholder_ != NULL) body_placeholder_->::TSP::Reference::Clear();
    }
    if (has_object_placeholder()) {
      if (object_placeholder_ != NULL) object_placeholder_->::TSP::Reference::Clear();
    }
  }
  drawables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MasterChangeBlobArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference slide = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slide()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_master;
        break;
      }

      // optional .TSP.Reference master = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_master()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_slide_style;
        break;
      }

      // optional .TSP.Reference slide_style = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slide_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slide_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_title_placeholder;
        break;
      }

      // optional .TSP.Reference title_placeholder = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title_placeholder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_title_placeholder()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_body_placeholder;
        break;
      }

      // optional .TSP.Reference body_placeholder = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body_placeholder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body_placeholder()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_drawables;
        break;
      }

      // repeated .TSP.Reference drawables = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drawables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drawables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_drawables;
        if (input->ExpectTag(58)) goto parse_object_placeholder;
        break;
      }

      // optional .TSP.Reference object_placeholder = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object_placeholder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object_placeholder()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MasterChangeBlobArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference slide = 1;
  if (has_slide()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->slide(), output);
  }

  // optional .TSP.Reference master = 2;
  if (has_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->master(), output);
  }

  // optional .TSP.Reference slide_style = 3;
  if (has_slide_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->slide_style(), output);
  }

  // optional .TSP.Reference title_placeholder = 4;
  if (has_title_placeholder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->title_placeholder(), output);
  }

  // optional .TSP.Reference body_placeholder = 5;
  if (has_body_placeholder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->body_placeholder(), output);
  }

  // repeated .TSP.Reference drawables = 6;
  for (int i = 0; i < this->drawables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->drawables(i), output);
  }

  // optional .TSP.Reference object_placeholder = 7;
  if (has_object_placeholder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->object_placeholder(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MasterChangeBlobArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference slide = 1;
  if (has_slide()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->slide(), target);
  }

  // optional .TSP.Reference master = 2;
  if (has_master()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->master(), target);
  }

  // optional .TSP.Reference slide_style = 3;
  if (has_slide_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->slide_style(), target);
  }

  // optional .TSP.Reference title_placeholder = 4;
  if (has_title_placeholder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->title_placeholder(), target);
  }

  // optional .TSP.Reference body_placeholder = 5;
  if (has_body_placeholder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->body_placeholder(), target);
  }

  // repeated .TSP.Reference drawables = 6;
  for (int i = 0; i < this->drawables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->drawables(i), target);
  }

  // optional .TSP.Reference object_placeholder = 7;
  if (has_object_placeholder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->object_placeholder(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MasterChangeBlobArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference slide = 1;
    if (has_slide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slide());
    }

    // optional .TSP.Reference master = 2;
    if (has_master()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->master());
    }

    // optional .TSP.Reference slide_style = 3;
    if (has_slide_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slide_style());
    }

    // optional .TSP.Reference title_placeholder = 4;
    if (has_title_placeholder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->title_placeholder());
    }

    // optional .TSP.Reference body_placeholder = 5;
    if (has_body_placeholder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body_placeholder());
    }

    // optional .TSP.Reference object_placeholder = 7;
    if (has_object_placeholder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object_placeholder());
    }

  }
  // repeated .TSP.Reference drawables = 6;
  total_size += 1 * this->drawables_size();
  for (int i = 0; i < this->drawables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drawables(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterChangeBlobArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MasterChangeBlobArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MasterChangeBlobArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MasterChangeBlobArchive::MergeFrom(const MasterChangeBlobArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  drawables_.MergeFrom(from.drawables_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slide()) {
      mutable_slide()->::TSP::Reference::MergeFrom(from.slide());
    }
    if (from.has_master()) {
      mutable_master()->::TSP::Reference::MergeFrom(from.master());
    }
    if (from.has_slide_style()) {
      mutable_slide_style()->::TSP::Reference::MergeFrom(from.slide_style());
    }
    if (from.has_title_placeholder()) {
      mutable_title_placeholder()->::TSP::Reference::MergeFrom(from.title_placeholder());
    }
    if (from.has_body_placeholder()) {
      mutable_body_placeholder()->::TSP::Reference::MergeFrom(from.body_placeholder());
    }
    if (from.has_object_placeholder()) {
      mutable_object_placeholder()->::TSP::Reference::MergeFrom(from.object_placeholder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MasterChangeBlobArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterChangeBlobArchive::CopyFrom(const MasterChangeBlobArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterChangeBlobArchive::IsInitialized() const {

  if (has_slide()) {
    if (!this->slide().IsInitialized()) return false;
  }
  if (has_master()) {
    if (!this->master().IsInitialized()) return false;
  }
  if (has_slide_style()) {
    if (!this->slide_style().IsInitialized()) return false;
  }
  if (has_title_placeholder()) {
    if (!this->title_placeholder().IsInitialized()) return false;
  }
  if (has_body_placeholder()) {
    if (!this->body_placeholder().IsInitialized()) return false;
  }
  if (has_object_placeholder()) {
    if (!this->object_placeholder().IsInitialized()) return false;
  }
  for (int i = 0; i < drawables_size(); i++) {
    if (!this->drawables(i).IsInitialized()) return false;
  }
  return true;
}

void MasterChangeBlobArchive::Swap(MasterChangeBlobArchive* other) {
  if (other != this) {
    std::swap(slide_, other->slide_);
    std::swap(master_, other->master_);
    std::swap(slide_style_, other->slide_style_);
    std::swap(title_placeholder_, other->title_placeholder_);
    std::swap(body_placeholder_, other->body_placeholder_);
    std::swap(object_placeholder_, other->object_placeholder_);
    drawables_.Swap(&other->drawables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MasterChangeBlobArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MasterChangeBlobArchive_descriptor_;
  metadata.reflection = MasterChangeBlobArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RecordingArchive_RecordingSyncState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordingArchive_RecordingSyncState_descriptor_;
}
bool RecordingArchive_RecordingSyncState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RecordingArchive_RecordingSyncState RecordingArchive::kRecordingSyncStateInSyncWithShow;
const RecordingArchive_RecordingSyncState RecordingArchive::kRecordingSyncStateOutOfSyncWithShow;
const RecordingArchive_RecordingSyncState RecordingArchive::RecordingSyncState_MIN;
const RecordingArchive_RecordingSyncState RecordingArchive::RecordingSyncState_MAX;
const int RecordingArchive::RecordingSyncState_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RecordingArchive::kEventTracksFieldNumber;
const int RecordingArchive::kMovieTrackFieldNumber;
const int RecordingArchive::kDurationFieldNumber;
const int RecordingArchive::kSyncStateFieldNumber;
const int RecordingArchive::kModificationDateFieldNumber;
#endif  // !_MSC_VER

RecordingArchive::RecordingArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordingArchive::InitAsDefaultInstance() {
  movie_track_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  modification_date_ = const_cast< ::TSP::Date*>(&::TSP::Date::default_instance());
}

RecordingArchive::RecordingArchive(const RecordingArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordingArchive::SharedCtor() {
  _cached_size_ = 0;
  movie_track_ = NULL;
  duration_ = 0;
  sync_state_ = 0;
  modification_date_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordingArchive::~RecordingArchive() {
  SharedDtor();
}

void RecordingArchive::SharedDtor() {
  if (this != default_instance_) {
    delete movie_track_;
    delete modification_date_;
  }
}

void RecordingArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordingArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordingArchive_descriptor_;
}

const RecordingArchive& RecordingArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

RecordingArchive* RecordingArchive::default_instance_ = NULL;

RecordingArchive* RecordingArchive::New() const {
  return new RecordingArchive;
}

void RecordingArchive::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_movie_track()) {
      if (movie_track_ != NULL) movie_track_->::TSP::Reference::Clear();
    }
    duration_ = 0;
    sync_state_ = 0;
    if (has_modification_date()) {
      if (modification_date_ != NULL) modification_date_->::TSP::Date::Clear();
    }
  }
  event_tracks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordingArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSP.Reference event_tracks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_tracks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event_tracks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_event_tracks;
        if (input->ExpectTag(18)) goto parse_movie_track;
        break;
      }

      // optional .TSP.Reference movie_track = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_movie_track:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_movie_track()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_duration;
        break;
      }

      // optional double duration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sync_state;
        break;
      }

      // optional .KN.RecordingArchive.RecordingSyncState sync_state = 4 [default = kRecordingSyncStateInSyncWithShow];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sync_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::KN::RecordingArchive_RecordingSyncState_IsValid(value)) {
            set_sync_state(static_cast< ::KN::RecordingArchive_RecordingSyncState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_modification_date;
        break;
      }

      // optional .TSP.Date modification_date = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modification_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modification_date()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordingArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSP.Reference event_tracks = 1;
  for (int i = 0; i < this->event_tracks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->event_tracks(i), output);
  }

  // optional .TSP.Reference movie_track = 2;
  if (has_movie_track()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->movie_track(), output);
  }

  // optional double duration = 3;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->duration(), output);
  }

  // optional .KN.RecordingArchive.RecordingSyncState sync_state = 4 [default = kRecordingSyncStateInSyncWithShow];
  if (has_sync_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->sync_state(), output);
  }

  // optional .TSP.Date modification_date = 5;
  if (has_modification_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->modification_date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordingArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSP.Reference event_tracks = 1;
  for (int i = 0; i < this->event_tracks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->event_tracks(i), target);
  }

  // optional .TSP.Reference movie_track = 2;
  if (has_movie_track()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->movie_track(), target);
  }

  // optional double duration = 3;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->duration(), target);
  }

  // optional .KN.RecordingArchive.RecordingSyncState sync_state = 4 [default = kRecordingSyncStateInSyncWithShow];
  if (has_sync_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->sync_state(), target);
  }

  // optional .TSP.Date modification_date = 5;
  if (has_modification_date()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->modification_date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordingArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .TSP.Reference movie_track = 2;
    if (has_movie_track()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->movie_track());
    }

    // optional double duration = 3;
    if (has_duration()) {
      total_size += 1 + 8;
    }

    // optional .KN.RecordingArchive.RecordingSyncState sync_state = 4 [default = kRecordingSyncStateInSyncWithShow];
    if (has_sync_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sync_state());
    }

    // optional .TSP.Date modification_date = 5;
    if (has_modification_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modification_date());
    }

  }
  // repeated .TSP.Reference event_tracks = 1;
  total_size += 1 * this->event_tracks_size();
  for (int i = 0; i < this->event_tracks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event_tracks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordingArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordingArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordingArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordingArchive::MergeFrom(const RecordingArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_tracks_.MergeFrom(from.event_tracks_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_movie_track()) {
      mutable_movie_track()->::TSP::Reference::MergeFrom(from.movie_track());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_sync_state()) {
      set_sync_state(from.sync_state());
    }
    if (from.has_modification_date()) {
      mutable_modification_date()->::TSP::Date::MergeFrom(from.modification_date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordingArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordingArchive::CopyFrom(const RecordingArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingArchive::IsInitialized() const {

  for (int i = 0; i < event_tracks_size(); i++) {
    if (!this->event_tracks(i).IsInitialized()) return false;
  }
  if (has_movie_track()) {
    if (!this->movie_track().IsInitialized()) return false;
  }
  if (has_modification_date()) {
    if (!this->modification_date().IsInitialized()) return false;
  }
  return true;
}

void RecordingArchive::Swap(RecordingArchive* other) {
  if (other != this) {
    event_tracks_.Swap(&other->event_tracks_);
    std::swap(movie_track_, other->movie_track_);
    std::swap(duration_, other->duration_);
    std::swap(sync_state_, other->sync_state_);
    std::swap(modification_date_, other->modification_date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordingArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordingArchive_descriptor_;
  metadata.reflection = RecordingArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordingEventTrackArchive::kTypeFieldNumber;
const int RecordingEventTrackArchive::kEventsFieldNumber;
#endif  // !_MSC_VER

RecordingEventTrackArchive::RecordingEventTrackArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordingEventTrackArchive::InitAsDefaultInstance() {
}

RecordingEventTrackArchive::RecordingEventTrackArchive(const RecordingEventTrackArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordingEventTrackArchive::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordingEventTrackArchive::~RecordingEventTrackArchive() {
  SharedDtor();
}

void RecordingEventTrackArchive::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void RecordingEventTrackArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordingEventTrackArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordingEventTrackArchive_descriptor_;
}

const RecordingEventTrackArchive& RecordingEventTrackArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

RecordingEventTrackArchive* RecordingEventTrackArchive::default_instance_ = NULL;

RecordingEventTrackArchive* RecordingEventTrackArchive::New() const {
  return new RecordingEventTrackArchive;
}

void RecordingEventTrackArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
  }
  events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordingEventTrackArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_events;
        break;
      }

      // repeated .KN.RecordingEventArchive events = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_events;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordingEventTrackArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(), output);
  }

  // repeated .KN.RecordingEventArchive events = 2;
  for (int i = 0; i < this->events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->events(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordingEventTrackArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // repeated .KN.RecordingEventArchive events = 2;
  for (int i = 0; i < this->events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->events(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordingEventTrackArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  // repeated .KN.RecordingEventArchive events = 2;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordingEventTrackArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordingEventTrackArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordingEventTrackArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordingEventTrackArchive::MergeFrom(const RecordingEventTrackArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  events_.MergeFrom(from.events_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordingEventTrackArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordingEventTrackArchive::CopyFrom(const RecordingEventTrackArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingEventTrackArchive::IsInitialized() const {

  for (int i = 0; i < events_size(); i++) {
    if (!this->events(i).IsInitialized()) return false;
  }
  return true;
}

void RecordingEventTrackArchive::Swap(RecordingEventTrackArchive* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    events_.Swap(&other->events_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordingEventTrackArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordingEventTrackArchive_descriptor_;
  metadata.reflection = RecordingEventTrackArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordingEventArchive::kStartTimeFieldNumber;
const int RecordingEventArchive::kNavigationEventArchiveFieldNumber;
const int RecordingEventArchive::kLaserEventArchiveFieldNumber;
const int RecordingEventArchive::kPauseEventArchiveFieldNumber;
const int RecordingEventArchive::kMovieEventArchiveFieldNumber;
#endif  // !_MSC_VER

RecordingEventArchive::RecordingEventArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordingEventArchive::InitAsDefaultInstance() {
  navigation_event_archive_ = const_cast< ::KN::RecordingNavigationEventArchive*>(&::KN::RecordingNavigationEventArchive::default_instance());
  laser_event_archive_ = const_cast< ::KN::RecordingLaserEventArchive*>(&::KN::RecordingLaserEventArchive::default_instance());
  pause_event_archive_ = const_cast< ::KN::RecordingPauseEventArchive*>(&::KN::RecordingPauseEventArchive::default_instance());
  movie_event_archive_ = const_cast< ::KN::RecordingMovieEventArchive*>(&::KN::RecordingMovieEventArchive::default_instance());
}

RecordingEventArchive::RecordingEventArchive(const RecordingEventArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordingEventArchive::SharedCtor() {
  _cached_size_ = 0;
  start_time_ = -1;
  navigation_event_archive_ = NULL;
  laser_event_archive_ = NULL;
  pause_event_archive_ = NULL;
  movie_event_archive_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordingEventArchive::~RecordingEventArchive() {
  SharedDtor();
}

void RecordingEventArchive::SharedDtor() {
  if (this != default_instance_) {
    delete navigation_event_archive_;
    delete laser_event_archive_;
    delete pause_event_archive_;
    delete movie_event_archive_;
  }
}

void RecordingEventArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordingEventArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordingEventArchive_descriptor_;
}

const RecordingEventArchive& RecordingEventArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

RecordingEventArchive* RecordingEventArchive::default_instance_ = NULL;

RecordingEventArchive* RecordingEventArchive::New() const {
  return new RecordingEventArchive;
}

void RecordingEventArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_time_ = -1;
    if (has_navigation_event_archive()) {
      if (navigation_event_archive_ != NULL) navigation_event_archive_->::KN::RecordingNavigationEventArchive::Clear();
    }
    if (has_laser_event_archive()) {
      if (laser_event_archive_ != NULL) laser_event_archive_->::KN::RecordingLaserEventArchive::Clear();
    }
    if (has_pause_event_archive()) {
      if (pause_event_archive_ != NULL) pause_event_archive_->::KN::RecordingPauseEventArchive::Clear();
    }
    if (has_movie_event_archive()) {
      if (movie_event_archive_ != NULL) movie_event_archive_->::KN::RecordingMovieEventArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordingEventArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double start_time = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_navigation_event_archive;
        break;
      }

      // optional .KN.RecordingNavigationEventArchive navigation_event_archive = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_navigation_event_archive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_navigation_event_archive()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8010)) goto parse_laser_event_archive;
        break;
      }

      // optional .KN.RecordingLaserEventArchive laser_event_archive = 1001;
      case 1001: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_laser_event_archive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_laser_event_archive()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8018)) goto parse_pause_event_archive;
        break;
      }

      // optional .KN.RecordingPauseEventArchive pause_event_archive = 1002;
      case 1002: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pause_event_archive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pause_event_archive()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8026)) goto parse_movie_event_archive;
        break;
      }

      // optional .KN.RecordingMovieEventArchive movie_event_archive = 1003;
      case 1003: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_movie_event_archive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_movie_event_archive()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordingEventArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double start_time = 1 [default = -1];
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->start_time(), output);
  }

  // optional .KN.RecordingNavigationEventArchive navigation_event_archive = 1000;
  if (has_navigation_event_archive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->navigation_event_archive(), output);
  }

  // optional .KN.RecordingLaserEventArchive laser_event_archive = 1001;
  if (has_laser_event_archive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1001, this->laser_event_archive(), output);
  }

  // optional .KN.RecordingPauseEventArchive pause_event_archive = 1002;
  if (has_pause_event_archive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1002, this->pause_event_archive(), output);
  }

  // optional .KN.RecordingMovieEventArchive movie_event_archive = 1003;
  if (has_movie_event_archive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1003, this->movie_event_archive(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordingEventArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double start_time = 1 [default = -1];
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->start_time(), target);
  }

  // optional .KN.RecordingNavigationEventArchive navigation_event_archive = 1000;
  if (has_navigation_event_archive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->navigation_event_archive(), target);
  }

  // optional .KN.RecordingLaserEventArchive laser_event_archive = 1001;
  if (has_laser_event_archive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1001, this->laser_event_archive(), target);
  }

  // optional .KN.RecordingPauseEventArchive pause_event_archive = 1002;
  if (has_pause_event_archive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1002, this->pause_event_archive(), target);
  }

  // optional .KN.RecordingMovieEventArchive movie_event_archive = 1003;
  if (has_movie_event_archive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1003, this->movie_event_archive(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordingEventArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double start_time = 1 [default = -1];
    if (has_start_time()) {
      total_size += 1 + 8;
    }

    // optional .KN.RecordingNavigationEventArchive navigation_event_archive = 1000;
    if (has_navigation_event_archive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->navigation_event_archive());
    }

    // optional .KN.RecordingLaserEventArchive laser_event_archive = 1001;
    if (has_laser_event_archive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->laser_event_archive());
    }

    // optional .KN.RecordingPauseEventArchive pause_event_archive = 1002;
    if (has_pause_event_archive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pause_event_archive());
    }

    // optional .KN.RecordingMovieEventArchive movie_event_archive = 1003;
    if (has_movie_event_archive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->movie_event_archive());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordingEventArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordingEventArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordingEventArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordingEventArchive::MergeFrom(const RecordingEventArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_navigation_event_archive()) {
      mutable_navigation_event_archive()->::KN::RecordingNavigationEventArchive::MergeFrom(from.navigation_event_archive());
    }
    if (from.has_laser_event_archive()) {
      mutable_laser_event_archive()->::KN::RecordingLaserEventArchive::MergeFrom(from.laser_event_archive());
    }
    if (from.has_pause_event_archive()) {
      mutable_pause_event_archive()->::KN::RecordingPauseEventArchive::MergeFrom(from.pause_event_archive());
    }
    if (from.has_movie_event_archive()) {
      mutable_movie_event_archive()->::KN::RecordingMovieEventArchive::MergeFrom(from.movie_event_archive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordingEventArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordingEventArchive::CopyFrom(const RecordingEventArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingEventArchive::IsInitialized() const {

  if (has_navigation_event_archive()) {
    if (!this->navigation_event_archive().IsInitialized()) return false;
  }
  if (has_laser_event_archive()) {
    if (!this->laser_event_archive().IsInitialized()) return false;
  }
  if (has_movie_event_archive()) {
    if (!this->movie_event_archive().IsInitialized()) return false;
  }
  return true;
}

void RecordingEventArchive::Swap(RecordingEventArchive* other) {
  if (other != this) {
    std::swap(start_time_, other->start_time_);
    std::swap(navigation_event_archive_, other->navigation_event_archive_);
    std::swap(laser_event_archive_, other->laser_event_archive_);
    std::swap(pause_event_archive_, other->pause_event_archive_);
    std::swap(movie_event_archive_, other->movie_event_archive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordingEventArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordingEventArchive_descriptor_;
  metadata.reflection = RecordingEventArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_descriptor_;
}
bool RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase RecordingNavigationEventArchive::kRecordingNavigationEventAnimationNone;
const RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase RecordingNavigationEventArchive::kRecordingNavigationEventAnimationStart;
const RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase RecordingNavigationEventArchive::kRecordingNavigationEventAnimationEnd;
const RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase RecordingNavigationEventArchive::RecordingNavigationEventAnimationPhase_MIN;
const RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase RecordingNavigationEventArchive::RecordingNavigationEventAnimationPhase_MAX;
const int RecordingNavigationEventArchive::RecordingNavigationEventAnimationPhase_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RecordingNavigationEventArchive::kTargetSlideNodeReferenceFieldNumber;
const int RecordingNavigationEventArchive::kTargetEventIndexFieldNumber;
const int RecordingNavigationEventArchive::kAnimationPhaseFieldNumber;
#endif  // !_MSC_VER

RecordingNavigationEventArchive::RecordingNavigationEventArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordingNavigationEventArchive::InitAsDefaultInstance() {
  target_slide_node_reference_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

RecordingNavigationEventArchive::RecordingNavigationEventArchive(const RecordingNavigationEventArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordingNavigationEventArchive::SharedCtor() {
  _cached_size_ = 0;
  target_slide_node_reference_ = NULL;
  target_event_index_ = 0u;
  animation_phase_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordingNavigationEventArchive::~RecordingNavigationEventArchive() {
  SharedDtor();
}

void RecordingNavigationEventArchive::SharedDtor() {
  if (this != default_instance_) {
    delete target_slide_node_reference_;
  }
}

void RecordingNavigationEventArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordingNavigationEventArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordingNavigationEventArchive_descriptor_;
}

const RecordingNavigationEventArchive& RecordingNavigationEventArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

RecordingNavigationEventArchive* RecordingNavigationEventArchive::default_instance_ = NULL;

RecordingNavigationEventArchive* RecordingNavigationEventArchive::New() const {
  return new RecordingNavigationEventArchive;
}

void RecordingNavigationEventArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_target_slide_node_reference()) {
      if (target_slide_node_reference_ != NULL) target_slide_node_reference_->::TSP::Reference::Clear();
    }
    target_event_index_ = 0u;
    animation_phase_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordingNavigationEventArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference target_slide_node_reference = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_slide_node_reference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_event_index;
        break;
      }

      // optional uint32 target_event_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_event_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_event_index_)));
          set_has_target_event_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_animation_phase;
        break;
      }

      // optional .KN.RecordingNavigationEventArchive.RecordingNavigationEventAnimationPhase animation_phase = 3 [default = kRecordingNavigationEventAnimationNone];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_animation_phase:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_IsValid(value)) {
            set_animation_phase(static_cast< ::KN::RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordingNavigationEventArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference target_slide_node_reference = 1;
  if (has_target_slide_node_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->target_slide_node_reference(), output);
  }

  // optional uint32 target_event_index = 2;
  if (has_target_event_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_event_index(), output);
  }

  // optional .KN.RecordingNavigationEventArchive.RecordingNavigationEventAnimationPhase animation_phase = 3 [default = kRecordingNavigationEventAnimationNone];
  if (has_animation_phase()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->animation_phase(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordingNavigationEventArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference target_slide_node_reference = 1;
  if (has_target_slide_node_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->target_slide_node_reference(), target);
  }

  // optional uint32 target_event_index = 2;
  if (has_target_event_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_event_index(), target);
  }

  // optional .KN.RecordingNavigationEventArchive.RecordingNavigationEventAnimationPhase animation_phase = 3 [default = kRecordingNavigationEventAnimationNone];
  if (has_animation_phase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->animation_phase(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordingNavigationEventArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference target_slide_node_reference = 1;
    if (has_target_slide_node_reference()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_slide_node_reference());
    }

    // optional uint32 target_event_index = 2;
    if (has_target_event_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_event_index());
    }

    // optional .KN.RecordingNavigationEventArchive.RecordingNavigationEventAnimationPhase animation_phase = 3 [default = kRecordingNavigationEventAnimationNone];
    if (has_animation_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->animation_phase());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordingNavigationEventArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordingNavigationEventArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordingNavigationEventArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordingNavigationEventArchive::MergeFrom(const RecordingNavigationEventArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_slide_node_reference()) {
      mutable_target_slide_node_reference()->::TSP::Reference::MergeFrom(from.target_slide_node_reference());
    }
    if (from.has_target_event_index()) {
      set_target_event_index(from.target_event_index());
    }
    if (from.has_animation_phase()) {
      set_animation_phase(from.animation_phase());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordingNavigationEventArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordingNavigationEventArchive::CopyFrom(const RecordingNavigationEventArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingNavigationEventArchive::IsInitialized() const {

  if (has_target_slide_node_reference()) {
    if (!this->target_slide_node_reference().IsInitialized()) return false;
  }
  return true;
}

void RecordingNavigationEventArchive::Swap(RecordingNavigationEventArchive* other) {
  if (other != this) {
    std::swap(target_slide_node_reference_, other->target_slide_node_reference_);
    std::swap(target_event_index_, other->target_event_index_);
    std::swap(animation_phase_, other->animation_phase_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordingNavigationEventArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordingNavigationEventArchive_descriptor_;
  metadata.reflection = RecordingNavigationEventArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordingLaserEventArchive::kUnscaledLocationFieldNumber;
const int RecordingLaserEventArchive::kUnitLocationFieldNumber;
#endif  // !_MSC_VER

RecordingLaserEventArchive::RecordingLaserEventArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordingLaserEventArchive::InitAsDefaultInstance() {
  unscaled_location_ = const_cast< ::TSP::Point*>(&::TSP::Point::default_instance());
  unit_location_ = const_cast< ::TSP::Point*>(&::TSP::Point::default_instance());
}

RecordingLaserEventArchive::RecordingLaserEventArchive(const RecordingLaserEventArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordingLaserEventArchive::SharedCtor() {
  _cached_size_ = 0;
  unscaled_location_ = NULL;
  unit_location_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordingLaserEventArchive::~RecordingLaserEventArchive() {
  SharedDtor();
}

void RecordingLaserEventArchive::SharedDtor() {
  if (this != default_instance_) {
    delete unscaled_location_;
    delete unit_location_;
  }
}

void RecordingLaserEventArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordingLaserEventArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordingLaserEventArchive_descriptor_;
}

const RecordingLaserEventArchive& RecordingLaserEventArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

RecordingLaserEventArchive* RecordingLaserEventArchive::default_instance_ = NULL;

RecordingLaserEventArchive* RecordingLaserEventArchive::New() const {
  return new RecordingLaserEventArchive;
}

void RecordingLaserEventArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_unscaled_location()) {
      if (unscaled_location_ != NULL) unscaled_location_->::TSP::Point::Clear();
    }
    if (has_unit_location()) {
      if (unit_location_ != NULL) unit_location_->::TSP::Point::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordingLaserEventArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Point unscaled_location = 1 [deprecated = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unscaled_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unit_location;
        break;
      }

      // optional .TSP.Point unit_location = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unit_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unit_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordingLaserEventArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Point unscaled_location = 1 [deprecated = true];
  if (has_unscaled_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->unscaled_location(), output);
  }

  // optional .TSP.Point unit_location = 2;
  if (has_unit_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->unit_location(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordingLaserEventArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Point unscaled_location = 1 [deprecated = true];
  if (has_unscaled_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->unscaled_location(), target);
  }

  // optional .TSP.Point unit_location = 2;
  if (has_unit_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->unit_location(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordingLaserEventArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Point unscaled_location = 1 [deprecated = true];
    if (has_unscaled_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unscaled_location());
    }

    // optional .TSP.Point unit_location = 2;
    if (has_unit_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unit_location());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordingLaserEventArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordingLaserEventArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordingLaserEventArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordingLaserEventArchive::MergeFrom(const RecordingLaserEventArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unscaled_location()) {
      mutable_unscaled_location()->::TSP::Point::MergeFrom(from.unscaled_location());
    }
    if (from.has_unit_location()) {
      mutable_unit_location()->::TSP::Point::MergeFrom(from.unit_location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordingLaserEventArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordingLaserEventArchive::CopyFrom(const RecordingLaserEventArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingLaserEventArchive::IsInitialized() const {

  if (has_unscaled_location()) {
    if (!this->unscaled_location().IsInitialized()) return false;
  }
  if (has_unit_location()) {
    if (!this->unit_location().IsInitialized()) return false;
  }
  return true;
}

void RecordingLaserEventArchive::Swap(RecordingLaserEventArchive* other) {
  if (other != this) {
    std::swap(unscaled_location_, other->unscaled_location_);
    std::swap(unit_location_, other->unit_location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordingLaserEventArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordingLaserEventArchive_descriptor_;
  metadata.reflection = RecordingLaserEventArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RecordingPauseEventArchive_RecordingPauseEventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordingPauseEventArchive_RecordingPauseEventType_descriptor_;
}
bool RecordingPauseEventArchive_RecordingPauseEventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive::kRecordingPauseEventTypeResume;
const RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive::kRecordingPauseEventTypePause;
const RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive::kRecordingPauseEventTypeConcealWithBlack;
const RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive::kRecordingPauseEventTypeConcealWithWhite;
const RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive::RecordingPauseEventType_MIN;
const RecordingPauseEventArchive_RecordingPauseEventType RecordingPauseEventArchive::RecordingPauseEventType_MAX;
const int RecordingPauseEventArchive::RecordingPauseEventType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RecordingPauseEventArchive::kPauseEventTypeFieldNumber;
#endif  // !_MSC_VER

RecordingPauseEventArchive::RecordingPauseEventArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordingPauseEventArchive::InitAsDefaultInstance() {
}

RecordingPauseEventArchive::RecordingPauseEventArchive(const RecordingPauseEventArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordingPauseEventArchive::SharedCtor() {
  _cached_size_ = 0;
  pause_event_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordingPauseEventArchive::~RecordingPauseEventArchive() {
  SharedDtor();
}

void RecordingPauseEventArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecordingPauseEventArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordingPauseEventArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordingPauseEventArchive_descriptor_;
}

const RecordingPauseEventArchive& RecordingPauseEventArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

RecordingPauseEventArchive* RecordingPauseEventArchive::default_instance_ = NULL;

RecordingPauseEventArchive* RecordingPauseEventArchive::New() const {
  return new RecordingPauseEventArchive;
}

void RecordingPauseEventArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pause_event_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordingPauseEventArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .KN.RecordingPauseEventArchive.RecordingPauseEventType pause_event_type = 1 [default = kRecordingPauseEventTypeResume];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::KN::RecordingPauseEventArchive_RecordingPauseEventType_IsValid(value)) {
            set_pause_event_type(static_cast< ::KN::RecordingPauseEventArchive_RecordingPauseEventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordingPauseEventArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .KN.RecordingPauseEventArchive.RecordingPauseEventType pause_event_type = 1 [default = kRecordingPauseEventTypeResume];
  if (has_pause_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pause_event_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordingPauseEventArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .KN.RecordingPauseEventArchive.RecordingPauseEventType pause_event_type = 1 [default = kRecordingPauseEventTypeResume];
  if (has_pause_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pause_event_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordingPauseEventArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .KN.RecordingPauseEventArchive.RecordingPauseEventType pause_event_type = 1 [default = kRecordingPauseEventTypeResume];
    if (has_pause_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pause_event_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordingPauseEventArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordingPauseEventArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordingPauseEventArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordingPauseEventArchive::MergeFrom(const RecordingPauseEventArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pause_event_type()) {
      set_pause_event_type(from.pause_event_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordingPauseEventArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordingPauseEventArchive::CopyFrom(const RecordingPauseEventArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingPauseEventArchive::IsInitialized() const {

  return true;
}

void RecordingPauseEventArchive::Swap(RecordingPauseEventArchive* other) {
  if (other != this) {
    std::swap(pause_event_type_, other->pause_event_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordingPauseEventArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordingPauseEventArchive_descriptor_;
  metadata.reflection = RecordingPauseEventArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RecordingMovieEventArchive_RecordingMovieEventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordingMovieEventArchive_RecordingMovieEventType_descriptor_;
}
bool RecordingMovieEventArchive_RecordingMovieEventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::kRecordingMovieEventNone;
const RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::kRecordingMovieEventSeek;
const RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::kRecordingMovieEventSetRate;
const RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::kRecordingMovieEventStartPlayback;
const RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::kRecordingMovieEventStopPlayback;
const RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::kRecordingMovieEventBeginScrubbing;
const RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::kRecordingMovieEventEndScrubbing;
const RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::RecordingMovieEventType_MIN;
const RecordingMovieEventArchive_RecordingMovieEventType RecordingMovieEventArchive::RecordingMovieEventType_MAX;
const int RecordingMovieEventArchive::RecordingMovieEventType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RecordingMovieEventArchive::kMovieInfoReferenceFieldNumber;
const int RecordingMovieEventArchive::kMovieEventTypeFieldNumber;
const int RecordingMovieEventArchive::kMovieEventValueFieldNumber;
#endif  // !_MSC_VER

RecordingMovieEventArchive::RecordingMovieEventArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordingMovieEventArchive::InitAsDefaultInstance() {
  movie_info_reference_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

RecordingMovieEventArchive::RecordingMovieEventArchive(const RecordingMovieEventArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordingMovieEventArchive::SharedCtor() {
  _cached_size_ = 0;
  movie_info_reference_ = NULL;
  movie_event_type_ = 1;
  movie_event_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordingMovieEventArchive::~RecordingMovieEventArchive() {
  SharedDtor();
}

void RecordingMovieEventArchive::SharedDtor() {
  if (this != default_instance_) {
    delete movie_info_reference_;
  }
}

void RecordingMovieEventArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordingMovieEventArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordingMovieEventArchive_descriptor_;
}

const RecordingMovieEventArchive& RecordingMovieEventArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

RecordingMovieEventArchive* RecordingMovieEventArchive::default_instance_ = NULL;

RecordingMovieEventArchive* RecordingMovieEventArchive::New() const {
  return new RecordingMovieEventArchive;
}

void RecordingMovieEventArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_movie_info_reference()) {
      if (movie_info_reference_ != NULL) movie_info_reference_->::TSP::Reference::Clear();
    }
    movie_event_type_ = 1;
    movie_event_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordingMovieEventArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference movie_info_reference = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_movie_info_reference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_movie_event_type;
        break;
      }

      // optional .KN.RecordingMovieEventArchive.RecordingMovieEventType movie_event_type = 2 [default = kRecordingMovieEventSeek];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_movie_event_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::KN::RecordingMovieEventArchive_RecordingMovieEventType_IsValid(value)) {
            set_movie_event_type(static_cast< ::KN::RecordingMovieEventArchive_RecordingMovieEventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_movie_event_value;
        break;
      }

      // optional double movie_event_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_movie_event_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &movie_event_value_)));
          set_has_movie_event_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordingMovieEventArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference movie_info_reference = 1;
  if (has_movie_info_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->movie_info_reference(), output);
  }

  // optional .KN.RecordingMovieEventArchive.RecordingMovieEventType movie_event_type = 2 [default = kRecordingMovieEventSeek];
  if (has_movie_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->movie_event_type(), output);
  }

  // optional double movie_event_value = 3;
  if (has_movie_event_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->movie_event_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordingMovieEventArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference movie_info_reference = 1;
  if (has_movie_info_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->movie_info_reference(), target);
  }

  // optional .KN.RecordingMovieEventArchive.RecordingMovieEventType movie_event_type = 2 [default = kRecordingMovieEventSeek];
  if (has_movie_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->movie_event_type(), target);
  }

  // optional double movie_event_value = 3;
  if (has_movie_event_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->movie_event_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordingMovieEventArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference movie_info_reference = 1;
    if (has_movie_info_reference()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->movie_info_reference());
    }

    // optional .KN.RecordingMovieEventArchive.RecordingMovieEventType movie_event_type = 2 [default = kRecordingMovieEventSeek];
    if (has_movie_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->movie_event_type());
    }

    // optional double movie_event_value = 3;
    if (has_movie_event_value()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordingMovieEventArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordingMovieEventArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordingMovieEventArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordingMovieEventArchive::MergeFrom(const RecordingMovieEventArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_movie_info_reference()) {
      mutable_movie_info_reference()->::TSP::Reference::MergeFrom(from.movie_info_reference());
    }
    if (from.has_movie_event_type()) {
      set_movie_event_type(from.movie_event_type());
    }
    if (from.has_movie_event_value()) {
      set_movie_event_value(from.movie_event_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordingMovieEventArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordingMovieEventArchive::CopyFrom(const RecordingMovieEventArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingMovieEventArchive::IsInitialized() const {

  if (has_movie_info_reference()) {
    if (!this->movie_info_reference().IsInitialized()) return false;
  }
  return true;
}

void RecordingMovieEventArchive::Swap(RecordingMovieEventArchive* other) {
  if (other != this) {
    std::swap(movie_info_reference_, other->movie_info_reference_);
    std::swap(movie_event_type_, other->movie_event_type_);
    std::swap(movie_event_value_, other->movie_event_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordingMovieEventArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordingMovieEventArchive_descriptor_;
  metadata.reflection = RecordingMovieEventArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordingMovieTrackArchive::kMovieSegmentsFieldNumber;
#endif  // !_MSC_VER

RecordingMovieTrackArchive::RecordingMovieTrackArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordingMovieTrackArchive::InitAsDefaultInstance() {
}

RecordingMovieTrackArchive::RecordingMovieTrackArchive(const RecordingMovieTrackArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordingMovieTrackArchive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordingMovieTrackArchive::~RecordingMovieTrackArchive() {
  SharedDtor();
}

void RecordingMovieTrackArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecordingMovieTrackArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordingMovieTrackArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordingMovieTrackArchive_descriptor_;
}

const RecordingMovieTrackArchive& RecordingMovieTrackArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

RecordingMovieTrackArchive* RecordingMovieTrackArchive::default_instance_ = NULL;

RecordingMovieTrackArchive* RecordingMovieTrackArchive::New() const {
  return new RecordingMovieTrackArchive;
}

void RecordingMovieTrackArchive::Clear() {
  movie_segments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordingMovieTrackArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .KN.MovieSegmentArchive movie_segments = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_movie_segments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_movie_segments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_movie_segments;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordingMovieTrackArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .KN.MovieSegmentArchive movie_segments = 1;
  for (int i = 0; i < this->movie_segments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->movie_segments(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordingMovieTrackArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .KN.MovieSegmentArchive movie_segments = 1;
  for (int i = 0; i < this->movie_segments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->movie_segments(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordingMovieTrackArchive::ByteSize() const {
  int total_size = 0;

  // repeated .KN.MovieSegmentArchive movie_segments = 1;
  total_size += 1 * this->movie_segments_size();
  for (int i = 0; i < this->movie_segments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->movie_segments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordingMovieTrackArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordingMovieTrackArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordingMovieTrackArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordingMovieTrackArchive::MergeFrom(const RecordingMovieTrackArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  movie_segments_.MergeFrom(from.movie_segments_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordingMovieTrackArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordingMovieTrackArchive::CopyFrom(const RecordingMovieTrackArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingMovieTrackArchive::IsInitialized() const {

  for (int i = 0; i < movie_segments_size(); i++) {
    if (!this->movie_segments(i).IsInitialized()) return false;
  }
  return true;
}

void RecordingMovieTrackArchive::Swap(RecordingMovieTrackArchive* other) {
  if (other != this) {
    movie_segments_.Swap(&other->movie_segments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordingMovieTrackArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordingMovieTrackArchive_descriptor_;
  metadata.reflection = RecordingMovieTrackArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MovieSegmentArchive::kMovieDataFieldNumber;
const int MovieSegmentArchive::kStartTimeFieldNumber;
const int MovieSegmentArchive::kDatabaseMovieDataFieldNumber;
#endif  // !_MSC_VER

MovieSegmentArchive::MovieSegmentArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MovieSegmentArchive::InitAsDefaultInstance() {
  movie_data_ = const_cast< ::TSP::DataReference*>(&::TSP::DataReference::default_instance());
  database_movie_data_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

MovieSegmentArchive::MovieSegmentArchive(const MovieSegmentArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MovieSegmentArchive::SharedCtor() {
  _cached_size_ = 0;
  movie_data_ = NULL;
  start_time_ = -1;
  database_movie_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MovieSegmentArchive::~MovieSegmentArchive() {
  SharedDtor();
}

void MovieSegmentArchive::SharedDtor() {
  if (this != default_instance_) {
    delete movie_data_;
    delete database_movie_data_;
  }
}

void MovieSegmentArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MovieSegmentArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MovieSegmentArchive_descriptor_;
}

const MovieSegmentArchive& MovieSegmentArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

MovieSegmentArchive* MovieSegmentArchive::default_instance_ = NULL;

MovieSegmentArchive* MovieSegmentArchive::New() const {
  return new MovieSegmentArchive;
}

void MovieSegmentArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_movie_data()) {
      if (movie_data_ != NULL) movie_data_->::TSP::DataReference::Clear();
    }
    start_time_ = -1;
    if (has_database_movie_data()) {
      if (database_movie_data_ != NULL) database_movie_data_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MovieSegmentArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference database_movie_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_database_movie_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_start_time;
        break;
      }

      // optional double start_time = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_movie_data;
        break;
      }

      // optional .TSP.DataReference movie_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_movie_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_movie_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MovieSegmentArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference database_movie_data = 1;
  if (has_database_movie_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->database_movie_data(), output);
  }

  // optional double start_time = 2 [default = -1];
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->start_time(), output);
  }

  // optional .TSP.DataReference movie_data = 3;
  if (has_movie_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->movie_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MovieSegmentArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference database_movie_data = 1;
  if (has_database_movie_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->database_movie_data(), target);
  }

  // optional double start_time = 2 [default = -1];
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->start_time(), target);
  }

  // optional .TSP.DataReference movie_data = 3;
  if (has_movie_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->movie_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MovieSegmentArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.DataReference movie_data = 3;
    if (has_movie_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->movie_data());
    }

    // optional double start_time = 2 [default = -1];
    if (has_start_time()) {
      total_size += 1 + 8;
    }

    // optional .TSP.Reference database_movie_data = 1;
    if (has_database_movie_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->database_movie_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MovieSegmentArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MovieSegmentArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MovieSegmentArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MovieSegmentArchive::MergeFrom(const MovieSegmentArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_movie_data()) {
      mutable_movie_data()->::TSP::DataReference::MergeFrom(from.movie_data());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_database_movie_data()) {
      mutable_database_movie_data()->::TSP::Reference::MergeFrom(from.database_movie_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MovieSegmentArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovieSegmentArchive::CopyFrom(const MovieSegmentArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovieSegmentArchive::IsInitialized() const {

  if (has_movie_data()) {
    if (!this->movie_data().IsInitialized()) return false;
  }
  if (has_database_movie_data()) {
    if (!this->database_movie_data().IsInitialized()) return false;
  }
  return true;
}

void MovieSegmentArchive::Swap(MovieSegmentArchive* other) {
  if (other != this) {
    std::swap(movie_data_, other->movie_data_);
    std::swap(start_time_, other->start_time_);
    std::swap(database_movie_data_, other->database_movie_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MovieSegmentArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MovieSegmentArchive_descriptor_;
  metadata.reflection = MovieSegmentArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Soundtrack_SoundtrackMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Soundtrack_SoundtrackMode_descriptor_;
}
bool Soundtrack_SoundtrackMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Soundtrack_SoundtrackMode Soundtrack::kKNSoundtrackModePlayOnce;
const Soundtrack_SoundtrackMode Soundtrack::kKNSoundtrackModeLoop;
const Soundtrack_SoundtrackMode Soundtrack::kKNSoundtrackModeDoNotPlay;
const Soundtrack_SoundtrackMode Soundtrack::SoundtrackMode_MIN;
const Soundtrack_SoundtrackMode Soundtrack::SoundtrackMode_MAX;
const int Soundtrack::SoundtrackMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Soundtrack::kVolumeFieldNumber;
const int Soundtrack::kModeFieldNumber;
const int Soundtrack::kMovieMediaFieldNumber;
#endif  // !_MSC_VER

Soundtrack::Soundtrack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Soundtrack::InitAsDefaultInstance() {
}

Soundtrack::Soundtrack(const Soundtrack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Soundtrack::SharedCtor() {
  _cached_size_ = 0;
  volume_ = 0;
  mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Soundtrack::~Soundtrack() {
  SharedDtor();
}

void Soundtrack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Soundtrack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Soundtrack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Soundtrack_descriptor_;
}

const Soundtrack& Soundtrack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

Soundtrack* Soundtrack::default_instance_ = NULL;

Soundtrack* Soundtrack::New() const {
  return new Soundtrack;
}

void Soundtrack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    volume_ = 0;
    mode_ = 0;
  }
  movie_media_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Soundtrack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double volume = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }

      // optional .KN.Soundtrack.SoundtrackMode mode = 2 [default = kKNSoundtrackModePlayOnce];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::KN::Soundtrack_SoundtrackMode_IsValid(value)) {
            set_mode(static_cast< ::KN::Soundtrack_SoundtrackMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_movie_media;
        break;
      }

      // repeated .TSP.DataReference movie_media = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_movie_media:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_movie_media()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_movie_media;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Soundtrack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double volume = 1;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->volume(), output);
  }

  // optional .KN.Soundtrack.SoundtrackMode mode = 2 [default = kKNSoundtrackModePlayOnce];
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode(), output);
  }

  // repeated .TSP.DataReference movie_media = 3;
  for (int i = 0; i < this->movie_media_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->movie_media(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Soundtrack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double volume = 1;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->volume(), target);
  }

  // optional .KN.Soundtrack.SoundtrackMode mode = 2 [default = kKNSoundtrackModePlayOnce];
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode(), target);
  }

  // repeated .TSP.DataReference movie_media = 3;
  for (int i = 0; i < this->movie_media_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->movie_media(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Soundtrack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double volume = 1;
    if (has_volume()) {
      total_size += 1 + 8;
    }

    // optional .KN.Soundtrack.SoundtrackMode mode = 2 [default = kKNSoundtrackModePlayOnce];
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

  }
  // repeated .TSP.DataReference movie_media = 3;
  total_size += 1 * this->movie_media_size();
  for (int i = 0; i < this->movie_media_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->movie_media(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Soundtrack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Soundtrack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Soundtrack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Soundtrack::MergeFrom(const Soundtrack& from) {
  GOOGLE_CHECK_NE(&from, this);
  movie_media_.MergeFrom(from.movie_media_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Soundtrack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Soundtrack::CopyFrom(const Soundtrack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Soundtrack::IsInitialized() const {

  for (int i = 0; i < movie_media_size(); i++) {
    if (!this->movie_media(i).IsInitialized()) return false;
  }
  return true;
}

void Soundtrack::Swap(Soundtrack* other) {
  if (other != this) {
    std::swap(volume_, other->volume_);
    std::swap(mode_, other->mode_);
    movie_media_.Swap(&other->movie_media_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Soundtrack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Soundtrack_descriptor_;
  metadata.reflection = Soundtrack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SlideNumberAttachmentArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

SlideNumberAttachmentArchive::SlideNumberAttachmentArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlideNumberAttachmentArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSWP::TextualAttachmentArchive*>(&::TSWP::TextualAttachmentArchive::default_instance());
}

SlideNumberAttachmentArchive::SlideNumberAttachmentArchive(const SlideNumberAttachmentArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlideNumberAttachmentArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlideNumberAttachmentArchive::~SlideNumberAttachmentArchive() {
  SharedDtor();
}

void SlideNumberAttachmentArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void SlideNumberAttachmentArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlideNumberAttachmentArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlideNumberAttachmentArchive_descriptor_;
}

const SlideNumberAttachmentArchive& SlideNumberAttachmentArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

SlideNumberAttachmentArchive* SlideNumberAttachmentArchive::default_instance_ = NULL;

SlideNumberAttachmentArchive* SlideNumberAttachmentArchive::New() const {
  return new SlideNumberAttachmentArchive;
}

void SlideNumberAttachmentArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSWP::TextualAttachmentArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlideNumberAttachmentArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSWP.TextualAttachmentArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlideNumberAttachmentArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSWP.TextualAttachmentArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlideNumberAttachmentArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSWP.TextualAttachmentArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlideNumberAttachmentArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSWP.TextualAttachmentArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlideNumberAttachmentArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlideNumberAttachmentArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlideNumberAttachmentArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlideNumberAttachmentArchive::MergeFrom(const SlideNumberAttachmentArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSWP::TextualAttachmentArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlideNumberAttachmentArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlideNumberAttachmentArchive::CopyFrom(const SlideNumberAttachmentArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideNumberAttachmentArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SlideNumberAttachmentArchive::Swap(SlideNumberAttachmentArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlideNumberAttachmentArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlideNumberAttachmentArchive_descriptor_;
  metadata.reflection = SlideNumberAttachmentArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SlideCollectionSelectionArchive_OutlineSelection::kSlideNodeFieldNumber;
const int SlideCollectionSelectionArchive_OutlineSelection::kSelectedParagraphIndexesFieldNumber;
#endif  // !_MSC_VER

SlideCollectionSelectionArchive_OutlineSelection::SlideCollectionSelectionArchive_OutlineSelection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlideCollectionSelectionArchive_OutlineSelection::InitAsDefaultInstance() {
  slide_node_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  selected_paragraph_indexes_ = const_cast< ::TSP::IndexSet*>(&::TSP::IndexSet::default_instance());
}

SlideCollectionSelectionArchive_OutlineSelection::SlideCollectionSelectionArchive_OutlineSelection(const SlideCollectionSelectionArchive_OutlineSelection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlideCollectionSelectionArchive_OutlineSelection::SharedCtor() {
  _cached_size_ = 0;
  slide_node_ = NULL;
  selected_paragraph_indexes_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlideCollectionSelectionArchive_OutlineSelection::~SlideCollectionSelectionArchive_OutlineSelection() {
  SharedDtor();
}

void SlideCollectionSelectionArchive_OutlineSelection::SharedDtor() {
  if (this != default_instance_) {
    delete slide_node_;
    delete selected_paragraph_indexes_;
  }
}

void SlideCollectionSelectionArchive_OutlineSelection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlideCollectionSelectionArchive_OutlineSelection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlideCollectionSelectionArchive_OutlineSelection_descriptor_;
}

const SlideCollectionSelectionArchive_OutlineSelection& SlideCollectionSelectionArchive_OutlineSelection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

SlideCollectionSelectionArchive_OutlineSelection* SlideCollectionSelectionArchive_OutlineSelection::default_instance_ = NULL;

SlideCollectionSelectionArchive_OutlineSelection* SlideCollectionSelectionArchive_OutlineSelection::New() const {
  return new SlideCollectionSelectionArchive_OutlineSelection;
}

void SlideCollectionSelectionArchive_OutlineSelection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_slide_node()) {
      if (slide_node_ != NULL) slide_node_->::TSP::Reference::Clear();
    }
    if (has_selected_paragraph_indexes()) {
      if (selected_paragraph_indexes_ != NULL) selected_paragraph_indexes_->::TSP::IndexSet::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlideCollectionSelectionArchive_OutlineSelection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Reference slide_node = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slide_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_selected_paragraph_indexes;
        break;
      }

      // required .TSP.IndexSet selected_paragraph_indexes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selected_paragraph_indexes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selected_paragraph_indexes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlideCollectionSelectionArchive_OutlineSelection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Reference slide_node = 1;
  if (has_slide_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->slide_node(), output);
  }

  // required .TSP.IndexSet selected_paragraph_indexes = 2;
  if (has_selected_paragraph_indexes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->selected_paragraph_indexes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlideCollectionSelectionArchive_OutlineSelection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Reference slide_node = 1;
  if (has_slide_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->slide_node(), target);
  }

  // required .TSP.IndexSet selected_paragraph_indexes = 2;
  if (has_selected_paragraph_indexes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->selected_paragraph_indexes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlideCollectionSelectionArchive_OutlineSelection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.Reference slide_node = 1;
    if (has_slide_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slide_node());
    }

    // required .TSP.IndexSet selected_paragraph_indexes = 2;
    if (has_selected_paragraph_indexes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selected_paragraph_indexes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlideCollectionSelectionArchive_OutlineSelection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlideCollectionSelectionArchive_OutlineSelection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlideCollectionSelectionArchive_OutlineSelection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlideCollectionSelectionArchive_OutlineSelection::MergeFrom(const SlideCollectionSelectionArchive_OutlineSelection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slide_node()) {
      mutable_slide_node()->::TSP::Reference::MergeFrom(from.slide_node());
    }
    if (from.has_selected_paragraph_indexes()) {
      mutable_selected_paragraph_indexes()->::TSP::IndexSet::MergeFrom(from.selected_paragraph_indexes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlideCollectionSelectionArchive_OutlineSelection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlideCollectionSelectionArchive_OutlineSelection::CopyFrom(const SlideCollectionSelectionArchive_OutlineSelection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideCollectionSelectionArchive_OutlineSelection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_slide_node()) {
    if (!this->slide_node().IsInitialized()) return false;
  }
  if (has_selected_paragraph_indexes()) {
    if (!this->selected_paragraph_indexes().IsInitialized()) return false;
  }
  return true;
}

void SlideCollectionSelectionArchive_OutlineSelection::Swap(SlideCollectionSelectionArchive_OutlineSelection* other) {
  if (other != this) {
    std::swap(slide_node_, other->slide_node_);
    std::swap(selected_paragraph_indexes_, other->selected_paragraph_indexes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlideCollectionSelectionArchive_OutlineSelection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlideCollectionSelectionArchive_OutlineSelection_descriptor_;
  metadata.reflection = SlideCollectionSelectionArchive_OutlineSelection_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SlideCollectionSelectionArchive::kSlideNodesFieldNumber;
const int SlideCollectionSelectionArchive::kSlideNodeToEditFieldNumber;
const int SlideCollectionSelectionArchive::kSelectedParagraphIndexesForSlideNodesFieldNumber;
const int SlideCollectionSelectionArchive::kRangeInSelectedParagraphFieldNumber;
#endif  // !_MSC_VER

SlideCollectionSelectionArchive::SlideCollectionSelectionArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlideCollectionSelectionArchive::InitAsDefaultInstance() {
  slide_node_to_edit_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  range_in_selected_paragraph_ = const_cast< ::TSP::Range*>(&::TSP::Range::default_instance());
}

SlideCollectionSelectionArchive::SlideCollectionSelectionArchive(const SlideCollectionSelectionArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlideCollectionSelectionArchive::SharedCtor() {
  _cached_size_ = 0;
  slide_node_to_edit_ = NULL;
  range_in_selected_paragraph_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlideCollectionSelectionArchive::~SlideCollectionSelectionArchive() {
  SharedDtor();
}

void SlideCollectionSelectionArchive::SharedDtor() {
  if (this != default_instance_) {
    delete slide_node_to_edit_;
    delete range_in_selected_paragraph_;
  }
}

void SlideCollectionSelectionArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlideCollectionSelectionArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlideCollectionSelectionArchive_descriptor_;
}

const SlideCollectionSelectionArchive& SlideCollectionSelectionArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KNArchives_2eproto();
  return *default_instance_;
}

SlideCollectionSelectionArchive* SlideCollectionSelectionArchive::default_instance_ = NULL;

SlideCollectionSelectionArchive* SlideCollectionSelectionArchive::New() const {
  return new SlideCollectionSelectionArchive;
}

void SlideCollectionSelectionArchive::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_slide_node_to_edit()) {
      if (slide_node_to_edit_ != NULL) slide_node_to_edit_->::TSP::Reference::Clear();
    }
    if (has_range_in_selected_paragraph()) {
      if (range_in_selected_paragraph_ != NULL) range_in_selected_paragraph_->::TSP::Range::Clear();
    }
  }
  slide_nodes_.Clear();
  selected_paragraph_indexes_for_slide_nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlideCollectionSelectionArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSP.Reference slide_nodes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slide_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slide_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_slide_nodes;
        if (input->ExpectTag(18)) goto parse_slide_node_to_edit;
        break;
      }

      // optional .TSP.Reference slide_node_to_edit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slide_node_to_edit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slide_node_to_edit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_selected_paragraph_indexes_for_slide_nodes;
        break;
      }

      // repeated .KN.SlideCollectionSelectionArchive.OutlineSelection selected_paragraph_indexes_for_slide_nodes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selected_paragraph_indexes_for_slide_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selected_paragraph_indexes_for_slide_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_selected_paragraph_indexes_for_slide_nodes;
        if (input->ExpectTag(34)) goto parse_range_in_selected_paragraph;
        break;
      }

      // optional .TSP.Range range_in_selected_paragraph = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_range_in_selected_paragraph:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range_in_selected_paragraph()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlideCollectionSelectionArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSP.Reference slide_nodes = 1;
  for (int i = 0; i < this->slide_nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->slide_nodes(i), output);
  }

  // optional .TSP.Reference slide_node_to_edit = 2;
  if (has_slide_node_to_edit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slide_node_to_edit(), output);
  }

  // repeated .KN.SlideCollectionSelectionArchive.OutlineSelection selected_paragraph_indexes_for_slide_nodes = 3;
  for (int i = 0; i < this->selected_paragraph_indexes_for_slide_nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->selected_paragraph_indexes_for_slide_nodes(i), output);
  }

  // optional .TSP.Range range_in_selected_paragraph = 4;
  if (has_range_in_selected_paragraph()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->range_in_selected_paragraph(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlideCollectionSelectionArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSP.Reference slide_nodes = 1;
  for (int i = 0; i < this->slide_nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->slide_nodes(i), target);
  }

  // optional .TSP.Reference slide_node_to_edit = 2;
  if (has_slide_node_to_edit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->slide_node_to_edit(), target);
  }

  // repeated .KN.SlideCollectionSelectionArchive.OutlineSelection selected_paragraph_indexes_for_slide_nodes = 3;
  for (int i = 0; i < this->selected_paragraph_indexes_for_slide_nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->selected_paragraph_indexes_for_slide_nodes(i), target);
  }

  // optional .TSP.Range range_in_selected_paragraph = 4;
  if (has_range_in_selected_paragraph()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->range_in_selected_paragraph(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlideCollectionSelectionArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .TSP.Reference slide_node_to_edit = 2;
    if (has_slide_node_to_edit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slide_node_to_edit());
    }

    // optional .TSP.Range range_in_selected_paragraph = 4;
    if (has_range_in_selected_paragraph()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->range_in_selected_paragraph());
    }

  }
  // repeated .TSP.Reference slide_nodes = 1;
  total_size += 1 * this->slide_nodes_size();
  for (int i = 0; i < this->slide_nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slide_nodes(i));
  }

  // repeated .KN.SlideCollectionSelectionArchive.OutlineSelection selected_paragraph_indexes_for_slide_nodes = 3;
  total_size += 1 * this->selected_paragraph_indexes_for_slide_nodes_size();
  for (int i = 0; i < this->selected_paragraph_indexes_for_slide_nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->selected_paragraph_indexes_for_slide_nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlideCollectionSelectionArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlideCollectionSelectionArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlideCollectionSelectionArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlideCollectionSelectionArchive::MergeFrom(const SlideCollectionSelectionArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  slide_nodes_.MergeFrom(from.slide_nodes_);
  selected_paragraph_indexes_for_slide_nodes_.MergeFrom(from.selected_paragraph_indexes_for_slide_nodes_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_slide_node_to_edit()) {
      mutable_slide_node_to_edit()->::TSP::Reference::MergeFrom(from.slide_node_to_edit());
    }
    if (from.has_range_in_selected_paragraph()) {
      mutable_range_in_selected_paragraph()->::TSP::Range::MergeFrom(from.range_in_selected_paragraph());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlideCollectionSelectionArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlideCollectionSelectionArchive::CopyFrom(const SlideCollectionSelectionArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlideCollectionSelectionArchive::IsInitialized() const {

  for (int i = 0; i < slide_nodes_size(); i++) {
    if (!this->slide_nodes(i).IsInitialized()) return false;
  }
  if (has_slide_node_to_edit()) {
    if (!this->slide_node_to_edit().IsInitialized()) return false;
  }
  for (int i = 0; i < selected_paragraph_indexes_for_slide_nodes_size(); i++) {
    if (!this->selected_paragraph_indexes_for_slide_nodes(i).IsInitialized()) return false;
  }
  if (has_range_in_selected_paragraph()) {
    if (!this->range_in_selected_paragraph().IsInitialized()) return false;
  }
  return true;
}

void SlideCollectionSelectionArchive::Swap(SlideCollectionSelectionArchive* other) {
  if (other != this) {
    slide_nodes_.Swap(&other->slide_nodes_);
    std::swap(slide_node_to_edit_, other->slide_node_to_edit_);
    selected_paragraph_indexes_for_slide_nodes_.Swap(&other->selected_paragraph_indexes_for_slide_nodes_);
    std::swap(range_in_selected_paragraph_, other->range_in_selected_paragraph_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlideCollectionSelectionArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlideCollectionSelectionArchive_descriptor_;
  metadata.reflection = SlideCollectionSelectionArchive_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KN

// @@protoc_insertion_point(global_scope)
