// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCHArchives.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TSCHArchives.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TSCH {

namespace {

const ::google::protobuf::Descriptor* ChartDrawableArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartDrawableArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartPasteboardAdditionsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartPasteboardAdditionsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartGridArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartGridArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartGridArchive_GridRow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartGridArchive_GridRow_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartGridArchive_GridRow_GridValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartGridArchive_GridRow_GridValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartGridArchive_ChartGridRowColumnIdMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartGridArchive_ChartGridRowColumnIdMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartGridArchive_ChartGridRowColumnIdMap_Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartGridArchive_ChartGridRowColumnIdMap_Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartMediatorArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartMediatorArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartStylePreset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartStylePreset_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartPresetsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartPresetsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropertyValueStorageContainerArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropertyValueStorageContainerArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* StylePasteboardDataArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StylePasteboardDataArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartSelectionPathTypeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartSelectionPathTypeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartAxisIDArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartAxisIDArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartSelectionPathArgumentArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartSelectionPathArgumentArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartSelectionPathArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartSelectionPathArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartSelectionArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartSelectionArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartUIState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartUIState_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartFormatStructExtensions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartFormatStructExtensions_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TSCHArchives_2eproto() {
  protobuf_AddDesc_TSCHArchives_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TSCHArchives.proto");
  GOOGLE_CHECK(file != NULL);
  ChartDrawableArchive_descriptor_ = file->message_type(0);
  static const int ChartDrawableArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartDrawableArchive, super_),
  };
  ChartDrawableArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartDrawableArchive_descriptor_,
      ChartDrawableArchive::default_instance_,
      ChartDrawableArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartDrawableArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartDrawableArchive, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartDrawableArchive, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartDrawableArchive));
  ChartArchive_descriptor_ = file->message_type(1);
  static const int ChartArchive_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartArchive, chart_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartArchive, scatter_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartArchive, legend_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartArchive, preset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartArchive, series_direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartArchive, contains_default_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartArchive, grid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartArchive, mediator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartArchive, chart_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartArchive, chart_non_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartArchive, legend_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartArchive, legend_non_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartArchive, value_axis_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartArchive, value_axis_nonstyles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartArchive, category_axis_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartArchive, category_axis_nonstyles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartArchive, series_theme_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartArchive, series_private_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartArchive, series_non_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartArchive, paragraph_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartArchive, multidataset_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartArchive, needs_calc_engine_deferred_import_action_),
  };
  ChartArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartArchive_descriptor_,
      ChartArchive::default_instance_,
      ChartArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartArchive, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartArchive, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartArchive));
  ChartPasteboardAdditionsArchive_descriptor_ = file->message_type(2);
  static const int ChartPasteboardAdditionsArchive_offsets_[1] = {
  };
  ChartPasteboardAdditionsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartPasteboardAdditionsArchive_descriptor_,
      ChartPasteboardAdditionsArchive::default_instance_,
      ChartPasteboardAdditionsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartPasteboardAdditionsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartPasteboardAdditionsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartPasteboardAdditionsArchive));
  ChartGridArchive_descriptor_ = file->message_type(3);
  static const int ChartGridArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive, row_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive, column_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive, grid_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive, idmap_),
  };
  ChartGridArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartGridArchive_descriptor_,
      ChartGridArchive::default_instance_,
      ChartGridArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartGridArchive));
  ChartGridArchive_GridRow_descriptor_ = ChartGridArchive_descriptor_->nested_type(0);
  static const int ChartGridArchive_GridRow_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive_GridRow, value_),
  };
  ChartGridArchive_GridRow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartGridArchive_GridRow_descriptor_,
      ChartGridArchive_GridRow::default_instance_,
      ChartGridArchive_GridRow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive_GridRow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive_GridRow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartGridArchive_GridRow));
  ChartGridArchive_GridRow_GridValue_descriptor_ = ChartGridArchive_GridRow_descriptor_->nested_type(0);
  static const int ChartGridArchive_GridRow_GridValue_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive_GridRow_GridValue, numeric_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive_GridRow_GridValue, date_value_1_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive_GridRow_GridValue, duration_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive_GridRow_GridValue, date_value_),
  };
  ChartGridArchive_GridRow_GridValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartGridArchive_GridRow_GridValue_descriptor_,
      ChartGridArchive_GridRow_GridValue::default_instance_,
      ChartGridArchive_GridRow_GridValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive_GridRow_GridValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive_GridRow_GridValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartGridArchive_GridRow_GridValue));
  ChartGridArchive_ChartGridRowColumnIdMap_descriptor_ = ChartGridArchive_descriptor_->nested_type(1);
  static const int ChartGridArchive_ChartGridRowColumnIdMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive_ChartGridRowColumnIdMap, row_id_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive_ChartGridRowColumnIdMap, column_id_map_),
  };
  ChartGridArchive_ChartGridRowColumnIdMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartGridArchive_ChartGridRowColumnIdMap_descriptor_,
      ChartGridArchive_ChartGridRowColumnIdMap::default_instance_,
      ChartGridArchive_ChartGridRowColumnIdMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive_ChartGridRowColumnIdMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive_ChartGridRowColumnIdMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartGridArchive_ChartGridRowColumnIdMap));
  ChartGridArchive_ChartGridRowColumnIdMap_Entry_descriptor_ = ChartGridArchive_ChartGridRowColumnIdMap_descriptor_->nested_type(0);
  static const int ChartGridArchive_ChartGridRowColumnIdMap_Entry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive_ChartGridRowColumnIdMap_Entry, uniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive_ChartGridRowColumnIdMap_Entry, index_),
  };
  ChartGridArchive_ChartGridRowColumnIdMap_Entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartGridArchive_ChartGridRowColumnIdMap_Entry_descriptor_,
      ChartGridArchive_ChartGridRowColumnIdMap_Entry::default_instance_,
      ChartGridArchive_ChartGridRowColumnIdMap_Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive_ChartGridRowColumnIdMap_Entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartGridArchive_ChartGridRowColumnIdMap_Entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartGridArchive_ChartGridRowColumnIdMap_Entry));
  ChartMediatorArchive_descriptor_ = file->message_type(4);
  static const int ChartMediatorArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartMediatorArchive, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartMediatorArchive, local_series_indexes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartMediatorArchive, remote_series_indexes_),
  };
  ChartMediatorArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartMediatorArchive_descriptor_,
      ChartMediatorArchive::default_instance_,
      ChartMediatorArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartMediatorArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartMediatorArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartMediatorArchive));
  ChartStylePreset_descriptor_ = file->message_type(5);
  static const int ChartStylePreset_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStylePreset, chart_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStylePreset, legend_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStylePreset, value_axis_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStylePreset, category_axis_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStylePreset, series_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStylePreset, paragraph_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStylePreset, uuid_),
  };
  ChartStylePreset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartStylePreset_descriptor_,
      ChartStylePreset::default_instance_,
      ChartStylePreset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStylePreset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartStylePreset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartStylePreset));
  ChartPresetsArchive_descriptor_ = file->message_type(6);
  static const int ChartPresetsArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartPresetsArchive, chart_presets_),
  };
  ChartPresetsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartPresetsArchive_descriptor_,
      ChartPresetsArchive::default_instance_,
      ChartPresetsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartPresetsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartPresetsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartPresetsArchive));
  PropertyValueStorageContainerArchive_descriptor_ = file->message_type(7);
  static const int PropertyValueStorageContainerArchive_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValueStorageContainerArchive, chart_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValueStorageContainerArchive, chart_nonstyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValueStorageContainerArchive, legend_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValueStorageContainerArchive, legend_nonstyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValueStorageContainerArchive, value_axis_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValueStorageContainerArchive, value_axis_nonstyles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValueStorageContainerArchive, category_axis_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValueStorageContainerArchive, category_axis_nonstyles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValueStorageContainerArchive, series_theme_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValueStorageContainerArchive, series_private_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValueStorageContainerArchive, series_nonstyles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValueStorageContainerArchive, paragraph_styles_),
  };
  PropertyValueStorageContainerArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropertyValueStorageContainerArchive_descriptor_,
      PropertyValueStorageContainerArchive::default_instance_,
      PropertyValueStorageContainerArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValueStorageContainerArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValueStorageContainerArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropertyValueStorageContainerArchive));
  StylePasteboardDataArchive_descriptor_ = file->message_type(8);
  static const int StylePasteboardDataArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StylePasteboardDataArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StylePasteboardDataArchive, style_network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StylePasteboardDataArchive, copied_from_entire_chart_),
  };
  StylePasteboardDataArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StylePasteboardDataArchive_descriptor_,
      StylePasteboardDataArchive::default_instance_,
      StylePasteboardDataArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StylePasteboardDataArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StylePasteboardDataArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StylePasteboardDataArchive));
  ChartSelectionPathTypeArchive_descriptor_ = file->message_type(9);
  static const int ChartSelectionPathTypeArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSelectionPathTypeArchive, path_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSelectionPathTypeArchive, path_name_),
  };
  ChartSelectionPathTypeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartSelectionPathTypeArchive_descriptor_,
      ChartSelectionPathTypeArchive::default_instance_,
      ChartSelectionPathTypeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSelectionPathTypeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSelectionPathTypeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartSelectionPathTypeArchive));
  ChartAxisIDArchive_descriptor_ = file->message_type(10);
  static const int ChartAxisIDArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisIDArchive, axis_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisIDArchive, ordinal_),
  };
  ChartAxisIDArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartAxisIDArchive_descriptor_,
      ChartAxisIDArchive::default_instance_,
      ChartAxisIDArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisIDArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartAxisIDArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartAxisIDArchive));
  ChartSelectionPathArgumentArchive_descriptor_ = file->message_type(11);
  static const int ChartSelectionPathArgumentArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSelectionPathArgumentArchive, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSelectionPathArgumentArchive, axis_id_),
  };
  ChartSelectionPathArgumentArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartSelectionPathArgumentArchive_descriptor_,
      ChartSelectionPathArgumentArchive::default_instance_,
      ChartSelectionPathArgumentArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSelectionPathArgumentArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSelectionPathArgumentArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartSelectionPathArgumentArchive));
  ChartSelectionPathArchive_descriptor_ = file->message_type(12);
  static const int ChartSelectionPathArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSelectionPathArchive, path_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSelectionPathArchive, sub_selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSelectionPathArchive, arguments_),
  };
  ChartSelectionPathArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartSelectionPathArchive_descriptor_,
      ChartSelectionPathArchive::default_instance_,
      ChartSelectionPathArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSelectionPathArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSelectionPathArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartSelectionPathArchive));
  ChartSelectionArchive_descriptor_ = file->message_type(13);
  static const int ChartSelectionArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSelectionArchive, chart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSelectionArchive, paths_),
  };
  ChartSelectionArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartSelectionArchive_descriptor_,
      ChartSelectionArchive::default_instance_,
      ChartSelectionArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSelectionArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartSelectionArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartSelectionArchive));
  ChartUIState_descriptor_ = file->message_type(14);
  static const int ChartUIState_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartUIState, chart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartUIState, cde_last_row_selected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartUIState, cde_last_col_selected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartUIState, cde_last_row_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartUIState, cde_last_col_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartUIState, cde_use_full_keyboard_),
  };
  ChartUIState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartUIState_descriptor_,
      ChartUIState::default_instance_,
      ChartUIState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartUIState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartUIState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartUIState));
  ChartFormatStructExtensions_descriptor_ = file->message_type(15);
  static const int ChartFormatStructExtensions_offsets_[1] = {
  };
  ChartFormatStructExtensions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartFormatStructExtensions_descriptor_,
      ChartFormatStructExtensions::default_instance_,
      ChartFormatStructExtensions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartFormatStructExtensions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartFormatStructExtensions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartFormatStructExtensions));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TSCHArchives_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartDrawableArchive_descriptor_, &ChartDrawableArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartArchive_descriptor_, &ChartArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartPasteboardAdditionsArchive_descriptor_, &ChartPasteboardAdditionsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartGridArchive_descriptor_, &ChartGridArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartGridArchive_GridRow_descriptor_, &ChartGridArchive_GridRow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartGridArchive_GridRow_GridValue_descriptor_, &ChartGridArchive_GridRow_GridValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartGridArchive_ChartGridRowColumnIdMap_descriptor_, &ChartGridArchive_ChartGridRowColumnIdMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartGridArchive_ChartGridRowColumnIdMap_Entry_descriptor_, &ChartGridArchive_ChartGridRowColumnIdMap_Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartMediatorArchive_descriptor_, &ChartMediatorArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartStylePreset_descriptor_, &ChartStylePreset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartPresetsArchive_descriptor_, &ChartPresetsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropertyValueStorageContainerArchive_descriptor_, &PropertyValueStorageContainerArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StylePasteboardDataArchive_descriptor_, &StylePasteboardDataArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartSelectionPathTypeArchive_descriptor_, &ChartSelectionPathTypeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartAxisIDArchive_descriptor_, &ChartAxisIDArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartSelectionPathArgumentArchive_descriptor_, &ChartSelectionPathArgumentArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartSelectionPathArchive_descriptor_, &ChartSelectionPathArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartSelectionArchive_descriptor_, &ChartSelectionArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartUIState_descriptor_, &ChartUIState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartFormatStructExtensions_descriptor_, &ChartFormatStructExtensions::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TSCHArchives_2eproto() {
  delete ChartDrawableArchive::default_instance_;
  delete ChartDrawableArchive_reflection_;
  delete ChartArchive::default_instance_;
  delete ChartArchive_reflection_;
  delete ChartPasteboardAdditionsArchive::default_instance_;
  delete ChartPasteboardAdditionsArchive_reflection_;
  delete ChartGridArchive::default_instance_;
  delete ChartGridArchive_reflection_;
  delete ChartGridArchive_GridRow::default_instance_;
  delete ChartGridArchive_GridRow_reflection_;
  delete ChartGridArchive_GridRow_GridValue::default_instance_;
  delete ChartGridArchive_GridRow_GridValue_reflection_;
  delete ChartGridArchive_ChartGridRowColumnIdMap::default_instance_;
  delete ChartGridArchive_ChartGridRowColumnIdMap_reflection_;
  delete ChartGridArchive_ChartGridRowColumnIdMap_Entry::default_instance_;
  delete ChartGridArchive_ChartGridRowColumnIdMap_Entry_reflection_;
  delete ChartMediatorArchive::default_instance_;
  delete ChartMediatorArchive_reflection_;
  delete ChartStylePreset::default_instance_;
  delete ChartStylePreset_reflection_;
  delete ChartPresetsArchive::default_instance_;
  delete ChartPresetsArchive_reflection_;
  delete PropertyValueStorageContainerArchive::default_instance_;
  delete PropertyValueStorageContainerArchive_reflection_;
  delete StylePasteboardDataArchive::default_instance_;
  delete StylePasteboardDataArchive_reflection_;
  delete ChartSelectionPathTypeArchive::default_instance_;
  delete ChartSelectionPathTypeArchive_reflection_;
  delete ChartAxisIDArchive::default_instance_;
  delete ChartAxisIDArchive_reflection_;
  delete ChartSelectionPathArgumentArchive::default_instance_;
  delete ChartSelectionPathArgumentArchive_reflection_;
  delete ChartSelectionPathArchive::default_instance_;
  delete ChartSelectionPathArchive_reflection_;
  delete ChartSelectionArchive::default_instance_;
  delete ChartSelectionArchive_reflection_;
  delete ChartUIState::default_instance_;
  delete ChartUIState_reflection_;
  delete ChartFormatStructExtensions::default_instance_;
  delete ChartFormatStructExtensions_reflection_;
}

void protobuf_AddDesc_TSCHArchives_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::TSP::protobuf_AddDesc_TSPMessages_2eproto();
  ::TSK::protobuf_AddDesc_TSKArchives_2eproto();
  ::TSD::protobuf_AddDesc_TSDArchives_2eproto();
  ::TSS::protobuf_AddDesc_TSSArchives_2eproto();
  ::TSCH::protobuf_AddDesc_TSCHArchives_2eCommon_2eproto();
  ::TSCH::Generated::protobuf_AddDesc_TSCHArchives_2eGEN_2eproto();
  ::TSCH::protobuf_AddDesc_TSCH3DArchives_2eproto();
  ::TSCH::PreUFF::protobuf_AddDesc_TSCHPreUFFArchives_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022TSCHArchives.proto\022\004TSCH\032\021TSPMessages."
    "proto\032\021TSKArchives.proto\032\021TSDArchives.pr"
    "oto\032\021TSSArchives.proto\032\031TSCHArchives.Com"
    "mon.proto\032\026TSCHArchives.GEN.proto\032\024TSCH3"
    "DArchives.proto\032\030TSCHPreUFFArchives.prot"
    "o\"F\n\024ChartDrawableArchive\022#\n\005super\030\001 \001(\013"
    "2\024.TSD.DrawableArchive*\t\010\220N\020\200\200\200\200\002\"\207\010\n\014Ch"
    "artArchive\022#\n\nchart_type\030\001 \001(\0162\017.TSCH.Ch"
    "artType\022+\n\016scatter_format\030\002 \001(\0162\023.TSCH.S"
    "catterFormat\022\'\n\014legend_frame\030\003 \001(\0132\021.TSC"
    "H.RectArchive\022\036\n\006preset\030\004 \001(\0132\016.TSP.Refe"
    "rence\022/\n\020series_direction\030\005 \001(\0162\025.TSCH.S"
    "eriesDirection\022\035\n\025contains_default_data\030"
    "\006 \001(\010\022$\n\004grid\030\007 \001(\0132\026.TSCH.ChartGridArch"
    "ive\022 \n\010mediator\030\010 \001(\0132\016.TSP.Reference\022#\n"
    "\013chart_style\030\t \001(\0132\016.TSP.Reference\022\'\n\017ch"
    "art_non_style\030\n \001(\0132\016.TSP.Reference\022$\n\014l"
    "egend_style\030\013 \001(\0132\016.TSP.Reference\022(\n\020leg"
    "end_non_style\030\014 \001(\0132\016.TSP.Reference\022)\n\021v"
    "alue_axis_styles\030\r \003(\0132\016.TSP.Reference\022,"
    "\n\024value_axis_nonstyles\030\016 \003(\0132\016.TSP.Refer"
    "ence\022,\n\024category_axis_styles\030\017 \003(\0132\016.TSP"
    ".Reference\022/\n\027category_axis_nonstyles\030\020 "
    "\003(\0132\016.TSP.Reference\022+\n\023series_theme_styl"
    "es\030\021 \003(\0132\016.TSP.Reference\022@\n\025series_priva"
    "te_styles\030\022 \001(\0132!.TSCH.SparseReferenceAr"
    "rayArchive\022<\n\021series_non_styles\030\023 \001(\0132!."
    "TSCH.SparseReferenceArrayArchive\022(\n\020para"
    "graph_styles\030\024 \003(\0132\016.TSP.Reference\022\032\n\022mu"
    "ltidataset_index\030\025 \001(\r\0220\n(needs_calc_eng"
    "ine_deferred_import_action\030\026 \001(\010*\t\010\220N\020\200\200"
    "\200\200\0022>\n\005unity\022\032.TSCH.ChartDrawableArchive"
    "\030\220N \001(\0132\022.TSCH.ChartArchive\"\344\001\n\037ChartPas"
    "teboardAdditionsArchive28\n\033preset_index_"
    "for_pasteboard\022\022.TSCH.ChartArchive\030\220N \001("
    "\r27\n\032preset_uuid_for_pasteboard\022\022.TSCH.C"
    "hartArchive\030\221N \001(\0142N\n!custom_format_list"
    "_for_pasteboard\022\022.TSCH.ChartArchive\030\223N \001"
    "(\0132\016.TSP.Reference\"\264\004\n\020ChartGridArchive\022"
    "\020\n\010row_name\030\001 \003(\t\022\023\n\013column_name\030\002 \003(\t\0220"
    "\n\010grid_row\030\003 \003(\0132\036.TSCH.ChartGridArchive"
    ".GridRow\022=\n\005idMap\030\004 \001(\0132..TSCH.ChartGrid"
    "Archive.ChartGridRowColumnIdMap\032\252\001\n\007Grid"
    "Row\0227\n\005value\030\001 \003(\0132(.TSCH.ChartGridArchi"
    "ve.GridRow.GridValue\032f\n\tGridValue\022\025\n\rnum"
    "eric_value\030\001 \001(\001\022\026\n\016date_value_1_0\030\002 \001(\001"
    "\022\026\n\016duration_value\030\003 \001(\001\022\022\n\ndate_value\030\004"
    " \001(\001\032\332\001\n\027ChartGridRowColumnIdMap\022H\n\nrow_"
    "id_map\030\001 \003(\01324.TSCH.ChartGridArchive.Cha"
    "rtGridRowColumnIdMap.Entry\022K\n\rcolumn_id_"
    "map\030\002 \003(\01324.TSCH.ChartGridArchive.ChartG"
    "ridRowColumnIdMap.Entry\032(\n\005Entry\022\020\n\010uniq"
    "ueId\030\001 \002(\t\022\r\n\005index\030\002 \002(\r\"q\n\024ChartMediat"
    "orArchive\022\034\n\004info\030\001 \001(\0132\016.TSP.Reference\022"
    "\034\n\024local_series_indexes\030\002 \003(\r\022\035\n\025remote_"
    "series_indexes\030\003 \003(\r\"\225\002\n\020ChartStylePrese"
    "t\022#\n\013chart_style\030\001 \001(\0132\016.TSP.Reference\022$"
    "\n\014legend_style\030\002 \001(\0132\016.TSP.Reference\022)\n\021"
    "value_axis_styles\030\003 \003(\0132\016.TSP.Reference\022"
    ",\n\024category_axis_styles\030\004 \003(\0132\016.TSP.Refe"
    "rence\022%\n\rseries_styles\030\005 \003(\0132\016.TSP.Refer"
    "ence\022(\n\020paragraph_styles\030\006 \003(\0132\016.TSP.Ref"
    "erence\022\014\n\004uuid\030\007 \001(\014\"}\n\023ChartPresetsArch"
    "ive\022%\n\rchart_presets\030\001 \003(\0132\016.TSP.Referen"
    "ce2\?\n\textension\022\021.TSS.ThemeArchive\030x \002(\013"
    "2\031.TSCH.ChartPresetsArchive\"\302\005\n$Property"
    "ValueStorageContainerArchive\022#\n\013chart_st"
    "yle\030\001 \001(\0132\016.TSP.Reference\022&\n\016chart_nonst"
    "yle\030\002 \001(\0132\016.TSP.Reference\022$\n\014legend_styl"
    "e\030\003 \001(\0132\016.TSP.Reference\022\'\n\017legend_nonsty"
    "le\030\004 \001(\0132\016.TSP.Reference\022<\n\021value_axis_s"
    "tyles\030\005 \001(\0132!.TSCH.SparseReferenceArrayA"
    "rchive\022\?\n\024value_axis_nonstyles\030\006 \001(\0132!.T"
    "SCH.SparseReferenceArrayArchive\022\?\n\024categ"
    "ory_axis_styles\030\007 \001(\0132!.TSCH.SparseRefer"
    "enceArrayArchive\022B\n\027category_axis_nonsty"
    "les\030\010 \001(\0132!.TSCH.SparseReferenceArrayArc"
    "hive\022>\n\023series_theme_styles\030\t \001(\0132!.TSCH"
    ".SparseReferenceArrayArchive\022@\n\025series_p"
    "rivate_styles\030\n \001(\0132!.TSCH.SparseReferen"
    "ceArrayArchive\022;\n\020series_nonstyles\030\013 \001(\013"
    "2!.TSCH.SparseReferenceArrayArchive\022;\n\020p"
    "aragraph_styles\030\014 \001(\0132!.TSCH.SparseRefer"
    "enceArrayArchive\"\243\001\n\032StylePasteboardData"
    "Archive\022 \n\005super\030\001 \001(\0132\021.TSS.StyleArchiv"
    "e\022A\n\rstyle_network\030\002 \001(\0132*.TSCH.Property"
    "ValueStorageContainerArchive\022 \n\030copied_f"
    "rom_entire_chart\030\003 \001(\010\"E\n\035ChartSelection"
    "PathTypeArchive\022\021\n\tpath_type\030\001 \001(\t\022\021\n\tpa"
    "th_name\030\002 \001(\t\"H\n\022ChartAxisIDArchive\022!\n\ta"
    "xis_type\030\001 \001(\0162\016.TSCH.AxisType\022\017\n\007ordina"
    "l\030\002 \001(\r\"^\n!ChartSelectionPathArgumentArc"
    "hive\022\016\n\006number\030\001 \001(\r\022)\n\007axis_id\030\002 \001(\0132\030."
    "TSCH.ChartAxisIDArchive\"\307\001\n\031ChartSelecti"
    "onPathArchive\0226\n\tpath_type\030\001 \001(\0132#.TSCH."
    "ChartSelectionPathTypeArchive\0226\n\rsub_sel"
    "ection\030\002 \001(\0132\037.TSCH.ChartSelectionPathAr"
    "chive\022:\n\targuments\030\003 \003(\0132\'.TSCH.ChartSel"
    "ectionPathArgumentArchive\"f\n\025ChartSelect"
    "ionArchive\022\035\n\005chart\030\001 \001(\0132\016.TSP.Referenc"
    "e\022.\n\005paths\030\002 \003(\0132\037.TSCH.ChartSelectionPa"
    "thArchive\"\302\001\n\014ChartUIState\022\035\n\005chart\030\001 \001("
    "\0132\016.TSP.Reference\022\035\n\025cde_last_row_select"
    "ed\030\002 \001(\005\022\035\n\025cde_last_col_selected\030\003 \001(\005\022"
    "\032\n\022cde_last_row_count\030\004 \001(\005\022\032\n\022cde_last_"
    "col_count\030\005 \001(\005\022\035\n\025cde_use_full_keyboard"
    "\030\006 \001(\010\"s\n\033ChartFormatStructExtensions2)\n"
    "\006prefix\022\030.TSK.FormatStructArchive\030\220N \001(\t"
    "2)\n\006suffix\022\030.TSK.FormatStructArchive\030\221N "
    "\001(\t:<\n\037scene3d_settings_constant_depth\022\022"
    ".TSCH.ChartArchive\030\222N \001(\010:@\n#last_applie"
    "d_fill_set_lookup_string\022\022.TSCH.ChartArc"
    "hive\030\224N \001(\t:O\n$series_supports_custom_nu"
    "mber_format\022 .TSCH.ChartSeriesNonStyleAr"
    "chive\030\221N \001(\010:M\n\"series_supports_custom_d"
    "ate_format\022 .TSCH.ChartSeriesNonStyleArc"
    "hive\030\222N \001(\010:K\n\"axis_supports_custom_numb"
    "er_format\022\036.TSCH.ChartAxisNonStyleArchiv"
    "e\030\221N \001(\010:I\n axis_supports_custom_date_fo"
    "rmat\022\036.TSCH.ChartAxisNonStyleArchive\030\222N "
    "\001(\010", 4803);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TSCHArchives.proto", &protobuf_RegisterTypes);
  ChartDrawableArchive::default_instance_ = new ChartDrawableArchive();
  ChartArchive::default_instance_ = new ChartArchive();
  ChartPasteboardAdditionsArchive::default_instance_ = new ChartPasteboardAdditionsArchive();
  ChartGridArchive::default_instance_ = new ChartGridArchive();
  ChartGridArchive_GridRow::default_instance_ = new ChartGridArchive_GridRow();
  ChartGridArchive_GridRow_GridValue::default_instance_ = new ChartGridArchive_GridRow_GridValue();
  ChartGridArchive_ChartGridRowColumnIdMap::default_instance_ = new ChartGridArchive_ChartGridRowColumnIdMap();
  ChartGridArchive_ChartGridRowColumnIdMap_Entry::default_instance_ = new ChartGridArchive_ChartGridRowColumnIdMap_Entry();
  ChartMediatorArchive::default_instance_ = new ChartMediatorArchive();
  ChartStylePreset::default_instance_ = new ChartStylePreset();
  ChartPresetsArchive::default_instance_ = new ChartPresetsArchive();
  PropertyValueStorageContainerArchive::default_instance_ = new PropertyValueStorageContainerArchive();
  StylePasteboardDataArchive::default_instance_ = new StylePasteboardDataArchive();
  ChartSelectionPathTypeArchive::default_instance_ = new ChartSelectionPathTypeArchive();
  ChartAxisIDArchive::default_instance_ = new ChartAxisIDArchive();
  ChartSelectionPathArgumentArchive::default_instance_ = new ChartSelectionPathArgumentArchive();
  ChartSelectionPathArchive::default_instance_ = new ChartSelectionPathArchive();
  ChartSelectionArchive::default_instance_ = new ChartSelectionArchive();
  ChartUIState::default_instance_ = new ChartUIState();
  ChartFormatStructExtensions::default_instance_ = new ChartFormatStructExtensions();
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::TSCH::ChartArchive::default_instance(),
    10002, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::TSCH::ChartArchive::default_instance(),
    10004, 9, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::TSCH::ChartSeriesNonStyleArchive::default_instance(),
    10001, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::TSCH::ChartSeriesNonStyleArchive::default_instance(),
    10002, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::TSCH::ChartAxisNonStyleArchive::default_instance(),
    10001, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::TSCH::ChartAxisNonStyleArchive::default_instance(),
    10002, 8, false, false);
  ChartDrawableArchive::default_instance_->InitAsDefaultInstance();
  ChartArchive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::TSCH::ChartDrawableArchive::default_instance(),
    10000, 11, false, false,
    &::TSCH::ChartArchive::default_instance());
  ChartPasteboardAdditionsArchive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::TSCH::ChartArchive::default_instance(),
    10000, 13, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::TSCH::ChartArchive::default_instance(),
    10001, 12, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::TSCH::ChartArchive::default_instance(),
    10003, 11, false, false,
    &::TSP::Reference::default_instance());
  ChartGridArchive::default_instance_->InitAsDefaultInstance();
  ChartGridArchive_GridRow::default_instance_->InitAsDefaultInstance();
  ChartGridArchive_GridRow_GridValue::default_instance_->InitAsDefaultInstance();
  ChartGridArchive_ChartGridRowColumnIdMap::default_instance_->InitAsDefaultInstance();
  ChartGridArchive_ChartGridRowColumnIdMap_Entry::default_instance_->InitAsDefaultInstance();
  ChartMediatorArchive::default_instance_->InitAsDefaultInstance();
  ChartStylePreset::default_instance_->InitAsDefaultInstance();
  ChartPresetsArchive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::TSS::ThemeArchive::default_instance(),
    120, 11, false, false,
    &::TSCH::ChartPresetsArchive::default_instance());
  PropertyValueStorageContainerArchive::default_instance_->InitAsDefaultInstance();
  StylePasteboardDataArchive::default_instance_->InitAsDefaultInstance();
  ChartSelectionPathTypeArchive::default_instance_->InitAsDefaultInstance();
  ChartAxisIDArchive::default_instance_->InitAsDefaultInstance();
  ChartSelectionPathArgumentArchive::default_instance_->InitAsDefaultInstance();
  ChartSelectionPathArchive::default_instance_->InitAsDefaultInstance();
  ChartSelectionArchive::default_instance_->InitAsDefaultInstance();
  ChartUIState::default_instance_->InitAsDefaultInstance();
  ChartFormatStructExtensions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::TSK::FormatStructArchive::default_instance(),
    10000, 9, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::TSK::FormatStructArchive::default_instance(),
    10001, 9, false, false);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TSCHArchives_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TSCHArchives_2eproto {
  StaticDescriptorInitializer_TSCHArchives_2eproto() {
    protobuf_AddDesc_TSCHArchives_2eproto();
  }
} static_descriptor_initializer_TSCHArchives_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ChartDrawableArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

ChartDrawableArchive::ChartDrawableArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartDrawableArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSD::DrawableArchive*>(&::TSD::DrawableArchive::default_instance());
}

ChartDrawableArchive::ChartDrawableArchive(const ChartDrawableArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartDrawableArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartDrawableArchive::~ChartDrawableArchive() {
  SharedDtor();
}

void ChartDrawableArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void ChartDrawableArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartDrawableArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartDrawableArchive_descriptor_;
}

const ChartDrawableArchive& ChartDrawableArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eproto();
  return *default_instance_;
}

ChartDrawableArchive* ChartDrawableArchive::default_instance_ = NULL;

ChartDrawableArchive* ChartDrawableArchive::New() const {
  return new ChartDrawableArchive;
}

void ChartDrawableArchive::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSD::DrawableArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartDrawableArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSD.DrawableArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((80000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartDrawableArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSD.DrawableArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // Extension range [10000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      10000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartDrawableArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSD.DrawableArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // Extension range [10000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      10000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartDrawableArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSD.DrawableArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartDrawableArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartDrawableArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartDrawableArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartDrawableArchive::MergeFrom(const ChartDrawableArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSD::DrawableArchive::MergeFrom(from.super());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartDrawableArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartDrawableArchive::CopyFrom(const ChartDrawableArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartDrawableArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void ChartDrawableArchive::Swap(ChartDrawableArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata ChartDrawableArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartDrawableArchive_descriptor_;
  metadata.reflection = ChartDrawableArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartArchive::kChartTypeFieldNumber;
const int ChartArchive::kScatterFormatFieldNumber;
const int ChartArchive::kLegendFrameFieldNumber;
const int ChartArchive::kPresetFieldNumber;
const int ChartArchive::kSeriesDirectionFieldNumber;
const int ChartArchive::kContainsDefaultDataFieldNumber;
const int ChartArchive::kGridFieldNumber;
const int ChartArchive::kMediatorFieldNumber;
const int ChartArchive::kChartStyleFieldNumber;
const int ChartArchive::kChartNonStyleFieldNumber;
const int ChartArchive::kLegendStyleFieldNumber;
const int ChartArchive::kLegendNonStyleFieldNumber;
const int ChartArchive::kValueAxisStylesFieldNumber;
const int ChartArchive::kValueAxisNonstylesFieldNumber;
const int ChartArchive::kCategoryAxisStylesFieldNumber;
const int ChartArchive::kCategoryAxisNonstylesFieldNumber;
const int ChartArchive::kSeriesThemeStylesFieldNumber;
const int ChartArchive::kSeriesPrivateStylesFieldNumber;
const int ChartArchive::kSeriesNonStylesFieldNumber;
const int ChartArchive::kParagraphStylesFieldNumber;
const int ChartArchive::kMultidatasetIndexFieldNumber;
const int ChartArchive::kNeedsCalcEngineDeferredImportActionFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ChartArchive::kUnityFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartDrawableArchive,
    ::google::protobuf::internal::MessageTypeTraits< ::TSCH::ChartArchive >, 11, false >
  ChartArchive::unity(kUnityFieldNumber, ::TSCH::ChartArchive::default_instance());
ChartArchive::ChartArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartArchive::InitAsDefaultInstance() {
  legend_frame_ = const_cast< ::TSCH::RectArchive*>(&::TSCH::RectArchive::default_instance());
  preset_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  grid_ = const_cast< ::TSCH::ChartGridArchive*>(&::TSCH::ChartGridArchive::default_instance());
  mediator_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  chart_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  chart_non_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  legend_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  legend_non_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  series_private_styles_ = const_cast< ::TSCH::SparseReferenceArrayArchive*>(&::TSCH::SparseReferenceArrayArchive::default_instance());
  series_non_styles_ = const_cast< ::TSCH::SparseReferenceArrayArchive*>(&::TSCH::SparseReferenceArrayArchive::default_instance());
}

ChartArchive::ChartArchive(const ChartArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartArchive::SharedCtor() {
  _cached_size_ = 0;
  chart_type_ = 0;
  scatter_format_ = 0;
  legend_frame_ = NULL;
  preset_ = NULL;
  series_direction_ = 0;
  contains_default_data_ = false;
  grid_ = NULL;
  mediator_ = NULL;
  chart_style_ = NULL;
  chart_non_style_ = NULL;
  legend_style_ = NULL;
  legend_non_style_ = NULL;
  series_private_styles_ = NULL;
  series_non_styles_ = NULL;
  multidataset_index_ = 0u;
  needs_calc_engine_deferred_import_action_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartArchive::~ChartArchive() {
  SharedDtor();
}

void ChartArchive::SharedDtor() {
  if (this != default_instance_) {
    delete legend_frame_;
    delete preset_;
    delete grid_;
    delete mediator_;
    delete chart_style_;
    delete chart_non_style_;
    delete legend_style_;
    delete legend_non_style_;
    delete series_private_styles_;
    delete series_non_styles_;
  }
}

void ChartArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartArchive_descriptor_;
}

const ChartArchive& ChartArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eproto();
  return *default_instance_;
}

ChartArchive* ChartArchive::default_instance_ = NULL;

ChartArchive* ChartArchive::New() const {
  return new ChartArchive;
}

void ChartArchive::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chart_type_ = 0;
    scatter_format_ = 0;
    if (has_legend_frame()) {
      if (legend_frame_ != NULL) legend_frame_->::TSCH::RectArchive::Clear();
    }
    if (has_preset()) {
      if (preset_ != NULL) preset_->::TSP::Reference::Clear();
    }
    series_direction_ = 0;
    contains_default_data_ = false;
    if (has_grid()) {
      if (grid_ != NULL) grid_->::TSCH::ChartGridArchive::Clear();
    }
    if (has_mediator()) {
      if (mediator_ != NULL) mediator_->::TSP::Reference::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_chart_style()) {
      if (chart_style_ != NULL) chart_style_->::TSP::Reference::Clear();
    }
    if (has_chart_non_style()) {
      if (chart_non_style_ != NULL) chart_non_style_->::TSP::Reference::Clear();
    }
    if (has_legend_style()) {
      if (legend_style_ != NULL) legend_style_->::TSP::Reference::Clear();
    }
    if (has_legend_non_style()) {
      if (legend_non_style_ != NULL) legend_non_style_->::TSP::Reference::Clear();
    }
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (has_series_private_styles()) {
      if (series_private_styles_ != NULL) series_private_styles_->::TSCH::SparseReferenceArrayArchive::Clear();
    }
    if (has_series_non_styles()) {
      if (series_non_styles_ != NULL) series_non_styles_->::TSCH::SparseReferenceArrayArchive::Clear();
    }
    multidataset_index_ = 0u;
    needs_calc_engine_deferred_import_action_ = false;
  }
  value_axis_styles_.Clear();
  value_axis_nonstyles_.Clear();
  category_axis_styles_.Clear();
  category_axis_nonstyles_.Clear();
  series_theme_styles_.Clear();
  paragraph_styles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSCH.ChartType chart_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSCH::ChartType_IsValid(value)) {
            set_chart_type(static_cast< ::TSCH::ChartType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scatter_format;
        break;
      }

      // optional .TSCH.ScatterFormat scatter_format = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scatter_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSCH::ScatterFormat_IsValid(value)) {
            set_scatter_format(static_cast< ::TSCH::ScatterFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_legend_frame;
        break;
      }

      // optional .TSCH.RectArchive legend_frame = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_legend_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_legend_frame()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_preset;
        break;
      }

      // optional .TSP.Reference preset = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_preset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_series_direction;
        break;
      }

      // optional .TSCH.SeriesDirection series_direction = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_series_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSCH::SeriesDirection_IsValid(value)) {
            set_series_direction(static_cast< ::TSCH::SeriesDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_contains_default_data;
        break;
      }

      // optional bool contains_default_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contains_default_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &contains_default_data_)));
          set_has_contains_default_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_grid;
        break;
      }

      // optional .TSCH.ChartGridArchive grid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_mediator;
        break;
      }

      // optional .TSP.Reference mediator = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mediator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mediator()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_chart_style;
        break;
      }

      // optional .TSP.Reference chart_style = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chart_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chart_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_chart_non_style;
        break;
      }

      // optional .TSP.Reference chart_non_style = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chart_non_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chart_non_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_legend_style;
        break;
      }

      // optional .TSP.Reference legend_style = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_legend_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_legend_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_legend_non_style;
        break;
      }

      // optional .TSP.Reference legend_non_style = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_legend_non_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_legend_non_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_value_axis_styles;
        break;
      }

      // repeated .TSP.Reference value_axis_styles = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_axis_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value_axis_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_value_axis_styles;
        if (input->ExpectTag(114)) goto parse_value_axis_nonstyles;
        break;
      }

      // repeated .TSP.Reference value_axis_nonstyles = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_axis_nonstyles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value_axis_nonstyles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_value_axis_nonstyles;
        if (input->ExpectTag(122)) goto parse_category_axis_styles;
        break;
      }

      // repeated .TSP.Reference category_axis_styles = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_category_axis_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_category_axis_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_category_axis_styles;
        if (input->ExpectTag(130)) goto parse_category_axis_nonstyles;
        break;
      }

      // repeated .TSP.Reference category_axis_nonstyles = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_category_axis_nonstyles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_category_axis_nonstyles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_category_axis_nonstyles;
        if (input->ExpectTag(138)) goto parse_series_theme_styles;
        break;
      }

      // repeated .TSP.Reference series_theme_styles = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_series_theme_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_series_theme_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_series_theme_styles;
        if (input->ExpectTag(146)) goto parse_series_private_styles;
        break;
      }

      // optional .TSCH.SparseReferenceArrayArchive series_private_styles = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_series_private_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_series_private_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_series_non_styles;
        break;
      }

      // optional .TSCH.SparseReferenceArrayArchive series_non_styles = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_series_non_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_series_non_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_paragraph_styles;
        break;
      }

      // repeated .TSP.Reference paragraph_styles = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paragraph_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_paragraph_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_paragraph_styles;
        if (input->ExpectTag(168)) goto parse_multidataset_index;
        break;
      }

      // optional uint32 multidataset_index = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multidataset_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multidataset_index_)));
          set_has_multidataset_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_needs_calc_engine_deferred_import_action;
        break;
      }

      // optional bool needs_calc_engine_deferred_import_action = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needs_calc_engine_deferred_import_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_calc_engine_deferred_import_action_)));
          set_has_needs_calc_engine_deferred_import_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((80000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSCH.ChartType chart_type = 1;
  if (has_chart_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->chart_type(), output);
  }

  // optional .TSCH.ScatterFormat scatter_format = 2;
  if (has_scatter_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->scatter_format(), output);
  }

  // optional .TSCH.RectArchive legend_frame = 3;
  if (has_legend_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->legend_frame(), output);
  }

  // optional .TSP.Reference preset = 4;
  if (has_preset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->preset(), output);
  }

  // optional .TSCH.SeriesDirection series_direction = 5;
  if (has_series_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->series_direction(), output);
  }

  // optional bool contains_default_data = 6;
  if (has_contains_default_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->contains_default_data(), output);
  }

  // optional .TSCH.ChartGridArchive grid = 7;
  if (has_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->grid(), output);
  }

  // optional .TSP.Reference mediator = 8;
  if (has_mediator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->mediator(), output);
  }

  // optional .TSP.Reference chart_style = 9;
  if (has_chart_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->chart_style(), output);
  }

  // optional .TSP.Reference chart_non_style = 10;
  if (has_chart_non_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->chart_non_style(), output);
  }

  // optional .TSP.Reference legend_style = 11;
  if (has_legend_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->legend_style(), output);
  }

  // optional .TSP.Reference legend_non_style = 12;
  if (has_legend_non_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->legend_non_style(), output);
  }

  // repeated .TSP.Reference value_axis_styles = 13;
  for (int i = 0; i < this->value_axis_styles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->value_axis_styles(i), output);
  }

  // repeated .TSP.Reference value_axis_nonstyles = 14;
  for (int i = 0; i < this->value_axis_nonstyles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->value_axis_nonstyles(i), output);
  }

  // repeated .TSP.Reference category_axis_styles = 15;
  for (int i = 0; i < this->category_axis_styles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->category_axis_styles(i), output);
  }

  // repeated .TSP.Reference category_axis_nonstyles = 16;
  for (int i = 0; i < this->category_axis_nonstyles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->category_axis_nonstyles(i), output);
  }

  // repeated .TSP.Reference series_theme_styles = 17;
  for (int i = 0; i < this->series_theme_styles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->series_theme_styles(i), output);
  }

  // optional .TSCH.SparseReferenceArrayArchive series_private_styles = 18;
  if (has_series_private_styles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->series_private_styles(), output);
  }

  // optional .TSCH.SparseReferenceArrayArchive series_non_styles = 19;
  if (has_series_non_styles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->series_non_styles(), output);
  }

  // repeated .TSP.Reference paragraph_styles = 20;
  for (int i = 0; i < this->paragraph_styles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->paragraph_styles(i), output);
  }

  // optional uint32 multidataset_index = 21;
  if (has_multidataset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->multidataset_index(), output);
  }

  // optional bool needs_calc_engine_deferred_import_action = 22;
  if (has_needs_calc_engine_deferred_import_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->needs_calc_engine_deferred_import_action(), output);
  }

  // Extension range [10000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      10000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSCH.ChartType chart_type = 1;
  if (has_chart_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->chart_type(), target);
  }

  // optional .TSCH.ScatterFormat scatter_format = 2;
  if (has_scatter_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->scatter_format(), target);
  }

  // optional .TSCH.RectArchive legend_frame = 3;
  if (has_legend_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->legend_frame(), target);
  }

  // optional .TSP.Reference preset = 4;
  if (has_preset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->preset(), target);
  }

  // optional .TSCH.SeriesDirection series_direction = 5;
  if (has_series_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->series_direction(), target);
  }

  // optional bool contains_default_data = 6;
  if (has_contains_default_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->contains_default_data(), target);
  }

  // optional .TSCH.ChartGridArchive grid = 7;
  if (has_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->grid(), target);
  }

  // optional .TSP.Reference mediator = 8;
  if (has_mediator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->mediator(), target);
  }

  // optional .TSP.Reference chart_style = 9;
  if (has_chart_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->chart_style(), target);
  }

  // optional .TSP.Reference chart_non_style = 10;
  if (has_chart_non_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->chart_non_style(), target);
  }

  // optional .TSP.Reference legend_style = 11;
  if (has_legend_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->legend_style(), target);
  }

  // optional .TSP.Reference legend_non_style = 12;
  if (has_legend_non_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->legend_non_style(), target);
  }

  // repeated .TSP.Reference value_axis_styles = 13;
  for (int i = 0; i < this->value_axis_styles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->value_axis_styles(i), target);
  }

  // repeated .TSP.Reference value_axis_nonstyles = 14;
  for (int i = 0; i < this->value_axis_nonstyles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->value_axis_nonstyles(i), target);
  }

  // repeated .TSP.Reference category_axis_styles = 15;
  for (int i = 0; i < this->category_axis_styles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->category_axis_styles(i), target);
  }

  // repeated .TSP.Reference category_axis_nonstyles = 16;
  for (int i = 0; i < this->category_axis_nonstyles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->category_axis_nonstyles(i), target);
  }

  // repeated .TSP.Reference series_theme_styles = 17;
  for (int i = 0; i < this->series_theme_styles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->series_theme_styles(i), target);
  }

  // optional .TSCH.SparseReferenceArrayArchive series_private_styles = 18;
  if (has_series_private_styles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->series_private_styles(), target);
  }

  // optional .TSCH.SparseReferenceArrayArchive series_non_styles = 19;
  if (has_series_non_styles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->series_non_styles(), target);
  }

  // repeated .TSP.Reference paragraph_styles = 20;
  for (int i = 0; i < this->paragraph_styles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->paragraph_styles(i), target);
  }

  // optional uint32 multidataset_index = 21;
  if (has_multidataset_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->multidataset_index(), target);
  }

  // optional bool needs_calc_engine_deferred_import_action = 22;
  if (has_needs_calc_engine_deferred_import_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->needs_calc_engine_deferred_import_action(), target);
  }

  // Extension range [10000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      10000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSCH.ChartType chart_type = 1;
    if (has_chart_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->chart_type());
    }

    // optional .TSCH.ScatterFormat scatter_format = 2;
    if (has_scatter_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scatter_format());
    }

    // optional .TSCH.RectArchive legend_frame = 3;
    if (has_legend_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->legend_frame());
    }

    // optional .TSP.Reference preset = 4;
    if (has_preset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->preset());
    }

    // optional .TSCH.SeriesDirection series_direction = 5;
    if (has_series_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->series_direction());
    }

    // optional bool contains_default_data = 6;
    if (has_contains_default_data()) {
      total_size += 1 + 1;
    }

    // optional .TSCH.ChartGridArchive grid = 7;
    if (has_grid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grid());
    }

    // optional .TSP.Reference mediator = 8;
    if (has_mediator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mediator());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TSP.Reference chart_style = 9;
    if (has_chart_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chart_style());
    }

    // optional .TSP.Reference chart_non_style = 10;
    if (has_chart_non_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chart_non_style());
    }

    // optional .TSP.Reference legend_style = 11;
    if (has_legend_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->legend_style());
    }

    // optional .TSP.Reference legend_non_style = 12;
    if (has_legend_non_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->legend_non_style());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional .TSCH.SparseReferenceArrayArchive series_private_styles = 18;
    if (has_series_private_styles()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->series_private_styles());
    }

    // optional .TSCH.SparseReferenceArrayArchive series_non_styles = 19;
    if (has_series_non_styles()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->series_non_styles());
    }

    // optional uint32 multidataset_index = 21;
    if (has_multidataset_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->multidataset_index());
    }

    // optional bool needs_calc_engine_deferred_import_action = 22;
    if (has_needs_calc_engine_deferred_import_action()) {
      total_size += 2 + 1;
    }

  }
  // repeated .TSP.Reference value_axis_styles = 13;
  total_size += 1 * this->value_axis_styles_size();
  for (int i = 0; i < this->value_axis_styles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value_axis_styles(i));
  }

  // repeated .TSP.Reference value_axis_nonstyles = 14;
  total_size += 1 * this->value_axis_nonstyles_size();
  for (int i = 0; i < this->value_axis_nonstyles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value_axis_nonstyles(i));
  }

  // repeated .TSP.Reference category_axis_styles = 15;
  total_size += 1 * this->category_axis_styles_size();
  for (int i = 0; i < this->category_axis_styles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->category_axis_styles(i));
  }

  // repeated .TSP.Reference category_axis_nonstyles = 16;
  total_size += 2 * this->category_axis_nonstyles_size();
  for (int i = 0; i < this->category_axis_nonstyles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->category_axis_nonstyles(i));
  }

  // repeated .TSP.Reference series_theme_styles = 17;
  total_size += 2 * this->series_theme_styles_size();
  for (int i = 0; i < this->series_theme_styles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->series_theme_styles(i));
  }

  // repeated .TSP.Reference paragraph_styles = 20;
  total_size += 2 * this->paragraph_styles_size();
  for (int i = 0; i < this->paragraph_styles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->paragraph_styles(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartArchive::MergeFrom(const ChartArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_axis_styles_.MergeFrom(from.value_axis_styles_);
  value_axis_nonstyles_.MergeFrom(from.value_axis_nonstyles_);
  category_axis_styles_.MergeFrom(from.category_axis_styles_);
  category_axis_nonstyles_.MergeFrom(from.category_axis_nonstyles_);
  series_theme_styles_.MergeFrom(from.series_theme_styles_);
  paragraph_styles_.MergeFrom(from.paragraph_styles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chart_type()) {
      set_chart_type(from.chart_type());
    }
    if (from.has_scatter_format()) {
      set_scatter_format(from.scatter_format());
    }
    if (from.has_legend_frame()) {
      mutable_legend_frame()->::TSCH::RectArchive::MergeFrom(from.legend_frame());
    }
    if (from.has_preset()) {
      mutable_preset()->::TSP::Reference::MergeFrom(from.preset());
    }
    if (from.has_series_direction()) {
      set_series_direction(from.series_direction());
    }
    if (from.has_contains_default_data()) {
      set_contains_default_data(from.contains_default_data());
    }
    if (from.has_grid()) {
      mutable_grid()->::TSCH::ChartGridArchive::MergeFrom(from.grid());
    }
    if (from.has_mediator()) {
      mutable_mediator()->::TSP::Reference::MergeFrom(from.mediator());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_chart_style()) {
      mutable_chart_style()->::TSP::Reference::MergeFrom(from.chart_style());
    }
    if (from.has_chart_non_style()) {
      mutable_chart_non_style()->::TSP::Reference::MergeFrom(from.chart_non_style());
    }
    if (from.has_legend_style()) {
      mutable_legend_style()->::TSP::Reference::MergeFrom(from.legend_style());
    }
    if (from.has_legend_non_style()) {
      mutable_legend_non_style()->::TSP::Reference::MergeFrom(from.legend_non_style());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_series_private_styles()) {
      mutable_series_private_styles()->::TSCH::SparseReferenceArrayArchive::MergeFrom(from.series_private_styles());
    }
    if (from.has_series_non_styles()) {
      mutable_series_non_styles()->::TSCH::SparseReferenceArrayArchive::MergeFrom(from.series_non_styles());
    }
    if (from.has_multidataset_index()) {
      set_multidataset_index(from.multidataset_index());
    }
    if (from.has_needs_calc_engine_deferred_import_action()) {
      set_needs_calc_engine_deferred_import_action(from.needs_calc_engine_deferred_import_action());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartArchive::CopyFrom(const ChartArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartArchive::IsInitialized() const {

  if (has_legend_frame()) {
    if (!this->legend_frame().IsInitialized()) return false;
  }
  if (has_preset()) {
    if (!this->preset().IsInitialized()) return false;
  }
  if (has_grid()) {
    if (!this->grid().IsInitialized()) return false;
  }
  if (has_mediator()) {
    if (!this->mediator().IsInitialized()) return false;
  }
  if (has_chart_style()) {
    if (!this->chart_style().IsInitialized()) return false;
  }
  if (has_chart_non_style()) {
    if (!this->chart_non_style().IsInitialized()) return false;
  }
  if (has_legend_style()) {
    if (!this->legend_style().IsInitialized()) return false;
  }
  if (has_legend_non_style()) {
    if (!this->legend_non_style().IsInitialized()) return false;
  }
  for (int i = 0; i < value_axis_styles_size(); i++) {
    if (!this->value_axis_styles(i).IsInitialized()) return false;
  }
  for (int i = 0; i < value_axis_nonstyles_size(); i++) {
    if (!this->value_axis_nonstyles(i).IsInitialized()) return false;
  }
  for (int i = 0; i < category_axis_styles_size(); i++) {
    if (!this->category_axis_styles(i).IsInitialized()) return false;
  }
  for (int i = 0; i < category_axis_nonstyles_size(); i++) {
    if (!this->category_axis_nonstyles(i).IsInitialized()) return false;
  }
  for (int i = 0; i < series_theme_styles_size(); i++) {
    if (!this->series_theme_styles(i).IsInitialized()) return false;
  }
  if (has_series_private_styles()) {
    if (!this->series_private_styles().IsInitialized()) return false;
  }
  if (has_series_non_styles()) {
    if (!this->series_non_styles().IsInitialized()) return false;
  }
  for (int i = 0; i < paragraph_styles_size(); i++) {
    if (!this->paragraph_styles(i).IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void ChartArchive::Swap(ChartArchive* other) {
  if (other != this) {
    std::swap(chart_type_, other->chart_type_);
    std::swap(scatter_format_, other->scatter_format_);
    std::swap(legend_frame_, other->legend_frame_);
    std::swap(preset_, other->preset_);
    std::swap(series_direction_, other->series_direction_);
    std::swap(contains_default_data_, other->contains_default_data_);
    std::swap(grid_, other->grid_);
    std::swap(mediator_, other->mediator_);
    std::swap(chart_style_, other->chart_style_);
    std::swap(chart_non_style_, other->chart_non_style_);
    std::swap(legend_style_, other->legend_style_);
    std::swap(legend_non_style_, other->legend_non_style_);
    value_axis_styles_.Swap(&other->value_axis_styles_);
    value_axis_nonstyles_.Swap(&other->value_axis_nonstyles_);
    category_axis_styles_.Swap(&other->category_axis_styles_);
    category_axis_nonstyles_.Swap(&other->category_axis_nonstyles_);
    series_theme_styles_.Swap(&other->series_theme_styles_);
    std::swap(series_private_styles_, other->series_private_styles_);
    std::swap(series_non_styles_, other->series_non_styles_);
    paragraph_styles_.Swap(&other->paragraph_styles_);
    std::swap(multidataset_index_, other->multidataset_index_);
    std::swap(needs_calc_engine_deferred_import_action_, other->needs_calc_engine_deferred_import_action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata ChartArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartArchive_descriptor_;
  metadata.reflection = ChartArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ChartPasteboardAdditionsArchive::kPresetIndexForPasteboardFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::uint32 >, 13, false >
  ChartPasteboardAdditionsArchive::preset_index_for_pasteboard(kPresetIndexForPasteboardFieldNumber, 0u);
const ::std::string ChartPasteboardAdditionsArchive_preset_uuid_for_pasteboard_default("");
#ifndef _MSC_VER
const int ChartPasteboardAdditionsArchive::kPresetUuidForPasteboardFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::google::protobuf::internal::StringTypeTraits, 12, false >
  ChartPasteboardAdditionsArchive::preset_uuid_for_pasteboard(kPresetUuidForPasteboardFieldNumber, ChartPasteboardAdditionsArchive_preset_uuid_for_pasteboard_default);
#ifndef _MSC_VER
const int ChartPasteboardAdditionsArchive::kCustomFormatListForPasteboardFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::google::protobuf::internal::MessageTypeTraits< ::TSP::Reference >, 11, false >
  ChartPasteboardAdditionsArchive::custom_format_list_for_pasteboard(kCustomFormatListForPasteboardFieldNumber, ::TSP::Reference::default_instance());
ChartPasteboardAdditionsArchive::ChartPasteboardAdditionsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartPasteboardAdditionsArchive::InitAsDefaultInstance() {
}

ChartPasteboardAdditionsArchive::ChartPasteboardAdditionsArchive(const ChartPasteboardAdditionsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartPasteboardAdditionsArchive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartPasteboardAdditionsArchive::~ChartPasteboardAdditionsArchive() {
  SharedDtor();
}

void ChartPasteboardAdditionsArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChartPasteboardAdditionsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartPasteboardAdditionsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartPasteboardAdditionsArchive_descriptor_;
}

const ChartPasteboardAdditionsArchive& ChartPasteboardAdditionsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eproto();
  return *default_instance_;
}

ChartPasteboardAdditionsArchive* ChartPasteboardAdditionsArchive::default_instance_ = NULL;

ChartPasteboardAdditionsArchive* ChartPasteboardAdditionsArchive::New() const {
  return new ChartPasteboardAdditionsArchive;
}

void ChartPasteboardAdditionsArchive::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartPasteboardAdditionsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ChartPasteboardAdditionsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartPasteboardAdditionsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartPasteboardAdditionsArchive::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartPasteboardAdditionsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartPasteboardAdditionsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartPasteboardAdditionsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartPasteboardAdditionsArchive::MergeFrom(const ChartPasteboardAdditionsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartPasteboardAdditionsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartPasteboardAdditionsArchive::CopyFrom(const ChartPasteboardAdditionsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartPasteboardAdditionsArchive::IsInitialized() const {

  return true;
}

void ChartPasteboardAdditionsArchive::Swap(ChartPasteboardAdditionsArchive* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartPasteboardAdditionsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartPasteboardAdditionsArchive_descriptor_;
  metadata.reflection = ChartPasteboardAdditionsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartGridArchive_GridRow_GridValue::kNumericValueFieldNumber;
const int ChartGridArchive_GridRow_GridValue::kDateValue10FieldNumber;
const int ChartGridArchive_GridRow_GridValue::kDurationValueFieldNumber;
const int ChartGridArchive_GridRow_GridValue::kDateValueFieldNumber;
#endif  // !_MSC_VER

ChartGridArchive_GridRow_GridValue::ChartGridArchive_GridRow_GridValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartGridArchive_GridRow_GridValue::InitAsDefaultInstance() {
}

ChartGridArchive_GridRow_GridValue::ChartGridArchive_GridRow_GridValue(const ChartGridArchive_GridRow_GridValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartGridArchive_GridRow_GridValue::SharedCtor() {
  _cached_size_ = 0;
  numeric_value_ = 0;
  date_value_1_0_ = 0;
  duration_value_ = 0;
  date_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartGridArchive_GridRow_GridValue::~ChartGridArchive_GridRow_GridValue() {
  SharedDtor();
}

void ChartGridArchive_GridRow_GridValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChartGridArchive_GridRow_GridValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartGridArchive_GridRow_GridValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartGridArchive_GridRow_GridValue_descriptor_;
}

const ChartGridArchive_GridRow_GridValue& ChartGridArchive_GridRow_GridValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eproto();
  return *default_instance_;
}

ChartGridArchive_GridRow_GridValue* ChartGridArchive_GridRow_GridValue::default_instance_ = NULL;

ChartGridArchive_GridRow_GridValue* ChartGridArchive_GridRow_GridValue::New() const {
  return new ChartGridArchive_GridRow_GridValue;
}

void ChartGridArchive_GridRow_GridValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    numeric_value_ = 0;
    date_value_1_0_ = 0;
    duration_value_ = 0;
    date_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartGridArchive_GridRow_GridValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double numeric_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &numeric_value_)));
          set_has_numeric_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_date_value_1_0;
        break;
      }

      // optional double date_value_1_0 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_date_value_1_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &date_value_1_0_)));
          set_has_date_value_1_0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_duration_value;
        break;
      }

      // optional double duration_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_duration_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_value_)));
          set_has_duration_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_date_value;
        break;
      }

      // optional double date_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_date_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &date_value_)));
          set_has_date_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartGridArchive_GridRow_GridValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double numeric_value = 1;
  if (has_numeric_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->numeric_value(), output);
  }

  // optional double date_value_1_0 = 2;
  if (has_date_value_1_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->date_value_1_0(), output);
  }

  // optional double duration_value = 3;
  if (has_duration_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->duration_value(), output);
  }

  // optional double date_value = 4;
  if (has_date_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->date_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartGridArchive_GridRow_GridValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double numeric_value = 1;
  if (has_numeric_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->numeric_value(), target);
  }

  // optional double date_value_1_0 = 2;
  if (has_date_value_1_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->date_value_1_0(), target);
  }

  // optional double duration_value = 3;
  if (has_duration_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->duration_value(), target);
  }

  // optional double date_value = 4;
  if (has_date_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->date_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartGridArchive_GridRow_GridValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double numeric_value = 1;
    if (has_numeric_value()) {
      total_size += 1 + 8;
    }

    // optional double date_value_1_0 = 2;
    if (has_date_value_1_0()) {
      total_size += 1 + 8;
    }

    // optional double duration_value = 3;
    if (has_duration_value()) {
      total_size += 1 + 8;
    }

    // optional double date_value = 4;
    if (has_date_value()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartGridArchive_GridRow_GridValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartGridArchive_GridRow_GridValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartGridArchive_GridRow_GridValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartGridArchive_GridRow_GridValue::MergeFrom(const ChartGridArchive_GridRow_GridValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_numeric_value()) {
      set_numeric_value(from.numeric_value());
    }
    if (from.has_date_value_1_0()) {
      set_date_value_1_0(from.date_value_1_0());
    }
    if (from.has_duration_value()) {
      set_duration_value(from.duration_value());
    }
    if (from.has_date_value()) {
      set_date_value(from.date_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartGridArchive_GridRow_GridValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartGridArchive_GridRow_GridValue::CopyFrom(const ChartGridArchive_GridRow_GridValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartGridArchive_GridRow_GridValue::IsInitialized() const {

  return true;
}

void ChartGridArchive_GridRow_GridValue::Swap(ChartGridArchive_GridRow_GridValue* other) {
  if (other != this) {
    std::swap(numeric_value_, other->numeric_value_);
    std::swap(date_value_1_0_, other->date_value_1_0_);
    std::swap(duration_value_, other->duration_value_);
    std::swap(date_value_, other->date_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartGridArchive_GridRow_GridValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartGridArchive_GridRow_GridValue_descriptor_;
  metadata.reflection = ChartGridArchive_GridRow_GridValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ChartGridArchive_GridRow::kValueFieldNumber;
#endif  // !_MSC_VER

ChartGridArchive_GridRow::ChartGridArchive_GridRow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartGridArchive_GridRow::InitAsDefaultInstance() {
}

ChartGridArchive_GridRow::ChartGridArchive_GridRow(const ChartGridArchive_GridRow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartGridArchive_GridRow::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartGridArchive_GridRow::~ChartGridArchive_GridRow() {
  SharedDtor();
}

void ChartGridArchive_GridRow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChartGridArchive_GridRow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartGridArchive_GridRow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartGridArchive_GridRow_descriptor_;
}

const ChartGridArchive_GridRow& ChartGridArchive_GridRow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eproto();
  return *default_instance_;
}

ChartGridArchive_GridRow* ChartGridArchive_GridRow::default_instance_ = NULL;

ChartGridArchive_GridRow* ChartGridArchive_GridRow::New() const {
  return new ChartGridArchive_GridRow;
}

void ChartGridArchive_GridRow::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartGridArchive_GridRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSCH.ChartGridArchive.GridRow.GridValue value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartGridArchive_GridRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSCH.ChartGridArchive.GridRow.GridValue value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartGridArchive_GridRow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSCH.ChartGridArchive.GridRow.GridValue value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartGridArchive_GridRow::ByteSize() const {
  int total_size = 0;

  // repeated .TSCH.ChartGridArchive.GridRow.GridValue value = 1;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartGridArchive_GridRow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartGridArchive_GridRow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartGridArchive_GridRow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartGridArchive_GridRow::MergeFrom(const ChartGridArchive_GridRow& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartGridArchive_GridRow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartGridArchive_GridRow::CopyFrom(const ChartGridArchive_GridRow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartGridArchive_GridRow::IsInitialized() const {

  return true;
}

void ChartGridArchive_GridRow::Swap(ChartGridArchive_GridRow* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartGridArchive_GridRow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartGridArchive_GridRow_descriptor_;
  metadata.reflection = ChartGridArchive_GridRow_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ChartGridArchive_ChartGridRowColumnIdMap_Entry::kUniqueIdFieldNumber;
const int ChartGridArchive_ChartGridRowColumnIdMap_Entry::kIndexFieldNumber;
#endif  // !_MSC_VER

ChartGridArchive_ChartGridRowColumnIdMap_Entry::ChartGridArchive_ChartGridRowColumnIdMap_Entry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartGridArchive_ChartGridRowColumnIdMap_Entry::InitAsDefaultInstance() {
}

ChartGridArchive_ChartGridRowColumnIdMap_Entry::ChartGridArchive_ChartGridRowColumnIdMap_Entry(const ChartGridArchive_ChartGridRowColumnIdMap_Entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartGridArchive_ChartGridRowColumnIdMap_Entry::SharedCtor() {
  _cached_size_ = 0;
  uniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartGridArchive_ChartGridRowColumnIdMap_Entry::~ChartGridArchive_ChartGridRowColumnIdMap_Entry() {
  SharedDtor();
}

void ChartGridArchive_ChartGridRowColumnIdMap_Entry::SharedDtor() {
  if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
    delete uniqueid_;
  }
  if (this != default_instance_) {
  }
}

void ChartGridArchive_ChartGridRowColumnIdMap_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartGridArchive_ChartGridRowColumnIdMap_Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartGridArchive_ChartGridRowColumnIdMap_Entry_descriptor_;
}

const ChartGridArchive_ChartGridRowColumnIdMap_Entry& ChartGridArchive_ChartGridRowColumnIdMap_Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eproto();
  return *default_instance_;
}

ChartGridArchive_ChartGridRowColumnIdMap_Entry* ChartGridArchive_ChartGridRowColumnIdMap_Entry::default_instance_ = NULL;

ChartGridArchive_ChartGridRowColumnIdMap_Entry* ChartGridArchive_ChartGridRowColumnIdMap_Entry::New() const {
  return new ChartGridArchive_ChartGridRowColumnIdMap_Entry;
}

void ChartGridArchive_ChartGridRowColumnIdMap_Entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uniqueid()) {
      if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
        uniqueid_->clear();
      }
    }
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartGridArchive_ChartGridRowColumnIdMap_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uniqueId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniqueid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniqueid().data(), this->uniqueid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required uint32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartGridArchive_ChartGridRowColumnIdMap_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string uniqueId = 1;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueid().data(), this->uniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uniqueid(), output);
  }

  // required uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartGridArchive_ChartGridRowColumnIdMap_Entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string uniqueId = 1;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueid().data(), this->uniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uniqueid(), target);
  }

  // required uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartGridArchive_ChartGridRowColumnIdMap_Entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uniqueId = 1;
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniqueid());
    }

    // required uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartGridArchive_ChartGridRowColumnIdMap_Entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartGridArchive_ChartGridRowColumnIdMap_Entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartGridArchive_ChartGridRowColumnIdMap_Entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartGridArchive_ChartGridRowColumnIdMap_Entry::MergeFrom(const ChartGridArchive_ChartGridRowColumnIdMap_Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartGridArchive_ChartGridRowColumnIdMap_Entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartGridArchive_ChartGridRowColumnIdMap_Entry::CopyFrom(const ChartGridArchive_ChartGridRowColumnIdMap_Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartGridArchive_ChartGridRowColumnIdMap_Entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChartGridArchive_ChartGridRowColumnIdMap_Entry::Swap(ChartGridArchive_ChartGridRowColumnIdMap_Entry* other) {
  if (other != this) {
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartGridArchive_ChartGridRowColumnIdMap_Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartGridArchive_ChartGridRowColumnIdMap_Entry_descriptor_;
  metadata.reflection = ChartGridArchive_ChartGridRowColumnIdMap_Entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ChartGridArchive_ChartGridRowColumnIdMap::kRowIdMapFieldNumber;
const int ChartGridArchive_ChartGridRowColumnIdMap::kColumnIdMapFieldNumber;
#endif  // !_MSC_VER

ChartGridArchive_ChartGridRowColumnIdMap::ChartGridArchive_ChartGridRowColumnIdMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartGridArchive_ChartGridRowColumnIdMap::InitAsDefaultInstance() {
}

ChartGridArchive_ChartGridRowColumnIdMap::ChartGridArchive_ChartGridRowColumnIdMap(const ChartGridArchive_ChartGridRowColumnIdMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartGridArchive_ChartGridRowColumnIdMap::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartGridArchive_ChartGridRowColumnIdMap::~ChartGridArchive_ChartGridRowColumnIdMap() {
  SharedDtor();
}

void ChartGridArchive_ChartGridRowColumnIdMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChartGridArchive_ChartGridRowColumnIdMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartGridArchive_ChartGridRowColumnIdMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartGridArchive_ChartGridRowColumnIdMap_descriptor_;
}

const ChartGridArchive_ChartGridRowColumnIdMap& ChartGridArchive_ChartGridRowColumnIdMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eproto();
  return *default_instance_;
}

ChartGridArchive_ChartGridRowColumnIdMap* ChartGridArchive_ChartGridRowColumnIdMap::default_instance_ = NULL;

ChartGridArchive_ChartGridRowColumnIdMap* ChartGridArchive_ChartGridRowColumnIdMap::New() const {
  return new ChartGridArchive_ChartGridRowColumnIdMap;
}

void ChartGridArchive_ChartGridRowColumnIdMap::Clear() {
  row_id_map_.Clear();
  column_id_map_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartGridArchive_ChartGridRowColumnIdMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry row_id_map = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_row_id_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_row_id_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_row_id_map;
        if (input->ExpectTag(18)) goto parse_column_id_map;
        break;
      }

      // repeated .TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry column_id_map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_column_id_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_column_id_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_column_id_map;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartGridArchive_ChartGridRowColumnIdMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry row_id_map = 1;
  for (int i = 0; i < this->row_id_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->row_id_map(i), output);
  }

  // repeated .TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry column_id_map = 2;
  for (int i = 0; i < this->column_id_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->column_id_map(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartGridArchive_ChartGridRowColumnIdMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry row_id_map = 1;
  for (int i = 0; i < this->row_id_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->row_id_map(i), target);
  }

  // repeated .TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry column_id_map = 2;
  for (int i = 0; i < this->column_id_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->column_id_map(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartGridArchive_ChartGridRowColumnIdMap::ByteSize() const {
  int total_size = 0;

  // repeated .TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry row_id_map = 1;
  total_size += 1 * this->row_id_map_size();
  for (int i = 0; i < this->row_id_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->row_id_map(i));
  }

  // repeated .TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry column_id_map = 2;
  total_size += 1 * this->column_id_map_size();
  for (int i = 0; i < this->column_id_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->column_id_map(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartGridArchive_ChartGridRowColumnIdMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartGridArchive_ChartGridRowColumnIdMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartGridArchive_ChartGridRowColumnIdMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartGridArchive_ChartGridRowColumnIdMap::MergeFrom(const ChartGridArchive_ChartGridRowColumnIdMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  row_id_map_.MergeFrom(from.row_id_map_);
  column_id_map_.MergeFrom(from.column_id_map_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartGridArchive_ChartGridRowColumnIdMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartGridArchive_ChartGridRowColumnIdMap::CopyFrom(const ChartGridArchive_ChartGridRowColumnIdMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartGridArchive_ChartGridRowColumnIdMap::IsInitialized() const {

  for (int i = 0; i < row_id_map_size(); i++) {
    if (!this->row_id_map(i).IsInitialized()) return false;
  }
  for (int i = 0; i < column_id_map_size(); i++) {
    if (!this->column_id_map(i).IsInitialized()) return false;
  }
  return true;
}

void ChartGridArchive_ChartGridRowColumnIdMap::Swap(ChartGridArchive_ChartGridRowColumnIdMap* other) {
  if (other != this) {
    row_id_map_.Swap(&other->row_id_map_);
    column_id_map_.Swap(&other->column_id_map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartGridArchive_ChartGridRowColumnIdMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartGridArchive_ChartGridRowColumnIdMap_descriptor_;
  metadata.reflection = ChartGridArchive_ChartGridRowColumnIdMap_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ChartGridArchive::kRowNameFieldNumber;
const int ChartGridArchive::kColumnNameFieldNumber;
const int ChartGridArchive::kGridRowFieldNumber;
const int ChartGridArchive::kIdMapFieldNumber;
#endif  // !_MSC_VER

ChartGridArchive::ChartGridArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartGridArchive::InitAsDefaultInstance() {
  idmap_ = const_cast< ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap*>(&::TSCH::ChartGridArchive_ChartGridRowColumnIdMap::default_instance());
}

ChartGridArchive::ChartGridArchive(const ChartGridArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartGridArchive::SharedCtor() {
  _cached_size_ = 0;
  idmap_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartGridArchive::~ChartGridArchive() {
  SharedDtor();
}

void ChartGridArchive::SharedDtor() {
  if (this != default_instance_) {
    delete idmap_;
  }
}

void ChartGridArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartGridArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartGridArchive_descriptor_;
}

const ChartGridArchive& ChartGridArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eproto();
  return *default_instance_;
}

ChartGridArchive* ChartGridArchive::default_instance_ = NULL;

ChartGridArchive* ChartGridArchive::New() const {
  return new ChartGridArchive;
}

void ChartGridArchive::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (has_idmap()) {
      if (idmap_ != NULL) idmap_->::TSCH::ChartGridArchive_ChartGridRowColumnIdMap::Clear();
    }
  }
  row_name_.Clear();
  column_name_.Clear();
  grid_row_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartGridArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string row_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_row_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_row_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->row_name(this->row_name_size() - 1).data(),
            this->row_name(this->row_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_row_name;
        if (input->ExpectTag(18)) goto parse_column_name;
        break;
      }

      // repeated string column_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_column_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_column_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->column_name(this->column_name_size() - 1).data(),
            this->column_name(this->column_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_column_name;
        if (input->ExpectTag(26)) goto parse_grid_row;
        break;
      }

      // repeated .TSCH.ChartGridArchive.GridRow grid_row = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grid_row:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grid_row()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_grid_row;
        if (input->ExpectTag(34)) goto parse_idMap;
        break;
      }

      // optional .TSCH.ChartGridArchive.ChartGridRowColumnIdMap idMap = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_idMap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_idmap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartGridArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string row_name = 1;
  for (int i = 0; i < this->row_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->row_name(i).data(), this->row_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->row_name(i), output);
  }

  // repeated string column_name = 2;
  for (int i = 0; i < this->column_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->column_name(i).data(), this->column_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->column_name(i), output);
  }

  // repeated .TSCH.ChartGridArchive.GridRow grid_row = 3;
  for (int i = 0; i < this->grid_row_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->grid_row(i), output);
  }

  // optional .TSCH.ChartGridArchive.ChartGridRowColumnIdMap idMap = 4;
  if (has_idmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->idmap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartGridArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string row_name = 1;
  for (int i = 0; i < this->row_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->row_name(i).data(), this->row_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->row_name(i), target);
  }

  // repeated string column_name = 2;
  for (int i = 0; i < this->column_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->column_name(i).data(), this->column_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->column_name(i), target);
  }

  // repeated .TSCH.ChartGridArchive.GridRow grid_row = 3;
  for (int i = 0; i < this->grid_row_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->grid_row(i), target);
  }

  // optional .TSCH.ChartGridArchive.ChartGridRowColumnIdMap idMap = 4;
  if (has_idmap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->idmap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartGridArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional .TSCH.ChartGridArchive.ChartGridRowColumnIdMap idMap = 4;
    if (has_idmap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->idmap());
    }

  }
  // repeated string row_name = 1;
  total_size += 1 * this->row_name_size();
  for (int i = 0; i < this->row_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->row_name(i));
  }

  // repeated string column_name = 2;
  total_size += 1 * this->column_name_size();
  for (int i = 0; i < this->column_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->column_name(i));
  }

  // repeated .TSCH.ChartGridArchive.GridRow grid_row = 3;
  total_size += 1 * this->grid_row_size();
  for (int i = 0; i < this->grid_row_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grid_row(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartGridArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartGridArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartGridArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartGridArchive::MergeFrom(const ChartGridArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  row_name_.MergeFrom(from.row_name_);
  column_name_.MergeFrom(from.column_name_);
  grid_row_.MergeFrom(from.grid_row_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_idmap()) {
      mutable_idmap()->::TSCH::ChartGridArchive_ChartGridRowColumnIdMap::MergeFrom(from.idmap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartGridArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartGridArchive::CopyFrom(const ChartGridArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartGridArchive::IsInitialized() const {

  if (has_idmap()) {
    if (!this->idmap().IsInitialized()) return false;
  }
  return true;
}

void ChartGridArchive::Swap(ChartGridArchive* other) {
  if (other != this) {
    row_name_.Swap(&other->row_name_);
    column_name_.Swap(&other->column_name_);
    grid_row_.Swap(&other->grid_row_);
    std::swap(idmap_, other->idmap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartGridArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartGridArchive_descriptor_;
  metadata.reflection = ChartGridArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartMediatorArchive::kInfoFieldNumber;
const int ChartMediatorArchive::kLocalSeriesIndexesFieldNumber;
const int ChartMediatorArchive::kRemoteSeriesIndexesFieldNumber;
#endif  // !_MSC_VER

ChartMediatorArchive::ChartMediatorArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartMediatorArchive::InitAsDefaultInstance() {
  info_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ChartMediatorArchive::ChartMediatorArchive(const ChartMediatorArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartMediatorArchive::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartMediatorArchive::~ChartMediatorArchive() {
  SharedDtor();
}

void ChartMediatorArchive::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void ChartMediatorArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartMediatorArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartMediatorArchive_descriptor_;
}

const ChartMediatorArchive& ChartMediatorArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eproto();
  return *default_instance_;
}

ChartMediatorArchive* ChartMediatorArchive::default_instance_ = NULL;

ChartMediatorArchive* ChartMediatorArchive::New() const {
  return new ChartMediatorArchive;
}

void ChartMediatorArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::TSP::Reference::Clear();
    }
  }
  local_series_indexes_.Clear();
  remote_series_indexes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartMediatorArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_local_series_indexes;
        break;
      }

      // repeated uint32 local_series_indexes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_local_series_indexes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_local_series_indexes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_local_series_indexes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_local_series_indexes;
        if (input->ExpectTag(24)) goto parse_remote_series_indexes;
        break;
      }

      // repeated uint32 remote_series_indexes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remote_series_indexes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_remote_series_indexes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_remote_series_indexes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remote_series_indexes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartMediatorArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // repeated uint32 local_series_indexes = 2;
  for (int i = 0; i < this->local_series_indexes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->local_series_indexes(i), output);
  }

  // repeated uint32 remote_series_indexes = 3;
  for (int i = 0; i < this->remote_series_indexes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->remote_series_indexes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartMediatorArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // repeated uint32 local_series_indexes = 2;
  for (int i = 0; i < this->local_series_indexes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->local_series_indexes(i), target);
  }

  // repeated uint32 remote_series_indexes = 3;
  for (int i = 0; i < this->remote_series_indexes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->remote_series_indexes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartMediatorArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  // repeated uint32 local_series_indexes = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->local_series_indexes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->local_series_indexes(i));
    }
    total_size += 1 * this->local_series_indexes_size() + data_size;
  }

  // repeated uint32 remote_series_indexes = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->remote_series_indexes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->remote_series_indexes(i));
    }
    total_size += 1 * this->remote_series_indexes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartMediatorArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartMediatorArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartMediatorArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartMediatorArchive::MergeFrom(const ChartMediatorArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  local_series_indexes_.MergeFrom(from.local_series_indexes_);
  remote_series_indexes_.MergeFrom(from.remote_series_indexes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::TSP::Reference::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartMediatorArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartMediatorArchive::CopyFrom(const ChartMediatorArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartMediatorArchive::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void ChartMediatorArchive::Swap(ChartMediatorArchive* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    local_series_indexes_.Swap(&other->local_series_indexes_);
    remote_series_indexes_.Swap(&other->remote_series_indexes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartMediatorArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartMediatorArchive_descriptor_;
  metadata.reflection = ChartMediatorArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartStylePreset::kChartStyleFieldNumber;
const int ChartStylePreset::kLegendStyleFieldNumber;
const int ChartStylePreset::kValueAxisStylesFieldNumber;
const int ChartStylePreset::kCategoryAxisStylesFieldNumber;
const int ChartStylePreset::kSeriesStylesFieldNumber;
const int ChartStylePreset::kParagraphStylesFieldNumber;
const int ChartStylePreset::kUuidFieldNumber;
#endif  // !_MSC_VER

ChartStylePreset::ChartStylePreset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartStylePreset::InitAsDefaultInstance() {
  chart_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  legend_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ChartStylePreset::ChartStylePreset(const ChartStylePreset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartStylePreset::SharedCtor() {
  _cached_size_ = 0;
  chart_style_ = NULL;
  legend_style_ = NULL;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartStylePreset::~ChartStylePreset() {
  SharedDtor();
}

void ChartStylePreset::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
    delete chart_style_;
    delete legend_style_;
  }
}

void ChartStylePreset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartStylePreset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartStylePreset_descriptor_;
}

const ChartStylePreset& ChartStylePreset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eproto();
  return *default_instance_;
}

ChartStylePreset* ChartStylePreset::default_instance_ = NULL;

ChartStylePreset* ChartStylePreset::New() const {
  return new ChartStylePreset;
}

void ChartStylePreset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chart_style()) {
      if (chart_style_ != NULL) chart_style_->::TSP::Reference::Clear();
    }
    if (has_legend_style()) {
      if (legend_style_ != NULL) legend_style_->::TSP::Reference::Clear();
    }
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
  }
  value_axis_styles_.Clear();
  category_axis_styles_.Clear();
  series_styles_.Clear();
  paragraph_styles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartStylePreset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference chart_style = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chart_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_legend_style;
        break;
      }

      // optional .TSP.Reference legend_style = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_legend_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_legend_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value_axis_styles;
        break;
      }

      // repeated .TSP.Reference value_axis_styles = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_axis_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value_axis_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value_axis_styles;
        if (input->ExpectTag(34)) goto parse_category_axis_styles;
        break;
      }

      // repeated .TSP.Reference category_axis_styles = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_category_axis_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_category_axis_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_category_axis_styles;
        if (input->ExpectTag(42)) goto parse_series_styles;
        break;
      }

      // repeated .TSP.Reference series_styles = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_series_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_series_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_series_styles;
        if (input->ExpectTag(50)) goto parse_paragraph_styles;
        break;
      }

      // repeated .TSP.Reference paragraph_styles = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paragraph_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_paragraph_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_paragraph_styles;
        if (input->ExpectTag(58)) goto parse_uuid;
        break;
      }

      // optional bytes uuid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartStylePreset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference chart_style = 1;
  if (has_chart_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chart_style(), output);
  }

  // optional .TSP.Reference legend_style = 2;
  if (has_legend_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->legend_style(), output);
  }

  // repeated .TSP.Reference value_axis_styles = 3;
  for (int i = 0; i < this->value_axis_styles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->value_axis_styles(i), output);
  }

  // repeated .TSP.Reference category_axis_styles = 4;
  for (int i = 0; i < this->category_axis_styles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->category_axis_styles(i), output);
  }

  // repeated .TSP.Reference series_styles = 5;
  for (int i = 0; i < this->series_styles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->series_styles(i), output);
  }

  // repeated .TSP.Reference paragraph_styles = 6;
  for (int i = 0; i < this->paragraph_styles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->paragraph_styles(i), output);
  }

  // optional bytes uuid = 7;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartStylePreset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference chart_style = 1;
  if (has_chart_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chart_style(), target);
  }

  // optional .TSP.Reference legend_style = 2;
  if (has_legend_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->legend_style(), target);
  }

  // repeated .TSP.Reference value_axis_styles = 3;
  for (int i = 0; i < this->value_axis_styles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->value_axis_styles(i), target);
  }

  // repeated .TSP.Reference category_axis_styles = 4;
  for (int i = 0; i < this->category_axis_styles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->category_axis_styles(i), target);
  }

  // repeated .TSP.Reference series_styles = 5;
  for (int i = 0; i < this->series_styles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->series_styles(i), target);
  }

  // repeated .TSP.Reference paragraph_styles = 6;
  for (int i = 0; i < this->paragraph_styles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->paragraph_styles(i), target);
  }

  // optional bytes uuid = 7;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartStylePreset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference chart_style = 1;
    if (has_chart_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chart_style());
    }

    // optional .TSP.Reference legend_style = 2;
    if (has_legend_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->legend_style());
    }

    // optional bytes uuid = 7;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

  }
  // repeated .TSP.Reference value_axis_styles = 3;
  total_size += 1 * this->value_axis_styles_size();
  for (int i = 0; i < this->value_axis_styles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value_axis_styles(i));
  }

  // repeated .TSP.Reference category_axis_styles = 4;
  total_size += 1 * this->category_axis_styles_size();
  for (int i = 0; i < this->category_axis_styles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->category_axis_styles(i));
  }

  // repeated .TSP.Reference series_styles = 5;
  total_size += 1 * this->series_styles_size();
  for (int i = 0; i < this->series_styles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->series_styles(i));
  }

  // repeated .TSP.Reference paragraph_styles = 6;
  total_size += 1 * this->paragraph_styles_size();
  for (int i = 0; i < this->paragraph_styles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->paragraph_styles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartStylePreset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartStylePreset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartStylePreset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartStylePreset::MergeFrom(const ChartStylePreset& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_axis_styles_.MergeFrom(from.value_axis_styles_);
  category_axis_styles_.MergeFrom(from.category_axis_styles_);
  series_styles_.MergeFrom(from.series_styles_);
  paragraph_styles_.MergeFrom(from.paragraph_styles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chart_style()) {
      mutable_chart_style()->::TSP::Reference::MergeFrom(from.chart_style());
    }
    if (from.has_legend_style()) {
      mutable_legend_style()->::TSP::Reference::MergeFrom(from.legend_style());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartStylePreset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartStylePreset::CopyFrom(const ChartStylePreset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartStylePreset::IsInitialized() const {

  if (has_chart_style()) {
    if (!this->chart_style().IsInitialized()) return false;
  }
  if (has_legend_style()) {
    if (!this->legend_style().IsInitialized()) return false;
  }
  for (int i = 0; i < value_axis_styles_size(); i++) {
    if (!this->value_axis_styles(i).IsInitialized()) return false;
  }
  for (int i = 0; i < category_axis_styles_size(); i++) {
    if (!this->category_axis_styles(i).IsInitialized()) return false;
  }
  for (int i = 0; i < series_styles_size(); i++) {
    if (!this->series_styles(i).IsInitialized()) return false;
  }
  for (int i = 0; i < paragraph_styles_size(); i++) {
    if (!this->paragraph_styles(i).IsInitialized()) return false;
  }
  return true;
}

void ChartStylePreset::Swap(ChartStylePreset* other) {
  if (other != this) {
    std::swap(chart_style_, other->chart_style_);
    std::swap(legend_style_, other->legend_style_);
    value_axis_styles_.Swap(&other->value_axis_styles_);
    category_axis_styles_.Swap(&other->category_axis_styles_);
    series_styles_.Swap(&other->series_styles_);
    paragraph_styles_.Swap(&other->paragraph_styles_);
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartStylePreset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartStylePreset_descriptor_;
  metadata.reflection = ChartStylePreset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartPresetsArchive::kChartPresetsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ChartPresetsArchive::kExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::TSS::ThemeArchive,
    ::google::protobuf::internal::MessageTypeTraits< ::TSCH::ChartPresetsArchive >, 11, false >
  ChartPresetsArchive::extension(kExtensionFieldNumber, ::TSCH::ChartPresetsArchive::default_instance());
ChartPresetsArchive::ChartPresetsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartPresetsArchive::InitAsDefaultInstance() {
}

ChartPresetsArchive::ChartPresetsArchive(const ChartPresetsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartPresetsArchive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartPresetsArchive::~ChartPresetsArchive() {
  SharedDtor();
}

void ChartPresetsArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChartPresetsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartPresetsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartPresetsArchive_descriptor_;
}

const ChartPresetsArchive& ChartPresetsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eproto();
  return *default_instance_;
}

ChartPresetsArchive* ChartPresetsArchive::default_instance_ = NULL;

ChartPresetsArchive* ChartPresetsArchive::New() const {
  return new ChartPresetsArchive;
}

void ChartPresetsArchive::Clear() {
  chart_presets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartPresetsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSP.Reference chart_presets = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chart_presets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chart_presets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_chart_presets;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartPresetsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSP.Reference chart_presets = 1;
  for (int i = 0; i < this->chart_presets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chart_presets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartPresetsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSP.Reference chart_presets = 1;
  for (int i = 0; i < this->chart_presets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chart_presets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartPresetsArchive::ByteSize() const {
  int total_size = 0;

  // repeated .TSP.Reference chart_presets = 1;
  total_size += 1 * this->chart_presets_size();
  for (int i = 0; i < this->chart_presets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chart_presets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartPresetsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartPresetsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartPresetsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartPresetsArchive::MergeFrom(const ChartPresetsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  chart_presets_.MergeFrom(from.chart_presets_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartPresetsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartPresetsArchive::CopyFrom(const ChartPresetsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartPresetsArchive::IsInitialized() const {

  for (int i = 0; i < chart_presets_size(); i++) {
    if (!this->chart_presets(i).IsInitialized()) return false;
  }
  return true;
}

void ChartPresetsArchive::Swap(ChartPresetsArchive* other) {
  if (other != this) {
    chart_presets_.Swap(&other->chart_presets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartPresetsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartPresetsArchive_descriptor_;
  metadata.reflection = ChartPresetsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PropertyValueStorageContainerArchive::kChartStyleFieldNumber;
const int PropertyValueStorageContainerArchive::kChartNonstyleFieldNumber;
const int PropertyValueStorageContainerArchive::kLegendStyleFieldNumber;
const int PropertyValueStorageContainerArchive::kLegendNonstyleFieldNumber;
const int PropertyValueStorageContainerArchive::kValueAxisStylesFieldNumber;
const int PropertyValueStorageContainerArchive::kValueAxisNonstylesFieldNumber;
const int PropertyValueStorageContainerArchive::kCategoryAxisStylesFieldNumber;
const int PropertyValueStorageContainerArchive::kCategoryAxisNonstylesFieldNumber;
const int PropertyValueStorageContainerArchive::kSeriesThemeStylesFieldNumber;
const int PropertyValueStorageContainerArchive::kSeriesPrivateStylesFieldNumber;
const int PropertyValueStorageContainerArchive::kSeriesNonstylesFieldNumber;
const int PropertyValueStorageContainerArchive::kParagraphStylesFieldNumber;
#endif  // !_MSC_VER

PropertyValueStorageContainerArchive::PropertyValueStorageContainerArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PropertyValueStorageContainerArchive::InitAsDefaultInstance() {
  chart_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  chart_nonstyle_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  legend_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  legend_nonstyle_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  value_axis_styles_ = const_cast< ::TSCH::SparseReferenceArrayArchive*>(&::TSCH::SparseReferenceArrayArchive::default_instance());
  value_axis_nonstyles_ = const_cast< ::TSCH::SparseReferenceArrayArchive*>(&::TSCH::SparseReferenceArrayArchive::default_instance());
  category_axis_styles_ = const_cast< ::TSCH::SparseReferenceArrayArchive*>(&::TSCH::SparseReferenceArrayArchive::default_instance());
  category_axis_nonstyles_ = const_cast< ::TSCH::SparseReferenceArrayArchive*>(&::TSCH::SparseReferenceArrayArchive::default_instance());
  series_theme_styles_ = const_cast< ::TSCH::SparseReferenceArrayArchive*>(&::TSCH::SparseReferenceArrayArchive::default_instance());
  series_private_styles_ = const_cast< ::TSCH::SparseReferenceArrayArchive*>(&::TSCH::SparseReferenceArrayArchive::default_instance());
  series_nonstyles_ = const_cast< ::TSCH::SparseReferenceArrayArchive*>(&::TSCH::SparseReferenceArrayArchive::default_instance());
  paragraph_styles_ = const_cast< ::TSCH::SparseReferenceArrayArchive*>(&::TSCH::SparseReferenceArrayArchive::default_instance());
}

PropertyValueStorageContainerArchive::PropertyValueStorageContainerArchive(const PropertyValueStorageContainerArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PropertyValueStorageContainerArchive::SharedCtor() {
  _cached_size_ = 0;
  chart_style_ = NULL;
  chart_nonstyle_ = NULL;
  legend_style_ = NULL;
  legend_nonstyle_ = NULL;
  value_axis_styles_ = NULL;
  value_axis_nonstyles_ = NULL;
  category_axis_styles_ = NULL;
  category_axis_nonstyles_ = NULL;
  series_theme_styles_ = NULL;
  series_private_styles_ = NULL;
  series_nonstyles_ = NULL;
  paragraph_styles_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyValueStorageContainerArchive::~PropertyValueStorageContainerArchive() {
  SharedDtor();
}

void PropertyValueStorageContainerArchive::SharedDtor() {
  if (this != default_instance_) {
    delete chart_style_;
    delete chart_nonstyle_;
    delete legend_style_;
    delete legend_nonstyle_;
    delete value_axis_styles_;
    delete value_axis_nonstyles_;
    delete category_axis_styles_;
    delete category_axis_nonstyles_;
    delete series_theme_styles_;
    delete series_private_styles_;
    delete series_nonstyles_;
    delete paragraph_styles_;
  }
}

void PropertyValueStorageContainerArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyValueStorageContainerArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyValueStorageContainerArchive_descriptor_;
}

const PropertyValueStorageContainerArchive& PropertyValueStorageContainerArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eproto();
  return *default_instance_;
}

PropertyValueStorageContainerArchive* PropertyValueStorageContainerArchive::default_instance_ = NULL;

PropertyValueStorageContainerArchive* PropertyValueStorageContainerArchive::New() const {
  return new PropertyValueStorageContainerArchive;
}

void PropertyValueStorageContainerArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chart_style()) {
      if (chart_style_ != NULL) chart_style_->::TSP::Reference::Clear();
    }
    if (has_chart_nonstyle()) {
      if (chart_nonstyle_ != NULL) chart_nonstyle_->::TSP::Reference::Clear();
    }
    if (has_legend_style()) {
      if (legend_style_ != NULL) legend_style_->::TSP::Reference::Clear();
    }
    if (has_legend_nonstyle()) {
      if (legend_nonstyle_ != NULL) legend_nonstyle_->::TSP::Reference::Clear();
    }
    if (has_value_axis_styles()) {
      if (value_axis_styles_ != NULL) value_axis_styles_->::TSCH::SparseReferenceArrayArchive::Clear();
    }
    if (has_value_axis_nonstyles()) {
      if (value_axis_nonstyles_ != NULL) value_axis_nonstyles_->::TSCH::SparseReferenceArrayArchive::Clear();
    }
    if (has_category_axis_styles()) {
      if (category_axis_styles_ != NULL) category_axis_styles_->::TSCH::SparseReferenceArrayArchive::Clear();
    }
    if (has_category_axis_nonstyles()) {
      if (category_axis_nonstyles_ != NULL) category_axis_nonstyles_->::TSCH::SparseReferenceArrayArchive::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_series_theme_styles()) {
      if (series_theme_styles_ != NULL) series_theme_styles_->::TSCH::SparseReferenceArrayArchive::Clear();
    }
    if (has_series_private_styles()) {
      if (series_private_styles_ != NULL) series_private_styles_->::TSCH::SparseReferenceArrayArchive::Clear();
    }
    if (has_series_nonstyles()) {
      if (series_nonstyles_ != NULL) series_nonstyles_->::TSCH::SparseReferenceArrayArchive::Clear();
    }
    if (has_paragraph_styles()) {
      if (paragraph_styles_ != NULL) paragraph_styles_->::TSCH::SparseReferenceArrayArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropertyValueStorageContainerArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference chart_style = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chart_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chart_nonstyle;
        break;
      }

      // optional .TSP.Reference chart_nonstyle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chart_nonstyle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chart_nonstyle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_legend_style;
        break;
      }

      // optional .TSP.Reference legend_style = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_legend_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_legend_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_legend_nonstyle;
        break;
      }

      // optional .TSP.Reference legend_nonstyle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_legend_nonstyle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_legend_nonstyle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_value_axis_styles;
        break;
      }

      // optional .TSCH.SparseReferenceArrayArchive value_axis_styles = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_axis_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value_axis_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_value_axis_nonstyles;
        break;
      }

      // optional .TSCH.SparseReferenceArrayArchive value_axis_nonstyles = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_axis_nonstyles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value_axis_nonstyles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_category_axis_styles;
        break;
      }

      // optional .TSCH.SparseReferenceArrayArchive category_axis_styles = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_category_axis_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_category_axis_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_category_axis_nonstyles;
        break;
      }

      // optional .TSCH.SparseReferenceArrayArchive category_axis_nonstyles = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_category_axis_nonstyles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_category_axis_nonstyles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_series_theme_styles;
        break;
      }

      // optional .TSCH.SparseReferenceArrayArchive series_theme_styles = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_series_theme_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_series_theme_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_series_private_styles;
        break;
      }

      // optional .TSCH.SparseReferenceArrayArchive series_private_styles = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_series_private_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_series_private_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_series_nonstyles;
        break;
      }

      // optional .TSCH.SparseReferenceArrayArchive series_nonstyles = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_series_nonstyles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_series_nonstyles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_paragraph_styles;
        break;
      }

      // optional .TSCH.SparseReferenceArrayArchive paragraph_styles = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paragraph_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_paragraph_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PropertyValueStorageContainerArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference chart_style = 1;
  if (has_chart_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chart_style(), output);
  }

  // optional .TSP.Reference chart_nonstyle = 2;
  if (has_chart_nonstyle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chart_nonstyle(), output);
  }

  // optional .TSP.Reference legend_style = 3;
  if (has_legend_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->legend_style(), output);
  }

  // optional .TSP.Reference legend_nonstyle = 4;
  if (has_legend_nonstyle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->legend_nonstyle(), output);
  }

  // optional .TSCH.SparseReferenceArrayArchive value_axis_styles = 5;
  if (has_value_axis_styles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->value_axis_styles(), output);
  }

  // optional .TSCH.SparseReferenceArrayArchive value_axis_nonstyles = 6;
  if (has_value_axis_nonstyles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->value_axis_nonstyles(), output);
  }

  // optional .TSCH.SparseReferenceArrayArchive category_axis_styles = 7;
  if (has_category_axis_styles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->category_axis_styles(), output);
  }

  // optional .TSCH.SparseReferenceArrayArchive category_axis_nonstyles = 8;
  if (has_category_axis_nonstyles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->category_axis_nonstyles(), output);
  }

  // optional .TSCH.SparseReferenceArrayArchive series_theme_styles = 9;
  if (has_series_theme_styles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->series_theme_styles(), output);
  }

  // optional .TSCH.SparseReferenceArrayArchive series_private_styles = 10;
  if (has_series_private_styles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->series_private_styles(), output);
  }

  // optional .TSCH.SparseReferenceArrayArchive series_nonstyles = 11;
  if (has_series_nonstyles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->series_nonstyles(), output);
  }

  // optional .TSCH.SparseReferenceArrayArchive paragraph_styles = 12;
  if (has_paragraph_styles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->paragraph_styles(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PropertyValueStorageContainerArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference chart_style = 1;
  if (has_chart_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chart_style(), target);
  }

  // optional .TSP.Reference chart_nonstyle = 2;
  if (has_chart_nonstyle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chart_nonstyle(), target);
  }

  // optional .TSP.Reference legend_style = 3;
  if (has_legend_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->legend_style(), target);
  }

  // optional .TSP.Reference legend_nonstyle = 4;
  if (has_legend_nonstyle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->legend_nonstyle(), target);
  }

  // optional .TSCH.SparseReferenceArrayArchive value_axis_styles = 5;
  if (has_value_axis_styles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->value_axis_styles(), target);
  }

  // optional .TSCH.SparseReferenceArrayArchive value_axis_nonstyles = 6;
  if (has_value_axis_nonstyles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->value_axis_nonstyles(), target);
  }

  // optional .TSCH.SparseReferenceArrayArchive category_axis_styles = 7;
  if (has_category_axis_styles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->category_axis_styles(), target);
  }

  // optional .TSCH.SparseReferenceArrayArchive category_axis_nonstyles = 8;
  if (has_category_axis_nonstyles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->category_axis_nonstyles(), target);
  }

  // optional .TSCH.SparseReferenceArrayArchive series_theme_styles = 9;
  if (has_series_theme_styles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->series_theme_styles(), target);
  }

  // optional .TSCH.SparseReferenceArrayArchive series_private_styles = 10;
  if (has_series_private_styles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->series_private_styles(), target);
  }

  // optional .TSCH.SparseReferenceArrayArchive series_nonstyles = 11;
  if (has_series_nonstyles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->series_nonstyles(), target);
  }

  // optional .TSCH.SparseReferenceArrayArchive paragraph_styles = 12;
  if (has_paragraph_styles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->paragraph_styles(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PropertyValueStorageContainerArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference chart_style = 1;
    if (has_chart_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chart_style());
    }

    // optional .TSP.Reference chart_nonstyle = 2;
    if (has_chart_nonstyle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chart_nonstyle());
    }

    // optional .TSP.Reference legend_style = 3;
    if (has_legend_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->legend_style());
    }

    // optional .TSP.Reference legend_nonstyle = 4;
    if (has_legend_nonstyle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->legend_nonstyle());
    }

    // optional .TSCH.SparseReferenceArrayArchive value_axis_styles = 5;
    if (has_value_axis_styles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value_axis_styles());
    }

    // optional .TSCH.SparseReferenceArrayArchive value_axis_nonstyles = 6;
    if (has_value_axis_nonstyles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value_axis_nonstyles());
    }

    // optional .TSCH.SparseReferenceArrayArchive category_axis_styles = 7;
    if (has_category_axis_styles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->category_axis_styles());
    }

    // optional .TSCH.SparseReferenceArrayArchive category_axis_nonstyles = 8;
    if (has_category_axis_nonstyles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->category_axis_nonstyles());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TSCH.SparseReferenceArrayArchive series_theme_styles = 9;
    if (has_series_theme_styles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->series_theme_styles());
    }

    // optional .TSCH.SparseReferenceArrayArchive series_private_styles = 10;
    if (has_series_private_styles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->series_private_styles());
    }

    // optional .TSCH.SparseReferenceArrayArchive series_nonstyles = 11;
    if (has_series_nonstyles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->series_nonstyles());
    }

    // optional .TSCH.SparseReferenceArrayArchive paragraph_styles = 12;
    if (has_paragraph_styles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->paragraph_styles());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyValueStorageContainerArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropertyValueStorageContainerArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropertyValueStorageContainerArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropertyValueStorageContainerArchive::MergeFrom(const PropertyValueStorageContainerArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chart_style()) {
      mutable_chart_style()->::TSP::Reference::MergeFrom(from.chart_style());
    }
    if (from.has_chart_nonstyle()) {
      mutable_chart_nonstyle()->::TSP::Reference::MergeFrom(from.chart_nonstyle());
    }
    if (from.has_legend_style()) {
      mutable_legend_style()->::TSP::Reference::MergeFrom(from.legend_style());
    }
    if (from.has_legend_nonstyle()) {
      mutable_legend_nonstyle()->::TSP::Reference::MergeFrom(from.legend_nonstyle());
    }
    if (from.has_value_axis_styles()) {
      mutable_value_axis_styles()->::TSCH::SparseReferenceArrayArchive::MergeFrom(from.value_axis_styles());
    }
    if (from.has_value_axis_nonstyles()) {
      mutable_value_axis_nonstyles()->::TSCH::SparseReferenceArrayArchive::MergeFrom(from.value_axis_nonstyles());
    }
    if (from.has_category_axis_styles()) {
      mutable_category_axis_styles()->::TSCH::SparseReferenceArrayArchive::MergeFrom(from.category_axis_styles());
    }
    if (from.has_category_axis_nonstyles()) {
      mutable_category_axis_nonstyles()->::TSCH::SparseReferenceArrayArchive::MergeFrom(from.category_axis_nonstyles());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_series_theme_styles()) {
      mutable_series_theme_styles()->::TSCH::SparseReferenceArrayArchive::MergeFrom(from.series_theme_styles());
    }
    if (from.has_series_private_styles()) {
      mutable_series_private_styles()->::TSCH::SparseReferenceArrayArchive::MergeFrom(from.series_private_styles());
    }
    if (from.has_series_nonstyles()) {
      mutable_series_nonstyles()->::TSCH::SparseReferenceArrayArchive::MergeFrom(from.series_nonstyles());
    }
    if (from.has_paragraph_styles()) {
      mutable_paragraph_styles()->::TSCH::SparseReferenceArrayArchive::MergeFrom(from.paragraph_styles());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropertyValueStorageContainerArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyValueStorageContainerArchive::CopyFrom(const PropertyValueStorageContainerArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyValueStorageContainerArchive::IsInitialized() const {

  if (has_chart_style()) {
    if (!this->chart_style().IsInitialized()) return false;
  }
  if (has_chart_nonstyle()) {
    if (!this->chart_nonstyle().IsInitialized()) return false;
  }
  if (has_legend_style()) {
    if (!this->legend_style().IsInitialized()) return false;
  }
  if (has_legend_nonstyle()) {
    if (!this->legend_nonstyle().IsInitialized()) return false;
  }
  if (has_value_axis_styles()) {
    if (!this->value_axis_styles().IsInitialized()) return false;
  }
  if (has_value_axis_nonstyles()) {
    if (!this->value_axis_nonstyles().IsInitialized()) return false;
  }
  if (has_category_axis_styles()) {
    if (!this->category_axis_styles().IsInitialized()) return false;
  }
  if (has_category_axis_nonstyles()) {
    if (!this->category_axis_nonstyles().IsInitialized()) return false;
  }
  if (has_series_theme_styles()) {
    if (!this->series_theme_styles().IsInitialized()) return false;
  }
  if (has_series_private_styles()) {
    if (!this->series_private_styles().IsInitialized()) return false;
  }
  if (has_series_nonstyles()) {
    if (!this->series_nonstyles().IsInitialized()) return false;
  }
  if (has_paragraph_styles()) {
    if (!this->paragraph_styles().IsInitialized()) return false;
  }
  return true;
}

void PropertyValueStorageContainerArchive::Swap(PropertyValueStorageContainerArchive* other) {
  if (other != this) {
    std::swap(chart_style_, other->chart_style_);
    std::swap(chart_nonstyle_, other->chart_nonstyle_);
    std::swap(legend_style_, other->legend_style_);
    std::swap(legend_nonstyle_, other->legend_nonstyle_);
    std::swap(value_axis_styles_, other->value_axis_styles_);
    std::swap(value_axis_nonstyles_, other->value_axis_nonstyles_);
    std::swap(category_axis_styles_, other->category_axis_styles_);
    std::swap(category_axis_nonstyles_, other->category_axis_nonstyles_);
    std::swap(series_theme_styles_, other->series_theme_styles_);
    std::swap(series_private_styles_, other->series_private_styles_);
    std::swap(series_nonstyles_, other->series_nonstyles_);
    std::swap(paragraph_styles_, other->paragraph_styles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropertyValueStorageContainerArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropertyValueStorageContainerArchive_descriptor_;
  metadata.reflection = PropertyValueStorageContainerArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StylePasteboardDataArchive::kSuperFieldNumber;
const int StylePasteboardDataArchive::kStyleNetworkFieldNumber;
const int StylePasteboardDataArchive::kCopiedFromEntireChartFieldNumber;
#endif  // !_MSC_VER

StylePasteboardDataArchive::StylePasteboardDataArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StylePasteboardDataArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::StyleArchive*>(&::TSS::StyleArchive::default_instance());
  style_network_ = const_cast< ::TSCH::PropertyValueStorageContainerArchive*>(&::TSCH::PropertyValueStorageContainerArchive::default_instance());
}

StylePasteboardDataArchive::StylePasteboardDataArchive(const StylePasteboardDataArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StylePasteboardDataArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  style_network_ = NULL;
  copied_from_entire_chart_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StylePasteboardDataArchive::~StylePasteboardDataArchive() {
  SharedDtor();
}

void StylePasteboardDataArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete style_network_;
  }
}

void StylePasteboardDataArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StylePasteboardDataArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StylePasteboardDataArchive_descriptor_;
}

const StylePasteboardDataArchive& StylePasteboardDataArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eproto();
  return *default_instance_;
}

StylePasteboardDataArchive* StylePasteboardDataArchive::default_instance_ = NULL;

StylePasteboardDataArchive* StylePasteboardDataArchive::New() const {
  return new StylePasteboardDataArchive;
}

void StylePasteboardDataArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::StyleArchive::Clear();
    }
    if (has_style_network()) {
      if (style_network_ != NULL) style_network_->::TSCH::PropertyValueStorageContainerArchive::Clear();
    }
    copied_from_entire_chart_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StylePasteboardDataArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSS.StyleArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_style_network;
        break;
      }

      // optional .TSCH.PropertyValueStorageContainerArchive style_network = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_style_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_style_network()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_copied_from_entire_chart;
        break;
      }

      // optional bool copied_from_entire_chart = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copied_from_entire_chart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &copied_from_entire_chart_)));
          set_has_copied_from_entire_chart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StylePasteboardDataArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSS.StyleArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSCH.PropertyValueStorageContainerArchive style_network = 2;
  if (has_style_network()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->style_network(), output);
  }

  // optional bool copied_from_entire_chart = 3;
  if (has_copied_from_entire_chart()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->copied_from_entire_chart(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StylePasteboardDataArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSS.StyleArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSCH.PropertyValueStorageContainerArchive style_network = 2;
  if (has_style_network()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->style_network(), target);
  }

  // optional bool copied_from_entire_chart = 3;
  if (has_copied_from_entire_chart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->copied_from_entire_chart(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StylePasteboardDataArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSS.StyleArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSCH.PropertyValueStorageContainerArchive style_network = 2;
    if (has_style_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->style_network());
    }

    // optional bool copied_from_entire_chart = 3;
    if (has_copied_from_entire_chart()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StylePasteboardDataArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StylePasteboardDataArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StylePasteboardDataArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StylePasteboardDataArchive::MergeFrom(const StylePasteboardDataArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::StyleArchive::MergeFrom(from.super());
    }
    if (from.has_style_network()) {
      mutable_style_network()->::TSCH::PropertyValueStorageContainerArchive::MergeFrom(from.style_network());
    }
    if (from.has_copied_from_entire_chart()) {
      set_copied_from_entire_chart(from.copied_from_entire_chart());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StylePasteboardDataArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StylePasteboardDataArchive::CopyFrom(const StylePasteboardDataArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StylePasteboardDataArchive::IsInitialized() const {

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_style_network()) {
    if (!this->style_network().IsInitialized()) return false;
  }
  return true;
}

void StylePasteboardDataArchive::Swap(StylePasteboardDataArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(style_network_, other->style_network_);
    std::swap(copied_from_entire_chart_, other->copied_from_entire_chart_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StylePasteboardDataArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StylePasteboardDataArchive_descriptor_;
  metadata.reflection = StylePasteboardDataArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartSelectionPathTypeArchive::kPathTypeFieldNumber;
const int ChartSelectionPathTypeArchive::kPathNameFieldNumber;
#endif  // !_MSC_VER

ChartSelectionPathTypeArchive::ChartSelectionPathTypeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartSelectionPathTypeArchive::InitAsDefaultInstance() {
}

ChartSelectionPathTypeArchive::ChartSelectionPathTypeArchive(const ChartSelectionPathTypeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartSelectionPathTypeArchive::SharedCtor() {
  _cached_size_ = 0;
  path_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartSelectionPathTypeArchive::~ChartSelectionPathTypeArchive() {
  SharedDtor();
}

void ChartSelectionPathTypeArchive::SharedDtor() {
  if (path_type_ != &::google::protobuf::internal::kEmptyString) {
    delete path_type_;
  }
  if (path_name_ != &::google::protobuf::internal::kEmptyString) {
    delete path_name_;
  }
  if (this != default_instance_) {
  }
}

void ChartSelectionPathTypeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartSelectionPathTypeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartSelectionPathTypeArchive_descriptor_;
}

const ChartSelectionPathTypeArchive& ChartSelectionPathTypeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eproto();
  return *default_instance_;
}

ChartSelectionPathTypeArchive* ChartSelectionPathTypeArchive::default_instance_ = NULL;

ChartSelectionPathTypeArchive* ChartSelectionPathTypeArchive::New() const {
  return new ChartSelectionPathTypeArchive;
}

void ChartSelectionPathTypeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path_type()) {
      if (path_type_ != &::google::protobuf::internal::kEmptyString) {
        path_type_->clear();
      }
    }
    if (has_path_name()) {
      if (path_name_ != &::google::protobuf::internal::kEmptyString) {
        path_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartSelectionPathTypeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path_type().data(), this->path_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path_name;
        break;
      }

      // optional string path_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path_name().data(), this->path_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartSelectionPathTypeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string path_type = 1;
  if (has_path_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path_type().data(), this->path_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path_type(), output);
  }

  // optional string path_name = 2;
  if (has_path_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path_name().data(), this->path_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartSelectionPathTypeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string path_type = 1;
  if (has_path_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path_type().data(), this->path_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path_type(), target);
  }

  // optional string path_name = 2;
  if (has_path_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path_name().data(), this->path_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartSelectionPathTypeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string path_type = 1;
    if (has_path_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path_type());
    }

    // optional string path_name = 2;
    if (has_path_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartSelectionPathTypeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartSelectionPathTypeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartSelectionPathTypeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartSelectionPathTypeArchive::MergeFrom(const ChartSelectionPathTypeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path_type()) {
      set_path_type(from.path_type());
    }
    if (from.has_path_name()) {
      set_path_name(from.path_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartSelectionPathTypeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartSelectionPathTypeArchive::CopyFrom(const ChartSelectionPathTypeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSelectionPathTypeArchive::IsInitialized() const {

  return true;
}

void ChartSelectionPathTypeArchive::Swap(ChartSelectionPathTypeArchive* other) {
  if (other != this) {
    std::swap(path_type_, other->path_type_);
    std::swap(path_name_, other->path_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartSelectionPathTypeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartSelectionPathTypeArchive_descriptor_;
  metadata.reflection = ChartSelectionPathTypeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartAxisIDArchive::kAxisTypeFieldNumber;
const int ChartAxisIDArchive::kOrdinalFieldNumber;
#endif  // !_MSC_VER

ChartAxisIDArchive::ChartAxisIDArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartAxisIDArchive::InitAsDefaultInstance() {
}

ChartAxisIDArchive::ChartAxisIDArchive(const ChartAxisIDArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartAxisIDArchive::SharedCtor() {
  _cached_size_ = 0;
  axis_type_ = 0;
  ordinal_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartAxisIDArchive::~ChartAxisIDArchive() {
  SharedDtor();
}

void ChartAxisIDArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChartAxisIDArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartAxisIDArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartAxisIDArchive_descriptor_;
}

const ChartAxisIDArchive& ChartAxisIDArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eproto();
  return *default_instance_;
}

ChartAxisIDArchive* ChartAxisIDArchive::default_instance_ = NULL;

ChartAxisIDArchive* ChartAxisIDArchive::New() const {
  return new ChartAxisIDArchive;
}

void ChartAxisIDArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    axis_type_ = 0;
    ordinal_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartAxisIDArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSCH.AxisType axis_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSCH::AxisType_IsValid(value)) {
            set_axis_type(static_cast< ::TSCH::AxisType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ordinal;
        break;
      }

      // optional uint32 ordinal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ordinal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ordinal_)));
          set_has_ordinal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartAxisIDArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSCH.AxisType axis_type = 1;
  if (has_axis_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->axis_type(), output);
  }

  // optional uint32 ordinal = 2;
  if (has_ordinal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ordinal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartAxisIDArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSCH.AxisType axis_type = 1;
  if (has_axis_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->axis_type(), target);
  }

  // optional uint32 ordinal = 2;
  if (has_ordinal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ordinal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartAxisIDArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSCH.AxisType axis_type = 1;
    if (has_axis_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->axis_type());
    }

    // optional uint32 ordinal = 2;
    if (has_ordinal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ordinal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartAxisIDArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartAxisIDArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartAxisIDArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartAxisIDArchive::MergeFrom(const ChartAxisIDArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_axis_type()) {
      set_axis_type(from.axis_type());
    }
    if (from.has_ordinal()) {
      set_ordinal(from.ordinal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartAxisIDArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartAxisIDArchive::CopyFrom(const ChartAxisIDArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartAxisIDArchive::IsInitialized() const {

  return true;
}

void ChartAxisIDArchive::Swap(ChartAxisIDArchive* other) {
  if (other != this) {
    std::swap(axis_type_, other->axis_type_);
    std::swap(ordinal_, other->ordinal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartAxisIDArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartAxisIDArchive_descriptor_;
  metadata.reflection = ChartAxisIDArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartSelectionPathArgumentArchive::kNumberFieldNumber;
const int ChartSelectionPathArgumentArchive::kAxisIdFieldNumber;
#endif  // !_MSC_VER

ChartSelectionPathArgumentArchive::ChartSelectionPathArgumentArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartSelectionPathArgumentArchive::InitAsDefaultInstance() {
  axis_id_ = const_cast< ::TSCH::ChartAxisIDArchive*>(&::TSCH::ChartAxisIDArchive::default_instance());
}

ChartSelectionPathArgumentArchive::ChartSelectionPathArgumentArchive(const ChartSelectionPathArgumentArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartSelectionPathArgumentArchive::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0u;
  axis_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartSelectionPathArgumentArchive::~ChartSelectionPathArgumentArchive() {
  SharedDtor();
}

void ChartSelectionPathArgumentArchive::SharedDtor() {
  if (this != default_instance_) {
    delete axis_id_;
  }
}

void ChartSelectionPathArgumentArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartSelectionPathArgumentArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartSelectionPathArgumentArchive_descriptor_;
}

const ChartSelectionPathArgumentArchive& ChartSelectionPathArgumentArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eproto();
  return *default_instance_;
}

ChartSelectionPathArgumentArchive* ChartSelectionPathArgumentArchive::default_instance_ = NULL;

ChartSelectionPathArgumentArchive* ChartSelectionPathArgumentArchive::New() const {
  return new ChartSelectionPathArgumentArchive;
}

void ChartSelectionPathArgumentArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0u;
    if (has_axis_id()) {
      if (axis_id_ != NULL) axis_id_->::TSCH::ChartAxisIDArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartSelectionPathArgumentArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_axis_id;
        break;
      }

      // optional .TSCH.ChartAxisIDArchive axis_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_axis_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_axis_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartSelectionPathArgumentArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->number(), output);
  }

  // optional .TSCH.ChartAxisIDArchive axis_id = 2;
  if (has_axis_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->axis_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartSelectionPathArgumentArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->number(), target);
  }

  // optional .TSCH.ChartAxisIDArchive axis_id = 2;
  if (has_axis_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->axis_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartSelectionPathArgumentArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }

    // optional .TSCH.ChartAxisIDArchive axis_id = 2;
    if (has_axis_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->axis_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartSelectionPathArgumentArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartSelectionPathArgumentArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartSelectionPathArgumentArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartSelectionPathArgumentArchive::MergeFrom(const ChartSelectionPathArgumentArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_axis_id()) {
      mutable_axis_id()->::TSCH::ChartAxisIDArchive::MergeFrom(from.axis_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartSelectionPathArgumentArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartSelectionPathArgumentArchive::CopyFrom(const ChartSelectionPathArgumentArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSelectionPathArgumentArchive::IsInitialized() const {

  return true;
}

void ChartSelectionPathArgumentArchive::Swap(ChartSelectionPathArgumentArchive* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(axis_id_, other->axis_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartSelectionPathArgumentArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartSelectionPathArgumentArchive_descriptor_;
  metadata.reflection = ChartSelectionPathArgumentArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartSelectionPathArchive::kPathTypeFieldNumber;
const int ChartSelectionPathArchive::kSubSelectionFieldNumber;
const int ChartSelectionPathArchive::kArgumentsFieldNumber;
#endif  // !_MSC_VER

ChartSelectionPathArchive::ChartSelectionPathArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartSelectionPathArchive::InitAsDefaultInstance() {
  path_type_ = const_cast< ::TSCH::ChartSelectionPathTypeArchive*>(&::TSCH::ChartSelectionPathTypeArchive::default_instance());
  sub_selection_ = const_cast< ::TSCH::ChartSelectionPathArchive*>(&::TSCH::ChartSelectionPathArchive::default_instance());
}

ChartSelectionPathArchive::ChartSelectionPathArchive(const ChartSelectionPathArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartSelectionPathArchive::SharedCtor() {
  _cached_size_ = 0;
  path_type_ = NULL;
  sub_selection_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartSelectionPathArchive::~ChartSelectionPathArchive() {
  SharedDtor();
}

void ChartSelectionPathArchive::SharedDtor() {
  if (this != default_instance_) {
    delete path_type_;
    delete sub_selection_;
  }
}

void ChartSelectionPathArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartSelectionPathArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartSelectionPathArchive_descriptor_;
}

const ChartSelectionPathArchive& ChartSelectionPathArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eproto();
  return *default_instance_;
}

ChartSelectionPathArchive* ChartSelectionPathArchive::default_instance_ = NULL;

ChartSelectionPathArchive* ChartSelectionPathArchive::New() const {
  return new ChartSelectionPathArchive;
}

void ChartSelectionPathArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path_type()) {
      if (path_type_ != NULL) path_type_->::TSCH::ChartSelectionPathTypeArchive::Clear();
    }
    if (has_sub_selection()) {
      if (sub_selection_ != NULL) sub_selection_->::TSCH::ChartSelectionPathArchive::Clear();
    }
  }
  arguments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartSelectionPathArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSCH.ChartSelectionPathTypeArchive path_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sub_selection;
        break;
      }

      // optional .TSCH.ChartSelectionPathArchive sub_selection = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sub_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sub_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_arguments;
        break;
      }

      // repeated .TSCH.ChartSelectionPathArgumentArchive arguments = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arguments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_arguments;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartSelectionPathArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSCH.ChartSelectionPathTypeArchive path_type = 1;
  if (has_path_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->path_type(), output);
  }

  // optional .TSCH.ChartSelectionPathArchive sub_selection = 2;
  if (has_sub_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sub_selection(), output);
  }

  // repeated .TSCH.ChartSelectionPathArgumentArchive arguments = 3;
  for (int i = 0; i < this->arguments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arguments(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartSelectionPathArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSCH.ChartSelectionPathTypeArchive path_type = 1;
  if (has_path_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->path_type(), target);
  }

  // optional .TSCH.ChartSelectionPathArchive sub_selection = 2;
  if (has_sub_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sub_selection(), target);
  }

  // repeated .TSCH.ChartSelectionPathArgumentArchive arguments = 3;
  for (int i = 0; i < this->arguments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->arguments(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartSelectionPathArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSCH.ChartSelectionPathTypeArchive path_type = 1;
    if (has_path_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->path_type());
    }

    // optional .TSCH.ChartSelectionPathArchive sub_selection = 2;
    if (has_sub_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sub_selection());
    }

  }
  // repeated .TSCH.ChartSelectionPathArgumentArchive arguments = 3;
  total_size += 1 * this->arguments_size();
  for (int i = 0; i < this->arguments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arguments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartSelectionPathArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartSelectionPathArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartSelectionPathArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartSelectionPathArchive::MergeFrom(const ChartSelectionPathArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  arguments_.MergeFrom(from.arguments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path_type()) {
      mutable_path_type()->::TSCH::ChartSelectionPathTypeArchive::MergeFrom(from.path_type());
    }
    if (from.has_sub_selection()) {
      mutable_sub_selection()->::TSCH::ChartSelectionPathArchive::MergeFrom(from.sub_selection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartSelectionPathArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartSelectionPathArchive::CopyFrom(const ChartSelectionPathArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSelectionPathArchive::IsInitialized() const {

  return true;
}

void ChartSelectionPathArchive::Swap(ChartSelectionPathArchive* other) {
  if (other != this) {
    std::swap(path_type_, other->path_type_);
    std::swap(sub_selection_, other->sub_selection_);
    arguments_.Swap(&other->arguments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartSelectionPathArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartSelectionPathArchive_descriptor_;
  metadata.reflection = ChartSelectionPathArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartSelectionArchive::kChartFieldNumber;
const int ChartSelectionArchive::kPathsFieldNumber;
#endif  // !_MSC_VER

ChartSelectionArchive::ChartSelectionArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartSelectionArchive::InitAsDefaultInstance() {
  chart_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ChartSelectionArchive::ChartSelectionArchive(const ChartSelectionArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartSelectionArchive::SharedCtor() {
  _cached_size_ = 0;
  chart_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartSelectionArchive::~ChartSelectionArchive() {
  SharedDtor();
}

void ChartSelectionArchive::SharedDtor() {
  if (this != default_instance_) {
    delete chart_;
  }
}

void ChartSelectionArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartSelectionArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartSelectionArchive_descriptor_;
}

const ChartSelectionArchive& ChartSelectionArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eproto();
  return *default_instance_;
}

ChartSelectionArchive* ChartSelectionArchive::default_instance_ = NULL;

ChartSelectionArchive* ChartSelectionArchive::New() const {
  return new ChartSelectionArchive;
}

void ChartSelectionArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chart()) {
      if (chart_ != NULL) chart_->::TSP::Reference::Clear();
    }
  }
  paths_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartSelectionArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference chart = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chart()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_paths;
        break;
      }

      // repeated .TSCH.ChartSelectionPathArchive paths = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paths:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_paths()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_paths;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartSelectionArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference chart = 1;
  if (has_chart()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chart(), output);
  }

  // repeated .TSCH.ChartSelectionPathArchive paths = 2;
  for (int i = 0; i < this->paths_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->paths(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartSelectionArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference chart = 1;
  if (has_chart()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chart(), target);
  }

  // repeated .TSCH.ChartSelectionPathArchive paths = 2;
  for (int i = 0; i < this->paths_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->paths(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartSelectionArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference chart = 1;
    if (has_chart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chart());
    }

  }
  // repeated .TSCH.ChartSelectionPathArchive paths = 2;
  total_size += 1 * this->paths_size();
  for (int i = 0; i < this->paths_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->paths(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartSelectionArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartSelectionArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartSelectionArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartSelectionArchive::MergeFrom(const ChartSelectionArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  paths_.MergeFrom(from.paths_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chart()) {
      mutable_chart()->::TSP::Reference::MergeFrom(from.chart());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartSelectionArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartSelectionArchive::CopyFrom(const ChartSelectionArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSelectionArchive::IsInitialized() const {

  if (has_chart()) {
    if (!this->chart().IsInitialized()) return false;
  }
  return true;
}

void ChartSelectionArchive::Swap(ChartSelectionArchive* other) {
  if (other != this) {
    std::swap(chart_, other->chart_);
    paths_.Swap(&other->paths_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartSelectionArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartSelectionArchive_descriptor_;
  metadata.reflection = ChartSelectionArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartUIState::kChartFieldNumber;
const int ChartUIState::kCdeLastRowSelectedFieldNumber;
const int ChartUIState::kCdeLastColSelectedFieldNumber;
const int ChartUIState::kCdeLastRowCountFieldNumber;
const int ChartUIState::kCdeLastColCountFieldNumber;
const int ChartUIState::kCdeUseFullKeyboardFieldNumber;
#endif  // !_MSC_VER

ChartUIState::ChartUIState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartUIState::InitAsDefaultInstance() {
  chart_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ChartUIState::ChartUIState(const ChartUIState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartUIState::SharedCtor() {
  _cached_size_ = 0;
  chart_ = NULL;
  cde_last_row_selected_ = 0;
  cde_last_col_selected_ = 0;
  cde_last_row_count_ = 0;
  cde_last_col_count_ = 0;
  cde_use_full_keyboard_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartUIState::~ChartUIState() {
  SharedDtor();
}

void ChartUIState::SharedDtor() {
  if (this != default_instance_) {
    delete chart_;
  }
}

void ChartUIState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartUIState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartUIState_descriptor_;
}

const ChartUIState& ChartUIState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eproto();
  return *default_instance_;
}

ChartUIState* ChartUIState::default_instance_ = NULL;

ChartUIState* ChartUIState::New() const {
  return new ChartUIState;
}

void ChartUIState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chart()) {
      if (chart_ != NULL) chart_->::TSP::Reference::Clear();
    }
    cde_last_row_selected_ = 0;
    cde_last_col_selected_ = 0;
    cde_last_row_count_ = 0;
    cde_last_col_count_ = 0;
    cde_use_full_keyboard_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartUIState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference chart = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chart()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cde_last_row_selected;
        break;
      }

      // optional int32 cde_last_row_selected = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cde_last_row_selected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cde_last_row_selected_)));
          set_has_cde_last_row_selected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cde_last_col_selected;
        break;
      }

      // optional int32 cde_last_col_selected = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cde_last_col_selected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cde_last_col_selected_)));
          set_has_cde_last_col_selected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cde_last_row_count;
        break;
      }

      // optional int32 cde_last_row_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cde_last_row_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cde_last_row_count_)));
          set_has_cde_last_row_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cde_last_col_count;
        break;
      }

      // optional int32 cde_last_col_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cde_last_col_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cde_last_col_count_)));
          set_has_cde_last_col_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cde_use_full_keyboard;
        break;
      }

      // optional bool cde_use_full_keyboard = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cde_use_full_keyboard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cde_use_full_keyboard_)));
          set_has_cde_use_full_keyboard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartUIState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference chart = 1;
  if (has_chart()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chart(), output);
  }

  // optional int32 cde_last_row_selected = 2;
  if (has_cde_last_row_selected()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cde_last_row_selected(), output);
  }

  // optional int32 cde_last_col_selected = 3;
  if (has_cde_last_col_selected()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cde_last_col_selected(), output);
  }

  // optional int32 cde_last_row_count = 4;
  if (has_cde_last_row_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cde_last_row_count(), output);
  }

  // optional int32 cde_last_col_count = 5;
  if (has_cde_last_col_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cde_last_col_count(), output);
  }

  // optional bool cde_use_full_keyboard = 6;
  if (has_cde_use_full_keyboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->cde_use_full_keyboard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartUIState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference chart = 1;
  if (has_chart()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chart(), target);
  }

  // optional int32 cde_last_row_selected = 2;
  if (has_cde_last_row_selected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cde_last_row_selected(), target);
  }

  // optional int32 cde_last_col_selected = 3;
  if (has_cde_last_col_selected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cde_last_col_selected(), target);
  }

  // optional int32 cde_last_row_count = 4;
  if (has_cde_last_row_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cde_last_row_count(), target);
  }

  // optional int32 cde_last_col_count = 5;
  if (has_cde_last_col_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cde_last_col_count(), target);
  }

  // optional bool cde_use_full_keyboard = 6;
  if (has_cde_use_full_keyboard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->cde_use_full_keyboard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartUIState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference chart = 1;
    if (has_chart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chart());
    }

    // optional int32 cde_last_row_selected = 2;
    if (has_cde_last_row_selected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cde_last_row_selected());
    }

    // optional int32 cde_last_col_selected = 3;
    if (has_cde_last_col_selected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cde_last_col_selected());
    }

    // optional int32 cde_last_row_count = 4;
    if (has_cde_last_row_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cde_last_row_count());
    }

    // optional int32 cde_last_col_count = 5;
    if (has_cde_last_col_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cde_last_col_count());
    }

    // optional bool cde_use_full_keyboard = 6;
    if (has_cde_use_full_keyboard()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartUIState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartUIState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartUIState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartUIState::MergeFrom(const ChartUIState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chart()) {
      mutable_chart()->::TSP::Reference::MergeFrom(from.chart());
    }
    if (from.has_cde_last_row_selected()) {
      set_cde_last_row_selected(from.cde_last_row_selected());
    }
    if (from.has_cde_last_col_selected()) {
      set_cde_last_col_selected(from.cde_last_col_selected());
    }
    if (from.has_cde_last_row_count()) {
      set_cde_last_row_count(from.cde_last_row_count());
    }
    if (from.has_cde_last_col_count()) {
      set_cde_last_col_count(from.cde_last_col_count());
    }
    if (from.has_cde_use_full_keyboard()) {
      set_cde_use_full_keyboard(from.cde_use_full_keyboard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartUIState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartUIState::CopyFrom(const ChartUIState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartUIState::IsInitialized() const {

  if (has_chart()) {
    if (!this->chart().IsInitialized()) return false;
  }
  return true;
}

void ChartUIState::Swap(ChartUIState* other) {
  if (other != this) {
    std::swap(chart_, other->chart_);
    std::swap(cde_last_row_selected_, other->cde_last_row_selected_);
    std::swap(cde_last_col_selected_, other->cde_last_col_selected_);
    std::swap(cde_last_row_count_, other->cde_last_row_count_);
    std::swap(cde_last_col_count_, other->cde_last_col_count_);
    std::swap(cde_use_full_keyboard_, other->cde_use_full_keyboard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartUIState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartUIState_descriptor_;
  metadata.reflection = ChartUIState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

const ::std::string ChartFormatStructExtensions_prefix_default("");
#ifndef _MSC_VER
const int ChartFormatStructExtensions::kPrefixFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::TSK::FormatStructArchive,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  ChartFormatStructExtensions::prefix(kPrefixFieldNumber, ChartFormatStructExtensions_prefix_default);
const ::std::string ChartFormatStructExtensions_suffix_default("");
#ifndef _MSC_VER
const int ChartFormatStructExtensions::kSuffixFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::TSK::FormatStructArchive,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  ChartFormatStructExtensions::suffix(kSuffixFieldNumber, ChartFormatStructExtensions_suffix_default);
ChartFormatStructExtensions::ChartFormatStructExtensions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartFormatStructExtensions::InitAsDefaultInstance() {
}

ChartFormatStructExtensions::ChartFormatStructExtensions(const ChartFormatStructExtensions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartFormatStructExtensions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartFormatStructExtensions::~ChartFormatStructExtensions() {
  SharedDtor();
}

void ChartFormatStructExtensions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChartFormatStructExtensions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartFormatStructExtensions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartFormatStructExtensions_descriptor_;
}

const ChartFormatStructExtensions& ChartFormatStructExtensions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCHArchives_2eproto();
  return *default_instance_;
}

ChartFormatStructExtensions* ChartFormatStructExtensions::default_instance_ = NULL;

ChartFormatStructExtensions* ChartFormatStructExtensions::New() const {
  return new ChartFormatStructExtensions;
}

void ChartFormatStructExtensions::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartFormatStructExtensions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ChartFormatStructExtensions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartFormatStructExtensions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartFormatStructExtensions::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartFormatStructExtensions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartFormatStructExtensions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartFormatStructExtensions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartFormatStructExtensions::MergeFrom(const ChartFormatStructExtensions& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartFormatStructExtensions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartFormatStructExtensions::CopyFrom(const ChartFormatStructExtensions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartFormatStructExtensions::IsInitialized() const {

  return true;
}

void ChartFormatStructExtensions::Swap(ChartFormatStructExtensions* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartFormatStructExtensions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartFormatStructExtensions_descriptor_;
  metadata.reflection = ChartFormatStructExtensions_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  scene3d_settings_constant_depth(kScene3DSettingsConstantDepthFieldNumber, false);
const ::std::string last_applied_fill_set_lookup_string_default("");
::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  last_applied_fill_set_lookup_string(kLastAppliedFillSetLookupStringFieldNumber, last_applied_fill_set_lookup_string_default);
::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartSeriesNonStyleArchive,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  series_supports_custom_number_format(kSeriesSupportsCustomNumberFormatFieldNumber, false);
::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartSeriesNonStyleArchive,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  series_supports_custom_date_format(kSeriesSupportsCustomDateFormatFieldNumber, false);
::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartAxisNonStyleArchive,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  axis_supports_custom_number_format(kAxisSupportsCustomNumberFormatFieldNumber, false);
::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartAxisNonStyleArchive,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  axis_supports_custom_date_format(kAxisSupportsCustomDateFormatFieldNumber, false);

// @@protoc_insertion_point(namespace_scope)

}  // namespace TSCH

// @@protoc_insertion_point(global_scope)
