// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSPMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TSPMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TSP {

namespace {

const ::google::protobuf::Descriptor* Reference_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reference_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataReference_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataReference_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* Size_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Size_reflection_ = NULL;
const ::google::protobuf::Descriptor* Range_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Range_reflection_ = NULL;
const ::google::protobuf::Descriptor* Date_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Date_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndexSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* Color_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Color_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Color_ColorModel_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Path_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Path_reflection_ = NULL;
const ::google::protobuf::Descriptor* Path_Element_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Path_Element_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Path_ElementType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReferenceDictionary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReferenceDictionary_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReferenceDictionary_Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReferenceDictionary_Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* UUID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UUID_reflection_ = NULL;
const ::google::protobuf::Descriptor* UUIDPath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UUIDPath_reflection_ = NULL;
const ::google::protobuf::Descriptor* PasteboardObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PasteboardObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectContainer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectContainer_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TSPMessages_2eproto() {
  protobuf_AddDesc_TSPMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TSPMessages.proto");
  GOOGLE_CHECK(file != NULL);
  Reference_descriptor_ = file->message_type(0);
  static const int Reference_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference, identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference, deprecated_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference, deprecated_is_external_),
  };
  Reference_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reference_descriptor_,
      Reference::default_instance_,
      Reference_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reference, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reference));
  DataReference_descriptor_ = file->message_type(1);
  static const int DataReference_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReference, identifier_),
  };
  DataReference_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataReference_descriptor_,
      DataReference::default_instance_,
      DataReference_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReference, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReference, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataReference));
  Point_descriptor_ = file->message_type(2);
  static const int Point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
  };
  Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point));
  Size_descriptor_ = file->message_type(3);
  static const int Size_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Size, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Size, height_),
  };
  Size_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Size_descriptor_,
      Size::default_instance_,
      Size_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Size, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Size, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Size));
  Range_descriptor_ = file->message_type(4);
  static const int Range_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, length_),
  };
  Range_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Range_descriptor_,
      Range::default_instance_,
      Range_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Range));
  Date_descriptor_ = file->message_type(5);
  static const int Date_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Date, seconds_),
  };
  Date_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Date_descriptor_,
      Date::default_instance_,
      Date_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Date, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Date, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Date));
  IndexSet_descriptor_ = file->message_type(6);
  static const int IndexSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexSet, ranges_),
  };
  IndexSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndexSet_descriptor_,
      IndexSet::default_instance_,
      IndexSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndexSet));
  Color_descriptor_ = file->message_type(7);
  static const int Color_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, w_),
  };
  Color_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Color_descriptor_,
      Color::default_instance_,
      Color_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Color));
  Color_ColorModel_descriptor_ = Color_descriptor_->enum_type(0);
  Path_descriptor_ = file->message_type(8);
  static const int Path_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, elements_),
  };
  Path_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Path_descriptor_,
      Path::default_instance_,
      Path_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Path));
  Path_Element_descriptor_ = Path_descriptor_->nested_type(0);
  static const int Path_Element_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path_Element, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path_Element, points_),
  };
  Path_Element_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Path_Element_descriptor_,
      Path_Element::default_instance_,
      Path_Element_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path_Element, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path_Element, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Path_Element));
  Path_ElementType_descriptor_ = Path_descriptor_->enum_type(0);
  ReferenceDictionary_descriptor_ = file->message_type(9);
  static const int ReferenceDictionary_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceDictionary, entries_),
  };
  ReferenceDictionary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReferenceDictionary_descriptor_,
      ReferenceDictionary::default_instance_,
      ReferenceDictionary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceDictionary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceDictionary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReferenceDictionary));
  ReferenceDictionary_Entry_descriptor_ = ReferenceDictionary_descriptor_->nested_type(0);
  static const int ReferenceDictionary_Entry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceDictionary_Entry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceDictionary_Entry, value_),
  };
  ReferenceDictionary_Entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReferenceDictionary_Entry_descriptor_,
      ReferenceDictionary_Entry::default_instance_,
      ReferenceDictionary_Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceDictionary_Entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceDictionary_Entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReferenceDictionary_Entry));
  UUID_descriptor_ = file->message_type(10);
  static const int UUID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UUID, lower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UUID, upper_),
  };
  UUID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UUID_descriptor_,
      UUID::default_instance_,
      UUID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UUID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UUID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UUID));
  UUIDPath_descriptor_ = file->message_type(11);
  static const int UUIDPath_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UUIDPath, uuids_),
  };
  UUIDPath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UUIDPath_descriptor_,
      UUIDPath::default_instance_,
      UUIDPath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UUIDPath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UUIDPath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UUIDPath));
  PasteboardObject_descriptor_ = file->message_type(12);
  static const int PasteboardObject_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteboardObject, stylesheet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteboardObject, drawables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteboardObject, styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteboardObject, theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteboardObject, wp_storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteboardObject, guide_storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteboardObject, app_native_object_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteboardObject, is_text_primary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteboardObject, is_smart_),
  };
  PasteboardObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PasteboardObject_descriptor_,
      PasteboardObject::default_instance_,
      PasteboardObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteboardObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PasteboardObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PasteboardObject));
  ObjectContainer_descriptor_ = file->message_type(13);
  static const int ObjectContainer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectContainer, identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectContainer, objects_),
  };
  ObjectContainer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectContainer_descriptor_,
      ObjectContainer::default_instance_,
      ObjectContainer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectContainer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectContainer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectContainer));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TSPMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reference_descriptor_, &Reference::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataReference_descriptor_, &DataReference::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Size_descriptor_, &Size::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Range_descriptor_, &Range::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Date_descriptor_, &Date::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndexSet_descriptor_, &IndexSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Color_descriptor_, &Color::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Path_descriptor_, &Path::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Path_Element_descriptor_, &Path_Element::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReferenceDictionary_descriptor_, &ReferenceDictionary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReferenceDictionary_Entry_descriptor_, &ReferenceDictionary_Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UUID_descriptor_, &UUID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UUIDPath_descriptor_, &UUIDPath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PasteboardObject_descriptor_, &PasteboardObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectContainer_descriptor_, &ObjectContainer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TSPMessages_2eproto() {
  delete Reference::default_instance_;
  delete Reference_reflection_;
  delete DataReference::default_instance_;
  delete DataReference_reflection_;
  delete Point::default_instance_;
  delete Point_reflection_;
  delete Size::default_instance_;
  delete Size_reflection_;
  delete Range::default_instance_;
  delete Range_reflection_;
  delete Date::default_instance_;
  delete Date_reflection_;
  delete IndexSet::default_instance_;
  delete IndexSet_reflection_;
  delete Color::default_instance_;
  delete Color_reflection_;
  delete Path::default_instance_;
  delete Path_reflection_;
  delete Path_Element::default_instance_;
  delete Path_Element_reflection_;
  delete ReferenceDictionary::default_instance_;
  delete ReferenceDictionary_reflection_;
  delete ReferenceDictionary_Entry::default_instance_;
  delete ReferenceDictionary_Entry_reflection_;
  delete UUID::default_instance_;
  delete UUID_reflection_;
  delete UUIDPath::default_instance_;
  delete UUIDPath_reflection_;
  delete PasteboardObject::default_instance_;
  delete PasteboardObject_reflection_;
  delete ObjectContainer::default_instance_;
  delete ObjectContainer_reflection_;
}

void protobuf_AddDesc_TSPMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021TSPMessages.proto\022\003TSP\"X\n\tReference\022\022\n"
    "\nidentifier\030\001 \002(\004\022\027\n\017deprecated_type\030\002 \001"
    "(\005\022\036\n\026deprecated_is_external\030\003 \001(\010\"#\n\rDa"
    "taReference\022\022\n\nidentifier\030\001 \002(\004\"\035\n\005Point"
    "\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\"%\n\004Size\022\r\n\005width\030"
    "\001 \002(\002\022\016\n\006height\030\002 \002(\002\")\n\005Range\022\020\n\010locati"
    "on\030\001 \002(\r\022\016\n\006length\030\002 \002(\r\"\027\n\004Date\022\017\n\007seco"
    "nds\030\001 \002(\001\"&\n\010IndexSet\022\032\n\006ranges\030\001 \003(\0132\n."
    "TSP.Range\"\277\001\n\005Color\022$\n\005model\030\001 \002(\0162\025.TSP"
    ".Color.ColorModel\022\t\n\001r\030\003 \001(\002\022\t\n\001g\030\004 \001(\002\022"
    "\t\n\001b\030\005 \001(\002\022\014\n\001a\030\006 \001(\002:\0011\022\t\n\001c\030\007 \001(\002\022\t\n\001m"
    "\030\010 \001(\002\022\t\n\001y\030\t \001(\002\022\t\n\001k\030\n \001(\002\022\t\n\001w\030\013 \001(\002\""
    "*\n\nColorModel\022\007\n\003rgb\020\001\022\010\n\004cmyk\020\002\022\t\n\005whit"
    "e\020\003\"\316\001\n\004Path\022#\n\010elements\030\001 \003(\0132\021.TSP.Pat"
    "h.Element\032J\n\007Element\022#\n\004type\030\001 \002(\0162\025.TSP"
    ".Path.ElementType\022\032\n\006points\030\002 \003(\0132\n.TSP."
    "Point\"U\n\013ElementType\022\n\n\006moveTo\020\001\022\n\n\006line"
    "To\020\002\022\017\n\013quadCurveTo\020\003\022\013\n\007curveTo\020\004\022\020\n\014cl"
    "oseSubpath\020\005\"\213\001\n\023ReferenceDictionary\022/\n\007"
    "entries\030\001 \003(\0132\036.TSP.ReferenceDictionary."
    "Entry\032C\n\005Entry\022\033\n\003key\030\001 \002(\0132\016.TSP.Refere"
    "nce\022\035\n\005value\030\002 \002(\0132\016.TSP.Reference\"$\n\004UU"
    "ID\022\r\n\005lower\030\001 \002(\004\022\r\n\005upper\030\002 \002(\004\"$\n\010UUID"
    "Path\022\030\n\005uuids\030\001 \003(\0132\t.TSP.UUID\"\307\002\n\020Paste"
    "boardObject\022\"\n\nstylesheet\030\001 \001(\0132\016.TSP.Re"
    "ference\022!\n\tdrawables\030\002 \003(\0132\016.TSP.Referen"
    "ce\022\036\n\006styles\030\003 \003(\0132\016.TSP.Reference\022\035\n\005th"
    "eme\030\004 \001(\0132\016.TSP.Reference\022\"\n\nwp_storage\030"
    "\005 \001(\0132\016.TSP.Reference\022%\n\rguide_storage\030\t"
    " \001(\0132\016.TSP.Reference\022)\n\021app_native_objec"
    "t\030\006 \001(\0132\016.TSP.Reference\022\036\n\017is_text_prima"
    "ry\030\007 \001(\010:\005false\022\027\n\010is_smart\030\010 \001(\010:\005false"
    "\"F\n\017ObjectContainer\022\022\n\nidentifier\030\001 \001(\r\022"
    "\037\n\007objects\030\002 \003(\0132\016.TSP.Reference", 1352);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TSPMessages.proto", &protobuf_RegisterTypes);
  Reference::default_instance_ = new Reference();
  DataReference::default_instance_ = new DataReference();
  Point::default_instance_ = new Point();
  Size::default_instance_ = new Size();
  Range::default_instance_ = new Range();
  Date::default_instance_ = new Date();
  IndexSet::default_instance_ = new IndexSet();
  Color::default_instance_ = new Color();
  Path::default_instance_ = new Path();
  Path_Element::default_instance_ = new Path_Element();
  ReferenceDictionary::default_instance_ = new ReferenceDictionary();
  ReferenceDictionary_Entry::default_instance_ = new ReferenceDictionary_Entry();
  UUID::default_instance_ = new UUID();
  UUIDPath::default_instance_ = new UUIDPath();
  PasteboardObject::default_instance_ = new PasteboardObject();
  ObjectContainer::default_instance_ = new ObjectContainer();
  Reference::default_instance_->InitAsDefaultInstance();
  DataReference::default_instance_->InitAsDefaultInstance();
  Point::default_instance_->InitAsDefaultInstance();
  Size::default_instance_->InitAsDefaultInstance();
  Range::default_instance_->InitAsDefaultInstance();
  Date::default_instance_->InitAsDefaultInstance();
  IndexSet::default_instance_->InitAsDefaultInstance();
  Color::default_instance_->InitAsDefaultInstance();
  Path::default_instance_->InitAsDefaultInstance();
  Path_Element::default_instance_->InitAsDefaultInstance();
  ReferenceDictionary::default_instance_->InitAsDefaultInstance();
  ReferenceDictionary_Entry::default_instance_->InitAsDefaultInstance();
  UUID::default_instance_->InitAsDefaultInstance();
  UUIDPath::default_instance_->InitAsDefaultInstance();
  PasteboardObject::default_instance_->InitAsDefaultInstance();
  ObjectContainer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TSPMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TSPMessages_2eproto {
  StaticDescriptorInitializer_TSPMessages_2eproto() {
    protobuf_AddDesc_TSPMessages_2eproto();
  }
} static_descriptor_initializer_TSPMessages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Reference::kIdentifierFieldNumber;
const int Reference::kDeprecatedTypeFieldNumber;
const int Reference::kDeprecatedIsExternalFieldNumber;
#endif  // !_MSC_VER

Reference::Reference()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Reference::InitAsDefaultInstance() {
}

Reference::Reference(const Reference& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Reference::SharedCtor() {
  _cached_size_ = 0;
  identifier_ = GOOGLE_ULONGLONG(0);
  deprecated_type_ = 0;
  deprecated_is_external_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reference::~Reference() {
  SharedDtor();
}

void Reference::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Reference::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reference::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reference_descriptor_;
}

const Reference& Reference::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSPMessages_2eproto();
  return *default_instance_;
}

Reference* Reference::default_instance_ = NULL;

Reference* Reference::New() const {
  return new Reference;
}

void Reference::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    identifier_ = GOOGLE_ULONGLONG(0);
    deprecated_type_ = 0;
    deprecated_is_external_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reference::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 identifier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &identifier_)));
          set_has_identifier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_deprecated_type;
        break;
      }

      // optional int32 deprecated_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deprecated_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deprecated_type_)));
          set_has_deprecated_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_deprecated_is_external;
        break;
      }

      // optional bool deprecated_is_external = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deprecated_is_external:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deprecated_is_external_)));
          set_has_deprecated_is_external();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Reference::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 identifier = 1;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->identifier(), output);
  }

  // optional int32 deprecated_type = 2;
  if (has_deprecated_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->deprecated_type(), output);
  }

  // optional bool deprecated_is_external = 3;
  if (has_deprecated_is_external()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->deprecated_is_external(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Reference::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 identifier = 1;
  if (has_identifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->identifier(), target);
  }

  // optional int32 deprecated_type = 2;
  if (has_deprecated_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->deprecated_type(), target);
  }

  // optional bool deprecated_is_external = 3;
  if (has_deprecated_is_external()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->deprecated_is_external(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Reference::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 identifier = 1;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->identifier());
    }

    // optional int32 deprecated_type = 2;
    if (has_deprecated_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deprecated_type());
    }

    // optional bool deprecated_is_external = 3;
    if (has_deprecated_is_external()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reference::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reference* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reference*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reference::MergeFrom(const Reference& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identifier()) {
      set_identifier(from.identifier());
    }
    if (from.has_deprecated_type()) {
      set_deprecated_type(from.deprecated_type());
    }
    if (from.has_deprecated_is_external()) {
      set_deprecated_is_external(from.deprecated_is_external());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reference::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reference::CopyFrom(const Reference& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reference::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Reference::Swap(Reference* other) {
  if (other != this) {
    std::swap(identifier_, other->identifier_);
    std::swap(deprecated_type_, other->deprecated_type_);
    std::swap(deprecated_is_external_, other->deprecated_is_external_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reference::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reference_descriptor_;
  metadata.reflection = Reference_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataReference::kIdentifierFieldNumber;
#endif  // !_MSC_VER

DataReference::DataReference()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataReference::InitAsDefaultInstance() {
}

DataReference::DataReference(const DataReference& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataReference::SharedCtor() {
  _cached_size_ = 0;
  identifier_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataReference::~DataReference() {
  SharedDtor();
}

void DataReference::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataReference::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataReference::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataReference_descriptor_;
}

const DataReference& DataReference::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSPMessages_2eproto();
  return *default_instance_;
}

DataReference* DataReference::default_instance_ = NULL;

DataReference* DataReference::New() const {
  return new DataReference;
}

void DataReference::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    identifier_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataReference::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 identifier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &identifier_)));
          set_has_identifier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataReference::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 identifier = 1;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->identifier(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataReference::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 identifier = 1;
  if (has_identifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->identifier(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataReference::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 identifier = 1;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->identifier());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataReference::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataReference* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataReference*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataReference::MergeFrom(const DataReference& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identifier()) {
      set_identifier(from.identifier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataReference::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataReference::CopyFrom(const DataReference& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataReference::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DataReference::Swap(DataReference* other) {
  if (other != this) {
    std::swap(identifier_, other->identifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataReference::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataReference_descriptor_;
  metadata.reflection = DataReference_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !_MSC_VER

Point::Point()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSPMessages_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New() const {
  return new Point;
}

void Point::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Point::Swap(Point* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Size::kWidthFieldNumber;
const int Size::kHeightFieldNumber;
#endif  // !_MSC_VER

Size::Size()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Size::InitAsDefaultInstance() {
}

Size::Size(const Size& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Size::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Size::~Size() {
  SharedDtor();
}

void Size::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Size::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Size::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Size_descriptor_;
}

const Size& Size::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSPMessages_2eproto();
  return *default_instance_;
}

Size* Size::default_instance_ = NULL;

Size* Size::New() const {
  return new Size;
}

void Size::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    width_ = 0;
    height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Size::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float width = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_height;
        break;
      }

      // required float height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Size::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->width(), output);
  }

  // required float height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Size::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->width(), target);
  }

  // required float height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Size::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float width = 1;
    if (has_width()) {
      total_size += 1 + 4;
    }

    // required float height = 2;
    if (has_height()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Size::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Size* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Size*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Size::MergeFrom(const Size& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Size::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Size::CopyFrom(const Size& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Size::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Size::Swap(Size* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Size::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Size_descriptor_;
  metadata.reflection = Size_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Range::kLocationFieldNumber;
const int Range::kLengthFieldNumber;
#endif  // !_MSC_VER

Range::Range()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Range::InitAsDefaultInstance() {
}

Range::Range(const Range& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Range::SharedCtor() {
  _cached_size_ = 0;
  location_ = 0u;
  length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Range::~Range() {
  SharedDtor();
}

void Range::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Range::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Range::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Range_descriptor_;
}

const Range& Range::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSPMessages_2eproto();
  return *default_instance_;
}

Range* Range::default_instance_ = NULL;

Range* Range::New() const {
  return new Range;
}

void Range::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    location_ = 0u;
    length_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Range::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 location = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &location_)));
          set_has_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // required uint32 length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Range::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 location = 1;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->location(), output);
  }

  // required uint32 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Range::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 location = 1;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->location(), target);
  }

  // required uint32 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Range::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 location = 1;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->location());
    }

    // required uint32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Range::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Range* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Range*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Range::MergeFrom(const Range& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Range::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Range::CopyFrom(const Range& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Range::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Range::Swap(Range* other) {
  if (other != this) {
    std::swap(location_, other->location_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Range::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Range_descriptor_;
  metadata.reflection = Range_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Date::kSecondsFieldNumber;
#endif  // !_MSC_VER

Date::Date()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Date::InitAsDefaultInstance() {
}

Date::Date(const Date& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Date::SharedCtor() {
  _cached_size_ = 0;
  seconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Date::~Date() {
  SharedDtor();
}

void Date::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Date::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Date::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Date_descriptor_;
}

const Date& Date::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSPMessages_2eproto();
  return *default_instance_;
}

Date* Date::default_instance_ = NULL;

Date* Date::New() const {
  return new Date;
}

void Date::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seconds_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Date::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double seconds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &seconds_)));
          set_has_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Date::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double seconds = 1;
  if (has_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->seconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Date::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double seconds = 1;
  if (has_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->seconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Date::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double seconds = 1;
    if (has_seconds()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Date::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Date* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Date*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Date::MergeFrom(const Date& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Date::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Date::CopyFrom(const Date& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Date::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Date::Swap(Date* other) {
  if (other != this) {
    std::swap(seconds_, other->seconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Date::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Date_descriptor_;
  metadata.reflection = Date_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IndexSet::kRangesFieldNumber;
#endif  // !_MSC_VER

IndexSet::IndexSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IndexSet::InitAsDefaultInstance() {
}

IndexSet::IndexSet(const IndexSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IndexSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndexSet::~IndexSet() {
  SharedDtor();
}

void IndexSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndexSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexSet_descriptor_;
}

const IndexSet& IndexSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSPMessages_2eproto();
  return *default_instance_;
}

IndexSet* IndexSet::default_instance_ = NULL;

IndexSet* IndexSet::New() const {
  return new IndexSet;
}

void IndexSet::Clear() {
  ranges_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndexSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSP.Range ranges = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ranges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranges()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ranges;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IndexSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSP.Range ranges = 1;
  for (int i = 0; i < this->ranges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ranges(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IndexSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSP.Range ranges = 1;
  for (int i = 0; i < this->ranges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ranges(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IndexSet::ByteSize() const {
  int total_size = 0;

  // repeated .TSP.Range ranges = 1;
  total_size += 1 * this->ranges_size();
  for (int i = 0; i < this->ranges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranges(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndexSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndexSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndexSet::MergeFrom(const IndexSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranges_.MergeFrom(from.ranges_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndexSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexSet::CopyFrom(const IndexSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexSet::IsInitialized() const {

  for (int i = 0; i < ranges_size(); i++) {
    if (!this->ranges(i).IsInitialized()) return false;
  }
  return true;
}

void IndexSet::Swap(IndexSet* other) {
  if (other != this) {
    ranges_.Swap(&other->ranges_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndexSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexSet_descriptor_;
  metadata.reflection = IndexSet_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Color_ColorModel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Color_ColorModel_descriptor_;
}
bool Color_ColorModel_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Color_ColorModel Color::rgb;
const Color_ColorModel Color::cmyk;
const Color_ColorModel Color::white;
const Color_ColorModel Color::ColorModel_MIN;
const Color_ColorModel Color::ColorModel_MAX;
const int Color::ColorModel_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Color::kModelFieldNumber;
const int Color::kRFieldNumber;
const int Color::kGFieldNumber;
const int Color::kBFieldNumber;
const int Color::kAFieldNumber;
const int Color::kCFieldNumber;
const int Color::kMFieldNumber;
const int Color::kYFieldNumber;
const int Color::kKFieldNumber;
const int Color::kWFieldNumber;
#endif  // !_MSC_VER

Color::Color()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Color::InitAsDefaultInstance() {
}

Color::Color(const Color& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Color::SharedCtor() {
  _cached_size_ = 0;
  model_ = 1;
  r_ = 0;
  g_ = 0;
  b_ = 0;
  a_ = 1;
  c_ = 0;
  m_ = 0;
  y_ = 0;
  k_ = 0;
  w_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Color::~Color() {
  SharedDtor();
}

void Color::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Color::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Color::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Color_descriptor_;
}

const Color& Color::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSPMessages_2eproto();
  return *default_instance_;
}

Color* Color::default_instance_ = NULL;

Color* Color::New() const {
  return new Color;
}

void Color::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    model_ = 1;
    r_ = 0;
    g_ = 0;
    b_ = 0;
    a_ = 1;
    c_ = 0;
    m_ = 0;
    y_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    k_ = 0;
    w_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Color.ColorModel model = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSP::Color_ColorModel_IsValid(value)) {
            set_model(static_cast< ::TSP::Color_ColorModel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_r;
        break;
      }

      // optional float r = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_g;
        break;
      }

      // optional float g = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_g:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &g_)));
          set_has_g();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_b;
        break;
      }

      // optional float b = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_a;
        break;
      }

      // optional float a = 6 [default = 1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_c;
        break;
      }

      // optional float c = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &c_)));
          set_has_c();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_m;
        break;
      }

      // optional float m = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_)));
          set_has_m();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_y;
        break;
      }

      // optional float y = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_k;
        break;
      }

      // optional float k = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k_)));
          set_has_k();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_w;
        break;
      }

      // optional float w = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Color.ColorModel model = 1;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->model(), output);
  }

  // optional float r = 3;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->r(), output);
  }

  // optional float g = 4;
  if (has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->g(), output);
  }

  // optional float b = 5;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->b(), output);
  }

  // optional float a = 6 [default = 1];
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->a(), output);
  }

  // optional float c = 7;
  if (has_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->c(), output);
  }

  // optional float m = 8;
  if (has_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->m(), output);
  }

  // optional float y = 9;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->y(), output);
  }

  // optional float k = 10;
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->k(), output);
  }

  // optional float w = 11;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->w(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Color::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Color.ColorModel model = 1;
  if (has_model()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->model(), target);
  }

  // optional float r = 3;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->r(), target);
  }

  // optional float g = 4;
  if (has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->g(), target);
  }

  // optional float b = 5;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->b(), target);
  }

  // optional float a = 6 [default = 1];
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->a(), target);
  }

  // optional float c = 7;
  if (has_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->c(), target);
  }

  // optional float m = 8;
  if (has_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->m(), target);
  }

  // optional float y = 9;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->y(), target);
  }

  // optional float k = 10;
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->k(), target);
  }

  // optional float w = 11;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->w(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Color::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.Color.ColorModel model = 1;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->model());
    }

    // optional float r = 3;
    if (has_r()) {
      total_size += 1 + 4;
    }

    // optional float g = 4;
    if (has_g()) {
      total_size += 1 + 4;
    }

    // optional float b = 5;
    if (has_b()) {
      total_size += 1 + 4;
    }

    // optional float a = 6 [default = 1];
    if (has_a()) {
      total_size += 1 + 4;
    }

    // optional float c = 7;
    if (has_c()) {
      total_size += 1 + 4;
    }

    // optional float m = 8;
    if (has_m()) {
      total_size += 1 + 4;
    }

    // optional float y = 9;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float k = 10;
    if (has_k()) {
      total_size += 1 + 4;
    }

    // optional float w = 11;
    if (has_w()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Color::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Color* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Color*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_g()) {
      set_g(from.g());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_c()) {
      set_c(from.c());
    }
    if (from.has_m()) {
      set_m(from.m());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Color::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Color::Swap(Color* other) {
  if (other != this) {
    std::swap(model_, other->model_);
    std::swap(r_, other->r_);
    std::swap(g_, other->g_);
    std::swap(b_, other->b_);
    std::swap(a_, other->a_);
    std::swap(c_, other->c_);
    std::swap(m_, other->m_);
    std::swap(y_, other->y_);
    std::swap(k_, other->k_);
    std::swap(w_, other->w_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Color::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Color_descriptor_;
  metadata.reflection = Color_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Path_ElementType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Path_ElementType_descriptor_;
}
bool Path_ElementType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Path_ElementType Path::moveTo;
const Path_ElementType Path::lineTo;
const Path_ElementType Path::quadCurveTo;
const Path_ElementType Path::curveTo;
const Path_ElementType Path::closeSubpath;
const Path_ElementType Path::ElementType_MIN;
const Path_ElementType Path::ElementType_MAX;
const int Path::ElementType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Path_Element::kTypeFieldNumber;
const int Path_Element::kPointsFieldNumber;
#endif  // !_MSC_VER

Path_Element::Path_Element()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Path_Element::InitAsDefaultInstance() {
}

Path_Element::Path_Element(const Path_Element& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Path_Element::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Path_Element::~Path_Element() {
  SharedDtor();
}

void Path_Element::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Path_Element::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Path_Element::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Path_Element_descriptor_;
}

const Path_Element& Path_Element::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSPMessages_2eproto();
  return *default_instance_;
}

Path_Element* Path_Element::default_instance_ = NULL;

Path_Element* Path_Element::New() const {
  return new Path_Element;
}

void Path_Element::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
  }
  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Path_Element::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Path.ElementType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSP::Path_ElementType_IsValid(value)) {
            set_type(static_cast< ::TSP::Path_ElementType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_points;
        break;
      }

      // repeated .TSP.Point points = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_points;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Path_Element::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Path.ElementType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .TSP.Point points = 2;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->points(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Path_Element::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Path.ElementType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .TSP.Point points = 2;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->points(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Path_Element::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.Path.ElementType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .TSP.Point points = 2;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Path_Element::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Path_Element* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Path_Element*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Path_Element::MergeFrom(const Path_Element& from) {
  GOOGLE_CHECK_NE(&from, this);
  points_.MergeFrom(from.points_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Path_Element::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path_Element::CopyFrom(const Path_Element& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path_Element::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < points_size(); i++) {
    if (!this->points(i).IsInitialized()) return false;
  }
  return true;
}

void Path_Element::Swap(Path_Element* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    points_.Swap(&other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Path_Element::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Path_Element_descriptor_;
  metadata.reflection = Path_Element_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Path::kElementsFieldNumber;
#endif  // !_MSC_VER

Path::Path()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Path::InitAsDefaultInstance() {
}

Path::Path(const Path& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Path::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Path::~Path() {
  SharedDtor();
}

void Path::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Path::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Path::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Path_descriptor_;
}

const Path& Path::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSPMessages_2eproto();
  return *default_instance_;
}

Path* Path::default_instance_ = NULL;

Path* Path::New() const {
  return new Path;
}

void Path::Clear() {
  elements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Path::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSP.Path.Element elements = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_elements;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Path::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSP.Path.Element elements = 1;
  for (int i = 0; i < this->elements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->elements(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Path::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSP.Path.Element elements = 1;
  for (int i = 0; i < this->elements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elements(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Path::ByteSize() const {
  int total_size = 0;

  // repeated .TSP.Path.Element elements = 1;
  total_size += 1 * this->elements_size();
  for (int i = 0; i < this->elements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elements(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Path::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Path* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Path*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
  GOOGLE_CHECK_NE(&from, this);
  elements_.MergeFrom(from.elements_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Path::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {

  for (int i = 0; i < elements_size(); i++) {
    if (!this->elements(i).IsInitialized()) return false;
  }
  return true;
}

void Path::Swap(Path* other) {
  if (other != this) {
    elements_.Swap(&other->elements_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Path::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Path_descriptor_;
  metadata.reflection = Path_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReferenceDictionary_Entry::kKeyFieldNumber;
const int ReferenceDictionary_Entry::kValueFieldNumber;
#endif  // !_MSC_VER

ReferenceDictionary_Entry::ReferenceDictionary_Entry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReferenceDictionary_Entry::InitAsDefaultInstance() {
  key_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  value_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ReferenceDictionary_Entry::ReferenceDictionary_Entry(const ReferenceDictionary_Entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReferenceDictionary_Entry::SharedCtor() {
  _cached_size_ = 0;
  key_ = NULL;
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReferenceDictionary_Entry::~ReferenceDictionary_Entry() {
  SharedDtor();
}

void ReferenceDictionary_Entry::SharedDtor() {
  if (this != default_instance_) {
    delete key_;
    delete value_;
  }
}

void ReferenceDictionary_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReferenceDictionary_Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReferenceDictionary_Entry_descriptor_;
}

const ReferenceDictionary_Entry& ReferenceDictionary_Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSPMessages_2eproto();
  return *default_instance_;
}

ReferenceDictionary_Entry* ReferenceDictionary_Entry::default_instance_ = NULL;

ReferenceDictionary_Entry* ReferenceDictionary_Entry::New() const {
  return new ReferenceDictionary_Entry;
}

void ReferenceDictionary_Entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != NULL) key_->::TSP::Reference::Clear();
    }
    if (has_value()) {
      if (value_ != NULL) value_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReferenceDictionary_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Reference key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required .TSP.Reference value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReferenceDictionary_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Reference key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->key(), output);
  }

  // required .TSP.Reference value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReferenceDictionary_Entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Reference key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->key(), target);
  }

  // required .TSP.Reference value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReferenceDictionary_Entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.Reference key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key());
    }

    // required .TSP.Reference value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReferenceDictionary_Entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReferenceDictionary_Entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReferenceDictionary_Entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReferenceDictionary_Entry::MergeFrom(const ReferenceDictionary_Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      mutable_key()->::TSP::Reference::MergeFrom(from.key());
    }
    if (from.has_value()) {
      mutable_value()->::TSP::Reference::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReferenceDictionary_Entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceDictionary_Entry::CopyFrom(const ReferenceDictionary_Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceDictionary_Entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_key()) {
    if (!this->key().IsInitialized()) return false;
  }
  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  return true;
}

void ReferenceDictionary_Entry::Swap(ReferenceDictionary_Entry* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReferenceDictionary_Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReferenceDictionary_Entry_descriptor_;
  metadata.reflection = ReferenceDictionary_Entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReferenceDictionary::kEntriesFieldNumber;
#endif  // !_MSC_VER

ReferenceDictionary::ReferenceDictionary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReferenceDictionary::InitAsDefaultInstance() {
}

ReferenceDictionary::ReferenceDictionary(const ReferenceDictionary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReferenceDictionary::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReferenceDictionary::~ReferenceDictionary() {
  SharedDtor();
}

void ReferenceDictionary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReferenceDictionary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReferenceDictionary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReferenceDictionary_descriptor_;
}

const ReferenceDictionary& ReferenceDictionary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSPMessages_2eproto();
  return *default_instance_;
}

ReferenceDictionary* ReferenceDictionary::default_instance_ = NULL;

ReferenceDictionary* ReferenceDictionary::New() const {
  return new ReferenceDictionary;
}

void ReferenceDictionary::Clear() {
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReferenceDictionary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSP.ReferenceDictionary.Entry entries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReferenceDictionary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSP.ReferenceDictionary.Entry entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReferenceDictionary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSP.ReferenceDictionary.Entry entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReferenceDictionary::ByteSize() const {
  int total_size = 0;

  // repeated .TSP.ReferenceDictionary.Entry entries = 1;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReferenceDictionary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReferenceDictionary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReferenceDictionary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReferenceDictionary::MergeFrom(const ReferenceDictionary& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReferenceDictionary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceDictionary::CopyFrom(const ReferenceDictionary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceDictionary::IsInitialized() const {

  for (int i = 0; i < entries_size(); i++) {
    if (!this->entries(i).IsInitialized()) return false;
  }
  return true;
}

void ReferenceDictionary::Swap(ReferenceDictionary* other) {
  if (other != this) {
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReferenceDictionary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReferenceDictionary_descriptor_;
  metadata.reflection = ReferenceDictionary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UUID::kLowerFieldNumber;
const int UUID::kUpperFieldNumber;
#endif  // !_MSC_VER

UUID::UUID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UUID::InitAsDefaultInstance() {
}

UUID::UUID(const UUID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UUID::SharedCtor() {
  _cached_size_ = 0;
  lower_ = GOOGLE_ULONGLONG(0);
  upper_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UUID::~UUID() {
  SharedDtor();
}

void UUID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UUID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UUID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UUID_descriptor_;
}

const UUID& UUID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSPMessages_2eproto();
  return *default_instance_;
}

UUID* UUID::default_instance_ = NULL;

UUID* UUID::New() const {
  return new UUID;
}

void UUID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lower_ = GOOGLE_ULONGLONG(0);
    upper_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UUID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 lower = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lower_)));
          set_has_lower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_upper;
        break;
      }

      // required uint64 upper = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &upper_)));
          set_has_upper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UUID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 lower = 1;
  if (has_lower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->lower(), output);
  }

  // required uint64 upper = 2;
  if (has_upper()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->upper(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UUID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 lower = 1;
  if (has_lower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->lower(), target);
  }

  // required uint64 upper = 2;
  if (has_upper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->upper(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UUID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 lower = 1;
    if (has_lower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lower());
    }

    // required uint64 upper = 2;
    if (has_upper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->upper());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UUID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UUID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UUID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UUID::MergeFrom(const UUID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lower()) {
      set_lower(from.lower());
    }
    if (from.has_upper()) {
      set_upper(from.upper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UUID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UUID::CopyFrom(const UUID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UUID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UUID::Swap(UUID* other) {
  if (other != this) {
    std::swap(lower_, other->lower_);
    std::swap(upper_, other->upper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UUID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UUID_descriptor_;
  metadata.reflection = UUID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UUIDPath::kUuidsFieldNumber;
#endif  // !_MSC_VER

UUIDPath::UUIDPath()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UUIDPath::InitAsDefaultInstance() {
}

UUIDPath::UUIDPath(const UUIDPath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UUIDPath::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UUIDPath::~UUIDPath() {
  SharedDtor();
}

void UUIDPath::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UUIDPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UUIDPath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UUIDPath_descriptor_;
}

const UUIDPath& UUIDPath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSPMessages_2eproto();
  return *default_instance_;
}

UUIDPath* UUIDPath::default_instance_ = NULL;

UUIDPath* UUIDPath::New() const {
  return new UUIDPath;
}

void UUIDPath::Clear() {
  uuids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UUIDPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSP.UUID uuids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_uuids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_uuids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UUIDPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSP.UUID uuids = 1;
  for (int i = 0; i < this->uuids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uuids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UUIDPath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSP.UUID uuids = 1;
  for (int i = 0; i < this->uuids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uuids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UUIDPath::ByteSize() const {
  int total_size = 0;

  // repeated .TSP.UUID uuids = 1;
  total_size += 1 * this->uuids_size();
  for (int i = 0; i < this->uuids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uuids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UUIDPath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UUIDPath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UUIDPath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UUIDPath::MergeFrom(const UUIDPath& from) {
  GOOGLE_CHECK_NE(&from, this);
  uuids_.MergeFrom(from.uuids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UUIDPath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UUIDPath::CopyFrom(const UUIDPath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UUIDPath::IsInitialized() const {

  for (int i = 0; i < uuids_size(); i++) {
    if (!this->uuids(i).IsInitialized()) return false;
  }
  return true;
}

void UUIDPath::Swap(UUIDPath* other) {
  if (other != this) {
    uuids_.Swap(&other->uuids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UUIDPath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UUIDPath_descriptor_;
  metadata.reflection = UUIDPath_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PasteboardObject::kStylesheetFieldNumber;
const int PasteboardObject::kDrawablesFieldNumber;
const int PasteboardObject::kStylesFieldNumber;
const int PasteboardObject::kThemeFieldNumber;
const int PasteboardObject::kWpStorageFieldNumber;
const int PasteboardObject::kGuideStorageFieldNumber;
const int PasteboardObject::kAppNativeObjectFieldNumber;
const int PasteboardObject::kIsTextPrimaryFieldNumber;
const int PasteboardObject::kIsSmartFieldNumber;
#endif  // !_MSC_VER

PasteboardObject::PasteboardObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PasteboardObject::InitAsDefaultInstance() {
  stylesheet_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  theme_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  wp_storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  guide_storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  app_native_object_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

PasteboardObject::PasteboardObject(const PasteboardObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PasteboardObject::SharedCtor() {
  _cached_size_ = 0;
  stylesheet_ = NULL;
  theme_ = NULL;
  wp_storage_ = NULL;
  guide_storage_ = NULL;
  app_native_object_ = NULL;
  is_text_primary_ = false;
  is_smart_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PasteboardObject::~PasteboardObject() {
  SharedDtor();
}

void PasteboardObject::SharedDtor() {
  if (this != default_instance_) {
    delete stylesheet_;
    delete theme_;
    delete wp_storage_;
    delete guide_storage_;
    delete app_native_object_;
  }
}

void PasteboardObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PasteboardObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PasteboardObject_descriptor_;
}

const PasteboardObject& PasteboardObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSPMessages_2eproto();
  return *default_instance_;
}

PasteboardObject* PasteboardObject::default_instance_ = NULL;

PasteboardObject* PasteboardObject::New() const {
  return new PasteboardObject;
}

void PasteboardObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stylesheet()) {
      if (stylesheet_ != NULL) stylesheet_->::TSP::Reference::Clear();
    }
    if (has_theme()) {
      if (theme_ != NULL) theme_->::TSP::Reference::Clear();
    }
    if (has_wp_storage()) {
      if (wp_storage_ != NULL) wp_storage_->::TSP::Reference::Clear();
    }
    if (has_guide_storage()) {
      if (guide_storage_ != NULL) guide_storage_->::TSP::Reference::Clear();
    }
    if (has_app_native_object()) {
      if (app_native_object_ != NULL) app_native_object_->::TSP::Reference::Clear();
    }
    is_text_primary_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_smart_ = false;
  }
  drawables_.Clear();
  styles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PasteboardObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference stylesheet = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stylesheet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_drawables;
        break;
      }

      // repeated .TSP.Reference drawables = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drawables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drawables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_drawables;
        if (input->ExpectTag(26)) goto parse_styles;
        break;
      }

      // repeated .TSP.Reference styles = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_styles;
        if (input->ExpectTag(34)) goto parse_theme;
        break;
      }

      // optional .TSP.Reference theme = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_theme()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_wp_storage;
        break;
      }

      // optional .TSP.Reference wp_storage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wp_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wp_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_app_native_object;
        break;
      }

      // optional .TSP.Reference app_native_object = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_native_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_native_object()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_text_primary;
        break;
      }

      // optional bool is_text_primary = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_text_primary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_text_primary_)));
          set_has_is_text_primary();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_is_smart;
        break;
      }

      // optional bool is_smart = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_smart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_smart_)));
          set_has_is_smart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_guide_storage;
        break;
      }

      // optional .TSP.Reference guide_storage = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guide_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guide_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PasteboardObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference stylesheet = 1;
  if (has_stylesheet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stylesheet(), output);
  }

  // repeated .TSP.Reference drawables = 2;
  for (int i = 0; i < this->drawables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->drawables(i), output);
  }

  // repeated .TSP.Reference styles = 3;
  for (int i = 0; i < this->styles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->styles(i), output);
  }

  // optional .TSP.Reference theme = 4;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->theme(), output);
  }

  // optional .TSP.Reference wp_storage = 5;
  if (has_wp_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->wp_storage(), output);
  }

  // optional .TSP.Reference app_native_object = 6;
  if (has_app_native_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->app_native_object(), output);
  }

  // optional bool is_text_primary = 7 [default = false];
  if (has_is_text_primary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_text_primary(), output);
  }

  // optional bool is_smart = 8 [default = false];
  if (has_is_smart()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_smart(), output);
  }

  // optional .TSP.Reference guide_storage = 9;
  if (has_guide_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->guide_storage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PasteboardObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference stylesheet = 1;
  if (has_stylesheet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stylesheet(), target);
  }

  // repeated .TSP.Reference drawables = 2;
  for (int i = 0; i < this->drawables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->drawables(i), target);
  }

  // repeated .TSP.Reference styles = 3;
  for (int i = 0; i < this->styles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->styles(i), target);
  }

  // optional .TSP.Reference theme = 4;
  if (has_theme()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->theme(), target);
  }

  // optional .TSP.Reference wp_storage = 5;
  if (has_wp_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->wp_storage(), target);
  }

  // optional .TSP.Reference app_native_object = 6;
  if (has_app_native_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->app_native_object(), target);
  }

  // optional bool is_text_primary = 7 [default = false];
  if (has_is_text_primary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_text_primary(), target);
  }

  // optional bool is_smart = 8 [default = false];
  if (has_is_smart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_smart(), target);
  }

  // optional .TSP.Reference guide_storage = 9;
  if (has_guide_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->guide_storage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PasteboardObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference stylesheet = 1;
    if (has_stylesheet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stylesheet());
    }

    // optional .TSP.Reference theme = 4;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->theme());
    }

    // optional .TSP.Reference wp_storage = 5;
    if (has_wp_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wp_storage());
    }

    // optional .TSP.Reference guide_storage = 9;
    if (has_guide_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guide_storage());
    }

    // optional .TSP.Reference app_native_object = 6;
    if (has_app_native_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_native_object());
    }

    // optional bool is_text_primary = 7 [default = false];
    if (has_is_text_primary()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool is_smart = 8 [default = false];
    if (has_is_smart()) {
      total_size += 1 + 1;
    }

  }
  // repeated .TSP.Reference drawables = 2;
  total_size += 1 * this->drawables_size();
  for (int i = 0; i < this->drawables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drawables(i));
  }

  // repeated .TSP.Reference styles = 3;
  total_size += 1 * this->styles_size();
  for (int i = 0; i < this->styles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->styles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PasteboardObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PasteboardObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PasteboardObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PasteboardObject::MergeFrom(const PasteboardObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  drawables_.MergeFrom(from.drawables_);
  styles_.MergeFrom(from.styles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stylesheet()) {
      mutable_stylesheet()->::TSP::Reference::MergeFrom(from.stylesheet());
    }
    if (from.has_theme()) {
      mutable_theme()->::TSP::Reference::MergeFrom(from.theme());
    }
    if (from.has_wp_storage()) {
      mutable_wp_storage()->::TSP::Reference::MergeFrom(from.wp_storage());
    }
    if (from.has_guide_storage()) {
      mutable_guide_storage()->::TSP::Reference::MergeFrom(from.guide_storage());
    }
    if (from.has_app_native_object()) {
      mutable_app_native_object()->::TSP::Reference::MergeFrom(from.app_native_object());
    }
    if (from.has_is_text_primary()) {
      set_is_text_primary(from.is_text_primary());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_smart()) {
      set_is_smart(from.is_smart());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PasteboardObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PasteboardObject::CopyFrom(const PasteboardObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasteboardObject::IsInitialized() const {

  if (has_stylesheet()) {
    if (!this->stylesheet().IsInitialized()) return false;
  }
  for (int i = 0; i < drawables_size(); i++) {
    if (!this->drawables(i).IsInitialized()) return false;
  }
  for (int i = 0; i < styles_size(); i++) {
    if (!this->styles(i).IsInitialized()) return false;
  }
  if (has_theme()) {
    if (!this->theme().IsInitialized()) return false;
  }
  if (has_wp_storage()) {
    if (!this->wp_storage().IsInitialized()) return false;
  }
  if (has_guide_storage()) {
    if (!this->guide_storage().IsInitialized()) return false;
  }
  if (has_app_native_object()) {
    if (!this->app_native_object().IsInitialized()) return false;
  }
  return true;
}

void PasteboardObject::Swap(PasteboardObject* other) {
  if (other != this) {
    std::swap(stylesheet_, other->stylesheet_);
    drawables_.Swap(&other->drawables_);
    styles_.Swap(&other->styles_);
    std::swap(theme_, other->theme_);
    std::swap(wp_storage_, other->wp_storage_);
    std::swap(guide_storage_, other->guide_storage_);
    std::swap(app_native_object_, other->app_native_object_);
    std::swap(is_text_primary_, other->is_text_primary_);
    std::swap(is_smart_, other->is_smart_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PasteboardObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PasteboardObject_descriptor_;
  metadata.reflection = PasteboardObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectContainer::kIdentifierFieldNumber;
const int ObjectContainer::kObjectsFieldNumber;
#endif  // !_MSC_VER

ObjectContainer::ObjectContainer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectContainer::InitAsDefaultInstance() {
}

ObjectContainer::ObjectContainer(const ObjectContainer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectContainer::SharedCtor() {
  _cached_size_ = 0;
  identifier_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectContainer::~ObjectContainer() {
  SharedDtor();
}

void ObjectContainer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectContainer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectContainer_descriptor_;
}

const ObjectContainer& ObjectContainer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSPMessages_2eproto();
  return *default_instance_;
}

ObjectContainer* ObjectContainer::default_instance_ = NULL;

ObjectContainer* ObjectContainer::New() const {
  return new ObjectContainer;
}

void ObjectContainer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    identifier_ = 0u;
  }
  objects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 identifier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identifier_)));
          set_has_identifier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_objects;
        break;
      }

      // repeated .TSP.Reference objects = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_objects;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 identifier = 1;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->identifier(), output);
  }

  // repeated .TSP.Reference objects = 2;
  for (int i = 0; i < this->objects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->objects(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectContainer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 identifier = 1;
  if (has_identifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->identifier(), target);
  }

  // repeated .TSP.Reference objects = 2;
  for (int i = 0; i < this->objects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->objects(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectContainer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 identifier = 1;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->identifier());
    }

  }
  // repeated .TSP.Reference objects = 2;
  total_size += 1 * this->objects_size();
  for (int i = 0; i < this->objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectContainer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectContainer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectContainer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectContainer::MergeFrom(const ObjectContainer& from) {
  GOOGLE_CHECK_NE(&from, this);
  objects_.MergeFrom(from.objects_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identifier()) {
      set_identifier(from.identifier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectContainer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectContainer::CopyFrom(const ObjectContainer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectContainer::IsInitialized() const {

  for (int i = 0; i < objects_size(); i++) {
    if (!this->objects(i).IsInitialized()) return false;
  }
  return true;
}

void ObjectContainer::Swap(ObjectContainer* other) {
  if (other != this) {
    std::swap(identifier_, other->identifier_);
    objects_.Swap(&other->objects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectContainer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectContainer_descriptor_;
  metadata.reflection = ObjectContainer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSP

// @@protoc_insertion_point(global_scope)
