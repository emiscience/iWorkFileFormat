// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCHArchives.proto

#ifndef PROTOBUF_TSCHArchives_2eproto__INCLUDED
#define PROTOBUF_TSCHArchives_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
#include "TSKArchives.pb.h"
#include "TSDArchives.pb.h"
#include "TSSArchives.pb.h"
#include "TSCHArchives.Common.pb.h"
#include "TSCHArchives.GEN.pb.h"
#include "TSCH3DArchives.pb.h"
#include "TSCHPreUFFArchives.pb.h"
// @@protoc_insertion_point(includes)

namespace TSCH {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TSCHArchives_2eproto();
void protobuf_AssignDesc_TSCHArchives_2eproto();
void protobuf_ShutdownFile_TSCHArchives_2eproto();

class ChartDrawableArchive;
class ChartArchive;
class ChartPasteboardAdditionsArchive;
class ChartGridArchive;
class ChartGridArchive_GridRow;
class ChartGridArchive_GridRow_GridValue;
class ChartGridArchive_ChartGridRowColumnIdMap;
class ChartGridArchive_ChartGridRowColumnIdMap_Entry;
class ChartMediatorArchive;
class ChartStylePreset;
class ChartPresetsArchive;
class PropertyValueStorageContainerArchive;
class StylePasteboardDataArchive;
class ChartSelectionPathTypeArchive;
class ChartAxisIDArchive;
class ChartSelectionPathArgumentArchive;
class ChartSelectionPathArchive;
class ChartSelectionArchive;
class ChartUIState;
class ChartFormatStructExtensions;

// ===================================================================

class ChartDrawableArchive : public ::google::protobuf::Message {
 public:
  ChartDrawableArchive();
  virtual ~ChartDrawableArchive();

  ChartDrawableArchive(const ChartDrawableArchive& from);

  inline ChartDrawableArchive& operator=(const ChartDrawableArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartDrawableArchive& default_instance();

  void Swap(ChartDrawableArchive* other);

  // implements Message ----------------------------------------------

  ChartDrawableArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartDrawableArchive& from);
  void MergeFrom(const ChartDrawableArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TSD.DrawableArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSD::DrawableArchive& super() const;
  inline ::TSD::DrawableArchive* mutable_super();
  inline ::TSD::DrawableArchive* release_super();
  inline void set_allocated_super(::TSD::DrawableArchive* super);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(ChartDrawableArchive)
  // @@protoc_insertion_point(class_scope:TSCH.ChartDrawableArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSD::DrawableArchive* super_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eproto();

  void InitAsDefaultInstance();
  static ChartDrawableArchive* default_instance_;
};
// -------------------------------------------------------------------

class ChartArchive : public ::google::protobuf::Message {
 public:
  ChartArchive();
  virtual ~ChartArchive();

  ChartArchive(const ChartArchive& from);

  inline ChartArchive& operator=(const ChartArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartArchive& default_instance();

  void Swap(ChartArchive* other);

  // implements Message ----------------------------------------------

  ChartArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartArchive& from);
  void MergeFrom(const ChartArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TSCH.ChartType chart_type = 1;
  inline bool has_chart_type() const;
  inline void clear_chart_type();
  static const int kChartTypeFieldNumber = 1;
  inline ::TSCH::ChartType chart_type() const;
  inline void set_chart_type(::TSCH::ChartType value);

  // optional .TSCH.ScatterFormat scatter_format = 2;
  inline bool has_scatter_format() const;
  inline void clear_scatter_format();
  static const int kScatterFormatFieldNumber = 2;
  inline ::TSCH::ScatterFormat scatter_format() const;
  inline void set_scatter_format(::TSCH::ScatterFormat value);

  // optional .TSCH.RectArchive legend_frame = 3;
  inline bool has_legend_frame() const;
  inline void clear_legend_frame();
  static const int kLegendFrameFieldNumber = 3;
  inline const ::TSCH::RectArchive& legend_frame() const;
  inline ::TSCH::RectArchive* mutable_legend_frame();
  inline ::TSCH::RectArchive* release_legend_frame();
  inline void set_allocated_legend_frame(::TSCH::RectArchive* legend_frame);

  // optional .TSP.Reference preset = 4;
  inline bool has_preset() const;
  inline void clear_preset();
  static const int kPresetFieldNumber = 4;
  inline const ::TSP::Reference& preset() const;
  inline ::TSP::Reference* mutable_preset();
  inline ::TSP::Reference* release_preset();
  inline void set_allocated_preset(::TSP::Reference* preset);

  // optional .TSCH.SeriesDirection series_direction = 5;
  inline bool has_series_direction() const;
  inline void clear_series_direction();
  static const int kSeriesDirectionFieldNumber = 5;
  inline ::TSCH::SeriesDirection series_direction() const;
  inline void set_series_direction(::TSCH::SeriesDirection value);

  // optional bool contains_default_data = 6;
  inline bool has_contains_default_data() const;
  inline void clear_contains_default_data();
  static const int kContainsDefaultDataFieldNumber = 6;
  inline bool contains_default_data() const;
  inline void set_contains_default_data(bool value);

  // optional .TSCH.ChartGridArchive grid = 7;
  inline bool has_grid() const;
  inline void clear_grid();
  static const int kGridFieldNumber = 7;
  inline const ::TSCH::ChartGridArchive& grid() const;
  inline ::TSCH::ChartGridArchive* mutable_grid();
  inline ::TSCH::ChartGridArchive* release_grid();
  inline void set_allocated_grid(::TSCH::ChartGridArchive* grid);

  // optional .TSP.Reference mediator = 8;
  inline bool has_mediator() const;
  inline void clear_mediator();
  static const int kMediatorFieldNumber = 8;
  inline const ::TSP::Reference& mediator() const;
  inline ::TSP::Reference* mutable_mediator();
  inline ::TSP::Reference* release_mediator();
  inline void set_allocated_mediator(::TSP::Reference* mediator);

  // optional .TSP.Reference chart_style = 9;
  inline bool has_chart_style() const;
  inline void clear_chart_style();
  static const int kChartStyleFieldNumber = 9;
  inline const ::TSP::Reference& chart_style() const;
  inline ::TSP::Reference* mutable_chart_style();
  inline ::TSP::Reference* release_chart_style();
  inline void set_allocated_chart_style(::TSP::Reference* chart_style);

  // optional .TSP.Reference chart_non_style = 10;
  inline bool has_chart_non_style() const;
  inline void clear_chart_non_style();
  static const int kChartNonStyleFieldNumber = 10;
  inline const ::TSP::Reference& chart_non_style() const;
  inline ::TSP::Reference* mutable_chart_non_style();
  inline ::TSP::Reference* release_chart_non_style();
  inline void set_allocated_chart_non_style(::TSP::Reference* chart_non_style);

  // optional .TSP.Reference legend_style = 11;
  inline bool has_legend_style() const;
  inline void clear_legend_style();
  static const int kLegendStyleFieldNumber = 11;
  inline const ::TSP::Reference& legend_style() const;
  inline ::TSP::Reference* mutable_legend_style();
  inline ::TSP::Reference* release_legend_style();
  inline void set_allocated_legend_style(::TSP::Reference* legend_style);

  // optional .TSP.Reference legend_non_style = 12;
  inline bool has_legend_non_style() const;
  inline void clear_legend_non_style();
  static const int kLegendNonStyleFieldNumber = 12;
  inline const ::TSP::Reference& legend_non_style() const;
  inline ::TSP::Reference* mutable_legend_non_style();
  inline ::TSP::Reference* release_legend_non_style();
  inline void set_allocated_legend_non_style(::TSP::Reference* legend_non_style);

  // repeated .TSP.Reference value_axis_styles = 13;
  inline int value_axis_styles_size() const;
  inline void clear_value_axis_styles();
  static const int kValueAxisStylesFieldNumber = 13;
  inline const ::TSP::Reference& value_axis_styles(int index) const;
  inline ::TSP::Reference* mutable_value_axis_styles(int index);
  inline ::TSP::Reference* add_value_axis_styles();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      value_axis_styles() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_value_axis_styles();

  // repeated .TSP.Reference value_axis_nonstyles = 14;
  inline int value_axis_nonstyles_size() const;
  inline void clear_value_axis_nonstyles();
  static const int kValueAxisNonstylesFieldNumber = 14;
  inline const ::TSP::Reference& value_axis_nonstyles(int index) const;
  inline ::TSP::Reference* mutable_value_axis_nonstyles(int index);
  inline ::TSP::Reference* add_value_axis_nonstyles();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      value_axis_nonstyles() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_value_axis_nonstyles();

  // repeated .TSP.Reference category_axis_styles = 15;
  inline int category_axis_styles_size() const;
  inline void clear_category_axis_styles();
  static const int kCategoryAxisStylesFieldNumber = 15;
  inline const ::TSP::Reference& category_axis_styles(int index) const;
  inline ::TSP::Reference* mutable_category_axis_styles(int index);
  inline ::TSP::Reference* add_category_axis_styles();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      category_axis_styles() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_category_axis_styles();

  // repeated .TSP.Reference category_axis_nonstyles = 16;
  inline int category_axis_nonstyles_size() const;
  inline void clear_category_axis_nonstyles();
  static const int kCategoryAxisNonstylesFieldNumber = 16;
  inline const ::TSP::Reference& category_axis_nonstyles(int index) const;
  inline ::TSP::Reference* mutable_category_axis_nonstyles(int index);
  inline ::TSP::Reference* add_category_axis_nonstyles();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      category_axis_nonstyles() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_category_axis_nonstyles();

  // repeated .TSP.Reference series_theme_styles = 17;
  inline int series_theme_styles_size() const;
  inline void clear_series_theme_styles();
  static const int kSeriesThemeStylesFieldNumber = 17;
  inline const ::TSP::Reference& series_theme_styles(int index) const;
  inline ::TSP::Reference* mutable_series_theme_styles(int index);
  inline ::TSP::Reference* add_series_theme_styles();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      series_theme_styles() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_series_theme_styles();

  // optional .TSCH.SparseReferenceArrayArchive series_private_styles = 18;
  inline bool has_series_private_styles() const;
  inline void clear_series_private_styles();
  static const int kSeriesPrivateStylesFieldNumber = 18;
  inline const ::TSCH::SparseReferenceArrayArchive& series_private_styles() const;
  inline ::TSCH::SparseReferenceArrayArchive* mutable_series_private_styles();
  inline ::TSCH::SparseReferenceArrayArchive* release_series_private_styles();
  inline void set_allocated_series_private_styles(::TSCH::SparseReferenceArrayArchive* series_private_styles);

  // optional .TSCH.SparseReferenceArrayArchive series_non_styles = 19;
  inline bool has_series_non_styles() const;
  inline void clear_series_non_styles();
  static const int kSeriesNonStylesFieldNumber = 19;
  inline const ::TSCH::SparseReferenceArrayArchive& series_non_styles() const;
  inline ::TSCH::SparseReferenceArrayArchive* mutable_series_non_styles();
  inline ::TSCH::SparseReferenceArrayArchive* release_series_non_styles();
  inline void set_allocated_series_non_styles(::TSCH::SparseReferenceArrayArchive* series_non_styles);

  // repeated .TSP.Reference paragraph_styles = 20;
  inline int paragraph_styles_size() const;
  inline void clear_paragraph_styles();
  static const int kParagraphStylesFieldNumber = 20;
  inline const ::TSP::Reference& paragraph_styles(int index) const;
  inline ::TSP::Reference* mutable_paragraph_styles(int index);
  inline ::TSP::Reference* add_paragraph_styles();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      paragraph_styles() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_paragraph_styles();

  // optional uint32 multidataset_index = 21;
  inline bool has_multidataset_index() const;
  inline void clear_multidataset_index();
  static const int kMultidatasetIndexFieldNumber = 21;
  inline ::google::protobuf::uint32 multidataset_index() const;
  inline void set_multidataset_index(::google::protobuf::uint32 value);

  // optional bool needs_calc_engine_deferred_import_action = 22;
  inline bool has_needs_calc_engine_deferred_import_action() const;
  inline void clear_needs_calc_engine_deferred_import_action();
  static const int kNeedsCalcEngineDeferredImportActionFieldNumber = 22;
  inline bool needs_calc_engine_deferred_import_action() const;
  inline void set_needs_calc_engine_deferred_import_action(bool value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(ChartArchive)
  static const int kUnityFieldNumber = 10000;
  static ::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartDrawableArchive,
      ::google::protobuf::internal::MessageTypeTraits< ::TSCH::ChartArchive >, 11, false >
    unity;
  // @@protoc_insertion_point(class_scope:TSCH.ChartArchive)
 private:
  inline void set_has_chart_type();
  inline void clear_has_chart_type();
  inline void set_has_scatter_format();
  inline void clear_has_scatter_format();
  inline void set_has_legend_frame();
  inline void clear_has_legend_frame();
  inline void set_has_preset();
  inline void clear_has_preset();
  inline void set_has_series_direction();
  inline void clear_has_series_direction();
  inline void set_has_contains_default_data();
  inline void clear_has_contains_default_data();
  inline void set_has_grid();
  inline void clear_has_grid();
  inline void set_has_mediator();
  inline void clear_has_mediator();
  inline void set_has_chart_style();
  inline void clear_has_chart_style();
  inline void set_has_chart_non_style();
  inline void clear_has_chart_non_style();
  inline void set_has_legend_style();
  inline void clear_has_legend_style();
  inline void set_has_legend_non_style();
  inline void clear_has_legend_non_style();
  inline void set_has_series_private_styles();
  inline void clear_has_series_private_styles();
  inline void set_has_series_non_styles();
  inline void clear_has_series_non_styles();
  inline void set_has_multidataset_index();
  inline void clear_has_multidataset_index();
  inline void set_has_needs_calc_engine_deferred_import_action();
  inline void clear_has_needs_calc_engine_deferred_import_action();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int chart_type_;
  int scatter_format_;
  ::TSCH::RectArchive* legend_frame_;
  ::TSP::Reference* preset_;
  ::TSCH::ChartGridArchive* grid_;
  ::TSP::Reference* mediator_;
  ::TSP::Reference* chart_style_;
  ::TSP::Reference* chart_non_style_;
  int series_direction_;
  bool contains_default_data_;
  bool needs_calc_engine_deferred_import_action_;
  ::TSP::Reference* legend_style_;
  ::TSP::Reference* legend_non_style_;
  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > value_axis_styles_;
  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > value_axis_nonstyles_;
  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > category_axis_styles_;
  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > category_axis_nonstyles_;
  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > series_theme_styles_;
  ::TSCH::SparseReferenceArrayArchive* series_private_styles_;
  ::TSCH::SparseReferenceArrayArchive* series_non_styles_;
  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > paragraph_styles_;
  ::google::protobuf::uint32 multidataset_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eproto();

  void InitAsDefaultInstance();
  static ChartArchive* default_instance_;
};
// -------------------------------------------------------------------

class ChartPasteboardAdditionsArchive : public ::google::protobuf::Message {
 public:
  ChartPasteboardAdditionsArchive();
  virtual ~ChartPasteboardAdditionsArchive();

  ChartPasteboardAdditionsArchive(const ChartPasteboardAdditionsArchive& from);

  inline ChartPasteboardAdditionsArchive& operator=(const ChartPasteboardAdditionsArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartPasteboardAdditionsArchive& default_instance();

  void Swap(ChartPasteboardAdditionsArchive* other);

  // implements Message ----------------------------------------------

  ChartPasteboardAdditionsArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartPasteboardAdditionsArchive& from);
  void MergeFrom(const ChartPasteboardAdditionsArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  static const int kPresetIndexForPasteboardFieldNumber = 10000;
  static ::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
      ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::uint32 >, 13, false >
    preset_index_for_pasteboard;
  static const int kPresetUuidForPasteboardFieldNumber = 10001;
  static ::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
      ::google::protobuf::internal::StringTypeTraits, 12, false >
    preset_uuid_for_pasteboard;
  static const int kCustomFormatListForPasteboardFieldNumber = 10003;
  static ::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
      ::google::protobuf::internal::MessageTypeTraits< ::TSP::Reference >, 11, false >
    custom_format_list_for_pasteboard;
  // @@protoc_insertion_point(class_scope:TSCH.ChartPasteboardAdditionsArchive)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_TSCHArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eproto();

  void InitAsDefaultInstance();
  static ChartPasteboardAdditionsArchive* default_instance_;
};
// -------------------------------------------------------------------

class ChartGridArchive_GridRow_GridValue : public ::google::protobuf::Message {
 public:
  ChartGridArchive_GridRow_GridValue();
  virtual ~ChartGridArchive_GridRow_GridValue();

  ChartGridArchive_GridRow_GridValue(const ChartGridArchive_GridRow_GridValue& from);

  inline ChartGridArchive_GridRow_GridValue& operator=(const ChartGridArchive_GridRow_GridValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartGridArchive_GridRow_GridValue& default_instance();

  void Swap(ChartGridArchive_GridRow_GridValue* other);

  // implements Message ----------------------------------------------

  ChartGridArchive_GridRow_GridValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartGridArchive_GridRow_GridValue& from);
  void MergeFrom(const ChartGridArchive_GridRow_GridValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double numeric_value = 1;
  inline bool has_numeric_value() const;
  inline void clear_numeric_value();
  static const int kNumericValueFieldNumber = 1;
  inline double numeric_value() const;
  inline void set_numeric_value(double value);

  // optional double date_value_1_0 = 2;
  inline bool has_date_value_1_0() const;
  inline void clear_date_value_1_0();
  static const int kDateValue10FieldNumber = 2;
  inline double date_value_1_0() const;
  inline void set_date_value_1_0(double value);

  // optional double duration_value = 3;
  inline bool has_duration_value() const;
  inline void clear_duration_value();
  static const int kDurationValueFieldNumber = 3;
  inline double duration_value() const;
  inline void set_duration_value(double value);

  // optional double date_value = 4;
  inline bool has_date_value() const;
  inline void clear_date_value();
  static const int kDateValueFieldNumber = 4;
  inline double date_value() const;
  inline void set_date_value(double value);

  // @@protoc_insertion_point(class_scope:TSCH.ChartGridArchive.GridRow.GridValue)
 private:
  inline void set_has_numeric_value();
  inline void clear_has_numeric_value();
  inline void set_has_date_value_1_0();
  inline void clear_has_date_value_1_0();
  inline void set_has_duration_value();
  inline void clear_has_duration_value();
  inline void set_has_date_value();
  inline void clear_has_date_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double numeric_value_;
  double date_value_1_0_;
  double duration_value_;
  double date_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eproto();

  void InitAsDefaultInstance();
  static ChartGridArchive_GridRow_GridValue* default_instance_;
};
// -------------------------------------------------------------------

class ChartGridArchive_GridRow : public ::google::protobuf::Message {
 public:
  ChartGridArchive_GridRow();
  virtual ~ChartGridArchive_GridRow();

  ChartGridArchive_GridRow(const ChartGridArchive_GridRow& from);

  inline ChartGridArchive_GridRow& operator=(const ChartGridArchive_GridRow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartGridArchive_GridRow& default_instance();

  void Swap(ChartGridArchive_GridRow* other);

  // implements Message ----------------------------------------------

  ChartGridArchive_GridRow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartGridArchive_GridRow& from);
  void MergeFrom(const ChartGridArchive_GridRow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ChartGridArchive_GridRow_GridValue GridValue;

  // accessors -------------------------------------------------------

  // repeated .TSCH.ChartGridArchive.GridRow.GridValue value = 1;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline const ::TSCH::ChartGridArchive_GridRow_GridValue& value(int index) const;
  inline ::TSCH::ChartGridArchive_GridRow_GridValue* mutable_value(int index);
  inline ::TSCH::ChartGridArchive_GridRow_GridValue* add_value();
  inline const ::google::protobuf::RepeatedPtrField< ::TSCH::ChartGridArchive_GridRow_GridValue >&
      value() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSCH::ChartGridArchive_GridRow_GridValue >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:TSCH.ChartGridArchive.GridRow)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TSCH::ChartGridArchive_GridRow_GridValue > value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eproto();

  void InitAsDefaultInstance();
  static ChartGridArchive_GridRow* default_instance_;
};
// -------------------------------------------------------------------

class ChartGridArchive_ChartGridRowColumnIdMap_Entry : public ::google::protobuf::Message {
 public:
  ChartGridArchive_ChartGridRowColumnIdMap_Entry();
  virtual ~ChartGridArchive_ChartGridRowColumnIdMap_Entry();

  ChartGridArchive_ChartGridRowColumnIdMap_Entry(const ChartGridArchive_ChartGridRowColumnIdMap_Entry& from);

  inline ChartGridArchive_ChartGridRowColumnIdMap_Entry& operator=(const ChartGridArchive_ChartGridRowColumnIdMap_Entry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartGridArchive_ChartGridRowColumnIdMap_Entry& default_instance();

  void Swap(ChartGridArchive_ChartGridRowColumnIdMap_Entry* other);

  // implements Message ----------------------------------------------

  ChartGridArchive_ChartGridRowColumnIdMap_Entry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartGridArchive_ChartGridRowColumnIdMap_Entry& from);
  void MergeFrom(const ChartGridArchive_ChartGridRowColumnIdMap_Entry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uniqueId = 1;
  inline bool has_uniqueid() const;
  inline void clear_uniqueid();
  static const int kUniqueIdFieldNumber = 1;
  inline const ::std::string& uniqueid() const;
  inline void set_uniqueid(const ::std::string& value);
  inline void set_uniqueid(const char* value);
  inline void set_uniqueid(const char* value, size_t size);
  inline ::std::string* mutable_uniqueid();
  inline ::std::string* release_uniqueid();
  inline void set_allocated_uniqueid(::std::string* uniqueid);

  // required uint32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry)
 private:
  inline void set_has_uniqueid();
  inline void clear_has_uniqueid();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uniqueid_;
  ::google::protobuf::uint32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eproto();

  void InitAsDefaultInstance();
  static ChartGridArchive_ChartGridRowColumnIdMap_Entry* default_instance_;
};
// -------------------------------------------------------------------

class ChartGridArchive_ChartGridRowColumnIdMap : public ::google::protobuf::Message {
 public:
  ChartGridArchive_ChartGridRowColumnIdMap();
  virtual ~ChartGridArchive_ChartGridRowColumnIdMap();

  ChartGridArchive_ChartGridRowColumnIdMap(const ChartGridArchive_ChartGridRowColumnIdMap& from);

  inline ChartGridArchive_ChartGridRowColumnIdMap& operator=(const ChartGridArchive_ChartGridRowColumnIdMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartGridArchive_ChartGridRowColumnIdMap& default_instance();

  void Swap(ChartGridArchive_ChartGridRowColumnIdMap* other);

  // implements Message ----------------------------------------------

  ChartGridArchive_ChartGridRowColumnIdMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartGridArchive_ChartGridRowColumnIdMap& from);
  void MergeFrom(const ChartGridArchive_ChartGridRowColumnIdMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ChartGridArchive_ChartGridRowColumnIdMap_Entry Entry;

  // accessors -------------------------------------------------------

  // repeated .TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry row_id_map = 1;
  inline int row_id_map_size() const;
  inline void clear_row_id_map();
  static const int kRowIdMapFieldNumber = 1;
  inline const ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry& row_id_map(int index) const;
  inline ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry* mutable_row_id_map(int index);
  inline ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry* add_row_id_map();
  inline const ::google::protobuf::RepeatedPtrField< ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry >&
      row_id_map() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry >*
      mutable_row_id_map();

  // repeated .TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry column_id_map = 2;
  inline int column_id_map_size() const;
  inline void clear_column_id_map();
  static const int kColumnIdMapFieldNumber = 2;
  inline const ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry& column_id_map(int index) const;
  inline ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry* mutable_column_id_map(int index);
  inline ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry* add_column_id_map();
  inline const ::google::protobuf::RepeatedPtrField< ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry >&
      column_id_map() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry >*
      mutable_column_id_map();

  // @@protoc_insertion_point(class_scope:TSCH.ChartGridArchive.ChartGridRowColumnIdMap)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry > row_id_map_;
  ::google::protobuf::RepeatedPtrField< ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry > column_id_map_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eproto();

  void InitAsDefaultInstance();
  static ChartGridArchive_ChartGridRowColumnIdMap* default_instance_;
};
// -------------------------------------------------------------------

class ChartGridArchive : public ::google::protobuf::Message {
 public:
  ChartGridArchive();
  virtual ~ChartGridArchive();

  ChartGridArchive(const ChartGridArchive& from);

  inline ChartGridArchive& operator=(const ChartGridArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartGridArchive& default_instance();

  void Swap(ChartGridArchive* other);

  // implements Message ----------------------------------------------

  ChartGridArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartGridArchive& from);
  void MergeFrom(const ChartGridArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ChartGridArchive_GridRow GridRow;
  typedef ChartGridArchive_ChartGridRowColumnIdMap ChartGridRowColumnIdMap;

  // accessors -------------------------------------------------------

  // repeated string row_name = 1;
  inline int row_name_size() const;
  inline void clear_row_name();
  static const int kRowNameFieldNumber = 1;
  inline const ::std::string& row_name(int index) const;
  inline ::std::string* mutable_row_name(int index);
  inline void set_row_name(int index, const ::std::string& value);
  inline void set_row_name(int index, const char* value);
  inline void set_row_name(int index, const char* value, size_t size);
  inline ::std::string* add_row_name();
  inline void add_row_name(const ::std::string& value);
  inline void add_row_name(const char* value);
  inline void add_row_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& row_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_row_name();

  // repeated string column_name = 2;
  inline int column_name_size() const;
  inline void clear_column_name();
  static const int kColumnNameFieldNumber = 2;
  inline const ::std::string& column_name(int index) const;
  inline ::std::string* mutable_column_name(int index);
  inline void set_column_name(int index, const ::std::string& value);
  inline void set_column_name(int index, const char* value);
  inline void set_column_name(int index, const char* value, size_t size);
  inline ::std::string* add_column_name();
  inline void add_column_name(const ::std::string& value);
  inline void add_column_name(const char* value);
  inline void add_column_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& column_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_column_name();

  // repeated .TSCH.ChartGridArchive.GridRow grid_row = 3;
  inline int grid_row_size() const;
  inline void clear_grid_row();
  static const int kGridRowFieldNumber = 3;
  inline const ::TSCH::ChartGridArchive_GridRow& grid_row(int index) const;
  inline ::TSCH::ChartGridArchive_GridRow* mutable_grid_row(int index);
  inline ::TSCH::ChartGridArchive_GridRow* add_grid_row();
  inline const ::google::protobuf::RepeatedPtrField< ::TSCH::ChartGridArchive_GridRow >&
      grid_row() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSCH::ChartGridArchive_GridRow >*
      mutable_grid_row();

  // optional .TSCH.ChartGridArchive.ChartGridRowColumnIdMap idMap = 4;
  inline bool has_idmap() const;
  inline void clear_idmap();
  static const int kIdMapFieldNumber = 4;
  inline const ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap& idmap() const;
  inline ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap* mutable_idmap();
  inline ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap* release_idmap();
  inline void set_allocated_idmap(::TSCH::ChartGridArchive_ChartGridRowColumnIdMap* idmap);

  // @@protoc_insertion_point(class_scope:TSCH.ChartGridArchive)
 private:
  inline void set_has_idmap();
  inline void clear_has_idmap();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> row_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> column_name_;
  ::google::protobuf::RepeatedPtrField< ::TSCH::ChartGridArchive_GridRow > grid_row_;
  ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap* idmap_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eproto();

  void InitAsDefaultInstance();
  static ChartGridArchive* default_instance_;
};
// -------------------------------------------------------------------

class ChartMediatorArchive : public ::google::protobuf::Message {
 public:
  ChartMediatorArchive();
  virtual ~ChartMediatorArchive();

  ChartMediatorArchive(const ChartMediatorArchive& from);

  inline ChartMediatorArchive& operator=(const ChartMediatorArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartMediatorArchive& default_instance();

  void Swap(ChartMediatorArchive* other);

  // implements Message ----------------------------------------------

  ChartMediatorArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartMediatorArchive& from);
  void MergeFrom(const ChartMediatorArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TSP.Reference info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::TSP::Reference& info() const;
  inline ::TSP::Reference* mutable_info();
  inline ::TSP::Reference* release_info();
  inline void set_allocated_info(::TSP::Reference* info);

  // repeated uint32 local_series_indexes = 2;
  inline int local_series_indexes_size() const;
  inline void clear_local_series_indexes();
  static const int kLocalSeriesIndexesFieldNumber = 2;
  inline ::google::protobuf::uint32 local_series_indexes(int index) const;
  inline void set_local_series_indexes(int index, ::google::protobuf::uint32 value);
  inline void add_local_series_indexes(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      local_series_indexes() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_local_series_indexes();

  // repeated uint32 remote_series_indexes = 3;
  inline int remote_series_indexes_size() const;
  inline void clear_remote_series_indexes();
  static const int kRemoteSeriesIndexesFieldNumber = 3;
  inline ::google::protobuf::uint32 remote_series_indexes(int index) const;
  inline void set_remote_series_indexes(int index, ::google::protobuf::uint32 value);
  inline void add_remote_series_indexes(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      remote_series_indexes() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_remote_series_indexes();

  // @@protoc_insertion_point(class_scope:TSCH.ChartMediatorArchive)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSP::Reference* info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > local_series_indexes_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > remote_series_indexes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eproto();

  void InitAsDefaultInstance();
  static ChartMediatorArchive* default_instance_;
};
// -------------------------------------------------------------------

class ChartStylePreset : public ::google::protobuf::Message {
 public:
  ChartStylePreset();
  virtual ~ChartStylePreset();

  ChartStylePreset(const ChartStylePreset& from);

  inline ChartStylePreset& operator=(const ChartStylePreset& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartStylePreset& default_instance();

  void Swap(ChartStylePreset* other);

  // implements Message ----------------------------------------------

  ChartStylePreset* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartStylePreset& from);
  void MergeFrom(const ChartStylePreset& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TSP.Reference chart_style = 1;
  inline bool has_chart_style() const;
  inline void clear_chart_style();
  static const int kChartStyleFieldNumber = 1;
  inline const ::TSP::Reference& chart_style() const;
  inline ::TSP::Reference* mutable_chart_style();
  inline ::TSP::Reference* release_chart_style();
  inline void set_allocated_chart_style(::TSP::Reference* chart_style);

  // optional .TSP.Reference legend_style = 2;
  inline bool has_legend_style() const;
  inline void clear_legend_style();
  static const int kLegendStyleFieldNumber = 2;
  inline const ::TSP::Reference& legend_style() const;
  inline ::TSP::Reference* mutable_legend_style();
  inline ::TSP::Reference* release_legend_style();
  inline void set_allocated_legend_style(::TSP::Reference* legend_style);

  // repeated .TSP.Reference value_axis_styles = 3;
  inline int value_axis_styles_size() const;
  inline void clear_value_axis_styles();
  static const int kValueAxisStylesFieldNumber = 3;
  inline const ::TSP::Reference& value_axis_styles(int index) const;
  inline ::TSP::Reference* mutable_value_axis_styles(int index);
  inline ::TSP::Reference* add_value_axis_styles();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      value_axis_styles() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_value_axis_styles();

  // repeated .TSP.Reference category_axis_styles = 4;
  inline int category_axis_styles_size() const;
  inline void clear_category_axis_styles();
  static const int kCategoryAxisStylesFieldNumber = 4;
  inline const ::TSP::Reference& category_axis_styles(int index) const;
  inline ::TSP::Reference* mutable_category_axis_styles(int index);
  inline ::TSP::Reference* add_category_axis_styles();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      category_axis_styles() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_category_axis_styles();

  // repeated .TSP.Reference series_styles = 5;
  inline int series_styles_size() const;
  inline void clear_series_styles();
  static const int kSeriesStylesFieldNumber = 5;
  inline const ::TSP::Reference& series_styles(int index) const;
  inline ::TSP::Reference* mutable_series_styles(int index);
  inline ::TSP::Reference* add_series_styles();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      series_styles() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_series_styles();

  // repeated .TSP.Reference paragraph_styles = 6;
  inline int paragraph_styles_size() const;
  inline void clear_paragraph_styles();
  static const int kParagraphStylesFieldNumber = 6;
  inline const ::TSP::Reference& paragraph_styles(int index) const;
  inline ::TSP::Reference* mutable_paragraph_styles(int index);
  inline ::TSP::Reference* add_paragraph_styles();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      paragraph_styles() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_paragraph_styles();

  // optional bytes uuid = 7;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 7;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const void* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:TSCH.ChartStylePreset)
 private:
  inline void set_has_chart_style();
  inline void clear_has_chart_style();
  inline void set_has_legend_style();
  inline void clear_has_legend_style();
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSP::Reference* chart_style_;
  ::TSP::Reference* legend_style_;
  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > value_axis_styles_;
  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > category_axis_styles_;
  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > series_styles_;
  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > paragraph_styles_;
  ::std::string* uuid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eproto();

  void InitAsDefaultInstance();
  static ChartStylePreset* default_instance_;
};
// -------------------------------------------------------------------

class ChartPresetsArchive : public ::google::protobuf::Message {
 public:
  ChartPresetsArchive();
  virtual ~ChartPresetsArchive();

  ChartPresetsArchive(const ChartPresetsArchive& from);

  inline ChartPresetsArchive& operator=(const ChartPresetsArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartPresetsArchive& default_instance();

  void Swap(ChartPresetsArchive* other);

  // implements Message ----------------------------------------------

  ChartPresetsArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartPresetsArchive& from);
  void MergeFrom(const ChartPresetsArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TSP.Reference chart_presets = 1;
  inline int chart_presets_size() const;
  inline void clear_chart_presets();
  static const int kChartPresetsFieldNumber = 1;
  inline const ::TSP::Reference& chart_presets(int index) const;
  inline ::TSP::Reference* mutable_chart_presets(int index);
  inline ::TSP::Reference* add_chart_presets();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      chart_presets() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_chart_presets();

  static const int kExtensionFieldNumber = 120;
  static ::google::protobuf::internal::ExtensionIdentifier< ::TSS::ThemeArchive,
      ::google::protobuf::internal::MessageTypeTraits< ::TSCH::ChartPresetsArchive >, 11, false >
    extension;
  // @@protoc_insertion_point(class_scope:TSCH.ChartPresetsArchive)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > chart_presets_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eproto();

  void InitAsDefaultInstance();
  static ChartPresetsArchive* default_instance_;
};
// -------------------------------------------------------------------

class PropertyValueStorageContainerArchive : public ::google::protobuf::Message {
 public:
  PropertyValueStorageContainerArchive();
  virtual ~PropertyValueStorageContainerArchive();

  PropertyValueStorageContainerArchive(const PropertyValueStorageContainerArchive& from);

  inline PropertyValueStorageContainerArchive& operator=(const PropertyValueStorageContainerArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PropertyValueStorageContainerArchive& default_instance();

  void Swap(PropertyValueStorageContainerArchive* other);

  // implements Message ----------------------------------------------

  PropertyValueStorageContainerArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PropertyValueStorageContainerArchive& from);
  void MergeFrom(const PropertyValueStorageContainerArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TSP.Reference chart_style = 1;
  inline bool has_chart_style() const;
  inline void clear_chart_style();
  static const int kChartStyleFieldNumber = 1;
  inline const ::TSP::Reference& chart_style() const;
  inline ::TSP::Reference* mutable_chart_style();
  inline ::TSP::Reference* release_chart_style();
  inline void set_allocated_chart_style(::TSP::Reference* chart_style);

  // optional .TSP.Reference chart_nonstyle = 2;
  inline bool has_chart_nonstyle() const;
  inline void clear_chart_nonstyle();
  static const int kChartNonstyleFieldNumber = 2;
  inline const ::TSP::Reference& chart_nonstyle() const;
  inline ::TSP::Reference* mutable_chart_nonstyle();
  inline ::TSP::Reference* release_chart_nonstyle();
  inline void set_allocated_chart_nonstyle(::TSP::Reference* chart_nonstyle);

  // optional .TSP.Reference legend_style = 3;
  inline bool has_legend_style() const;
  inline void clear_legend_style();
  static const int kLegendStyleFieldNumber = 3;
  inline const ::TSP::Reference& legend_style() const;
  inline ::TSP::Reference* mutable_legend_style();
  inline ::TSP::Reference* release_legend_style();
  inline void set_allocated_legend_style(::TSP::Reference* legend_style);

  // optional .TSP.Reference legend_nonstyle = 4;
  inline bool has_legend_nonstyle() const;
  inline void clear_legend_nonstyle();
  static const int kLegendNonstyleFieldNumber = 4;
  inline const ::TSP::Reference& legend_nonstyle() const;
  inline ::TSP::Reference* mutable_legend_nonstyle();
  inline ::TSP::Reference* release_legend_nonstyle();
  inline void set_allocated_legend_nonstyle(::TSP::Reference* legend_nonstyle);

  // optional .TSCH.SparseReferenceArrayArchive value_axis_styles = 5;
  inline bool has_value_axis_styles() const;
  inline void clear_value_axis_styles();
  static const int kValueAxisStylesFieldNumber = 5;
  inline const ::TSCH::SparseReferenceArrayArchive& value_axis_styles() const;
  inline ::TSCH::SparseReferenceArrayArchive* mutable_value_axis_styles();
  inline ::TSCH::SparseReferenceArrayArchive* release_value_axis_styles();
  inline void set_allocated_value_axis_styles(::TSCH::SparseReferenceArrayArchive* value_axis_styles);

  // optional .TSCH.SparseReferenceArrayArchive value_axis_nonstyles = 6;
  inline bool has_value_axis_nonstyles() const;
  inline void clear_value_axis_nonstyles();
  static const int kValueAxisNonstylesFieldNumber = 6;
  inline const ::TSCH::SparseReferenceArrayArchive& value_axis_nonstyles() const;
  inline ::TSCH::SparseReferenceArrayArchive* mutable_value_axis_nonstyles();
  inline ::TSCH::SparseReferenceArrayArchive* release_value_axis_nonstyles();
  inline void set_allocated_value_axis_nonstyles(::TSCH::SparseReferenceArrayArchive* value_axis_nonstyles);

  // optional .TSCH.SparseReferenceArrayArchive category_axis_styles = 7;
  inline bool has_category_axis_styles() const;
  inline void clear_category_axis_styles();
  static const int kCategoryAxisStylesFieldNumber = 7;
  inline const ::TSCH::SparseReferenceArrayArchive& category_axis_styles() const;
  inline ::TSCH::SparseReferenceArrayArchive* mutable_category_axis_styles();
  inline ::TSCH::SparseReferenceArrayArchive* release_category_axis_styles();
  inline void set_allocated_category_axis_styles(::TSCH::SparseReferenceArrayArchive* category_axis_styles);

  // optional .TSCH.SparseReferenceArrayArchive category_axis_nonstyles = 8;
  inline bool has_category_axis_nonstyles() const;
  inline void clear_category_axis_nonstyles();
  static const int kCategoryAxisNonstylesFieldNumber = 8;
  inline const ::TSCH::SparseReferenceArrayArchive& category_axis_nonstyles() const;
  inline ::TSCH::SparseReferenceArrayArchive* mutable_category_axis_nonstyles();
  inline ::TSCH::SparseReferenceArrayArchive* release_category_axis_nonstyles();
  inline void set_allocated_category_axis_nonstyles(::TSCH::SparseReferenceArrayArchive* category_axis_nonstyles);

  // optional .TSCH.SparseReferenceArrayArchive series_theme_styles = 9;
  inline bool has_series_theme_styles() const;
  inline void clear_series_theme_styles();
  static const int kSeriesThemeStylesFieldNumber = 9;
  inline const ::TSCH::SparseReferenceArrayArchive& series_theme_styles() const;
  inline ::TSCH::SparseReferenceArrayArchive* mutable_series_theme_styles();
  inline ::TSCH::SparseReferenceArrayArchive* release_series_theme_styles();
  inline void set_allocated_series_theme_styles(::TSCH::SparseReferenceArrayArchive* series_theme_styles);

  // optional .TSCH.SparseReferenceArrayArchive series_private_styles = 10;
  inline bool has_series_private_styles() const;
  inline void clear_series_private_styles();
  static const int kSeriesPrivateStylesFieldNumber = 10;
  inline const ::TSCH::SparseReferenceArrayArchive& series_private_styles() const;
  inline ::TSCH::SparseReferenceArrayArchive* mutable_series_private_styles();
  inline ::TSCH::SparseReferenceArrayArchive* release_series_private_styles();
  inline void set_allocated_series_private_styles(::TSCH::SparseReferenceArrayArchive* series_private_styles);

  // optional .TSCH.SparseReferenceArrayArchive series_nonstyles = 11;
  inline bool has_series_nonstyles() const;
  inline void clear_series_nonstyles();
  static const int kSeriesNonstylesFieldNumber = 11;
  inline const ::TSCH::SparseReferenceArrayArchive& series_nonstyles() const;
  inline ::TSCH::SparseReferenceArrayArchive* mutable_series_nonstyles();
  inline ::TSCH::SparseReferenceArrayArchive* release_series_nonstyles();
  inline void set_allocated_series_nonstyles(::TSCH::SparseReferenceArrayArchive* series_nonstyles);

  // optional .TSCH.SparseReferenceArrayArchive paragraph_styles = 12;
  inline bool has_paragraph_styles() const;
  inline void clear_paragraph_styles();
  static const int kParagraphStylesFieldNumber = 12;
  inline const ::TSCH::SparseReferenceArrayArchive& paragraph_styles() const;
  inline ::TSCH::SparseReferenceArrayArchive* mutable_paragraph_styles();
  inline ::TSCH::SparseReferenceArrayArchive* release_paragraph_styles();
  inline void set_allocated_paragraph_styles(::TSCH::SparseReferenceArrayArchive* paragraph_styles);

  // @@protoc_insertion_point(class_scope:TSCH.PropertyValueStorageContainerArchive)
 private:
  inline void set_has_chart_style();
  inline void clear_has_chart_style();
  inline void set_has_chart_nonstyle();
  inline void clear_has_chart_nonstyle();
  inline void set_has_legend_style();
  inline void clear_has_legend_style();
  inline void set_has_legend_nonstyle();
  inline void clear_has_legend_nonstyle();
  inline void set_has_value_axis_styles();
  inline void clear_has_value_axis_styles();
  inline void set_has_value_axis_nonstyles();
  inline void clear_has_value_axis_nonstyles();
  inline void set_has_category_axis_styles();
  inline void clear_has_category_axis_styles();
  inline void set_has_category_axis_nonstyles();
  inline void clear_has_category_axis_nonstyles();
  inline void set_has_series_theme_styles();
  inline void clear_has_series_theme_styles();
  inline void set_has_series_private_styles();
  inline void clear_has_series_private_styles();
  inline void set_has_series_nonstyles();
  inline void clear_has_series_nonstyles();
  inline void set_has_paragraph_styles();
  inline void clear_has_paragraph_styles();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSP::Reference* chart_style_;
  ::TSP::Reference* chart_nonstyle_;
  ::TSP::Reference* legend_style_;
  ::TSP::Reference* legend_nonstyle_;
  ::TSCH::SparseReferenceArrayArchive* value_axis_styles_;
  ::TSCH::SparseReferenceArrayArchive* value_axis_nonstyles_;
  ::TSCH::SparseReferenceArrayArchive* category_axis_styles_;
  ::TSCH::SparseReferenceArrayArchive* category_axis_nonstyles_;
  ::TSCH::SparseReferenceArrayArchive* series_theme_styles_;
  ::TSCH::SparseReferenceArrayArchive* series_private_styles_;
  ::TSCH::SparseReferenceArrayArchive* series_nonstyles_;
  ::TSCH::SparseReferenceArrayArchive* paragraph_styles_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eproto();

  void InitAsDefaultInstance();
  static PropertyValueStorageContainerArchive* default_instance_;
};
// -------------------------------------------------------------------

class StylePasteboardDataArchive : public ::google::protobuf::Message {
 public:
  StylePasteboardDataArchive();
  virtual ~StylePasteboardDataArchive();

  StylePasteboardDataArchive(const StylePasteboardDataArchive& from);

  inline StylePasteboardDataArchive& operator=(const StylePasteboardDataArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StylePasteboardDataArchive& default_instance();

  void Swap(StylePasteboardDataArchive* other);

  // implements Message ----------------------------------------------

  StylePasteboardDataArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StylePasteboardDataArchive& from);
  void MergeFrom(const StylePasteboardDataArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TSS.StyleArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSS::StyleArchive& super() const;
  inline ::TSS::StyleArchive* mutable_super();
  inline ::TSS::StyleArchive* release_super();
  inline void set_allocated_super(::TSS::StyleArchive* super);

  // optional .TSCH.PropertyValueStorageContainerArchive style_network = 2;
  inline bool has_style_network() const;
  inline void clear_style_network();
  static const int kStyleNetworkFieldNumber = 2;
  inline const ::TSCH::PropertyValueStorageContainerArchive& style_network() const;
  inline ::TSCH::PropertyValueStorageContainerArchive* mutable_style_network();
  inline ::TSCH::PropertyValueStorageContainerArchive* release_style_network();
  inline void set_allocated_style_network(::TSCH::PropertyValueStorageContainerArchive* style_network);

  // optional bool copied_from_entire_chart = 3;
  inline bool has_copied_from_entire_chart() const;
  inline void clear_copied_from_entire_chart();
  static const int kCopiedFromEntireChartFieldNumber = 3;
  inline bool copied_from_entire_chart() const;
  inline void set_copied_from_entire_chart(bool value);

  // @@protoc_insertion_point(class_scope:TSCH.StylePasteboardDataArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_style_network();
  inline void clear_has_style_network();
  inline void set_has_copied_from_entire_chart();
  inline void clear_has_copied_from_entire_chart();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSS::StyleArchive* super_;
  ::TSCH::PropertyValueStorageContainerArchive* style_network_;
  bool copied_from_entire_chart_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eproto();

  void InitAsDefaultInstance();
  static StylePasteboardDataArchive* default_instance_;
};
// -------------------------------------------------------------------

class ChartSelectionPathTypeArchive : public ::google::protobuf::Message {
 public:
  ChartSelectionPathTypeArchive();
  virtual ~ChartSelectionPathTypeArchive();

  ChartSelectionPathTypeArchive(const ChartSelectionPathTypeArchive& from);

  inline ChartSelectionPathTypeArchive& operator=(const ChartSelectionPathTypeArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartSelectionPathTypeArchive& default_instance();

  void Swap(ChartSelectionPathTypeArchive* other);

  // implements Message ----------------------------------------------

  ChartSelectionPathTypeArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartSelectionPathTypeArchive& from);
  void MergeFrom(const ChartSelectionPathTypeArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path_type = 1;
  inline bool has_path_type() const;
  inline void clear_path_type();
  static const int kPathTypeFieldNumber = 1;
  inline const ::std::string& path_type() const;
  inline void set_path_type(const ::std::string& value);
  inline void set_path_type(const char* value);
  inline void set_path_type(const char* value, size_t size);
  inline ::std::string* mutable_path_type();
  inline ::std::string* release_path_type();
  inline void set_allocated_path_type(::std::string* path_type);

  // optional string path_name = 2;
  inline bool has_path_name() const;
  inline void clear_path_name();
  static const int kPathNameFieldNumber = 2;
  inline const ::std::string& path_name() const;
  inline void set_path_name(const ::std::string& value);
  inline void set_path_name(const char* value);
  inline void set_path_name(const char* value, size_t size);
  inline ::std::string* mutable_path_name();
  inline ::std::string* release_path_name();
  inline void set_allocated_path_name(::std::string* path_name);

  // @@protoc_insertion_point(class_scope:TSCH.ChartSelectionPathTypeArchive)
 private:
  inline void set_has_path_type();
  inline void clear_has_path_type();
  inline void set_has_path_name();
  inline void clear_has_path_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_type_;
  ::std::string* path_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eproto();

  void InitAsDefaultInstance();
  static ChartSelectionPathTypeArchive* default_instance_;
};
// -------------------------------------------------------------------

class ChartAxisIDArchive : public ::google::protobuf::Message {
 public:
  ChartAxisIDArchive();
  virtual ~ChartAxisIDArchive();

  ChartAxisIDArchive(const ChartAxisIDArchive& from);

  inline ChartAxisIDArchive& operator=(const ChartAxisIDArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartAxisIDArchive& default_instance();

  void Swap(ChartAxisIDArchive* other);

  // implements Message ----------------------------------------------

  ChartAxisIDArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartAxisIDArchive& from);
  void MergeFrom(const ChartAxisIDArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TSCH.AxisType axis_type = 1;
  inline bool has_axis_type() const;
  inline void clear_axis_type();
  static const int kAxisTypeFieldNumber = 1;
  inline ::TSCH::AxisType axis_type() const;
  inline void set_axis_type(::TSCH::AxisType value);

  // optional uint32 ordinal = 2;
  inline bool has_ordinal() const;
  inline void clear_ordinal();
  static const int kOrdinalFieldNumber = 2;
  inline ::google::protobuf::uint32 ordinal() const;
  inline void set_ordinal(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TSCH.ChartAxisIDArchive)
 private:
  inline void set_has_axis_type();
  inline void clear_has_axis_type();
  inline void set_has_ordinal();
  inline void clear_has_ordinal();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int axis_type_;
  ::google::protobuf::uint32 ordinal_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eproto();

  void InitAsDefaultInstance();
  static ChartAxisIDArchive* default_instance_;
};
// -------------------------------------------------------------------

class ChartSelectionPathArgumentArchive : public ::google::protobuf::Message {
 public:
  ChartSelectionPathArgumentArchive();
  virtual ~ChartSelectionPathArgumentArchive();

  ChartSelectionPathArgumentArchive(const ChartSelectionPathArgumentArchive& from);

  inline ChartSelectionPathArgumentArchive& operator=(const ChartSelectionPathArgumentArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartSelectionPathArgumentArchive& default_instance();

  void Swap(ChartSelectionPathArgumentArchive* other);

  // implements Message ----------------------------------------------

  ChartSelectionPathArgumentArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartSelectionPathArgumentArchive& from);
  void MergeFrom(const ChartSelectionPathArgumentArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 number = 1;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 number() const;
  inline void set_number(::google::protobuf::uint32 value);

  // optional .TSCH.ChartAxisIDArchive axis_id = 2;
  inline bool has_axis_id() const;
  inline void clear_axis_id();
  static const int kAxisIdFieldNumber = 2;
  inline const ::TSCH::ChartAxisIDArchive& axis_id() const;
  inline ::TSCH::ChartAxisIDArchive* mutable_axis_id();
  inline ::TSCH::ChartAxisIDArchive* release_axis_id();
  inline void set_allocated_axis_id(::TSCH::ChartAxisIDArchive* axis_id);

  // @@protoc_insertion_point(class_scope:TSCH.ChartSelectionPathArgumentArchive)
 private:
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_axis_id();
  inline void clear_has_axis_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::ChartAxisIDArchive* axis_id_;
  ::google::protobuf::uint32 number_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eproto();

  void InitAsDefaultInstance();
  static ChartSelectionPathArgumentArchive* default_instance_;
};
// -------------------------------------------------------------------

class ChartSelectionPathArchive : public ::google::protobuf::Message {
 public:
  ChartSelectionPathArchive();
  virtual ~ChartSelectionPathArchive();

  ChartSelectionPathArchive(const ChartSelectionPathArchive& from);

  inline ChartSelectionPathArchive& operator=(const ChartSelectionPathArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartSelectionPathArchive& default_instance();

  void Swap(ChartSelectionPathArchive* other);

  // implements Message ----------------------------------------------

  ChartSelectionPathArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartSelectionPathArchive& from);
  void MergeFrom(const ChartSelectionPathArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TSCH.ChartSelectionPathTypeArchive path_type = 1;
  inline bool has_path_type() const;
  inline void clear_path_type();
  static const int kPathTypeFieldNumber = 1;
  inline const ::TSCH::ChartSelectionPathTypeArchive& path_type() const;
  inline ::TSCH::ChartSelectionPathTypeArchive* mutable_path_type();
  inline ::TSCH::ChartSelectionPathTypeArchive* release_path_type();
  inline void set_allocated_path_type(::TSCH::ChartSelectionPathTypeArchive* path_type);

  // optional .TSCH.ChartSelectionPathArchive sub_selection = 2;
  inline bool has_sub_selection() const;
  inline void clear_sub_selection();
  static const int kSubSelectionFieldNumber = 2;
  inline const ::TSCH::ChartSelectionPathArchive& sub_selection() const;
  inline ::TSCH::ChartSelectionPathArchive* mutable_sub_selection();
  inline ::TSCH::ChartSelectionPathArchive* release_sub_selection();
  inline void set_allocated_sub_selection(::TSCH::ChartSelectionPathArchive* sub_selection);

  // repeated .TSCH.ChartSelectionPathArgumentArchive arguments = 3;
  inline int arguments_size() const;
  inline void clear_arguments();
  static const int kArgumentsFieldNumber = 3;
  inline const ::TSCH::ChartSelectionPathArgumentArchive& arguments(int index) const;
  inline ::TSCH::ChartSelectionPathArgumentArchive* mutable_arguments(int index);
  inline ::TSCH::ChartSelectionPathArgumentArchive* add_arguments();
  inline const ::google::protobuf::RepeatedPtrField< ::TSCH::ChartSelectionPathArgumentArchive >&
      arguments() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSCH::ChartSelectionPathArgumentArchive >*
      mutable_arguments();

  // @@protoc_insertion_point(class_scope:TSCH.ChartSelectionPathArchive)
 private:
  inline void set_has_path_type();
  inline void clear_has_path_type();
  inline void set_has_sub_selection();
  inline void clear_has_sub_selection();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSCH::ChartSelectionPathTypeArchive* path_type_;
  ::TSCH::ChartSelectionPathArchive* sub_selection_;
  ::google::protobuf::RepeatedPtrField< ::TSCH::ChartSelectionPathArgumentArchive > arguments_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eproto();

  void InitAsDefaultInstance();
  static ChartSelectionPathArchive* default_instance_;
};
// -------------------------------------------------------------------

class ChartSelectionArchive : public ::google::protobuf::Message {
 public:
  ChartSelectionArchive();
  virtual ~ChartSelectionArchive();

  ChartSelectionArchive(const ChartSelectionArchive& from);

  inline ChartSelectionArchive& operator=(const ChartSelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartSelectionArchive& default_instance();

  void Swap(ChartSelectionArchive* other);

  // implements Message ----------------------------------------------

  ChartSelectionArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartSelectionArchive& from);
  void MergeFrom(const ChartSelectionArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TSP.Reference chart = 1;
  inline bool has_chart() const;
  inline void clear_chart();
  static const int kChartFieldNumber = 1;
  inline const ::TSP::Reference& chart() const;
  inline ::TSP::Reference* mutable_chart();
  inline ::TSP::Reference* release_chart();
  inline void set_allocated_chart(::TSP::Reference* chart);

  // repeated .TSCH.ChartSelectionPathArchive paths = 2;
  inline int paths_size() const;
  inline void clear_paths();
  static const int kPathsFieldNumber = 2;
  inline const ::TSCH::ChartSelectionPathArchive& paths(int index) const;
  inline ::TSCH::ChartSelectionPathArchive* mutable_paths(int index);
  inline ::TSCH::ChartSelectionPathArchive* add_paths();
  inline const ::google::protobuf::RepeatedPtrField< ::TSCH::ChartSelectionPathArchive >&
      paths() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSCH::ChartSelectionPathArchive >*
      mutable_paths();

  // @@protoc_insertion_point(class_scope:TSCH.ChartSelectionArchive)
 private:
  inline void set_has_chart();
  inline void clear_has_chart();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSP::Reference* chart_;
  ::google::protobuf::RepeatedPtrField< ::TSCH::ChartSelectionPathArchive > paths_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eproto();

  void InitAsDefaultInstance();
  static ChartSelectionArchive* default_instance_;
};
// -------------------------------------------------------------------

class ChartUIState : public ::google::protobuf::Message {
 public:
  ChartUIState();
  virtual ~ChartUIState();

  ChartUIState(const ChartUIState& from);

  inline ChartUIState& operator=(const ChartUIState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartUIState& default_instance();

  void Swap(ChartUIState* other);

  // implements Message ----------------------------------------------

  ChartUIState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartUIState& from);
  void MergeFrom(const ChartUIState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TSP.Reference chart = 1;
  inline bool has_chart() const;
  inline void clear_chart();
  static const int kChartFieldNumber = 1;
  inline const ::TSP::Reference& chart() const;
  inline ::TSP::Reference* mutable_chart();
  inline ::TSP::Reference* release_chart();
  inline void set_allocated_chart(::TSP::Reference* chart);

  // optional int32 cde_last_row_selected = 2;
  inline bool has_cde_last_row_selected() const;
  inline void clear_cde_last_row_selected();
  static const int kCdeLastRowSelectedFieldNumber = 2;
  inline ::google::protobuf::int32 cde_last_row_selected() const;
  inline void set_cde_last_row_selected(::google::protobuf::int32 value);

  // optional int32 cde_last_col_selected = 3;
  inline bool has_cde_last_col_selected() const;
  inline void clear_cde_last_col_selected();
  static const int kCdeLastColSelectedFieldNumber = 3;
  inline ::google::protobuf::int32 cde_last_col_selected() const;
  inline void set_cde_last_col_selected(::google::protobuf::int32 value);

  // optional int32 cde_last_row_count = 4;
  inline bool has_cde_last_row_count() const;
  inline void clear_cde_last_row_count();
  static const int kCdeLastRowCountFieldNumber = 4;
  inline ::google::protobuf::int32 cde_last_row_count() const;
  inline void set_cde_last_row_count(::google::protobuf::int32 value);

  // optional int32 cde_last_col_count = 5;
  inline bool has_cde_last_col_count() const;
  inline void clear_cde_last_col_count();
  static const int kCdeLastColCountFieldNumber = 5;
  inline ::google::protobuf::int32 cde_last_col_count() const;
  inline void set_cde_last_col_count(::google::protobuf::int32 value);

  // optional bool cde_use_full_keyboard = 6;
  inline bool has_cde_use_full_keyboard() const;
  inline void clear_cde_use_full_keyboard();
  static const int kCdeUseFullKeyboardFieldNumber = 6;
  inline bool cde_use_full_keyboard() const;
  inline void set_cde_use_full_keyboard(bool value);

  // @@protoc_insertion_point(class_scope:TSCH.ChartUIState)
 private:
  inline void set_has_chart();
  inline void clear_has_chart();
  inline void set_has_cde_last_row_selected();
  inline void clear_has_cde_last_row_selected();
  inline void set_has_cde_last_col_selected();
  inline void clear_has_cde_last_col_selected();
  inline void set_has_cde_last_row_count();
  inline void clear_has_cde_last_row_count();
  inline void set_has_cde_last_col_count();
  inline void clear_has_cde_last_col_count();
  inline void set_has_cde_use_full_keyboard();
  inline void clear_has_cde_use_full_keyboard();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSP::Reference* chart_;
  ::google::protobuf::int32 cde_last_row_selected_;
  ::google::protobuf::int32 cde_last_col_selected_;
  ::google::protobuf::int32 cde_last_row_count_;
  ::google::protobuf::int32 cde_last_col_count_;
  bool cde_use_full_keyboard_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_TSCHArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eproto();

  void InitAsDefaultInstance();
  static ChartUIState* default_instance_;
};
// -------------------------------------------------------------------

class ChartFormatStructExtensions : public ::google::protobuf::Message {
 public:
  ChartFormatStructExtensions();
  virtual ~ChartFormatStructExtensions();

  ChartFormatStructExtensions(const ChartFormatStructExtensions& from);

  inline ChartFormatStructExtensions& operator=(const ChartFormatStructExtensions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartFormatStructExtensions& default_instance();

  void Swap(ChartFormatStructExtensions* other);

  // implements Message ----------------------------------------------

  ChartFormatStructExtensions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartFormatStructExtensions& from);
  void MergeFrom(const ChartFormatStructExtensions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  static const int kPrefixFieldNumber = 10000;
  static ::google::protobuf::internal::ExtensionIdentifier< ::TSK::FormatStructArchive,
      ::google::protobuf::internal::StringTypeTraits, 9, false >
    prefix;
  static const int kSuffixFieldNumber = 10001;
  static ::google::protobuf::internal::ExtensionIdentifier< ::TSK::FormatStructArchive,
      ::google::protobuf::internal::StringTypeTraits, 9, false >
    suffix;
  // @@protoc_insertion_point(class_scope:TSCH.ChartFormatStructExtensions)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_TSCHArchives_2eproto();
  friend void protobuf_AssignDesc_TSCHArchives_2eproto();
  friend void protobuf_ShutdownFile_TSCHArchives_2eproto();

  void InitAsDefaultInstance();
  static ChartFormatStructExtensions* default_instance_;
};
// ===================================================================

static const int kScene3DSettingsConstantDepthFieldNumber = 10002;
extern ::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  scene3d_settings_constant_depth;
static const int kLastAppliedFillSetLookupStringFieldNumber = 10004;
extern ::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  last_applied_fill_set_lookup_string;
static const int kSeriesSupportsCustomNumberFormatFieldNumber = 10001;
extern ::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartSeriesNonStyleArchive,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  series_supports_custom_number_format;
static const int kSeriesSupportsCustomDateFormatFieldNumber = 10002;
extern ::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartSeriesNonStyleArchive,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  series_supports_custom_date_format;
static const int kAxisSupportsCustomNumberFormatFieldNumber = 10001;
extern ::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartAxisNonStyleArchive,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  axis_supports_custom_number_format;
static const int kAxisSupportsCustomDateFormatFieldNumber = 10002;
extern ::google::protobuf::internal::ExtensionIdentifier< ::TSCH::ChartAxisNonStyleArchive,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  axis_supports_custom_date_format;

// ===================================================================

// ChartDrawableArchive

// optional .TSD.DrawableArchive super = 1;
inline bool ChartDrawableArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChartDrawableArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChartDrawableArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChartDrawableArchive::clear_super() {
  if (super_ != NULL) super_->::TSD::DrawableArchive::Clear();
  clear_has_super();
}
inline const ::TSD::DrawableArchive& ChartDrawableArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSD::DrawableArchive* ChartDrawableArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSD::DrawableArchive;
  return super_;
}
inline ::TSD::DrawableArchive* ChartDrawableArchive::release_super() {
  clear_has_super();
  ::TSD::DrawableArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void ChartDrawableArchive::set_allocated_super(::TSD::DrawableArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// -------------------------------------------------------------------

// ChartArchive

// optional .TSCH.ChartType chart_type = 1;
inline bool ChartArchive::has_chart_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChartArchive::set_has_chart_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChartArchive::clear_has_chart_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChartArchive::clear_chart_type() {
  chart_type_ = 0;
  clear_has_chart_type();
}
inline ::TSCH::ChartType ChartArchive::chart_type() const {
  return static_cast< ::TSCH::ChartType >(chart_type_);
}
inline void ChartArchive::set_chart_type(::TSCH::ChartType value) {
  assert(::TSCH::ChartType_IsValid(value));
  set_has_chart_type();
  chart_type_ = value;
}

// optional .TSCH.ScatterFormat scatter_format = 2;
inline bool ChartArchive::has_scatter_format() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChartArchive::set_has_scatter_format() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChartArchive::clear_has_scatter_format() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChartArchive::clear_scatter_format() {
  scatter_format_ = 0;
  clear_has_scatter_format();
}
inline ::TSCH::ScatterFormat ChartArchive::scatter_format() const {
  return static_cast< ::TSCH::ScatterFormat >(scatter_format_);
}
inline void ChartArchive::set_scatter_format(::TSCH::ScatterFormat value) {
  assert(::TSCH::ScatterFormat_IsValid(value));
  set_has_scatter_format();
  scatter_format_ = value;
}

// optional .TSCH.RectArchive legend_frame = 3;
inline bool ChartArchive::has_legend_frame() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChartArchive::set_has_legend_frame() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChartArchive::clear_has_legend_frame() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChartArchive::clear_legend_frame() {
  if (legend_frame_ != NULL) legend_frame_->::TSCH::RectArchive::Clear();
  clear_has_legend_frame();
}
inline const ::TSCH::RectArchive& ChartArchive::legend_frame() const {
  return legend_frame_ != NULL ? *legend_frame_ : *default_instance_->legend_frame_;
}
inline ::TSCH::RectArchive* ChartArchive::mutable_legend_frame() {
  set_has_legend_frame();
  if (legend_frame_ == NULL) legend_frame_ = new ::TSCH::RectArchive;
  return legend_frame_;
}
inline ::TSCH::RectArchive* ChartArchive::release_legend_frame() {
  clear_has_legend_frame();
  ::TSCH::RectArchive* temp = legend_frame_;
  legend_frame_ = NULL;
  return temp;
}
inline void ChartArchive::set_allocated_legend_frame(::TSCH::RectArchive* legend_frame) {
  delete legend_frame_;
  legend_frame_ = legend_frame;
  if (legend_frame) {
    set_has_legend_frame();
  } else {
    clear_has_legend_frame();
  }
}

// optional .TSP.Reference preset = 4;
inline bool ChartArchive::has_preset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChartArchive::set_has_preset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChartArchive::clear_has_preset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChartArchive::clear_preset() {
  if (preset_ != NULL) preset_->::TSP::Reference::Clear();
  clear_has_preset();
}
inline const ::TSP::Reference& ChartArchive::preset() const {
  return preset_ != NULL ? *preset_ : *default_instance_->preset_;
}
inline ::TSP::Reference* ChartArchive::mutable_preset() {
  set_has_preset();
  if (preset_ == NULL) preset_ = new ::TSP::Reference;
  return preset_;
}
inline ::TSP::Reference* ChartArchive::release_preset() {
  clear_has_preset();
  ::TSP::Reference* temp = preset_;
  preset_ = NULL;
  return temp;
}
inline void ChartArchive::set_allocated_preset(::TSP::Reference* preset) {
  delete preset_;
  preset_ = preset;
  if (preset) {
    set_has_preset();
  } else {
    clear_has_preset();
  }
}

// optional .TSCH.SeriesDirection series_direction = 5;
inline bool ChartArchive::has_series_direction() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChartArchive::set_has_series_direction() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChartArchive::clear_has_series_direction() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChartArchive::clear_series_direction() {
  series_direction_ = 0;
  clear_has_series_direction();
}
inline ::TSCH::SeriesDirection ChartArchive::series_direction() const {
  return static_cast< ::TSCH::SeriesDirection >(series_direction_);
}
inline void ChartArchive::set_series_direction(::TSCH::SeriesDirection value) {
  assert(::TSCH::SeriesDirection_IsValid(value));
  set_has_series_direction();
  series_direction_ = value;
}

// optional bool contains_default_data = 6;
inline bool ChartArchive::has_contains_default_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChartArchive::set_has_contains_default_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChartArchive::clear_has_contains_default_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChartArchive::clear_contains_default_data() {
  contains_default_data_ = false;
  clear_has_contains_default_data();
}
inline bool ChartArchive::contains_default_data() const {
  return contains_default_data_;
}
inline void ChartArchive::set_contains_default_data(bool value) {
  set_has_contains_default_data();
  contains_default_data_ = value;
}

// optional .TSCH.ChartGridArchive grid = 7;
inline bool ChartArchive::has_grid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChartArchive::set_has_grid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChartArchive::clear_has_grid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChartArchive::clear_grid() {
  if (grid_ != NULL) grid_->::TSCH::ChartGridArchive::Clear();
  clear_has_grid();
}
inline const ::TSCH::ChartGridArchive& ChartArchive::grid() const {
  return grid_ != NULL ? *grid_ : *default_instance_->grid_;
}
inline ::TSCH::ChartGridArchive* ChartArchive::mutable_grid() {
  set_has_grid();
  if (grid_ == NULL) grid_ = new ::TSCH::ChartGridArchive;
  return grid_;
}
inline ::TSCH::ChartGridArchive* ChartArchive::release_grid() {
  clear_has_grid();
  ::TSCH::ChartGridArchive* temp = grid_;
  grid_ = NULL;
  return temp;
}
inline void ChartArchive::set_allocated_grid(::TSCH::ChartGridArchive* grid) {
  delete grid_;
  grid_ = grid;
  if (grid) {
    set_has_grid();
  } else {
    clear_has_grid();
  }
}

// optional .TSP.Reference mediator = 8;
inline bool ChartArchive::has_mediator() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChartArchive::set_has_mediator() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChartArchive::clear_has_mediator() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChartArchive::clear_mediator() {
  if (mediator_ != NULL) mediator_->::TSP::Reference::Clear();
  clear_has_mediator();
}
inline const ::TSP::Reference& ChartArchive::mediator() const {
  return mediator_ != NULL ? *mediator_ : *default_instance_->mediator_;
}
inline ::TSP::Reference* ChartArchive::mutable_mediator() {
  set_has_mediator();
  if (mediator_ == NULL) mediator_ = new ::TSP::Reference;
  return mediator_;
}
inline ::TSP::Reference* ChartArchive::release_mediator() {
  clear_has_mediator();
  ::TSP::Reference* temp = mediator_;
  mediator_ = NULL;
  return temp;
}
inline void ChartArchive::set_allocated_mediator(::TSP::Reference* mediator) {
  delete mediator_;
  mediator_ = mediator;
  if (mediator) {
    set_has_mediator();
  } else {
    clear_has_mediator();
  }
}

// optional .TSP.Reference chart_style = 9;
inline bool ChartArchive::has_chart_style() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChartArchive::set_has_chart_style() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChartArchive::clear_has_chart_style() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChartArchive::clear_chart_style() {
  if (chart_style_ != NULL) chart_style_->::TSP::Reference::Clear();
  clear_has_chart_style();
}
inline const ::TSP::Reference& ChartArchive::chart_style() const {
  return chart_style_ != NULL ? *chart_style_ : *default_instance_->chart_style_;
}
inline ::TSP::Reference* ChartArchive::mutable_chart_style() {
  set_has_chart_style();
  if (chart_style_ == NULL) chart_style_ = new ::TSP::Reference;
  return chart_style_;
}
inline ::TSP::Reference* ChartArchive::release_chart_style() {
  clear_has_chart_style();
  ::TSP::Reference* temp = chart_style_;
  chart_style_ = NULL;
  return temp;
}
inline void ChartArchive::set_allocated_chart_style(::TSP::Reference* chart_style) {
  delete chart_style_;
  chart_style_ = chart_style;
  if (chart_style) {
    set_has_chart_style();
  } else {
    clear_has_chart_style();
  }
}

// optional .TSP.Reference chart_non_style = 10;
inline bool ChartArchive::has_chart_non_style() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChartArchive::set_has_chart_non_style() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ChartArchive::clear_has_chart_non_style() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ChartArchive::clear_chart_non_style() {
  if (chart_non_style_ != NULL) chart_non_style_->::TSP::Reference::Clear();
  clear_has_chart_non_style();
}
inline const ::TSP::Reference& ChartArchive::chart_non_style() const {
  return chart_non_style_ != NULL ? *chart_non_style_ : *default_instance_->chart_non_style_;
}
inline ::TSP::Reference* ChartArchive::mutable_chart_non_style() {
  set_has_chart_non_style();
  if (chart_non_style_ == NULL) chart_non_style_ = new ::TSP::Reference;
  return chart_non_style_;
}
inline ::TSP::Reference* ChartArchive::release_chart_non_style() {
  clear_has_chart_non_style();
  ::TSP::Reference* temp = chart_non_style_;
  chart_non_style_ = NULL;
  return temp;
}
inline void ChartArchive::set_allocated_chart_non_style(::TSP::Reference* chart_non_style) {
  delete chart_non_style_;
  chart_non_style_ = chart_non_style;
  if (chart_non_style) {
    set_has_chart_non_style();
  } else {
    clear_has_chart_non_style();
  }
}

// optional .TSP.Reference legend_style = 11;
inline bool ChartArchive::has_legend_style() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChartArchive::set_has_legend_style() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ChartArchive::clear_has_legend_style() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ChartArchive::clear_legend_style() {
  if (legend_style_ != NULL) legend_style_->::TSP::Reference::Clear();
  clear_has_legend_style();
}
inline const ::TSP::Reference& ChartArchive::legend_style() const {
  return legend_style_ != NULL ? *legend_style_ : *default_instance_->legend_style_;
}
inline ::TSP::Reference* ChartArchive::mutable_legend_style() {
  set_has_legend_style();
  if (legend_style_ == NULL) legend_style_ = new ::TSP::Reference;
  return legend_style_;
}
inline ::TSP::Reference* ChartArchive::release_legend_style() {
  clear_has_legend_style();
  ::TSP::Reference* temp = legend_style_;
  legend_style_ = NULL;
  return temp;
}
inline void ChartArchive::set_allocated_legend_style(::TSP::Reference* legend_style) {
  delete legend_style_;
  legend_style_ = legend_style;
  if (legend_style) {
    set_has_legend_style();
  } else {
    clear_has_legend_style();
  }
}

// optional .TSP.Reference legend_non_style = 12;
inline bool ChartArchive::has_legend_non_style() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ChartArchive::set_has_legend_non_style() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ChartArchive::clear_has_legend_non_style() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ChartArchive::clear_legend_non_style() {
  if (legend_non_style_ != NULL) legend_non_style_->::TSP::Reference::Clear();
  clear_has_legend_non_style();
}
inline const ::TSP::Reference& ChartArchive::legend_non_style() const {
  return legend_non_style_ != NULL ? *legend_non_style_ : *default_instance_->legend_non_style_;
}
inline ::TSP::Reference* ChartArchive::mutable_legend_non_style() {
  set_has_legend_non_style();
  if (legend_non_style_ == NULL) legend_non_style_ = new ::TSP::Reference;
  return legend_non_style_;
}
inline ::TSP::Reference* ChartArchive::release_legend_non_style() {
  clear_has_legend_non_style();
  ::TSP::Reference* temp = legend_non_style_;
  legend_non_style_ = NULL;
  return temp;
}
inline void ChartArchive::set_allocated_legend_non_style(::TSP::Reference* legend_non_style) {
  delete legend_non_style_;
  legend_non_style_ = legend_non_style;
  if (legend_non_style) {
    set_has_legend_non_style();
  } else {
    clear_has_legend_non_style();
  }
}

// repeated .TSP.Reference value_axis_styles = 13;
inline int ChartArchive::value_axis_styles_size() const {
  return value_axis_styles_.size();
}
inline void ChartArchive::clear_value_axis_styles() {
  value_axis_styles_.Clear();
}
inline const ::TSP::Reference& ChartArchive::value_axis_styles(int index) const {
  return value_axis_styles_.Get(index);
}
inline ::TSP::Reference* ChartArchive::mutable_value_axis_styles(int index) {
  return value_axis_styles_.Mutable(index);
}
inline ::TSP::Reference* ChartArchive::add_value_axis_styles() {
  return value_axis_styles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
ChartArchive::value_axis_styles() const {
  return value_axis_styles_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
ChartArchive::mutable_value_axis_styles() {
  return &value_axis_styles_;
}

// repeated .TSP.Reference value_axis_nonstyles = 14;
inline int ChartArchive::value_axis_nonstyles_size() const {
  return value_axis_nonstyles_.size();
}
inline void ChartArchive::clear_value_axis_nonstyles() {
  value_axis_nonstyles_.Clear();
}
inline const ::TSP::Reference& ChartArchive::value_axis_nonstyles(int index) const {
  return value_axis_nonstyles_.Get(index);
}
inline ::TSP::Reference* ChartArchive::mutable_value_axis_nonstyles(int index) {
  return value_axis_nonstyles_.Mutable(index);
}
inline ::TSP::Reference* ChartArchive::add_value_axis_nonstyles() {
  return value_axis_nonstyles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
ChartArchive::value_axis_nonstyles() const {
  return value_axis_nonstyles_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
ChartArchive::mutable_value_axis_nonstyles() {
  return &value_axis_nonstyles_;
}

// repeated .TSP.Reference category_axis_styles = 15;
inline int ChartArchive::category_axis_styles_size() const {
  return category_axis_styles_.size();
}
inline void ChartArchive::clear_category_axis_styles() {
  category_axis_styles_.Clear();
}
inline const ::TSP::Reference& ChartArchive::category_axis_styles(int index) const {
  return category_axis_styles_.Get(index);
}
inline ::TSP::Reference* ChartArchive::mutable_category_axis_styles(int index) {
  return category_axis_styles_.Mutable(index);
}
inline ::TSP::Reference* ChartArchive::add_category_axis_styles() {
  return category_axis_styles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
ChartArchive::category_axis_styles() const {
  return category_axis_styles_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
ChartArchive::mutable_category_axis_styles() {
  return &category_axis_styles_;
}

// repeated .TSP.Reference category_axis_nonstyles = 16;
inline int ChartArchive::category_axis_nonstyles_size() const {
  return category_axis_nonstyles_.size();
}
inline void ChartArchive::clear_category_axis_nonstyles() {
  category_axis_nonstyles_.Clear();
}
inline const ::TSP::Reference& ChartArchive::category_axis_nonstyles(int index) const {
  return category_axis_nonstyles_.Get(index);
}
inline ::TSP::Reference* ChartArchive::mutable_category_axis_nonstyles(int index) {
  return category_axis_nonstyles_.Mutable(index);
}
inline ::TSP::Reference* ChartArchive::add_category_axis_nonstyles() {
  return category_axis_nonstyles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
ChartArchive::category_axis_nonstyles() const {
  return category_axis_nonstyles_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
ChartArchive::mutable_category_axis_nonstyles() {
  return &category_axis_nonstyles_;
}

// repeated .TSP.Reference series_theme_styles = 17;
inline int ChartArchive::series_theme_styles_size() const {
  return series_theme_styles_.size();
}
inline void ChartArchive::clear_series_theme_styles() {
  series_theme_styles_.Clear();
}
inline const ::TSP::Reference& ChartArchive::series_theme_styles(int index) const {
  return series_theme_styles_.Get(index);
}
inline ::TSP::Reference* ChartArchive::mutable_series_theme_styles(int index) {
  return series_theme_styles_.Mutable(index);
}
inline ::TSP::Reference* ChartArchive::add_series_theme_styles() {
  return series_theme_styles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
ChartArchive::series_theme_styles() const {
  return series_theme_styles_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
ChartArchive::mutable_series_theme_styles() {
  return &series_theme_styles_;
}

// optional .TSCH.SparseReferenceArrayArchive series_private_styles = 18;
inline bool ChartArchive::has_series_private_styles() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ChartArchive::set_has_series_private_styles() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ChartArchive::clear_has_series_private_styles() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ChartArchive::clear_series_private_styles() {
  if (series_private_styles_ != NULL) series_private_styles_->::TSCH::SparseReferenceArrayArchive::Clear();
  clear_has_series_private_styles();
}
inline const ::TSCH::SparseReferenceArrayArchive& ChartArchive::series_private_styles() const {
  return series_private_styles_ != NULL ? *series_private_styles_ : *default_instance_->series_private_styles_;
}
inline ::TSCH::SparseReferenceArrayArchive* ChartArchive::mutable_series_private_styles() {
  set_has_series_private_styles();
  if (series_private_styles_ == NULL) series_private_styles_ = new ::TSCH::SparseReferenceArrayArchive;
  return series_private_styles_;
}
inline ::TSCH::SparseReferenceArrayArchive* ChartArchive::release_series_private_styles() {
  clear_has_series_private_styles();
  ::TSCH::SparseReferenceArrayArchive* temp = series_private_styles_;
  series_private_styles_ = NULL;
  return temp;
}
inline void ChartArchive::set_allocated_series_private_styles(::TSCH::SparseReferenceArrayArchive* series_private_styles) {
  delete series_private_styles_;
  series_private_styles_ = series_private_styles;
  if (series_private_styles) {
    set_has_series_private_styles();
  } else {
    clear_has_series_private_styles();
  }
}

// optional .TSCH.SparseReferenceArrayArchive series_non_styles = 19;
inline bool ChartArchive::has_series_non_styles() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ChartArchive::set_has_series_non_styles() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ChartArchive::clear_has_series_non_styles() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ChartArchive::clear_series_non_styles() {
  if (series_non_styles_ != NULL) series_non_styles_->::TSCH::SparseReferenceArrayArchive::Clear();
  clear_has_series_non_styles();
}
inline const ::TSCH::SparseReferenceArrayArchive& ChartArchive::series_non_styles() const {
  return series_non_styles_ != NULL ? *series_non_styles_ : *default_instance_->series_non_styles_;
}
inline ::TSCH::SparseReferenceArrayArchive* ChartArchive::mutable_series_non_styles() {
  set_has_series_non_styles();
  if (series_non_styles_ == NULL) series_non_styles_ = new ::TSCH::SparseReferenceArrayArchive;
  return series_non_styles_;
}
inline ::TSCH::SparseReferenceArrayArchive* ChartArchive::release_series_non_styles() {
  clear_has_series_non_styles();
  ::TSCH::SparseReferenceArrayArchive* temp = series_non_styles_;
  series_non_styles_ = NULL;
  return temp;
}
inline void ChartArchive::set_allocated_series_non_styles(::TSCH::SparseReferenceArrayArchive* series_non_styles) {
  delete series_non_styles_;
  series_non_styles_ = series_non_styles;
  if (series_non_styles) {
    set_has_series_non_styles();
  } else {
    clear_has_series_non_styles();
  }
}

// repeated .TSP.Reference paragraph_styles = 20;
inline int ChartArchive::paragraph_styles_size() const {
  return paragraph_styles_.size();
}
inline void ChartArchive::clear_paragraph_styles() {
  paragraph_styles_.Clear();
}
inline const ::TSP::Reference& ChartArchive::paragraph_styles(int index) const {
  return paragraph_styles_.Get(index);
}
inline ::TSP::Reference* ChartArchive::mutable_paragraph_styles(int index) {
  return paragraph_styles_.Mutable(index);
}
inline ::TSP::Reference* ChartArchive::add_paragraph_styles() {
  return paragraph_styles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
ChartArchive::paragraph_styles() const {
  return paragraph_styles_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
ChartArchive::mutable_paragraph_styles() {
  return &paragraph_styles_;
}

// optional uint32 multidataset_index = 21;
inline bool ChartArchive::has_multidataset_index() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ChartArchive::set_has_multidataset_index() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ChartArchive::clear_has_multidataset_index() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ChartArchive::clear_multidataset_index() {
  multidataset_index_ = 0u;
  clear_has_multidataset_index();
}
inline ::google::protobuf::uint32 ChartArchive::multidataset_index() const {
  return multidataset_index_;
}
inline void ChartArchive::set_multidataset_index(::google::protobuf::uint32 value) {
  set_has_multidataset_index();
  multidataset_index_ = value;
}

// optional bool needs_calc_engine_deferred_import_action = 22;
inline bool ChartArchive::has_needs_calc_engine_deferred_import_action() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ChartArchive::set_has_needs_calc_engine_deferred_import_action() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ChartArchive::clear_has_needs_calc_engine_deferred_import_action() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ChartArchive::clear_needs_calc_engine_deferred_import_action() {
  needs_calc_engine_deferred_import_action_ = false;
  clear_has_needs_calc_engine_deferred_import_action();
}
inline bool ChartArchive::needs_calc_engine_deferred_import_action() const {
  return needs_calc_engine_deferred_import_action_;
}
inline void ChartArchive::set_needs_calc_engine_deferred_import_action(bool value) {
  set_has_needs_calc_engine_deferred_import_action();
  needs_calc_engine_deferred_import_action_ = value;
}

// -------------------------------------------------------------------

// ChartPasteboardAdditionsArchive

// -------------------------------------------------------------------

// ChartGridArchive_GridRow_GridValue

// optional double numeric_value = 1;
inline bool ChartGridArchive_GridRow_GridValue::has_numeric_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChartGridArchive_GridRow_GridValue::set_has_numeric_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChartGridArchive_GridRow_GridValue::clear_has_numeric_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChartGridArchive_GridRow_GridValue::clear_numeric_value() {
  numeric_value_ = 0;
  clear_has_numeric_value();
}
inline double ChartGridArchive_GridRow_GridValue::numeric_value() const {
  return numeric_value_;
}
inline void ChartGridArchive_GridRow_GridValue::set_numeric_value(double value) {
  set_has_numeric_value();
  numeric_value_ = value;
}

// optional double date_value_1_0 = 2;
inline bool ChartGridArchive_GridRow_GridValue::has_date_value_1_0() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChartGridArchive_GridRow_GridValue::set_has_date_value_1_0() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChartGridArchive_GridRow_GridValue::clear_has_date_value_1_0() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChartGridArchive_GridRow_GridValue::clear_date_value_1_0() {
  date_value_1_0_ = 0;
  clear_has_date_value_1_0();
}
inline double ChartGridArchive_GridRow_GridValue::date_value_1_0() const {
  return date_value_1_0_;
}
inline void ChartGridArchive_GridRow_GridValue::set_date_value_1_0(double value) {
  set_has_date_value_1_0();
  date_value_1_0_ = value;
}

// optional double duration_value = 3;
inline bool ChartGridArchive_GridRow_GridValue::has_duration_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChartGridArchive_GridRow_GridValue::set_has_duration_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChartGridArchive_GridRow_GridValue::clear_has_duration_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChartGridArchive_GridRow_GridValue::clear_duration_value() {
  duration_value_ = 0;
  clear_has_duration_value();
}
inline double ChartGridArchive_GridRow_GridValue::duration_value() const {
  return duration_value_;
}
inline void ChartGridArchive_GridRow_GridValue::set_duration_value(double value) {
  set_has_duration_value();
  duration_value_ = value;
}

// optional double date_value = 4;
inline bool ChartGridArchive_GridRow_GridValue::has_date_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChartGridArchive_GridRow_GridValue::set_has_date_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChartGridArchive_GridRow_GridValue::clear_has_date_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChartGridArchive_GridRow_GridValue::clear_date_value() {
  date_value_ = 0;
  clear_has_date_value();
}
inline double ChartGridArchive_GridRow_GridValue::date_value() const {
  return date_value_;
}
inline void ChartGridArchive_GridRow_GridValue::set_date_value(double value) {
  set_has_date_value();
  date_value_ = value;
}

// -------------------------------------------------------------------

// ChartGridArchive_GridRow

// repeated .TSCH.ChartGridArchive.GridRow.GridValue value = 1;
inline int ChartGridArchive_GridRow::value_size() const {
  return value_.size();
}
inline void ChartGridArchive_GridRow::clear_value() {
  value_.Clear();
}
inline const ::TSCH::ChartGridArchive_GridRow_GridValue& ChartGridArchive_GridRow::value(int index) const {
  return value_.Get(index);
}
inline ::TSCH::ChartGridArchive_GridRow_GridValue* ChartGridArchive_GridRow::mutable_value(int index) {
  return value_.Mutable(index);
}
inline ::TSCH::ChartGridArchive_GridRow_GridValue* ChartGridArchive_GridRow::add_value() {
  return value_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSCH::ChartGridArchive_GridRow_GridValue >&
ChartGridArchive_GridRow::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSCH::ChartGridArchive_GridRow_GridValue >*
ChartGridArchive_GridRow::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// ChartGridArchive_ChartGridRowColumnIdMap_Entry

// required string uniqueId = 1;
inline bool ChartGridArchive_ChartGridRowColumnIdMap_Entry::has_uniqueid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChartGridArchive_ChartGridRowColumnIdMap_Entry::set_has_uniqueid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChartGridArchive_ChartGridRowColumnIdMap_Entry::clear_has_uniqueid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChartGridArchive_ChartGridRowColumnIdMap_Entry::clear_uniqueid() {
  if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
    uniqueid_->clear();
  }
  clear_has_uniqueid();
}
inline const ::std::string& ChartGridArchive_ChartGridRowColumnIdMap_Entry::uniqueid() const {
  return *uniqueid_;
}
inline void ChartGridArchive_ChartGridRowColumnIdMap_Entry::set_uniqueid(const ::std::string& value) {
  set_has_uniqueid();
  if (uniqueid_ == &::google::protobuf::internal::kEmptyString) {
    uniqueid_ = new ::std::string;
  }
  uniqueid_->assign(value);
}
inline void ChartGridArchive_ChartGridRowColumnIdMap_Entry::set_uniqueid(const char* value) {
  set_has_uniqueid();
  if (uniqueid_ == &::google::protobuf::internal::kEmptyString) {
    uniqueid_ = new ::std::string;
  }
  uniqueid_->assign(value);
}
inline void ChartGridArchive_ChartGridRowColumnIdMap_Entry::set_uniqueid(const char* value, size_t size) {
  set_has_uniqueid();
  if (uniqueid_ == &::google::protobuf::internal::kEmptyString) {
    uniqueid_ = new ::std::string;
  }
  uniqueid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChartGridArchive_ChartGridRowColumnIdMap_Entry::mutable_uniqueid() {
  set_has_uniqueid();
  if (uniqueid_ == &::google::protobuf::internal::kEmptyString) {
    uniqueid_ = new ::std::string;
  }
  return uniqueid_;
}
inline ::std::string* ChartGridArchive_ChartGridRowColumnIdMap_Entry::release_uniqueid() {
  clear_has_uniqueid();
  if (uniqueid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uniqueid_;
    uniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChartGridArchive_ChartGridRowColumnIdMap_Entry::set_allocated_uniqueid(::std::string* uniqueid) {
  if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
    delete uniqueid_;
  }
  if (uniqueid) {
    set_has_uniqueid();
    uniqueid_ = uniqueid;
  } else {
    clear_has_uniqueid();
    uniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 index = 2;
inline bool ChartGridArchive_ChartGridRowColumnIdMap_Entry::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChartGridArchive_ChartGridRowColumnIdMap_Entry::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChartGridArchive_ChartGridRowColumnIdMap_Entry::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChartGridArchive_ChartGridRowColumnIdMap_Entry::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 ChartGridArchive_ChartGridRowColumnIdMap_Entry::index() const {
  return index_;
}
inline void ChartGridArchive_ChartGridRowColumnIdMap_Entry::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// ChartGridArchive_ChartGridRowColumnIdMap

// repeated .TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry row_id_map = 1;
inline int ChartGridArchive_ChartGridRowColumnIdMap::row_id_map_size() const {
  return row_id_map_.size();
}
inline void ChartGridArchive_ChartGridRowColumnIdMap::clear_row_id_map() {
  row_id_map_.Clear();
}
inline const ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry& ChartGridArchive_ChartGridRowColumnIdMap::row_id_map(int index) const {
  return row_id_map_.Get(index);
}
inline ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry* ChartGridArchive_ChartGridRowColumnIdMap::mutable_row_id_map(int index) {
  return row_id_map_.Mutable(index);
}
inline ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry* ChartGridArchive_ChartGridRowColumnIdMap::add_row_id_map() {
  return row_id_map_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry >&
ChartGridArchive_ChartGridRowColumnIdMap::row_id_map() const {
  return row_id_map_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry >*
ChartGridArchive_ChartGridRowColumnIdMap::mutable_row_id_map() {
  return &row_id_map_;
}

// repeated .TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry column_id_map = 2;
inline int ChartGridArchive_ChartGridRowColumnIdMap::column_id_map_size() const {
  return column_id_map_.size();
}
inline void ChartGridArchive_ChartGridRowColumnIdMap::clear_column_id_map() {
  column_id_map_.Clear();
}
inline const ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry& ChartGridArchive_ChartGridRowColumnIdMap::column_id_map(int index) const {
  return column_id_map_.Get(index);
}
inline ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry* ChartGridArchive_ChartGridRowColumnIdMap::mutable_column_id_map(int index) {
  return column_id_map_.Mutable(index);
}
inline ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry* ChartGridArchive_ChartGridRowColumnIdMap::add_column_id_map() {
  return column_id_map_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry >&
ChartGridArchive_ChartGridRowColumnIdMap::column_id_map() const {
  return column_id_map_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry >*
ChartGridArchive_ChartGridRowColumnIdMap::mutable_column_id_map() {
  return &column_id_map_;
}

// -------------------------------------------------------------------

// ChartGridArchive

// repeated string row_name = 1;
inline int ChartGridArchive::row_name_size() const {
  return row_name_.size();
}
inline void ChartGridArchive::clear_row_name() {
  row_name_.Clear();
}
inline const ::std::string& ChartGridArchive::row_name(int index) const {
  return row_name_.Get(index);
}
inline ::std::string* ChartGridArchive::mutable_row_name(int index) {
  return row_name_.Mutable(index);
}
inline void ChartGridArchive::set_row_name(int index, const ::std::string& value) {
  row_name_.Mutable(index)->assign(value);
}
inline void ChartGridArchive::set_row_name(int index, const char* value) {
  row_name_.Mutable(index)->assign(value);
}
inline void ChartGridArchive::set_row_name(int index, const char* value, size_t size) {
  row_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChartGridArchive::add_row_name() {
  return row_name_.Add();
}
inline void ChartGridArchive::add_row_name(const ::std::string& value) {
  row_name_.Add()->assign(value);
}
inline void ChartGridArchive::add_row_name(const char* value) {
  row_name_.Add()->assign(value);
}
inline void ChartGridArchive::add_row_name(const char* value, size_t size) {
  row_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChartGridArchive::row_name() const {
  return row_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ChartGridArchive::mutable_row_name() {
  return &row_name_;
}

// repeated string column_name = 2;
inline int ChartGridArchive::column_name_size() const {
  return column_name_.size();
}
inline void ChartGridArchive::clear_column_name() {
  column_name_.Clear();
}
inline const ::std::string& ChartGridArchive::column_name(int index) const {
  return column_name_.Get(index);
}
inline ::std::string* ChartGridArchive::mutable_column_name(int index) {
  return column_name_.Mutable(index);
}
inline void ChartGridArchive::set_column_name(int index, const ::std::string& value) {
  column_name_.Mutable(index)->assign(value);
}
inline void ChartGridArchive::set_column_name(int index, const char* value) {
  column_name_.Mutable(index)->assign(value);
}
inline void ChartGridArchive::set_column_name(int index, const char* value, size_t size) {
  column_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChartGridArchive::add_column_name() {
  return column_name_.Add();
}
inline void ChartGridArchive::add_column_name(const ::std::string& value) {
  column_name_.Add()->assign(value);
}
inline void ChartGridArchive::add_column_name(const char* value) {
  column_name_.Add()->assign(value);
}
inline void ChartGridArchive::add_column_name(const char* value, size_t size) {
  column_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChartGridArchive::column_name() const {
  return column_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ChartGridArchive::mutable_column_name() {
  return &column_name_;
}

// repeated .TSCH.ChartGridArchive.GridRow grid_row = 3;
inline int ChartGridArchive::grid_row_size() const {
  return grid_row_.size();
}
inline void ChartGridArchive::clear_grid_row() {
  grid_row_.Clear();
}
inline const ::TSCH::ChartGridArchive_GridRow& ChartGridArchive::grid_row(int index) const {
  return grid_row_.Get(index);
}
inline ::TSCH::ChartGridArchive_GridRow* ChartGridArchive::mutable_grid_row(int index) {
  return grid_row_.Mutable(index);
}
inline ::TSCH::ChartGridArchive_GridRow* ChartGridArchive::add_grid_row() {
  return grid_row_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSCH::ChartGridArchive_GridRow >&
ChartGridArchive::grid_row() const {
  return grid_row_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSCH::ChartGridArchive_GridRow >*
ChartGridArchive::mutable_grid_row() {
  return &grid_row_;
}

// optional .TSCH.ChartGridArchive.ChartGridRowColumnIdMap idMap = 4;
inline bool ChartGridArchive::has_idmap() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChartGridArchive::set_has_idmap() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChartGridArchive::clear_has_idmap() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChartGridArchive::clear_idmap() {
  if (idmap_ != NULL) idmap_->::TSCH::ChartGridArchive_ChartGridRowColumnIdMap::Clear();
  clear_has_idmap();
}
inline const ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap& ChartGridArchive::idmap() const {
  return idmap_ != NULL ? *idmap_ : *default_instance_->idmap_;
}
inline ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap* ChartGridArchive::mutable_idmap() {
  set_has_idmap();
  if (idmap_ == NULL) idmap_ = new ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap;
  return idmap_;
}
inline ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap* ChartGridArchive::release_idmap() {
  clear_has_idmap();
  ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap* temp = idmap_;
  idmap_ = NULL;
  return temp;
}
inline void ChartGridArchive::set_allocated_idmap(::TSCH::ChartGridArchive_ChartGridRowColumnIdMap* idmap) {
  delete idmap_;
  idmap_ = idmap;
  if (idmap) {
    set_has_idmap();
  } else {
    clear_has_idmap();
  }
}

// -------------------------------------------------------------------

// ChartMediatorArchive

// optional .TSP.Reference info = 1;
inline bool ChartMediatorArchive::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChartMediatorArchive::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChartMediatorArchive::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChartMediatorArchive::clear_info() {
  if (info_ != NULL) info_->::TSP::Reference::Clear();
  clear_has_info();
}
inline const ::TSP::Reference& ChartMediatorArchive::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::TSP::Reference* ChartMediatorArchive::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::TSP::Reference;
  return info_;
}
inline ::TSP::Reference* ChartMediatorArchive::release_info() {
  clear_has_info();
  ::TSP::Reference* temp = info_;
  info_ = NULL;
  return temp;
}
inline void ChartMediatorArchive::set_allocated_info(::TSP::Reference* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// repeated uint32 local_series_indexes = 2;
inline int ChartMediatorArchive::local_series_indexes_size() const {
  return local_series_indexes_.size();
}
inline void ChartMediatorArchive::clear_local_series_indexes() {
  local_series_indexes_.Clear();
}
inline ::google::protobuf::uint32 ChartMediatorArchive::local_series_indexes(int index) const {
  return local_series_indexes_.Get(index);
}
inline void ChartMediatorArchive::set_local_series_indexes(int index, ::google::protobuf::uint32 value) {
  local_series_indexes_.Set(index, value);
}
inline void ChartMediatorArchive::add_local_series_indexes(::google::protobuf::uint32 value) {
  local_series_indexes_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ChartMediatorArchive::local_series_indexes() const {
  return local_series_indexes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ChartMediatorArchive::mutable_local_series_indexes() {
  return &local_series_indexes_;
}

// repeated uint32 remote_series_indexes = 3;
inline int ChartMediatorArchive::remote_series_indexes_size() const {
  return remote_series_indexes_.size();
}
inline void ChartMediatorArchive::clear_remote_series_indexes() {
  remote_series_indexes_.Clear();
}
inline ::google::protobuf::uint32 ChartMediatorArchive::remote_series_indexes(int index) const {
  return remote_series_indexes_.Get(index);
}
inline void ChartMediatorArchive::set_remote_series_indexes(int index, ::google::protobuf::uint32 value) {
  remote_series_indexes_.Set(index, value);
}
inline void ChartMediatorArchive::add_remote_series_indexes(::google::protobuf::uint32 value) {
  remote_series_indexes_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ChartMediatorArchive::remote_series_indexes() const {
  return remote_series_indexes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ChartMediatorArchive::mutable_remote_series_indexes() {
  return &remote_series_indexes_;
}

// -------------------------------------------------------------------

// ChartStylePreset

// optional .TSP.Reference chart_style = 1;
inline bool ChartStylePreset::has_chart_style() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChartStylePreset::set_has_chart_style() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChartStylePreset::clear_has_chart_style() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChartStylePreset::clear_chart_style() {
  if (chart_style_ != NULL) chart_style_->::TSP::Reference::Clear();
  clear_has_chart_style();
}
inline const ::TSP::Reference& ChartStylePreset::chart_style() const {
  return chart_style_ != NULL ? *chart_style_ : *default_instance_->chart_style_;
}
inline ::TSP::Reference* ChartStylePreset::mutable_chart_style() {
  set_has_chart_style();
  if (chart_style_ == NULL) chart_style_ = new ::TSP::Reference;
  return chart_style_;
}
inline ::TSP::Reference* ChartStylePreset::release_chart_style() {
  clear_has_chart_style();
  ::TSP::Reference* temp = chart_style_;
  chart_style_ = NULL;
  return temp;
}
inline void ChartStylePreset::set_allocated_chart_style(::TSP::Reference* chart_style) {
  delete chart_style_;
  chart_style_ = chart_style;
  if (chart_style) {
    set_has_chart_style();
  } else {
    clear_has_chart_style();
  }
}

// optional .TSP.Reference legend_style = 2;
inline bool ChartStylePreset::has_legend_style() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChartStylePreset::set_has_legend_style() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChartStylePreset::clear_has_legend_style() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChartStylePreset::clear_legend_style() {
  if (legend_style_ != NULL) legend_style_->::TSP::Reference::Clear();
  clear_has_legend_style();
}
inline const ::TSP::Reference& ChartStylePreset::legend_style() const {
  return legend_style_ != NULL ? *legend_style_ : *default_instance_->legend_style_;
}
inline ::TSP::Reference* ChartStylePreset::mutable_legend_style() {
  set_has_legend_style();
  if (legend_style_ == NULL) legend_style_ = new ::TSP::Reference;
  return legend_style_;
}
inline ::TSP::Reference* ChartStylePreset::release_legend_style() {
  clear_has_legend_style();
  ::TSP::Reference* temp = legend_style_;
  legend_style_ = NULL;
  return temp;
}
inline void ChartStylePreset::set_allocated_legend_style(::TSP::Reference* legend_style) {
  delete legend_style_;
  legend_style_ = legend_style;
  if (legend_style) {
    set_has_legend_style();
  } else {
    clear_has_legend_style();
  }
}

// repeated .TSP.Reference value_axis_styles = 3;
inline int ChartStylePreset::value_axis_styles_size() const {
  return value_axis_styles_.size();
}
inline void ChartStylePreset::clear_value_axis_styles() {
  value_axis_styles_.Clear();
}
inline const ::TSP::Reference& ChartStylePreset::value_axis_styles(int index) const {
  return value_axis_styles_.Get(index);
}
inline ::TSP::Reference* ChartStylePreset::mutable_value_axis_styles(int index) {
  return value_axis_styles_.Mutable(index);
}
inline ::TSP::Reference* ChartStylePreset::add_value_axis_styles() {
  return value_axis_styles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
ChartStylePreset::value_axis_styles() const {
  return value_axis_styles_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
ChartStylePreset::mutable_value_axis_styles() {
  return &value_axis_styles_;
}

// repeated .TSP.Reference category_axis_styles = 4;
inline int ChartStylePreset::category_axis_styles_size() const {
  return category_axis_styles_.size();
}
inline void ChartStylePreset::clear_category_axis_styles() {
  category_axis_styles_.Clear();
}
inline const ::TSP::Reference& ChartStylePreset::category_axis_styles(int index) const {
  return category_axis_styles_.Get(index);
}
inline ::TSP::Reference* ChartStylePreset::mutable_category_axis_styles(int index) {
  return category_axis_styles_.Mutable(index);
}
inline ::TSP::Reference* ChartStylePreset::add_category_axis_styles() {
  return category_axis_styles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
ChartStylePreset::category_axis_styles() const {
  return category_axis_styles_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
ChartStylePreset::mutable_category_axis_styles() {
  return &category_axis_styles_;
}

// repeated .TSP.Reference series_styles = 5;
inline int ChartStylePreset::series_styles_size() const {
  return series_styles_.size();
}
inline void ChartStylePreset::clear_series_styles() {
  series_styles_.Clear();
}
inline const ::TSP::Reference& ChartStylePreset::series_styles(int index) const {
  return series_styles_.Get(index);
}
inline ::TSP::Reference* ChartStylePreset::mutable_series_styles(int index) {
  return series_styles_.Mutable(index);
}
inline ::TSP::Reference* ChartStylePreset::add_series_styles() {
  return series_styles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
ChartStylePreset::series_styles() const {
  return series_styles_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
ChartStylePreset::mutable_series_styles() {
  return &series_styles_;
}

// repeated .TSP.Reference paragraph_styles = 6;
inline int ChartStylePreset::paragraph_styles_size() const {
  return paragraph_styles_.size();
}
inline void ChartStylePreset::clear_paragraph_styles() {
  paragraph_styles_.Clear();
}
inline const ::TSP::Reference& ChartStylePreset::paragraph_styles(int index) const {
  return paragraph_styles_.Get(index);
}
inline ::TSP::Reference* ChartStylePreset::mutable_paragraph_styles(int index) {
  return paragraph_styles_.Mutable(index);
}
inline ::TSP::Reference* ChartStylePreset::add_paragraph_styles() {
  return paragraph_styles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
ChartStylePreset::paragraph_styles() const {
  return paragraph_styles_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
ChartStylePreset::mutable_paragraph_styles() {
  return &paragraph_styles_;
}

// optional bytes uuid = 7;
inline bool ChartStylePreset::has_uuid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChartStylePreset::set_has_uuid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChartStylePreset::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChartStylePreset::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& ChartStylePreset::uuid() const {
  return *uuid_;
}
inline void ChartStylePreset::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void ChartStylePreset::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void ChartStylePreset::set_uuid(const void* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChartStylePreset::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* ChartStylePreset::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChartStylePreset::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ChartPresetsArchive

// repeated .TSP.Reference chart_presets = 1;
inline int ChartPresetsArchive::chart_presets_size() const {
  return chart_presets_.size();
}
inline void ChartPresetsArchive::clear_chart_presets() {
  chart_presets_.Clear();
}
inline const ::TSP::Reference& ChartPresetsArchive::chart_presets(int index) const {
  return chart_presets_.Get(index);
}
inline ::TSP::Reference* ChartPresetsArchive::mutable_chart_presets(int index) {
  return chart_presets_.Mutable(index);
}
inline ::TSP::Reference* ChartPresetsArchive::add_chart_presets() {
  return chart_presets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
ChartPresetsArchive::chart_presets() const {
  return chart_presets_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
ChartPresetsArchive::mutable_chart_presets() {
  return &chart_presets_;
}

// -------------------------------------------------------------------

// PropertyValueStorageContainerArchive

// optional .TSP.Reference chart_style = 1;
inline bool PropertyValueStorageContainerArchive::has_chart_style() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PropertyValueStorageContainerArchive::set_has_chart_style() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PropertyValueStorageContainerArchive::clear_has_chart_style() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PropertyValueStorageContainerArchive::clear_chart_style() {
  if (chart_style_ != NULL) chart_style_->::TSP::Reference::Clear();
  clear_has_chart_style();
}
inline const ::TSP::Reference& PropertyValueStorageContainerArchive::chart_style() const {
  return chart_style_ != NULL ? *chart_style_ : *default_instance_->chart_style_;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::mutable_chart_style() {
  set_has_chart_style();
  if (chart_style_ == NULL) chart_style_ = new ::TSP::Reference;
  return chart_style_;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::release_chart_style() {
  clear_has_chart_style();
  ::TSP::Reference* temp = chart_style_;
  chart_style_ = NULL;
  return temp;
}
inline void PropertyValueStorageContainerArchive::set_allocated_chart_style(::TSP::Reference* chart_style) {
  delete chart_style_;
  chart_style_ = chart_style;
  if (chart_style) {
    set_has_chart_style();
  } else {
    clear_has_chart_style();
  }
}

// optional .TSP.Reference chart_nonstyle = 2;
inline bool PropertyValueStorageContainerArchive::has_chart_nonstyle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PropertyValueStorageContainerArchive::set_has_chart_nonstyle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PropertyValueStorageContainerArchive::clear_has_chart_nonstyle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PropertyValueStorageContainerArchive::clear_chart_nonstyle() {
  if (chart_nonstyle_ != NULL) chart_nonstyle_->::TSP::Reference::Clear();
  clear_has_chart_nonstyle();
}
inline const ::TSP::Reference& PropertyValueStorageContainerArchive::chart_nonstyle() const {
  return chart_nonstyle_ != NULL ? *chart_nonstyle_ : *default_instance_->chart_nonstyle_;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::mutable_chart_nonstyle() {
  set_has_chart_nonstyle();
  if (chart_nonstyle_ == NULL) chart_nonstyle_ = new ::TSP::Reference;
  return chart_nonstyle_;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::release_chart_nonstyle() {
  clear_has_chart_nonstyle();
  ::TSP::Reference* temp = chart_nonstyle_;
  chart_nonstyle_ = NULL;
  return temp;
}
inline void PropertyValueStorageContainerArchive::set_allocated_chart_nonstyle(::TSP::Reference* chart_nonstyle) {
  delete chart_nonstyle_;
  chart_nonstyle_ = chart_nonstyle;
  if (chart_nonstyle) {
    set_has_chart_nonstyle();
  } else {
    clear_has_chart_nonstyle();
  }
}

// optional .TSP.Reference legend_style = 3;
inline bool PropertyValueStorageContainerArchive::has_legend_style() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PropertyValueStorageContainerArchive::set_has_legend_style() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PropertyValueStorageContainerArchive::clear_has_legend_style() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PropertyValueStorageContainerArchive::clear_legend_style() {
  if (legend_style_ != NULL) legend_style_->::TSP::Reference::Clear();
  clear_has_legend_style();
}
inline const ::TSP::Reference& PropertyValueStorageContainerArchive::legend_style() const {
  return legend_style_ != NULL ? *legend_style_ : *default_instance_->legend_style_;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::mutable_legend_style() {
  set_has_legend_style();
  if (legend_style_ == NULL) legend_style_ = new ::TSP::Reference;
  return legend_style_;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::release_legend_style() {
  clear_has_legend_style();
  ::TSP::Reference* temp = legend_style_;
  legend_style_ = NULL;
  return temp;
}
inline void PropertyValueStorageContainerArchive::set_allocated_legend_style(::TSP::Reference* legend_style) {
  delete legend_style_;
  legend_style_ = legend_style;
  if (legend_style) {
    set_has_legend_style();
  } else {
    clear_has_legend_style();
  }
}

// optional .TSP.Reference legend_nonstyle = 4;
inline bool PropertyValueStorageContainerArchive::has_legend_nonstyle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PropertyValueStorageContainerArchive::set_has_legend_nonstyle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PropertyValueStorageContainerArchive::clear_has_legend_nonstyle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PropertyValueStorageContainerArchive::clear_legend_nonstyle() {
  if (legend_nonstyle_ != NULL) legend_nonstyle_->::TSP::Reference::Clear();
  clear_has_legend_nonstyle();
}
inline const ::TSP::Reference& PropertyValueStorageContainerArchive::legend_nonstyle() const {
  return legend_nonstyle_ != NULL ? *legend_nonstyle_ : *default_instance_->legend_nonstyle_;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::mutable_legend_nonstyle() {
  set_has_legend_nonstyle();
  if (legend_nonstyle_ == NULL) legend_nonstyle_ = new ::TSP::Reference;
  return legend_nonstyle_;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::release_legend_nonstyle() {
  clear_has_legend_nonstyle();
  ::TSP::Reference* temp = legend_nonstyle_;
  legend_nonstyle_ = NULL;
  return temp;
}
inline void PropertyValueStorageContainerArchive::set_allocated_legend_nonstyle(::TSP::Reference* legend_nonstyle) {
  delete legend_nonstyle_;
  legend_nonstyle_ = legend_nonstyle;
  if (legend_nonstyle) {
    set_has_legend_nonstyle();
  } else {
    clear_has_legend_nonstyle();
  }
}

// optional .TSCH.SparseReferenceArrayArchive value_axis_styles = 5;
inline bool PropertyValueStorageContainerArchive::has_value_axis_styles() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PropertyValueStorageContainerArchive::set_has_value_axis_styles() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PropertyValueStorageContainerArchive::clear_has_value_axis_styles() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PropertyValueStorageContainerArchive::clear_value_axis_styles() {
  if (value_axis_styles_ != NULL) value_axis_styles_->::TSCH::SparseReferenceArrayArchive::Clear();
  clear_has_value_axis_styles();
}
inline const ::TSCH::SparseReferenceArrayArchive& PropertyValueStorageContainerArchive::value_axis_styles() const {
  return value_axis_styles_ != NULL ? *value_axis_styles_ : *default_instance_->value_axis_styles_;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::mutable_value_axis_styles() {
  set_has_value_axis_styles();
  if (value_axis_styles_ == NULL) value_axis_styles_ = new ::TSCH::SparseReferenceArrayArchive;
  return value_axis_styles_;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::release_value_axis_styles() {
  clear_has_value_axis_styles();
  ::TSCH::SparseReferenceArrayArchive* temp = value_axis_styles_;
  value_axis_styles_ = NULL;
  return temp;
}
inline void PropertyValueStorageContainerArchive::set_allocated_value_axis_styles(::TSCH::SparseReferenceArrayArchive* value_axis_styles) {
  delete value_axis_styles_;
  value_axis_styles_ = value_axis_styles;
  if (value_axis_styles) {
    set_has_value_axis_styles();
  } else {
    clear_has_value_axis_styles();
  }
}

// optional .TSCH.SparseReferenceArrayArchive value_axis_nonstyles = 6;
inline bool PropertyValueStorageContainerArchive::has_value_axis_nonstyles() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PropertyValueStorageContainerArchive::set_has_value_axis_nonstyles() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PropertyValueStorageContainerArchive::clear_has_value_axis_nonstyles() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PropertyValueStorageContainerArchive::clear_value_axis_nonstyles() {
  if (value_axis_nonstyles_ != NULL) value_axis_nonstyles_->::TSCH::SparseReferenceArrayArchive::Clear();
  clear_has_value_axis_nonstyles();
}
inline const ::TSCH::SparseReferenceArrayArchive& PropertyValueStorageContainerArchive::value_axis_nonstyles() const {
  return value_axis_nonstyles_ != NULL ? *value_axis_nonstyles_ : *default_instance_->value_axis_nonstyles_;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::mutable_value_axis_nonstyles() {
  set_has_value_axis_nonstyles();
  if (value_axis_nonstyles_ == NULL) value_axis_nonstyles_ = new ::TSCH::SparseReferenceArrayArchive;
  return value_axis_nonstyles_;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::release_value_axis_nonstyles() {
  clear_has_value_axis_nonstyles();
  ::TSCH::SparseReferenceArrayArchive* temp = value_axis_nonstyles_;
  value_axis_nonstyles_ = NULL;
  return temp;
}
inline void PropertyValueStorageContainerArchive::set_allocated_value_axis_nonstyles(::TSCH::SparseReferenceArrayArchive* value_axis_nonstyles) {
  delete value_axis_nonstyles_;
  value_axis_nonstyles_ = value_axis_nonstyles;
  if (value_axis_nonstyles) {
    set_has_value_axis_nonstyles();
  } else {
    clear_has_value_axis_nonstyles();
  }
}

// optional .TSCH.SparseReferenceArrayArchive category_axis_styles = 7;
inline bool PropertyValueStorageContainerArchive::has_category_axis_styles() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PropertyValueStorageContainerArchive::set_has_category_axis_styles() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PropertyValueStorageContainerArchive::clear_has_category_axis_styles() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PropertyValueStorageContainerArchive::clear_category_axis_styles() {
  if (category_axis_styles_ != NULL) category_axis_styles_->::TSCH::SparseReferenceArrayArchive::Clear();
  clear_has_category_axis_styles();
}
inline const ::TSCH::SparseReferenceArrayArchive& PropertyValueStorageContainerArchive::category_axis_styles() const {
  return category_axis_styles_ != NULL ? *category_axis_styles_ : *default_instance_->category_axis_styles_;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::mutable_category_axis_styles() {
  set_has_category_axis_styles();
  if (category_axis_styles_ == NULL) category_axis_styles_ = new ::TSCH::SparseReferenceArrayArchive;
  return category_axis_styles_;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::release_category_axis_styles() {
  clear_has_category_axis_styles();
  ::TSCH::SparseReferenceArrayArchive* temp = category_axis_styles_;
  category_axis_styles_ = NULL;
  return temp;
}
inline void PropertyValueStorageContainerArchive::set_allocated_category_axis_styles(::TSCH::SparseReferenceArrayArchive* category_axis_styles) {
  delete category_axis_styles_;
  category_axis_styles_ = category_axis_styles;
  if (category_axis_styles) {
    set_has_category_axis_styles();
  } else {
    clear_has_category_axis_styles();
  }
}

// optional .TSCH.SparseReferenceArrayArchive category_axis_nonstyles = 8;
inline bool PropertyValueStorageContainerArchive::has_category_axis_nonstyles() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PropertyValueStorageContainerArchive::set_has_category_axis_nonstyles() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PropertyValueStorageContainerArchive::clear_has_category_axis_nonstyles() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PropertyValueStorageContainerArchive::clear_category_axis_nonstyles() {
  if (category_axis_nonstyles_ != NULL) category_axis_nonstyles_->::TSCH::SparseReferenceArrayArchive::Clear();
  clear_has_category_axis_nonstyles();
}
inline const ::TSCH::SparseReferenceArrayArchive& PropertyValueStorageContainerArchive::category_axis_nonstyles() const {
  return category_axis_nonstyles_ != NULL ? *category_axis_nonstyles_ : *default_instance_->category_axis_nonstyles_;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::mutable_category_axis_nonstyles() {
  set_has_category_axis_nonstyles();
  if (category_axis_nonstyles_ == NULL) category_axis_nonstyles_ = new ::TSCH::SparseReferenceArrayArchive;
  return category_axis_nonstyles_;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::release_category_axis_nonstyles() {
  clear_has_category_axis_nonstyles();
  ::TSCH::SparseReferenceArrayArchive* temp = category_axis_nonstyles_;
  category_axis_nonstyles_ = NULL;
  return temp;
}
inline void PropertyValueStorageContainerArchive::set_allocated_category_axis_nonstyles(::TSCH::SparseReferenceArrayArchive* category_axis_nonstyles) {
  delete category_axis_nonstyles_;
  category_axis_nonstyles_ = category_axis_nonstyles;
  if (category_axis_nonstyles) {
    set_has_category_axis_nonstyles();
  } else {
    clear_has_category_axis_nonstyles();
  }
}

// optional .TSCH.SparseReferenceArrayArchive series_theme_styles = 9;
inline bool PropertyValueStorageContainerArchive::has_series_theme_styles() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PropertyValueStorageContainerArchive::set_has_series_theme_styles() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PropertyValueStorageContainerArchive::clear_has_series_theme_styles() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PropertyValueStorageContainerArchive::clear_series_theme_styles() {
  if (series_theme_styles_ != NULL) series_theme_styles_->::TSCH::SparseReferenceArrayArchive::Clear();
  clear_has_series_theme_styles();
}
inline const ::TSCH::SparseReferenceArrayArchive& PropertyValueStorageContainerArchive::series_theme_styles() const {
  return series_theme_styles_ != NULL ? *series_theme_styles_ : *default_instance_->series_theme_styles_;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::mutable_series_theme_styles() {
  set_has_series_theme_styles();
  if (series_theme_styles_ == NULL) series_theme_styles_ = new ::TSCH::SparseReferenceArrayArchive;
  return series_theme_styles_;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::release_series_theme_styles() {
  clear_has_series_theme_styles();
  ::TSCH::SparseReferenceArrayArchive* temp = series_theme_styles_;
  series_theme_styles_ = NULL;
  return temp;
}
inline void PropertyValueStorageContainerArchive::set_allocated_series_theme_styles(::TSCH::SparseReferenceArrayArchive* series_theme_styles) {
  delete series_theme_styles_;
  series_theme_styles_ = series_theme_styles;
  if (series_theme_styles) {
    set_has_series_theme_styles();
  } else {
    clear_has_series_theme_styles();
  }
}

// optional .TSCH.SparseReferenceArrayArchive series_private_styles = 10;
inline bool PropertyValueStorageContainerArchive::has_series_private_styles() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PropertyValueStorageContainerArchive::set_has_series_private_styles() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PropertyValueStorageContainerArchive::clear_has_series_private_styles() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PropertyValueStorageContainerArchive::clear_series_private_styles() {
  if (series_private_styles_ != NULL) series_private_styles_->::TSCH::SparseReferenceArrayArchive::Clear();
  clear_has_series_private_styles();
}
inline const ::TSCH::SparseReferenceArrayArchive& PropertyValueStorageContainerArchive::series_private_styles() const {
  return series_private_styles_ != NULL ? *series_private_styles_ : *default_instance_->series_private_styles_;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::mutable_series_private_styles() {
  set_has_series_private_styles();
  if (series_private_styles_ == NULL) series_private_styles_ = new ::TSCH::SparseReferenceArrayArchive;
  return series_private_styles_;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::release_series_private_styles() {
  clear_has_series_private_styles();
  ::TSCH::SparseReferenceArrayArchive* temp = series_private_styles_;
  series_private_styles_ = NULL;
  return temp;
}
inline void PropertyValueStorageContainerArchive::set_allocated_series_private_styles(::TSCH::SparseReferenceArrayArchive* series_private_styles) {
  delete series_private_styles_;
  series_private_styles_ = series_private_styles;
  if (series_private_styles) {
    set_has_series_private_styles();
  } else {
    clear_has_series_private_styles();
  }
}

// optional .TSCH.SparseReferenceArrayArchive series_nonstyles = 11;
inline bool PropertyValueStorageContainerArchive::has_series_nonstyles() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PropertyValueStorageContainerArchive::set_has_series_nonstyles() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PropertyValueStorageContainerArchive::clear_has_series_nonstyles() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PropertyValueStorageContainerArchive::clear_series_nonstyles() {
  if (series_nonstyles_ != NULL) series_nonstyles_->::TSCH::SparseReferenceArrayArchive::Clear();
  clear_has_series_nonstyles();
}
inline const ::TSCH::SparseReferenceArrayArchive& PropertyValueStorageContainerArchive::series_nonstyles() const {
  return series_nonstyles_ != NULL ? *series_nonstyles_ : *default_instance_->series_nonstyles_;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::mutable_series_nonstyles() {
  set_has_series_nonstyles();
  if (series_nonstyles_ == NULL) series_nonstyles_ = new ::TSCH::SparseReferenceArrayArchive;
  return series_nonstyles_;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::release_series_nonstyles() {
  clear_has_series_nonstyles();
  ::TSCH::SparseReferenceArrayArchive* temp = series_nonstyles_;
  series_nonstyles_ = NULL;
  return temp;
}
inline void PropertyValueStorageContainerArchive::set_allocated_series_nonstyles(::TSCH::SparseReferenceArrayArchive* series_nonstyles) {
  delete series_nonstyles_;
  series_nonstyles_ = series_nonstyles;
  if (series_nonstyles) {
    set_has_series_nonstyles();
  } else {
    clear_has_series_nonstyles();
  }
}

// optional .TSCH.SparseReferenceArrayArchive paragraph_styles = 12;
inline bool PropertyValueStorageContainerArchive::has_paragraph_styles() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PropertyValueStorageContainerArchive::set_has_paragraph_styles() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PropertyValueStorageContainerArchive::clear_has_paragraph_styles() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PropertyValueStorageContainerArchive::clear_paragraph_styles() {
  if (paragraph_styles_ != NULL) paragraph_styles_->::TSCH::SparseReferenceArrayArchive::Clear();
  clear_has_paragraph_styles();
}
inline const ::TSCH::SparseReferenceArrayArchive& PropertyValueStorageContainerArchive::paragraph_styles() const {
  return paragraph_styles_ != NULL ? *paragraph_styles_ : *default_instance_->paragraph_styles_;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::mutable_paragraph_styles() {
  set_has_paragraph_styles();
  if (paragraph_styles_ == NULL) paragraph_styles_ = new ::TSCH::SparseReferenceArrayArchive;
  return paragraph_styles_;
}
inline ::TSCH::SparseReferenceArrayArchive* PropertyValueStorageContainerArchive::release_paragraph_styles() {
  clear_has_paragraph_styles();
  ::TSCH::SparseReferenceArrayArchive* temp = paragraph_styles_;
  paragraph_styles_ = NULL;
  return temp;
}
inline void PropertyValueStorageContainerArchive::set_allocated_paragraph_styles(::TSCH::SparseReferenceArrayArchive* paragraph_styles) {
  delete paragraph_styles_;
  paragraph_styles_ = paragraph_styles;
  if (paragraph_styles) {
    set_has_paragraph_styles();
  } else {
    clear_has_paragraph_styles();
  }
}

// -------------------------------------------------------------------

// StylePasteboardDataArchive

// optional .TSS.StyleArchive super = 1;
inline bool StylePasteboardDataArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StylePasteboardDataArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StylePasteboardDataArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StylePasteboardDataArchive::clear_super() {
  if (super_ != NULL) super_->::TSS::StyleArchive::Clear();
  clear_has_super();
}
inline const ::TSS::StyleArchive& StylePasteboardDataArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSS::StyleArchive* StylePasteboardDataArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSS::StyleArchive;
  return super_;
}
inline ::TSS::StyleArchive* StylePasteboardDataArchive::release_super() {
  clear_has_super();
  ::TSS::StyleArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void StylePasteboardDataArchive::set_allocated_super(::TSS::StyleArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// optional .TSCH.PropertyValueStorageContainerArchive style_network = 2;
inline bool StylePasteboardDataArchive::has_style_network() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StylePasteboardDataArchive::set_has_style_network() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StylePasteboardDataArchive::clear_has_style_network() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StylePasteboardDataArchive::clear_style_network() {
  if (style_network_ != NULL) style_network_->::TSCH::PropertyValueStorageContainerArchive::Clear();
  clear_has_style_network();
}
inline const ::TSCH::PropertyValueStorageContainerArchive& StylePasteboardDataArchive::style_network() const {
  return style_network_ != NULL ? *style_network_ : *default_instance_->style_network_;
}
inline ::TSCH::PropertyValueStorageContainerArchive* StylePasteboardDataArchive::mutable_style_network() {
  set_has_style_network();
  if (style_network_ == NULL) style_network_ = new ::TSCH::PropertyValueStorageContainerArchive;
  return style_network_;
}
inline ::TSCH::PropertyValueStorageContainerArchive* StylePasteboardDataArchive::release_style_network() {
  clear_has_style_network();
  ::TSCH::PropertyValueStorageContainerArchive* temp = style_network_;
  style_network_ = NULL;
  return temp;
}
inline void StylePasteboardDataArchive::set_allocated_style_network(::TSCH::PropertyValueStorageContainerArchive* style_network) {
  delete style_network_;
  style_network_ = style_network;
  if (style_network) {
    set_has_style_network();
  } else {
    clear_has_style_network();
  }
}

// optional bool copied_from_entire_chart = 3;
inline bool StylePasteboardDataArchive::has_copied_from_entire_chart() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StylePasteboardDataArchive::set_has_copied_from_entire_chart() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StylePasteboardDataArchive::clear_has_copied_from_entire_chart() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StylePasteboardDataArchive::clear_copied_from_entire_chart() {
  copied_from_entire_chart_ = false;
  clear_has_copied_from_entire_chart();
}
inline bool StylePasteboardDataArchive::copied_from_entire_chart() const {
  return copied_from_entire_chart_;
}
inline void StylePasteboardDataArchive::set_copied_from_entire_chart(bool value) {
  set_has_copied_from_entire_chart();
  copied_from_entire_chart_ = value;
}

// -------------------------------------------------------------------

// ChartSelectionPathTypeArchive

// optional string path_type = 1;
inline bool ChartSelectionPathTypeArchive::has_path_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChartSelectionPathTypeArchive::set_has_path_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChartSelectionPathTypeArchive::clear_has_path_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChartSelectionPathTypeArchive::clear_path_type() {
  if (path_type_ != &::google::protobuf::internal::kEmptyString) {
    path_type_->clear();
  }
  clear_has_path_type();
}
inline const ::std::string& ChartSelectionPathTypeArchive::path_type() const {
  return *path_type_;
}
inline void ChartSelectionPathTypeArchive::set_path_type(const ::std::string& value) {
  set_has_path_type();
  if (path_type_ == &::google::protobuf::internal::kEmptyString) {
    path_type_ = new ::std::string;
  }
  path_type_->assign(value);
}
inline void ChartSelectionPathTypeArchive::set_path_type(const char* value) {
  set_has_path_type();
  if (path_type_ == &::google::protobuf::internal::kEmptyString) {
    path_type_ = new ::std::string;
  }
  path_type_->assign(value);
}
inline void ChartSelectionPathTypeArchive::set_path_type(const char* value, size_t size) {
  set_has_path_type();
  if (path_type_ == &::google::protobuf::internal::kEmptyString) {
    path_type_ = new ::std::string;
  }
  path_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChartSelectionPathTypeArchive::mutable_path_type() {
  set_has_path_type();
  if (path_type_ == &::google::protobuf::internal::kEmptyString) {
    path_type_ = new ::std::string;
  }
  return path_type_;
}
inline ::std::string* ChartSelectionPathTypeArchive::release_path_type() {
  clear_has_path_type();
  if (path_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_type_;
    path_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChartSelectionPathTypeArchive::set_allocated_path_type(::std::string* path_type) {
  if (path_type_ != &::google::protobuf::internal::kEmptyString) {
    delete path_type_;
  }
  if (path_type) {
    set_has_path_type();
    path_type_ = path_type;
  } else {
    clear_has_path_type();
    path_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string path_name = 2;
inline bool ChartSelectionPathTypeArchive::has_path_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChartSelectionPathTypeArchive::set_has_path_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChartSelectionPathTypeArchive::clear_has_path_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChartSelectionPathTypeArchive::clear_path_name() {
  if (path_name_ != &::google::protobuf::internal::kEmptyString) {
    path_name_->clear();
  }
  clear_has_path_name();
}
inline const ::std::string& ChartSelectionPathTypeArchive::path_name() const {
  return *path_name_;
}
inline void ChartSelectionPathTypeArchive::set_path_name(const ::std::string& value) {
  set_has_path_name();
  if (path_name_ == &::google::protobuf::internal::kEmptyString) {
    path_name_ = new ::std::string;
  }
  path_name_->assign(value);
}
inline void ChartSelectionPathTypeArchive::set_path_name(const char* value) {
  set_has_path_name();
  if (path_name_ == &::google::protobuf::internal::kEmptyString) {
    path_name_ = new ::std::string;
  }
  path_name_->assign(value);
}
inline void ChartSelectionPathTypeArchive::set_path_name(const char* value, size_t size) {
  set_has_path_name();
  if (path_name_ == &::google::protobuf::internal::kEmptyString) {
    path_name_ = new ::std::string;
  }
  path_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChartSelectionPathTypeArchive::mutable_path_name() {
  set_has_path_name();
  if (path_name_ == &::google::protobuf::internal::kEmptyString) {
    path_name_ = new ::std::string;
  }
  return path_name_;
}
inline ::std::string* ChartSelectionPathTypeArchive::release_path_name() {
  clear_has_path_name();
  if (path_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_name_;
    path_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChartSelectionPathTypeArchive::set_allocated_path_name(::std::string* path_name) {
  if (path_name_ != &::google::protobuf::internal::kEmptyString) {
    delete path_name_;
  }
  if (path_name) {
    set_has_path_name();
    path_name_ = path_name;
  } else {
    clear_has_path_name();
    path_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ChartAxisIDArchive

// optional .TSCH.AxisType axis_type = 1;
inline bool ChartAxisIDArchive::has_axis_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChartAxisIDArchive::set_has_axis_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChartAxisIDArchive::clear_has_axis_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChartAxisIDArchive::clear_axis_type() {
  axis_type_ = 0;
  clear_has_axis_type();
}
inline ::TSCH::AxisType ChartAxisIDArchive::axis_type() const {
  return static_cast< ::TSCH::AxisType >(axis_type_);
}
inline void ChartAxisIDArchive::set_axis_type(::TSCH::AxisType value) {
  assert(::TSCH::AxisType_IsValid(value));
  set_has_axis_type();
  axis_type_ = value;
}

// optional uint32 ordinal = 2;
inline bool ChartAxisIDArchive::has_ordinal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChartAxisIDArchive::set_has_ordinal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChartAxisIDArchive::clear_has_ordinal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChartAxisIDArchive::clear_ordinal() {
  ordinal_ = 0u;
  clear_has_ordinal();
}
inline ::google::protobuf::uint32 ChartAxisIDArchive::ordinal() const {
  return ordinal_;
}
inline void ChartAxisIDArchive::set_ordinal(::google::protobuf::uint32 value) {
  set_has_ordinal();
  ordinal_ = value;
}

// -------------------------------------------------------------------

// ChartSelectionPathArgumentArchive

// optional uint32 number = 1;
inline bool ChartSelectionPathArgumentArchive::has_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChartSelectionPathArgumentArchive::set_has_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChartSelectionPathArgumentArchive::clear_has_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChartSelectionPathArgumentArchive::clear_number() {
  number_ = 0u;
  clear_has_number();
}
inline ::google::protobuf::uint32 ChartSelectionPathArgumentArchive::number() const {
  return number_;
}
inline void ChartSelectionPathArgumentArchive::set_number(::google::protobuf::uint32 value) {
  set_has_number();
  number_ = value;
}

// optional .TSCH.ChartAxisIDArchive axis_id = 2;
inline bool ChartSelectionPathArgumentArchive::has_axis_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChartSelectionPathArgumentArchive::set_has_axis_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChartSelectionPathArgumentArchive::clear_has_axis_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChartSelectionPathArgumentArchive::clear_axis_id() {
  if (axis_id_ != NULL) axis_id_->::TSCH::ChartAxisIDArchive::Clear();
  clear_has_axis_id();
}
inline const ::TSCH::ChartAxisIDArchive& ChartSelectionPathArgumentArchive::axis_id() const {
  return axis_id_ != NULL ? *axis_id_ : *default_instance_->axis_id_;
}
inline ::TSCH::ChartAxisIDArchive* ChartSelectionPathArgumentArchive::mutable_axis_id() {
  set_has_axis_id();
  if (axis_id_ == NULL) axis_id_ = new ::TSCH::ChartAxisIDArchive;
  return axis_id_;
}
inline ::TSCH::ChartAxisIDArchive* ChartSelectionPathArgumentArchive::release_axis_id() {
  clear_has_axis_id();
  ::TSCH::ChartAxisIDArchive* temp = axis_id_;
  axis_id_ = NULL;
  return temp;
}
inline void ChartSelectionPathArgumentArchive::set_allocated_axis_id(::TSCH::ChartAxisIDArchive* axis_id) {
  delete axis_id_;
  axis_id_ = axis_id;
  if (axis_id) {
    set_has_axis_id();
  } else {
    clear_has_axis_id();
  }
}

// -------------------------------------------------------------------

// ChartSelectionPathArchive

// optional .TSCH.ChartSelectionPathTypeArchive path_type = 1;
inline bool ChartSelectionPathArchive::has_path_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChartSelectionPathArchive::set_has_path_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChartSelectionPathArchive::clear_has_path_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChartSelectionPathArchive::clear_path_type() {
  if (path_type_ != NULL) path_type_->::TSCH::ChartSelectionPathTypeArchive::Clear();
  clear_has_path_type();
}
inline const ::TSCH::ChartSelectionPathTypeArchive& ChartSelectionPathArchive::path_type() const {
  return path_type_ != NULL ? *path_type_ : *default_instance_->path_type_;
}
inline ::TSCH::ChartSelectionPathTypeArchive* ChartSelectionPathArchive::mutable_path_type() {
  set_has_path_type();
  if (path_type_ == NULL) path_type_ = new ::TSCH::ChartSelectionPathTypeArchive;
  return path_type_;
}
inline ::TSCH::ChartSelectionPathTypeArchive* ChartSelectionPathArchive::release_path_type() {
  clear_has_path_type();
  ::TSCH::ChartSelectionPathTypeArchive* temp = path_type_;
  path_type_ = NULL;
  return temp;
}
inline void ChartSelectionPathArchive::set_allocated_path_type(::TSCH::ChartSelectionPathTypeArchive* path_type) {
  delete path_type_;
  path_type_ = path_type;
  if (path_type) {
    set_has_path_type();
  } else {
    clear_has_path_type();
  }
}

// optional .TSCH.ChartSelectionPathArchive sub_selection = 2;
inline bool ChartSelectionPathArchive::has_sub_selection() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChartSelectionPathArchive::set_has_sub_selection() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChartSelectionPathArchive::clear_has_sub_selection() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChartSelectionPathArchive::clear_sub_selection() {
  if (sub_selection_ != NULL) sub_selection_->::TSCH::ChartSelectionPathArchive::Clear();
  clear_has_sub_selection();
}
inline const ::TSCH::ChartSelectionPathArchive& ChartSelectionPathArchive::sub_selection() const {
  return sub_selection_ != NULL ? *sub_selection_ : *default_instance_->sub_selection_;
}
inline ::TSCH::ChartSelectionPathArchive* ChartSelectionPathArchive::mutable_sub_selection() {
  set_has_sub_selection();
  if (sub_selection_ == NULL) sub_selection_ = new ::TSCH::ChartSelectionPathArchive;
  return sub_selection_;
}
inline ::TSCH::ChartSelectionPathArchive* ChartSelectionPathArchive::release_sub_selection() {
  clear_has_sub_selection();
  ::TSCH::ChartSelectionPathArchive* temp = sub_selection_;
  sub_selection_ = NULL;
  return temp;
}
inline void ChartSelectionPathArchive::set_allocated_sub_selection(::TSCH::ChartSelectionPathArchive* sub_selection) {
  delete sub_selection_;
  sub_selection_ = sub_selection;
  if (sub_selection) {
    set_has_sub_selection();
  } else {
    clear_has_sub_selection();
  }
}

// repeated .TSCH.ChartSelectionPathArgumentArchive arguments = 3;
inline int ChartSelectionPathArchive::arguments_size() const {
  return arguments_.size();
}
inline void ChartSelectionPathArchive::clear_arguments() {
  arguments_.Clear();
}
inline const ::TSCH::ChartSelectionPathArgumentArchive& ChartSelectionPathArchive::arguments(int index) const {
  return arguments_.Get(index);
}
inline ::TSCH::ChartSelectionPathArgumentArchive* ChartSelectionPathArchive::mutable_arguments(int index) {
  return arguments_.Mutable(index);
}
inline ::TSCH::ChartSelectionPathArgumentArchive* ChartSelectionPathArchive::add_arguments() {
  return arguments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSCH::ChartSelectionPathArgumentArchive >&
ChartSelectionPathArchive::arguments() const {
  return arguments_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSCH::ChartSelectionPathArgumentArchive >*
ChartSelectionPathArchive::mutable_arguments() {
  return &arguments_;
}

// -------------------------------------------------------------------

// ChartSelectionArchive

// optional .TSP.Reference chart = 1;
inline bool ChartSelectionArchive::has_chart() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChartSelectionArchive::set_has_chart() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChartSelectionArchive::clear_has_chart() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChartSelectionArchive::clear_chart() {
  if (chart_ != NULL) chart_->::TSP::Reference::Clear();
  clear_has_chart();
}
inline const ::TSP::Reference& ChartSelectionArchive::chart() const {
  return chart_ != NULL ? *chart_ : *default_instance_->chart_;
}
inline ::TSP::Reference* ChartSelectionArchive::mutable_chart() {
  set_has_chart();
  if (chart_ == NULL) chart_ = new ::TSP::Reference;
  return chart_;
}
inline ::TSP::Reference* ChartSelectionArchive::release_chart() {
  clear_has_chart();
  ::TSP::Reference* temp = chart_;
  chart_ = NULL;
  return temp;
}
inline void ChartSelectionArchive::set_allocated_chart(::TSP::Reference* chart) {
  delete chart_;
  chart_ = chart;
  if (chart) {
    set_has_chart();
  } else {
    clear_has_chart();
  }
}

// repeated .TSCH.ChartSelectionPathArchive paths = 2;
inline int ChartSelectionArchive::paths_size() const {
  return paths_.size();
}
inline void ChartSelectionArchive::clear_paths() {
  paths_.Clear();
}
inline const ::TSCH::ChartSelectionPathArchive& ChartSelectionArchive::paths(int index) const {
  return paths_.Get(index);
}
inline ::TSCH::ChartSelectionPathArchive* ChartSelectionArchive::mutable_paths(int index) {
  return paths_.Mutable(index);
}
inline ::TSCH::ChartSelectionPathArchive* ChartSelectionArchive::add_paths() {
  return paths_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSCH::ChartSelectionPathArchive >&
ChartSelectionArchive::paths() const {
  return paths_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSCH::ChartSelectionPathArchive >*
ChartSelectionArchive::mutable_paths() {
  return &paths_;
}

// -------------------------------------------------------------------

// ChartUIState

// optional .TSP.Reference chart = 1;
inline bool ChartUIState::has_chart() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChartUIState::set_has_chart() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChartUIState::clear_has_chart() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChartUIState::clear_chart() {
  if (chart_ != NULL) chart_->::TSP::Reference::Clear();
  clear_has_chart();
}
inline const ::TSP::Reference& ChartUIState::chart() const {
  return chart_ != NULL ? *chart_ : *default_instance_->chart_;
}
inline ::TSP::Reference* ChartUIState::mutable_chart() {
  set_has_chart();
  if (chart_ == NULL) chart_ = new ::TSP::Reference;
  return chart_;
}
inline ::TSP::Reference* ChartUIState::release_chart() {
  clear_has_chart();
  ::TSP::Reference* temp = chart_;
  chart_ = NULL;
  return temp;
}
inline void ChartUIState::set_allocated_chart(::TSP::Reference* chart) {
  delete chart_;
  chart_ = chart;
  if (chart) {
    set_has_chart();
  } else {
    clear_has_chart();
  }
}

// optional int32 cde_last_row_selected = 2;
inline bool ChartUIState::has_cde_last_row_selected() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChartUIState::set_has_cde_last_row_selected() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChartUIState::clear_has_cde_last_row_selected() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChartUIState::clear_cde_last_row_selected() {
  cde_last_row_selected_ = 0;
  clear_has_cde_last_row_selected();
}
inline ::google::protobuf::int32 ChartUIState::cde_last_row_selected() const {
  return cde_last_row_selected_;
}
inline void ChartUIState::set_cde_last_row_selected(::google::protobuf::int32 value) {
  set_has_cde_last_row_selected();
  cde_last_row_selected_ = value;
}

// optional int32 cde_last_col_selected = 3;
inline bool ChartUIState::has_cde_last_col_selected() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChartUIState::set_has_cde_last_col_selected() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChartUIState::clear_has_cde_last_col_selected() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChartUIState::clear_cde_last_col_selected() {
  cde_last_col_selected_ = 0;
  clear_has_cde_last_col_selected();
}
inline ::google::protobuf::int32 ChartUIState::cde_last_col_selected() const {
  return cde_last_col_selected_;
}
inline void ChartUIState::set_cde_last_col_selected(::google::protobuf::int32 value) {
  set_has_cde_last_col_selected();
  cde_last_col_selected_ = value;
}

// optional int32 cde_last_row_count = 4;
inline bool ChartUIState::has_cde_last_row_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChartUIState::set_has_cde_last_row_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChartUIState::clear_has_cde_last_row_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChartUIState::clear_cde_last_row_count() {
  cde_last_row_count_ = 0;
  clear_has_cde_last_row_count();
}
inline ::google::protobuf::int32 ChartUIState::cde_last_row_count() const {
  return cde_last_row_count_;
}
inline void ChartUIState::set_cde_last_row_count(::google::protobuf::int32 value) {
  set_has_cde_last_row_count();
  cde_last_row_count_ = value;
}

// optional int32 cde_last_col_count = 5;
inline bool ChartUIState::has_cde_last_col_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChartUIState::set_has_cde_last_col_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChartUIState::clear_has_cde_last_col_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChartUIState::clear_cde_last_col_count() {
  cde_last_col_count_ = 0;
  clear_has_cde_last_col_count();
}
inline ::google::protobuf::int32 ChartUIState::cde_last_col_count() const {
  return cde_last_col_count_;
}
inline void ChartUIState::set_cde_last_col_count(::google::protobuf::int32 value) {
  set_has_cde_last_col_count();
  cde_last_col_count_ = value;
}

// optional bool cde_use_full_keyboard = 6;
inline bool ChartUIState::has_cde_use_full_keyboard() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChartUIState::set_has_cde_use_full_keyboard() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChartUIState::clear_has_cde_use_full_keyboard() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChartUIState::clear_cde_use_full_keyboard() {
  cde_use_full_keyboard_ = false;
  clear_has_cde_use_full_keyboard();
}
inline bool ChartUIState::cde_use_full_keyboard() const {
  return cde_use_full_keyboard_;
}
inline void ChartUIState::set_cde_use_full_keyboard(bool value) {
  set_has_cde_use_full_keyboard();
  cde_use_full_keyboard_ = value;
}

// -------------------------------------------------------------------

// ChartFormatStructExtensions


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSCH

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TSCHArchives_2eproto__INCLUDED
