// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCEArchives.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TSCEArchives.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TSCE {

namespace {

const ::google::protobuf::Descriptor* CFUUIDArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CFUUIDArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CellReferenceArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CellReferenceArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalCellReferenceArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalCellReferenceArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* RangeReferenceArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RangeReferenceArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalRangeReferenceArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalRangeReferenceArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReferenceArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReferenceArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReferenceArchive_ReferenceType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EdgeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EdgeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* EdgesArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EdgesArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CellRecordArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CellRecordArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CellDependenciesArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CellDependenciesArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* VolatileDependenciesArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VolatileDependenciesArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* RangeBackDependencyArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RangeBackDependencyArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* RTreeInternalNodeContentsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RTreeInternalNodeContentsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* RTreeLeafNodeContentsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RTreeLeafNodeContentsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* RTreeNodeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RTreeNodeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* RTreeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RTreeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* RangeDependenciesArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RangeDependenciesArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpanningDependenciesArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpanningDependenciesArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpanningDependenciesArchive_ReferringColumnToLocalCells_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpanningDependenciesArchive_ReferringColumnToLocalCells_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpanningDependenciesArchive_ReferringColumnToRemoteCells_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpanningDependenciesArchive_ReferringColumnToRemoteCells_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SpanningDependenciesArchive_RangeContext_descriptor_ = NULL;
const ::google::protobuf::Descriptor* WholeOwnerDependenciesArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WholeOwnerDependenciesArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* FormulaOwnerInfoArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FormulaOwnerInfoArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* OwnerIDMapArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OwnerIDMapArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* OwnerIDMapArchive_OwnerIDMapArchiveEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OwnerIDMapArchive_OwnerIDMapArchiveEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* DependencyTrackerArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DependencyTrackerArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* NameTrackedReferencePair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NameTrackedReferencePair_reflection_ = NULL;
const ::google::protobuf::Descriptor* NamesByTrackedReferenceArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NamesByTrackedReferenceArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* NamedReferenceManagerArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NamedReferenceManagerArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalculationEngineArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalculationEngineArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CalculationEngineArchive_ExcelImportDateMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ASTNodeArrayArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ASTNodeArrayArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ASTNodeArrayArchive_ASTColumnCoordinateArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ASTNodeArrayArchive_ASTColumnCoordinateArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ASTNodeArrayArchive_ASTRowCoordinateArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ASTNodeArrayArchive_ASTRowCoordinateArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ASTNodeArrayArchive_ASTNodeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ASTNodeArrayArchive_ASTNodeArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ASTNodeArrayArchive_ASTNodeType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FormulaTranslationFlagsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FormulaTranslationFlagsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* FormulaArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FormulaArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* FormatStructArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FormatStructArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* RangeCoordinateArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RangeCoordinateArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TectonicShiftArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TectonicShiftArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewriteSortMappingArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewriteSortMappingArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* RangeMovedInfoArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RangeMovedInfoArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableResizedInfoArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableResizedInfoArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CellMergeInfoArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CellMergeInfoArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* FormulaRewriteSpecArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FormulaRewriteSpecArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FormulaRewriteSpecArchive_RewriteType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CellCoordinateFormulaPairArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CellCoordinateFormulaPairArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CellCoordinateArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CellCoordinateArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CellCoordinateVectorArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CellCoordinateVectorArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CellCoordinateObjectPairArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CellCoordinateObjectPairArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CellCoordinateObjectMapArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CellCoordinateObjectMapArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* OwnerFormulaMapArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OwnerFormulaMapArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* FormulaRewriteCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FormulaRewriteCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* NumberTrackedReferencePairArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NumberTrackedReferencePairArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* NumberToTrackedReferenceMapArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NumberToTrackedReferenceMapArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackedReferencesRewriteCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackedReferencesRewriteCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackedReferenceArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackedReferenceArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReferenceTrackerArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReferenceTrackerArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* BooleanCellValueArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BooleanCellValueArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* DateCellValueArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DateCellValueArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* NumberCellValueArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NumberCellValueArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringCellValueArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringCellValueArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CellValueArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CellValueArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CellValueArchive_CellValueType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_TSCEArchives_2eproto() {
  protobuf_AddDesc_TSCEArchives_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TSCEArchives.proto");
  GOOGLE_CHECK(file != NULL);
  CFUUIDArchive_descriptor_ = file->message_type(0);
  static const int CFUUIDArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFUUIDArchive, uuid_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFUUIDArchive, uuid_w0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFUUIDArchive, uuid_w1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFUUIDArchive, uuid_w2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFUUIDArchive, uuid_w3_),
  };
  CFUUIDArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CFUUIDArchive_descriptor_,
      CFUUIDArchive::default_instance_,
      CFUUIDArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFUUIDArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFUUIDArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CFUUIDArchive));
  CellReferenceArchive_descriptor_ = file->message_type(1);
  static const int CellReferenceArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellReferenceArchive, column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellReferenceArchive, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellReferenceArchive, table_id_),
  };
  CellReferenceArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CellReferenceArchive_descriptor_,
      CellReferenceArchive::default_instance_,
      CellReferenceArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellReferenceArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellReferenceArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CellReferenceArchive));
  InternalCellReferenceArchive_descriptor_ = file->message_type(2);
  static const int InternalCellReferenceArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalCellReferenceArchive, coordinate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalCellReferenceArchive, owner_id_),
  };
  InternalCellReferenceArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InternalCellReferenceArchive_descriptor_,
      InternalCellReferenceArchive::default_instance_,
      InternalCellReferenceArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalCellReferenceArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalCellReferenceArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InternalCellReferenceArchive));
  RangeReferenceArchive_descriptor_ = file->message_type(3);
  static const int RangeReferenceArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeReferenceArchive, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeReferenceArchive, top_left_column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeReferenceArchive, top_left_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeReferenceArchive, bottom_right_column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeReferenceArchive, bottom_right_row_),
  };
  RangeReferenceArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RangeReferenceArchive_descriptor_,
      RangeReferenceArchive::default_instance_,
      RangeReferenceArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeReferenceArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeReferenceArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RangeReferenceArchive));
  InternalRangeReferenceArchive_descriptor_ = file->message_type(4);
  static const int InternalRangeReferenceArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRangeReferenceArchive, owner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRangeReferenceArchive, range_),
  };
  InternalRangeReferenceArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InternalRangeReferenceArchive_descriptor_,
      InternalRangeReferenceArchive::default_instance_,
      InternalRangeReferenceArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRangeReferenceArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRangeReferenceArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InternalRangeReferenceArchive));
  ReferenceArchive_descriptor_ = file->message_type(5);
  static const int ReferenceArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceArchive, reference_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceArchive, cell_reference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceArchive, range_reference_),
  };
  ReferenceArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReferenceArchive_descriptor_,
      ReferenceArchive::default_instance_,
      ReferenceArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReferenceArchive));
  ReferenceArchive_ReferenceType_descriptor_ = ReferenceArchive_descriptor_->enum_type(0);
  EdgeArchive_descriptor_ = file->message_type(6);
  static const int EdgeArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeArchive, column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeArchive, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeArchive, is_precedent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeArchive, owner_id_),
  };
  EdgeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EdgeArchive_descriptor_,
      EdgeArchive::default_instance_,
      EdgeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EdgeArchive));
  EdgesArchive_descriptor_ = file->message_type(7);
  static const int EdgesArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgesArchive, packed_edge_without_owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgesArchive, packed_edge_with_owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgesArchive, owner_id_for_edge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgesArchive, internal_owner_id_for_edge_),
  };
  EdgesArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EdgesArchive_descriptor_,
      EdgesArchive::default_instance_,
      EdgesArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgesArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgesArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EdgesArchive));
  CellRecordArchive_descriptor_ = file->message_type(8);
  static const int CellRecordArchive_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellRecordArchive, column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellRecordArchive, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellRecordArchive, dirty_self_plus_precedents_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellRecordArchive, is_in_a_cycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellRecordArchive, edge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellRecordArchive, contains_a_formula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellRecordArchive, has_calculated_precedents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellRecordArchive, calculate_precedents_on_next_recalc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellRecordArchive, translate_for_excel_import_on_next_recalc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellRecordArchive, edges_),
  };
  CellRecordArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CellRecordArchive_descriptor_,
      CellRecordArchive::default_instance_,
      CellRecordArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellRecordArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellRecordArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CellRecordArchive));
  CellDependenciesArchive_descriptor_ = file->message_type(9);
  static const int CellDependenciesArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellDependenciesArchive, cell_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellDependenciesArchive, num_dirty_cells_),
  };
  CellDependenciesArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CellDependenciesArchive_descriptor_,
      CellDependenciesArchive::default_instance_,
      CellDependenciesArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellDependenciesArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellDependenciesArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CellDependenciesArchive));
  VolatileDependenciesArchive_descriptor_ = file->message_type(10);
  static const int VolatileDependenciesArchive_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolatileDependenciesArchive, volatile_time_cell_column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolatileDependenciesArchive, volatile_time_cell_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolatileDependenciesArchive, volatile_random_cell_column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolatileDependenciesArchive, volatile_random_cell_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolatileDependenciesArchive, volatile_locale_cell_column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolatileDependenciesArchive, volatile_locale_cell_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolatileDependenciesArchive, volatile_location_cell_column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolatileDependenciesArchive, volatile_location_cell_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolatileDependenciesArchive, volatile_compass_cell_column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolatileDependenciesArchive, volatile_compass_cell_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolatileDependenciesArchive, volatile_sheet_table_name_cell_column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolatileDependenciesArchive, volatile_sheet_table_name_cell_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolatileDependenciesArchive, calculated_dependency_cell_column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolatileDependenciesArchive, calculated_dependency_cell_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolatileDependenciesArchive, volatile_geometry_cell_reference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolatileDependenciesArchive, volatile_geometry_cell_),
  };
  VolatileDependenciesArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VolatileDependenciesArchive_descriptor_,
      VolatileDependenciesArchive::default_instance_,
      VolatileDependenciesArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolatileDependenciesArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolatileDependenciesArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VolatileDependenciesArchive));
  RangeBackDependencyArchive_descriptor_ = file->message_type(11);
  static const int RangeBackDependencyArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeBackDependencyArchive, cell_coord_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeBackDependencyArchive, cell_coord_column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeBackDependencyArchive, range_reference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeBackDependencyArchive, internal_range_reference_),
  };
  RangeBackDependencyArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RangeBackDependencyArchive_descriptor_,
      RangeBackDependencyArchive::default_instance_,
      RangeBackDependencyArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeBackDependencyArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeBackDependencyArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RangeBackDependencyArchive));
  RTreeInternalNodeContentsArchive_descriptor_ = file->message_type(12);
  static const int RTreeInternalNodeContentsArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTreeInternalNodeContentsArchive, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTreeInternalNodeContentsArchive, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTreeInternalNodeContentsArchive, child_),
  };
  RTreeInternalNodeContentsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RTreeInternalNodeContentsArchive_descriptor_,
      RTreeInternalNodeContentsArchive::default_instance_,
      RTreeInternalNodeContentsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTreeInternalNodeContentsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTreeInternalNodeContentsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RTreeInternalNodeContentsArchive));
  RTreeLeafNodeContentsArchive_descriptor_ = file->message_type(13);
  static const int RTreeLeafNodeContentsArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTreeLeafNodeContentsArchive, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTreeLeafNodeContentsArchive, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTreeLeafNodeContentsArchive, cell_reference_),
  };
  RTreeLeafNodeContentsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RTreeLeafNodeContentsArchive_descriptor_,
      RTreeLeafNodeContentsArchive::default_instance_,
      RTreeLeafNodeContentsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTreeLeafNodeContentsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTreeLeafNodeContentsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RTreeLeafNodeContentsArchive));
  RTreeNodeArchive_descriptor_ = file->message_type(14);
  static const int RTreeNodeArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTreeNodeArchive, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTreeNodeArchive, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTreeNodeArchive, internal_node_contents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTreeNodeArchive, leaf_node_contents_),
  };
  RTreeNodeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RTreeNodeArchive_descriptor_,
      RTreeNodeArchive::default_instance_,
      RTreeNodeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTreeNodeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTreeNodeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RTreeNodeArchive));
  RTreeArchive_descriptor_ = file->message_type(15);
  static const int RTreeArchive_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTreeArchive, data_file_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTreeArchive, data_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTreeArchive, data_num_dims_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTreeArchive, data_elem_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTreeArchive, data_elem_real_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTreeArchive, data_max_nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTreeArchive, data_min_nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTreeArchive, root_),
  };
  RTreeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RTreeArchive_descriptor_,
      RTreeArchive::default_instance_,
      RTreeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTreeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTreeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RTreeArchive));
  RangeDependenciesArchive_descriptor_ = file->message_type(16);
  static const int RangeDependenciesArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeDependenciesArchive, r_tree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeDependenciesArchive, back_dependency_),
  };
  RangeDependenciesArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RangeDependenciesArchive_descriptor_,
      RangeDependenciesArchive::default_instance_,
      RangeDependenciesArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeDependenciesArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeDependenciesArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RangeDependenciesArchive));
  SpanningDependenciesArchive_descriptor_ = file->message_type(17);
  static const int SpanningDependenciesArchive_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpanningDependenciesArchive, column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpanningDependenciesArchive, range_context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpanningDependenciesArchive, cell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpanningDependenciesArchive, total_range_for_deleted_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpanningDependenciesArchive, body_range_for_deleted_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpanningDependenciesArchive, referring_column_to_local_cells_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpanningDependenciesArchive, referring_column_to_remote_cells_),
  };
  SpanningDependenciesArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpanningDependenciesArchive_descriptor_,
      SpanningDependenciesArchive::default_instance_,
      SpanningDependenciesArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpanningDependenciesArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpanningDependenciesArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpanningDependenciesArchive));
  SpanningDependenciesArchive_ReferringColumnToLocalCells_descriptor_ = SpanningDependenciesArchive_descriptor_->nested_type(0);
  static const int SpanningDependenciesArchive_ReferringColumnToLocalCells_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpanningDependenciesArchive_ReferringColumnToLocalCells, column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpanningDependenciesArchive_ReferringColumnToLocalCells, range_context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpanningDependenciesArchive_ReferringColumnToLocalCells, cell_coordinate_),
  };
  SpanningDependenciesArchive_ReferringColumnToLocalCells_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpanningDependenciesArchive_ReferringColumnToLocalCells_descriptor_,
      SpanningDependenciesArchive_ReferringColumnToLocalCells::default_instance_,
      SpanningDependenciesArchive_ReferringColumnToLocalCells_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpanningDependenciesArchive_ReferringColumnToLocalCells, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpanningDependenciesArchive_ReferringColumnToLocalCells, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpanningDependenciesArchive_ReferringColumnToLocalCells));
  SpanningDependenciesArchive_ReferringColumnToRemoteCells_descriptor_ = SpanningDependenciesArchive_descriptor_->nested_type(1);
  static const int SpanningDependenciesArchive_ReferringColumnToRemoteCells_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpanningDependenciesArchive_ReferringColumnToRemoteCells, column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpanningDependenciesArchive_ReferringColumnToRemoteCells, range_context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpanningDependenciesArchive_ReferringColumnToRemoteCells, internal_cell_reference_),
  };
  SpanningDependenciesArchive_ReferringColumnToRemoteCells_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpanningDependenciesArchive_ReferringColumnToRemoteCells_descriptor_,
      SpanningDependenciesArchive_ReferringColumnToRemoteCells::default_instance_,
      SpanningDependenciesArchive_ReferringColumnToRemoteCells_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpanningDependenciesArchive_ReferringColumnToRemoteCells, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpanningDependenciesArchive_ReferringColumnToRemoteCells, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpanningDependenciesArchive_ReferringColumnToRemoteCells));
  SpanningDependenciesArchive_RangeContext_descriptor_ = SpanningDependenciesArchive_descriptor_->enum_type(0);
  WholeOwnerDependenciesArchive_descriptor_ = file->message_type(18);
  static const int WholeOwnerDependenciesArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WholeOwnerDependenciesArchive, dependent_cell_),
  };
  WholeOwnerDependenciesArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WholeOwnerDependenciesArchive_descriptor_,
      WholeOwnerDependenciesArchive::default_instance_,
      WholeOwnerDependenciesArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WholeOwnerDependenciesArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WholeOwnerDependenciesArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WholeOwnerDependenciesArchive));
  FormulaOwnerInfoArchive_descriptor_ = file->message_type(19);
  static const int FormulaOwnerInfoArchive_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaOwnerInfoArchive, formula_owner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaOwnerInfoArchive, cell_dependencies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaOwnerInfoArchive, range_dependencies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaOwnerInfoArchive, volatile_dependencies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaOwnerInfoArchive, spanning_column_dependencies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaOwnerInfoArchive, spanning_row_dependencies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaOwnerInfoArchive, whole_owner_dependencies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaOwnerInfoArchive, formula_owner_),
  };
  FormulaOwnerInfoArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FormulaOwnerInfoArchive_descriptor_,
      FormulaOwnerInfoArchive::default_instance_,
      FormulaOwnerInfoArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaOwnerInfoArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaOwnerInfoArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FormulaOwnerInfoArchive));
  OwnerIDMapArchive_descriptor_ = file->message_type(20);
  static const int OwnerIDMapArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnerIDMapArchive, map_entry_),
  };
  OwnerIDMapArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OwnerIDMapArchive_descriptor_,
      OwnerIDMapArchive::default_instance_,
      OwnerIDMapArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnerIDMapArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnerIDMapArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OwnerIDMapArchive));
  OwnerIDMapArchive_OwnerIDMapArchiveEntry_descriptor_ = OwnerIDMapArchive_descriptor_->nested_type(0);
  static const int OwnerIDMapArchive_OwnerIDMapArchiveEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnerIDMapArchive_OwnerIDMapArchiveEntry, internal_owner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnerIDMapArchive_OwnerIDMapArchiveEntry, owner_id_),
  };
  OwnerIDMapArchive_OwnerIDMapArchiveEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OwnerIDMapArchive_OwnerIDMapArchiveEntry_descriptor_,
      OwnerIDMapArchive_OwnerIDMapArchiveEntry::default_instance_,
      OwnerIDMapArchive_OwnerIDMapArchiveEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnerIDMapArchive_OwnerIDMapArchiveEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnerIDMapArchive_OwnerIDMapArchiveEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OwnerIDMapArchive_OwnerIDMapArchiveEntry));
  DependencyTrackerArchive_descriptor_ = file->message_type(21);
  static const int DependencyTrackerArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DependencyTrackerArchive, formula_owner_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DependencyTrackerArchive, dirty_leaf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DependencyTrackerArchive, internal_dirty_leaf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DependencyTrackerArchive, owner_id_map_),
  };
  DependencyTrackerArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DependencyTrackerArchive_descriptor_,
      DependencyTrackerArchive::default_instance_,
      DependencyTrackerArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DependencyTrackerArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DependencyTrackerArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DependencyTrackerArchive));
  NameTrackedReferencePair_descriptor_ = file->message_type(22);
  static const int NameTrackedReferencePair_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameTrackedReferencePair, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameTrackedReferencePair, tracked_reference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameTrackedReferencePair, tracked_reference_id_),
  };
  NameTrackedReferencePair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NameTrackedReferencePair_descriptor_,
      NameTrackedReferencePair::default_instance_,
      NameTrackedReferencePair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameTrackedReferencePair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameTrackedReferencePair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NameTrackedReferencePair));
  NamesByTrackedReferenceArchive_descriptor_ = file->message_type(23);
  static const int NamesByTrackedReferenceArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamesByTrackedReferenceArchive, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamesByTrackedReferenceArchive, name_tracked_reference_pair_),
  };
  NamesByTrackedReferenceArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NamesByTrackedReferenceArchive_descriptor_,
      NamesByTrackedReferenceArchive::default_instance_,
      NamesByTrackedReferenceArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamesByTrackedReferenceArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamesByTrackedReferenceArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NamesByTrackedReferenceArchive));
  NamedReferenceManagerArchive_descriptor_ = file->message_type(24);
  static const int NamedReferenceManagerArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamedReferenceManagerArchive, reference_tracker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamedReferenceManagerArchive, names_by_tracked_reference_by_table_),
  };
  NamedReferenceManagerArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NamedReferenceManagerArchive_descriptor_,
      NamedReferenceManagerArchive::default_instance_,
      NamedReferenceManagerArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamedReferenceManagerArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamedReferenceManagerArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NamedReferenceManagerArchive));
  CalculationEngineArchive_descriptor_ = file->message_type(25);
  static const int CalculationEngineArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculationEngineArchive, base_date_1904_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculationEngineArchive, dependency_tracker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculationEngineArchive, named_reference_manager_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculationEngineArchive, excel_import_date_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculationEngineArchive, saved_locale_identifier_),
  };
  CalculationEngineArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CalculationEngineArchive_descriptor_,
      CalculationEngineArchive::default_instance_,
      CalculationEngineArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculationEngineArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculationEngineArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CalculationEngineArchive));
  CalculationEngineArchive_ExcelImportDateMode_descriptor_ = CalculationEngineArchive_descriptor_->enum_type(0);
  ASTNodeArrayArchive_descriptor_ = file->message_type(26);
  static const int ASTNodeArrayArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive, ast_node_),
  };
  ASTNodeArrayArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ASTNodeArrayArchive_descriptor_,
      ASTNodeArrayArchive::default_instance_,
      ASTNodeArrayArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ASTNodeArrayArchive));
  ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive_descriptor_ = ASTNodeArrayArchive_descriptor_->nested_type(0);
  static const int ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive, row_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive, column_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive, row_is_sticky_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive, column_is_sticky_),
  };
  ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive_descriptor_,
      ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::default_instance_,
      ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive));
  ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive_descriptor_ = ASTNodeArrayArchive_descriptor_->nested_type(1);
  static const int ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, row_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, column_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, row_is_sticky_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, column_is_sticky_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, ast_reference_whitespace_after_sheet_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, ast_reference_whitespace_before_table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, ast_reference_whitespace_after_table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, ast_reference_whitespace_before_cell_address_),
  };
  ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive_descriptor_,
      ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::default_instance_,
      ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive));
  ASTNodeArrayArchive_ASTColumnCoordinateArchive_descriptor_ = ASTNodeArrayArchive_descriptor_->nested_type(2);
  static const int ASTNodeArrayArchive_ASTColumnCoordinateArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTColumnCoordinateArchive, column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTColumnCoordinateArchive, absolute_),
  };
  ASTNodeArrayArchive_ASTColumnCoordinateArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ASTNodeArrayArchive_ASTColumnCoordinateArchive_descriptor_,
      ASTNodeArrayArchive_ASTColumnCoordinateArchive::default_instance_,
      ASTNodeArrayArchive_ASTColumnCoordinateArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTColumnCoordinateArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTColumnCoordinateArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ASTNodeArrayArchive_ASTColumnCoordinateArchive));
  ASTNodeArrayArchive_ASTRowCoordinateArchive_descriptor_ = ASTNodeArrayArchive_descriptor_->nested_type(3);
  static const int ASTNodeArrayArchive_ASTRowCoordinateArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTRowCoordinateArchive, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTRowCoordinateArchive, absolute_),
  };
  ASTNodeArrayArchive_ASTRowCoordinateArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ASTNodeArrayArchive_ASTRowCoordinateArchive_descriptor_,
      ASTNodeArrayArchive_ASTRowCoordinateArchive::default_instance_,
      ASTNodeArrayArchive_ASTRowCoordinateArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTRowCoordinateArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTRowCoordinateArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ASTNodeArrayArchive_ASTRowCoordinateArchive));
  ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive_descriptor_ = ASTNodeArrayArchive_descriptor_->nested_type(4);
  static const int ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive, ast_reference_whitespace_after_sheet_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive, ast_reference_whitespace_before_table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive, ast_reference_whitespace_after_table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive, ast_reference_whitespace_before_cell_address_),
  };
  ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive_descriptor_,
      ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::default_instance_,
      ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive));
  ASTNodeArrayArchive_ASTNodeArchive_descriptor_ = ASTNodeArrayArchive_descriptor_->nested_type(5);
  static const int ASTNodeArrayArchive_ASTNodeArchive_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, ast_node_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, ast_function_node_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, ast_function_node_numargs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, ast_number_node_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, ast_boolean_node_boolean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, ast_string_node_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, ast_date_node_datenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, ast_date_node_suppress_date_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, ast_date_node_suppress_time_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, ast_date_node_date_time_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, ast_duration_node_unitnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, ast_duration_node_unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, ast_duration_node_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, ast_duration_node_duration_unit_largest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, ast_duration_node_duration_unit_smallest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, ast_duration_node_use_automatic_units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, ast_token_node_boolean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, ast_array_node_numcol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, ast_array_node_numrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, ast_list_node_numargs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, ast_thunk_node_array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, ast_local_cell_reference_node_reference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, ast_cross_table_cell_reference_node_reference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, ast_unknown_function_node_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, ast_unknown_function_node_numargs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, ast_whitespace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, ast_column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, ast_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, ast_cross_table_reference_extra_info_),
  };
  ASTNodeArrayArchive_ASTNodeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ASTNodeArrayArchive_ASTNodeArchive_descriptor_,
      ASTNodeArrayArchive_ASTNodeArchive::default_instance_,
      ASTNodeArrayArchive_ASTNodeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ASTNodeArrayArchive_ASTNodeArchive));
  ASTNodeArrayArchive_ASTNodeType_descriptor_ = ASTNodeArrayArchive_descriptor_->enum_type(0);
  FormulaTranslationFlagsArchive_descriptor_ = file->message_type(27);
  static const int FormulaTranslationFlagsArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaTranslationFlagsArchive, excel_import_translation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaTranslationFlagsArchive, number_to_date_coercion_removal_translation_),
  };
  FormulaTranslationFlagsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FormulaTranslationFlagsArchive_descriptor_,
      FormulaTranslationFlagsArchive::default_instance_,
      FormulaTranslationFlagsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaTranslationFlagsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaTranslationFlagsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FormulaTranslationFlagsArchive));
  FormulaArchive_descriptor_ = file->message_type(28);
  static const int FormulaArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaArchive, ast_node_array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaArchive, host_column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaArchive, host_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaArchive, host_column_is_negative_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaArchive, host_row_is_negative_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaArchive, translation_flags_),
  };
  FormulaArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FormulaArchive_descriptor_,
      FormulaArchive::default_instance_,
      FormulaArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FormulaArchive));
  FormatStructArchive_descriptor_ = file->message_type(29);
  static const int FormatStructArchive_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, format_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, decimal_places_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, currency_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, negative_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, show_thousands_separator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, use_accounting_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, duration_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, base_places_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, base_use_minus_sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, fraction_accuracy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, suppress_date_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, suppress_time_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, date_time_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, duration_unit_largest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, duration_unit_smallest_),
  };
  FormatStructArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FormatStructArchive_descriptor_,
      FormatStructArchive::default_instance_,
      FormatStructArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatStructArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FormatStructArchive));
  RangeCoordinateArchive_descriptor_ = file->message_type(30);
  static const int RangeCoordinateArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeCoordinateArchive, top_left_column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeCoordinateArchive, top_left_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeCoordinateArchive, bottom_right_column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeCoordinateArchive, bottom_right_row_),
  };
  RangeCoordinateArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RangeCoordinateArchive_descriptor_,
      RangeCoordinateArchive::default_instance_,
      RangeCoordinateArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeCoordinateArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeCoordinateArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RangeCoordinateArchive));
  TectonicShiftArchive_descriptor_ = file->message_type(31);
  static const int TectonicShiftArchive_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TectonicShiftArchive, grid_coordinate_offset_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TectonicShiftArchive, grid_coordinate_offset_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TectonicShiftArchive, grid_coordinate_offset_x_is_negative_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TectonicShiftArchive, grid_coordinate_offset_y_is_negative_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TectonicShiftArchive, range_for_shift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TectonicShiftArchive, range_for_deletion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TectonicShiftArchive, inserted_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TectonicShiftArchive, apply_to_absolute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TectonicShiftArchive, inserting_after_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TectonicShiftArchive, ignore_sticky_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TectonicShiftArchive, table_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TectonicShiftArchive, table_id_),
  };
  TectonicShiftArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TectonicShiftArchive_descriptor_,
      TectonicShiftArchive::default_instance_,
      TectonicShiftArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TectonicShiftArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TectonicShiftArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TectonicShiftArchive));
  RewriteSortMappingArchive_descriptor_ = file->message_type(32);
  static const int RewriteSortMappingArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriteSortMappingArchive, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriteSortMappingArchive, shuffle_mapping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriteSortMappingArchive, explode_ranges_),
  };
  RewriteSortMappingArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewriteSortMappingArchive_descriptor_,
      RewriteSortMappingArchive::default_instance_,
      RewriteSortMappingArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriteSortMappingArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriteSortMappingArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewriteSortMappingArchive));
  RangeMovedInfoArchive_descriptor_ = file->message_type(33);
  static const int RangeMovedInfoArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeMovedInfoArchive, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeMovedInfoArchive, from_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeMovedInfoArchive, to_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeMovedInfoArchive, from_range_reference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeMovedInfoArchive, to_range_reference_),
  };
  RangeMovedInfoArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RangeMovedInfoArchive_descriptor_,
      RangeMovedInfoArchive::default_instance_,
      RangeMovedInfoArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeMovedInfoArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeMovedInfoArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RangeMovedInfoArchive));
  TableResizedInfoArchive_descriptor_ = file->message_type(34);
  static const int TableResizedInfoArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableResizedInfoArchive, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableResizedInfoArchive, new_table_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableResizedInfoArchive, old_table_size_),
  };
  TableResizedInfoArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableResizedInfoArchive_descriptor_,
      TableResizedInfoArchive::default_instance_,
      TableResizedInfoArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableResizedInfoArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableResizedInfoArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableResizedInfoArchive));
  CellMergeInfoArchive_descriptor_ = file->message_type(35);
  static const int CellMergeInfoArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellMergeInfoArchive, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellMergeInfoArchive, merged_range_),
  };
  CellMergeInfoArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CellMergeInfoArchive_descriptor_,
      CellMergeInfoArchive::default_instance_,
      CellMergeInfoArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellMergeInfoArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellMergeInfoArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CellMergeInfoArchive));
  FormulaRewriteSpecArchive_descriptor_ = file->message_type(36);
  static const int FormulaRewriteSpecArchive_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaRewriteSpecArchive, rewrite_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaRewriteSpecArchive, tectonic_shift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaRewriteSpecArchive, sort_mapping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaRewriteSpecArchive, range_moved_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaRewriteSpecArchive, deleted_owner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaRewriteSpecArchive, table_resized_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaRewriteSpecArchive, cell_merge_info_),
  };
  FormulaRewriteSpecArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FormulaRewriteSpecArchive_descriptor_,
      FormulaRewriteSpecArchive::default_instance_,
      FormulaRewriteSpecArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaRewriteSpecArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaRewriteSpecArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FormulaRewriteSpecArchive));
  FormulaRewriteSpecArchive_RewriteType_descriptor_ = FormulaRewriteSpecArchive_descriptor_->enum_type(0);
  CellCoordinateFormulaPairArchive_descriptor_ = file->message_type(37);
  static const int CellCoordinateFormulaPairArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellCoordinateFormulaPairArchive, column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellCoordinateFormulaPairArchive, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellCoordinateFormulaPairArchive, formula_),
  };
  CellCoordinateFormulaPairArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CellCoordinateFormulaPairArchive_descriptor_,
      CellCoordinateFormulaPairArchive::default_instance_,
      CellCoordinateFormulaPairArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellCoordinateFormulaPairArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellCoordinateFormulaPairArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CellCoordinateFormulaPairArchive));
  CellCoordinateArchive_descriptor_ = file->message_type(38);
  static const int CellCoordinateArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellCoordinateArchive, packeddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellCoordinateArchive, column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellCoordinateArchive, row_),
  };
  CellCoordinateArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CellCoordinateArchive_descriptor_,
      CellCoordinateArchive::default_instance_,
      CellCoordinateArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellCoordinateArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellCoordinateArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CellCoordinateArchive));
  CellCoordinateVectorArchive_descriptor_ = file->message_type(39);
  static const int CellCoordinateVectorArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellCoordinateVectorArchive, cell_coordinate_),
  };
  CellCoordinateVectorArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CellCoordinateVectorArchive_descriptor_,
      CellCoordinateVectorArchive::default_instance_,
      CellCoordinateVectorArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellCoordinateVectorArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellCoordinateVectorArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CellCoordinateVectorArchive));
  CellCoordinateObjectPairArchive_descriptor_ = file->message_type(40);
  static const int CellCoordinateObjectPairArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellCoordinateObjectPairArchive, cell_coordinate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellCoordinateObjectPairArchive, object_),
  };
  CellCoordinateObjectPairArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CellCoordinateObjectPairArchive_descriptor_,
      CellCoordinateObjectPairArchive::default_instance_,
      CellCoordinateObjectPairArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellCoordinateObjectPairArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellCoordinateObjectPairArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CellCoordinateObjectPairArchive));
  CellCoordinateObjectMapArchive_descriptor_ = file->message_type(41);
  static const int CellCoordinateObjectMapArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellCoordinateObjectMapArchive, cell_coordinate_object_pair_),
  };
  CellCoordinateObjectMapArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CellCoordinateObjectMapArchive_descriptor_,
      CellCoordinateObjectMapArchive::default_instance_,
      CellCoordinateObjectMapArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellCoordinateObjectMapArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellCoordinateObjectMapArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CellCoordinateObjectMapArchive));
  OwnerFormulaMapArchive_descriptor_ = file->message_type(42);
  static const int OwnerFormulaMapArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnerFormulaMapArchive, coordinate_formula_pair_),
  };
  OwnerFormulaMapArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OwnerFormulaMapArchive_descriptor_,
      OwnerFormulaMapArchive::default_instance_,
      OwnerFormulaMapArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnerFormulaMapArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnerFormulaMapArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OwnerFormulaMapArchive));
  FormulaRewriteCommandArchive_descriptor_ = file->message_type(43);
  static const int FormulaRewriteCommandArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaRewriteCommandArchive, table_rewrite_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaRewriteCommandArchive, super_),
  };
  FormulaRewriteCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FormulaRewriteCommandArchive_descriptor_,
      FormulaRewriteCommandArchive::default_instance_,
      FormulaRewriteCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaRewriteCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaRewriteCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FormulaRewriteCommandArchive));
  NumberTrackedReferencePairArchive_descriptor_ = file->message_type(44);
  static const int NumberTrackedReferencePairArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumberTrackedReferencePairArchive, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumberTrackedReferencePairArchive, tracked_reference_),
  };
  NumberTrackedReferencePairArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NumberTrackedReferencePairArchive_descriptor_,
      NumberTrackedReferencePairArchive::default_instance_,
      NumberTrackedReferencePairArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumberTrackedReferencePairArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumberTrackedReferencePairArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NumberTrackedReferencePairArchive));
  NumberToTrackedReferenceMapArchive_descriptor_ = file->message_type(45);
  static const int NumberToTrackedReferenceMapArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumberToTrackedReferenceMapArchive, number_tracked_reference_pair_),
  };
  NumberToTrackedReferenceMapArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NumberToTrackedReferenceMapArchive_descriptor_,
      NumberToTrackedReferenceMapArchive::default_instance_,
      NumberToTrackedReferenceMapArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumberToTrackedReferenceMapArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumberToTrackedReferenceMapArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NumberToTrackedReferenceMapArchive));
  TrackedReferencesRewriteCommandArchive_descriptor_ = file->message_type(46);
  static const int TrackedReferencesRewriteCommandArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackedReferencesRewriteCommandArchive, references_in_reference_tracker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackedReferencesRewriteCommandArchive, original_tracked_reference_copies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackedReferencesRewriteCommandArchive, rewrite_spec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackedReferencesRewriteCommandArchive, reference_tracker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackedReferencesRewriteCommandArchive, super_),
  };
  TrackedReferencesRewriteCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrackedReferencesRewriteCommandArchive_descriptor_,
      TrackedReferencesRewriteCommandArchive::default_instance_,
      TrackedReferencesRewriteCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackedReferencesRewriteCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackedReferencesRewriteCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrackedReferencesRewriteCommandArchive));
  TrackedReferenceArchive_descriptor_ = file->message_type(47);
  static const int TrackedReferenceArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackedReferenceArchive, ast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackedReferenceArchive, formula_id_),
  };
  TrackedReferenceArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrackedReferenceArchive_descriptor_,
      TrackedReferenceArchive::default_instance_,
      TrackedReferenceArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackedReferenceArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackedReferenceArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrackedReferenceArchive));
  ReferenceTrackerArchive_descriptor_ = file->message_type(48);
  static const int ReferenceTrackerArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceTrackerArchive, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceTrackerArchive, tracked_reference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceTrackerArchive, contained_tracked_reference_),
  };
  ReferenceTrackerArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReferenceTrackerArchive_descriptor_,
      ReferenceTrackerArchive::default_instance_,
      ReferenceTrackerArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceTrackerArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceTrackerArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReferenceTrackerArchive));
  BooleanCellValueArchive_descriptor_ = file->message_type(49);
  static const int BooleanCellValueArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BooleanCellValueArchive, value_),
  };
  BooleanCellValueArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BooleanCellValueArchive_descriptor_,
      BooleanCellValueArchive::default_instance_,
      BooleanCellValueArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BooleanCellValueArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BooleanCellValueArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BooleanCellValueArchive));
  DateCellValueArchive_descriptor_ = file->message_type(50);
  static const int DateCellValueArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateCellValueArchive, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateCellValueArchive, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateCellValueArchive, format_is_implicit_),
  };
  DateCellValueArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DateCellValueArchive_descriptor_,
      DateCellValueArchive::default_instance_,
      DateCellValueArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateCellValueArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DateCellValueArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DateCellValueArchive));
  NumberCellValueArchive_descriptor_ = file->message_type(51);
  static const int NumberCellValueArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumberCellValueArchive, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumberCellValueArchive, unit_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumberCellValueArchive, currency_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumberCellValueArchive, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumberCellValueArchive, format_is_implicit_),
  };
  NumberCellValueArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NumberCellValueArchive_descriptor_,
      NumberCellValueArchive::default_instance_,
      NumberCellValueArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumberCellValueArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumberCellValueArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NumberCellValueArchive));
  StringCellValueArchive_descriptor_ = file->message_type(52);
  static const int StringCellValueArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringCellValueArchive, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringCellValueArchive, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringCellValueArchive, format_is_implicit_),
  };
  StringCellValueArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringCellValueArchive_descriptor_,
      StringCellValueArchive::default_instance_,
      StringCellValueArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringCellValueArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringCellValueArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringCellValueArchive));
  CellValueArchive_descriptor_ = file->message_type(53);
  static const int CellValueArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellValueArchive, cell_value_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellValueArchive, boolean_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellValueArchive, date_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellValueArchive, number_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellValueArchive, string_value_),
  };
  CellValueArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CellValueArchive_descriptor_,
      CellValueArchive::default_instance_,
      CellValueArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellValueArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellValueArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CellValueArchive));
  CellValueArchive_CellValueType_descriptor_ = CellValueArchive_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TSCEArchives_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CFUUIDArchive_descriptor_, &CFUUIDArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CellReferenceArchive_descriptor_, &CellReferenceArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InternalCellReferenceArchive_descriptor_, &InternalCellReferenceArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RangeReferenceArchive_descriptor_, &RangeReferenceArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InternalRangeReferenceArchive_descriptor_, &InternalRangeReferenceArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReferenceArchive_descriptor_, &ReferenceArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EdgeArchive_descriptor_, &EdgeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EdgesArchive_descriptor_, &EdgesArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CellRecordArchive_descriptor_, &CellRecordArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CellDependenciesArchive_descriptor_, &CellDependenciesArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VolatileDependenciesArchive_descriptor_, &VolatileDependenciesArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RangeBackDependencyArchive_descriptor_, &RangeBackDependencyArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RTreeInternalNodeContentsArchive_descriptor_, &RTreeInternalNodeContentsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RTreeLeafNodeContentsArchive_descriptor_, &RTreeLeafNodeContentsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RTreeNodeArchive_descriptor_, &RTreeNodeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RTreeArchive_descriptor_, &RTreeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RangeDependenciesArchive_descriptor_, &RangeDependenciesArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpanningDependenciesArchive_descriptor_, &SpanningDependenciesArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpanningDependenciesArchive_ReferringColumnToLocalCells_descriptor_, &SpanningDependenciesArchive_ReferringColumnToLocalCells::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpanningDependenciesArchive_ReferringColumnToRemoteCells_descriptor_, &SpanningDependenciesArchive_ReferringColumnToRemoteCells::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WholeOwnerDependenciesArchive_descriptor_, &WholeOwnerDependenciesArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FormulaOwnerInfoArchive_descriptor_, &FormulaOwnerInfoArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OwnerIDMapArchive_descriptor_, &OwnerIDMapArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OwnerIDMapArchive_OwnerIDMapArchiveEntry_descriptor_, &OwnerIDMapArchive_OwnerIDMapArchiveEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DependencyTrackerArchive_descriptor_, &DependencyTrackerArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NameTrackedReferencePair_descriptor_, &NameTrackedReferencePair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NamesByTrackedReferenceArchive_descriptor_, &NamesByTrackedReferenceArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NamedReferenceManagerArchive_descriptor_, &NamedReferenceManagerArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CalculationEngineArchive_descriptor_, &CalculationEngineArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ASTNodeArrayArchive_descriptor_, &ASTNodeArrayArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive_descriptor_, &ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive_descriptor_, &ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ASTNodeArrayArchive_ASTColumnCoordinateArchive_descriptor_, &ASTNodeArrayArchive_ASTColumnCoordinateArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ASTNodeArrayArchive_ASTRowCoordinateArchive_descriptor_, &ASTNodeArrayArchive_ASTRowCoordinateArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive_descriptor_, &ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ASTNodeArrayArchive_ASTNodeArchive_descriptor_, &ASTNodeArrayArchive_ASTNodeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FormulaTranslationFlagsArchive_descriptor_, &FormulaTranslationFlagsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FormulaArchive_descriptor_, &FormulaArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FormatStructArchive_descriptor_, &FormatStructArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RangeCoordinateArchive_descriptor_, &RangeCoordinateArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TectonicShiftArchive_descriptor_, &TectonicShiftArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewriteSortMappingArchive_descriptor_, &RewriteSortMappingArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RangeMovedInfoArchive_descriptor_, &RangeMovedInfoArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableResizedInfoArchive_descriptor_, &TableResizedInfoArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CellMergeInfoArchive_descriptor_, &CellMergeInfoArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FormulaRewriteSpecArchive_descriptor_, &FormulaRewriteSpecArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CellCoordinateFormulaPairArchive_descriptor_, &CellCoordinateFormulaPairArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CellCoordinateArchive_descriptor_, &CellCoordinateArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CellCoordinateVectorArchive_descriptor_, &CellCoordinateVectorArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CellCoordinateObjectPairArchive_descriptor_, &CellCoordinateObjectPairArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CellCoordinateObjectMapArchive_descriptor_, &CellCoordinateObjectMapArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OwnerFormulaMapArchive_descriptor_, &OwnerFormulaMapArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FormulaRewriteCommandArchive_descriptor_, &FormulaRewriteCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NumberTrackedReferencePairArchive_descriptor_, &NumberTrackedReferencePairArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NumberToTrackedReferenceMapArchive_descriptor_, &NumberToTrackedReferenceMapArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrackedReferencesRewriteCommandArchive_descriptor_, &TrackedReferencesRewriteCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrackedReferenceArchive_descriptor_, &TrackedReferenceArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReferenceTrackerArchive_descriptor_, &ReferenceTrackerArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BooleanCellValueArchive_descriptor_, &BooleanCellValueArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DateCellValueArchive_descriptor_, &DateCellValueArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NumberCellValueArchive_descriptor_, &NumberCellValueArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringCellValueArchive_descriptor_, &StringCellValueArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CellValueArchive_descriptor_, &CellValueArchive::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TSCEArchives_2eproto() {
  delete CFUUIDArchive::default_instance_;
  delete CFUUIDArchive_reflection_;
  delete CellReferenceArchive::default_instance_;
  delete CellReferenceArchive_reflection_;
  delete InternalCellReferenceArchive::default_instance_;
  delete InternalCellReferenceArchive_reflection_;
  delete RangeReferenceArchive::default_instance_;
  delete RangeReferenceArchive_reflection_;
  delete InternalRangeReferenceArchive::default_instance_;
  delete InternalRangeReferenceArchive_reflection_;
  delete ReferenceArchive::default_instance_;
  delete ReferenceArchive_reflection_;
  delete EdgeArchive::default_instance_;
  delete EdgeArchive_reflection_;
  delete EdgesArchive::default_instance_;
  delete EdgesArchive_reflection_;
  delete CellRecordArchive::default_instance_;
  delete CellRecordArchive_reflection_;
  delete CellDependenciesArchive::default_instance_;
  delete CellDependenciesArchive_reflection_;
  delete VolatileDependenciesArchive::default_instance_;
  delete VolatileDependenciesArchive_reflection_;
  delete RangeBackDependencyArchive::default_instance_;
  delete RangeBackDependencyArchive_reflection_;
  delete RTreeInternalNodeContentsArchive::default_instance_;
  delete RTreeInternalNodeContentsArchive_reflection_;
  delete RTreeLeafNodeContentsArchive::default_instance_;
  delete RTreeLeafNodeContentsArchive_reflection_;
  delete RTreeNodeArchive::default_instance_;
  delete RTreeNodeArchive_reflection_;
  delete RTreeArchive::default_instance_;
  delete RTreeArchive_reflection_;
  delete RangeDependenciesArchive::default_instance_;
  delete RangeDependenciesArchive_reflection_;
  delete SpanningDependenciesArchive::default_instance_;
  delete SpanningDependenciesArchive_reflection_;
  delete SpanningDependenciesArchive_ReferringColumnToLocalCells::default_instance_;
  delete SpanningDependenciesArchive_ReferringColumnToLocalCells_reflection_;
  delete SpanningDependenciesArchive_ReferringColumnToRemoteCells::default_instance_;
  delete SpanningDependenciesArchive_ReferringColumnToRemoteCells_reflection_;
  delete WholeOwnerDependenciesArchive::default_instance_;
  delete WholeOwnerDependenciesArchive_reflection_;
  delete FormulaOwnerInfoArchive::default_instance_;
  delete FormulaOwnerInfoArchive_reflection_;
  delete OwnerIDMapArchive::default_instance_;
  delete OwnerIDMapArchive_reflection_;
  delete OwnerIDMapArchive_OwnerIDMapArchiveEntry::default_instance_;
  delete OwnerIDMapArchive_OwnerIDMapArchiveEntry_reflection_;
  delete DependencyTrackerArchive::default_instance_;
  delete DependencyTrackerArchive_reflection_;
  delete NameTrackedReferencePair::default_instance_;
  delete NameTrackedReferencePair_reflection_;
  delete NamesByTrackedReferenceArchive::default_instance_;
  delete NamesByTrackedReferenceArchive_reflection_;
  delete NamedReferenceManagerArchive::default_instance_;
  delete NamedReferenceManagerArchive_reflection_;
  delete CalculationEngineArchive::default_instance_;
  delete CalculationEngineArchive_reflection_;
  delete ASTNodeArrayArchive::default_instance_;
  delete ASTNodeArrayArchive_reflection_;
  delete ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::default_instance_;
  delete ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive_reflection_;
  delete ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::default_instance_;
  delete ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive_reflection_;
  delete ASTNodeArrayArchive_ASTColumnCoordinateArchive::default_instance_;
  delete ASTNodeArrayArchive_ASTColumnCoordinateArchive_reflection_;
  delete ASTNodeArrayArchive_ASTRowCoordinateArchive::default_instance_;
  delete ASTNodeArrayArchive_ASTRowCoordinateArchive_reflection_;
  delete ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::default_instance_;
  delete ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive_reflection_;
  delete ASTNodeArrayArchive_ASTNodeArchive::default_instance_;
  delete ASTNodeArrayArchive_ASTNodeArchive_reflection_;
  delete FormulaTranslationFlagsArchive::default_instance_;
  delete FormulaTranslationFlagsArchive_reflection_;
  delete FormulaArchive::default_instance_;
  delete FormulaArchive_reflection_;
  delete FormatStructArchive::default_instance_;
  delete FormatStructArchive_reflection_;
  delete RangeCoordinateArchive::default_instance_;
  delete RangeCoordinateArchive_reflection_;
  delete TectonicShiftArchive::default_instance_;
  delete TectonicShiftArchive_reflection_;
  delete RewriteSortMappingArchive::default_instance_;
  delete RewriteSortMappingArchive_reflection_;
  delete RangeMovedInfoArchive::default_instance_;
  delete RangeMovedInfoArchive_reflection_;
  delete TableResizedInfoArchive::default_instance_;
  delete TableResizedInfoArchive_reflection_;
  delete CellMergeInfoArchive::default_instance_;
  delete CellMergeInfoArchive_reflection_;
  delete FormulaRewriteSpecArchive::default_instance_;
  delete FormulaRewriteSpecArchive_reflection_;
  delete CellCoordinateFormulaPairArchive::default_instance_;
  delete CellCoordinateFormulaPairArchive_reflection_;
  delete CellCoordinateArchive::default_instance_;
  delete CellCoordinateArchive_reflection_;
  delete CellCoordinateVectorArchive::default_instance_;
  delete CellCoordinateVectorArchive_reflection_;
  delete CellCoordinateObjectPairArchive::default_instance_;
  delete CellCoordinateObjectPairArchive_reflection_;
  delete CellCoordinateObjectMapArchive::default_instance_;
  delete CellCoordinateObjectMapArchive_reflection_;
  delete OwnerFormulaMapArchive::default_instance_;
  delete OwnerFormulaMapArchive_reflection_;
  delete FormulaRewriteCommandArchive::default_instance_;
  delete FormulaRewriteCommandArchive_reflection_;
  delete NumberTrackedReferencePairArchive::default_instance_;
  delete NumberTrackedReferencePairArchive_reflection_;
  delete NumberToTrackedReferenceMapArchive::default_instance_;
  delete NumberToTrackedReferenceMapArchive_reflection_;
  delete TrackedReferencesRewriteCommandArchive::default_instance_;
  delete TrackedReferencesRewriteCommandArchive_reflection_;
  delete TrackedReferenceArchive::default_instance_;
  delete TrackedReferenceArchive_reflection_;
  delete ReferenceTrackerArchive::default_instance_;
  delete ReferenceTrackerArchive_reflection_;
  delete BooleanCellValueArchive::default_instance_;
  delete BooleanCellValueArchive_reflection_;
  delete DateCellValueArchive::default_instance_;
  delete DateCellValueArchive_reflection_;
  delete NumberCellValueArchive::default_instance_;
  delete NumberCellValueArchive_reflection_;
  delete StringCellValueArchive::default_instance_;
  delete StringCellValueArchive_reflection_;
  delete CellValueArchive::default_instance_;
  delete CellValueArchive_reflection_;
}

void protobuf_AddDesc_TSCEArchives_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::TSP::protobuf_AddDesc_TSPMessages_2eproto();
  ::TSK::protobuf_AddDesc_TSKArchives_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022TSCEArchives.proto\022\004TSCE\032\021TSPMessages."
    "proto\032\021TSKArchives.proto\"g\n\rCFUUIDArchiv"
    "e\022\022\n\nuuid_bytes\030\001 \001(\014\022\017\n\007uuid_w0\030\002 \001(\r\022\017"
    "\n\007uuid_w1\030\003 \001(\r\022\017\n\007uuid_w2\030\004 \001(\r\022\017\n\007uuid"
    "_w3\030\005 \001(\r\"Z\n\024CellReferenceArchive\022\016\n\006col"
    "umn\030\001 \002(\r\022\013\n\003row\030\002 \002(\r\022%\n\010table_id\030\003 \002(\013"
    "2\023.TSCE.CFUUIDArchive\"a\n\034InternalCellRef"
    "erenceArchive\022/\n\ncoordinate\030\001 \002(\0132\033.TSCE"
    ".CellCoordinateArchive\022\020\n\010owner_id\030\002 \002(\r"
    "\"\244\001\n\025RangeReferenceArchive\022%\n\010table_id\030\001"
    " \002(\0132\023.TSCE.CFUUIDArchive\022\027\n\017top_left_co"
    "lumn\030\002 \002(\r\022\024\n\014top_left_row\030\003 \002(\r\022\033\n\023bott"
    "om_right_column\030\004 \002(\r\022\030\n\020bottom_right_ro"
    "w\030\005 \002(\r\"^\n\035InternalRangeReferenceArchive"
    "\022\020\n\010owner_id\030\001 \002(\r\022+\n\005range\030\002 \002(\0132\034.TSCE"
    ".RangeCoordinateArchive\"\211\002\n\020ReferenceArc"
    "hive\022<\n\016reference_type\030\001 \002(\0162$.TSCE.Refe"
    "renceArchive.ReferenceType\0222\n\016cell_refer"
    "ence\030\002 \001(\0132\032.TSCE.CellReferenceArchive\0224"
    "\n\017range_reference\030\003 \001(\0132\033.TSCE.RangeRefe"
    "renceArchive\"M\n\rReferenceType\022\022\n\016CELL_RE"
    "FERENCE\020\001\022\023\n\017RANGE_REFERENCE\020\002\022\023\n\017NAME_D"
    "EPENDENCY\020\003\"g\n\013EdgeArchive\022\016\n\006column\030\001 \002"
    "(\r\022\013\n\003row\030\002 \002(\r\022\024\n\014is_precedent\030\003 \002(\010\022%\n"
    "\010owner_id\030\004 \001(\0132\023.TSCE.CFUUIDArchive\"\245\001\n"
    "\014EdgesArchive\022!\n\031packed_edge_without_own"
    "er\030\t \003(\r\022\036\n\026packed_edge_with_owner\030\n \003(\r"
    "\022.\n\021owner_id_for_edge\030\013 \003(\0132\023.TSCE.CFUUI"
    "DArchive\022\"\n\032internal_owner_id_for_edge\030\014"
    " \003(\r\"\201\003\n\021CellRecordArchive\022\016\n\006column\030\001 \002"
    "(\r\022\013\n\003row\030\002 \002(\r\022+\n dirty_self_plus_prece"
    "dents_count\030\003 \001(\r:\0010\022\034\n\ris_in_a_cycle\030\004 "
    "\001(\010:\005false\022#\n\004edge\030\005 \003(\0132\021.TSCE.EdgeArch"
    "iveB\002\030\001\022 \n\022contains_a_formula\030\006 \001(\010:\004tru"
    "e\022(\n\031has_calculated_precedents\030\007 \001(\010:\005fa"
    "lse\0226\n#calculate_precedents_on_next_reca"
    "lc\030\010 \001(\010:\005falseB\002\030\001\0228\n)translate_for_exc"
    "el_import_on_next_recalc\030\n \001(\010:\005false\022!\n"
    "\005edges\030\t \001(\0132\022.TSCE.EdgesArchive\"`\n\027Cell"
    "DependenciesArchive\022,\n\013cell_record\030\001 \003(\013"
    "2\027.TSCE.CellRecordArchive\022\027\n\017num_dirty_c"
    "ells\030\002 \001(\r\"\263\005\n\033VolatileDependenciesArchi"
    "ve\022!\n\031volatile_time_cell_column\030\001 \003(\r\022\036\n"
    "\026volatile_time_cell_row\030\002 \003(\r\022#\n\033volatil"
    "e_random_cell_column\030\003 \003(\r\022 \n\030volatile_r"
    "andom_cell_row\030\004 \003(\r\022#\n\033volatile_locale_"
    "cell_column\030\017 \003(\r\022 \n\030volatile_locale_cel"
    "l_row\030\020 \003(\r\022%\n\035volatile_location_cell_co"
    "lumn\030\005 \003(\r\022\"\n\032volatile_location_cell_row"
    "\030\006 \003(\r\022$\n\034volatile_compass_cell_column\030\007"
    " \003(\r\022!\n\031volatile_compass_cell_row\030\010 \003(\r\022"
    "-\n%volatile_sheet_table_name_cell_column"
    "\030\021 \003(\r\022*\n\"volatile_sheet_table_name_cell"
    "_row\030\022 \003(\r\022)\n!calculated_dependency_cell"
    "_column\030\t \003(\r\022&\n\036calculated_dependency_c"
    "ell_row\030\n \003(\r\022D\n volatile_geometry_cell_"
    "reference\030\r \003(\0132\032.TSCE.CellReferenceArch"
    "ive\022;\n\026volatile_geometry_cell\030\013 \003(\0132\033.TS"
    "CE.CellCoordinateArchive\"\314\001\n\032RangeBackDe"
    "pendencyArchive\022\026\n\016cell_coord_row\030\001 \002(\r\022"
    "\031\n\021cell_coord_column\030\002 \002(\r\0224\n\017range_refe"
    "rence\030\003 \001(\0132\033.TSCE.RangeReferenceArchive"
    "\022E\n\030internal_range_reference\030\004 \001(\0132#.TSC"
    "E.InternalRangeReferenceArchive\"c\n RTree"
    "InternalNodeContentsArchive\022\013\n\003min\030\001 \003(\r"
    "\022\013\n\003max\030\002 \003(\r\022%\n\005child\030\003 \002(\0132\026.TSCE.RTre"
    "eNodeArchive\"l\n\034RTreeLeafNodeContentsArc"
    "hive\022\013\n\003min\030\001 \003(\r\022\013\n\003max\030\002 \003(\r\0222\n\016cell_r"
    "eference\030\003 \002(\0132\032.TSCE.CellReferenceArchi"
    "ve\"\270\001\n\020RTreeNodeArchive\022\r\n\005level\030\001 \002(\r\022\r"
    "\n\005count\030\002 \002(\r\022F\n\026internal_node_contents\030"
    "\003 \003(\0132&.TSCE.RTreeInternalNodeContentsAr"
    "chive\022>\n\022leaf_node_contents\030\004 \003(\0132\".TSCE"
    ".RTreeLeafNodeContentsArchive\"\331\001\n\014RTreeA"
    "rchive\022\024\n\014data_file_id\030\001 \002(\r\022\021\n\tdata_siz"
    "e\030\002 \002(\r\022\025\n\rdata_num_dims\030\003 \002(\r\022\026\n\016data_e"
    "lem_size\030\004 \002(\r\022\033\n\023data_elem_real_size\030\005 "
    "\002(\r\022\026\n\016data_max_nodes\030\006 \002(\r\022\026\n\016data_min_"
    "nodes\030\007 \002(\r\022$\n\004root\030\010 \002(\0132\026.TSCE.RTreeNo"
    "deArchive\"y\n\030RangeDependenciesArchive\022\"\n"
    "\006r_tree\030\001 \001(\0132\022.TSCE.RTreeArchive\0229\n\017bac"
    "k_dependency\030\002 \003(\0132 .TSCE.RangeBackDepen"
    "dencyArchive\"\225\007\n\033SpanningDependenciesArc"
    "hive\022\016\n\006column\030\001 \003(\r\022E\n\rrange_context\030\002 "
    "\003(\0162..TSCE.SpanningDependenciesArchive.R"
    "angeContext\022(\n\004cell\030\003 \003(\0132\032.TSCE.CellRef"
    "erenceArchive\022C\n\035total_range_for_deleted"
    "_table\030\004 \001(\0132\034.TSCE.RangeCoordinateArchi"
    "ve\022B\n\034body_range_for_deleted_table\030\005 \001(\013"
    "2\034.TSCE.RangeCoordinateArchive\022f\n\037referr"
    "ing_column_to_local_cells\030\006 \003(\0132=.TSCE.S"
    "panningDependenciesArchive.ReferringColu"
    "mnToLocalCells\022h\n referring_column_to_re"
    "mote_cells\030\007 \003(\0132>.TSCE.SpanningDependen"
    "ciesArchive.ReferringColumnToRemoteCells"
    "\032\252\001\n\033ReferringColumnToLocalCells\022\016\n\006colu"
    "mn\030\001 \002(\r\022E\n\rrange_context\030\002 \002(\0162..TSCE.S"
    "panningDependenciesArchive.RangeContext\022"
    "4\n\017cell_coordinate\030\003 \003(\0132\033.TSCE.CellCoor"
    "dinateArchive\032\272\001\n\034ReferringColumnToRemot"
    "eCells\022\016\n\006column\030\001 \002(\r\022E\n\rrange_context\030"
    "\002 \002(\0162..TSCE.SpanningDependenciesArchive"
    ".RangeContext\022C\n\027internal_cell_reference"
    "\030\003 \003(\0132\".TSCE.InternalCellReferenceArchi"
    "ve\"0\n\014RangeContext\022\013\n\007DEFAULT\020\000\022\023\n\017INCLU"
    "DE_HEADERS\020\001\"[\n\035WholeOwnerDependenciesAr"
    "chive\022:\n\016dependent_cell\030\001 \003(\0132\".TSCE.Int"
    "ernalCellReferenceArchive\"\375\003\n\027FormulaOwn"
    "erInfoArchive\022-\n\020formula_owner_id\030\001 \002(\0132"
    "\023.TSCE.CFUUIDArchive\0228\n\021cell_dependencie"
    "s\030\002 \001(\0132\035.TSCE.CellDependenciesArchive\022:"
    "\n\022range_dependencies\030\003 \001(\0132\036.TSCE.RangeD"
    "ependenciesArchive\022@\n\025volatile_dependenc"
    "ies\030\004 \001(\0132!.TSCE.VolatileDependenciesArc"
    "hive\022G\n\034spanning_column_dependencies\030\005 \001"
    "(\0132!.TSCE.SpanningDependenciesArchive\022D\n"
    "\031spanning_row_dependencies\030\006 \001(\0132!.TSCE."
    "SpanningDependenciesArchive\022E\n\030whole_own"
    "er_dependencies\030\010 \001(\0132#.TSCE.WholeOwnerD"
    "ependenciesArchive\022%\n\rformula_owner\030\007 \001("
    "\0132\016.TSP.Reference\"\262\001\n\021OwnerIDMapArchive\022"
    "A\n\tmap_entry\030\001 \003(\0132..TSCE.OwnerIDMapArch"
    "ive.OwnerIDMapArchiveEntry\032Z\n\026OwnerIDMap"
    "ArchiveEntry\022\031\n\021internal_owner_id\030\001 \002(\r\022"
    "%\n\010owner_id\030\002 \002(\0132\023.TSCE.CFUUIDArchive\"\375"
    "\001\n\030DependencyTrackerArchive\0229\n\022formula_o"
    "wner_info\030\001 \003(\0132\035.TSCE.FormulaOwnerInfoA"
    "rchive\0222\n\ndirty_leaf\030\002 \003(\0132\032.TSCE.CellRe"
    "ferenceArchiveB\002\030\001\022C\n\023internal_dirty_lea"
    "f\030\004 \003(\0132\".TSCE.InternalCellReferenceArch"
    "iveB\002\030\001\022-\n\014owner_id_map\030\003 \001(\0132\027.TSCE.Own"
    "erIDMapArchive\"q\n\030NameTrackedReferencePa"
    "ir\022\014\n\004name\030\001 \002(\t\022)\n\021tracked_reference\030\002 "
    "\001(\0132\016.TSP.Reference\022\034\n\024tracked_reference"
    "_id\030\003 \001(\r\"\214\001\n\036NamesByTrackedReferenceArc"
    "hive\022%\n\010table_id\030\001 \002(\0132\023.TSCE.CFUUIDArch"
    "ive\022C\n\033name_tracked_reference_pair\030\002 \003(\013"
    "2\036.TSCE.NameTrackedReferencePair\"\240\001\n\034Nam"
    "edReferenceManagerArchive\022)\n\021reference_t"
    "racker\030\001 \002(\0132\016.TSP.Reference\022U\n#names_by"
    "_tracked_reference_by_table\030\002 \003(\0132$.TSCE"
    ".NamesByTrackedReferenceArchiveB\002\030\001\"\205\003\n\030"
    "CalculationEngineArchive\022\026\n\016base_date_19"
    "04\030\001 \001(\010\022:\n\022dependency_tracker\030\002 \002(\0132\036.T"
    "SCE.DependencyTrackerArchive\022/\n\027named_re"
    "ference_manager\030\003 \001(\0132\016.TSP.Reference\022b\n"
    "\026excel_import_date_mode\030\004 \001(\01622.TSCE.Cal"
    "culationEngineArchive.ExcelImportDateMod"
    "e:\016DATE_MODE_1900\022\037\n\027saved_locale_identi"
    "fier\030\005 \001(\t\"_\n\023ExcelImportDateMode\022\022\n\016DAT"
    "E_MODE_1900\020\001\022\031\n\025DATE_MODE_1900_LEGACY\020\002"
    "\022\031\n\025DATE_MODE_1904_LEGACY\020\003\"\256\031\n\023ASTNodeA"
    "rrayArchive\022:\n\010AST_node\030\001 \003(\0132(.TSCE.AST"
    "NodeArrayArchive.ASTNodeArchive\032~\n ASTLo"
    "calCellReferenceNodeArchive\022\022\n\nrow_handl"
    "e\030\001 \002(\r\022\025\n\rcolumn_handle\030\002 \002(\r\022\025\n\rrow_is"
    "_sticky\030\003 \002(\r\022\030\n\020column_is_sticky\030\004 \002(\r\032"
    "\372\002\n%ASTCrossTableCellReferenceNodeArchiv"
    "e\022\022\n\nrow_handle\030\001 \002(\r\022\025\n\rcolumn_handle\030\002"
    " \002(\r\022\025\n\rrow_is_sticky\030\003 \002(\r\022\030\n\020column_is"
    "_sticky\030\004 \002(\r\022%\n\010table_id\030\005 \002(\0132\023.TSCE.C"
    "FUUIDArchive\0221\n)AST_reference_whitespace"
    "_after_sheet_name\030\006 \001(\t\0222\n*AST_reference"
    "_whitespace_before_table_name\030\007 \001(\t\0221\n)A"
    "ST_reference_whitespace_after_table_name"
    "\030\010 \001(\t\0224\n,AST_reference_whitespace_befor"
    "e_cell_address\030\t \001(\t\032E\n\032ASTColumnCoordin"
    "ateArchive\022\016\n\006column\030\001 \002(\021\022\027\n\010absolute\030\002"
    " \001(\010:\005false\032\?\n\027ASTRowCoordinateArchive\022\013"
    "\n\003row\030\001 \002(\021\022\027\n\010absolute\030\002 \001(\010:\005false\032\237\002\n"
    "&ASTCrossTableReferenceExtraInfoArchive\022"
    "%\n\010table_id\030\001 \002(\0132\023.TSCE.CFUUIDArchive\0221"
    "\n)AST_reference_whitespace_after_sheet_n"
    "ame\030\002 \001(\t\0222\n*AST_reference_whitespace_be"
    "fore_table_name\030\003 \001(\t\0221\n)AST_reference_w"
    "hitespace_after_table_name\030\004 \001(\t\0224\n,AST_"
    "reference_whitespace_before_cell_address"
    "\030\005 \001(\t\032\217\013\n\016ASTNodeArchive\022<\n\rAST_node_ty"
    "pe\030\001 \002(\0162%.TSCE.ASTNodeArrayArchive.ASTN"
    "odeType\022\037\n\027AST_function_node_index\030\002 \001(\r"
    "\022!\n\031AST_function_node_numArgs\030\003 \001(\r\022\036\n\026A"
    "ST_number_node_number\030\004 \001(\001\022 \n\030AST_boole"
    "an_node_boolean\030\005 \001(\010\022\036\n\026AST_string_node"
    "_string\030\006 \001(\t\022\035\n\025AST_date_node_dateNum\030\007"
    " \001(\001\022*\n\"AST_date_node_suppress_date_form"
    "at\030\023 \001(\010\022*\n\"AST_date_node_suppress_time_"
    "format\030\024 \001(\010\022&\n\036AST_date_node_date_time_"
    "format\030\025 \001(\t\022!\n\031AST_duration_node_unitNu"
    "m\030\010 \001(\001\022\036\n\026AST_duration_node_unit\030\t \001(\005\022"
    "\037\n\027AST_duration_node_style\030\026 \001(\r\022/\n\'AST_"
    "duration_node_duration_unit_largest\030\027 \001("
    "\r\0220\n(AST_duration_node_duration_unit_sma"
    "llest\030\030 \001(\r\022-\n%AST_duration_node_use_aut"
    "omatic_units\030\035 \001(\010\022\036\n\026AST_token_node_boo"
    "lean\030\n \001(\010\022\035\n\025AST_array_node_numCol\030\013 \001("
    "\r\022\035\n\025AST_array_node_numRow\030\014 \001(\r\022\035\n\025AST_"
    "list_node_numArgs\030\r \001(\r\0227\n\024AST_thunk_nod"
    "e_array\030\016 \001(\0132\031.TSCE.ASTNodeArrayArchive"
    "\022k\n\'AST_local_cell_reference_node_refere"
    "nce\030\017 \001(\0132:.TSCE.ASTNodeArrayArchive.AST"
    "LocalCellReferenceNodeArchive\022v\n-AST_cro"
    "ss_table_cell_reference_node_reference\030\020"
    " \001(\0132\?.TSCE.ASTNodeArrayArchive.ASTCross"
    "TableCellReferenceNodeArchive\022(\n AST_unk"
    "nown_function_node_string\030\021 \001(\t\022)\n!AST_u"
    "nknown_function_node_numArgs\030\022 \001(\r\022\026\n\016AS"
    "T_whitespace\030\031 \001(\t\022H\n\nAST_column\030\032 \001(\01324"
    ".TSCE.ASTNodeArrayArchive.ASTColumnCoord"
    "inateArchive\022B\n\007AST_row\030\033 \001(\01321.TSCE.AST"
    "NodeArrayArchive.ASTRowCoordinateArchive"
    "\022n\n$AST_cross_table_reference_extra_info"
    "\030\034 \001(\0132@.TSCE.ASTNodeArrayArchive.ASTCro"
    "ssTableReferenceExtraInfoArchive\"\241\006\n\013AST"
    "NodeType\022\021\n\rADDITION_NODE\020\001\022\024\n\020SUBTRACTI"
    "ON_NODE\020\002\022\027\n\023MULTIPLICATION_NODE\020\003\022\021\n\rDI"
    "VISION_NODE\020\004\022\016\n\nPOWER_NODE\020\005\022\026\n\022CONCATE"
    "NATION_NODE\020\006\022\025\n\021GREATER_THAN_NODE\020\007\022!\n\035"
    "GREATER_THAN_OR_EQUAL_TO_NODE\020\010\022\022\n\016LESS_"
    "THAN_NODE\020\t\022\036\n\032LESS_THAN_OR_EQUAL_TO_NOD"
    "E\020\n\022\021\n\rEQUAL_TO_NODE\020\013\022\025\n\021NOT_EQUAL_TO_N"
    "ODE\020\014\022\021\n\rNEGATION_NODE\020\r\022\022\n\016PLUS_SIGN_NO"
    "DE\020\016\022\020\n\014PERCENT_NODE\020\017\022\021\n\rFUNCTION_NODE\020"
    "\020\022\017\n\013NUMBER_NODE\020\021\022\020\n\014BOOLEAN_NODE\020\022\022\017\n\013"
    "STRING_NODE\020\023\022\r\n\tDATE_NODE\020\024\022\021\n\rDURATION"
    "_NODE\020\025\022\027\n\023EMPTY_ARGUMENT_NODE\020\026\022\016\n\nTOKE"
    "N_NODE\020\027\022\016\n\nARRAY_NODE\020\030\022\r\n\tLIST_NODE\020\031\022"
    "\016\n\nTHUNK_NODE\020\032\022\035\n\031LOCAL_CELL_REFERENCE_"
    "NODE\020\033\022#\n\037CROSS_TABLE_CELL_REFERENCE_NOD"
    "E\020\034\022\016\n\nCOLON_NODE\020\035\022\030\n\024REFERENCE_ERROR_N"
    "ODE\020\036\022\031\n\025UNKNOWN_FUNCTION_NODE\020\037\022\032\n\026APPE"
    "ND_WHITESPACE_NODE\020 \022\033\n\027PREPEND_WHITESPA"
    "CE_NODE\020!\022\024\n\020BEGIN_THUNK_NODE\020\"\022\022\n\016END_T"
    "HUNK_NODE\020#\022\027\n\023CELL_REFERENCE_NODE\020$\"\205\001\n"
    "\036FormulaTranslationFlagsArchive\022\'\n\030excel"
    "_import_translation\030\001 \001(\010:\005false\022:\n+numb"
    "er_to_date_coercion_removal_translation\030"
    "\002 \001(\010:\005false\"\370\001\n\016FormulaArchive\0221\n\016AST_n"
    "ode_array\030\001 \002(\0132\031.TSCE.ASTNodeArrayArchi"
    "ve\022\023\n\013host_column\030\002 \001(\r\022\020\n\010host_row\030\003 \001("
    "\r\022&\n\027host_column_is_negative\030\004 \001(\010:\005fals"
    "e\022#\n\024host_row_is_negative\030\005 \001(\010:\005false\022\?"
    "\n\021translation_flags\030\006 \001(\0132$.TSCE.Formula"
    "TranslationFlagsArchive\"\271\003\n\023FormatStruct"
    "Archive\022\023\n\013format_type\030\001 \002(\r\022\026\n\016decimal_"
    "places\030\002 \001(\r\022\025\n\rcurrency_code\030\003 \001(\t\022\026\n\016n"
    "egative_style\030\004 \001(\r\022 \n\030show_thousands_se"
    "parator\030\005 \001(\010\022\034\n\024use_accounting_style\030\006 "
    "\001(\010\022\026\n\016duration_style\030\007 \001(\r\022\014\n\004base\030\010 \001("
    "\r\022\023\n\013base_places\030\t \001(\r\022\033\n\023base_use_minus"
    "_sign\030\n \001(\010\022\031\n\021fraction_accuracy\030\013 \001(\r\022\034"
    "\n\024suppress_date_format\030\014 \001(\010\022\034\n\024suppress"
    "_time_format\030\r \001(\010\022\030\n\020date_time_format\030\016"
    " \001(\t\022\035\n\025duration_unit_largest\030\017 \001(\r\022\036\n\026d"
    "uration_unit_smallest\030\020 \001(\r\"~\n\026RangeCoor"
    "dinateArchive\022\027\n\017top_left_column\030\001 \002(\r\022\024"
    "\n\014top_left_row\030\002 \002(\r\022\033\n\023bottom_right_col"
    "umn\030\003 \002(\r\022\030\n\020bottom_right_row\030\004 \002(\r\"\207\004\n\024"
    "TectonicShiftArchive\022 \n\030grid_coordinate_"
    "offset_x\030\001 \002(\r\022 \n\030grid_coordinate_offset"
    "_y\030\002 \002(\r\022,\n$grid_coordinate_offset_x_is_"
    "negative\030\003 \002(\010\022,\n$grid_coordinate_offset"
    "_y_is_negative\030\004 \002(\010\0225\n\017range_for_shift\030"
    "\005 \001(\0132\034.TSCE.RangeCoordinateArchive\0228\n\022r"
    "ange_for_deletion\030\006 \001(\0132\034.TSCE.RangeCoor"
    "dinateArchive\0224\n\016inserted_range\030\007 \001(\0132\034."
    "TSCE.RangeCoordinateArchive\022\031\n\021apply_to_"
    "absolute\030\010 \002(\010\022\027\n\017inserting_after\030\t \002(\010\022"
    "\032\n\022ignore_sticky_bits\030\n \002(\010\0221\n\013table_ran"
    "ge\030\013 \001(\0132\034.TSCE.RangeCoordinateArchive\022%"
    "\n\010table_id\030\014 \001(\0132\023.TSCE.CFUUIDArchive\"\217\001"
    "\n\031RewriteSortMappingArchive\022%\n\010table_id\030"
    "\001 \002(\0132\023.TSCE.CFUUIDArchive\0223\n\017shuffle_ma"
    "pping\030\002 \002(\0132\032.TSK.ShuffleMappingArchive\022"
    "\026\n\016explode_ranges\030\003 \002(\010\"\224\002\n\025RangeMovedIn"
    "foArchive\022%\n\010table_id\030\001 \001(\0132\023.TSCE.CFUUI"
    "DArchive\0220\n\nfrom_range\030\002 \001(\0132\034.TSCE.Rang"
    "eCoordinateArchive\022.\n\010to_range\030\003 \001(\0132\034.T"
    "SCE.RangeCoordinateArchive\0229\n\024from_range"
    "_reference\030\004 \001(\0132\033.TSCE.RangeReferenceAr"
    "chive\0227\n\022to_range_reference\030\005 \001(\0132\033.TSCE"
    ".RangeReferenceArchive\"\254\001\n\027TableResizedI"
    "nfoArchive\022%\n\010table_id\030\001 \002(\0132\023.TSCE.CFUU"
    "IDArchive\0224\n\016new_table_size\030\002 \002(\0132\034.TSCE"
    ".RangeCoordinateArchive\0224\n\016old_table_siz"
    "e\030\003 \001(\0132\034.TSCE.RangeCoordinateArchive\"q\n"
    "\024CellMergeInfoArchive\022%\n\010table_id\030\001 \002(\0132"
    "\023.TSCE.CFUUIDArchive\0222\n\014merged_range\030\002 \002"
    "(\0132\034.TSCE.RangeCoordinateArchive\"\244\004\n\031For"
    "mulaRewriteSpecArchive\022A\n\014rewrite_type\030\001"
    " \002(\0162+.TSCE.FormulaRewriteSpecArchive.Re"
    "writeType\0222\n\016tectonic_shift\030\002 \001(\0132\032.TSCE"
    ".TectonicShiftArchive\0225\n\014sort_mapping\030\003 "
    "\001(\0132\037.TSCE.RewriteSortMappingArchive\0225\n\020"
    "range_moved_info\030\004 \001(\0132\033.TSCE.RangeMoved"
    "InfoArchive\022-\n\020deleted_owner_id\030\005 \001(\0132\023."
    "TSCE.CFUUIDArchive\0229\n\022table_resized_info"
    "\030\006 \001(\0132\035.TSCE.TableResizedInfoArchive\0223\n"
    "\017cell_merge_info\030\007 \001(\0132\032.TSCE.CellMergeI"
    "nfoArchive\"\202\001\n\013RewriteType\022\022\n\016TECTONIC_S"
    "HIFT\020\001\022\033\n\027REMAP_WITH_SORT_MAPPING\020\002\022\016\n\nM"
    "OVE_RANGE\020\003\022\020\n\014DELETE_OWNER\020\004\022\020\n\014TABLE_R"
    "ESIZE\020\005\022\016\n\nCELL_MERGE\020\006\"f\n CellCoordinat"
    "eFormulaPairArchive\022\016\n\006column\030\001 \002(\r\022\013\n\003r"
    "ow\030\002 \002(\r\022%\n\007formula\030\003 \001(\0132\024.TSCE.Formula"
    "Archive\"H\n\025CellCoordinateArchive\022\022\n\npack"
    "edData\030\001 \001(\007\022\016\n\006column\030\002 \001(\r\022\013\n\003row\030\003 \001("
    "\r\"S\n\033CellCoordinateVectorArchive\0224\n\017cell"
    "_coordinate\030\001 \003(\0132\033.TSCE.CellCoordinateA"
    "rchive\"w\n\037CellCoordinateObjectPairArchiv"
    "e\0224\n\017cell_coordinate\030\001 \002(\0132\033.TSCE.CellCo"
    "ordinateArchive\022\036\n\006object\030\002 \002(\0132\016.TSP.Re"
    "ference\"l\n\036CellCoordinateObjectMapArchiv"
    "e\022J\n\033cell_coordinate_object_pair\030\001 \003(\0132%"
    ".TSCE.CellCoordinateObjectPairArchive\"a\n"
    "\026OwnerFormulaMapArchive\022G\n\027coordinate_fo"
    "rmula_pair\030\001 \003(\0132&.TSCE.CellCoordinateFo"
    "rmulaPairArchive\"q\n\034FormulaRewriteComman"
    "dArchive\022-\n\025table_rewrite_command\030\001 \001(\0132"
    "\016.TSP.Reference\022\"\n\005super\030\002 \001(\0132\023.TSK.Com"
    "mandArchive\"^\n!NumberTrackedReferencePai"
    "rArchive\022\016\n\006number\030\001 \002(\r\022)\n\021tracked_refe"
    "rence\030\002 \001(\0132\016.TSP.Reference\"t\n\"NumberToT"
    "rackedReferenceMapArchive\022N\n\035number_trac"
    "ked_reference_pair\030\001 \003(\0132\'.TSCE.NumberTr"
    "ackedReferencePairArchive\"\336\002\n&TrackedRef"
    "erencesRewriteCommandArchive\022U\n\037referenc"
    "es_in_reference_tracker\030\001 \001(\0132(.TSCE.Num"
    "berToTrackedReferenceMapArchiveB\002\030\001\022W\n!o"
    "riginal_tracked_reference_copies\030\002 \001(\0132("
    ".TSCE.NumberToTrackedReferenceMapArchive"
    "B\002\030\001\0225\n\014rewrite_spec\030\003 \001(\0132\037.TSCE.Formul"
    "aRewriteSpecArchive\022)\n\021reference_tracker"
    "\030\004 \002(\0132\016.TSP.Reference\022\"\n\005super\030\005 \002(\0132\023."
    "TSK.CommandArchive\"U\n\027TrackedReferenceAr"
    "chive\022&\n\003ast\030\001 \002(\0132\031.TSCE.ASTNodeArrayAr"
    "chive\022\022\n\nformula_id\030\002 \002(\r\"\257\001\n\027ReferenceT"
    "rackerArchive\022!\n\004uuid\030\001 \002(\0132\023.TSCE.CFUUI"
    "DArchive\022-\n\021tracked_reference\030\002 \003(\0132\016.TS"
    "P.ReferenceB\002\030\001\022B\n\033contained_tracked_ref"
    "erence\030\003 \003(\0132\035.TSCE.TrackedReferenceArch"
    "ive\"(\n\027BooleanCellValueArchive\022\r\n\005value\030"
    "\001 \002(\010\"q\n\024DateCellValueArchive\022\r\n\005value\030\001"
    " \002(\001\022(\n\006format\030\002 \002(\0132\030.TSK.FormatStructA"
    "rchive\022 \n\022format_is_implicit\030\003 \001(\010:\004true"
    "\"\236\001\n\026NumberCellValueArchive\022\r\n\005value\030\001 \002"
    "(\001\022\022\n\nunit_index\030\002 \001(\005\022\025\n\rcurrency_code\030"
    "\005 \001(\t\022(\n\006format\030\003 \002(\0132\030.TSK.FormatStruct"
    "Archive\022 \n\022format_is_implicit\030\004 \001(\010:\004tru"
    "e\"s\n\026StringCellValueArchive\022\r\n\005value\030\001 \002"
    "(\t\022(\n\006format\030\002 \002(\0132\030.TSK.FormatStructArc"
    "hive\022 \n\022format_is_implicit\030\003 \001(\010:\004true\"\201"
    "\003\n\020CellValueArchive\022=\n\017cell_value_type\030\001"
    " \002(\0162$.TSCE.CellValueArchive.CellValueTy"
    "pe\0224\n\rboolean_value\030\002 \001(\0132\035.TSCE.Boolean"
    "CellValueArchive\022.\n\ndate_value\030\003 \001(\0132\032.T"
    "SCE.DateCellValueArchive\0222\n\014number_value"
    "\030\004 \001(\0132\034.TSCE.NumberCellValueArchive\0222\n\014"
    "string_value\030\005 \001(\0132\034.TSCE.StringCellValu"
    "eArchive\"`\n\rCellValueType\022\014\n\010NIL_TYPE\020\001\022"
    "\020\n\014BOOLEAN_TYPE\020\002\022\r\n\tDATE_TYPE\020\003\022\017\n\013NUMB"
    "ER_TYPE\020\004\022\017\n\013STRING_TYPE\020\005", 14426);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TSCEArchives.proto", &protobuf_RegisterTypes);
  CFUUIDArchive::default_instance_ = new CFUUIDArchive();
  CellReferenceArchive::default_instance_ = new CellReferenceArchive();
  InternalCellReferenceArchive::default_instance_ = new InternalCellReferenceArchive();
  RangeReferenceArchive::default_instance_ = new RangeReferenceArchive();
  InternalRangeReferenceArchive::default_instance_ = new InternalRangeReferenceArchive();
  ReferenceArchive::default_instance_ = new ReferenceArchive();
  EdgeArchive::default_instance_ = new EdgeArchive();
  EdgesArchive::default_instance_ = new EdgesArchive();
  CellRecordArchive::default_instance_ = new CellRecordArchive();
  CellDependenciesArchive::default_instance_ = new CellDependenciesArchive();
  VolatileDependenciesArchive::default_instance_ = new VolatileDependenciesArchive();
  RangeBackDependencyArchive::default_instance_ = new RangeBackDependencyArchive();
  RTreeInternalNodeContentsArchive::default_instance_ = new RTreeInternalNodeContentsArchive();
  RTreeLeafNodeContentsArchive::default_instance_ = new RTreeLeafNodeContentsArchive();
  RTreeNodeArchive::default_instance_ = new RTreeNodeArchive();
  RTreeArchive::default_instance_ = new RTreeArchive();
  RangeDependenciesArchive::default_instance_ = new RangeDependenciesArchive();
  SpanningDependenciesArchive::default_instance_ = new SpanningDependenciesArchive();
  SpanningDependenciesArchive_ReferringColumnToLocalCells::default_instance_ = new SpanningDependenciesArchive_ReferringColumnToLocalCells();
  SpanningDependenciesArchive_ReferringColumnToRemoteCells::default_instance_ = new SpanningDependenciesArchive_ReferringColumnToRemoteCells();
  WholeOwnerDependenciesArchive::default_instance_ = new WholeOwnerDependenciesArchive();
  FormulaOwnerInfoArchive::default_instance_ = new FormulaOwnerInfoArchive();
  OwnerIDMapArchive::default_instance_ = new OwnerIDMapArchive();
  OwnerIDMapArchive_OwnerIDMapArchiveEntry::default_instance_ = new OwnerIDMapArchive_OwnerIDMapArchiveEntry();
  DependencyTrackerArchive::default_instance_ = new DependencyTrackerArchive();
  NameTrackedReferencePair::default_instance_ = new NameTrackedReferencePair();
  NamesByTrackedReferenceArchive::default_instance_ = new NamesByTrackedReferenceArchive();
  NamedReferenceManagerArchive::default_instance_ = new NamedReferenceManagerArchive();
  CalculationEngineArchive::default_instance_ = new CalculationEngineArchive();
  ASTNodeArrayArchive::default_instance_ = new ASTNodeArrayArchive();
  ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::default_instance_ = new ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive();
  ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::default_instance_ = new ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive();
  ASTNodeArrayArchive_ASTColumnCoordinateArchive::default_instance_ = new ASTNodeArrayArchive_ASTColumnCoordinateArchive();
  ASTNodeArrayArchive_ASTRowCoordinateArchive::default_instance_ = new ASTNodeArrayArchive_ASTRowCoordinateArchive();
  ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::default_instance_ = new ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive();
  ASTNodeArrayArchive_ASTNodeArchive::default_instance_ = new ASTNodeArrayArchive_ASTNodeArchive();
  FormulaTranslationFlagsArchive::default_instance_ = new FormulaTranslationFlagsArchive();
  FormulaArchive::default_instance_ = new FormulaArchive();
  FormatStructArchive::default_instance_ = new FormatStructArchive();
  RangeCoordinateArchive::default_instance_ = new RangeCoordinateArchive();
  TectonicShiftArchive::default_instance_ = new TectonicShiftArchive();
  RewriteSortMappingArchive::default_instance_ = new RewriteSortMappingArchive();
  RangeMovedInfoArchive::default_instance_ = new RangeMovedInfoArchive();
  TableResizedInfoArchive::default_instance_ = new TableResizedInfoArchive();
  CellMergeInfoArchive::default_instance_ = new CellMergeInfoArchive();
  FormulaRewriteSpecArchive::default_instance_ = new FormulaRewriteSpecArchive();
  CellCoordinateFormulaPairArchive::default_instance_ = new CellCoordinateFormulaPairArchive();
  CellCoordinateArchive::default_instance_ = new CellCoordinateArchive();
  CellCoordinateVectorArchive::default_instance_ = new CellCoordinateVectorArchive();
  CellCoordinateObjectPairArchive::default_instance_ = new CellCoordinateObjectPairArchive();
  CellCoordinateObjectMapArchive::default_instance_ = new CellCoordinateObjectMapArchive();
  OwnerFormulaMapArchive::default_instance_ = new OwnerFormulaMapArchive();
  FormulaRewriteCommandArchive::default_instance_ = new FormulaRewriteCommandArchive();
  NumberTrackedReferencePairArchive::default_instance_ = new NumberTrackedReferencePairArchive();
  NumberToTrackedReferenceMapArchive::default_instance_ = new NumberToTrackedReferenceMapArchive();
  TrackedReferencesRewriteCommandArchive::default_instance_ = new TrackedReferencesRewriteCommandArchive();
  TrackedReferenceArchive::default_instance_ = new TrackedReferenceArchive();
  ReferenceTrackerArchive::default_instance_ = new ReferenceTrackerArchive();
  BooleanCellValueArchive::default_instance_ = new BooleanCellValueArchive();
  DateCellValueArchive::default_instance_ = new DateCellValueArchive();
  NumberCellValueArchive::default_instance_ = new NumberCellValueArchive();
  StringCellValueArchive::default_instance_ = new StringCellValueArchive();
  CellValueArchive::default_instance_ = new CellValueArchive();
  CFUUIDArchive::default_instance_->InitAsDefaultInstance();
  CellReferenceArchive::default_instance_->InitAsDefaultInstance();
  InternalCellReferenceArchive::default_instance_->InitAsDefaultInstance();
  RangeReferenceArchive::default_instance_->InitAsDefaultInstance();
  InternalRangeReferenceArchive::default_instance_->InitAsDefaultInstance();
  ReferenceArchive::default_instance_->InitAsDefaultInstance();
  EdgeArchive::default_instance_->InitAsDefaultInstance();
  EdgesArchive::default_instance_->InitAsDefaultInstance();
  CellRecordArchive::default_instance_->InitAsDefaultInstance();
  CellDependenciesArchive::default_instance_->InitAsDefaultInstance();
  VolatileDependenciesArchive::default_instance_->InitAsDefaultInstance();
  RangeBackDependencyArchive::default_instance_->InitAsDefaultInstance();
  RTreeInternalNodeContentsArchive::default_instance_->InitAsDefaultInstance();
  RTreeLeafNodeContentsArchive::default_instance_->InitAsDefaultInstance();
  RTreeNodeArchive::default_instance_->InitAsDefaultInstance();
  RTreeArchive::default_instance_->InitAsDefaultInstance();
  RangeDependenciesArchive::default_instance_->InitAsDefaultInstance();
  SpanningDependenciesArchive::default_instance_->InitAsDefaultInstance();
  SpanningDependenciesArchive_ReferringColumnToLocalCells::default_instance_->InitAsDefaultInstance();
  SpanningDependenciesArchive_ReferringColumnToRemoteCells::default_instance_->InitAsDefaultInstance();
  WholeOwnerDependenciesArchive::default_instance_->InitAsDefaultInstance();
  FormulaOwnerInfoArchive::default_instance_->InitAsDefaultInstance();
  OwnerIDMapArchive::default_instance_->InitAsDefaultInstance();
  OwnerIDMapArchive_OwnerIDMapArchiveEntry::default_instance_->InitAsDefaultInstance();
  DependencyTrackerArchive::default_instance_->InitAsDefaultInstance();
  NameTrackedReferencePair::default_instance_->InitAsDefaultInstance();
  NamesByTrackedReferenceArchive::default_instance_->InitAsDefaultInstance();
  NamedReferenceManagerArchive::default_instance_->InitAsDefaultInstance();
  CalculationEngineArchive::default_instance_->InitAsDefaultInstance();
  ASTNodeArrayArchive::default_instance_->InitAsDefaultInstance();
  ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::default_instance_->InitAsDefaultInstance();
  ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::default_instance_->InitAsDefaultInstance();
  ASTNodeArrayArchive_ASTColumnCoordinateArchive::default_instance_->InitAsDefaultInstance();
  ASTNodeArrayArchive_ASTRowCoordinateArchive::default_instance_->InitAsDefaultInstance();
  ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::default_instance_->InitAsDefaultInstance();
  ASTNodeArrayArchive_ASTNodeArchive::default_instance_->InitAsDefaultInstance();
  FormulaTranslationFlagsArchive::default_instance_->InitAsDefaultInstance();
  FormulaArchive::default_instance_->InitAsDefaultInstance();
  FormatStructArchive::default_instance_->InitAsDefaultInstance();
  RangeCoordinateArchive::default_instance_->InitAsDefaultInstance();
  TectonicShiftArchive::default_instance_->InitAsDefaultInstance();
  RewriteSortMappingArchive::default_instance_->InitAsDefaultInstance();
  RangeMovedInfoArchive::default_instance_->InitAsDefaultInstance();
  TableResizedInfoArchive::default_instance_->InitAsDefaultInstance();
  CellMergeInfoArchive::default_instance_->InitAsDefaultInstance();
  FormulaRewriteSpecArchive::default_instance_->InitAsDefaultInstance();
  CellCoordinateFormulaPairArchive::default_instance_->InitAsDefaultInstance();
  CellCoordinateArchive::default_instance_->InitAsDefaultInstance();
  CellCoordinateVectorArchive::default_instance_->InitAsDefaultInstance();
  CellCoordinateObjectPairArchive::default_instance_->InitAsDefaultInstance();
  CellCoordinateObjectMapArchive::default_instance_->InitAsDefaultInstance();
  OwnerFormulaMapArchive::default_instance_->InitAsDefaultInstance();
  FormulaRewriteCommandArchive::default_instance_->InitAsDefaultInstance();
  NumberTrackedReferencePairArchive::default_instance_->InitAsDefaultInstance();
  NumberToTrackedReferenceMapArchive::default_instance_->InitAsDefaultInstance();
  TrackedReferencesRewriteCommandArchive::default_instance_->InitAsDefaultInstance();
  TrackedReferenceArchive::default_instance_->InitAsDefaultInstance();
  ReferenceTrackerArchive::default_instance_->InitAsDefaultInstance();
  BooleanCellValueArchive::default_instance_->InitAsDefaultInstance();
  DateCellValueArchive::default_instance_->InitAsDefaultInstance();
  NumberCellValueArchive::default_instance_->InitAsDefaultInstance();
  StringCellValueArchive::default_instance_->InitAsDefaultInstance();
  CellValueArchive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TSCEArchives_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TSCEArchives_2eproto {
  StaticDescriptorInitializer_TSCEArchives_2eproto() {
    protobuf_AddDesc_TSCEArchives_2eproto();
  }
} static_descriptor_initializer_TSCEArchives_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CFUUIDArchive::kUuidBytesFieldNumber;
const int CFUUIDArchive::kUuidW0FieldNumber;
const int CFUUIDArchive::kUuidW1FieldNumber;
const int CFUUIDArchive::kUuidW2FieldNumber;
const int CFUUIDArchive::kUuidW3FieldNumber;
#endif  // !_MSC_VER

CFUUIDArchive::CFUUIDArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CFUUIDArchive::InitAsDefaultInstance() {
}

CFUUIDArchive::CFUUIDArchive(const CFUUIDArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CFUUIDArchive::SharedCtor() {
  _cached_size_ = 0;
  uuid_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uuid_w0_ = 0u;
  uuid_w1_ = 0u;
  uuid_w2_ = 0u;
  uuid_w3_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CFUUIDArchive::~CFUUIDArchive() {
  SharedDtor();
}

void CFUUIDArchive::SharedDtor() {
  if (uuid_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_bytes_;
  }
  if (this != default_instance_) {
  }
}

void CFUUIDArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CFUUIDArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CFUUIDArchive_descriptor_;
}

const CFUUIDArchive& CFUUIDArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

CFUUIDArchive* CFUUIDArchive::default_instance_ = NULL;

CFUUIDArchive* CFUUIDArchive::New() const {
  return new CFUUIDArchive;
}

void CFUUIDArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid_bytes()) {
      if (uuid_bytes_ != &::google::protobuf::internal::kEmptyString) {
        uuid_bytes_->clear();
      }
    }
    uuid_w0_ = 0u;
    uuid_w1_ = 0u;
    uuid_w2_ = 0u;
    uuid_w3_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CFUUIDArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes uuid_bytes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid_w0;
        break;
      }

      // optional uint32 uuid_w0 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid_w0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uuid_w0_)));
          set_has_uuid_w0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uuid_w1;
        break;
      }

      // optional uint32 uuid_w1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid_w1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uuid_w1_)));
          set_has_uuid_w1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uuid_w2;
        break;
      }

      // optional uint32 uuid_w2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid_w2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uuid_w2_)));
          set_has_uuid_w2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uuid_w3;
        break;
      }

      // optional uint32 uuid_w3 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid_w3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uuid_w3_)));
          set_has_uuid_w3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CFUUIDArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes uuid_bytes = 1;
  if (has_uuid_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->uuid_bytes(), output);
  }

  // optional uint32 uuid_w0 = 2;
  if (has_uuid_w0()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uuid_w0(), output);
  }

  // optional uint32 uuid_w1 = 3;
  if (has_uuid_w1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uuid_w1(), output);
  }

  // optional uint32 uuid_w2 = 4;
  if (has_uuid_w2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uuid_w2(), output);
  }

  // optional uint32 uuid_w3 = 5;
  if (has_uuid_w3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uuid_w3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CFUUIDArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes uuid_bytes = 1;
  if (has_uuid_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->uuid_bytes(), target);
  }

  // optional uint32 uuid_w0 = 2;
  if (has_uuid_w0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uuid_w0(), target);
  }

  // optional uint32 uuid_w1 = 3;
  if (has_uuid_w1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uuid_w1(), target);
  }

  // optional uint32 uuid_w2 = 4;
  if (has_uuid_w2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uuid_w2(), target);
  }

  // optional uint32 uuid_w3 = 5;
  if (has_uuid_w3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uuid_w3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CFUUIDArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes uuid_bytes = 1;
    if (has_uuid_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid_bytes());
    }

    // optional uint32 uuid_w0 = 2;
    if (has_uuid_w0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uuid_w0());
    }

    // optional uint32 uuid_w1 = 3;
    if (has_uuid_w1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uuid_w1());
    }

    // optional uint32 uuid_w2 = 4;
    if (has_uuid_w2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uuid_w2());
    }

    // optional uint32 uuid_w3 = 5;
    if (has_uuid_w3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uuid_w3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CFUUIDArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CFUUIDArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CFUUIDArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CFUUIDArchive::MergeFrom(const CFUUIDArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid_bytes()) {
      set_uuid_bytes(from.uuid_bytes());
    }
    if (from.has_uuid_w0()) {
      set_uuid_w0(from.uuid_w0());
    }
    if (from.has_uuid_w1()) {
      set_uuid_w1(from.uuid_w1());
    }
    if (from.has_uuid_w2()) {
      set_uuid_w2(from.uuid_w2());
    }
    if (from.has_uuid_w3()) {
      set_uuid_w3(from.uuid_w3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CFUUIDArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFUUIDArchive::CopyFrom(const CFUUIDArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFUUIDArchive::IsInitialized() const {

  return true;
}

void CFUUIDArchive::Swap(CFUUIDArchive* other) {
  if (other != this) {
    std::swap(uuid_bytes_, other->uuid_bytes_);
    std::swap(uuid_w0_, other->uuid_w0_);
    std::swap(uuid_w1_, other->uuid_w1_);
    std::swap(uuid_w2_, other->uuid_w2_);
    std::swap(uuid_w3_, other->uuid_w3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CFUUIDArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CFUUIDArchive_descriptor_;
  metadata.reflection = CFUUIDArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CellReferenceArchive::kColumnFieldNumber;
const int CellReferenceArchive::kRowFieldNumber;
const int CellReferenceArchive::kTableIdFieldNumber;
#endif  // !_MSC_VER

CellReferenceArchive::CellReferenceArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CellReferenceArchive::InitAsDefaultInstance() {
  table_id_ = const_cast< ::TSCE::CFUUIDArchive*>(&::TSCE::CFUUIDArchive::default_instance());
}

CellReferenceArchive::CellReferenceArchive(const CellReferenceArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CellReferenceArchive::SharedCtor() {
  _cached_size_ = 0;
  column_ = 0u;
  row_ = 0u;
  table_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CellReferenceArchive::~CellReferenceArchive() {
  SharedDtor();
}

void CellReferenceArchive::SharedDtor() {
  if (this != default_instance_) {
    delete table_id_;
  }
}

void CellReferenceArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellReferenceArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellReferenceArchive_descriptor_;
}

const CellReferenceArchive& CellReferenceArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

CellReferenceArchive* CellReferenceArchive::default_instance_ = NULL;

CellReferenceArchive* CellReferenceArchive::New() const {
  return new CellReferenceArchive;
}

void CellReferenceArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    column_ = 0u;
    row_ = 0u;
    if (has_table_id()) {
      if (table_id_ != NULL) table_id_->::TSCE::CFUUIDArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CellReferenceArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 column = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &column_)));
          set_has_column();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_row;
        break;
      }

      // required uint32 row = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_table_id;
        break;
      }

      // required .TSCE.CFUUIDArchive table_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CellReferenceArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 column = 1;
  if (has_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->column(), output);
  }

  // required uint32 row = 2;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->row(), output);
  }

  // required .TSCE.CFUUIDArchive table_id = 3;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->table_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CellReferenceArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 column = 1;
  if (has_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->column(), target);
  }

  // required uint32 row = 2;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->row(), target);
  }

  // required .TSCE.CFUUIDArchive table_id = 3;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->table_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CellReferenceArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 column = 1;
    if (has_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->column());
    }

    // required uint32 row = 2;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->row());
    }

    // required .TSCE.CFUUIDArchive table_id = 3;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellReferenceArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CellReferenceArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CellReferenceArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CellReferenceArchive::MergeFrom(const CellReferenceArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_column()) {
      set_column(from.column());
    }
    if (from.has_row()) {
      set_row(from.row());
    }
    if (from.has_table_id()) {
      mutable_table_id()->::TSCE::CFUUIDArchive::MergeFrom(from.table_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CellReferenceArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellReferenceArchive::CopyFrom(const CellReferenceArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellReferenceArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CellReferenceArchive::Swap(CellReferenceArchive* other) {
  if (other != this) {
    std::swap(column_, other->column_);
    std::swap(row_, other->row_);
    std::swap(table_id_, other->table_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CellReferenceArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CellReferenceArchive_descriptor_;
  metadata.reflection = CellReferenceArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InternalCellReferenceArchive::kCoordinateFieldNumber;
const int InternalCellReferenceArchive::kOwnerIdFieldNumber;
#endif  // !_MSC_VER

InternalCellReferenceArchive::InternalCellReferenceArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InternalCellReferenceArchive::InitAsDefaultInstance() {
  coordinate_ = const_cast< ::TSCE::CellCoordinateArchive*>(&::TSCE::CellCoordinateArchive::default_instance());
}

InternalCellReferenceArchive::InternalCellReferenceArchive(const InternalCellReferenceArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InternalCellReferenceArchive::SharedCtor() {
  _cached_size_ = 0;
  coordinate_ = NULL;
  owner_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalCellReferenceArchive::~InternalCellReferenceArchive() {
  SharedDtor();
}

void InternalCellReferenceArchive::SharedDtor() {
  if (this != default_instance_) {
    delete coordinate_;
  }
}

void InternalCellReferenceArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalCellReferenceArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalCellReferenceArchive_descriptor_;
}

const InternalCellReferenceArchive& InternalCellReferenceArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

InternalCellReferenceArchive* InternalCellReferenceArchive::default_instance_ = NULL;

InternalCellReferenceArchive* InternalCellReferenceArchive::New() const {
  return new InternalCellReferenceArchive;
}

void InternalCellReferenceArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_coordinate()) {
      if (coordinate_ != NULL) coordinate_->::TSCE::CellCoordinateArchive::Clear();
    }
    owner_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InternalCellReferenceArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCE.CellCoordinateArchive coordinate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coordinate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_owner_id;
        break;
      }

      // required uint32 owner_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_id_)));
          set_has_owner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InternalCellReferenceArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCE.CellCoordinateArchive coordinate = 1;
  if (has_coordinate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->coordinate(), output);
  }

  // required uint32 owner_id = 2;
  if (has_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InternalCellReferenceArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCE.CellCoordinateArchive coordinate = 1;
  if (has_coordinate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->coordinate(), target);
  }

  // required uint32 owner_id = 2;
  if (has_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InternalCellReferenceArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCE.CellCoordinateArchive coordinate = 1;
    if (has_coordinate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coordinate());
    }

    // required uint32 owner_id = 2;
    if (has_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalCellReferenceArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InternalCellReferenceArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InternalCellReferenceArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalCellReferenceArchive::MergeFrom(const InternalCellReferenceArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coordinate()) {
      mutable_coordinate()->::TSCE::CellCoordinateArchive::MergeFrom(from.coordinate());
    }
    if (from.has_owner_id()) {
      set_owner_id(from.owner_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InternalCellReferenceArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalCellReferenceArchive::CopyFrom(const InternalCellReferenceArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalCellReferenceArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void InternalCellReferenceArchive::Swap(InternalCellReferenceArchive* other) {
  if (other != this) {
    std::swap(coordinate_, other->coordinate_);
    std::swap(owner_id_, other->owner_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InternalCellReferenceArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalCellReferenceArchive_descriptor_;
  metadata.reflection = InternalCellReferenceArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RangeReferenceArchive::kTableIdFieldNumber;
const int RangeReferenceArchive::kTopLeftColumnFieldNumber;
const int RangeReferenceArchive::kTopLeftRowFieldNumber;
const int RangeReferenceArchive::kBottomRightColumnFieldNumber;
const int RangeReferenceArchive::kBottomRightRowFieldNumber;
#endif  // !_MSC_VER

RangeReferenceArchive::RangeReferenceArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RangeReferenceArchive::InitAsDefaultInstance() {
  table_id_ = const_cast< ::TSCE::CFUUIDArchive*>(&::TSCE::CFUUIDArchive::default_instance());
}

RangeReferenceArchive::RangeReferenceArchive(const RangeReferenceArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RangeReferenceArchive::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = NULL;
  top_left_column_ = 0u;
  top_left_row_ = 0u;
  bottom_right_column_ = 0u;
  bottom_right_row_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RangeReferenceArchive::~RangeReferenceArchive() {
  SharedDtor();
}

void RangeReferenceArchive::SharedDtor() {
  if (this != default_instance_) {
    delete table_id_;
  }
}

void RangeReferenceArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeReferenceArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RangeReferenceArchive_descriptor_;
}

const RangeReferenceArchive& RangeReferenceArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

RangeReferenceArchive* RangeReferenceArchive::default_instance_ = NULL;

RangeReferenceArchive* RangeReferenceArchive::New() const {
  return new RangeReferenceArchive;
}

void RangeReferenceArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_id()) {
      if (table_id_ != NULL) table_id_->::TSCE::CFUUIDArchive::Clear();
    }
    top_left_column_ = 0u;
    top_left_row_ = 0u;
    bottom_right_column_ = 0u;
    bottom_right_row_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RangeReferenceArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCE.CFUUIDArchive table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_top_left_column;
        break;
      }

      // required uint32 top_left_column = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top_left_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_left_column_)));
          set_has_top_left_column();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_top_left_row;
        break;
      }

      // required uint32 top_left_row = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top_left_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_left_row_)));
          set_has_top_left_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bottom_right_column;
        break;
      }

      // required uint32 bottom_right_column = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bottom_right_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bottom_right_column_)));
          set_has_bottom_right_column();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bottom_right_row;
        break;
      }

      // required uint32 bottom_right_row = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bottom_right_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bottom_right_row_)));
          set_has_bottom_right_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RangeReferenceArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCE.CFUUIDArchive table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_id(), output);
  }

  // required uint32 top_left_column = 2;
  if (has_top_left_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->top_left_column(), output);
  }

  // required uint32 top_left_row = 3;
  if (has_top_left_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->top_left_row(), output);
  }

  // required uint32 bottom_right_column = 4;
  if (has_bottom_right_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bottom_right_column(), output);
  }

  // required uint32 bottom_right_row = 5;
  if (has_bottom_right_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bottom_right_row(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RangeReferenceArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCE.CFUUIDArchive table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_id(), target);
  }

  // required uint32 top_left_column = 2;
  if (has_top_left_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->top_left_column(), target);
  }

  // required uint32 top_left_row = 3;
  if (has_top_left_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->top_left_row(), target);
  }

  // required uint32 bottom_right_column = 4;
  if (has_bottom_right_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bottom_right_column(), target);
  }

  // required uint32 bottom_right_row = 5;
  if (has_bottom_right_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bottom_right_row(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RangeReferenceArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCE.CFUUIDArchive table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_id());
    }

    // required uint32 top_left_column = 2;
    if (has_top_left_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top_left_column());
    }

    // required uint32 top_left_row = 3;
    if (has_top_left_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top_left_row());
    }

    // required uint32 bottom_right_column = 4;
    if (has_bottom_right_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bottom_right_column());
    }

    // required uint32 bottom_right_row = 5;
    if (has_bottom_right_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bottom_right_row());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeReferenceArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RangeReferenceArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RangeReferenceArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RangeReferenceArchive::MergeFrom(const RangeReferenceArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      mutable_table_id()->::TSCE::CFUUIDArchive::MergeFrom(from.table_id());
    }
    if (from.has_top_left_column()) {
      set_top_left_column(from.top_left_column());
    }
    if (from.has_top_left_row()) {
      set_top_left_row(from.top_left_row());
    }
    if (from.has_bottom_right_column()) {
      set_bottom_right_column(from.bottom_right_column());
    }
    if (from.has_bottom_right_row()) {
      set_bottom_right_row(from.bottom_right_row());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RangeReferenceArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeReferenceArchive::CopyFrom(const RangeReferenceArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeReferenceArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void RangeReferenceArchive::Swap(RangeReferenceArchive* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(top_left_column_, other->top_left_column_);
    std::swap(top_left_row_, other->top_left_row_);
    std::swap(bottom_right_column_, other->bottom_right_column_);
    std::swap(bottom_right_row_, other->bottom_right_row_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RangeReferenceArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RangeReferenceArchive_descriptor_;
  metadata.reflection = RangeReferenceArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InternalRangeReferenceArchive::kOwnerIdFieldNumber;
const int InternalRangeReferenceArchive::kRangeFieldNumber;
#endif  // !_MSC_VER

InternalRangeReferenceArchive::InternalRangeReferenceArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InternalRangeReferenceArchive::InitAsDefaultInstance() {
  range_ = const_cast< ::TSCE::RangeCoordinateArchive*>(&::TSCE::RangeCoordinateArchive::default_instance());
}

InternalRangeReferenceArchive::InternalRangeReferenceArchive(const InternalRangeReferenceArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InternalRangeReferenceArchive::SharedCtor() {
  _cached_size_ = 0;
  owner_id_ = 0u;
  range_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalRangeReferenceArchive::~InternalRangeReferenceArchive() {
  SharedDtor();
}

void InternalRangeReferenceArchive::SharedDtor() {
  if (this != default_instance_) {
    delete range_;
  }
}

void InternalRangeReferenceArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalRangeReferenceArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalRangeReferenceArchive_descriptor_;
}

const InternalRangeReferenceArchive& InternalRangeReferenceArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

InternalRangeReferenceArchive* InternalRangeReferenceArchive::default_instance_ = NULL;

InternalRangeReferenceArchive* InternalRangeReferenceArchive::New() const {
  return new InternalRangeReferenceArchive;
}

void InternalRangeReferenceArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    owner_id_ = 0u;
    if (has_range()) {
      if (range_ != NULL) range_->::TSCE::RangeCoordinateArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InternalRangeReferenceArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 owner_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_id_)));
          set_has_owner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_range;
        break;
      }

      // required .TSCE.RangeCoordinateArchive range = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InternalRangeReferenceArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 owner_id = 1;
  if (has_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->owner_id(), output);
  }

  // required .TSCE.RangeCoordinateArchive range = 2;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->range(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InternalRangeReferenceArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 owner_id = 1;
  if (has_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->owner_id(), target);
  }

  // required .TSCE.RangeCoordinateArchive range = 2;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->range(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InternalRangeReferenceArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 owner_id = 1;
    if (has_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_id());
    }

    // required .TSCE.RangeCoordinateArchive range = 2;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->range());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalRangeReferenceArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InternalRangeReferenceArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InternalRangeReferenceArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalRangeReferenceArchive::MergeFrom(const InternalRangeReferenceArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner_id()) {
      set_owner_id(from.owner_id());
    }
    if (from.has_range()) {
      mutable_range()->::TSCE::RangeCoordinateArchive::MergeFrom(from.range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InternalRangeReferenceArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalRangeReferenceArchive::CopyFrom(const InternalRangeReferenceArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalRangeReferenceArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_range()) {
    if (!this->range().IsInitialized()) return false;
  }
  return true;
}

void InternalRangeReferenceArchive::Swap(InternalRangeReferenceArchive* other) {
  if (other != this) {
    std::swap(owner_id_, other->owner_id_);
    std::swap(range_, other->range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InternalRangeReferenceArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalRangeReferenceArchive_descriptor_;
  metadata.reflection = InternalRangeReferenceArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReferenceArchive_ReferenceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReferenceArchive_ReferenceType_descriptor_;
}
bool ReferenceArchive_ReferenceType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReferenceArchive_ReferenceType ReferenceArchive::CELL_REFERENCE;
const ReferenceArchive_ReferenceType ReferenceArchive::RANGE_REFERENCE;
const ReferenceArchive_ReferenceType ReferenceArchive::NAME_DEPENDENCY;
const ReferenceArchive_ReferenceType ReferenceArchive::ReferenceType_MIN;
const ReferenceArchive_ReferenceType ReferenceArchive::ReferenceType_MAX;
const int ReferenceArchive::ReferenceType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ReferenceArchive::kReferenceTypeFieldNumber;
const int ReferenceArchive::kCellReferenceFieldNumber;
const int ReferenceArchive::kRangeReferenceFieldNumber;
#endif  // !_MSC_VER

ReferenceArchive::ReferenceArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReferenceArchive::InitAsDefaultInstance() {
  cell_reference_ = const_cast< ::TSCE::CellReferenceArchive*>(&::TSCE::CellReferenceArchive::default_instance());
  range_reference_ = const_cast< ::TSCE::RangeReferenceArchive*>(&::TSCE::RangeReferenceArchive::default_instance());
}

ReferenceArchive::ReferenceArchive(const ReferenceArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReferenceArchive::SharedCtor() {
  _cached_size_ = 0;
  reference_type_ = 1;
  cell_reference_ = NULL;
  range_reference_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReferenceArchive::~ReferenceArchive() {
  SharedDtor();
}

void ReferenceArchive::SharedDtor() {
  if (this != default_instance_) {
    delete cell_reference_;
    delete range_reference_;
  }
}

void ReferenceArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReferenceArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReferenceArchive_descriptor_;
}

const ReferenceArchive& ReferenceArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

ReferenceArchive* ReferenceArchive::default_instance_ = NULL;

ReferenceArchive* ReferenceArchive::New() const {
  return new ReferenceArchive;
}

void ReferenceArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reference_type_ = 1;
    if (has_cell_reference()) {
      if (cell_reference_ != NULL) cell_reference_->::TSCE::CellReferenceArchive::Clear();
    }
    if (has_range_reference()) {
      if (range_reference_ != NULL) range_reference_->::TSCE::RangeReferenceArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReferenceArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCE.ReferenceArchive.ReferenceType reference_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSCE::ReferenceArchive_ReferenceType_IsValid(value)) {
            set_reference_type(static_cast< ::TSCE::ReferenceArchive_ReferenceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cell_reference;
        break;
      }

      // optional .TSCE.CellReferenceArchive cell_reference = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_reference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell_reference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_range_reference;
        break;
      }

      // optional .TSCE.RangeReferenceArchive range_reference = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_range_reference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range_reference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReferenceArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCE.ReferenceArchive.ReferenceType reference_type = 1;
  if (has_reference_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reference_type(), output);
  }

  // optional .TSCE.CellReferenceArchive cell_reference = 2;
  if (has_cell_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cell_reference(), output);
  }

  // optional .TSCE.RangeReferenceArchive range_reference = 3;
  if (has_range_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->range_reference(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReferenceArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCE.ReferenceArchive.ReferenceType reference_type = 1;
  if (has_reference_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reference_type(), target);
  }

  // optional .TSCE.CellReferenceArchive cell_reference = 2;
  if (has_cell_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cell_reference(), target);
  }

  // optional .TSCE.RangeReferenceArchive range_reference = 3;
  if (has_range_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->range_reference(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReferenceArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCE.ReferenceArchive.ReferenceType reference_type = 1;
    if (has_reference_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reference_type());
    }

    // optional .TSCE.CellReferenceArchive cell_reference = 2;
    if (has_cell_reference()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cell_reference());
    }

    // optional .TSCE.RangeReferenceArchive range_reference = 3;
    if (has_range_reference()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->range_reference());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReferenceArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReferenceArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReferenceArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReferenceArchive::MergeFrom(const ReferenceArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reference_type()) {
      set_reference_type(from.reference_type());
    }
    if (from.has_cell_reference()) {
      mutable_cell_reference()->::TSCE::CellReferenceArchive::MergeFrom(from.cell_reference());
    }
    if (from.has_range_reference()) {
      mutable_range_reference()->::TSCE::RangeReferenceArchive::MergeFrom(from.range_reference());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReferenceArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceArchive::CopyFrom(const ReferenceArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_cell_reference()) {
    if (!this->cell_reference().IsInitialized()) return false;
  }
  if (has_range_reference()) {
    if (!this->range_reference().IsInitialized()) return false;
  }
  return true;
}

void ReferenceArchive::Swap(ReferenceArchive* other) {
  if (other != this) {
    std::swap(reference_type_, other->reference_type_);
    std::swap(cell_reference_, other->cell_reference_);
    std::swap(range_reference_, other->range_reference_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReferenceArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReferenceArchive_descriptor_;
  metadata.reflection = ReferenceArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EdgeArchive::kColumnFieldNumber;
const int EdgeArchive::kRowFieldNumber;
const int EdgeArchive::kIsPrecedentFieldNumber;
const int EdgeArchive::kOwnerIdFieldNumber;
#endif  // !_MSC_VER

EdgeArchive::EdgeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EdgeArchive::InitAsDefaultInstance() {
  owner_id_ = const_cast< ::TSCE::CFUUIDArchive*>(&::TSCE::CFUUIDArchive::default_instance());
}

EdgeArchive::EdgeArchive(const EdgeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EdgeArchive::SharedCtor() {
  _cached_size_ = 0;
  column_ = 0u;
  row_ = 0u;
  is_precedent_ = false;
  owner_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EdgeArchive::~EdgeArchive() {
  SharedDtor();
}

void EdgeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete owner_id_;
  }
}

void EdgeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EdgeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EdgeArchive_descriptor_;
}

const EdgeArchive& EdgeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

EdgeArchive* EdgeArchive::default_instance_ = NULL;

EdgeArchive* EdgeArchive::New() const {
  return new EdgeArchive;
}

void EdgeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    column_ = 0u;
    row_ = 0u;
    is_precedent_ = false;
    if (has_owner_id()) {
      if (owner_id_ != NULL) owner_id_->::TSCE::CFUUIDArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EdgeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 column = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &column_)));
          set_has_column();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_row;
        break;
      }

      // required uint32 row = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_precedent;
        break;
      }

      // required bool is_precedent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_precedent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_precedent_)));
          set_has_is_precedent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_owner_id;
        break;
      }

      // optional .TSCE.CFUUIDArchive owner_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EdgeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 column = 1;
  if (has_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->column(), output);
  }

  // required uint32 row = 2;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->row(), output);
  }

  // required bool is_precedent = 3;
  if (has_is_precedent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_precedent(), output);
  }

  // optional .TSCE.CFUUIDArchive owner_id = 4;
  if (has_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->owner_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EdgeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 column = 1;
  if (has_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->column(), target);
  }

  // required uint32 row = 2;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->row(), target);
  }

  // required bool is_precedent = 3;
  if (has_is_precedent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_precedent(), target);
  }

  // optional .TSCE.CFUUIDArchive owner_id = 4;
  if (has_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->owner_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EdgeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 column = 1;
    if (has_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->column());
    }

    // required uint32 row = 2;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->row());
    }

    // required bool is_precedent = 3;
    if (has_is_precedent()) {
      total_size += 1 + 1;
    }

    // optional .TSCE.CFUUIDArchive owner_id = 4;
    if (has_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->owner_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EdgeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EdgeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EdgeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EdgeArchive::MergeFrom(const EdgeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_column()) {
      set_column(from.column());
    }
    if (from.has_row()) {
      set_row(from.row());
    }
    if (from.has_is_precedent()) {
      set_is_precedent(from.is_precedent());
    }
    if (from.has_owner_id()) {
      mutable_owner_id()->::TSCE::CFUUIDArchive::MergeFrom(from.owner_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EdgeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgeArchive::CopyFrom(const EdgeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EdgeArchive::Swap(EdgeArchive* other) {
  if (other != this) {
    std::swap(column_, other->column_);
    std::swap(row_, other->row_);
    std::swap(is_precedent_, other->is_precedent_);
    std::swap(owner_id_, other->owner_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EdgeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EdgeArchive_descriptor_;
  metadata.reflection = EdgeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EdgesArchive::kPackedEdgeWithoutOwnerFieldNumber;
const int EdgesArchive::kPackedEdgeWithOwnerFieldNumber;
const int EdgesArchive::kOwnerIdForEdgeFieldNumber;
const int EdgesArchive::kInternalOwnerIdForEdgeFieldNumber;
#endif  // !_MSC_VER

EdgesArchive::EdgesArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EdgesArchive::InitAsDefaultInstance() {
}

EdgesArchive::EdgesArchive(const EdgesArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EdgesArchive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EdgesArchive::~EdgesArchive() {
  SharedDtor();
}

void EdgesArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EdgesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EdgesArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EdgesArchive_descriptor_;
}

const EdgesArchive& EdgesArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

EdgesArchive* EdgesArchive::default_instance_ = NULL;

EdgesArchive* EdgesArchive::New() const {
  return new EdgesArchive;
}

void EdgesArchive::Clear() {
  packed_edge_without_owner_.Clear();
  packed_edge_with_owner_.Clear();
  owner_id_for_edge_.Clear();
  internal_owner_id_for_edge_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EdgesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 packed_edge_without_owner = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packed_edge_without_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_packed_edge_without_owner())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_packed_edge_without_owner())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_packed_edge_without_owner;
        if (input->ExpectTag(80)) goto parse_packed_edge_with_owner;
        break;
      }

      // repeated uint32 packed_edge_with_owner = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packed_edge_with_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_packed_edge_with_owner())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_packed_edge_with_owner())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_packed_edge_with_owner;
        if (input->ExpectTag(90)) goto parse_owner_id_for_edge;
        break;
      }

      // repeated .TSCE.CFUUIDArchive owner_id_for_edge = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner_id_for_edge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_owner_id_for_edge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_owner_id_for_edge;
        if (input->ExpectTag(96)) goto parse_internal_owner_id_for_edge;
        break;
      }

      // repeated uint32 internal_owner_id_for_edge = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_internal_owner_id_for_edge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 96, input, this->mutable_internal_owner_id_for_edge())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_internal_owner_id_for_edge())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_internal_owner_id_for_edge;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EdgesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 packed_edge_without_owner = 9;
  for (int i = 0; i < this->packed_edge_without_owner_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->packed_edge_without_owner(i), output);
  }

  // repeated uint32 packed_edge_with_owner = 10;
  for (int i = 0; i < this->packed_edge_with_owner_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->packed_edge_with_owner(i), output);
  }

  // repeated .TSCE.CFUUIDArchive owner_id_for_edge = 11;
  for (int i = 0; i < this->owner_id_for_edge_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->owner_id_for_edge(i), output);
  }

  // repeated uint32 internal_owner_id_for_edge = 12;
  for (int i = 0; i < this->internal_owner_id_for_edge_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      12, this->internal_owner_id_for_edge(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EdgesArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 packed_edge_without_owner = 9;
  for (int i = 0; i < this->packed_edge_without_owner_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->packed_edge_without_owner(i), target);
  }

  // repeated uint32 packed_edge_with_owner = 10;
  for (int i = 0; i < this->packed_edge_with_owner_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->packed_edge_with_owner(i), target);
  }

  // repeated .TSCE.CFUUIDArchive owner_id_for_edge = 11;
  for (int i = 0; i < this->owner_id_for_edge_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->owner_id_for_edge(i), target);
  }

  // repeated uint32 internal_owner_id_for_edge = 12;
  for (int i = 0; i < this->internal_owner_id_for_edge_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(12, this->internal_owner_id_for_edge(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EdgesArchive::ByteSize() const {
  int total_size = 0;

  // repeated uint32 packed_edge_without_owner = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->packed_edge_without_owner_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->packed_edge_without_owner(i));
    }
    total_size += 1 * this->packed_edge_without_owner_size() + data_size;
  }

  // repeated uint32 packed_edge_with_owner = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->packed_edge_with_owner_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->packed_edge_with_owner(i));
    }
    total_size += 1 * this->packed_edge_with_owner_size() + data_size;
  }

  // repeated .TSCE.CFUUIDArchive owner_id_for_edge = 11;
  total_size += 1 * this->owner_id_for_edge_size();
  for (int i = 0; i < this->owner_id_for_edge_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->owner_id_for_edge(i));
  }

  // repeated uint32 internal_owner_id_for_edge = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->internal_owner_id_for_edge_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->internal_owner_id_for_edge(i));
    }
    total_size += 1 * this->internal_owner_id_for_edge_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EdgesArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EdgesArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EdgesArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EdgesArchive::MergeFrom(const EdgesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  packed_edge_without_owner_.MergeFrom(from.packed_edge_without_owner_);
  packed_edge_with_owner_.MergeFrom(from.packed_edge_with_owner_);
  owner_id_for_edge_.MergeFrom(from.owner_id_for_edge_);
  internal_owner_id_for_edge_.MergeFrom(from.internal_owner_id_for_edge_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EdgesArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgesArchive::CopyFrom(const EdgesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgesArchive::IsInitialized() const {

  return true;
}

void EdgesArchive::Swap(EdgesArchive* other) {
  if (other != this) {
    packed_edge_without_owner_.Swap(&other->packed_edge_without_owner_);
    packed_edge_with_owner_.Swap(&other->packed_edge_with_owner_);
    owner_id_for_edge_.Swap(&other->owner_id_for_edge_);
    internal_owner_id_for_edge_.Swap(&other->internal_owner_id_for_edge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EdgesArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EdgesArchive_descriptor_;
  metadata.reflection = EdgesArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CellRecordArchive::kColumnFieldNumber;
const int CellRecordArchive::kRowFieldNumber;
const int CellRecordArchive::kDirtySelfPlusPrecedentsCountFieldNumber;
const int CellRecordArchive::kIsInACycleFieldNumber;
const int CellRecordArchive::kEdgeFieldNumber;
const int CellRecordArchive::kContainsAFormulaFieldNumber;
const int CellRecordArchive::kHasCalculatedPrecedentsFieldNumber;
const int CellRecordArchive::kCalculatePrecedentsOnNextRecalcFieldNumber;
const int CellRecordArchive::kTranslateForExcelImportOnNextRecalcFieldNumber;
const int CellRecordArchive::kEdgesFieldNumber;
#endif  // !_MSC_VER

CellRecordArchive::CellRecordArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CellRecordArchive::InitAsDefaultInstance() {
  edges_ = const_cast< ::TSCE::EdgesArchive*>(&::TSCE::EdgesArchive::default_instance());
}

CellRecordArchive::CellRecordArchive(const CellRecordArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CellRecordArchive::SharedCtor() {
  _cached_size_ = 0;
  column_ = 0u;
  row_ = 0u;
  dirty_self_plus_precedents_count_ = 0u;
  is_in_a_cycle_ = false;
  contains_a_formula_ = true;
  has_calculated_precedents_ = false;
  calculate_precedents_on_next_recalc_ = false;
  translate_for_excel_import_on_next_recalc_ = false;
  edges_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CellRecordArchive::~CellRecordArchive() {
  SharedDtor();
}

void CellRecordArchive::SharedDtor() {
  if (this != default_instance_) {
    delete edges_;
  }
}

void CellRecordArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellRecordArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellRecordArchive_descriptor_;
}

const CellRecordArchive& CellRecordArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

CellRecordArchive* CellRecordArchive::default_instance_ = NULL;

CellRecordArchive* CellRecordArchive::New() const {
  return new CellRecordArchive;
}

void CellRecordArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    column_ = 0u;
    row_ = 0u;
    dirty_self_plus_precedents_count_ = 0u;
    is_in_a_cycle_ = false;
    contains_a_formula_ = true;
    has_calculated_precedents_ = false;
    calculate_precedents_on_next_recalc_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    translate_for_excel_import_on_next_recalc_ = false;
    if (has_edges()) {
      if (edges_ != NULL) edges_->::TSCE::EdgesArchive::Clear();
    }
  }
  edge_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CellRecordArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 column = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &column_)));
          set_has_column();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_row;
        break;
      }

      // required uint32 row = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dirty_self_plus_precedents_count;
        break;
      }

      // optional uint32 dirty_self_plus_precedents_count = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dirty_self_plus_precedents_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dirty_self_plus_precedents_count_)));
          set_has_dirty_self_plus_precedents_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_in_a_cycle;
        break;
      }

      // optional bool is_in_a_cycle = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_in_a_cycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_in_a_cycle_)));
          set_has_is_in_a_cycle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_edge;
        break;
      }

      // repeated .TSCE.EdgeArchive edge = 5 [deprecated = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_edge;
        if (input->ExpectTag(48)) goto parse_contains_a_formula;
        break;
      }

      // optional bool contains_a_formula = 6 [default = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contains_a_formula:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &contains_a_formula_)));
          set_has_contains_a_formula();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_has_calculated_precedents;
        break;
      }

      // optional bool has_calculated_precedents = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_calculated_precedents:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_calculated_precedents_)));
          set_has_has_calculated_precedents();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_calculate_precedents_on_next_recalc;
        break;
      }

      // optional bool calculate_precedents_on_next_recalc = 8 [default = false, deprecated = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_calculate_precedents_on_next_recalc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &calculate_precedents_on_next_recalc_)));
          set_has_calculate_precedents_on_next_recalc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_edges;
        break;
      }

      // optional .TSCE.EdgesArchive edges = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_edges()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_translate_for_excel_import_on_next_recalc;
        break;
      }

      // optional bool translate_for_excel_import_on_next_recalc = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_translate_for_excel_import_on_next_recalc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &translate_for_excel_import_on_next_recalc_)));
          set_has_translate_for_excel_import_on_next_recalc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CellRecordArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 column = 1;
  if (has_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->column(), output);
  }

  // required uint32 row = 2;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->row(), output);
  }

  // optional uint32 dirty_self_plus_precedents_count = 3 [default = 0];
  if (has_dirty_self_plus_precedents_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dirty_self_plus_precedents_count(), output);
  }

  // optional bool is_in_a_cycle = 4 [default = false];
  if (has_is_in_a_cycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_in_a_cycle(), output);
  }

  // repeated .TSCE.EdgeArchive edge = 5 [deprecated = true];
  for (int i = 0; i < this->edge_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->edge(i), output);
  }

  // optional bool contains_a_formula = 6 [default = true];
  if (has_contains_a_formula()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->contains_a_formula(), output);
  }

  // optional bool has_calculated_precedents = 7 [default = false];
  if (has_has_calculated_precedents()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->has_calculated_precedents(), output);
  }

  // optional bool calculate_precedents_on_next_recalc = 8 [default = false, deprecated = true];
  if (has_calculate_precedents_on_next_recalc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->calculate_precedents_on_next_recalc(), output);
  }

  // optional .TSCE.EdgesArchive edges = 9;
  if (has_edges()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->edges(), output);
  }

  // optional bool translate_for_excel_import_on_next_recalc = 10 [default = false];
  if (has_translate_for_excel_import_on_next_recalc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->translate_for_excel_import_on_next_recalc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CellRecordArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 column = 1;
  if (has_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->column(), target);
  }

  // required uint32 row = 2;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->row(), target);
  }

  // optional uint32 dirty_self_plus_precedents_count = 3 [default = 0];
  if (has_dirty_self_plus_precedents_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dirty_self_plus_precedents_count(), target);
  }

  // optional bool is_in_a_cycle = 4 [default = false];
  if (has_is_in_a_cycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_in_a_cycle(), target);
  }

  // repeated .TSCE.EdgeArchive edge = 5 [deprecated = true];
  for (int i = 0; i < this->edge_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->edge(i), target);
  }

  // optional bool contains_a_formula = 6 [default = true];
  if (has_contains_a_formula()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->contains_a_formula(), target);
  }

  // optional bool has_calculated_precedents = 7 [default = false];
  if (has_has_calculated_precedents()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->has_calculated_precedents(), target);
  }

  // optional bool calculate_precedents_on_next_recalc = 8 [default = false, deprecated = true];
  if (has_calculate_precedents_on_next_recalc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->calculate_precedents_on_next_recalc(), target);
  }

  // optional .TSCE.EdgesArchive edges = 9;
  if (has_edges()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->edges(), target);
  }

  // optional bool translate_for_excel_import_on_next_recalc = 10 [default = false];
  if (has_translate_for_excel_import_on_next_recalc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->translate_for_excel_import_on_next_recalc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CellRecordArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 column = 1;
    if (has_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->column());
    }

    // required uint32 row = 2;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->row());
    }

    // optional uint32 dirty_self_plus_precedents_count = 3 [default = 0];
    if (has_dirty_self_plus_precedents_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dirty_self_plus_precedents_count());
    }

    // optional bool is_in_a_cycle = 4 [default = false];
    if (has_is_in_a_cycle()) {
      total_size += 1 + 1;
    }

    // optional bool contains_a_formula = 6 [default = true];
    if (has_contains_a_formula()) {
      total_size += 1 + 1;
    }

    // optional bool has_calculated_precedents = 7 [default = false];
    if (has_has_calculated_precedents()) {
      total_size += 1 + 1;
    }

    // optional bool calculate_precedents_on_next_recalc = 8 [default = false, deprecated = true];
    if (has_calculate_precedents_on_next_recalc()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool translate_for_excel_import_on_next_recalc = 10 [default = false];
    if (has_translate_for_excel_import_on_next_recalc()) {
      total_size += 1 + 1;
    }

    // optional .TSCE.EdgesArchive edges = 9;
    if (has_edges()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->edges());
    }

  }
  // repeated .TSCE.EdgeArchive edge = 5 [deprecated = true];
  total_size += 1 * this->edge_size();
  for (int i = 0; i < this->edge_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->edge(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellRecordArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CellRecordArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CellRecordArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CellRecordArchive::MergeFrom(const CellRecordArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  edge_.MergeFrom(from.edge_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_column()) {
      set_column(from.column());
    }
    if (from.has_row()) {
      set_row(from.row());
    }
    if (from.has_dirty_self_plus_precedents_count()) {
      set_dirty_self_plus_precedents_count(from.dirty_self_plus_precedents_count());
    }
    if (from.has_is_in_a_cycle()) {
      set_is_in_a_cycle(from.is_in_a_cycle());
    }
    if (from.has_contains_a_formula()) {
      set_contains_a_formula(from.contains_a_formula());
    }
    if (from.has_has_calculated_precedents()) {
      set_has_calculated_precedents(from.has_calculated_precedents());
    }
    if (from.has_calculate_precedents_on_next_recalc()) {
      set_calculate_precedents_on_next_recalc(from.calculate_precedents_on_next_recalc());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_translate_for_excel_import_on_next_recalc()) {
      set_translate_for_excel_import_on_next_recalc(from.translate_for_excel_import_on_next_recalc());
    }
    if (from.has_edges()) {
      mutable_edges()->::TSCE::EdgesArchive::MergeFrom(from.edges());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CellRecordArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellRecordArchive::CopyFrom(const CellRecordArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellRecordArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < edge_size(); i++) {
    if (!this->edge(i).IsInitialized()) return false;
  }
  return true;
}

void CellRecordArchive::Swap(CellRecordArchive* other) {
  if (other != this) {
    std::swap(column_, other->column_);
    std::swap(row_, other->row_);
    std::swap(dirty_self_plus_precedents_count_, other->dirty_self_plus_precedents_count_);
    std::swap(is_in_a_cycle_, other->is_in_a_cycle_);
    edge_.Swap(&other->edge_);
    std::swap(contains_a_formula_, other->contains_a_formula_);
    std::swap(has_calculated_precedents_, other->has_calculated_precedents_);
    std::swap(calculate_precedents_on_next_recalc_, other->calculate_precedents_on_next_recalc_);
    std::swap(translate_for_excel_import_on_next_recalc_, other->translate_for_excel_import_on_next_recalc_);
    std::swap(edges_, other->edges_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CellRecordArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CellRecordArchive_descriptor_;
  metadata.reflection = CellRecordArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CellDependenciesArchive::kCellRecordFieldNumber;
const int CellDependenciesArchive::kNumDirtyCellsFieldNumber;
#endif  // !_MSC_VER

CellDependenciesArchive::CellDependenciesArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CellDependenciesArchive::InitAsDefaultInstance() {
}

CellDependenciesArchive::CellDependenciesArchive(const CellDependenciesArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CellDependenciesArchive::SharedCtor() {
  _cached_size_ = 0;
  num_dirty_cells_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CellDependenciesArchive::~CellDependenciesArchive() {
  SharedDtor();
}

void CellDependenciesArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CellDependenciesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellDependenciesArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellDependenciesArchive_descriptor_;
}

const CellDependenciesArchive& CellDependenciesArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

CellDependenciesArchive* CellDependenciesArchive::default_instance_ = NULL;

CellDependenciesArchive* CellDependenciesArchive::New() const {
  return new CellDependenciesArchive;
}

void CellDependenciesArchive::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    num_dirty_cells_ = 0u;
  }
  cell_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CellDependenciesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSCE.CellRecordArchive cell_record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cell_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cell_record;
        if (input->ExpectTag(16)) goto parse_num_dirty_cells;
        break;
      }

      // optional uint32 num_dirty_cells = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_dirty_cells:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_dirty_cells_)));
          set_has_num_dirty_cells();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CellDependenciesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSCE.CellRecordArchive cell_record = 1;
  for (int i = 0; i < this->cell_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cell_record(i), output);
  }

  // optional uint32 num_dirty_cells = 2;
  if (has_num_dirty_cells()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_dirty_cells(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CellDependenciesArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSCE.CellRecordArchive cell_record = 1;
  for (int i = 0; i < this->cell_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cell_record(i), target);
  }

  // optional uint32 num_dirty_cells = 2;
  if (has_num_dirty_cells()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_dirty_cells(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CellDependenciesArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 num_dirty_cells = 2;
    if (has_num_dirty_cells()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_dirty_cells());
    }

  }
  // repeated .TSCE.CellRecordArchive cell_record = 1;
  total_size += 1 * this->cell_record_size();
  for (int i = 0; i < this->cell_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cell_record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellDependenciesArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CellDependenciesArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CellDependenciesArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CellDependenciesArchive::MergeFrom(const CellDependenciesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  cell_record_.MergeFrom(from.cell_record_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_num_dirty_cells()) {
      set_num_dirty_cells(from.num_dirty_cells());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CellDependenciesArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellDependenciesArchive::CopyFrom(const CellDependenciesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellDependenciesArchive::IsInitialized() const {

  for (int i = 0; i < cell_record_size(); i++) {
    if (!this->cell_record(i).IsInitialized()) return false;
  }
  return true;
}

void CellDependenciesArchive::Swap(CellDependenciesArchive* other) {
  if (other != this) {
    cell_record_.Swap(&other->cell_record_);
    std::swap(num_dirty_cells_, other->num_dirty_cells_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CellDependenciesArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CellDependenciesArchive_descriptor_;
  metadata.reflection = CellDependenciesArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VolatileDependenciesArchive::kVolatileTimeCellColumnFieldNumber;
const int VolatileDependenciesArchive::kVolatileTimeCellRowFieldNumber;
const int VolatileDependenciesArchive::kVolatileRandomCellColumnFieldNumber;
const int VolatileDependenciesArchive::kVolatileRandomCellRowFieldNumber;
const int VolatileDependenciesArchive::kVolatileLocaleCellColumnFieldNumber;
const int VolatileDependenciesArchive::kVolatileLocaleCellRowFieldNumber;
const int VolatileDependenciesArchive::kVolatileLocationCellColumnFieldNumber;
const int VolatileDependenciesArchive::kVolatileLocationCellRowFieldNumber;
const int VolatileDependenciesArchive::kVolatileCompassCellColumnFieldNumber;
const int VolatileDependenciesArchive::kVolatileCompassCellRowFieldNumber;
const int VolatileDependenciesArchive::kVolatileSheetTableNameCellColumnFieldNumber;
const int VolatileDependenciesArchive::kVolatileSheetTableNameCellRowFieldNumber;
const int VolatileDependenciesArchive::kCalculatedDependencyCellColumnFieldNumber;
const int VolatileDependenciesArchive::kCalculatedDependencyCellRowFieldNumber;
const int VolatileDependenciesArchive::kVolatileGeometryCellReferenceFieldNumber;
const int VolatileDependenciesArchive::kVolatileGeometryCellFieldNumber;
#endif  // !_MSC_VER

VolatileDependenciesArchive::VolatileDependenciesArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VolatileDependenciesArchive::InitAsDefaultInstance() {
}

VolatileDependenciesArchive::VolatileDependenciesArchive(const VolatileDependenciesArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VolatileDependenciesArchive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VolatileDependenciesArchive::~VolatileDependenciesArchive() {
  SharedDtor();
}

void VolatileDependenciesArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VolatileDependenciesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VolatileDependenciesArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VolatileDependenciesArchive_descriptor_;
}

const VolatileDependenciesArchive& VolatileDependenciesArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

VolatileDependenciesArchive* VolatileDependenciesArchive::default_instance_ = NULL;

VolatileDependenciesArchive* VolatileDependenciesArchive::New() const {
  return new VolatileDependenciesArchive;
}

void VolatileDependenciesArchive::Clear() {
  volatile_time_cell_column_.Clear();
  volatile_time_cell_row_.Clear();
  volatile_random_cell_column_.Clear();
  volatile_random_cell_row_.Clear();
  volatile_locale_cell_column_.Clear();
  volatile_locale_cell_row_.Clear();
  volatile_location_cell_column_.Clear();
  volatile_location_cell_row_.Clear();
  volatile_compass_cell_column_.Clear();
  volatile_compass_cell_row_.Clear();
  volatile_sheet_table_name_cell_column_.Clear();
  volatile_sheet_table_name_cell_row_.Clear();
  calculated_dependency_cell_column_.Clear();
  calculated_dependency_cell_row_.Clear();
  volatile_geometry_cell_reference_.Clear();
  volatile_geometry_cell_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VolatileDependenciesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 volatile_time_cell_column = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volatile_time_cell_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_volatile_time_cell_column())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_volatile_time_cell_column())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_volatile_time_cell_column;
        if (input->ExpectTag(16)) goto parse_volatile_time_cell_row;
        break;
      }

      // repeated uint32 volatile_time_cell_row = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volatile_time_cell_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_volatile_time_cell_row())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_volatile_time_cell_row())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_volatile_time_cell_row;
        if (input->ExpectTag(24)) goto parse_volatile_random_cell_column;
        break;
      }

      // repeated uint32 volatile_random_cell_column = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volatile_random_cell_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_volatile_random_cell_column())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_volatile_random_cell_column())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_volatile_random_cell_column;
        if (input->ExpectTag(32)) goto parse_volatile_random_cell_row;
        break;
      }

      // repeated uint32 volatile_random_cell_row = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volatile_random_cell_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_volatile_random_cell_row())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_volatile_random_cell_row())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_volatile_random_cell_row;
        if (input->ExpectTag(40)) goto parse_volatile_location_cell_column;
        break;
      }

      // repeated uint32 volatile_location_cell_column = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volatile_location_cell_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_volatile_location_cell_column())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_volatile_location_cell_column())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_volatile_location_cell_column;
        if (input->ExpectTag(48)) goto parse_volatile_location_cell_row;
        break;
      }

      // repeated uint32 volatile_location_cell_row = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volatile_location_cell_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_volatile_location_cell_row())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_volatile_location_cell_row())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_volatile_location_cell_row;
        if (input->ExpectTag(56)) goto parse_volatile_compass_cell_column;
        break;
      }

      // repeated uint32 volatile_compass_cell_column = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volatile_compass_cell_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_volatile_compass_cell_column())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_volatile_compass_cell_column())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_volatile_compass_cell_column;
        if (input->ExpectTag(64)) goto parse_volatile_compass_cell_row;
        break;
      }

      // repeated uint32 volatile_compass_cell_row = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volatile_compass_cell_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_volatile_compass_cell_row())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_volatile_compass_cell_row())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_volatile_compass_cell_row;
        if (input->ExpectTag(72)) goto parse_calculated_dependency_cell_column;
        break;
      }

      // repeated uint32 calculated_dependency_cell_column = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_calculated_dependency_cell_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_calculated_dependency_cell_column())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_calculated_dependency_cell_column())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_calculated_dependency_cell_column;
        if (input->ExpectTag(80)) goto parse_calculated_dependency_cell_row;
        break;
      }

      // repeated uint32 calculated_dependency_cell_row = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_calculated_dependency_cell_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_calculated_dependency_cell_row())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_calculated_dependency_cell_row())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_calculated_dependency_cell_row;
        if (input->ExpectTag(90)) goto parse_volatile_geometry_cell;
        break;
      }

      // repeated .TSCE.CellCoordinateArchive volatile_geometry_cell = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_volatile_geometry_cell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_volatile_geometry_cell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_volatile_geometry_cell;
        if (input->ExpectTag(106)) goto parse_volatile_geometry_cell_reference;
        break;
      }

      // repeated .TSCE.CellReferenceArchive volatile_geometry_cell_reference = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_volatile_geometry_cell_reference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_volatile_geometry_cell_reference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_volatile_geometry_cell_reference;
        if (input->ExpectTag(120)) goto parse_volatile_locale_cell_column;
        break;
      }

      // repeated uint32 volatile_locale_cell_column = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volatile_locale_cell_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 120, input, this->mutable_volatile_locale_cell_column())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_volatile_locale_cell_column())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_volatile_locale_cell_column;
        if (input->ExpectTag(128)) goto parse_volatile_locale_cell_row;
        break;
      }

      // repeated uint32 volatile_locale_cell_row = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volatile_locale_cell_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 128, input, this->mutable_volatile_locale_cell_row())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_volatile_locale_cell_row())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_volatile_locale_cell_row;
        if (input->ExpectTag(136)) goto parse_volatile_sheet_table_name_cell_column;
        break;
      }

      // repeated uint32 volatile_sheet_table_name_cell_column = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volatile_sheet_table_name_cell_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 136, input, this->mutable_volatile_sheet_table_name_cell_column())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_volatile_sheet_table_name_cell_column())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_volatile_sheet_table_name_cell_column;
        if (input->ExpectTag(144)) goto parse_volatile_sheet_table_name_cell_row;
        break;
      }

      // repeated uint32 volatile_sheet_table_name_cell_row = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volatile_sheet_table_name_cell_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 144, input, this->mutable_volatile_sheet_table_name_cell_row())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_volatile_sheet_table_name_cell_row())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_volatile_sheet_table_name_cell_row;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VolatileDependenciesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 volatile_time_cell_column = 1;
  for (int i = 0; i < this->volatile_time_cell_column_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->volatile_time_cell_column(i), output);
  }

  // repeated uint32 volatile_time_cell_row = 2;
  for (int i = 0; i < this->volatile_time_cell_row_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->volatile_time_cell_row(i), output);
  }

  // repeated uint32 volatile_random_cell_column = 3;
  for (int i = 0; i < this->volatile_random_cell_column_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->volatile_random_cell_column(i), output);
  }

  // repeated uint32 volatile_random_cell_row = 4;
  for (int i = 0; i < this->volatile_random_cell_row_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->volatile_random_cell_row(i), output);
  }

  // repeated uint32 volatile_location_cell_column = 5;
  for (int i = 0; i < this->volatile_location_cell_column_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->volatile_location_cell_column(i), output);
  }

  // repeated uint32 volatile_location_cell_row = 6;
  for (int i = 0; i < this->volatile_location_cell_row_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->volatile_location_cell_row(i), output);
  }

  // repeated uint32 volatile_compass_cell_column = 7;
  for (int i = 0; i < this->volatile_compass_cell_column_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->volatile_compass_cell_column(i), output);
  }

  // repeated uint32 volatile_compass_cell_row = 8;
  for (int i = 0; i < this->volatile_compass_cell_row_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->volatile_compass_cell_row(i), output);
  }

  // repeated uint32 calculated_dependency_cell_column = 9;
  for (int i = 0; i < this->calculated_dependency_cell_column_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->calculated_dependency_cell_column(i), output);
  }

  // repeated uint32 calculated_dependency_cell_row = 10;
  for (int i = 0; i < this->calculated_dependency_cell_row_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->calculated_dependency_cell_row(i), output);
  }

  // repeated .TSCE.CellCoordinateArchive volatile_geometry_cell = 11;
  for (int i = 0; i < this->volatile_geometry_cell_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->volatile_geometry_cell(i), output);
  }

  // repeated .TSCE.CellReferenceArchive volatile_geometry_cell_reference = 13;
  for (int i = 0; i < this->volatile_geometry_cell_reference_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->volatile_geometry_cell_reference(i), output);
  }

  // repeated uint32 volatile_locale_cell_column = 15;
  for (int i = 0; i < this->volatile_locale_cell_column_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      15, this->volatile_locale_cell_column(i), output);
  }

  // repeated uint32 volatile_locale_cell_row = 16;
  for (int i = 0; i < this->volatile_locale_cell_row_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      16, this->volatile_locale_cell_row(i), output);
  }

  // repeated uint32 volatile_sheet_table_name_cell_column = 17;
  for (int i = 0; i < this->volatile_sheet_table_name_cell_column_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      17, this->volatile_sheet_table_name_cell_column(i), output);
  }

  // repeated uint32 volatile_sheet_table_name_cell_row = 18;
  for (int i = 0; i < this->volatile_sheet_table_name_cell_row_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      18, this->volatile_sheet_table_name_cell_row(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VolatileDependenciesArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 volatile_time_cell_column = 1;
  for (int i = 0; i < this->volatile_time_cell_column_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->volatile_time_cell_column(i), target);
  }

  // repeated uint32 volatile_time_cell_row = 2;
  for (int i = 0; i < this->volatile_time_cell_row_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->volatile_time_cell_row(i), target);
  }

  // repeated uint32 volatile_random_cell_column = 3;
  for (int i = 0; i < this->volatile_random_cell_column_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->volatile_random_cell_column(i), target);
  }

  // repeated uint32 volatile_random_cell_row = 4;
  for (int i = 0; i < this->volatile_random_cell_row_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->volatile_random_cell_row(i), target);
  }

  // repeated uint32 volatile_location_cell_column = 5;
  for (int i = 0; i < this->volatile_location_cell_column_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->volatile_location_cell_column(i), target);
  }

  // repeated uint32 volatile_location_cell_row = 6;
  for (int i = 0; i < this->volatile_location_cell_row_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->volatile_location_cell_row(i), target);
  }

  // repeated uint32 volatile_compass_cell_column = 7;
  for (int i = 0; i < this->volatile_compass_cell_column_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->volatile_compass_cell_column(i), target);
  }

  // repeated uint32 volatile_compass_cell_row = 8;
  for (int i = 0; i < this->volatile_compass_cell_row_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->volatile_compass_cell_row(i), target);
  }

  // repeated uint32 calculated_dependency_cell_column = 9;
  for (int i = 0; i < this->calculated_dependency_cell_column_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->calculated_dependency_cell_column(i), target);
  }

  // repeated uint32 calculated_dependency_cell_row = 10;
  for (int i = 0; i < this->calculated_dependency_cell_row_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->calculated_dependency_cell_row(i), target);
  }

  // repeated .TSCE.CellCoordinateArchive volatile_geometry_cell = 11;
  for (int i = 0; i < this->volatile_geometry_cell_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->volatile_geometry_cell(i), target);
  }

  // repeated .TSCE.CellReferenceArchive volatile_geometry_cell_reference = 13;
  for (int i = 0; i < this->volatile_geometry_cell_reference_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->volatile_geometry_cell_reference(i), target);
  }

  // repeated uint32 volatile_locale_cell_column = 15;
  for (int i = 0; i < this->volatile_locale_cell_column_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(15, this->volatile_locale_cell_column(i), target);
  }

  // repeated uint32 volatile_locale_cell_row = 16;
  for (int i = 0; i < this->volatile_locale_cell_row_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(16, this->volatile_locale_cell_row(i), target);
  }

  // repeated uint32 volatile_sheet_table_name_cell_column = 17;
  for (int i = 0; i < this->volatile_sheet_table_name_cell_column_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(17, this->volatile_sheet_table_name_cell_column(i), target);
  }

  // repeated uint32 volatile_sheet_table_name_cell_row = 18;
  for (int i = 0; i < this->volatile_sheet_table_name_cell_row_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(18, this->volatile_sheet_table_name_cell_row(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VolatileDependenciesArchive::ByteSize() const {
  int total_size = 0;

  // repeated uint32 volatile_time_cell_column = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->volatile_time_cell_column_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->volatile_time_cell_column(i));
    }
    total_size += 1 * this->volatile_time_cell_column_size() + data_size;
  }

  // repeated uint32 volatile_time_cell_row = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->volatile_time_cell_row_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->volatile_time_cell_row(i));
    }
    total_size += 1 * this->volatile_time_cell_row_size() + data_size;
  }

  // repeated uint32 volatile_random_cell_column = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->volatile_random_cell_column_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->volatile_random_cell_column(i));
    }
    total_size += 1 * this->volatile_random_cell_column_size() + data_size;
  }

  // repeated uint32 volatile_random_cell_row = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->volatile_random_cell_row_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->volatile_random_cell_row(i));
    }
    total_size += 1 * this->volatile_random_cell_row_size() + data_size;
  }

  // repeated uint32 volatile_locale_cell_column = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->volatile_locale_cell_column_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->volatile_locale_cell_column(i));
    }
    total_size += 1 * this->volatile_locale_cell_column_size() + data_size;
  }

  // repeated uint32 volatile_locale_cell_row = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->volatile_locale_cell_row_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->volatile_locale_cell_row(i));
    }
    total_size += 2 * this->volatile_locale_cell_row_size() + data_size;
  }

  // repeated uint32 volatile_location_cell_column = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->volatile_location_cell_column_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->volatile_location_cell_column(i));
    }
    total_size += 1 * this->volatile_location_cell_column_size() + data_size;
  }

  // repeated uint32 volatile_location_cell_row = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->volatile_location_cell_row_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->volatile_location_cell_row(i));
    }
    total_size += 1 * this->volatile_location_cell_row_size() + data_size;
  }

  // repeated uint32 volatile_compass_cell_column = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->volatile_compass_cell_column_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->volatile_compass_cell_column(i));
    }
    total_size += 1 * this->volatile_compass_cell_column_size() + data_size;
  }

  // repeated uint32 volatile_compass_cell_row = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->volatile_compass_cell_row_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->volatile_compass_cell_row(i));
    }
    total_size += 1 * this->volatile_compass_cell_row_size() + data_size;
  }

  // repeated uint32 volatile_sheet_table_name_cell_column = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->volatile_sheet_table_name_cell_column_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->volatile_sheet_table_name_cell_column(i));
    }
    total_size += 2 * this->volatile_sheet_table_name_cell_column_size() + data_size;
  }

  // repeated uint32 volatile_sheet_table_name_cell_row = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->volatile_sheet_table_name_cell_row_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->volatile_sheet_table_name_cell_row(i));
    }
    total_size += 2 * this->volatile_sheet_table_name_cell_row_size() + data_size;
  }

  // repeated uint32 calculated_dependency_cell_column = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->calculated_dependency_cell_column_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->calculated_dependency_cell_column(i));
    }
    total_size += 1 * this->calculated_dependency_cell_column_size() + data_size;
  }

  // repeated uint32 calculated_dependency_cell_row = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->calculated_dependency_cell_row_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->calculated_dependency_cell_row(i));
    }
    total_size += 1 * this->calculated_dependency_cell_row_size() + data_size;
  }

  // repeated .TSCE.CellReferenceArchive volatile_geometry_cell_reference = 13;
  total_size += 1 * this->volatile_geometry_cell_reference_size();
  for (int i = 0; i < this->volatile_geometry_cell_reference_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->volatile_geometry_cell_reference(i));
  }

  // repeated .TSCE.CellCoordinateArchive volatile_geometry_cell = 11;
  total_size += 1 * this->volatile_geometry_cell_size();
  for (int i = 0; i < this->volatile_geometry_cell_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->volatile_geometry_cell(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VolatileDependenciesArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VolatileDependenciesArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VolatileDependenciesArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VolatileDependenciesArchive::MergeFrom(const VolatileDependenciesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  volatile_time_cell_column_.MergeFrom(from.volatile_time_cell_column_);
  volatile_time_cell_row_.MergeFrom(from.volatile_time_cell_row_);
  volatile_random_cell_column_.MergeFrom(from.volatile_random_cell_column_);
  volatile_random_cell_row_.MergeFrom(from.volatile_random_cell_row_);
  volatile_locale_cell_column_.MergeFrom(from.volatile_locale_cell_column_);
  volatile_locale_cell_row_.MergeFrom(from.volatile_locale_cell_row_);
  volatile_location_cell_column_.MergeFrom(from.volatile_location_cell_column_);
  volatile_location_cell_row_.MergeFrom(from.volatile_location_cell_row_);
  volatile_compass_cell_column_.MergeFrom(from.volatile_compass_cell_column_);
  volatile_compass_cell_row_.MergeFrom(from.volatile_compass_cell_row_);
  volatile_sheet_table_name_cell_column_.MergeFrom(from.volatile_sheet_table_name_cell_column_);
  volatile_sheet_table_name_cell_row_.MergeFrom(from.volatile_sheet_table_name_cell_row_);
  calculated_dependency_cell_column_.MergeFrom(from.calculated_dependency_cell_column_);
  calculated_dependency_cell_row_.MergeFrom(from.calculated_dependency_cell_row_);
  volatile_geometry_cell_reference_.MergeFrom(from.volatile_geometry_cell_reference_);
  volatile_geometry_cell_.MergeFrom(from.volatile_geometry_cell_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VolatileDependenciesArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VolatileDependenciesArchive::CopyFrom(const VolatileDependenciesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolatileDependenciesArchive::IsInitialized() const {

  for (int i = 0; i < volatile_geometry_cell_reference_size(); i++) {
    if (!this->volatile_geometry_cell_reference(i).IsInitialized()) return false;
  }
  return true;
}

void VolatileDependenciesArchive::Swap(VolatileDependenciesArchive* other) {
  if (other != this) {
    volatile_time_cell_column_.Swap(&other->volatile_time_cell_column_);
    volatile_time_cell_row_.Swap(&other->volatile_time_cell_row_);
    volatile_random_cell_column_.Swap(&other->volatile_random_cell_column_);
    volatile_random_cell_row_.Swap(&other->volatile_random_cell_row_);
    volatile_locale_cell_column_.Swap(&other->volatile_locale_cell_column_);
    volatile_locale_cell_row_.Swap(&other->volatile_locale_cell_row_);
    volatile_location_cell_column_.Swap(&other->volatile_location_cell_column_);
    volatile_location_cell_row_.Swap(&other->volatile_location_cell_row_);
    volatile_compass_cell_column_.Swap(&other->volatile_compass_cell_column_);
    volatile_compass_cell_row_.Swap(&other->volatile_compass_cell_row_);
    volatile_sheet_table_name_cell_column_.Swap(&other->volatile_sheet_table_name_cell_column_);
    volatile_sheet_table_name_cell_row_.Swap(&other->volatile_sheet_table_name_cell_row_);
    calculated_dependency_cell_column_.Swap(&other->calculated_dependency_cell_column_);
    calculated_dependency_cell_row_.Swap(&other->calculated_dependency_cell_row_);
    volatile_geometry_cell_reference_.Swap(&other->volatile_geometry_cell_reference_);
    volatile_geometry_cell_.Swap(&other->volatile_geometry_cell_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VolatileDependenciesArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VolatileDependenciesArchive_descriptor_;
  metadata.reflection = VolatileDependenciesArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RangeBackDependencyArchive::kCellCoordRowFieldNumber;
const int RangeBackDependencyArchive::kCellCoordColumnFieldNumber;
const int RangeBackDependencyArchive::kRangeReferenceFieldNumber;
const int RangeBackDependencyArchive::kInternalRangeReferenceFieldNumber;
#endif  // !_MSC_VER

RangeBackDependencyArchive::RangeBackDependencyArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RangeBackDependencyArchive::InitAsDefaultInstance() {
  range_reference_ = const_cast< ::TSCE::RangeReferenceArchive*>(&::TSCE::RangeReferenceArchive::default_instance());
  internal_range_reference_ = const_cast< ::TSCE::InternalRangeReferenceArchive*>(&::TSCE::InternalRangeReferenceArchive::default_instance());
}

RangeBackDependencyArchive::RangeBackDependencyArchive(const RangeBackDependencyArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RangeBackDependencyArchive::SharedCtor() {
  _cached_size_ = 0;
  cell_coord_row_ = 0u;
  cell_coord_column_ = 0u;
  range_reference_ = NULL;
  internal_range_reference_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RangeBackDependencyArchive::~RangeBackDependencyArchive() {
  SharedDtor();
}

void RangeBackDependencyArchive::SharedDtor() {
  if (this != default_instance_) {
    delete range_reference_;
    delete internal_range_reference_;
  }
}

void RangeBackDependencyArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeBackDependencyArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RangeBackDependencyArchive_descriptor_;
}

const RangeBackDependencyArchive& RangeBackDependencyArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

RangeBackDependencyArchive* RangeBackDependencyArchive::default_instance_ = NULL;

RangeBackDependencyArchive* RangeBackDependencyArchive::New() const {
  return new RangeBackDependencyArchive;
}

void RangeBackDependencyArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cell_coord_row_ = 0u;
    cell_coord_column_ = 0u;
    if (has_range_reference()) {
      if (range_reference_ != NULL) range_reference_->::TSCE::RangeReferenceArchive::Clear();
    }
    if (has_internal_range_reference()) {
      if (internal_range_reference_ != NULL) internal_range_reference_->::TSCE::InternalRangeReferenceArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RangeBackDependencyArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cell_coord_row = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_coord_row_)));
          set_has_cell_coord_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cell_coord_column;
        break;
      }

      // required uint32 cell_coord_column = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cell_coord_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_coord_column_)));
          set_has_cell_coord_column();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_range_reference;
        break;
      }

      // optional .TSCE.RangeReferenceArchive range_reference = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_range_reference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range_reference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_internal_range_reference;
        break;
      }

      // optional .TSCE.InternalRangeReferenceArchive internal_range_reference = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_internal_range_reference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_range_reference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RangeBackDependencyArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cell_coord_row = 1;
  if (has_cell_coord_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cell_coord_row(), output);
  }

  // required uint32 cell_coord_column = 2;
  if (has_cell_coord_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cell_coord_column(), output);
  }

  // optional .TSCE.RangeReferenceArchive range_reference = 3;
  if (has_range_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->range_reference(), output);
  }

  // optional .TSCE.InternalRangeReferenceArchive internal_range_reference = 4;
  if (has_internal_range_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->internal_range_reference(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RangeBackDependencyArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cell_coord_row = 1;
  if (has_cell_coord_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cell_coord_row(), target);
  }

  // required uint32 cell_coord_column = 2;
  if (has_cell_coord_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cell_coord_column(), target);
  }

  // optional .TSCE.RangeReferenceArchive range_reference = 3;
  if (has_range_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->range_reference(), target);
  }

  // optional .TSCE.InternalRangeReferenceArchive internal_range_reference = 4;
  if (has_internal_range_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->internal_range_reference(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RangeBackDependencyArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cell_coord_row = 1;
    if (has_cell_coord_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_coord_row());
    }

    // required uint32 cell_coord_column = 2;
    if (has_cell_coord_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_coord_column());
    }

    // optional .TSCE.RangeReferenceArchive range_reference = 3;
    if (has_range_reference()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->range_reference());
    }

    // optional .TSCE.InternalRangeReferenceArchive internal_range_reference = 4;
    if (has_internal_range_reference()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->internal_range_reference());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeBackDependencyArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RangeBackDependencyArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RangeBackDependencyArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RangeBackDependencyArchive::MergeFrom(const RangeBackDependencyArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cell_coord_row()) {
      set_cell_coord_row(from.cell_coord_row());
    }
    if (from.has_cell_coord_column()) {
      set_cell_coord_column(from.cell_coord_column());
    }
    if (from.has_range_reference()) {
      mutable_range_reference()->::TSCE::RangeReferenceArchive::MergeFrom(from.range_reference());
    }
    if (from.has_internal_range_reference()) {
      mutable_internal_range_reference()->::TSCE::InternalRangeReferenceArchive::MergeFrom(from.internal_range_reference());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RangeBackDependencyArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeBackDependencyArchive::CopyFrom(const RangeBackDependencyArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeBackDependencyArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_range_reference()) {
    if (!this->range_reference().IsInitialized()) return false;
  }
  if (has_internal_range_reference()) {
    if (!this->internal_range_reference().IsInitialized()) return false;
  }
  return true;
}

void RangeBackDependencyArchive::Swap(RangeBackDependencyArchive* other) {
  if (other != this) {
    std::swap(cell_coord_row_, other->cell_coord_row_);
    std::swap(cell_coord_column_, other->cell_coord_column_);
    std::swap(range_reference_, other->range_reference_);
    std::swap(internal_range_reference_, other->internal_range_reference_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RangeBackDependencyArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RangeBackDependencyArchive_descriptor_;
  metadata.reflection = RangeBackDependencyArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RTreeInternalNodeContentsArchive::kMinFieldNumber;
const int RTreeInternalNodeContentsArchive::kMaxFieldNumber;
const int RTreeInternalNodeContentsArchive::kChildFieldNumber;
#endif  // !_MSC_VER

RTreeInternalNodeContentsArchive::RTreeInternalNodeContentsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RTreeInternalNodeContentsArchive::InitAsDefaultInstance() {
  child_ = const_cast< ::TSCE::RTreeNodeArchive*>(&::TSCE::RTreeNodeArchive::default_instance());
}

RTreeInternalNodeContentsArchive::RTreeInternalNodeContentsArchive(const RTreeInternalNodeContentsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RTreeInternalNodeContentsArchive::SharedCtor() {
  _cached_size_ = 0;
  child_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RTreeInternalNodeContentsArchive::~RTreeInternalNodeContentsArchive() {
  SharedDtor();
}

void RTreeInternalNodeContentsArchive::SharedDtor() {
  if (this != default_instance_) {
    delete child_;
  }
}

void RTreeInternalNodeContentsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RTreeInternalNodeContentsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RTreeInternalNodeContentsArchive_descriptor_;
}

const RTreeInternalNodeContentsArchive& RTreeInternalNodeContentsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

RTreeInternalNodeContentsArchive* RTreeInternalNodeContentsArchive::default_instance_ = NULL;

RTreeInternalNodeContentsArchive* RTreeInternalNodeContentsArchive::New() const {
  return new RTreeInternalNodeContentsArchive;
}

void RTreeInternalNodeContentsArchive::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_child()) {
      if (child_ != NULL) child_->::TSCE::RTreeNodeArchive::Clear();
    }
  }
  min_.Clear();
  max_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RTreeInternalNodeContentsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 min = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_min())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_min())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_min;
        if (input->ExpectTag(16)) goto parse_max;
        break;
      }

      // repeated uint32 max = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_max())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_max())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max;
        if (input->ExpectTag(26)) goto parse_child;
        break;
      }

      // required .TSCE.RTreeNodeArchive child = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_child:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_child()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RTreeInternalNodeContentsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 min = 1;
  for (int i = 0; i < this->min_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->min(i), output);
  }

  // repeated uint32 max = 2;
  for (int i = 0; i < this->max_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->max(i), output);
  }

  // required .TSCE.RTreeNodeArchive child = 3;
  if (has_child()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->child(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RTreeInternalNodeContentsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 min = 1;
  for (int i = 0; i < this->min_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->min(i), target);
  }

  // repeated uint32 max = 2;
  for (int i = 0; i < this->max_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->max(i), target);
  }

  // required .TSCE.RTreeNodeArchive child = 3;
  if (has_child()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->child(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RTreeInternalNodeContentsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required .TSCE.RTreeNodeArchive child = 3;
    if (has_child()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->child());
    }

  }
  // repeated uint32 min = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->min_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->min(i));
    }
    total_size += 1 * this->min_size() + data_size;
  }

  // repeated uint32 max = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->max_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->max(i));
    }
    total_size += 1 * this->max_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RTreeInternalNodeContentsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RTreeInternalNodeContentsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RTreeInternalNodeContentsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RTreeInternalNodeContentsArchive::MergeFrom(const RTreeInternalNodeContentsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  min_.MergeFrom(from.min_);
  max_.MergeFrom(from.max_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_child()) {
      mutable_child()->::TSCE::RTreeNodeArchive::MergeFrom(from.child());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RTreeInternalNodeContentsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RTreeInternalNodeContentsArchive::CopyFrom(const RTreeInternalNodeContentsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTreeInternalNodeContentsArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  if (has_child()) {
    if (!this->child().IsInitialized()) return false;
  }
  return true;
}

void RTreeInternalNodeContentsArchive::Swap(RTreeInternalNodeContentsArchive* other) {
  if (other != this) {
    min_.Swap(&other->min_);
    max_.Swap(&other->max_);
    std::swap(child_, other->child_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RTreeInternalNodeContentsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RTreeInternalNodeContentsArchive_descriptor_;
  metadata.reflection = RTreeInternalNodeContentsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RTreeLeafNodeContentsArchive::kMinFieldNumber;
const int RTreeLeafNodeContentsArchive::kMaxFieldNumber;
const int RTreeLeafNodeContentsArchive::kCellReferenceFieldNumber;
#endif  // !_MSC_VER

RTreeLeafNodeContentsArchive::RTreeLeafNodeContentsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RTreeLeafNodeContentsArchive::InitAsDefaultInstance() {
  cell_reference_ = const_cast< ::TSCE::CellReferenceArchive*>(&::TSCE::CellReferenceArchive::default_instance());
}

RTreeLeafNodeContentsArchive::RTreeLeafNodeContentsArchive(const RTreeLeafNodeContentsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RTreeLeafNodeContentsArchive::SharedCtor() {
  _cached_size_ = 0;
  cell_reference_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RTreeLeafNodeContentsArchive::~RTreeLeafNodeContentsArchive() {
  SharedDtor();
}

void RTreeLeafNodeContentsArchive::SharedDtor() {
  if (this != default_instance_) {
    delete cell_reference_;
  }
}

void RTreeLeafNodeContentsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RTreeLeafNodeContentsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RTreeLeafNodeContentsArchive_descriptor_;
}

const RTreeLeafNodeContentsArchive& RTreeLeafNodeContentsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

RTreeLeafNodeContentsArchive* RTreeLeafNodeContentsArchive::default_instance_ = NULL;

RTreeLeafNodeContentsArchive* RTreeLeafNodeContentsArchive::New() const {
  return new RTreeLeafNodeContentsArchive;
}

void RTreeLeafNodeContentsArchive::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_cell_reference()) {
      if (cell_reference_ != NULL) cell_reference_->::TSCE::CellReferenceArchive::Clear();
    }
  }
  min_.Clear();
  max_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RTreeLeafNodeContentsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 min = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_min())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_min())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_min;
        if (input->ExpectTag(16)) goto parse_max;
        break;
      }

      // repeated uint32 max = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_max())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_max())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max;
        if (input->ExpectTag(26)) goto parse_cell_reference;
        break;
      }

      // required .TSCE.CellReferenceArchive cell_reference = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_reference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell_reference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RTreeLeafNodeContentsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 min = 1;
  for (int i = 0; i < this->min_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->min(i), output);
  }

  // repeated uint32 max = 2;
  for (int i = 0; i < this->max_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->max(i), output);
  }

  // required .TSCE.CellReferenceArchive cell_reference = 3;
  if (has_cell_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cell_reference(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RTreeLeafNodeContentsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 min = 1;
  for (int i = 0; i < this->min_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->min(i), target);
  }

  // repeated uint32 max = 2;
  for (int i = 0; i < this->max_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->max(i), target);
  }

  // required .TSCE.CellReferenceArchive cell_reference = 3;
  if (has_cell_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cell_reference(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RTreeLeafNodeContentsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required .TSCE.CellReferenceArchive cell_reference = 3;
    if (has_cell_reference()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cell_reference());
    }

  }
  // repeated uint32 min = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->min_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->min(i));
    }
    total_size += 1 * this->min_size() + data_size;
  }

  // repeated uint32 max = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->max_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->max(i));
    }
    total_size += 1 * this->max_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RTreeLeafNodeContentsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RTreeLeafNodeContentsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RTreeLeafNodeContentsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RTreeLeafNodeContentsArchive::MergeFrom(const RTreeLeafNodeContentsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  min_.MergeFrom(from.min_);
  max_.MergeFrom(from.max_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_cell_reference()) {
      mutable_cell_reference()->::TSCE::CellReferenceArchive::MergeFrom(from.cell_reference());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RTreeLeafNodeContentsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RTreeLeafNodeContentsArchive::CopyFrom(const RTreeLeafNodeContentsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTreeLeafNodeContentsArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  if (has_cell_reference()) {
    if (!this->cell_reference().IsInitialized()) return false;
  }
  return true;
}

void RTreeLeafNodeContentsArchive::Swap(RTreeLeafNodeContentsArchive* other) {
  if (other != this) {
    min_.Swap(&other->min_);
    max_.Swap(&other->max_);
    std::swap(cell_reference_, other->cell_reference_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RTreeLeafNodeContentsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RTreeLeafNodeContentsArchive_descriptor_;
  metadata.reflection = RTreeLeafNodeContentsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RTreeNodeArchive::kLevelFieldNumber;
const int RTreeNodeArchive::kCountFieldNumber;
const int RTreeNodeArchive::kInternalNodeContentsFieldNumber;
const int RTreeNodeArchive::kLeafNodeContentsFieldNumber;
#endif  // !_MSC_VER

RTreeNodeArchive::RTreeNodeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RTreeNodeArchive::InitAsDefaultInstance() {
}

RTreeNodeArchive::RTreeNodeArchive(const RTreeNodeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RTreeNodeArchive::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RTreeNodeArchive::~RTreeNodeArchive() {
  SharedDtor();
}

void RTreeNodeArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RTreeNodeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RTreeNodeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RTreeNodeArchive_descriptor_;
}

const RTreeNodeArchive& RTreeNodeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

RTreeNodeArchive* RTreeNodeArchive::default_instance_ = NULL;

RTreeNodeArchive* RTreeNodeArchive::New() const {
  return new RTreeNodeArchive;
}

void RTreeNodeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    count_ = 0u;
  }
  internal_node_contents_.Clear();
  leaf_node_contents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RTreeNodeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_internal_node_contents;
        break;
      }

      // repeated .TSCE.RTreeInternalNodeContentsArchive internal_node_contents = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_internal_node_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_internal_node_contents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_internal_node_contents;
        if (input->ExpectTag(34)) goto parse_leaf_node_contents;
        break;
      }

      // repeated .TSCE.RTreeLeafNodeContentsArchive leaf_node_contents = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaf_node_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leaf_node_contents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_leaf_node_contents;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RTreeNodeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated .TSCE.RTreeInternalNodeContentsArchive internal_node_contents = 3;
  for (int i = 0; i < this->internal_node_contents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->internal_node_contents(i), output);
  }

  // repeated .TSCE.RTreeLeafNodeContentsArchive leaf_node_contents = 4;
  for (int i = 0; i < this->leaf_node_contents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->leaf_node_contents(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RTreeNodeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated .TSCE.RTreeInternalNodeContentsArchive internal_node_contents = 3;
  for (int i = 0; i < this->internal_node_contents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->internal_node_contents(i), target);
  }

  // repeated .TSCE.RTreeLeafNodeContentsArchive leaf_node_contents = 4;
  for (int i = 0; i < this->leaf_node_contents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->leaf_node_contents(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RTreeNodeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  // repeated .TSCE.RTreeInternalNodeContentsArchive internal_node_contents = 3;
  total_size += 1 * this->internal_node_contents_size();
  for (int i = 0; i < this->internal_node_contents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->internal_node_contents(i));
  }

  // repeated .TSCE.RTreeLeafNodeContentsArchive leaf_node_contents = 4;
  total_size += 1 * this->leaf_node_contents_size();
  for (int i = 0; i < this->leaf_node_contents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leaf_node_contents(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RTreeNodeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RTreeNodeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RTreeNodeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RTreeNodeArchive::MergeFrom(const RTreeNodeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  internal_node_contents_.MergeFrom(from.internal_node_contents_);
  leaf_node_contents_.MergeFrom(from.leaf_node_contents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RTreeNodeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RTreeNodeArchive::CopyFrom(const RTreeNodeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTreeNodeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < internal_node_contents_size(); i++) {
    if (!this->internal_node_contents(i).IsInitialized()) return false;
  }
  for (int i = 0; i < leaf_node_contents_size(); i++) {
    if (!this->leaf_node_contents(i).IsInitialized()) return false;
  }
  return true;
}

void RTreeNodeArchive::Swap(RTreeNodeArchive* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(count_, other->count_);
    internal_node_contents_.Swap(&other->internal_node_contents_);
    leaf_node_contents_.Swap(&other->leaf_node_contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RTreeNodeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RTreeNodeArchive_descriptor_;
  metadata.reflection = RTreeNodeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RTreeArchive::kDataFileIdFieldNumber;
const int RTreeArchive::kDataSizeFieldNumber;
const int RTreeArchive::kDataNumDimsFieldNumber;
const int RTreeArchive::kDataElemSizeFieldNumber;
const int RTreeArchive::kDataElemRealSizeFieldNumber;
const int RTreeArchive::kDataMaxNodesFieldNumber;
const int RTreeArchive::kDataMinNodesFieldNumber;
const int RTreeArchive::kRootFieldNumber;
#endif  // !_MSC_VER

RTreeArchive::RTreeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RTreeArchive::InitAsDefaultInstance() {
  root_ = const_cast< ::TSCE::RTreeNodeArchive*>(&::TSCE::RTreeNodeArchive::default_instance());
}

RTreeArchive::RTreeArchive(const RTreeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RTreeArchive::SharedCtor() {
  _cached_size_ = 0;
  data_file_id_ = 0u;
  data_size_ = 0u;
  data_num_dims_ = 0u;
  data_elem_size_ = 0u;
  data_elem_real_size_ = 0u;
  data_max_nodes_ = 0u;
  data_min_nodes_ = 0u;
  root_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RTreeArchive::~RTreeArchive() {
  SharedDtor();
}

void RTreeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete root_;
  }
}

void RTreeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RTreeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RTreeArchive_descriptor_;
}

const RTreeArchive& RTreeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

RTreeArchive* RTreeArchive::default_instance_ = NULL;

RTreeArchive* RTreeArchive::New() const {
  return new RTreeArchive;
}

void RTreeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_file_id_ = 0u;
    data_size_ = 0u;
    data_num_dims_ = 0u;
    data_elem_size_ = 0u;
    data_elem_real_size_ = 0u;
    data_max_nodes_ = 0u;
    data_min_nodes_ = 0u;
    if (has_root()) {
      if (root_ != NULL) root_->::TSCE::RTreeNodeArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RTreeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 data_file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_file_id_)));
          set_has_data_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_data_size;
        break;
      }

      // required uint32 data_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_size_)));
          set_has_data_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_data_num_dims;
        break;
      }

      // required uint32 data_num_dims = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_num_dims:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_num_dims_)));
          set_has_data_num_dims();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_data_elem_size;
        break;
      }

      // required uint32 data_elem_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_elem_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_elem_size_)));
          set_has_data_elem_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_data_elem_real_size;
        break;
      }

      // required uint32 data_elem_real_size = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_elem_real_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_elem_real_size_)));
          set_has_data_elem_real_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_data_max_nodes;
        break;
      }

      // required uint32 data_max_nodes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_max_nodes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_max_nodes_)));
          set_has_data_max_nodes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_data_min_nodes;
        break;
      }

      // required uint32 data_min_nodes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_min_nodes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_min_nodes_)));
          set_has_data_min_nodes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_root;
        break;
      }

      // required .TSCE.RTreeNodeArchive root = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_root:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_root()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RTreeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 data_file_id = 1;
  if (has_data_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->data_file_id(), output);
  }

  // required uint32 data_size = 2;
  if (has_data_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->data_size(), output);
  }

  // required uint32 data_num_dims = 3;
  if (has_data_num_dims()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->data_num_dims(), output);
  }

  // required uint32 data_elem_size = 4;
  if (has_data_elem_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->data_elem_size(), output);
  }

  // required uint32 data_elem_real_size = 5;
  if (has_data_elem_real_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->data_elem_real_size(), output);
  }

  // required uint32 data_max_nodes = 6;
  if (has_data_max_nodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->data_max_nodes(), output);
  }

  // required uint32 data_min_nodes = 7;
  if (has_data_min_nodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->data_min_nodes(), output);
  }

  // required .TSCE.RTreeNodeArchive root = 8;
  if (has_root()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->root(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RTreeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 data_file_id = 1;
  if (has_data_file_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->data_file_id(), target);
  }

  // required uint32 data_size = 2;
  if (has_data_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->data_size(), target);
  }

  // required uint32 data_num_dims = 3;
  if (has_data_num_dims()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->data_num_dims(), target);
  }

  // required uint32 data_elem_size = 4;
  if (has_data_elem_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->data_elem_size(), target);
  }

  // required uint32 data_elem_real_size = 5;
  if (has_data_elem_real_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->data_elem_real_size(), target);
  }

  // required uint32 data_max_nodes = 6;
  if (has_data_max_nodes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->data_max_nodes(), target);
  }

  // required uint32 data_min_nodes = 7;
  if (has_data_min_nodes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->data_min_nodes(), target);
  }

  // required .TSCE.RTreeNodeArchive root = 8;
  if (has_root()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->root(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RTreeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 data_file_id = 1;
    if (has_data_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_file_id());
    }

    // required uint32 data_size = 2;
    if (has_data_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_size());
    }

    // required uint32 data_num_dims = 3;
    if (has_data_num_dims()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_num_dims());
    }

    // required uint32 data_elem_size = 4;
    if (has_data_elem_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_elem_size());
    }

    // required uint32 data_elem_real_size = 5;
    if (has_data_elem_real_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_elem_real_size());
    }

    // required uint32 data_max_nodes = 6;
    if (has_data_max_nodes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_max_nodes());
    }

    // required uint32 data_min_nodes = 7;
    if (has_data_min_nodes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_min_nodes());
    }

    // required .TSCE.RTreeNodeArchive root = 8;
    if (has_root()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->root());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RTreeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RTreeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RTreeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RTreeArchive::MergeFrom(const RTreeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_file_id()) {
      set_data_file_id(from.data_file_id());
    }
    if (from.has_data_size()) {
      set_data_size(from.data_size());
    }
    if (from.has_data_num_dims()) {
      set_data_num_dims(from.data_num_dims());
    }
    if (from.has_data_elem_size()) {
      set_data_elem_size(from.data_elem_size());
    }
    if (from.has_data_elem_real_size()) {
      set_data_elem_real_size(from.data_elem_real_size());
    }
    if (from.has_data_max_nodes()) {
      set_data_max_nodes(from.data_max_nodes());
    }
    if (from.has_data_min_nodes()) {
      set_data_min_nodes(from.data_min_nodes());
    }
    if (from.has_root()) {
      mutable_root()->::TSCE::RTreeNodeArchive::MergeFrom(from.root());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RTreeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RTreeArchive::CopyFrom(const RTreeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTreeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (has_root()) {
    if (!this->root().IsInitialized()) return false;
  }
  return true;
}

void RTreeArchive::Swap(RTreeArchive* other) {
  if (other != this) {
    std::swap(data_file_id_, other->data_file_id_);
    std::swap(data_size_, other->data_size_);
    std::swap(data_num_dims_, other->data_num_dims_);
    std::swap(data_elem_size_, other->data_elem_size_);
    std::swap(data_elem_real_size_, other->data_elem_real_size_);
    std::swap(data_max_nodes_, other->data_max_nodes_);
    std::swap(data_min_nodes_, other->data_min_nodes_);
    std::swap(root_, other->root_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RTreeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RTreeArchive_descriptor_;
  metadata.reflection = RTreeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RangeDependenciesArchive::kRTreeFieldNumber;
const int RangeDependenciesArchive::kBackDependencyFieldNumber;
#endif  // !_MSC_VER

RangeDependenciesArchive::RangeDependenciesArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RangeDependenciesArchive::InitAsDefaultInstance() {
  r_tree_ = const_cast< ::TSCE::RTreeArchive*>(&::TSCE::RTreeArchive::default_instance());
}

RangeDependenciesArchive::RangeDependenciesArchive(const RangeDependenciesArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RangeDependenciesArchive::SharedCtor() {
  _cached_size_ = 0;
  r_tree_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RangeDependenciesArchive::~RangeDependenciesArchive() {
  SharedDtor();
}

void RangeDependenciesArchive::SharedDtor() {
  if (this != default_instance_) {
    delete r_tree_;
  }
}

void RangeDependenciesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeDependenciesArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RangeDependenciesArchive_descriptor_;
}

const RangeDependenciesArchive& RangeDependenciesArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

RangeDependenciesArchive* RangeDependenciesArchive::default_instance_ = NULL;

RangeDependenciesArchive* RangeDependenciesArchive::New() const {
  return new RangeDependenciesArchive;
}

void RangeDependenciesArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_r_tree()) {
      if (r_tree_ != NULL) r_tree_->::TSCE::RTreeArchive::Clear();
    }
  }
  back_dependency_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RangeDependenciesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSCE.RTreeArchive r_tree = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_r_tree()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_back_dependency;
        break;
      }

      // repeated .TSCE.RangeBackDependencyArchive back_dependency = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_back_dependency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_back_dependency()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_back_dependency;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RangeDependenciesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSCE.RTreeArchive r_tree = 1;
  if (has_r_tree()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->r_tree(), output);
  }

  // repeated .TSCE.RangeBackDependencyArchive back_dependency = 2;
  for (int i = 0; i < this->back_dependency_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->back_dependency(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RangeDependenciesArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSCE.RTreeArchive r_tree = 1;
  if (has_r_tree()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->r_tree(), target);
  }

  // repeated .TSCE.RangeBackDependencyArchive back_dependency = 2;
  for (int i = 0; i < this->back_dependency_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->back_dependency(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RangeDependenciesArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSCE.RTreeArchive r_tree = 1;
    if (has_r_tree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->r_tree());
    }

  }
  // repeated .TSCE.RangeBackDependencyArchive back_dependency = 2;
  total_size += 1 * this->back_dependency_size();
  for (int i = 0; i < this->back_dependency_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->back_dependency(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeDependenciesArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RangeDependenciesArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RangeDependenciesArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RangeDependenciesArchive::MergeFrom(const RangeDependenciesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  back_dependency_.MergeFrom(from.back_dependency_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r_tree()) {
      mutable_r_tree()->::TSCE::RTreeArchive::MergeFrom(from.r_tree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RangeDependenciesArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeDependenciesArchive::CopyFrom(const RangeDependenciesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeDependenciesArchive::IsInitialized() const {

  if (has_r_tree()) {
    if (!this->r_tree().IsInitialized()) return false;
  }
  for (int i = 0; i < back_dependency_size(); i++) {
    if (!this->back_dependency(i).IsInitialized()) return false;
  }
  return true;
}

void RangeDependenciesArchive::Swap(RangeDependenciesArchive* other) {
  if (other != this) {
    std::swap(r_tree_, other->r_tree_);
    back_dependency_.Swap(&other->back_dependency_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RangeDependenciesArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RangeDependenciesArchive_descriptor_;
  metadata.reflection = RangeDependenciesArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SpanningDependenciesArchive_RangeContext_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpanningDependenciesArchive_RangeContext_descriptor_;
}
bool SpanningDependenciesArchive_RangeContext_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive::DEFAULT;
const SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive::INCLUDE_HEADERS;
const SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive::RangeContext_MIN;
const SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive::RangeContext_MAX;
const int SpanningDependenciesArchive::RangeContext_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SpanningDependenciesArchive_ReferringColumnToLocalCells::kColumnFieldNumber;
const int SpanningDependenciesArchive_ReferringColumnToLocalCells::kRangeContextFieldNumber;
const int SpanningDependenciesArchive_ReferringColumnToLocalCells::kCellCoordinateFieldNumber;
#endif  // !_MSC_VER

SpanningDependenciesArchive_ReferringColumnToLocalCells::SpanningDependenciesArchive_ReferringColumnToLocalCells()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpanningDependenciesArchive_ReferringColumnToLocalCells::InitAsDefaultInstance() {
}

SpanningDependenciesArchive_ReferringColumnToLocalCells::SpanningDependenciesArchive_ReferringColumnToLocalCells(const SpanningDependenciesArchive_ReferringColumnToLocalCells& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpanningDependenciesArchive_ReferringColumnToLocalCells::SharedCtor() {
  _cached_size_ = 0;
  column_ = 0u;
  range_context_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpanningDependenciesArchive_ReferringColumnToLocalCells::~SpanningDependenciesArchive_ReferringColumnToLocalCells() {
  SharedDtor();
}

void SpanningDependenciesArchive_ReferringColumnToLocalCells::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpanningDependenciesArchive_ReferringColumnToLocalCells::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpanningDependenciesArchive_ReferringColumnToLocalCells::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpanningDependenciesArchive_ReferringColumnToLocalCells_descriptor_;
}

const SpanningDependenciesArchive_ReferringColumnToLocalCells& SpanningDependenciesArchive_ReferringColumnToLocalCells::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

SpanningDependenciesArchive_ReferringColumnToLocalCells* SpanningDependenciesArchive_ReferringColumnToLocalCells::default_instance_ = NULL;

SpanningDependenciesArchive_ReferringColumnToLocalCells* SpanningDependenciesArchive_ReferringColumnToLocalCells::New() const {
  return new SpanningDependenciesArchive_ReferringColumnToLocalCells;
}

void SpanningDependenciesArchive_ReferringColumnToLocalCells::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    column_ = 0u;
    range_context_ = 0;
  }
  cell_coordinate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpanningDependenciesArchive_ReferringColumnToLocalCells::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 column = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &column_)));
          set_has_column();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_range_context;
        break;
      }

      // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_range_context:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSCE::SpanningDependenciesArchive_RangeContext_IsValid(value)) {
            set_range_context(static_cast< ::TSCE::SpanningDependenciesArchive_RangeContext >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cell_coordinate;
        break;
      }

      // repeated .TSCE.CellCoordinateArchive cell_coordinate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_coordinate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cell_coordinate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cell_coordinate;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpanningDependenciesArchive_ReferringColumnToLocalCells::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 column = 1;
  if (has_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->column(), output);
  }

  // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
  if (has_range_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->range_context(), output);
  }

  // repeated .TSCE.CellCoordinateArchive cell_coordinate = 3;
  for (int i = 0; i < this->cell_coordinate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cell_coordinate(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpanningDependenciesArchive_ReferringColumnToLocalCells::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 column = 1;
  if (has_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->column(), target);
  }

  // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
  if (has_range_context()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->range_context(), target);
  }

  // repeated .TSCE.CellCoordinateArchive cell_coordinate = 3;
  for (int i = 0; i < this->cell_coordinate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cell_coordinate(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpanningDependenciesArchive_ReferringColumnToLocalCells::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 column = 1;
    if (has_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->column());
    }

    // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
    if (has_range_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->range_context());
    }

  }
  // repeated .TSCE.CellCoordinateArchive cell_coordinate = 3;
  total_size += 1 * this->cell_coordinate_size();
  for (int i = 0; i < this->cell_coordinate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cell_coordinate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpanningDependenciesArchive_ReferringColumnToLocalCells::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpanningDependenciesArchive_ReferringColumnToLocalCells* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpanningDependenciesArchive_ReferringColumnToLocalCells*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpanningDependenciesArchive_ReferringColumnToLocalCells::MergeFrom(const SpanningDependenciesArchive_ReferringColumnToLocalCells& from) {
  GOOGLE_CHECK_NE(&from, this);
  cell_coordinate_.MergeFrom(from.cell_coordinate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_column()) {
      set_column(from.column());
    }
    if (from.has_range_context()) {
      set_range_context(from.range_context());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpanningDependenciesArchive_ReferringColumnToLocalCells::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpanningDependenciesArchive_ReferringColumnToLocalCells::CopyFrom(const SpanningDependenciesArchive_ReferringColumnToLocalCells& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanningDependenciesArchive_ReferringColumnToLocalCells::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SpanningDependenciesArchive_ReferringColumnToLocalCells::Swap(SpanningDependenciesArchive_ReferringColumnToLocalCells* other) {
  if (other != this) {
    std::swap(column_, other->column_);
    std::swap(range_context_, other->range_context_);
    cell_coordinate_.Swap(&other->cell_coordinate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpanningDependenciesArchive_ReferringColumnToLocalCells::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpanningDependenciesArchive_ReferringColumnToLocalCells_descriptor_;
  metadata.reflection = SpanningDependenciesArchive_ReferringColumnToLocalCells_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SpanningDependenciesArchive_ReferringColumnToRemoteCells::kColumnFieldNumber;
const int SpanningDependenciesArchive_ReferringColumnToRemoteCells::kRangeContextFieldNumber;
const int SpanningDependenciesArchive_ReferringColumnToRemoteCells::kInternalCellReferenceFieldNumber;
#endif  // !_MSC_VER

SpanningDependenciesArchive_ReferringColumnToRemoteCells::SpanningDependenciesArchive_ReferringColumnToRemoteCells()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpanningDependenciesArchive_ReferringColumnToRemoteCells::InitAsDefaultInstance() {
}

SpanningDependenciesArchive_ReferringColumnToRemoteCells::SpanningDependenciesArchive_ReferringColumnToRemoteCells(const SpanningDependenciesArchive_ReferringColumnToRemoteCells& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpanningDependenciesArchive_ReferringColumnToRemoteCells::SharedCtor() {
  _cached_size_ = 0;
  column_ = 0u;
  range_context_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpanningDependenciesArchive_ReferringColumnToRemoteCells::~SpanningDependenciesArchive_ReferringColumnToRemoteCells() {
  SharedDtor();
}

void SpanningDependenciesArchive_ReferringColumnToRemoteCells::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpanningDependenciesArchive_ReferringColumnToRemoteCells::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpanningDependenciesArchive_ReferringColumnToRemoteCells::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpanningDependenciesArchive_ReferringColumnToRemoteCells_descriptor_;
}

const SpanningDependenciesArchive_ReferringColumnToRemoteCells& SpanningDependenciesArchive_ReferringColumnToRemoteCells::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

SpanningDependenciesArchive_ReferringColumnToRemoteCells* SpanningDependenciesArchive_ReferringColumnToRemoteCells::default_instance_ = NULL;

SpanningDependenciesArchive_ReferringColumnToRemoteCells* SpanningDependenciesArchive_ReferringColumnToRemoteCells::New() const {
  return new SpanningDependenciesArchive_ReferringColumnToRemoteCells;
}

void SpanningDependenciesArchive_ReferringColumnToRemoteCells::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    column_ = 0u;
    range_context_ = 0;
  }
  internal_cell_reference_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpanningDependenciesArchive_ReferringColumnToRemoteCells::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 column = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &column_)));
          set_has_column();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_range_context;
        break;
      }

      // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_range_context:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSCE::SpanningDependenciesArchive_RangeContext_IsValid(value)) {
            set_range_context(static_cast< ::TSCE::SpanningDependenciesArchive_RangeContext >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_internal_cell_reference;
        break;
      }

      // repeated .TSCE.InternalCellReferenceArchive internal_cell_reference = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_internal_cell_reference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_internal_cell_reference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_internal_cell_reference;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpanningDependenciesArchive_ReferringColumnToRemoteCells::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 column = 1;
  if (has_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->column(), output);
  }

  // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
  if (has_range_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->range_context(), output);
  }

  // repeated .TSCE.InternalCellReferenceArchive internal_cell_reference = 3;
  for (int i = 0; i < this->internal_cell_reference_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->internal_cell_reference(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpanningDependenciesArchive_ReferringColumnToRemoteCells::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 column = 1;
  if (has_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->column(), target);
  }

  // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
  if (has_range_context()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->range_context(), target);
  }

  // repeated .TSCE.InternalCellReferenceArchive internal_cell_reference = 3;
  for (int i = 0; i < this->internal_cell_reference_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->internal_cell_reference(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpanningDependenciesArchive_ReferringColumnToRemoteCells::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 column = 1;
    if (has_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->column());
    }

    // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
    if (has_range_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->range_context());
    }

  }
  // repeated .TSCE.InternalCellReferenceArchive internal_cell_reference = 3;
  total_size += 1 * this->internal_cell_reference_size();
  for (int i = 0; i < this->internal_cell_reference_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->internal_cell_reference(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpanningDependenciesArchive_ReferringColumnToRemoteCells::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpanningDependenciesArchive_ReferringColumnToRemoteCells* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpanningDependenciesArchive_ReferringColumnToRemoteCells*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpanningDependenciesArchive_ReferringColumnToRemoteCells::MergeFrom(const SpanningDependenciesArchive_ReferringColumnToRemoteCells& from) {
  GOOGLE_CHECK_NE(&from, this);
  internal_cell_reference_.MergeFrom(from.internal_cell_reference_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_column()) {
      set_column(from.column());
    }
    if (from.has_range_context()) {
      set_range_context(from.range_context());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpanningDependenciesArchive_ReferringColumnToRemoteCells::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpanningDependenciesArchive_ReferringColumnToRemoteCells::CopyFrom(const SpanningDependenciesArchive_ReferringColumnToRemoteCells& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanningDependenciesArchive_ReferringColumnToRemoteCells::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < internal_cell_reference_size(); i++) {
    if (!this->internal_cell_reference(i).IsInitialized()) return false;
  }
  return true;
}

void SpanningDependenciesArchive_ReferringColumnToRemoteCells::Swap(SpanningDependenciesArchive_ReferringColumnToRemoteCells* other) {
  if (other != this) {
    std::swap(column_, other->column_);
    std::swap(range_context_, other->range_context_);
    internal_cell_reference_.Swap(&other->internal_cell_reference_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpanningDependenciesArchive_ReferringColumnToRemoteCells::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpanningDependenciesArchive_ReferringColumnToRemoteCells_descriptor_;
  metadata.reflection = SpanningDependenciesArchive_ReferringColumnToRemoteCells_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SpanningDependenciesArchive::kColumnFieldNumber;
const int SpanningDependenciesArchive::kRangeContextFieldNumber;
const int SpanningDependenciesArchive::kCellFieldNumber;
const int SpanningDependenciesArchive::kTotalRangeForDeletedTableFieldNumber;
const int SpanningDependenciesArchive::kBodyRangeForDeletedTableFieldNumber;
const int SpanningDependenciesArchive::kReferringColumnToLocalCellsFieldNumber;
const int SpanningDependenciesArchive::kReferringColumnToRemoteCellsFieldNumber;
#endif  // !_MSC_VER

SpanningDependenciesArchive::SpanningDependenciesArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpanningDependenciesArchive::InitAsDefaultInstance() {
  total_range_for_deleted_table_ = const_cast< ::TSCE::RangeCoordinateArchive*>(&::TSCE::RangeCoordinateArchive::default_instance());
  body_range_for_deleted_table_ = const_cast< ::TSCE::RangeCoordinateArchive*>(&::TSCE::RangeCoordinateArchive::default_instance());
}

SpanningDependenciesArchive::SpanningDependenciesArchive(const SpanningDependenciesArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpanningDependenciesArchive::SharedCtor() {
  _cached_size_ = 0;
  total_range_for_deleted_table_ = NULL;
  body_range_for_deleted_table_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpanningDependenciesArchive::~SpanningDependenciesArchive() {
  SharedDtor();
}

void SpanningDependenciesArchive::SharedDtor() {
  if (this != default_instance_) {
    delete total_range_for_deleted_table_;
    delete body_range_for_deleted_table_;
  }
}

void SpanningDependenciesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpanningDependenciesArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpanningDependenciesArchive_descriptor_;
}

const SpanningDependenciesArchive& SpanningDependenciesArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

SpanningDependenciesArchive* SpanningDependenciesArchive::default_instance_ = NULL;

SpanningDependenciesArchive* SpanningDependenciesArchive::New() const {
  return new SpanningDependenciesArchive;
}

void SpanningDependenciesArchive::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (has_total_range_for_deleted_table()) {
      if (total_range_for_deleted_table_ != NULL) total_range_for_deleted_table_->::TSCE::RangeCoordinateArchive::Clear();
    }
    if (has_body_range_for_deleted_table()) {
      if (body_range_for_deleted_table_ != NULL) body_range_for_deleted_table_->::TSCE::RangeCoordinateArchive::Clear();
    }
  }
  column_.Clear();
  range_context_.Clear();
  cell_.Clear();
  referring_column_to_local_cells_.Clear();
  referring_column_to_remote_cells_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpanningDependenciesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 column = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_column())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_column())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_column;
        if (input->ExpectTag(16)) goto parse_range_context;
        break;
      }

      // repeated .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_range_context:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSCE::SpanningDependenciesArchive_RangeContext_IsValid(value)) {
            add_range_context(static_cast< ::TSCE::SpanningDependenciesArchive_RangeContext >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::TSCE::SpanningDependenciesArchive_RangeContext_IsValid,
                 this->mutable_range_context())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_range_context;
        if (input->ExpectTag(26)) goto parse_cell;
        break;
      }

      // repeated .TSCE.CellReferenceArchive cell = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cell;
        if (input->ExpectTag(34)) goto parse_total_range_for_deleted_table;
        break;
      }

      // optional .TSCE.RangeCoordinateArchive total_range_for_deleted_table = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_total_range_for_deleted_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_total_range_for_deleted_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_body_range_for_deleted_table;
        break;
      }

      // optional .TSCE.RangeCoordinateArchive body_range_for_deleted_table = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body_range_for_deleted_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body_range_for_deleted_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_referring_column_to_local_cells;
        break;
      }

      // repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells referring_column_to_local_cells = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_referring_column_to_local_cells:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_referring_column_to_local_cells()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_referring_column_to_local_cells;
        if (input->ExpectTag(58)) goto parse_referring_column_to_remote_cells;
        break;
      }

      // repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells referring_column_to_remote_cells = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_referring_column_to_remote_cells:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_referring_column_to_remote_cells()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_referring_column_to_remote_cells;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpanningDependenciesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 column = 1;
  for (int i = 0; i < this->column_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->column(i), output);
  }

  // repeated .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
  for (int i = 0; i < this->range_context_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->range_context(i), output);
  }

  // repeated .TSCE.CellReferenceArchive cell = 3;
  for (int i = 0; i < this->cell_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cell(i), output);
  }

  // optional .TSCE.RangeCoordinateArchive total_range_for_deleted_table = 4;
  if (has_total_range_for_deleted_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->total_range_for_deleted_table(), output);
  }

  // optional .TSCE.RangeCoordinateArchive body_range_for_deleted_table = 5;
  if (has_body_range_for_deleted_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->body_range_for_deleted_table(), output);
  }

  // repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells referring_column_to_local_cells = 6;
  for (int i = 0; i < this->referring_column_to_local_cells_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->referring_column_to_local_cells(i), output);
  }

  // repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells referring_column_to_remote_cells = 7;
  for (int i = 0; i < this->referring_column_to_remote_cells_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->referring_column_to_remote_cells(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpanningDependenciesArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 column = 1;
  for (int i = 0; i < this->column_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->column(i), target);
  }

  // repeated .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
  for (int i = 0; i < this->range_context_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->range_context(i), target);
  }

  // repeated .TSCE.CellReferenceArchive cell = 3;
  for (int i = 0; i < this->cell_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cell(i), target);
  }

  // optional .TSCE.RangeCoordinateArchive total_range_for_deleted_table = 4;
  if (has_total_range_for_deleted_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->total_range_for_deleted_table(), target);
  }

  // optional .TSCE.RangeCoordinateArchive body_range_for_deleted_table = 5;
  if (has_body_range_for_deleted_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->body_range_for_deleted_table(), target);
  }

  // repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells referring_column_to_local_cells = 6;
  for (int i = 0; i < this->referring_column_to_local_cells_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->referring_column_to_local_cells(i), target);
  }

  // repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells referring_column_to_remote_cells = 7;
  for (int i = 0; i < this->referring_column_to_remote_cells_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->referring_column_to_remote_cells(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpanningDependenciesArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional .TSCE.RangeCoordinateArchive total_range_for_deleted_table = 4;
    if (has_total_range_for_deleted_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->total_range_for_deleted_table());
    }

    // optional .TSCE.RangeCoordinateArchive body_range_for_deleted_table = 5;
    if (has_body_range_for_deleted_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body_range_for_deleted_table());
    }

  }
  // repeated uint32 column = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->column_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->column(i));
    }
    total_size += 1 * this->column_size() + data_size;
  }

  // repeated .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->range_context_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->range_context(i));
    }
    total_size += 1 * this->range_context_size() + data_size;
  }

  // repeated .TSCE.CellReferenceArchive cell = 3;
  total_size += 1 * this->cell_size();
  for (int i = 0; i < this->cell_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cell(i));
  }

  // repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells referring_column_to_local_cells = 6;
  total_size += 1 * this->referring_column_to_local_cells_size();
  for (int i = 0; i < this->referring_column_to_local_cells_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->referring_column_to_local_cells(i));
  }

  // repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells referring_column_to_remote_cells = 7;
  total_size += 1 * this->referring_column_to_remote_cells_size();
  for (int i = 0; i < this->referring_column_to_remote_cells_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->referring_column_to_remote_cells(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpanningDependenciesArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpanningDependenciesArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpanningDependenciesArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpanningDependenciesArchive::MergeFrom(const SpanningDependenciesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  column_.MergeFrom(from.column_);
  range_context_.MergeFrom(from.range_context_);
  cell_.MergeFrom(from.cell_);
  referring_column_to_local_cells_.MergeFrom(from.referring_column_to_local_cells_);
  referring_column_to_remote_cells_.MergeFrom(from.referring_column_to_remote_cells_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_total_range_for_deleted_table()) {
      mutable_total_range_for_deleted_table()->::TSCE::RangeCoordinateArchive::MergeFrom(from.total_range_for_deleted_table());
    }
    if (from.has_body_range_for_deleted_table()) {
      mutable_body_range_for_deleted_table()->::TSCE::RangeCoordinateArchive::MergeFrom(from.body_range_for_deleted_table());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpanningDependenciesArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpanningDependenciesArchive::CopyFrom(const SpanningDependenciesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanningDependenciesArchive::IsInitialized() const {

  for (int i = 0; i < cell_size(); i++) {
    if (!this->cell(i).IsInitialized()) return false;
  }
  if (has_total_range_for_deleted_table()) {
    if (!this->total_range_for_deleted_table().IsInitialized()) return false;
  }
  if (has_body_range_for_deleted_table()) {
    if (!this->body_range_for_deleted_table().IsInitialized()) return false;
  }
  for (int i = 0; i < referring_column_to_local_cells_size(); i++) {
    if (!this->referring_column_to_local_cells(i).IsInitialized()) return false;
  }
  for (int i = 0; i < referring_column_to_remote_cells_size(); i++) {
    if (!this->referring_column_to_remote_cells(i).IsInitialized()) return false;
  }
  return true;
}

void SpanningDependenciesArchive::Swap(SpanningDependenciesArchive* other) {
  if (other != this) {
    column_.Swap(&other->column_);
    range_context_.Swap(&other->range_context_);
    cell_.Swap(&other->cell_);
    std::swap(total_range_for_deleted_table_, other->total_range_for_deleted_table_);
    std::swap(body_range_for_deleted_table_, other->body_range_for_deleted_table_);
    referring_column_to_local_cells_.Swap(&other->referring_column_to_local_cells_);
    referring_column_to_remote_cells_.Swap(&other->referring_column_to_remote_cells_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpanningDependenciesArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpanningDependenciesArchive_descriptor_;
  metadata.reflection = SpanningDependenciesArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WholeOwnerDependenciesArchive::kDependentCellFieldNumber;
#endif  // !_MSC_VER

WholeOwnerDependenciesArchive::WholeOwnerDependenciesArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WholeOwnerDependenciesArchive::InitAsDefaultInstance() {
}

WholeOwnerDependenciesArchive::WholeOwnerDependenciesArchive(const WholeOwnerDependenciesArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WholeOwnerDependenciesArchive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WholeOwnerDependenciesArchive::~WholeOwnerDependenciesArchive() {
  SharedDtor();
}

void WholeOwnerDependenciesArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WholeOwnerDependenciesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WholeOwnerDependenciesArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WholeOwnerDependenciesArchive_descriptor_;
}

const WholeOwnerDependenciesArchive& WholeOwnerDependenciesArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

WholeOwnerDependenciesArchive* WholeOwnerDependenciesArchive::default_instance_ = NULL;

WholeOwnerDependenciesArchive* WholeOwnerDependenciesArchive::New() const {
  return new WholeOwnerDependenciesArchive;
}

void WholeOwnerDependenciesArchive::Clear() {
  dependent_cell_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WholeOwnerDependenciesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSCE.InternalCellReferenceArchive dependent_cell = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dependent_cell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dependent_cell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dependent_cell;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WholeOwnerDependenciesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSCE.InternalCellReferenceArchive dependent_cell = 1;
  for (int i = 0; i < this->dependent_cell_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dependent_cell(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WholeOwnerDependenciesArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSCE.InternalCellReferenceArchive dependent_cell = 1;
  for (int i = 0; i < this->dependent_cell_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dependent_cell(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WholeOwnerDependenciesArchive::ByteSize() const {
  int total_size = 0;

  // repeated .TSCE.InternalCellReferenceArchive dependent_cell = 1;
  total_size += 1 * this->dependent_cell_size();
  for (int i = 0; i < this->dependent_cell_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dependent_cell(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WholeOwnerDependenciesArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WholeOwnerDependenciesArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WholeOwnerDependenciesArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WholeOwnerDependenciesArchive::MergeFrom(const WholeOwnerDependenciesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  dependent_cell_.MergeFrom(from.dependent_cell_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WholeOwnerDependenciesArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WholeOwnerDependenciesArchive::CopyFrom(const WholeOwnerDependenciesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WholeOwnerDependenciesArchive::IsInitialized() const {

  for (int i = 0; i < dependent_cell_size(); i++) {
    if (!this->dependent_cell(i).IsInitialized()) return false;
  }
  return true;
}

void WholeOwnerDependenciesArchive::Swap(WholeOwnerDependenciesArchive* other) {
  if (other != this) {
    dependent_cell_.Swap(&other->dependent_cell_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WholeOwnerDependenciesArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WholeOwnerDependenciesArchive_descriptor_;
  metadata.reflection = WholeOwnerDependenciesArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FormulaOwnerInfoArchive::kFormulaOwnerIdFieldNumber;
const int FormulaOwnerInfoArchive::kCellDependenciesFieldNumber;
const int FormulaOwnerInfoArchive::kRangeDependenciesFieldNumber;
const int FormulaOwnerInfoArchive::kVolatileDependenciesFieldNumber;
const int FormulaOwnerInfoArchive::kSpanningColumnDependenciesFieldNumber;
const int FormulaOwnerInfoArchive::kSpanningRowDependenciesFieldNumber;
const int FormulaOwnerInfoArchive::kWholeOwnerDependenciesFieldNumber;
const int FormulaOwnerInfoArchive::kFormulaOwnerFieldNumber;
#endif  // !_MSC_VER

FormulaOwnerInfoArchive::FormulaOwnerInfoArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FormulaOwnerInfoArchive::InitAsDefaultInstance() {
  formula_owner_id_ = const_cast< ::TSCE::CFUUIDArchive*>(&::TSCE::CFUUIDArchive::default_instance());
  cell_dependencies_ = const_cast< ::TSCE::CellDependenciesArchive*>(&::TSCE::CellDependenciesArchive::default_instance());
  range_dependencies_ = const_cast< ::TSCE::RangeDependenciesArchive*>(&::TSCE::RangeDependenciesArchive::default_instance());
  volatile_dependencies_ = const_cast< ::TSCE::VolatileDependenciesArchive*>(&::TSCE::VolatileDependenciesArchive::default_instance());
  spanning_column_dependencies_ = const_cast< ::TSCE::SpanningDependenciesArchive*>(&::TSCE::SpanningDependenciesArchive::default_instance());
  spanning_row_dependencies_ = const_cast< ::TSCE::SpanningDependenciesArchive*>(&::TSCE::SpanningDependenciesArchive::default_instance());
  whole_owner_dependencies_ = const_cast< ::TSCE::WholeOwnerDependenciesArchive*>(&::TSCE::WholeOwnerDependenciesArchive::default_instance());
  formula_owner_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

FormulaOwnerInfoArchive::FormulaOwnerInfoArchive(const FormulaOwnerInfoArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FormulaOwnerInfoArchive::SharedCtor() {
  _cached_size_ = 0;
  formula_owner_id_ = NULL;
  cell_dependencies_ = NULL;
  range_dependencies_ = NULL;
  volatile_dependencies_ = NULL;
  spanning_column_dependencies_ = NULL;
  spanning_row_dependencies_ = NULL;
  whole_owner_dependencies_ = NULL;
  formula_owner_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FormulaOwnerInfoArchive::~FormulaOwnerInfoArchive() {
  SharedDtor();
}

void FormulaOwnerInfoArchive::SharedDtor() {
  if (this != default_instance_) {
    delete formula_owner_id_;
    delete cell_dependencies_;
    delete range_dependencies_;
    delete volatile_dependencies_;
    delete spanning_column_dependencies_;
    delete spanning_row_dependencies_;
    delete whole_owner_dependencies_;
    delete formula_owner_;
  }
}

void FormulaOwnerInfoArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FormulaOwnerInfoArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FormulaOwnerInfoArchive_descriptor_;
}

const FormulaOwnerInfoArchive& FormulaOwnerInfoArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

FormulaOwnerInfoArchive* FormulaOwnerInfoArchive::default_instance_ = NULL;

FormulaOwnerInfoArchive* FormulaOwnerInfoArchive::New() const {
  return new FormulaOwnerInfoArchive;
}

void FormulaOwnerInfoArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_formula_owner_id()) {
      if (formula_owner_id_ != NULL) formula_owner_id_->::TSCE::CFUUIDArchive::Clear();
    }
    if (has_cell_dependencies()) {
      if (cell_dependencies_ != NULL) cell_dependencies_->::TSCE::CellDependenciesArchive::Clear();
    }
    if (has_range_dependencies()) {
      if (range_dependencies_ != NULL) range_dependencies_->::TSCE::RangeDependenciesArchive::Clear();
    }
    if (has_volatile_dependencies()) {
      if (volatile_dependencies_ != NULL) volatile_dependencies_->::TSCE::VolatileDependenciesArchive::Clear();
    }
    if (has_spanning_column_dependencies()) {
      if (spanning_column_dependencies_ != NULL) spanning_column_dependencies_->::TSCE::SpanningDependenciesArchive::Clear();
    }
    if (has_spanning_row_dependencies()) {
      if (spanning_row_dependencies_ != NULL) spanning_row_dependencies_->::TSCE::SpanningDependenciesArchive::Clear();
    }
    if (has_whole_owner_dependencies()) {
      if (whole_owner_dependencies_ != NULL) whole_owner_dependencies_->::TSCE::WholeOwnerDependenciesArchive::Clear();
    }
    if (has_formula_owner()) {
      if (formula_owner_ != NULL) formula_owner_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FormulaOwnerInfoArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCE.CFUUIDArchive formula_owner_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_formula_owner_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cell_dependencies;
        break;
      }

      // optional .TSCE.CellDependenciesArchive cell_dependencies = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_dependencies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell_dependencies()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_range_dependencies;
        break;
      }

      // optional .TSCE.RangeDependenciesArchive range_dependencies = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_range_dependencies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range_dependencies()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_volatile_dependencies;
        break;
      }

      // optional .TSCE.VolatileDependenciesArchive volatile_dependencies = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_volatile_dependencies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_volatile_dependencies()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_spanning_column_dependencies;
        break;
      }

      // optional .TSCE.SpanningDependenciesArchive spanning_column_dependencies = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spanning_column_dependencies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spanning_column_dependencies()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_spanning_row_dependencies;
        break;
      }

      // optional .TSCE.SpanningDependenciesArchive spanning_row_dependencies = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spanning_row_dependencies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spanning_row_dependencies()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_formula_owner;
        break;
      }

      // optional .TSP.Reference formula_owner = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formula_owner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_formula_owner()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_whole_owner_dependencies;
        break;
      }

      // optional .TSCE.WholeOwnerDependenciesArchive whole_owner_dependencies = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_whole_owner_dependencies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_whole_owner_dependencies()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FormulaOwnerInfoArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCE.CFUUIDArchive formula_owner_id = 1;
  if (has_formula_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->formula_owner_id(), output);
  }

  // optional .TSCE.CellDependenciesArchive cell_dependencies = 2;
  if (has_cell_dependencies()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cell_dependencies(), output);
  }

  // optional .TSCE.RangeDependenciesArchive range_dependencies = 3;
  if (has_range_dependencies()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->range_dependencies(), output);
  }

  // optional .TSCE.VolatileDependenciesArchive volatile_dependencies = 4;
  if (has_volatile_dependencies()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->volatile_dependencies(), output);
  }

  // optional .TSCE.SpanningDependenciesArchive spanning_column_dependencies = 5;
  if (has_spanning_column_dependencies()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->spanning_column_dependencies(), output);
  }

  // optional .TSCE.SpanningDependenciesArchive spanning_row_dependencies = 6;
  if (has_spanning_row_dependencies()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->spanning_row_dependencies(), output);
  }

  // optional .TSP.Reference formula_owner = 7;
  if (has_formula_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->formula_owner(), output);
  }

  // optional .TSCE.WholeOwnerDependenciesArchive whole_owner_dependencies = 8;
  if (has_whole_owner_dependencies()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->whole_owner_dependencies(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FormulaOwnerInfoArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCE.CFUUIDArchive formula_owner_id = 1;
  if (has_formula_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->formula_owner_id(), target);
  }

  // optional .TSCE.CellDependenciesArchive cell_dependencies = 2;
  if (has_cell_dependencies()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cell_dependencies(), target);
  }

  // optional .TSCE.RangeDependenciesArchive range_dependencies = 3;
  if (has_range_dependencies()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->range_dependencies(), target);
  }

  // optional .TSCE.VolatileDependenciesArchive volatile_dependencies = 4;
  if (has_volatile_dependencies()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->volatile_dependencies(), target);
  }

  // optional .TSCE.SpanningDependenciesArchive spanning_column_dependencies = 5;
  if (has_spanning_column_dependencies()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->spanning_column_dependencies(), target);
  }

  // optional .TSCE.SpanningDependenciesArchive spanning_row_dependencies = 6;
  if (has_spanning_row_dependencies()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->spanning_row_dependencies(), target);
  }

  // optional .TSP.Reference formula_owner = 7;
  if (has_formula_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->formula_owner(), target);
  }

  // optional .TSCE.WholeOwnerDependenciesArchive whole_owner_dependencies = 8;
  if (has_whole_owner_dependencies()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->whole_owner_dependencies(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FormulaOwnerInfoArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCE.CFUUIDArchive formula_owner_id = 1;
    if (has_formula_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formula_owner_id());
    }

    // optional .TSCE.CellDependenciesArchive cell_dependencies = 2;
    if (has_cell_dependencies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cell_dependencies());
    }

    // optional .TSCE.RangeDependenciesArchive range_dependencies = 3;
    if (has_range_dependencies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->range_dependencies());
    }

    // optional .TSCE.VolatileDependenciesArchive volatile_dependencies = 4;
    if (has_volatile_dependencies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->volatile_dependencies());
    }

    // optional .TSCE.SpanningDependenciesArchive spanning_column_dependencies = 5;
    if (has_spanning_column_dependencies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spanning_column_dependencies());
    }

    // optional .TSCE.SpanningDependenciesArchive spanning_row_dependencies = 6;
    if (has_spanning_row_dependencies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spanning_row_dependencies());
    }

    // optional .TSCE.WholeOwnerDependenciesArchive whole_owner_dependencies = 8;
    if (has_whole_owner_dependencies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->whole_owner_dependencies());
    }

    // optional .TSP.Reference formula_owner = 7;
    if (has_formula_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formula_owner());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FormulaOwnerInfoArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FormulaOwnerInfoArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FormulaOwnerInfoArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FormulaOwnerInfoArchive::MergeFrom(const FormulaOwnerInfoArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_formula_owner_id()) {
      mutable_formula_owner_id()->::TSCE::CFUUIDArchive::MergeFrom(from.formula_owner_id());
    }
    if (from.has_cell_dependencies()) {
      mutable_cell_dependencies()->::TSCE::CellDependenciesArchive::MergeFrom(from.cell_dependencies());
    }
    if (from.has_range_dependencies()) {
      mutable_range_dependencies()->::TSCE::RangeDependenciesArchive::MergeFrom(from.range_dependencies());
    }
    if (from.has_volatile_dependencies()) {
      mutable_volatile_dependencies()->::TSCE::VolatileDependenciesArchive::MergeFrom(from.volatile_dependencies());
    }
    if (from.has_spanning_column_dependencies()) {
      mutable_spanning_column_dependencies()->::TSCE::SpanningDependenciesArchive::MergeFrom(from.spanning_column_dependencies());
    }
    if (from.has_spanning_row_dependencies()) {
      mutable_spanning_row_dependencies()->::TSCE::SpanningDependenciesArchive::MergeFrom(from.spanning_row_dependencies());
    }
    if (from.has_whole_owner_dependencies()) {
      mutable_whole_owner_dependencies()->::TSCE::WholeOwnerDependenciesArchive::MergeFrom(from.whole_owner_dependencies());
    }
    if (from.has_formula_owner()) {
      mutable_formula_owner()->::TSP::Reference::MergeFrom(from.formula_owner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FormulaOwnerInfoArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormulaOwnerInfoArchive::CopyFrom(const FormulaOwnerInfoArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaOwnerInfoArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_cell_dependencies()) {
    if (!this->cell_dependencies().IsInitialized()) return false;
  }
  if (has_range_dependencies()) {
    if (!this->range_dependencies().IsInitialized()) return false;
  }
  if (has_volatile_dependencies()) {
    if (!this->volatile_dependencies().IsInitialized()) return false;
  }
  if (has_spanning_column_dependencies()) {
    if (!this->spanning_column_dependencies().IsInitialized()) return false;
  }
  if (has_spanning_row_dependencies()) {
    if (!this->spanning_row_dependencies().IsInitialized()) return false;
  }
  if (has_whole_owner_dependencies()) {
    if (!this->whole_owner_dependencies().IsInitialized()) return false;
  }
  if (has_formula_owner()) {
    if (!this->formula_owner().IsInitialized()) return false;
  }
  return true;
}

void FormulaOwnerInfoArchive::Swap(FormulaOwnerInfoArchive* other) {
  if (other != this) {
    std::swap(formula_owner_id_, other->formula_owner_id_);
    std::swap(cell_dependencies_, other->cell_dependencies_);
    std::swap(range_dependencies_, other->range_dependencies_);
    std::swap(volatile_dependencies_, other->volatile_dependencies_);
    std::swap(spanning_column_dependencies_, other->spanning_column_dependencies_);
    std::swap(spanning_row_dependencies_, other->spanning_row_dependencies_);
    std::swap(whole_owner_dependencies_, other->whole_owner_dependencies_);
    std::swap(formula_owner_, other->formula_owner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FormulaOwnerInfoArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FormulaOwnerInfoArchive_descriptor_;
  metadata.reflection = FormulaOwnerInfoArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OwnerIDMapArchive_OwnerIDMapArchiveEntry::kInternalOwnerIdFieldNumber;
const int OwnerIDMapArchive_OwnerIDMapArchiveEntry::kOwnerIdFieldNumber;
#endif  // !_MSC_VER

OwnerIDMapArchive_OwnerIDMapArchiveEntry::OwnerIDMapArchive_OwnerIDMapArchiveEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OwnerIDMapArchive_OwnerIDMapArchiveEntry::InitAsDefaultInstance() {
  owner_id_ = const_cast< ::TSCE::CFUUIDArchive*>(&::TSCE::CFUUIDArchive::default_instance());
}

OwnerIDMapArchive_OwnerIDMapArchiveEntry::OwnerIDMapArchive_OwnerIDMapArchiveEntry(const OwnerIDMapArchive_OwnerIDMapArchiveEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OwnerIDMapArchive_OwnerIDMapArchiveEntry::SharedCtor() {
  _cached_size_ = 0;
  internal_owner_id_ = 0u;
  owner_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OwnerIDMapArchive_OwnerIDMapArchiveEntry::~OwnerIDMapArchive_OwnerIDMapArchiveEntry() {
  SharedDtor();
}

void OwnerIDMapArchive_OwnerIDMapArchiveEntry::SharedDtor() {
  if (this != default_instance_) {
    delete owner_id_;
  }
}

void OwnerIDMapArchive_OwnerIDMapArchiveEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OwnerIDMapArchive_OwnerIDMapArchiveEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OwnerIDMapArchive_OwnerIDMapArchiveEntry_descriptor_;
}

const OwnerIDMapArchive_OwnerIDMapArchiveEntry& OwnerIDMapArchive_OwnerIDMapArchiveEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

OwnerIDMapArchive_OwnerIDMapArchiveEntry* OwnerIDMapArchive_OwnerIDMapArchiveEntry::default_instance_ = NULL;

OwnerIDMapArchive_OwnerIDMapArchiveEntry* OwnerIDMapArchive_OwnerIDMapArchiveEntry::New() const {
  return new OwnerIDMapArchive_OwnerIDMapArchiveEntry;
}

void OwnerIDMapArchive_OwnerIDMapArchiveEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    internal_owner_id_ = 0u;
    if (has_owner_id()) {
      if (owner_id_ != NULL) owner_id_->::TSCE::CFUUIDArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OwnerIDMapArchive_OwnerIDMapArchiveEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 internal_owner_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &internal_owner_id_)));
          set_has_internal_owner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_owner_id;
        break;
      }

      // required .TSCE.CFUUIDArchive owner_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OwnerIDMapArchive_OwnerIDMapArchiveEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 internal_owner_id = 1;
  if (has_internal_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->internal_owner_id(), output);
  }

  // required .TSCE.CFUUIDArchive owner_id = 2;
  if (has_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->owner_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OwnerIDMapArchive_OwnerIDMapArchiveEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 internal_owner_id = 1;
  if (has_internal_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->internal_owner_id(), target);
  }

  // required .TSCE.CFUUIDArchive owner_id = 2;
  if (has_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->owner_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OwnerIDMapArchive_OwnerIDMapArchiveEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 internal_owner_id = 1;
    if (has_internal_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->internal_owner_id());
    }

    // required .TSCE.CFUUIDArchive owner_id = 2;
    if (has_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->owner_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OwnerIDMapArchive_OwnerIDMapArchiveEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OwnerIDMapArchive_OwnerIDMapArchiveEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OwnerIDMapArchive_OwnerIDMapArchiveEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OwnerIDMapArchive_OwnerIDMapArchiveEntry::MergeFrom(const OwnerIDMapArchive_OwnerIDMapArchiveEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_internal_owner_id()) {
      set_internal_owner_id(from.internal_owner_id());
    }
    if (from.has_owner_id()) {
      mutable_owner_id()->::TSCE::CFUUIDArchive::MergeFrom(from.owner_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OwnerIDMapArchive_OwnerIDMapArchiveEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OwnerIDMapArchive_OwnerIDMapArchiveEntry::CopyFrom(const OwnerIDMapArchive_OwnerIDMapArchiveEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnerIDMapArchive_OwnerIDMapArchiveEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void OwnerIDMapArchive_OwnerIDMapArchiveEntry::Swap(OwnerIDMapArchive_OwnerIDMapArchiveEntry* other) {
  if (other != this) {
    std::swap(internal_owner_id_, other->internal_owner_id_);
    std::swap(owner_id_, other->owner_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OwnerIDMapArchive_OwnerIDMapArchiveEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OwnerIDMapArchive_OwnerIDMapArchiveEntry_descriptor_;
  metadata.reflection = OwnerIDMapArchive_OwnerIDMapArchiveEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OwnerIDMapArchive::kMapEntryFieldNumber;
#endif  // !_MSC_VER

OwnerIDMapArchive::OwnerIDMapArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OwnerIDMapArchive::InitAsDefaultInstance() {
}

OwnerIDMapArchive::OwnerIDMapArchive(const OwnerIDMapArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OwnerIDMapArchive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OwnerIDMapArchive::~OwnerIDMapArchive() {
  SharedDtor();
}

void OwnerIDMapArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OwnerIDMapArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OwnerIDMapArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OwnerIDMapArchive_descriptor_;
}

const OwnerIDMapArchive& OwnerIDMapArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

OwnerIDMapArchive* OwnerIDMapArchive::default_instance_ = NULL;

OwnerIDMapArchive* OwnerIDMapArchive::New() const {
  return new OwnerIDMapArchive;
}

void OwnerIDMapArchive::Clear() {
  map_entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OwnerIDMapArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry map_entry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_map_entry;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OwnerIDMapArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry map_entry = 1;
  for (int i = 0; i < this->map_entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->map_entry(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OwnerIDMapArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry map_entry = 1;
  for (int i = 0; i < this->map_entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->map_entry(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OwnerIDMapArchive::ByteSize() const {
  int total_size = 0;

  // repeated .TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry map_entry = 1;
  total_size += 1 * this->map_entry_size();
  for (int i = 0; i < this->map_entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map_entry(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OwnerIDMapArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OwnerIDMapArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OwnerIDMapArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OwnerIDMapArchive::MergeFrom(const OwnerIDMapArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_entry_.MergeFrom(from.map_entry_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OwnerIDMapArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OwnerIDMapArchive::CopyFrom(const OwnerIDMapArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnerIDMapArchive::IsInitialized() const {

  for (int i = 0; i < map_entry_size(); i++) {
    if (!this->map_entry(i).IsInitialized()) return false;
  }
  return true;
}

void OwnerIDMapArchive::Swap(OwnerIDMapArchive* other) {
  if (other != this) {
    map_entry_.Swap(&other->map_entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OwnerIDMapArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OwnerIDMapArchive_descriptor_;
  metadata.reflection = OwnerIDMapArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DependencyTrackerArchive::kFormulaOwnerInfoFieldNumber;
const int DependencyTrackerArchive::kDirtyLeafFieldNumber;
const int DependencyTrackerArchive::kInternalDirtyLeafFieldNumber;
const int DependencyTrackerArchive::kOwnerIdMapFieldNumber;
#endif  // !_MSC_VER

DependencyTrackerArchive::DependencyTrackerArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DependencyTrackerArchive::InitAsDefaultInstance() {
  owner_id_map_ = const_cast< ::TSCE::OwnerIDMapArchive*>(&::TSCE::OwnerIDMapArchive::default_instance());
}

DependencyTrackerArchive::DependencyTrackerArchive(const DependencyTrackerArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DependencyTrackerArchive::SharedCtor() {
  _cached_size_ = 0;
  owner_id_map_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DependencyTrackerArchive::~DependencyTrackerArchive() {
  SharedDtor();
}

void DependencyTrackerArchive::SharedDtor() {
  if (this != default_instance_) {
    delete owner_id_map_;
  }
}

void DependencyTrackerArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DependencyTrackerArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DependencyTrackerArchive_descriptor_;
}

const DependencyTrackerArchive& DependencyTrackerArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

DependencyTrackerArchive* DependencyTrackerArchive::default_instance_ = NULL;

DependencyTrackerArchive* DependencyTrackerArchive::New() const {
  return new DependencyTrackerArchive;
}

void DependencyTrackerArchive::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (has_owner_id_map()) {
      if (owner_id_map_ != NULL) owner_id_map_->::TSCE::OwnerIDMapArchive::Clear();
    }
  }
  formula_owner_info_.Clear();
  dirty_leaf_.Clear();
  internal_dirty_leaf_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DependencyTrackerArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSCE.FormulaOwnerInfoArchive formula_owner_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formula_owner_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_formula_owner_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_formula_owner_info;
        if (input->ExpectTag(18)) goto parse_dirty_leaf;
        break;
      }

      // repeated .TSCE.CellReferenceArchive dirty_leaf = 2 [deprecated = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dirty_leaf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dirty_leaf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dirty_leaf;
        if (input->ExpectTag(26)) goto parse_owner_id_map;
        break;
      }

      // optional .TSCE.OwnerIDMapArchive owner_id_map = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner_id_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner_id_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_internal_dirty_leaf;
        break;
      }

      // repeated .TSCE.InternalCellReferenceArchive internal_dirty_leaf = 4 [deprecated = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_internal_dirty_leaf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_internal_dirty_leaf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_internal_dirty_leaf;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DependencyTrackerArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSCE.FormulaOwnerInfoArchive formula_owner_info = 1;
  for (int i = 0; i < this->formula_owner_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->formula_owner_info(i), output);
  }

  // repeated .TSCE.CellReferenceArchive dirty_leaf = 2 [deprecated = true];
  for (int i = 0; i < this->dirty_leaf_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dirty_leaf(i), output);
  }

  // optional .TSCE.OwnerIDMapArchive owner_id_map = 3;
  if (has_owner_id_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->owner_id_map(), output);
  }

  // repeated .TSCE.InternalCellReferenceArchive internal_dirty_leaf = 4 [deprecated = true];
  for (int i = 0; i < this->internal_dirty_leaf_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->internal_dirty_leaf(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DependencyTrackerArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSCE.FormulaOwnerInfoArchive formula_owner_info = 1;
  for (int i = 0; i < this->formula_owner_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->formula_owner_info(i), target);
  }

  // repeated .TSCE.CellReferenceArchive dirty_leaf = 2 [deprecated = true];
  for (int i = 0; i < this->dirty_leaf_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dirty_leaf(i), target);
  }

  // optional .TSCE.OwnerIDMapArchive owner_id_map = 3;
  if (has_owner_id_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->owner_id_map(), target);
  }

  // repeated .TSCE.InternalCellReferenceArchive internal_dirty_leaf = 4 [deprecated = true];
  for (int i = 0; i < this->internal_dirty_leaf_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->internal_dirty_leaf(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DependencyTrackerArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional .TSCE.OwnerIDMapArchive owner_id_map = 3;
    if (has_owner_id_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->owner_id_map());
    }

  }
  // repeated .TSCE.FormulaOwnerInfoArchive formula_owner_info = 1;
  total_size += 1 * this->formula_owner_info_size();
  for (int i = 0; i < this->formula_owner_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->formula_owner_info(i));
  }

  // repeated .TSCE.CellReferenceArchive dirty_leaf = 2 [deprecated = true];
  total_size += 1 * this->dirty_leaf_size();
  for (int i = 0; i < this->dirty_leaf_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dirty_leaf(i));
  }

  // repeated .TSCE.InternalCellReferenceArchive internal_dirty_leaf = 4 [deprecated = true];
  total_size += 1 * this->internal_dirty_leaf_size();
  for (int i = 0; i < this->internal_dirty_leaf_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->internal_dirty_leaf(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DependencyTrackerArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DependencyTrackerArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DependencyTrackerArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DependencyTrackerArchive::MergeFrom(const DependencyTrackerArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  formula_owner_info_.MergeFrom(from.formula_owner_info_);
  dirty_leaf_.MergeFrom(from.dirty_leaf_);
  internal_dirty_leaf_.MergeFrom(from.internal_dirty_leaf_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_owner_id_map()) {
      mutable_owner_id_map()->::TSCE::OwnerIDMapArchive::MergeFrom(from.owner_id_map());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DependencyTrackerArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DependencyTrackerArchive::CopyFrom(const DependencyTrackerArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DependencyTrackerArchive::IsInitialized() const {

  for (int i = 0; i < formula_owner_info_size(); i++) {
    if (!this->formula_owner_info(i).IsInitialized()) return false;
  }
  for (int i = 0; i < dirty_leaf_size(); i++) {
    if (!this->dirty_leaf(i).IsInitialized()) return false;
  }
  for (int i = 0; i < internal_dirty_leaf_size(); i++) {
    if (!this->internal_dirty_leaf(i).IsInitialized()) return false;
  }
  if (has_owner_id_map()) {
    if (!this->owner_id_map().IsInitialized()) return false;
  }
  return true;
}

void DependencyTrackerArchive::Swap(DependencyTrackerArchive* other) {
  if (other != this) {
    formula_owner_info_.Swap(&other->formula_owner_info_);
    dirty_leaf_.Swap(&other->dirty_leaf_);
    internal_dirty_leaf_.Swap(&other->internal_dirty_leaf_);
    std::swap(owner_id_map_, other->owner_id_map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DependencyTrackerArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DependencyTrackerArchive_descriptor_;
  metadata.reflection = DependencyTrackerArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NameTrackedReferencePair::kNameFieldNumber;
const int NameTrackedReferencePair::kTrackedReferenceFieldNumber;
const int NameTrackedReferencePair::kTrackedReferenceIdFieldNumber;
#endif  // !_MSC_VER

NameTrackedReferencePair::NameTrackedReferencePair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NameTrackedReferencePair::InitAsDefaultInstance() {
  tracked_reference_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

NameTrackedReferencePair::NameTrackedReferencePair(const NameTrackedReferencePair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NameTrackedReferencePair::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tracked_reference_ = NULL;
  tracked_reference_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameTrackedReferencePair::~NameTrackedReferencePair() {
  SharedDtor();
}

void NameTrackedReferencePair::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete tracked_reference_;
  }
}

void NameTrackedReferencePair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameTrackedReferencePair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameTrackedReferencePair_descriptor_;
}

const NameTrackedReferencePair& NameTrackedReferencePair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

NameTrackedReferencePair* NameTrackedReferencePair::default_instance_ = NULL;

NameTrackedReferencePair* NameTrackedReferencePair::New() const {
  return new NameTrackedReferencePair;
}

void NameTrackedReferencePair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_tracked_reference()) {
      if (tracked_reference_ != NULL) tracked_reference_->::TSP::Reference::Clear();
    }
    tracked_reference_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NameTrackedReferencePair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tracked_reference;
        break;
      }

      // optional .TSP.Reference tracked_reference = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tracked_reference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tracked_reference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tracked_reference_id;
        break;
      }

      // optional uint32 tracked_reference_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tracked_reference_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tracked_reference_id_)));
          set_has_tracked_reference_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NameTrackedReferencePair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .TSP.Reference tracked_reference = 2;
  if (has_tracked_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tracked_reference(), output);
  }

  // optional uint32 tracked_reference_id = 3;
  if (has_tracked_reference_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tracked_reference_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NameTrackedReferencePair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .TSP.Reference tracked_reference = 2;
  if (has_tracked_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tracked_reference(), target);
  }

  // optional uint32 tracked_reference_id = 3;
  if (has_tracked_reference_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tracked_reference_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NameTrackedReferencePair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .TSP.Reference tracked_reference = 2;
    if (has_tracked_reference()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tracked_reference());
    }

    // optional uint32 tracked_reference_id = 3;
    if (has_tracked_reference_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tracked_reference_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameTrackedReferencePair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NameTrackedReferencePair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NameTrackedReferencePair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NameTrackedReferencePair::MergeFrom(const NameTrackedReferencePair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_tracked_reference()) {
      mutable_tracked_reference()->::TSP::Reference::MergeFrom(from.tracked_reference());
    }
    if (from.has_tracked_reference_id()) {
      set_tracked_reference_id(from.tracked_reference_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NameTrackedReferencePair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameTrackedReferencePair::CopyFrom(const NameTrackedReferencePair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameTrackedReferencePair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_tracked_reference()) {
    if (!this->tracked_reference().IsInitialized()) return false;
  }
  return true;
}

void NameTrackedReferencePair::Swap(NameTrackedReferencePair* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(tracked_reference_, other->tracked_reference_);
    std::swap(tracked_reference_id_, other->tracked_reference_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NameTrackedReferencePair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NameTrackedReferencePair_descriptor_;
  metadata.reflection = NameTrackedReferencePair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NamesByTrackedReferenceArchive::kTableIdFieldNumber;
const int NamesByTrackedReferenceArchive::kNameTrackedReferencePairFieldNumber;
#endif  // !_MSC_VER

NamesByTrackedReferenceArchive::NamesByTrackedReferenceArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NamesByTrackedReferenceArchive::InitAsDefaultInstance() {
  table_id_ = const_cast< ::TSCE::CFUUIDArchive*>(&::TSCE::CFUUIDArchive::default_instance());
}

NamesByTrackedReferenceArchive::NamesByTrackedReferenceArchive(const NamesByTrackedReferenceArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NamesByTrackedReferenceArchive::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NamesByTrackedReferenceArchive::~NamesByTrackedReferenceArchive() {
  SharedDtor();
}

void NamesByTrackedReferenceArchive::SharedDtor() {
  if (this != default_instance_) {
    delete table_id_;
  }
}

void NamesByTrackedReferenceArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NamesByTrackedReferenceArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NamesByTrackedReferenceArchive_descriptor_;
}

const NamesByTrackedReferenceArchive& NamesByTrackedReferenceArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

NamesByTrackedReferenceArchive* NamesByTrackedReferenceArchive::default_instance_ = NULL;

NamesByTrackedReferenceArchive* NamesByTrackedReferenceArchive::New() const {
  return new NamesByTrackedReferenceArchive;
}

void NamesByTrackedReferenceArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_id()) {
      if (table_id_ != NULL) table_id_->::TSCE::CFUUIDArchive::Clear();
    }
  }
  name_tracked_reference_pair_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NamesByTrackedReferenceArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCE.CFUUIDArchive table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name_tracked_reference_pair;
        break;
      }

      // repeated .TSCE.NameTrackedReferencePair name_tracked_reference_pair = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name_tracked_reference_pair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_name_tracked_reference_pair()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name_tracked_reference_pair;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NamesByTrackedReferenceArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCE.CFUUIDArchive table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_id(), output);
  }

  // repeated .TSCE.NameTrackedReferencePair name_tracked_reference_pair = 2;
  for (int i = 0; i < this->name_tracked_reference_pair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->name_tracked_reference_pair(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NamesByTrackedReferenceArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCE.CFUUIDArchive table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_id(), target);
  }

  // repeated .TSCE.NameTrackedReferencePair name_tracked_reference_pair = 2;
  for (int i = 0; i < this->name_tracked_reference_pair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->name_tracked_reference_pair(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NamesByTrackedReferenceArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCE.CFUUIDArchive table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_id());
    }

  }
  // repeated .TSCE.NameTrackedReferencePair name_tracked_reference_pair = 2;
  total_size += 1 * this->name_tracked_reference_pair_size();
  for (int i = 0; i < this->name_tracked_reference_pair_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->name_tracked_reference_pair(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NamesByTrackedReferenceArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NamesByTrackedReferenceArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NamesByTrackedReferenceArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NamesByTrackedReferenceArchive::MergeFrom(const NamesByTrackedReferenceArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  name_tracked_reference_pair_.MergeFrom(from.name_tracked_reference_pair_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      mutable_table_id()->::TSCE::CFUUIDArchive::MergeFrom(from.table_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NamesByTrackedReferenceArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamesByTrackedReferenceArchive::CopyFrom(const NamesByTrackedReferenceArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamesByTrackedReferenceArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < name_tracked_reference_pair_size(); i++) {
    if (!this->name_tracked_reference_pair(i).IsInitialized()) return false;
  }
  return true;
}

void NamesByTrackedReferenceArchive::Swap(NamesByTrackedReferenceArchive* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    name_tracked_reference_pair_.Swap(&other->name_tracked_reference_pair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NamesByTrackedReferenceArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NamesByTrackedReferenceArchive_descriptor_;
  metadata.reflection = NamesByTrackedReferenceArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NamedReferenceManagerArchive::kReferenceTrackerFieldNumber;
const int NamedReferenceManagerArchive::kNamesByTrackedReferenceByTableFieldNumber;
#endif  // !_MSC_VER

NamedReferenceManagerArchive::NamedReferenceManagerArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NamedReferenceManagerArchive::InitAsDefaultInstance() {
  reference_tracker_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

NamedReferenceManagerArchive::NamedReferenceManagerArchive(const NamedReferenceManagerArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NamedReferenceManagerArchive::SharedCtor() {
  _cached_size_ = 0;
  reference_tracker_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NamedReferenceManagerArchive::~NamedReferenceManagerArchive() {
  SharedDtor();
}

void NamedReferenceManagerArchive::SharedDtor() {
  if (this != default_instance_) {
    delete reference_tracker_;
  }
}

void NamedReferenceManagerArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NamedReferenceManagerArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NamedReferenceManagerArchive_descriptor_;
}

const NamedReferenceManagerArchive& NamedReferenceManagerArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

NamedReferenceManagerArchive* NamedReferenceManagerArchive::default_instance_ = NULL;

NamedReferenceManagerArchive* NamedReferenceManagerArchive::New() const {
  return new NamedReferenceManagerArchive;
}

void NamedReferenceManagerArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_reference_tracker()) {
      if (reference_tracker_ != NULL) reference_tracker_->::TSP::Reference::Clear();
    }
  }
  names_by_tracked_reference_by_table_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NamedReferenceManagerArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Reference reference_tracker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reference_tracker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_names_by_tracked_reference_by_table;
        break;
      }

      // repeated .TSCE.NamesByTrackedReferenceArchive names_by_tracked_reference_by_table = 2 [deprecated = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_names_by_tracked_reference_by_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_names_by_tracked_reference_by_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_names_by_tracked_reference_by_table;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NamedReferenceManagerArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Reference reference_tracker = 1;
  if (has_reference_tracker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reference_tracker(), output);
  }

  // repeated .TSCE.NamesByTrackedReferenceArchive names_by_tracked_reference_by_table = 2 [deprecated = true];
  for (int i = 0; i < this->names_by_tracked_reference_by_table_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->names_by_tracked_reference_by_table(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NamedReferenceManagerArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Reference reference_tracker = 1;
  if (has_reference_tracker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reference_tracker(), target);
  }

  // repeated .TSCE.NamesByTrackedReferenceArchive names_by_tracked_reference_by_table = 2 [deprecated = true];
  for (int i = 0; i < this->names_by_tracked_reference_by_table_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->names_by_tracked_reference_by_table(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NamedReferenceManagerArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.Reference reference_tracker = 1;
    if (has_reference_tracker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reference_tracker());
    }

  }
  // repeated .TSCE.NamesByTrackedReferenceArchive names_by_tracked_reference_by_table = 2 [deprecated = true];
  total_size += 1 * this->names_by_tracked_reference_by_table_size();
  for (int i = 0; i < this->names_by_tracked_reference_by_table_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->names_by_tracked_reference_by_table(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NamedReferenceManagerArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NamedReferenceManagerArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NamedReferenceManagerArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NamedReferenceManagerArchive::MergeFrom(const NamedReferenceManagerArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_by_tracked_reference_by_table_.MergeFrom(from.names_by_tracked_reference_by_table_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reference_tracker()) {
      mutable_reference_tracker()->::TSP::Reference::MergeFrom(from.reference_tracker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NamedReferenceManagerArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamedReferenceManagerArchive::CopyFrom(const NamedReferenceManagerArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedReferenceManagerArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_reference_tracker()) {
    if (!this->reference_tracker().IsInitialized()) return false;
  }
  for (int i = 0; i < names_by_tracked_reference_by_table_size(); i++) {
    if (!this->names_by_tracked_reference_by_table(i).IsInitialized()) return false;
  }
  return true;
}

void NamedReferenceManagerArchive::Swap(NamedReferenceManagerArchive* other) {
  if (other != this) {
    std::swap(reference_tracker_, other->reference_tracker_);
    names_by_tracked_reference_by_table_.Swap(&other->names_by_tracked_reference_by_table_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NamedReferenceManagerArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NamedReferenceManagerArchive_descriptor_;
  metadata.reflection = NamedReferenceManagerArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CalculationEngineArchive_ExcelImportDateMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalculationEngineArchive_ExcelImportDateMode_descriptor_;
}
bool CalculationEngineArchive_ExcelImportDateMode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CalculationEngineArchive_ExcelImportDateMode CalculationEngineArchive::DATE_MODE_1900;
const CalculationEngineArchive_ExcelImportDateMode CalculationEngineArchive::DATE_MODE_1900_LEGACY;
const CalculationEngineArchive_ExcelImportDateMode CalculationEngineArchive::DATE_MODE_1904_LEGACY;
const CalculationEngineArchive_ExcelImportDateMode CalculationEngineArchive::ExcelImportDateMode_MIN;
const CalculationEngineArchive_ExcelImportDateMode CalculationEngineArchive::ExcelImportDateMode_MAX;
const int CalculationEngineArchive::ExcelImportDateMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CalculationEngineArchive::kBaseDate1904FieldNumber;
const int CalculationEngineArchive::kDependencyTrackerFieldNumber;
const int CalculationEngineArchive::kNamedReferenceManagerFieldNumber;
const int CalculationEngineArchive::kExcelImportDateModeFieldNumber;
const int CalculationEngineArchive::kSavedLocaleIdentifierFieldNumber;
#endif  // !_MSC_VER

CalculationEngineArchive::CalculationEngineArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CalculationEngineArchive::InitAsDefaultInstance() {
  dependency_tracker_ = const_cast< ::TSCE::DependencyTrackerArchive*>(&::TSCE::DependencyTrackerArchive::default_instance());
  named_reference_manager_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CalculationEngineArchive::CalculationEngineArchive(const CalculationEngineArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CalculationEngineArchive::SharedCtor() {
  _cached_size_ = 0;
  base_date_1904_ = false;
  dependency_tracker_ = NULL;
  named_reference_manager_ = NULL;
  excel_import_date_mode_ = 1;
  saved_locale_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalculationEngineArchive::~CalculationEngineArchive() {
  SharedDtor();
}

void CalculationEngineArchive::SharedDtor() {
  if (saved_locale_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete saved_locale_identifier_;
  }
  if (this != default_instance_) {
    delete dependency_tracker_;
    delete named_reference_manager_;
  }
}

void CalculationEngineArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalculationEngineArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalculationEngineArchive_descriptor_;
}

const CalculationEngineArchive& CalculationEngineArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

CalculationEngineArchive* CalculationEngineArchive::default_instance_ = NULL;

CalculationEngineArchive* CalculationEngineArchive::New() const {
  return new CalculationEngineArchive;
}

void CalculationEngineArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    base_date_1904_ = false;
    if (has_dependency_tracker()) {
      if (dependency_tracker_ != NULL) dependency_tracker_->::TSCE::DependencyTrackerArchive::Clear();
    }
    if (has_named_reference_manager()) {
      if (named_reference_manager_ != NULL) named_reference_manager_->::TSP::Reference::Clear();
    }
    excel_import_date_mode_ = 1;
    if (has_saved_locale_identifier()) {
      if (saved_locale_identifier_ != &::google::protobuf::internal::kEmptyString) {
        saved_locale_identifier_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CalculationEngineArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool base_date_1904 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &base_date_1904_)));
          set_has_base_date_1904();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dependency_tracker;
        break;
      }

      // required .TSCE.DependencyTrackerArchive dependency_tracker = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dependency_tracker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dependency_tracker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_named_reference_manager;
        break;
      }

      // optional .TSP.Reference named_reference_manager = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_named_reference_manager:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_named_reference_manager()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_excel_import_date_mode;
        break;
      }

      // optional .TSCE.CalculationEngineArchive.ExcelImportDateMode excel_import_date_mode = 4 [default = DATE_MODE_1900];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_excel_import_date_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSCE::CalculationEngineArchive_ExcelImportDateMode_IsValid(value)) {
            set_excel_import_date_mode(static_cast< ::TSCE::CalculationEngineArchive_ExcelImportDateMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_saved_locale_identifier;
        break;
      }

      // optional string saved_locale_identifier = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_saved_locale_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_saved_locale_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->saved_locale_identifier().data(), this->saved_locale_identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CalculationEngineArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool base_date_1904 = 1;
  if (has_base_date_1904()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->base_date_1904(), output);
  }

  // required .TSCE.DependencyTrackerArchive dependency_tracker = 2;
  if (has_dependency_tracker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dependency_tracker(), output);
  }

  // optional .TSP.Reference named_reference_manager = 3;
  if (has_named_reference_manager()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->named_reference_manager(), output);
  }

  // optional .TSCE.CalculationEngineArchive.ExcelImportDateMode excel_import_date_mode = 4 [default = DATE_MODE_1900];
  if (has_excel_import_date_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->excel_import_date_mode(), output);
  }

  // optional string saved_locale_identifier = 5;
  if (has_saved_locale_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->saved_locale_identifier().data(), this->saved_locale_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->saved_locale_identifier(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CalculationEngineArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool base_date_1904 = 1;
  if (has_base_date_1904()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->base_date_1904(), target);
  }

  // required .TSCE.DependencyTrackerArchive dependency_tracker = 2;
  if (has_dependency_tracker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dependency_tracker(), target);
  }

  // optional .TSP.Reference named_reference_manager = 3;
  if (has_named_reference_manager()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->named_reference_manager(), target);
  }

  // optional .TSCE.CalculationEngineArchive.ExcelImportDateMode excel_import_date_mode = 4 [default = DATE_MODE_1900];
  if (has_excel_import_date_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->excel_import_date_mode(), target);
  }

  // optional string saved_locale_identifier = 5;
  if (has_saved_locale_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->saved_locale_identifier().data(), this->saved_locale_identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->saved_locale_identifier(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CalculationEngineArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool base_date_1904 = 1;
    if (has_base_date_1904()) {
      total_size += 1 + 1;
    }

    // required .TSCE.DependencyTrackerArchive dependency_tracker = 2;
    if (has_dependency_tracker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dependency_tracker());
    }

    // optional .TSP.Reference named_reference_manager = 3;
    if (has_named_reference_manager()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->named_reference_manager());
    }

    // optional .TSCE.CalculationEngineArchive.ExcelImportDateMode excel_import_date_mode = 4 [default = DATE_MODE_1900];
    if (has_excel_import_date_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->excel_import_date_mode());
    }

    // optional string saved_locale_identifier = 5;
    if (has_saved_locale_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->saved_locale_identifier());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalculationEngineArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CalculationEngineArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalculationEngineArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalculationEngineArchive::MergeFrom(const CalculationEngineArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_date_1904()) {
      set_base_date_1904(from.base_date_1904());
    }
    if (from.has_dependency_tracker()) {
      mutable_dependency_tracker()->::TSCE::DependencyTrackerArchive::MergeFrom(from.dependency_tracker());
    }
    if (from.has_named_reference_manager()) {
      mutable_named_reference_manager()->::TSP::Reference::MergeFrom(from.named_reference_manager());
    }
    if (from.has_excel_import_date_mode()) {
      set_excel_import_date_mode(from.excel_import_date_mode());
    }
    if (from.has_saved_locale_identifier()) {
      set_saved_locale_identifier(from.saved_locale_identifier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CalculationEngineArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalculationEngineArchive::CopyFrom(const CalculationEngineArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculationEngineArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_dependency_tracker()) {
    if (!this->dependency_tracker().IsInitialized()) return false;
  }
  if (has_named_reference_manager()) {
    if (!this->named_reference_manager().IsInitialized()) return false;
  }
  return true;
}

void CalculationEngineArchive::Swap(CalculationEngineArchive* other) {
  if (other != this) {
    std::swap(base_date_1904_, other->base_date_1904_);
    std::swap(dependency_tracker_, other->dependency_tracker_);
    std::swap(named_reference_manager_, other->named_reference_manager_);
    std::swap(excel_import_date_mode_, other->excel_import_date_mode_);
    std::swap(saved_locale_identifier_, other->saved_locale_identifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CalculationEngineArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalculationEngineArchive_descriptor_;
  metadata.reflection = CalculationEngineArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ASTNodeArrayArchive_ASTNodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ASTNodeArrayArchive_ASTNodeType_descriptor_;
}
bool ASTNodeArrayArchive_ASTNodeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::ADDITION_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::SUBTRACTION_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::MULTIPLICATION_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::DIVISION_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::POWER_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::CONCATENATION_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::GREATER_THAN_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::GREATER_THAN_OR_EQUAL_TO_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::LESS_THAN_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::LESS_THAN_OR_EQUAL_TO_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::EQUAL_TO_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::NOT_EQUAL_TO_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::NEGATION_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::PLUS_SIGN_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::PERCENT_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::FUNCTION_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::NUMBER_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::BOOLEAN_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::STRING_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::DATE_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::DURATION_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::EMPTY_ARGUMENT_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::TOKEN_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::ARRAY_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::LIST_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::THUNK_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::LOCAL_CELL_REFERENCE_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::CROSS_TABLE_CELL_REFERENCE_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::COLON_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::REFERENCE_ERROR_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::UNKNOWN_FUNCTION_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::APPEND_WHITESPACE_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::PREPEND_WHITESPACE_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::BEGIN_THUNK_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::END_THUNK_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::CELL_REFERENCE_NODE;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::ASTNodeType_MIN;
const ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::ASTNodeType_MAX;
const int ASTNodeArrayArchive::ASTNodeType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::kRowHandleFieldNumber;
const int ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::kColumnHandleFieldNumber;
const int ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::kRowIsStickyFieldNumber;
const int ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::kColumnIsStickyFieldNumber;
#endif  // !_MSC_VER

ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::InitAsDefaultInstance() {
}

ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive(const ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::SharedCtor() {
  _cached_size_ = 0;
  row_handle_ = 0u;
  column_handle_ = 0u;
  row_is_sticky_ = 0u;
  column_is_sticky_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::~ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive() {
  SharedDtor();
}

void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive_descriptor_;
}

const ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::default_instance_ = NULL;

ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::New() const {
  return new ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive;
}

void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    row_handle_ = 0u;
    column_handle_ = 0u;
    row_is_sticky_ = 0u;
    column_is_sticky_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 row_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &row_handle_)));
          set_has_row_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_column_handle;
        break;
      }

      // required uint32 column_handle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_column_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &column_handle_)));
          set_has_column_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_row_is_sticky;
        break;
      }

      // required uint32 row_is_sticky = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_row_is_sticky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &row_is_sticky_)));
          set_has_row_is_sticky();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_column_is_sticky;
        break;
      }

      // required uint32 column_is_sticky = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_column_is_sticky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &column_is_sticky_)));
          set_has_column_is_sticky();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 row_handle = 1;
  if (has_row_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->row_handle(), output);
  }

  // required uint32 column_handle = 2;
  if (has_column_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->column_handle(), output);
  }

  // required uint32 row_is_sticky = 3;
  if (has_row_is_sticky()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->row_is_sticky(), output);
  }

  // required uint32 column_is_sticky = 4;
  if (has_column_is_sticky()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->column_is_sticky(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 row_handle = 1;
  if (has_row_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->row_handle(), target);
  }

  // required uint32 column_handle = 2;
  if (has_column_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->column_handle(), target);
  }

  // required uint32 row_is_sticky = 3;
  if (has_row_is_sticky()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->row_is_sticky(), target);
  }

  // required uint32 column_is_sticky = 4;
  if (has_column_is_sticky()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->column_is_sticky(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 row_handle = 1;
    if (has_row_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->row_handle());
    }

    // required uint32 column_handle = 2;
    if (has_column_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->column_handle());
    }

    // required uint32 row_is_sticky = 3;
    if (has_row_is_sticky()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->row_is_sticky());
    }

    // required uint32 column_is_sticky = 4;
    if (has_column_is_sticky()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->column_is_sticky());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::MergeFrom(const ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_row_handle()) {
      set_row_handle(from.row_handle());
    }
    if (from.has_column_handle()) {
      set_column_handle(from.column_handle());
    }
    if (from.has_row_is_sticky()) {
      set_row_is_sticky(from.row_is_sticky());
    }
    if (from.has_column_is_sticky()) {
      set_column_is_sticky(from.column_is_sticky());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::CopyFrom(const ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::Swap(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* other) {
  if (other != this) {
    std::swap(row_handle_, other->row_handle_);
    std::swap(column_handle_, other->column_handle_);
    std::swap(row_is_sticky_, other->row_is_sticky_);
    std::swap(column_is_sticky_, other->column_is_sticky_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive_descriptor_;
  metadata.reflection = ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::kRowHandleFieldNumber;
const int ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::kColumnHandleFieldNumber;
const int ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::kRowIsStickyFieldNumber;
const int ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::kColumnIsStickyFieldNumber;
const int ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::kTableIdFieldNumber;
const int ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::kASTReferenceWhitespaceAfterSheetNameFieldNumber;
const int ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::kASTReferenceWhitespaceBeforeTableNameFieldNumber;
const int ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::kASTReferenceWhitespaceAfterTableNameFieldNumber;
const int ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::kASTReferenceWhitespaceBeforeCellAddressFieldNumber;
#endif  // !_MSC_VER

ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::InitAsDefaultInstance() {
  table_id_ = const_cast< ::TSCE::CFUUIDArchive*>(&::TSCE::CFUUIDArchive::default_instance());
}

ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive(const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::SharedCtor() {
  _cached_size_ = 0;
  row_handle_ = 0u;
  column_handle_ = 0u;
  row_is_sticky_ = 0u;
  column_is_sticky_ = 0u;
  table_id_ = NULL;
  ast_reference_whitespace_after_sheet_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ast_reference_whitespace_before_table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ast_reference_whitespace_after_table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ast_reference_whitespace_before_cell_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::~ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive() {
  SharedDtor();
}

void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::SharedDtor() {
  if (ast_reference_whitespace_after_sheet_name_ != &::google::protobuf::internal::kEmptyString) {
    delete ast_reference_whitespace_after_sheet_name_;
  }
  if (ast_reference_whitespace_before_table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete ast_reference_whitespace_before_table_name_;
  }
  if (ast_reference_whitespace_after_table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete ast_reference_whitespace_after_table_name_;
  }
  if (ast_reference_whitespace_before_cell_address_ != &::google::protobuf::internal::kEmptyString) {
    delete ast_reference_whitespace_before_cell_address_;
  }
  if (this != default_instance_) {
    delete table_id_;
  }
}

void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive_descriptor_;
}

const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::default_instance_ = NULL;

ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::New() const {
  return new ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive;
}

void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    row_handle_ = 0u;
    column_handle_ = 0u;
    row_is_sticky_ = 0u;
    column_is_sticky_ = 0u;
    if (has_table_id()) {
      if (table_id_ != NULL) table_id_->::TSCE::CFUUIDArchive::Clear();
    }
    if (has_ast_reference_whitespace_after_sheet_name()) {
      if (ast_reference_whitespace_after_sheet_name_ != &::google::protobuf::internal::kEmptyString) {
        ast_reference_whitespace_after_sheet_name_->clear();
      }
    }
    if (has_ast_reference_whitespace_before_table_name()) {
      if (ast_reference_whitespace_before_table_name_ != &::google::protobuf::internal::kEmptyString) {
        ast_reference_whitespace_before_table_name_->clear();
      }
    }
    if (has_ast_reference_whitespace_after_table_name()) {
      if (ast_reference_whitespace_after_table_name_ != &::google::protobuf::internal::kEmptyString) {
        ast_reference_whitespace_after_table_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_ast_reference_whitespace_before_cell_address()) {
      if (ast_reference_whitespace_before_cell_address_ != &::google::protobuf::internal::kEmptyString) {
        ast_reference_whitespace_before_cell_address_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 row_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &row_handle_)));
          set_has_row_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_column_handle;
        break;
      }

      // required uint32 column_handle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_column_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &column_handle_)));
          set_has_column_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_row_is_sticky;
        break;
      }

      // required uint32 row_is_sticky = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_row_is_sticky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &row_is_sticky_)));
          set_has_row_is_sticky();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_column_is_sticky;
        break;
      }

      // required uint32 column_is_sticky = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_column_is_sticky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &column_is_sticky_)));
          set_has_column_is_sticky();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_table_id;
        break;
      }

      // required .TSCE.CFUUIDArchive table_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_AST_reference_whitespace_after_sheet_name;
        break;
      }

      // optional string AST_reference_whitespace_after_sheet_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AST_reference_whitespace_after_sheet_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ast_reference_whitespace_after_sheet_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ast_reference_whitespace_after_sheet_name().data(), this->ast_reference_whitespace_after_sheet_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_AST_reference_whitespace_before_table_name;
        break;
      }

      // optional string AST_reference_whitespace_before_table_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AST_reference_whitespace_before_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ast_reference_whitespace_before_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ast_reference_whitespace_before_table_name().data(), this->ast_reference_whitespace_before_table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_AST_reference_whitespace_after_table_name;
        break;
      }

      // optional string AST_reference_whitespace_after_table_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AST_reference_whitespace_after_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ast_reference_whitespace_after_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ast_reference_whitespace_after_table_name().data(), this->ast_reference_whitespace_after_table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_AST_reference_whitespace_before_cell_address;
        break;
      }

      // optional string AST_reference_whitespace_before_cell_address = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AST_reference_whitespace_before_cell_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ast_reference_whitespace_before_cell_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ast_reference_whitespace_before_cell_address().data(), this->ast_reference_whitespace_before_cell_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 row_handle = 1;
  if (has_row_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->row_handle(), output);
  }

  // required uint32 column_handle = 2;
  if (has_column_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->column_handle(), output);
  }

  // required uint32 row_is_sticky = 3;
  if (has_row_is_sticky()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->row_is_sticky(), output);
  }

  // required uint32 column_is_sticky = 4;
  if (has_column_is_sticky()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->column_is_sticky(), output);
  }

  // required .TSCE.CFUUIDArchive table_id = 5;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->table_id(), output);
  }

  // optional string AST_reference_whitespace_after_sheet_name = 6;
  if (has_ast_reference_whitespace_after_sheet_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ast_reference_whitespace_after_sheet_name().data(), this->ast_reference_whitespace_after_sheet_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->ast_reference_whitespace_after_sheet_name(), output);
  }

  // optional string AST_reference_whitespace_before_table_name = 7;
  if (has_ast_reference_whitespace_before_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ast_reference_whitespace_before_table_name().data(), this->ast_reference_whitespace_before_table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->ast_reference_whitespace_before_table_name(), output);
  }

  // optional string AST_reference_whitespace_after_table_name = 8;
  if (has_ast_reference_whitespace_after_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ast_reference_whitespace_after_table_name().data(), this->ast_reference_whitespace_after_table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->ast_reference_whitespace_after_table_name(), output);
  }

  // optional string AST_reference_whitespace_before_cell_address = 9;
  if (has_ast_reference_whitespace_before_cell_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ast_reference_whitespace_before_cell_address().data(), this->ast_reference_whitespace_before_cell_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->ast_reference_whitespace_before_cell_address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 row_handle = 1;
  if (has_row_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->row_handle(), target);
  }

  // required uint32 column_handle = 2;
  if (has_column_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->column_handle(), target);
  }

  // required uint32 row_is_sticky = 3;
  if (has_row_is_sticky()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->row_is_sticky(), target);
  }

  // required uint32 column_is_sticky = 4;
  if (has_column_is_sticky()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->column_is_sticky(), target);
  }

  // required .TSCE.CFUUIDArchive table_id = 5;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->table_id(), target);
  }

  // optional string AST_reference_whitespace_after_sheet_name = 6;
  if (has_ast_reference_whitespace_after_sheet_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ast_reference_whitespace_after_sheet_name().data(), this->ast_reference_whitespace_after_sheet_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ast_reference_whitespace_after_sheet_name(), target);
  }

  // optional string AST_reference_whitespace_before_table_name = 7;
  if (has_ast_reference_whitespace_before_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ast_reference_whitespace_before_table_name().data(), this->ast_reference_whitespace_before_table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ast_reference_whitespace_before_table_name(), target);
  }

  // optional string AST_reference_whitespace_after_table_name = 8;
  if (has_ast_reference_whitespace_after_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ast_reference_whitespace_after_table_name().data(), this->ast_reference_whitespace_after_table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->ast_reference_whitespace_after_table_name(), target);
  }

  // optional string AST_reference_whitespace_before_cell_address = 9;
  if (has_ast_reference_whitespace_before_cell_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ast_reference_whitespace_before_cell_address().data(), this->ast_reference_whitespace_before_cell_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->ast_reference_whitespace_before_cell_address(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 row_handle = 1;
    if (has_row_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->row_handle());
    }

    // required uint32 column_handle = 2;
    if (has_column_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->column_handle());
    }

    // required uint32 row_is_sticky = 3;
    if (has_row_is_sticky()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->row_is_sticky());
    }

    // required uint32 column_is_sticky = 4;
    if (has_column_is_sticky()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->column_is_sticky());
    }

    // required .TSCE.CFUUIDArchive table_id = 5;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_id());
    }

    // optional string AST_reference_whitespace_after_sheet_name = 6;
    if (has_ast_reference_whitespace_after_sheet_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ast_reference_whitespace_after_sheet_name());
    }

    // optional string AST_reference_whitespace_before_table_name = 7;
    if (has_ast_reference_whitespace_before_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ast_reference_whitespace_before_table_name());
    }

    // optional string AST_reference_whitespace_after_table_name = 8;
    if (has_ast_reference_whitespace_after_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ast_reference_whitespace_after_table_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string AST_reference_whitespace_before_cell_address = 9;
    if (has_ast_reference_whitespace_before_cell_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ast_reference_whitespace_before_cell_address());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::MergeFrom(const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_row_handle()) {
      set_row_handle(from.row_handle());
    }
    if (from.has_column_handle()) {
      set_column_handle(from.column_handle());
    }
    if (from.has_row_is_sticky()) {
      set_row_is_sticky(from.row_is_sticky());
    }
    if (from.has_column_is_sticky()) {
      set_column_is_sticky(from.column_is_sticky());
    }
    if (from.has_table_id()) {
      mutable_table_id()->::TSCE::CFUUIDArchive::MergeFrom(from.table_id());
    }
    if (from.has_ast_reference_whitespace_after_sheet_name()) {
      set_ast_reference_whitespace_after_sheet_name(from.ast_reference_whitespace_after_sheet_name());
    }
    if (from.has_ast_reference_whitespace_before_table_name()) {
      set_ast_reference_whitespace_before_table_name(from.ast_reference_whitespace_before_table_name());
    }
    if (from.has_ast_reference_whitespace_after_table_name()) {
      set_ast_reference_whitespace_after_table_name(from.ast_reference_whitespace_after_table_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ast_reference_whitespace_before_cell_address()) {
      set_ast_reference_whitespace_before_cell_address(from.ast_reference_whitespace_before_cell_address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::CopyFrom(const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::Swap(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* other) {
  if (other != this) {
    std::swap(row_handle_, other->row_handle_);
    std::swap(column_handle_, other->column_handle_);
    std::swap(row_is_sticky_, other->row_is_sticky_);
    std::swap(column_is_sticky_, other->column_is_sticky_);
    std::swap(table_id_, other->table_id_);
    std::swap(ast_reference_whitespace_after_sheet_name_, other->ast_reference_whitespace_after_sheet_name_);
    std::swap(ast_reference_whitespace_before_table_name_, other->ast_reference_whitespace_before_table_name_);
    std::swap(ast_reference_whitespace_after_table_name_, other->ast_reference_whitespace_after_table_name_);
    std::swap(ast_reference_whitespace_before_cell_address_, other->ast_reference_whitespace_before_cell_address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive_descriptor_;
  metadata.reflection = ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ASTNodeArrayArchive_ASTColumnCoordinateArchive::kColumnFieldNumber;
const int ASTNodeArrayArchive_ASTColumnCoordinateArchive::kAbsoluteFieldNumber;
#endif  // !_MSC_VER

ASTNodeArrayArchive_ASTColumnCoordinateArchive::ASTNodeArrayArchive_ASTColumnCoordinateArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ASTNodeArrayArchive_ASTColumnCoordinateArchive::InitAsDefaultInstance() {
}

ASTNodeArrayArchive_ASTColumnCoordinateArchive::ASTNodeArrayArchive_ASTColumnCoordinateArchive(const ASTNodeArrayArchive_ASTColumnCoordinateArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ASTNodeArrayArchive_ASTColumnCoordinateArchive::SharedCtor() {
  _cached_size_ = 0;
  column_ = 0;
  absolute_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ASTNodeArrayArchive_ASTColumnCoordinateArchive::~ASTNodeArrayArchive_ASTColumnCoordinateArchive() {
  SharedDtor();
}

void ASTNodeArrayArchive_ASTColumnCoordinateArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ASTNodeArrayArchive_ASTColumnCoordinateArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ASTNodeArrayArchive_ASTColumnCoordinateArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ASTNodeArrayArchive_ASTColumnCoordinateArchive_descriptor_;
}

const ASTNodeArrayArchive_ASTColumnCoordinateArchive& ASTNodeArrayArchive_ASTColumnCoordinateArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

ASTNodeArrayArchive_ASTColumnCoordinateArchive* ASTNodeArrayArchive_ASTColumnCoordinateArchive::default_instance_ = NULL;

ASTNodeArrayArchive_ASTColumnCoordinateArchive* ASTNodeArrayArchive_ASTColumnCoordinateArchive::New() const {
  return new ASTNodeArrayArchive_ASTColumnCoordinateArchive;
}

void ASTNodeArrayArchive_ASTColumnCoordinateArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    column_ = 0;
    absolute_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ASTNodeArrayArchive_ASTColumnCoordinateArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 column = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &column_)));
          set_has_column();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_absolute;
        break;
      }

      // optional bool absolute = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_absolute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &absolute_)));
          set_has_absolute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ASTNodeArrayArchive_ASTColumnCoordinateArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 column = 1;
  if (has_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->column(), output);
  }

  // optional bool absolute = 2 [default = false];
  if (has_absolute()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->absolute(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ASTNodeArrayArchive_ASTColumnCoordinateArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 column = 1;
  if (has_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->column(), target);
  }

  // optional bool absolute = 2 [default = false];
  if (has_absolute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->absolute(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ASTNodeArrayArchive_ASTColumnCoordinateArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 column = 1;
    if (has_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->column());
    }

    // optional bool absolute = 2 [default = false];
    if (has_absolute()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ASTNodeArrayArchive_ASTColumnCoordinateArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ASTNodeArrayArchive_ASTColumnCoordinateArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ASTNodeArrayArchive_ASTColumnCoordinateArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ASTNodeArrayArchive_ASTColumnCoordinateArchive::MergeFrom(const ASTNodeArrayArchive_ASTColumnCoordinateArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_column()) {
      set_column(from.column());
    }
    if (from.has_absolute()) {
      set_absolute(from.absolute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ASTNodeArrayArchive_ASTColumnCoordinateArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTNodeArrayArchive_ASTColumnCoordinateArchive::CopyFrom(const ASTNodeArrayArchive_ASTColumnCoordinateArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTColumnCoordinateArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ASTNodeArrayArchive_ASTColumnCoordinateArchive::Swap(ASTNodeArrayArchive_ASTColumnCoordinateArchive* other) {
  if (other != this) {
    std::swap(column_, other->column_);
    std::swap(absolute_, other->absolute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ASTNodeArrayArchive_ASTColumnCoordinateArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ASTNodeArrayArchive_ASTColumnCoordinateArchive_descriptor_;
  metadata.reflection = ASTNodeArrayArchive_ASTColumnCoordinateArchive_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ASTNodeArrayArchive_ASTRowCoordinateArchive::kRowFieldNumber;
const int ASTNodeArrayArchive_ASTRowCoordinateArchive::kAbsoluteFieldNumber;
#endif  // !_MSC_VER

ASTNodeArrayArchive_ASTRowCoordinateArchive::ASTNodeArrayArchive_ASTRowCoordinateArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ASTNodeArrayArchive_ASTRowCoordinateArchive::InitAsDefaultInstance() {
}

ASTNodeArrayArchive_ASTRowCoordinateArchive::ASTNodeArrayArchive_ASTRowCoordinateArchive(const ASTNodeArrayArchive_ASTRowCoordinateArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ASTNodeArrayArchive_ASTRowCoordinateArchive::SharedCtor() {
  _cached_size_ = 0;
  row_ = 0;
  absolute_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ASTNodeArrayArchive_ASTRowCoordinateArchive::~ASTNodeArrayArchive_ASTRowCoordinateArchive() {
  SharedDtor();
}

void ASTNodeArrayArchive_ASTRowCoordinateArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ASTNodeArrayArchive_ASTRowCoordinateArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ASTNodeArrayArchive_ASTRowCoordinateArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ASTNodeArrayArchive_ASTRowCoordinateArchive_descriptor_;
}

const ASTNodeArrayArchive_ASTRowCoordinateArchive& ASTNodeArrayArchive_ASTRowCoordinateArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

ASTNodeArrayArchive_ASTRowCoordinateArchive* ASTNodeArrayArchive_ASTRowCoordinateArchive::default_instance_ = NULL;

ASTNodeArrayArchive_ASTRowCoordinateArchive* ASTNodeArrayArchive_ASTRowCoordinateArchive::New() const {
  return new ASTNodeArrayArchive_ASTRowCoordinateArchive;
}

void ASTNodeArrayArchive_ASTRowCoordinateArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    row_ = 0;
    absolute_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ASTNodeArrayArchive_ASTRowCoordinateArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 row = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_absolute;
        break;
      }

      // optional bool absolute = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_absolute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &absolute_)));
          set_has_absolute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ASTNodeArrayArchive_ASTRowCoordinateArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 row = 1;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->row(), output);
  }

  // optional bool absolute = 2 [default = false];
  if (has_absolute()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->absolute(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ASTNodeArrayArchive_ASTRowCoordinateArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 row = 1;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->row(), target);
  }

  // optional bool absolute = 2 [default = false];
  if (has_absolute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->absolute(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ASTNodeArrayArchive_ASTRowCoordinateArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 row = 1;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->row());
    }

    // optional bool absolute = 2 [default = false];
    if (has_absolute()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ASTNodeArrayArchive_ASTRowCoordinateArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ASTNodeArrayArchive_ASTRowCoordinateArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ASTNodeArrayArchive_ASTRowCoordinateArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ASTNodeArrayArchive_ASTRowCoordinateArchive::MergeFrom(const ASTNodeArrayArchive_ASTRowCoordinateArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_row()) {
      set_row(from.row());
    }
    if (from.has_absolute()) {
      set_absolute(from.absolute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ASTNodeArrayArchive_ASTRowCoordinateArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTNodeArrayArchive_ASTRowCoordinateArchive::CopyFrom(const ASTNodeArrayArchive_ASTRowCoordinateArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTRowCoordinateArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ASTNodeArrayArchive_ASTRowCoordinateArchive::Swap(ASTNodeArrayArchive_ASTRowCoordinateArchive* other) {
  if (other != this) {
    std::swap(row_, other->row_);
    std::swap(absolute_, other->absolute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ASTNodeArrayArchive_ASTRowCoordinateArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ASTNodeArrayArchive_ASTRowCoordinateArchive_descriptor_;
  metadata.reflection = ASTNodeArrayArchive_ASTRowCoordinateArchive_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::kTableIdFieldNumber;
const int ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::kASTReferenceWhitespaceAfterSheetNameFieldNumber;
const int ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::kASTReferenceWhitespaceBeforeTableNameFieldNumber;
const int ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::kASTReferenceWhitespaceAfterTableNameFieldNumber;
const int ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::kASTReferenceWhitespaceBeforeCellAddressFieldNumber;
#endif  // !_MSC_VER

ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::InitAsDefaultInstance() {
  table_id_ = const_cast< ::TSCE::CFUUIDArchive*>(&::TSCE::CFUUIDArchive::default_instance());
}

ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive(const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = NULL;
  ast_reference_whitespace_after_sheet_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ast_reference_whitespace_before_table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ast_reference_whitespace_after_table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ast_reference_whitespace_before_cell_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::~ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive() {
  SharedDtor();
}

void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::SharedDtor() {
  if (ast_reference_whitespace_after_sheet_name_ != &::google::protobuf::internal::kEmptyString) {
    delete ast_reference_whitespace_after_sheet_name_;
  }
  if (ast_reference_whitespace_before_table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete ast_reference_whitespace_before_table_name_;
  }
  if (ast_reference_whitespace_after_table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete ast_reference_whitespace_after_table_name_;
  }
  if (ast_reference_whitespace_before_cell_address_ != &::google::protobuf::internal::kEmptyString) {
    delete ast_reference_whitespace_before_cell_address_;
  }
  if (this != default_instance_) {
    delete table_id_;
  }
}

void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive_descriptor_;
}

const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::default_instance_ = NULL;

ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::New() const {
  return new ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive;
}

void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_id()) {
      if (table_id_ != NULL) table_id_->::TSCE::CFUUIDArchive::Clear();
    }
    if (has_ast_reference_whitespace_after_sheet_name()) {
      if (ast_reference_whitespace_after_sheet_name_ != &::google::protobuf::internal::kEmptyString) {
        ast_reference_whitespace_after_sheet_name_->clear();
      }
    }
    if (has_ast_reference_whitespace_before_table_name()) {
      if (ast_reference_whitespace_before_table_name_ != &::google::protobuf::internal::kEmptyString) {
        ast_reference_whitespace_before_table_name_->clear();
      }
    }
    if (has_ast_reference_whitespace_after_table_name()) {
      if (ast_reference_whitespace_after_table_name_ != &::google::protobuf::internal::kEmptyString) {
        ast_reference_whitespace_after_table_name_->clear();
      }
    }
    if (has_ast_reference_whitespace_before_cell_address()) {
      if (ast_reference_whitespace_before_cell_address_ != &::google::protobuf::internal::kEmptyString) {
        ast_reference_whitespace_before_cell_address_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCE.CFUUIDArchive table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AST_reference_whitespace_after_sheet_name;
        break;
      }

      // optional string AST_reference_whitespace_after_sheet_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AST_reference_whitespace_after_sheet_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ast_reference_whitespace_after_sheet_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ast_reference_whitespace_after_sheet_name().data(), this->ast_reference_whitespace_after_sheet_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_AST_reference_whitespace_before_table_name;
        break;
      }

      // optional string AST_reference_whitespace_before_table_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AST_reference_whitespace_before_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ast_reference_whitespace_before_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ast_reference_whitespace_before_table_name().data(), this->ast_reference_whitespace_before_table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_AST_reference_whitespace_after_table_name;
        break;
      }

      // optional string AST_reference_whitespace_after_table_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AST_reference_whitespace_after_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ast_reference_whitespace_after_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ast_reference_whitespace_after_table_name().data(), this->ast_reference_whitespace_after_table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_AST_reference_whitespace_before_cell_address;
        break;
      }

      // optional string AST_reference_whitespace_before_cell_address = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AST_reference_whitespace_before_cell_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ast_reference_whitespace_before_cell_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ast_reference_whitespace_before_cell_address().data(), this->ast_reference_whitespace_before_cell_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCE.CFUUIDArchive table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_id(), output);
  }

  // optional string AST_reference_whitespace_after_sheet_name = 2;
  if (has_ast_reference_whitespace_after_sheet_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ast_reference_whitespace_after_sheet_name().data(), this->ast_reference_whitespace_after_sheet_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ast_reference_whitespace_after_sheet_name(), output);
  }

  // optional string AST_reference_whitespace_before_table_name = 3;
  if (has_ast_reference_whitespace_before_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ast_reference_whitespace_before_table_name().data(), this->ast_reference_whitespace_before_table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ast_reference_whitespace_before_table_name(), output);
  }

  // optional string AST_reference_whitespace_after_table_name = 4;
  if (has_ast_reference_whitespace_after_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ast_reference_whitespace_after_table_name().data(), this->ast_reference_whitespace_after_table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ast_reference_whitespace_after_table_name(), output);
  }

  // optional string AST_reference_whitespace_before_cell_address = 5;
  if (has_ast_reference_whitespace_before_cell_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ast_reference_whitespace_before_cell_address().data(), this->ast_reference_whitespace_before_cell_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ast_reference_whitespace_before_cell_address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCE.CFUUIDArchive table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_id(), target);
  }

  // optional string AST_reference_whitespace_after_sheet_name = 2;
  if (has_ast_reference_whitespace_after_sheet_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ast_reference_whitespace_after_sheet_name().data(), this->ast_reference_whitespace_after_sheet_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ast_reference_whitespace_after_sheet_name(), target);
  }

  // optional string AST_reference_whitespace_before_table_name = 3;
  if (has_ast_reference_whitespace_before_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ast_reference_whitespace_before_table_name().data(), this->ast_reference_whitespace_before_table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ast_reference_whitespace_before_table_name(), target);
  }

  // optional string AST_reference_whitespace_after_table_name = 4;
  if (has_ast_reference_whitespace_after_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ast_reference_whitespace_after_table_name().data(), this->ast_reference_whitespace_after_table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ast_reference_whitespace_after_table_name(), target);
  }

  // optional string AST_reference_whitespace_before_cell_address = 5;
  if (has_ast_reference_whitespace_before_cell_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ast_reference_whitespace_before_cell_address().data(), this->ast_reference_whitespace_before_cell_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ast_reference_whitespace_before_cell_address(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCE.CFUUIDArchive table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_id());
    }

    // optional string AST_reference_whitespace_after_sheet_name = 2;
    if (has_ast_reference_whitespace_after_sheet_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ast_reference_whitespace_after_sheet_name());
    }

    // optional string AST_reference_whitespace_before_table_name = 3;
    if (has_ast_reference_whitespace_before_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ast_reference_whitespace_before_table_name());
    }

    // optional string AST_reference_whitespace_after_table_name = 4;
    if (has_ast_reference_whitespace_after_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ast_reference_whitespace_after_table_name());
    }

    // optional string AST_reference_whitespace_before_cell_address = 5;
    if (has_ast_reference_whitespace_before_cell_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ast_reference_whitespace_before_cell_address());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::MergeFrom(const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      mutable_table_id()->::TSCE::CFUUIDArchive::MergeFrom(from.table_id());
    }
    if (from.has_ast_reference_whitespace_after_sheet_name()) {
      set_ast_reference_whitespace_after_sheet_name(from.ast_reference_whitespace_after_sheet_name());
    }
    if (from.has_ast_reference_whitespace_before_table_name()) {
      set_ast_reference_whitespace_before_table_name(from.ast_reference_whitespace_before_table_name());
    }
    if (from.has_ast_reference_whitespace_after_table_name()) {
      set_ast_reference_whitespace_after_table_name(from.ast_reference_whitespace_after_table_name());
    }
    if (from.has_ast_reference_whitespace_before_cell_address()) {
      set_ast_reference_whitespace_before_cell_address(from.ast_reference_whitespace_before_cell_address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::CopyFrom(const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::Swap(ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(ast_reference_whitespace_after_sheet_name_, other->ast_reference_whitespace_after_sheet_name_);
    std::swap(ast_reference_whitespace_before_table_name_, other->ast_reference_whitespace_before_table_name_);
    std::swap(ast_reference_whitespace_after_table_name_, other->ast_reference_whitespace_after_table_name_);
    std::swap(ast_reference_whitespace_before_cell_address_, other->ast_reference_whitespace_before_cell_address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive_descriptor_;
  metadata.reflection = ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ASTNodeArrayArchive_ASTNodeArchive::kASTNodeTypeFieldNumber;
const int ASTNodeArrayArchive_ASTNodeArchive::kASTFunctionNodeIndexFieldNumber;
const int ASTNodeArrayArchive_ASTNodeArchive::kASTFunctionNodeNumArgsFieldNumber;
const int ASTNodeArrayArchive_ASTNodeArchive::kASTNumberNodeNumberFieldNumber;
const int ASTNodeArrayArchive_ASTNodeArchive::kASTBooleanNodeBooleanFieldNumber;
const int ASTNodeArrayArchive_ASTNodeArchive::kASTStringNodeStringFieldNumber;
const int ASTNodeArrayArchive_ASTNodeArchive::kASTDateNodeDateNumFieldNumber;
const int ASTNodeArrayArchive_ASTNodeArchive::kASTDateNodeSuppressDateFormatFieldNumber;
const int ASTNodeArrayArchive_ASTNodeArchive::kASTDateNodeSuppressTimeFormatFieldNumber;
const int ASTNodeArrayArchive_ASTNodeArchive::kASTDateNodeDateTimeFormatFieldNumber;
const int ASTNodeArrayArchive_ASTNodeArchive::kASTDurationNodeUnitNumFieldNumber;
const int ASTNodeArrayArchive_ASTNodeArchive::kASTDurationNodeUnitFieldNumber;
const int ASTNodeArrayArchive_ASTNodeArchive::kASTDurationNodeStyleFieldNumber;
const int ASTNodeArrayArchive_ASTNodeArchive::kASTDurationNodeDurationUnitLargestFieldNumber;
const int ASTNodeArrayArchive_ASTNodeArchive::kASTDurationNodeDurationUnitSmallestFieldNumber;
const int ASTNodeArrayArchive_ASTNodeArchive::kASTDurationNodeUseAutomaticUnitsFieldNumber;
const int ASTNodeArrayArchive_ASTNodeArchive::kASTTokenNodeBooleanFieldNumber;
const int ASTNodeArrayArchive_ASTNodeArchive::kASTArrayNodeNumColFieldNumber;
const int ASTNodeArrayArchive_ASTNodeArchive::kASTArrayNodeNumRowFieldNumber;
const int ASTNodeArrayArchive_ASTNodeArchive::kASTListNodeNumArgsFieldNumber;
const int ASTNodeArrayArchive_ASTNodeArchive::kASTThunkNodeArrayFieldNumber;
const int ASTNodeArrayArchive_ASTNodeArchive::kASTLocalCellReferenceNodeReferenceFieldNumber;
const int ASTNodeArrayArchive_ASTNodeArchive::kASTCrossTableCellReferenceNodeReferenceFieldNumber;
const int ASTNodeArrayArchive_ASTNodeArchive::kASTUnknownFunctionNodeStringFieldNumber;
const int ASTNodeArrayArchive_ASTNodeArchive::kASTUnknownFunctionNodeNumArgsFieldNumber;
const int ASTNodeArrayArchive_ASTNodeArchive::kASTWhitespaceFieldNumber;
const int ASTNodeArrayArchive_ASTNodeArchive::kASTColumnFieldNumber;
const int ASTNodeArrayArchive_ASTNodeArchive::kASTRowFieldNumber;
const int ASTNodeArrayArchive_ASTNodeArchive::kASTCrossTableReferenceExtraInfoFieldNumber;
#endif  // !_MSC_VER

ASTNodeArrayArchive_ASTNodeArchive::ASTNodeArrayArchive_ASTNodeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ASTNodeArrayArchive_ASTNodeArchive::InitAsDefaultInstance() {
  ast_thunk_node_array_ = const_cast< ::TSCE::ASTNodeArrayArchive*>(&::TSCE::ASTNodeArrayArchive::default_instance());
  ast_local_cell_reference_node_reference_ = const_cast< ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive*>(&::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::default_instance());
  ast_cross_table_cell_reference_node_reference_ = const_cast< ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive*>(&::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::default_instance());
  ast_column_ = const_cast< ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive*>(&::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive::default_instance());
  ast_row_ = const_cast< ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive*>(&::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive::default_instance());
  ast_cross_table_reference_extra_info_ = const_cast< ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive*>(&::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::default_instance());
}

ASTNodeArrayArchive_ASTNodeArchive::ASTNodeArrayArchive_ASTNodeArchive(const ASTNodeArrayArchive_ASTNodeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ASTNodeArrayArchive_ASTNodeArchive::SharedCtor() {
  _cached_size_ = 0;
  ast_node_type_ = 1;
  ast_function_node_index_ = 0u;
  ast_function_node_numargs_ = 0u;
  ast_number_node_number_ = 0;
  ast_boolean_node_boolean_ = false;
  ast_string_node_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ast_date_node_datenum_ = 0;
  ast_date_node_suppress_date_format_ = false;
  ast_date_node_suppress_time_format_ = false;
  ast_date_node_date_time_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ast_duration_node_unitnum_ = 0;
  ast_duration_node_unit_ = 0;
  ast_duration_node_style_ = 0u;
  ast_duration_node_duration_unit_largest_ = 0u;
  ast_duration_node_duration_unit_smallest_ = 0u;
  ast_duration_node_use_automatic_units_ = false;
  ast_token_node_boolean_ = false;
  ast_array_node_numcol_ = 0u;
  ast_array_node_numrow_ = 0u;
  ast_list_node_numargs_ = 0u;
  ast_thunk_node_array_ = NULL;
  ast_local_cell_reference_node_reference_ = NULL;
  ast_cross_table_cell_reference_node_reference_ = NULL;
  ast_unknown_function_node_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ast_unknown_function_node_numargs_ = 0u;
  ast_whitespace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ast_column_ = NULL;
  ast_row_ = NULL;
  ast_cross_table_reference_extra_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ASTNodeArrayArchive_ASTNodeArchive::~ASTNodeArrayArchive_ASTNodeArchive() {
  SharedDtor();
}

void ASTNodeArrayArchive_ASTNodeArchive::SharedDtor() {
  if (ast_string_node_string_ != &::google::protobuf::internal::kEmptyString) {
    delete ast_string_node_string_;
  }
  if (ast_date_node_date_time_format_ != &::google::protobuf::internal::kEmptyString) {
    delete ast_date_node_date_time_format_;
  }
  if (ast_unknown_function_node_string_ != &::google::protobuf::internal::kEmptyString) {
    delete ast_unknown_function_node_string_;
  }
  if (ast_whitespace_ != &::google::protobuf::internal::kEmptyString) {
    delete ast_whitespace_;
  }
  if (this != default_instance_) {
    delete ast_thunk_node_array_;
    delete ast_local_cell_reference_node_reference_;
    delete ast_cross_table_cell_reference_node_reference_;
    delete ast_column_;
    delete ast_row_;
    delete ast_cross_table_reference_extra_info_;
  }
}

void ASTNodeArrayArchive_ASTNodeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ASTNodeArrayArchive_ASTNodeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ASTNodeArrayArchive_ASTNodeArchive_descriptor_;
}

const ASTNodeArrayArchive_ASTNodeArchive& ASTNodeArrayArchive_ASTNodeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

ASTNodeArrayArchive_ASTNodeArchive* ASTNodeArrayArchive_ASTNodeArchive::default_instance_ = NULL;

ASTNodeArrayArchive_ASTNodeArchive* ASTNodeArrayArchive_ASTNodeArchive::New() const {
  return new ASTNodeArrayArchive_ASTNodeArchive;
}

void ASTNodeArrayArchive_ASTNodeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ast_node_type_ = 1;
    ast_function_node_index_ = 0u;
    ast_function_node_numargs_ = 0u;
    ast_number_node_number_ = 0;
    ast_boolean_node_boolean_ = false;
    if (has_ast_string_node_string()) {
      if (ast_string_node_string_ != &::google::protobuf::internal::kEmptyString) {
        ast_string_node_string_->clear();
      }
    }
    ast_date_node_datenum_ = 0;
    ast_date_node_suppress_date_format_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ast_date_node_suppress_time_format_ = false;
    if (has_ast_date_node_date_time_format()) {
      if (ast_date_node_date_time_format_ != &::google::protobuf::internal::kEmptyString) {
        ast_date_node_date_time_format_->clear();
      }
    }
    ast_duration_node_unitnum_ = 0;
    ast_duration_node_unit_ = 0;
    ast_duration_node_style_ = 0u;
    ast_duration_node_duration_unit_largest_ = 0u;
    ast_duration_node_duration_unit_smallest_ = 0u;
    ast_duration_node_use_automatic_units_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    ast_token_node_boolean_ = false;
    ast_array_node_numcol_ = 0u;
    ast_array_node_numrow_ = 0u;
    ast_list_node_numargs_ = 0u;
    if (has_ast_thunk_node_array()) {
      if (ast_thunk_node_array_ != NULL) ast_thunk_node_array_->::TSCE::ASTNodeArrayArchive::Clear();
    }
    if (has_ast_local_cell_reference_node_reference()) {
      if (ast_local_cell_reference_node_reference_ != NULL) ast_local_cell_reference_node_reference_->::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::Clear();
    }
    if (has_ast_cross_table_cell_reference_node_reference()) {
      if (ast_cross_table_cell_reference_node_reference_ != NULL) ast_cross_table_cell_reference_node_reference_->::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::Clear();
    }
    if (has_ast_unknown_function_node_string()) {
      if (ast_unknown_function_node_string_ != &::google::protobuf::internal::kEmptyString) {
        ast_unknown_function_node_string_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    ast_unknown_function_node_numargs_ = 0u;
    if (has_ast_whitespace()) {
      if (ast_whitespace_ != &::google::protobuf::internal::kEmptyString) {
        ast_whitespace_->clear();
      }
    }
    if (has_ast_column()) {
      if (ast_column_ != NULL) ast_column_->::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive::Clear();
    }
    if (has_ast_row()) {
      if (ast_row_ != NULL) ast_row_->::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive::Clear();
    }
    if (has_ast_cross_table_reference_extra_info()) {
      if (ast_cross_table_reference_extra_info_ != NULL) ast_cross_table_reference_extra_info_->::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ASTNodeArrayArchive_ASTNodeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCE.ASTNodeArrayArchive.ASTNodeType AST_node_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSCE::ASTNodeArrayArchive_ASTNodeType_IsValid(value)) {
            set_ast_node_type(static_cast< ::TSCE::ASTNodeArrayArchive_ASTNodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AST_function_node_index;
        break;
      }

      // optional uint32 AST_function_node_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AST_function_node_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ast_function_node_index_)));
          set_has_ast_function_node_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_AST_function_node_numArgs;
        break;
      }

      // optional uint32 AST_function_node_numArgs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AST_function_node_numArgs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ast_function_node_numargs_)));
          set_has_ast_function_node_numargs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_AST_number_node_number;
        break;
      }

      // optional double AST_number_node_number = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AST_number_node_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ast_number_node_number_)));
          set_has_ast_number_node_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_AST_boolean_node_boolean;
        break;
      }

      // optional bool AST_boolean_node_boolean = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AST_boolean_node_boolean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ast_boolean_node_boolean_)));
          set_has_ast_boolean_node_boolean();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_AST_string_node_string;
        break;
      }

      // optional string AST_string_node_string = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AST_string_node_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ast_string_node_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ast_string_node_string().data(), this->ast_string_node_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_AST_date_node_dateNum;
        break;
      }

      // optional double AST_date_node_dateNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AST_date_node_dateNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ast_date_node_datenum_)));
          set_has_ast_date_node_datenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_AST_duration_node_unitNum;
        break;
      }

      // optional double AST_duration_node_unitNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AST_duration_node_unitNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ast_duration_node_unitnum_)));
          set_has_ast_duration_node_unitnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_AST_duration_node_unit;
        break;
      }

      // optional int32 AST_duration_node_unit = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AST_duration_node_unit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ast_duration_node_unit_)));
          set_has_ast_duration_node_unit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_AST_token_node_boolean;
        break;
      }

      // optional bool AST_token_node_boolean = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AST_token_node_boolean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ast_token_node_boolean_)));
          set_has_ast_token_node_boolean();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_AST_array_node_numCol;
        break;
      }

      // optional uint32 AST_array_node_numCol = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AST_array_node_numCol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ast_array_node_numcol_)));
          set_has_ast_array_node_numcol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_AST_array_node_numRow;
        break;
      }

      // optional uint32 AST_array_node_numRow = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AST_array_node_numRow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ast_array_node_numrow_)));
          set_has_ast_array_node_numrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_AST_list_node_numArgs;
        break;
      }

      // optional uint32 AST_list_node_numArgs = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AST_list_node_numArgs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ast_list_node_numargs_)));
          set_has_ast_list_node_numargs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_AST_thunk_node_array;
        break;
      }

      // optional .TSCE.ASTNodeArrayArchive AST_thunk_node_array = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AST_thunk_node_array:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ast_thunk_node_array()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_AST_local_cell_reference_node_reference;
        break;
      }

      // optional .TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive AST_local_cell_reference_node_reference = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AST_local_cell_reference_node_reference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ast_local_cell_reference_node_reference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_AST_cross_table_cell_reference_node_reference;
        break;
      }

      // optional .TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive AST_cross_table_cell_reference_node_reference = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AST_cross_table_cell_reference_node_reference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ast_cross_table_cell_reference_node_reference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_AST_unknown_function_node_string;
        break;
      }

      // optional string AST_unknown_function_node_string = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AST_unknown_function_node_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ast_unknown_function_node_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ast_unknown_function_node_string().data(), this->ast_unknown_function_node_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_AST_unknown_function_node_numArgs;
        break;
      }

      // optional uint32 AST_unknown_function_node_numArgs = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AST_unknown_function_node_numArgs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ast_unknown_function_node_numargs_)));
          set_has_ast_unknown_function_node_numargs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_AST_date_node_suppress_date_format;
        break;
      }

      // optional bool AST_date_node_suppress_date_format = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AST_date_node_suppress_date_format:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ast_date_node_suppress_date_format_)));
          set_has_ast_date_node_suppress_date_format();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_AST_date_node_suppress_time_format;
        break;
      }

      // optional bool AST_date_node_suppress_time_format = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AST_date_node_suppress_time_format:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ast_date_node_suppress_time_format_)));
          set_has_ast_date_node_suppress_time_format();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_AST_date_node_date_time_format;
        break;
      }

      // optional string AST_date_node_date_time_format = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AST_date_node_date_time_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ast_date_node_date_time_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ast_date_node_date_time_format().data(), this->ast_date_node_date_time_format().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_AST_duration_node_style;
        break;
      }

      // optional uint32 AST_duration_node_style = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AST_duration_node_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ast_duration_node_style_)));
          set_has_ast_duration_node_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_AST_duration_node_duration_unit_largest;
        break;
      }

      // optional uint32 AST_duration_node_duration_unit_largest = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AST_duration_node_duration_unit_largest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ast_duration_node_duration_unit_largest_)));
          set_has_ast_duration_node_duration_unit_largest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_AST_duration_node_duration_unit_smallest;
        break;
      }

      // optional uint32 AST_duration_node_duration_unit_smallest = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AST_duration_node_duration_unit_smallest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ast_duration_node_duration_unit_smallest_)));
          set_has_ast_duration_node_duration_unit_smallest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_AST_whitespace;
        break;
      }

      // optional string AST_whitespace = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AST_whitespace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ast_whitespace()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ast_whitespace().data(), this->ast_whitespace().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_AST_column;
        break;
      }

      // optional .TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive AST_column = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AST_column:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ast_column()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_AST_row;
        break;
      }

      // optional .TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive AST_row = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AST_row:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ast_row()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_AST_cross_table_reference_extra_info;
        break;
      }

      // optional .TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive AST_cross_table_reference_extra_info = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AST_cross_table_reference_extra_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ast_cross_table_reference_extra_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_AST_duration_node_use_automatic_units;
        break;
      }

      // optional bool AST_duration_node_use_automatic_units = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AST_duration_node_use_automatic_units:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ast_duration_node_use_automatic_units_)));
          set_has_ast_duration_node_use_automatic_units();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ASTNodeArrayArchive_ASTNodeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCE.ASTNodeArrayArchive.ASTNodeType AST_node_type = 1;
  if (has_ast_node_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ast_node_type(), output);
  }

  // optional uint32 AST_function_node_index = 2;
  if (has_ast_function_node_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ast_function_node_index(), output);
  }

  // optional uint32 AST_function_node_numArgs = 3;
  if (has_ast_function_node_numargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ast_function_node_numargs(), output);
  }

  // optional double AST_number_node_number = 4;
  if (has_ast_number_node_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ast_number_node_number(), output);
  }

  // optional bool AST_boolean_node_boolean = 5;
  if (has_ast_boolean_node_boolean()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ast_boolean_node_boolean(), output);
  }

  // optional string AST_string_node_string = 6;
  if (has_ast_string_node_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ast_string_node_string().data(), this->ast_string_node_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->ast_string_node_string(), output);
  }

  // optional double AST_date_node_dateNum = 7;
  if (has_ast_date_node_datenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->ast_date_node_datenum(), output);
  }

  // optional double AST_duration_node_unitNum = 8;
  if (has_ast_duration_node_unitnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->ast_duration_node_unitnum(), output);
  }

  // optional int32 AST_duration_node_unit = 9;
  if (has_ast_duration_node_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ast_duration_node_unit(), output);
  }

  // optional bool AST_token_node_boolean = 10;
  if (has_ast_token_node_boolean()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->ast_token_node_boolean(), output);
  }

  // optional uint32 AST_array_node_numCol = 11;
  if (has_ast_array_node_numcol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->ast_array_node_numcol(), output);
  }

  // optional uint32 AST_array_node_numRow = 12;
  if (has_ast_array_node_numrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->ast_array_node_numrow(), output);
  }

  // optional uint32 AST_list_node_numArgs = 13;
  if (has_ast_list_node_numargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->ast_list_node_numargs(), output);
  }

  // optional .TSCE.ASTNodeArrayArchive AST_thunk_node_array = 14;
  if (has_ast_thunk_node_array()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->ast_thunk_node_array(), output);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive AST_local_cell_reference_node_reference = 15;
  if (has_ast_local_cell_reference_node_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->ast_local_cell_reference_node_reference(), output);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive AST_cross_table_cell_reference_node_reference = 16;
  if (has_ast_cross_table_cell_reference_node_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->ast_cross_table_cell_reference_node_reference(), output);
  }

  // optional string AST_unknown_function_node_string = 17;
  if (has_ast_unknown_function_node_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ast_unknown_function_node_string().data(), this->ast_unknown_function_node_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->ast_unknown_function_node_string(), output);
  }

  // optional uint32 AST_unknown_function_node_numArgs = 18;
  if (has_ast_unknown_function_node_numargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->ast_unknown_function_node_numargs(), output);
  }

  // optional bool AST_date_node_suppress_date_format = 19;
  if (has_ast_date_node_suppress_date_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->ast_date_node_suppress_date_format(), output);
  }

  // optional bool AST_date_node_suppress_time_format = 20;
  if (has_ast_date_node_suppress_time_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->ast_date_node_suppress_time_format(), output);
  }

  // optional string AST_date_node_date_time_format = 21;
  if (has_ast_date_node_date_time_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ast_date_node_date_time_format().data(), this->ast_date_node_date_time_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->ast_date_node_date_time_format(), output);
  }

  // optional uint32 AST_duration_node_style = 22;
  if (has_ast_duration_node_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->ast_duration_node_style(), output);
  }

  // optional uint32 AST_duration_node_duration_unit_largest = 23;
  if (has_ast_duration_node_duration_unit_largest()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->ast_duration_node_duration_unit_largest(), output);
  }

  // optional uint32 AST_duration_node_duration_unit_smallest = 24;
  if (has_ast_duration_node_duration_unit_smallest()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->ast_duration_node_duration_unit_smallest(), output);
  }

  // optional string AST_whitespace = 25;
  if (has_ast_whitespace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ast_whitespace().data(), this->ast_whitespace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->ast_whitespace(), output);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive AST_column = 26;
  if (has_ast_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->ast_column(), output);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive AST_row = 27;
  if (has_ast_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->ast_row(), output);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive AST_cross_table_reference_extra_info = 28;
  if (has_ast_cross_table_reference_extra_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->ast_cross_table_reference_extra_info(), output);
  }

  // optional bool AST_duration_node_use_automatic_units = 29;
  if (has_ast_duration_node_use_automatic_units()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->ast_duration_node_use_automatic_units(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ASTNodeArrayArchive_ASTNodeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCE.ASTNodeArrayArchive.ASTNodeType AST_node_type = 1;
  if (has_ast_node_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ast_node_type(), target);
  }

  // optional uint32 AST_function_node_index = 2;
  if (has_ast_function_node_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ast_function_node_index(), target);
  }

  // optional uint32 AST_function_node_numArgs = 3;
  if (has_ast_function_node_numargs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ast_function_node_numargs(), target);
  }

  // optional double AST_number_node_number = 4;
  if (has_ast_number_node_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ast_number_node_number(), target);
  }

  // optional bool AST_boolean_node_boolean = 5;
  if (has_ast_boolean_node_boolean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ast_boolean_node_boolean(), target);
  }

  // optional string AST_string_node_string = 6;
  if (has_ast_string_node_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ast_string_node_string().data(), this->ast_string_node_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ast_string_node_string(), target);
  }

  // optional double AST_date_node_dateNum = 7;
  if (has_ast_date_node_datenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->ast_date_node_datenum(), target);
  }

  // optional double AST_duration_node_unitNum = 8;
  if (has_ast_duration_node_unitnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->ast_duration_node_unitnum(), target);
  }

  // optional int32 AST_duration_node_unit = 9;
  if (has_ast_duration_node_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ast_duration_node_unit(), target);
  }

  // optional bool AST_token_node_boolean = 10;
  if (has_ast_token_node_boolean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->ast_token_node_boolean(), target);
  }

  // optional uint32 AST_array_node_numCol = 11;
  if (has_ast_array_node_numcol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->ast_array_node_numcol(), target);
  }

  // optional uint32 AST_array_node_numRow = 12;
  if (has_ast_array_node_numrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->ast_array_node_numrow(), target);
  }

  // optional uint32 AST_list_node_numArgs = 13;
  if (has_ast_list_node_numargs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->ast_list_node_numargs(), target);
  }

  // optional .TSCE.ASTNodeArrayArchive AST_thunk_node_array = 14;
  if (has_ast_thunk_node_array()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->ast_thunk_node_array(), target);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive AST_local_cell_reference_node_reference = 15;
  if (has_ast_local_cell_reference_node_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->ast_local_cell_reference_node_reference(), target);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive AST_cross_table_cell_reference_node_reference = 16;
  if (has_ast_cross_table_cell_reference_node_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->ast_cross_table_cell_reference_node_reference(), target);
  }

  // optional string AST_unknown_function_node_string = 17;
  if (has_ast_unknown_function_node_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ast_unknown_function_node_string().data(), this->ast_unknown_function_node_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->ast_unknown_function_node_string(), target);
  }

  // optional uint32 AST_unknown_function_node_numArgs = 18;
  if (has_ast_unknown_function_node_numargs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->ast_unknown_function_node_numargs(), target);
  }

  // optional bool AST_date_node_suppress_date_format = 19;
  if (has_ast_date_node_suppress_date_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->ast_date_node_suppress_date_format(), target);
  }

  // optional bool AST_date_node_suppress_time_format = 20;
  if (has_ast_date_node_suppress_time_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->ast_date_node_suppress_time_format(), target);
  }

  // optional string AST_date_node_date_time_format = 21;
  if (has_ast_date_node_date_time_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ast_date_node_date_time_format().data(), this->ast_date_node_date_time_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->ast_date_node_date_time_format(), target);
  }

  // optional uint32 AST_duration_node_style = 22;
  if (has_ast_duration_node_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->ast_duration_node_style(), target);
  }

  // optional uint32 AST_duration_node_duration_unit_largest = 23;
  if (has_ast_duration_node_duration_unit_largest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->ast_duration_node_duration_unit_largest(), target);
  }

  // optional uint32 AST_duration_node_duration_unit_smallest = 24;
  if (has_ast_duration_node_duration_unit_smallest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->ast_duration_node_duration_unit_smallest(), target);
  }

  // optional string AST_whitespace = 25;
  if (has_ast_whitespace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ast_whitespace().data(), this->ast_whitespace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->ast_whitespace(), target);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive AST_column = 26;
  if (has_ast_column()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->ast_column(), target);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive AST_row = 27;
  if (has_ast_row()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->ast_row(), target);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive AST_cross_table_reference_extra_info = 28;
  if (has_ast_cross_table_reference_extra_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->ast_cross_table_reference_extra_info(), target);
  }

  // optional bool AST_duration_node_use_automatic_units = 29;
  if (has_ast_duration_node_use_automatic_units()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->ast_duration_node_use_automatic_units(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ASTNodeArrayArchive_ASTNodeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCE.ASTNodeArrayArchive.ASTNodeType AST_node_type = 1;
    if (has_ast_node_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ast_node_type());
    }

    // optional uint32 AST_function_node_index = 2;
    if (has_ast_function_node_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ast_function_node_index());
    }

    // optional uint32 AST_function_node_numArgs = 3;
    if (has_ast_function_node_numargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ast_function_node_numargs());
    }

    // optional double AST_number_node_number = 4;
    if (has_ast_number_node_number()) {
      total_size += 1 + 8;
    }

    // optional bool AST_boolean_node_boolean = 5;
    if (has_ast_boolean_node_boolean()) {
      total_size += 1 + 1;
    }

    // optional string AST_string_node_string = 6;
    if (has_ast_string_node_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ast_string_node_string());
    }

    // optional double AST_date_node_dateNum = 7;
    if (has_ast_date_node_datenum()) {
      total_size += 1 + 8;
    }

    // optional bool AST_date_node_suppress_date_format = 19;
    if (has_ast_date_node_suppress_date_format()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool AST_date_node_suppress_time_format = 20;
    if (has_ast_date_node_suppress_time_format()) {
      total_size += 2 + 1;
    }

    // optional string AST_date_node_date_time_format = 21;
    if (has_ast_date_node_date_time_format()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ast_date_node_date_time_format());
    }

    // optional double AST_duration_node_unitNum = 8;
    if (has_ast_duration_node_unitnum()) {
      total_size += 1 + 8;
    }

    // optional int32 AST_duration_node_unit = 9;
    if (has_ast_duration_node_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ast_duration_node_unit());
    }

    // optional uint32 AST_duration_node_style = 22;
    if (has_ast_duration_node_style()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ast_duration_node_style());
    }

    // optional uint32 AST_duration_node_duration_unit_largest = 23;
    if (has_ast_duration_node_duration_unit_largest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ast_duration_node_duration_unit_largest());
    }

    // optional uint32 AST_duration_node_duration_unit_smallest = 24;
    if (has_ast_duration_node_duration_unit_smallest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ast_duration_node_duration_unit_smallest());
    }

    // optional bool AST_duration_node_use_automatic_units = 29;
    if (has_ast_duration_node_use_automatic_units()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool AST_token_node_boolean = 10;
    if (has_ast_token_node_boolean()) {
      total_size += 1 + 1;
    }

    // optional uint32 AST_array_node_numCol = 11;
    if (has_ast_array_node_numcol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ast_array_node_numcol());
    }

    // optional uint32 AST_array_node_numRow = 12;
    if (has_ast_array_node_numrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ast_array_node_numrow());
    }

    // optional uint32 AST_list_node_numArgs = 13;
    if (has_ast_list_node_numargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ast_list_node_numargs());
    }

    // optional .TSCE.ASTNodeArrayArchive AST_thunk_node_array = 14;
    if (has_ast_thunk_node_array()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ast_thunk_node_array());
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive AST_local_cell_reference_node_reference = 15;
    if (has_ast_local_cell_reference_node_reference()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ast_local_cell_reference_node_reference());
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive AST_cross_table_cell_reference_node_reference = 16;
    if (has_ast_cross_table_cell_reference_node_reference()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ast_cross_table_cell_reference_node_reference());
    }

    // optional string AST_unknown_function_node_string = 17;
    if (has_ast_unknown_function_node_string()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ast_unknown_function_node_string());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 AST_unknown_function_node_numArgs = 18;
    if (has_ast_unknown_function_node_numargs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ast_unknown_function_node_numargs());
    }

    // optional string AST_whitespace = 25;
    if (has_ast_whitespace()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ast_whitespace());
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive AST_column = 26;
    if (has_ast_column()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ast_column());
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive AST_row = 27;
    if (has_ast_row()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ast_row());
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive AST_cross_table_reference_extra_info = 28;
    if (has_ast_cross_table_reference_extra_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ast_cross_table_reference_extra_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ASTNodeArrayArchive_ASTNodeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ASTNodeArrayArchive_ASTNodeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ASTNodeArrayArchive_ASTNodeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ASTNodeArrayArchive_ASTNodeArchive::MergeFrom(const ASTNodeArrayArchive_ASTNodeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ast_node_type()) {
      set_ast_node_type(from.ast_node_type());
    }
    if (from.has_ast_function_node_index()) {
      set_ast_function_node_index(from.ast_function_node_index());
    }
    if (from.has_ast_function_node_numargs()) {
      set_ast_function_node_numargs(from.ast_function_node_numargs());
    }
    if (from.has_ast_number_node_number()) {
      set_ast_number_node_number(from.ast_number_node_number());
    }
    if (from.has_ast_boolean_node_boolean()) {
      set_ast_boolean_node_boolean(from.ast_boolean_node_boolean());
    }
    if (from.has_ast_string_node_string()) {
      set_ast_string_node_string(from.ast_string_node_string());
    }
    if (from.has_ast_date_node_datenum()) {
      set_ast_date_node_datenum(from.ast_date_node_datenum());
    }
    if (from.has_ast_date_node_suppress_date_format()) {
      set_ast_date_node_suppress_date_format(from.ast_date_node_suppress_date_format());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ast_date_node_suppress_time_format()) {
      set_ast_date_node_suppress_time_format(from.ast_date_node_suppress_time_format());
    }
    if (from.has_ast_date_node_date_time_format()) {
      set_ast_date_node_date_time_format(from.ast_date_node_date_time_format());
    }
    if (from.has_ast_duration_node_unitnum()) {
      set_ast_duration_node_unitnum(from.ast_duration_node_unitnum());
    }
    if (from.has_ast_duration_node_unit()) {
      set_ast_duration_node_unit(from.ast_duration_node_unit());
    }
    if (from.has_ast_duration_node_style()) {
      set_ast_duration_node_style(from.ast_duration_node_style());
    }
    if (from.has_ast_duration_node_duration_unit_largest()) {
      set_ast_duration_node_duration_unit_largest(from.ast_duration_node_duration_unit_largest());
    }
    if (from.has_ast_duration_node_duration_unit_smallest()) {
      set_ast_duration_node_duration_unit_smallest(from.ast_duration_node_duration_unit_smallest());
    }
    if (from.has_ast_duration_node_use_automatic_units()) {
      set_ast_duration_node_use_automatic_units(from.ast_duration_node_use_automatic_units());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ast_token_node_boolean()) {
      set_ast_token_node_boolean(from.ast_token_node_boolean());
    }
    if (from.has_ast_array_node_numcol()) {
      set_ast_array_node_numcol(from.ast_array_node_numcol());
    }
    if (from.has_ast_array_node_numrow()) {
      set_ast_array_node_numrow(from.ast_array_node_numrow());
    }
    if (from.has_ast_list_node_numargs()) {
      set_ast_list_node_numargs(from.ast_list_node_numargs());
    }
    if (from.has_ast_thunk_node_array()) {
      mutable_ast_thunk_node_array()->::TSCE::ASTNodeArrayArchive::MergeFrom(from.ast_thunk_node_array());
    }
    if (from.has_ast_local_cell_reference_node_reference()) {
      mutable_ast_local_cell_reference_node_reference()->::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::MergeFrom(from.ast_local_cell_reference_node_reference());
    }
    if (from.has_ast_cross_table_cell_reference_node_reference()) {
      mutable_ast_cross_table_cell_reference_node_reference()->::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::MergeFrom(from.ast_cross_table_cell_reference_node_reference());
    }
    if (from.has_ast_unknown_function_node_string()) {
      set_ast_unknown_function_node_string(from.ast_unknown_function_node_string());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ast_unknown_function_node_numargs()) {
      set_ast_unknown_function_node_numargs(from.ast_unknown_function_node_numargs());
    }
    if (from.has_ast_whitespace()) {
      set_ast_whitespace(from.ast_whitespace());
    }
    if (from.has_ast_column()) {
      mutable_ast_column()->::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive::MergeFrom(from.ast_column());
    }
    if (from.has_ast_row()) {
      mutable_ast_row()->::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive::MergeFrom(from.ast_row());
    }
    if (from.has_ast_cross_table_reference_extra_info()) {
      mutable_ast_cross_table_reference_extra_info()->::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::MergeFrom(from.ast_cross_table_reference_extra_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ASTNodeArrayArchive_ASTNodeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTNodeArrayArchive_ASTNodeArchive::CopyFrom(const ASTNodeArrayArchive_ASTNodeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTNodeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_ast_thunk_node_array()) {
    if (!this->ast_thunk_node_array().IsInitialized()) return false;
  }
  if (has_ast_local_cell_reference_node_reference()) {
    if (!this->ast_local_cell_reference_node_reference().IsInitialized()) return false;
  }
  if (has_ast_cross_table_cell_reference_node_reference()) {
    if (!this->ast_cross_table_cell_reference_node_reference().IsInitialized()) return false;
  }
  if (has_ast_column()) {
    if (!this->ast_column().IsInitialized()) return false;
  }
  if (has_ast_row()) {
    if (!this->ast_row().IsInitialized()) return false;
  }
  if (has_ast_cross_table_reference_extra_info()) {
    if (!this->ast_cross_table_reference_extra_info().IsInitialized()) return false;
  }
  return true;
}

void ASTNodeArrayArchive_ASTNodeArchive::Swap(ASTNodeArrayArchive_ASTNodeArchive* other) {
  if (other != this) {
    std::swap(ast_node_type_, other->ast_node_type_);
    std::swap(ast_function_node_index_, other->ast_function_node_index_);
    std::swap(ast_function_node_numargs_, other->ast_function_node_numargs_);
    std::swap(ast_number_node_number_, other->ast_number_node_number_);
    std::swap(ast_boolean_node_boolean_, other->ast_boolean_node_boolean_);
    std::swap(ast_string_node_string_, other->ast_string_node_string_);
    std::swap(ast_date_node_datenum_, other->ast_date_node_datenum_);
    std::swap(ast_date_node_suppress_date_format_, other->ast_date_node_suppress_date_format_);
    std::swap(ast_date_node_suppress_time_format_, other->ast_date_node_suppress_time_format_);
    std::swap(ast_date_node_date_time_format_, other->ast_date_node_date_time_format_);
    std::swap(ast_duration_node_unitnum_, other->ast_duration_node_unitnum_);
    std::swap(ast_duration_node_unit_, other->ast_duration_node_unit_);
    std::swap(ast_duration_node_style_, other->ast_duration_node_style_);
    std::swap(ast_duration_node_duration_unit_largest_, other->ast_duration_node_duration_unit_largest_);
    std::swap(ast_duration_node_duration_unit_smallest_, other->ast_duration_node_duration_unit_smallest_);
    std::swap(ast_duration_node_use_automatic_units_, other->ast_duration_node_use_automatic_units_);
    std::swap(ast_token_node_boolean_, other->ast_token_node_boolean_);
    std::swap(ast_array_node_numcol_, other->ast_array_node_numcol_);
    std::swap(ast_array_node_numrow_, other->ast_array_node_numrow_);
    std::swap(ast_list_node_numargs_, other->ast_list_node_numargs_);
    std::swap(ast_thunk_node_array_, other->ast_thunk_node_array_);
    std::swap(ast_local_cell_reference_node_reference_, other->ast_local_cell_reference_node_reference_);
    std::swap(ast_cross_table_cell_reference_node_reference_, other->ast_cross_table_cell_reference_node_reference_);
    std::swap(ast_unknown_function_node_string_, other->ast_unknown_function_node_string_);
    std::swap(ast_unknown_function_node_numargs_, other->ast_unknown_function_node_numargs_);
    std::swap(ast_whitespace_, other->ast_whitespace_);
    std::swap(ast_column_, other->ast_column_);
    std::swap(ast_row_, other->ast_row_);
    std::swap(ast_cross_table_reference_extra_info_, other->ast_cross_table_reference_extra_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ASTNodeArrayArchive_ASTNodeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ASTNodeArrayArchive_ASTNodeArchive_descriptor_;
  metadata.reflection = ASTNodeArrayArchive_ASTNodeArchive_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ASTNodeArrayArchive::kASTNodeFieldNumber;
#endif  // !_MSC_VER

ASTNodeArrayArchive::ASTNodeArrayArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ASTNodeArrayArchive::InitAsDefaultInstance() {
}

ASTNodeArrayArchive::ASTNodeArrayArchive(const ASTNodeArrayArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ASTNodeArrayArchive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ASTNodeArrayArchive::~ASTNodeArrayArchive() {
  SharedDtor();
}

void ASTNodeArrayArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ASTNodeArrayArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ASTNodeArrayArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ASTNodeArrayArchive_descriptor_;
}

const ASTNodeArrayArchive& ASTNodeArrayArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

ASTNodeArrayArchive* ASTNodeArrayArchive::default_instance_ = NULL;

ASTNodeArrayArchive* ASTNodeArrayArchive::New() const {
  return new ASTNodeArrayArchive;
}

void ASTNodeArrayArchive::Clear() {
  ast_node_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ASTNodeArrayArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSCE.ASTNodeArrayArchive.ASTNodeArchive AST_node = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AST_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ast_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_AST_node;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ASTNodeArrayArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSCE.ASTNodeArrayArchive.ASTNodeArchive AST_node = 1;
  for (int i = 0; i < this->ast_node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ast_node(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ASTNodeArrayArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSCE.ASTNodeArrayArchive.ASTNodeArchive AST_node = 1;
  for (int i = 0; i < this->ast_node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ast_node(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ASTNodeArrayArchive::ByteSize() const {
  int total_size = 0;

  // repeated .TSCE.ASTNodeArrayArchive.ASTNodeArchive AST_node = 1;
  total_size += 1 * this->ast_node_size();
  for (int i = 0; i < this->ast_node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ast_node(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ASTNodeArrayArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ASTNodeArrayArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ASTNodeArrayArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ASTNodeArrayArchive::MergeFrom(const ASTNodeArrayArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  ast_node_.MergeFrom(from.ast_node_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ASTNodeArrayArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTNodeArrayArchive::CopyFrom(const ASTNodeArrayArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive::IsInitialized() const {

  for (int i = 0; i < ast_node_size(); i++) {
    if (!this->ast_node(i).IsInitialized()) return false;
  }
  return true;
}

void ASTNodeArrayArchive::Swap(ASTNodeArrayArchive* other) {
  if (other != this) {
    ast_node_.Swap(&other->ast_node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ASTNodeArrayArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ASTNodeArrayArchive_descriptor_;
  metadata.reflection = ASTNodeArrayArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FormulaTranslationFlagsArchive::kExcelImportTranslationFieldNumber;
const int FormulaTranslationFlagsArchive::kNumberToDateCoercionRemovalTranslationFieldNumber;
#endif  // !_MSC_VER

FormulaTranslationFlagsArchive::FormulaTranslationFlagsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FormulaTranslationFlagsArchive::InitAsDefaultInstance() {
}

FormulaTranslationFlagsArchive::FormulaTranslationFlagsArchive(const FormulaTranslationFlagsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FormulaTranslationFlagsArchive::SharedCtor() {
  _cached_size_ = 0;
  excel_import_translation_ = false;
  number_to_date_coercion_removal_translation_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FormulaTranslationFlagsArchive::~FormulaTranslationFlagsArchive() {
  SharedDtor();
}

void FormulaTranslationFlagsArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FormulaTranslationFlagsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FormulaTranslationFlagsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FormulaTranslationFlagsArchive_descriptor_;
}

const FormulaTranslationFlagsArchive& FormulaTranslationFlagsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

FormulaTranslationFlagsArchive* FormulaTranslationFlagsArchive::default_instance_ = NULL;

FormulaTranslationFlagsArchive* FormulaTranslationFlagsArchive::New() const {
  return new FormulaTranslationFlagsArchive;
}

void FormulaTranslationFlagsArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    excel_import_translation_ = false;
    number_to_date_coercion_removal_translation_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FormulaTranslationFlagsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool excel_import_translation = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &excel_import_translation_)));
          set_has_excel_import_translation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_number_to_date_coercion_removal_translation;
        break;
      }

      // optional bool number_to_date_coercion_removal_translation = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number_to_date_coercion_removal_translation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &number_to_date_coercion_removal_translation_)));
          set_has_number_to_date_coercion_removal_translation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FormulaTranslationFlagsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool excel_import_translation = 1 [default = false];
  if (has_excel_import_translation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->excel_import_translation(), output);
  }

  // optional bool number_to_date_coercion_removal_translation = 2 [default = false];
  if (has_number_to_date_coercion_removal_translation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->number_to_date_coercion_removal_translation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FormulaTranslationFlagsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool excel_import_translation = 1 [default = false];
  if (has_excel_import_translation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->excel_import_translation(), target);
  }

  // optional bool number_to_date_coercion_removal_translation = 2 [default = false];
  if (has_number_to_date_coercion_removal_translation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->number_to_date_coercion_removal_translation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FormulaTranslationFlagsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool excel_import_translation = 1 [default = false];
    if (has_excel_import_translation()) {
      total_size += 1 + 1;
    }

    // optional bool number_to_date_coercion_removal_translation = 2 [default = false];
    if (has_number_to_date_coercion_removal_translation()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FormulaTranslationFlagsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FormulaTranslationFlagsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FormulaTranslationFlagsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FormulaTranslationFlagsArchive::MergeFrom(const FormulaTranslationFlagsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_excel_import_translation()) {
      set_excel_import_translation(from.excel_import_translation());
    }
    if (from.has_number_to_date_coercion_removal_translation()) {
      set_number_to_date_coercion_removal_translation(from.number_to_date_coercion_removal_translation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FormulaTranslationFlagsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormulaTranslationFlagsArchive::CopyFrom(const FormulaTranslationFlagsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaTranslationFlagsArchive::IsInitialized() const {

  return true;
}

void FormulaTranslationFlagsArchive::Swap(FormulaTranslationFlagsArchive* other) {
  if (other != this) {
    std::swap(excel_import_translation_, other->excel_import_translation_);
    std::swap(number_to_date_coercion_removal_translation_, other->number_to_date_coercion_removal_translation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FormulaTranslationFlagsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FormulaTranslationFlagsArchive_descriptor_;
  metadata.reflection = FormulaTranslationFlagsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FormulaArchive::kASTNodeArrayFieldNumber;
const int FormulaArchive::kHostColumnFieldNumber;
const int FormulaArchive::kHostRowFieldNumber;
const int FormulaArchive::kHostColumnIsNegativeFieldNumber;
const int FormulaArchive::kHostRowIsNegativeFieldNumber;
const int FormulaArchive::kTranslationFlagsFieldNumber;
#endif  // !_MSC_VER

FormulaArchive::FormulaArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FormulaArchive::InitAsDefaultInstance() {
  ast_node_array_ = const_cast< ::TSCE::ASTNodeArrayArchive*>(&::TSCE::ASTNodeArrayArchive::default_instance());
  translation_flags_ = const_cast< ::TSCE::FormulaTranslationFlagsArchive*>(&::TSCE::FormulaTranslationFlagsArchive::default_instance());
}

FormulaArchive::FormulaArchive(const FormulaArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FormulaArchive::SharedCtor() {
  _cached_size_ = 0;
  ast_node_array_ = NULL;
  host_column_ = 0u;
  host_row_ = 0u;
  host_column_is_negative_ = false;
  host_row_is_negative_ = false;
  translation_flags_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FormulaArchive::~FormulaArchive() {
  SharedDtor();
}

void FormulaArchive::SharedDtor() {
  if (this != default_instance_) {
    delete ast_node_array_;
    delete translation_flags_;
  }
}

void FormulaArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FormulaArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FormulaArchive_descriptor_;
}

const FormulaArchive& FormulaArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

FormulaArchive* FormulaArchive::default_instance_ = NULL;

FormulaArchive* FormulaArchive::New() const {
  return new FormulaArchive;
}

void FormulaArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ast_node_array()) {
      if (ast_node_array_ != NULL) ast_node_array_->::TSCE::ASTNodeArrayArchive::Clear();
    }
    host_column_ = 0u;
    host_row_ = 0u;
    host_column_is_negative_ = false;
    host_row_is_negative_ = false;
    if (has_translation_flags()) {
      if (translation_flags_ != NULL) translation_flags_->::TSCE::FormulaTranslationFlagsArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FormulaArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCE.ASTNodeArrayArchive AST_node_array = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ast_node_array()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_host_column;
        break;
      }

      // optional uint32 host_column = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_host_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_column_)));
          set_has_host_column();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_host_row;
        break;
      }

      // optional uint32 host_row = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_host_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_row_)));
          set_has_host_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_host_column_is_negative;
        break;
      }

      // optional bool host_column_is_negative = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_host_column_is_negative:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &host_column_is_negative_)));
          set_has_host_column_is_negative();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_host_row_is_negative;
        break;
      }

      // optional bool host_row_is_negative = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_host_row_is_negative:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &host_row_is_negative_)));
          set_has_host_row_is_negative();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_translation_flags;
        break;
      }

      // optional .TSCE.FormulaTranslationFlagsArchive translation_flags = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_translation_flags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translation_flags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FormulaArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCE.ASTNodeArrayArchive AST_node_array = 1;
  if (has_ast_node_array()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ast_node_array(), output);
  }

  // optional uint32 host_column = 2;
  if (has_host_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->host_column(), output);
  }

  // optional uint32 host_row = 3;
  if (has_host_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->host_row(), output);
  }

  // optional bool host_column_is_negative = 4 [default = false];
  if (has_host_column_is_negative()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->host_column_is_negative(), output);
  }

  // optional bool host_row_is_negative = 5 [default = false];
  if (has_host_row_is_negative()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->host_row_is_negative(), output);
  }

  // optional .TSCE.FormulaTranslationFlagsArchive translation_flags = 6;
  if (has_translation_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->translation_flags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FormulaArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCE.ASTNodeArrayArchive AST_node_array = 1;
  if (has_ast_node_array()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ast_node_array(), target);
  }

  // optional uint32 host_column = 2;
  if (has_host_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->host_column(), target);
  }

  // optional uint32 host_row = 3;
  if (has_host_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->host_row(), target);
  }

  // optional bool host_column_is_negative = 4 [default = false];
  if (has_host_column_is_negative()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->host_column_is_negative(), target);
  }

  // optional bool host_row_is_negative = 5 [default = false];
  if (has_host_row_is_negative()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->host_row_is_negative(), target);
  }

  // optional .TSCE.FormulaTranslationFlagsArchive translation_flags = 6;
  if (has_translation_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->translation_flags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FormulaArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCE.ASTNodeArrayArchive AST_node_array = 1;
    if (has_ast_node_array()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ast_node_array());
    }

    // optional uint32 host_column = 2;
    if (has_host_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->host_column());
    }

    // optional uint32 host_row = 3;
    if (has_host_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->host_row());
    }

    // optional bool host_column_is_negative = 4 [default = false];
    if (has_host_column_is_negative()) {
      total_size += 1 + 1;
    }

    // optional bool host_row_is_negative = 5 [default = false];
    if (has_host_row_is_negative()) {
      total_size += 1 + 1;
    }

    // optional .TSCE.FormulaTranslationFlagsArchive translation_flags = 6;
    if (has_translation_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->translation_flags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FormulaArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FormulaArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FormulaArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FormulaArchive::MergeFrom(const FormulaArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ast_node_array()) {
      mutable_ast_node_array()->::TSCE::ASTNodeArrayArchive::MergeFrom(from.ast_node_array());
    }
    if (from.has_host_column()) {
      set_host_column(from.host_column());
    }
    if (from.has_host_row()) {
      set_host_row(from.host_row());
    }
    if (from.has_host_column_is_negative()) {
      set_host_column_is_negative(from.host_column_is_negative());
    }
    if (from.has_host_row_is_negative()) {
      set_host_row_is_negative(from.host_row_is_negative());
    }
    if (from.has_translation_flags()) {
      mutable_translation_flags()->::TSCE::FormulaTranslationFlagsArchive::MergeFrom(from.translation_flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FormulaArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormulaArchive::CopyFrom(const FormulaArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_ast_node_array()) {
    if (!this->ast_node_array().IsInitialized()) return false;
  }
  return true;
}

void FormulaArchive::Swap(FormulaArchive* other) {
  if (other != this) {
    std::swap(ast_node_array_, other->ast_node_array_);
    std::swap(host_column_, other->host_column_);
    std::swap(host_row_, other->host_row_);
    std::swap(host_column_is_negative_, other->host_column_is_negative_);
    std::swap(host_row_is_negative_, other->host_row_is_negative_);
    std::swap(translation_flags_, other->translation_flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FormulaArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FormulaArchive_descriptor_;
  metadata.reflection = FormulaArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FormatStructArchive::kFormatTypeFieldNumber;
const int FormatStructArchive::kDecimalPlacesFieldNumber;
const int FormatStructArchive::kCurrencyCodeFieldNumber;
const int FormatStructArchive::kNegativeStyleFieldNumber;
const int FormatStructArchive::kShowThousandsSeparatorFieldNumber;
const int FormatStructArchive::kUseAccountingStyleFieldNumber;
const int FormatStructArchive::kDurationStyleFieldNumber;
const int FormatStructArchive::kBaseFieldNumber;
const int FormatStructArchive::kBasePlacesFieldNumber;
const int FormatStructArchive::kBaseUseMinusSignFieldNumber;
const int FormatStructArchive::kFractionAccuracyFieldNumber;
const int FormatStructArchive::kSuppressDateFormatFieldNumber;
const int FormatStructArchive::kSuppressTimeFormatFieldNumber;
const int FormatStructArchive::kDateTimeFormatFieldNumber;
const int FormatStructArchive::kDurationUnitLargestFieldNumber;
const int FormatStructArchive::kDurationUnitSmallestFieldNumber;
#endif  // !_MSC_VER

FormatStructArchive::FormatStructArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FormatStructArchive::InitAsDefaultInstance() {
}

FormatStructArchive::FormatStructArchive(const FormatStructArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FormatStructArchive::SharedCtor() {
  _cached_size_ = 0;
  format_type_ = 0u;
  decimal_places_ = 0u;
  currency_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  negative_style_ = 0u;
  show_thousands_separator_ = false;
  use_accounting_style_ = false;
  duration_style_ = 0u;
  base_ = 0u;
  base_places_ = 0u;
  base_use_minus_sign_ = false;
  fraction_accuracy_ = 0u;
  suppress_date_format_ = false;
  suppress_time_format_ = false;
  date_time_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  duration_unit_largest_ = 0u;
  duration_unit_smallest_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FormatStructArchive::~FormatStructArchive() {
  SharedDtor();
}

void FormatStructArchive::SharedDtor() {
  if (currency_code_ != &::google::protobuf::internal::kEmptyString) {
    delete currency_code_;
  }
  if (date_time_format_ != &::google::protobuf::internal::kEmptyString) {
    delete date_time_format_;
  }
  if (this != default_instance_) {
  }
}

void FormatStructArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FormatStructArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FormatStructArchive_descriptor_;
}

const FormatStructArchive& FormatStructArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

FormatStructArchive* FormatStructArchive::default_instance_ = NULL;

FormatStructArchive* FormatStructArchive::New() const {
  return new FormatStructArchive;
}

void FormatStructArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    format_type_ = 0u;
    decimal_places_ = 0u;
    if (has_currency_code()) {
      if (currency_code_ != &::google::protobuf::internal::kEmptyString) {
        currency_code_->clear();
      }
    }
    negative_style_ = 0u;
    show_thousands_separator_ = false;
    use_accounting_style_ = false;
    duration_style_ = 0u;
    base_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    base_places_ = 0u;
    base_use_minus_sign_ = false;
    fraction_accuracy_ = 0u;
    suppress_date_format_ = false;
    suppress_time_format_ = false;
    if (has_date_time_format()) {
      if (date_time_format_ != &::google::protobuf::internal::kEmptyString) {
        date_time_format_->clear();
      }
    }
    duration_unit_largest_ = 0u;
    duration_unit_smallest_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FormatStructArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 format_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &format_type_)));
          set_has_format_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_decimal_places;
        break;
      }

      // optional uint32 decimal_places = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_decimal_places:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &decimal_places_)));
          set_has_decimal_places();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_currency_code;
        break;
      }

      // optional string currency_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currency_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currency_code().data(), this->currency_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_negative_style;
        break;
      }

      // optional uint32 negative_style = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_negative_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &negative_style_)));
          set_has_negative_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_show_thousands_separator;
        break;
      }

      // optional bool show_thousands_separator = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_thousands_separator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_thousands_separator_)));
          set_has_show_thousands_separator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_use_accounting_style;
        break;
      }

      // optional bool use_accounting_style = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_accounting_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_accounting_style_)));
          set_has_use_accounting_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_duration_style;
        break;
      }

      // optional uint32 duration_style = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_style_)));
          set_has_duration_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_base;
        break;
      }

      // optional uint32 base = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_)));
          set_has_base();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_base_places;
        break;
      }

      // optional uint32 base_places = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_places:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_places_)));
          set_has_base_places();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_base_use_minus_sign;
        break;
      }

      // optional bool base_use_minus_sign = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_use_minus_sign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &base_use_minus_sign_)));
          set_has_base_use_minus_sign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_fraction_accuracy;
        break;
      }

      // optional uint32 fraction_accuracy = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fraction_accuracy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fraction_accuracy_)));
          set_has_fraction_accuracy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_suppress_date_format;
        break;
      }

      // optional bool suppress_date_format = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suppress_date_format:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suppress_date_format_)));
          set_has_suppress_date_format();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_suppress_time_format;
        break;
      }

      // optional bool suppress_time_format = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suppress_time_format:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suppress_time_format_)));
          set_has_suppress_time_format();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_date_time_format;
        break;
      }

      // optional string date_time_format = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date_time_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date_time_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->date_time_format().data(), this->date_time_format().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_duration_unit_largest;
        break;
      }

      // optional uint32 duration_unit_largest = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration_unit_largest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_unit_largest_)));
          set_has_duration_unit_largest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_duration_unit_smallest;
        break;
      }

      // optional uint32 duration_unit_smallest = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration_unit_smallest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_unit_smallest_)));
          set_has_duration_unit_smallest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FormatStructArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 format_type = 1;
  if (has_format_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->format_type(), output);
  }

  // optional uint32 decimal_places = 2;
  if (has_decimal_places()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->decimal_places(), output);
  }

  // optional string currency_code = 3;
  if (has_currency_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency_code().data(), this->currency_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->currency_code(), output);
  }

  // optional uint32 negative_style = 4;
  if (has_negative_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->negative_style(), output);
  }

  // optional bool show_thousands_separator = 5;
  if (has_show_thousands_separator()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->show_thousands_separator(), output);
  }

  // optional bool use_accounting_style = 6;
  if (has_use_accounting_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->use_accounting_style(), output);
  }

  // optional uint32 duration_style = 7;
  if (has_duration_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->duration_style(), output);
  }

  // optional uint32 base = 8;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->base(), output);
  }

  // optional uint32 base_places = 9;
  if (has_base_places()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->base_places(), output);
  }

  // optional bool base_use_minus_sign = 10;
  if (has_base_use_minus_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->base_use_minus_sign(), output);
  }

  // optional uint32 fraction_accuracy = 11;
  if (has_fraction_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->fraction_accuracy(), output);
  }

  // optional bool suppress_date_format = 12;
  if (has_suppress_date_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->suppress_date_format(), output);
  }

  // optional bool suppress_time_format = 13;
  if (has_suppress_time_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->suppress_time_format(), output);
  }

  // optional string date_time_format = 14;
  if (has_date_time_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date_time_format().data(), this->date_time_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->date_time_format(), output);
  }

  // optional uint32 duration_unit_largest = 15;
  if (has_duration_unit_largest()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->duration_unit_largest(), output);
  }

  // optional uint32 duration_unit_smallest = 16;
  if (has_duration_unit_smallest()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->duration_unit_smallest(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FormatStructArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 format_type = 1;
  if (has_format_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->format_type(), target);
  }

  // optional uint32 decimal_places = 2;
  if (has_decimal_places()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->decimal_places(), target);
  }

  // optional string currency_code = 3;
  if (has_currency_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency_code().data(), this->currency_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->currency_code(), target);
  }

  // optional uint32 negative_style = 4;
  if (has_negative_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->negative_style(), target);
  }

  // optional bool show_thousands_separator = 5;
  if (has_show_thousands_separator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->show_thousands_separator(), target);
  }

  // optional bool use_accounting_style = 6;
  if (has_use_accounting_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->use_accounting_style(), target);
  }

  // optional uint32 duration_style = 7;
  if (has_duration_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->duration_style(), target);
  }

  // optional uint32 base = 8;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->base(), target);
  }

  // optional uint32 base_places = 9;
  if (has_base_places()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->base_places(), target);
  }

  // optional bool base_use_minus_sign = 10;
  if (has_base_use_minus_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->base_use_minus_sign(), target);
  }

  // optional uint32 fraction_accuracy = 11;
  if (has_fraction_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->fraction_accuracy(), target);
  }

  // optional bool suppress_date_format = 12;
  if (has_suppress_date_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->suppress_date_format(), target);
  }

  // optional bool suppress_time_format = 13;
  if (has_suppress_time_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->suppress_time_format(), target);
  }

  // optional string date_time_format = 14;
  if (has_date_time_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date_time_format().data(), this->date_time_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->date_time_format(), target);
  }

  // optional uint32 duration_unit_largest = 15;
  if (has_duration_unit_largest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->duration_unit_largest(), target);
  }

  // optional uint32 duration_unit_smallest = 16;
  if (has_duration_unit_smallest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->duration_unit_smallest(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FormatStructArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 format_type = 1;
    if (has_format_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->format_type());
    }

    // optional uint32 decimal_places = 2;
    if (has_decimal_places()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->decimal_places());
    }

    // optional string currency_code = 3;
    if (has_currency_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency_code());
    }

    // optional uint32 negative_style = 4;
    if (has_negative_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->negative_style());
    }

    // optional bool show_thousands_separator = 5;
    if (has_show_thousands_separator()) {
      total_size += 1 + 1;
    }

    // optional bool use_accounting_style = 6;
    if (has_use_accounting_style()) {
      total_size += 1 + 1;
    }

    // optional uint32 duration_style = 7;
    if (has_duration_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration_style());
    }

    // optional uint32 base = 8;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 base_places = 9;
    if (has_base_places()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_places());
    }

    // optional bool base_use_minus_sign = 10;
    if (has_base_use_minus_sign()) {
      total_size += 1 + 1;
    }

    // optional uint32 fraction_accuracy = 11;
    if (has_fraction_accuracy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fraction_accuracy());
    }

    // optional bool suppress_date_format = 12;
    if (has_suppress_date_format()) {
      total_size += 1 + 1;
    }

    // optional bool suppress_time_format = 13;
    if (has_suppress_time_format()) {
      total_size += 1 + 1;
    }

    // optional string date_time_format = 14;
    if (has_date_time_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date_time_format());
    }

    // optional uint32 duration_unit_largest = 15;
    if (has_duration_unit_largest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration_unit_largest());
    }

    // optional uint32 duration_unit_smallest = 16;
    if (has_duration_unit_smallest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration_unit_smallest());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FormatStructArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FormatStructArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FormatStructArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FormatStructArchive::MergeFrom(const FormatStructArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_format_type()) {
      set_format_type(from.format_type());
    }
    if (from.has_decimal_places()) {
      set_decimal_places(from.decimal_places());
    }
    if (from.has_currency_code()) {
      set_currency_code(from.currency_code());
    }
    if (from.has_negative_style()) {
      set_negative_style(from.negative_style());
    }
    if (from.has_show_thousands_separator()) {
      set_show_thousands_separator(from.show_thousands_separator());
    }
    if (from.has_use_accounting_style()) {
      set_use_accounting_style(from.use_accounting_style());
    }
    if (from.has_duration_style()) {
      set_duration_style(from.duration_style());
    }
    if (from.has_base()) {
      set_base(from.base());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_base_places()) {
      set_base_places(from.base_places());
    }
    if (from.has_base_use_minus_sign()) {
      set_base_use_minus_sign(from.base_use_minus_sign());
    }
    if (from.has_fraction_accuracy()) {
      set_fraction_accuracy(from.fraction_accuracy());
    }
    if (from.has_suppress_date_format()) {
      set_suppress_date_format(from.suppress_date_format());
    }
    if (from.has_suppress_time_format()) {
      set_suppress_time_format(from.suppress_time_format());
    }
    if (from.has_date_time_format()) {
      set_date_time_format(from.date_time_format());
    }
    if (from.has_duration_unit_largest()) {
      set_duration_unit_largest(from.duration_unit_largest());
    }
    if (from.has_duration_unit_smallest()) {
      set_duration_unit_smallest(from.duration_unit_smallest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FormatStructArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormatStructArchive::CopyFrom(const FormatStructArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormatStructArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FormatStructArchive::Swap(FormatStructArchive* other) {
  if (other != this) {
    std::swap(format_type_, other->format_type_);
    std::swap(decimal_places_, other->decimal_places_);
    std::swap(currency_code_, other->currency_code_);
    std::swap(negative_style_, other->negative_style_);
    std::swap(show_thousands_separator_, other->show_thousands_separator_);
    std::swap(use_accounting_style_, other->use_accounting_style_);
    std::swap(duration_style_, other->duration_style_);
    std::swap(base_, other->base_);
    std::swap(base_places_, other->base_places_);
    std::swap(base_use_minus_sign_, other->base_use_minus_sign_);
    std::swap(fraction_accuracy_, other->fraction_accuracy_);
    std::swap(suppress_date_format_, other->suppress_date_format_);
    std::swap(suppress_time_format_, other->suppress_time_format_);
    std::swap(date_time_format_, other->date_time_format_);
    std::swap(duration_unit_largest_, other->duration_unit_largest_);
    std::swap(duration_unit_smallest_, other->duration_unit_smallest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FormatStructArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FormatStructArchive_descriptor_;
  metadata.reflection = FormatStructArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RangeCoordinateArchive::kTopLeftColumnFieldNumber;
const int RangeCoordinateArchive::kTopLeftRowFieldNumber;
const int RangeCoordinateArchive::kBottomRightColumnFieldNumber;
const int RangeCoordinateArchive::kBottomRightRowFieldNumber;
#endif  // !_MSC_VER

RangeCoordinateArchive::RangeCoordinateArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RangeCoordinateArchive::InitAsDefaultInstance() {
}

RangeCoordinateArchive::RangeCoordinateArchive(const RangeCoordinateArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RangeCoordinateArchive::SharedCtor() {
  _cached_size_ = 0;
  top_left_column_ = 0u;
  top_left_row_ = 0u;
  bottom_right_column_ = 0u;
  bottom_right_row_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RangeCoordinateArchive::~RangeCoordinateArchive() {
  SharedDtor();
}

void RangeCoordinateArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RangeCoordinateArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeCoordinateArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RangeCoordinateArchive_descriptor_;
}

const RangeCoordinateArchive& RangeCoordinateArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

RangeCoordinateArchive* RangeCoordinateArchive::default_instance_ = NULL;

RangeCoordinateArchive* RangeCoordinateArchive::New() const {
  return new RangeCoordinateArchive;
}

void RangeCoordinateArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    top_left_column_ = 0u;
    top_left_row_ = 0u;
    bottom_right_column_ = 0u;
    bottom_right_row_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RangeCoordinateArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 top_left_column = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_left_column_)));
          set_has_top_left_column();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_top_left_row;
        break;
      }

      // required uint32 top_left_row = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top_left_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_left_row_)));
          set_has_top_left_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bottom_right_column;
        break;
      }

      // required uint32 bottom_right_column = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bottom_right_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bottom_right_column_)));
          set_has_bottom_right_column();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bottom_right_row;
        break;
      }

      // required uint32 bottom_right_row = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bottom_right_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bottom_right_row_)));
          set_has_bottom_right_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RangeCoordinateArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 top_left_column = 1;
  if (has_top_left_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->top_left_column(), output);
  }

  // required uint32 top_left_row = 2;
  if (has_top_left_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->top_left_row(), output);
  }

  // required uint32 bottom_right_column = 3;
  if (has_bottom_right_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bottom_right_column(), output);
  }

  // required uint32 bottom_right_row = 4;
  if (has_bottom_right_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bottom_right_row(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RangeCoordinateArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 top_left_column = 1;
  if (has_top_left_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->top_left_column(), target);
  }

  // required uint32 top_left_row = 2;
  if (has_top_left_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->top_left_row(), target);
  }

  // required uint32 bottom_right_column = 3;
  if (has_bottom_right_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bottom_right_column(), target);
  }

  // required uint32 bottom_right_row = 4;
  if (has_bottom_right_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bottom_right_row(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RangeCoordinateArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 top_left_column = 1;
    if (has_top_left_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top_left_column());
    }

    // required uint32 top_left_row = 2;
    if (has_top_left_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top_left_row());
    }

    // required uint32 bottom_right_column = 3;
    if (has_bottom_right_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bottom_right_column());
    }

    // required uint32 bottom_right_row = 4;
    if (has_bottom_right_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bottom_right_row());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeCoordinateArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RangeCoordinateArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RangeCoordinateArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RangeCoordinateArchive::MergeFrom(const RangeCoordinateArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_top_left_column()) {
      set_top_left_column(from.top_left_column());
    }
    if (from.has_top_left_row()) {
      set_top_left_row(from.top_left_row());
    }
    if (from.has_bottom_right_column()) {
      set_bottom_right_column(from.bottom_right_column());
    }
    if (from.has_bottom_right_row()) {
      set_bottom_right_row(from.bottom_right_row());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RangeCoordinateArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeCoordinateArchive::CopyFrom(const RangeCoordinateArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeCoordinateArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RangeCoordinateArchive::Swap(RangeCoordinateArchive* other) {
  if (other != this) {
    std::swap(top_left_column_, other->top_left_column_);
    std::swap(top_left_row_, other->top_left_row_);
    std::swap(bottom_right_column_, other->bottom_right_column_);
    std::swap(bottom_right_row_, other->bottom_right_row_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RangeCoordinateArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RangeCoordinateArchive_descriptor_;
  metadata.reflection = RangeCoordinateArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TectonicShiftArchive::kGridCoordinateOffsetXFieldNumber;
const int TectonicShiftArchive::kGridCoordinateOffsetYFieldNumber;
const int TectonicShiftArchive::kGridCoordinateOffsetXIsNegativeFieldNumber;
const int TectonicShiftArchive::kGridCoordinateOffsetYIsNegativeFieldNumber;
const int TectonicShiftArchive::kRangeForShiftFieldNumber;
const int TectonicShiftArchive::kRangeForDeletionFieldNumber;
const int TectonicShiftArchive::kInsertedRangeFieldNumber;
const int TectonicShiftArchive::kApplyToAbsoluteFieldNumber;
const int TectonicShiftArchive::kInsertingAfterFieldNumber;
const int TectonicShiftArchive::kIgnoreStickyBitsFieldNumber;
const int TectonicShiftArchive::kTableRangeFieldNumber;
const int TectonicShiftArchive::kTableIdFieldNumber;
#endif  // !_MSC_VER

TectonicShiftArchive::TectonicShiftArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TectonicShiftArchive::InitAsDefaultInstance() {
  range_for_shift_ = const_cast< ::TSCE::RangeCoordinateArchive*>(&::TSCE::RangeCoordinateArchive::default_instance());
  range_for_deletion_ = const_cast< ::TSCE::RangeCoordinateArchive*>(&::TSCE::RangeCoordinateArchive::default_instance());
  inserted_range_ = const_cast< ::TSCE::RangeCoordinateArchive*>(&::TSCE::RangeCoordinateArchive::default_instance());
  table_range_ = const_cast< ::TSCE::RangeCoordinateArchive*>(&::TSCE::RangeCoordinateArchive::default_instance());
  table_id_ = const_cast< ::TSCE::CFUUIDArchive*>(&::TSCE::CFUUIDArchive::default_instance());
}

TectonicShiftArchive::TectonicShiftArchive(const TectonicShiftArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TectonicShiftArchive::SharedCtor() {
  _cached_size_ = 0;
  grid_coordinate_offset_x_ = 0u;
  grid_coordinate_offset_y_ = 0u;
  grid_coordinate_offset_x_is_negative_ = false;
  grid_coordinate_offset_y_is_negative_ = false;
  range_for_shift_ = NULL;
  range_for_deletion_ = NULL;
  inserted_range_ = NULL;
  apply_to_absolute_ = false;
  inserting_after_ = false;
  ignore_sticky_bits_ = false;
  table_range_ = NULL;
  table_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TectonicShiftArchive::~TectonicShiftArchive() {
  SharedDtor();
}

void TectonicShiftArchive::SharedDtor() {
  if (this != default_instance_) {
    delete range_for_shift_;
    delete range_for_deletion_;
    delete inserted_range_;
    delete table_range_;
    delete table_id_;
  }
}

void TectonicShiftArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TectonicShiftArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TectonicShiftArchive_descriptor_;
}

const TectonicShiftArchive& TectonicShiftArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

TectonicShiftArchive* TectonicShiftArchive::default_instance_ = NULL;

TectonicShiftArchive* TectonicShiftArchive::New() const {
  return new TectonicShiftArchive;
}

void TectonicShiftArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grid_coordinate_offset_x_ = 0u;
    grid_coordinate_offset_y_ = 0u;
    grid_coordinate_offset_x_is_negative_ = false;
    grid_coordinate_offset_y_is_negative_ = false;
    if (has_range_for_shift()) {
      if (range_for_shift_ != NULL) range_for_shift_->::TSCE::RangeCoordinateArchive::Clear();
    }
    if (has_range_for_deletion()) {
      if (range_for_deletion_ != NULL) range_for_deletion_->::TSCE::RangeCoordinateArchive::Clear();
    }
    if (has_inserted_range()) {
      if (inserted_range_ != NULL) inserted_range_->::TSCE::RangeCoordinateArchive::Clear();
    }
    apply_to_absolute_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    inserting_after_ = false;
    ignore_sticky_bits_ = false;
    if (has_table_range()) {
      if (table_range_ != NULL) table_range_->::TSCE::RangeCoordinateArchive::Clear();
    }
    if (has_table_id()) {
      if (table_id_ != NULL) table_id_->::TSCE::CFUUIDArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TectonicShiftArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 grid_coordinate_offset_x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid_coordinate_offset_x_)));
          set_has_grid_coordinate_offset_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grid_coordinate_offset_y;
        break;
      }

      // required uint32 grid_coordinate_offset_y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid_coordinate_offset_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grid_coordinate_offset_y_)));
          set_has_grid_coordinate_offset_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_grid_coordinate_offset_x_is_negative;
        break;
      }

      // required bool grid_coordinate_offset_x_is_negative = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid_coordinate_offset_x_is_negative:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &grid_coordinate_offset_x_is_negative_)));
          set_has_grid_coordinate_offset_x_is_negative();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_grid_coordinate_offset_y_is_negative;
        break;
      }

      // required bool grid_coordinate_offset_y_is_negative = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid_coordinate_offset_y_is_negative:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &grid_coordinate_offset_y_is_negative_)));
          set_has_grid_coordinate_offset_y_is_negative();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_range_for_shift;
        break;
      }

      // optional .TSCE.RangeCoordinateArchive range_for_shift = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_range_for_shift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range_for_shift()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_range_for_deletion;
        break;
      }

      // optional .TSCE.RangeCoordinateArchive range_for_deletion = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_range_for_deletion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range_for_deletion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_inserted_range;
        break;
      }

      // optional .TSCE.RangeCoordinateArchive inserted_range = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inserted_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inserted_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_apply_to_absolute;
        break;
      }

      // required bool apply_to_absolute = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_to_absolute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &apply_to_absolute_)));
          set_has_apply_to_absolute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_inserting_after;
        break;
      }

      // required bool inserting_after = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inserting_after:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inserting_after_)));
          set_has_inserting_after();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ignore_sticky_bits;
        break;
      }

      // required bool ignore_sticky_bits = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ignore_sticky_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignore_sticky_bits_)));
          set_has_ignore_sticky_bits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_table_range;
        break;
      }

      // optional .TSCE.RangeCoordinateArchive table_range = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_table_id;
        break;
      }

      // optional .TSCE.CFUUIDArchive table_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TectonicShiftArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 grid_coordinate_offset_x = 1;
  if (has_grid_coordinate_offset_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->grid_coordinate_offset_x(), output);
  }

  // required uint32 grid_coordinate_offset_y = 2;
  if (has_grid_coordinate_offset_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->grid_coordinate_offset_y(), output);
  }

  // required bool grid_coordinate_offset_x_is_negative = 3;
  if (has_grid_coordinate_offset_x_is_negative()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->grid_coordinate_offset_x_is_negative(), output);
  }

  // required bool grid_coordinate_offset_y_is_negative = 4;
  if (has_grid_coordinate_offset_y_is_negative()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->grid_coordinate_offset_y_is_negative(), output);
  }

  // optional .TSCE.RangeCoordinateArchive range_for_shift = 5;
  if (has_range_for_shift()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->range_for_shift(), output);
  }

  // optional .TSCE.RangeCoordinateArchive range_for_deletion = 6;
  if (has_range_for_deletion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->range_for_deletion(), output);
  }

  // optional .TSCE.RangeCoordinateArchive inserted_range = 7;
  if (has_inserted_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->inserted_range(), output);
  }

  // required bool apply_to_absolute = 8;
  if (has_apply_to_absolute()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->apply_to_absolute(), output);
  }

  // required bool inserting_after = 9;
  if (has_inserting_after()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->inserting_after(), output);
  }

  // required bool ignore_sticky_bits = 10;
  if (has_ignore_sticky_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->ignore_sticky_bits(), output);
  }

  // optional .TSCE.RangeCoordinateArchive table_range = 11;
  if (has_table_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->table_range(), output);
  }

  // optional .TSCE.CFUUIDArchive table_id = 12;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->table_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TectonicShiftArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 grid_coordinate_offset_x = 1;
  if (has_grid_coordinate_offset_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->grid_coordinate_offset_x(), target);
  }

  // required uint32 grid_coordinate_offset_y = 2;
  if (has_grid_coordinate_offset_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->grid_coordinate_offset_y(), target);
  }

  // required bool grid_coordinate_offset_x_is_negative = 3;
  if (has_grid_coordinate_offset_x_is_negative()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->grid_coordinate_offset_x_is_negative(), target);
  }

  // required bool grid_coordinate_offset_y_is_negative = 4;
  if (has_grid_coordinate_offset_y_is_negative()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->grid_coordinate_offset_y_is_negative(), target);
  }

  // optional .TSCE.RangeCoordinateArchive range_for_shift = 5;
  if (has_range_for_shift()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->range_for_shift(), target);
  }

  // optional .TSCE.RangeCoordinateArchive range_for_deletion = 6;
  if (has_range_for_deletion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->range_for_deletion(), target);
  }

  // optional .TSCE.RangeCoordinateArchive inserted_range = 7;
  if (has_inserted_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->inserted_range(), target);
  }

  // required bool apply_to_absolute = 8;
  if (has_apply_to_absolute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->apply_to_absolute(), target);
  }

  // required bool inserting_after = 9;
  if (has_inserting_after()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->inserting_after(), target);
  }

  // required bool ignore_sticky_bits = 10;
  if (has_ignore_sticky_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->ignore_sticky_bits(), target);
  }

  // optional .TSCE.RangeCoordinateArchive table_range = 11;
  if (has_table_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->table_range(), target);
  }

  // optional .TSCE.CFUUIDArchive table_id = 12;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->table_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TectonicShiftArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 grid_coordinate_offset_x = 1;
    if (has_grid_coordinate_offset_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grid_coordinate_offset_x());
    }

    // required uint32 grid_coordinate_offset_y = 2;
    if (has_grid_coordinate_offset_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grid_coordinate_offset_y());
    }

    // required bool grid_coordinate_offset_x_is_negative = 3;
    if (has_grid_coordinate_offset_x_is_negative()) {
      total_size += 1 + 1;
    }

    // required bool grid_coordinate_offset_y_is_negative = 4;
    if (has_grid_coordinate_offset_y_is_negative()) {
      total_size += 1 + 1;
    }

    // optional .TSCE.RangeCoordinateArchive range_for_shift = 5;
    if (has_range_for_shift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->range_for_shift());
    }

    // optional .TSCE.RangeCoordinateArchive range_for_deletion = 6;
    if (has_range_for_deletion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->range_for_deletion());
    }

    // optional .TSCE.RangeCoordinateArchive inserted_range = 7;
    if (has_inserted_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inserted_range());
    }

    // required bool apply_to_absolute = 8;
    if (has_apply_to_absolute()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool inserting_after = 9;
    if (has_inserting_after()) {
      total_size += 1 + 1;
    }

    // required bool ignore_sticky_bits = 10;
    if (has_ignore_sticky_bits()) {
      total_size += 1 + 1;
    }

    // optional .TSCE.RangeCoordinateArchive table_range = 11;
    if (has_table_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_range());
    }

    // optional .TSCE.CFUUIDArchive table_id = 12;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TectonicShiftArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TectonicShiftArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TectonicShiftArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TectonicShiftArchive::MergeFrom(const TectonicShiftArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grid_coordinate_offset_x()) {
      set_grid_coordinate_offset_x(from.grid_coordinate_offset_x());
    }
    if (from.has_grid_coordinate_offset_y()) {
      set_grid_coordinate_offset_y(from.grid_coordinate_offset_y());
    }
    if (from.has_grid_coordinate_offset_x_is_negative()) {
      set_grid_coordinate_offset_x_is_negative(from.grid_coordinate_offset_x_is_negative());
    }
    if (from.has_grid_coordinate_offset_y_is_negative()) {
      set_grid_coordinate_offset_y_is_negative(from.grid_coordinate_offset_y_is_negative());
    }
    if (from.has_range_for_shift()) {
      mutable_range_for_shift()->::TSCE::RangeCoordinateArchive::MergeFrom(from.range_for_shift());
    }
    if (from.has_range_for_deletion()) {
      mutable_range_for_deletion()->::TSCE::RangeCoordinateArchive::MergeFrom(from.range_for_deletion());
    }
    if (from.has_inserted_range()) {
      mutable_inserted_range()->::TSCE::RangeCoordinateArchive::MergeFrom(from.inserted_range());
    }
    if (from.has_apply_to_absolute()) {
      set_apply_to_absolute(from.apply_to_absolute());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_inserting_after()) {
      set_inserting_after(from.inserting_after());
    }
    if (from.has_ignore_sticky_bits()) {
      set_ignore_sticky_bits(from.ignore_sticky_bits());
    }
    if (from.has_table_range()) {
      mutable_table_range()->::TSCE::RangeCoordinateArchive::MergeFrom(from.table_range());
    }
    if (from.has_table_id()) {
      mutable_table_id()->::TSCE::CFUUIDArchive::MergeFrom(from.table_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TectonicShiftArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TectonicShiftArchive::CopyFrom(const TectonicShiftArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TectonicShiftArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000038f) != 0x0000038f) return false;

  if (has_range_for_shift()) {
    if (!this->range_for_shift().IsInitialized()) return false;
  }
  if (has_range_for_deletion()) {
    if (!this->range_for_deletion().IsInitialized()) return false;
  }
  if (has_inserted_range()) {
    if (!this->inserted_range().IsInitialized()) return false;
  }
  if (has_table_range()) {
    if (!this->table_range().IsInitialized()) return false;
  }
  return true;
}

void TectonicShiftArchive::Swap(TectonicShiftArchive* other) {
  if (other != this) {
    std::swap(grid_coordinate_offset_x_, other->grid_coordinate_offset_x_);
    std::swap(grid_coordinate_offset_y_, other->grid_coordinate_offset_y_);
    std::swap(grid_coordinate_offset_x_is_negative_, other->grid_coordinate_offset_x_is_negative_);
    std::swap(grid_coordinate_offset_y_is_negative_, other->grid_coordinate_offset_y_is_negative_);
    std::swap(range_for_shift_, other->range_for_shift_);
    std::swap(range_for_deletion_, other->range_for_deletion_);
    std::swap(inserted_range_, other->inserted_range_);
    std::swap(apply_to_absolute_, other->apply_to_absolute_);
    std::swap(inserting_after_, other->inserting_after_);
    std::swap(ignore_sticky_bits_, other->ignore_sticky_bits_);
    std::swap(table_range_, other->table_range_);
    std::swap(table_id_, other->table_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TectonicShiftArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TectonicShiftArchive_descriptor_;
  metadata.reflection = TectonicShiftArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewriteSortMappingArchive::kTableIdFieldNumber;
const int RewriteSortMappingArchive::kShuffleMappingFieldNumber;
const int RewriteSortMappingArchive::kExplodeRangesFieldNumber;
#endif  // !_MSC_VER

RewriteSortMappingArchive::RewriteSortMappingArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RewriteSortMappingArchive::InitAsDefaultInstance() {
  table_id_ = const_cast< ::TSCE::CFUUIDArchive*>(&::TSCE::CFUUIDArchive::default_instance());
  shuffle_mapping_ = const_cast< ::TSK::ShuffleMappingArchive*>(&::TSK::ShuffleMappingArchive::default_instance());
}

RewriteSortMappingArchive::RewriteSortMappingArchive(const RewriteSortMappingArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RewriteSortMappingArchive::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = NULL;
  shuffle_mapping_ = NULL;
  explode_ranges_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewriteSortMappingArchive::~RewriteSortMappingArchive() {
  SharedDtor();
}

void RewriteSortMappingArchive::SharedDtor() {
  if (this != default_instance_) {
    delete table_id_;
    delete shuffle_mapping_;
  }
}

void RewriteSortMappingArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewriteSortMappingArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewriteSortMappingArchive_descriptor_;
}

const RewriteSortMappingArchive& RewriteSortMappingArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

RewriteSortMappingArchive* RewriteSortMappingArchive::default_instance_ = NULL;

RewriteSortMappingArchive* RewriteSortMappingArchive::New() const {
  return new RewriteSortMappingArchive;
}

void RewriteSortMappingArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_id()) {
      if (table_id_ != NULL) table_id_->::TSCE::CFUUIDArchive::Clear();
    }
    if (has_shuffle_mapping()) {
      if (shuffle_mapping_ != NULL) shuffle_mapping_->::TSK::ShuffleMappingArchive::Clear();
    }
    explode_ranges_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewriteSortMappingArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCE.CFUUIDArchive table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shuffle_mapping;
        break;
      }

      // required .TSK.ShuffleMappingArchive shuffle_mapping = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shuffle_mapping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shuffle_mapping()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_explode_ranges;
        break;
      }

      // required bool explode_ranges = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_explode_ranges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &explode_ranges_)));
          set_has_explode_ranges();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RewriteSortMappingArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCE.CFUUIDArchive table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_id(), output);
  }

  // required .TSK.ShuffleMappingArchive shuffle_mapping = 2;
  if (has_shuffle_mapping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shuffle_mapping(), output);
  }

  // required bool explode_ranges = 3;
  if (has_explode_ranges()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->explode_ranges(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RewriteSortMappingArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCE.CFUUIDArchive table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_id(), target);
  }

  // required .TSK.ShuffleMappingArchive shuffle_mapping = 2;
  if (has_shuffle_mapping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shuffle_mapping(), target);
  }

  // required bool explode_ranges = 3;
  if (has_explode_ranges()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->explode_ranges(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RewriteSortMappingArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCE.CFUUIDArchive table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_id());
    }

    // required .TSK.ShuffleMappingArchive shuffle_mapping = 2;
    if (has_shuffle_mapping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shuffle_mapping());
    }

    // required bool explode_ranges = 3;
    if (has_explode_ranges()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewriteSortMappingArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewriteSortMappingArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewriteSortMappingArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewriteSortMappingArchive::MergeFrom(const RewriteSortMappingArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      mutable_table_id()->::TSCE::CFUUIDArchive::MergeFrom(from.table_id());
    }
    if (from.has_shuffle_mapping()) {
      mutable_shuffle_mapping()->::TSK::ShuffleMappingArchive::MergeFrom(from.shuffle_mapping());
    }
    if (from.has_explode_ranges()) {
      set_explode_ranges(from.explode_ranges());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewriteSortMappingArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewriteSortMappingArchive::CopyFrom(const RewriteSortMappingArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewriteSortMappingArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_shuffle_mapping()) {
    if (!this->shuffle_mapping().IsInitialized()) return false;
  }
  return true;
}

void RewriteSortMappingArchive::Swap(RewriteSortMappingArchive* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(shuffle_mapping_, other->shuffle_mapping_);
    std::swap(explode_ranges_, other->explode_ranges_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewriteSortMappingArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewriteSortMappingArchive_descriptor_;
  metadata.reflection = RewriteSortMappingArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RangeMovedInfoArchive::kTableIdFieldNumber;
const int RangeMovedInfoArchive::kFromRangeFieldNumber;
const int RangeMovedInfoArchive::kToRangeFieldNumber;
const int RangeMovedInfoArchive::kFromRangeReferenceFieldNumber;
const int RangeMovedInfoArchive::kToRangeReferenceFieldNumber;
#endif  // !_MSC_VER

RangeMovedInfoArchive::RangeMovedInfoArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RangeMovedInfoArchive::InitAsDefaultInstance() {
  table_id_ = const_cast< ::TSCE::CFUUIDArchive*>(&::TSCE::CFUUIDArchive::default_instance());
  from_range_ = const_cast< ::TSCE::RangeCoordinateArchive*>(&::TSCE::RangeCoordinateArchive::default_instance());
  to_range_ = const_cast< ::TSCE::RangeCoordinateArchive*>(&::TSCE::RangeCoordinateArchive::default_instance());
  from_range_reference_ = const_cast< ::TSCE::RangeReferenceArchive*>(&::TSCE::RangeReferenceArchive::default_instance());
  to_range_reference_ = const_cast< ::TSCE::RangeReferenceArchive*>(&::TSCE::RangeReferenceArchive::default_instance());
}

RangeMovedInfoArchive::RangeMovedInfoArchive(const RangeMovedInfoArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RangeMovedInfoArchive::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = NULL;
  from_range_ = NULL;
  to_range_ = NULL;
  from_range_reference_ = NULL;
  to_range_reference_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RangeMovedInfoArchive::~RangeMovedInfoArchive() {
  SharedDtor();
}

void RangeMovedInfoArchive::SharedDtor() {
  if (this != default_instance_) {
    delete table_id_;
    delete from_range_;
    delete to_range_;
    delete from_range_reference_;
    delete to_range_reference_;
  }
}

void RangeMovedInfoArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeMovedInfoArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RangeMovedInfoArchive_descriptor_;
}

const RangeMovedInfoArchive& RangeMovedInfoArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

RangeMovedInfoArchive* RangeMovedInfoArchive::default_instance_ = NULL;

RangeMovedInfoArchive* RangeMovedInfoArchive::New() const {
  return new RangeMovedInfoArchive;
}

void RangeMovedInfoArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_id()) {
      if (table_id_ != NULL) table_id_->::TSCE::CFUUIDArchive::Clear();
    }
    if (has_from_range()) {
      if (from_range_ != NULL) from_range_->::TSCE::RangeCoordinateArchive::Clear();
    }
    if (has_to_range()) {
      if (to_range_ != NULL) to_range_->::TSCE::RangeCoordinateArchive::Clear();
    }
    if (has_from_range_reference()) {
      if (from_range_reference_ != NULL) from_range_reference_->::TSCE::RangeReferenceArchive::Clear();
    }
    if (has_to_range_reference()) {
      if (to_range_reference_ != NULL) to_range_reference_->::TSCE::RangeReferenceArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RangeMovedInfoArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSCE.CFUUIDArchive table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_from_range;
        break;
      }

      // optional .TSCE.RangeCoordinateArchive from_range = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_to_range;
        break;
      }

      // optional .TSCE.RangeCoordinateArchive to_range = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_from_range_reference;
        break;
      }

      // optional .TSCE.RangeReferenceArchive from_range_reference = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_range_reference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from_range_reference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_to_range_reference;
        break;
      }

      // optional .TSCE.RangeReferenceArchive to_range_reference = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_range_reference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_range_reference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RangeMovedInfoArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSCE.CFUUIDArchive table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_id(), output);
  }

  // optional .TSCE.RangeCoordinateArchive from_range = 2;
  if (has_from_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->from_range(), output);
  }

  // optional .TSCE.RangeCoordinateArchive to_range = 3;
  if (has_to_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->to_range(), output);
  }

  // optional .TSCE.RangeReferenceArchive from_range_reference = 4;
  if (has_from_range_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->from_range_reference(), output);
  }

  // optional .TSCE.RangeReferenceArchive to_range_reference = 5;
  if (has_to_range_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->to_range_reference(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RangeMovedInfoArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSCE.CFUUIDArchive table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_id(), target);
  }

  // optional .TSCE.RangeCoordinateArchive from_range = 2;
  if (has_from_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->from_range(), target);
  }

  // optional .TSCE.RangeCoordinateArchive to_range = 3;
  if (has_to_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->to_range(), target);
  }

  // optional .TSCE.RangeReferenceArchive from_range_reference = 4;
  if (has_from_range_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->from_range_reference(), target);
  }

  // optional .TSCE.RangeReferenceArchive to_range_reference = 5;
  if (has_to_range_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->to_range_reference(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RangeMovedInfoArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSCE.CFUUIDArchive table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_id());
    }

    // optional .TSCE.RangeCoordinateArchive from_range = 2;
    if (has_from_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->from_range());
    }

    // optional .TSCE.RangeCoordinateArchive to_range = 3;
    if (has_to_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->to_range());
    }

    // optional .TSCE.RangeReferenceArchive from_range_reference = 4;
    if (has_from_range_reference()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->from_range_reference());
    }

    // optional .TSCE.RangeReferenceArchive to_range_reference = 5;
    if (has_to_range_reference()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->to_range_reference());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeMovedInfoArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RangeMovedInfoArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RangeMovedInfoArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RangeMovedInfoArchive::MergeFrom(const RangeMovedInfoArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      mutable_table_id()->::TSCE::CFUUIDArchive::MergeFrom(from.table_id());
    }
    if (from.has_from_range()) {
      mutable_from_range()->::TSCE::RangeCoordinateArchive::MergeFrom(from.from_range());
    }
    if (from.has_to_range()) {
      mutable_to_range()->::TSCE::RangeCoordinateArchive::MergeFrom(from.to_range());
    }
    if (from.has_from_range_reference()) {
      mutable_from_range_reference()->::TSCE::RangeReferenceArchive::MergeFrom(from.from_range_reference());
    }
    if (from.has_to_range_reference()) {
      mutable_to_range_reference()->::TSCE::RangeReferenceArchive::MergeFrom(from.to_range_reference());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RangeMovedInfoArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeMovedInfoArchive::CopyFrom(const RangeMovedInfoArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeMovedInfoArchive::IsInitialized() const {

  if (has_from_range()) {
    if (!this->from_range().IsInitialized()) return false;
  }
  if (has_to_range()) {
    if (!this->to_range().IsInitialized()) return false;
  }
  if (has_from_range_reference()) {
    if (!this->from_range_reference().IsInitialized()) return false;
  }
  if (has_to_range_reference()) {
    if (!this->to_range_reference().IsInitialized()) return false;
  }
  return true;
}

void RangeMovedInfoArchive::Swap(RangeMovedInfoArchive* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(from_range_, other->from_range_);
    std::swap(to_range_, other->to_range_);
    std::swap(from_range_reference_, other->from_range_reference_);
    std::swap(to_range_reference_, other->to_range_reference_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RangeMovedInfoArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RangeMovedInfoArchive_descriptor_;
  metadata.reflection = RangeMovedInfoArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableResizedInfoArchive::kTableIdFieldNumber;
const int TableResizedInfoArchive::kNewTableSizeFieldNumber;
const int TableResizedInfoArchive::kOldTableSizeFieldNumber;
#endif  // !_MSC_VER

TableResizedInfoArchive::TableResizedInfoArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableResizedInfoArchive::InitAsDefaultInstance() {
  table_id_ = const_cast< ::TSCE::CFUUIDArchive*>(&::TSCE::CFUUIDArchive::default_instance());
  new_table_size_ = const_cast< ::TSCE::RangeCoordinateArchive*>(&::TSCE::RangeCoordinateArchive::default_instance());
  old_table_size_ = const_cast< ::TSCE::RangeCoordinateArchive*>(&::TSCE::RangeCoordinateArchive::default_instance());
}

TableResizedInfoArchive::TableResizedInfoArchive(const TableResizedInfoArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableResizedInfoArchive::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = NULL;
  new_table_size_ = NULL;
  old_table_size_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableResizedInfoArchive::~TableResizedInfoArchive() {
  SharedDtor();
}

void TableResizedInfoArchive::SharedDtor() {
  if (this != default_instance_) {
    delete table_id_;
    delete new_table_size_;
    delete old_table_size_;
  }
}

void TableResizedInfoArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableResizedInfoArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableResizedInfoArchive_descriptor_;
}

const TableResizedInfoArchive& TableResizedInfoArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

TableResizedInfoArchive* TableResizedInfoArchive::default_instance_ = NULL;

TableResizedInfoArchive* TableResizedInfoArchive::New() const {
  return new TableResizedInfoArchive;
}

void TableResizedInfoArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_id()) {
      if (table_id_ != NULL) table_id_->::TSCE::CFUUIDArchive::Clear();
    }
    if (has_new_table_size()) {
      if (new_table_size_ != NULL) new_table_size_->::TSCE::RangeCoordinateArchive::Clear();
    }
    if (has_old_table_size()) {
      if (old_table_size_ != NULL) old_table_size_->::TSCE::RangeCoordinateArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableResizedInfoArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCE.CFUUIDArchive table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_table_size;
        break;
      }

      // required .TSCE.RangeCoordinateArchive new_table_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_table_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_table_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_old_table_size;
        break;
      }

      // optional .TSCE.RangeCoordinateArchive old_table_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_table_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_table_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableResizedInfoArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCE.CFUUIDArchive table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_id(), output);
  }

  // required .TSCE.RangeCoordinateArchive new_table_size = 2;
  if (has_new_table_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->new_table_size(), output);
  }

  // optional .TSCE.RangeCoordinateArchive old_table_size = 3;
  if (has_old_table_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->old_table_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableResizedInfoArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCE.CFUUIDArchive table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_id(), target);
  }

  // required .TSCE.RangeCoordinateArchive new_table_size = 2;
  if (has_new_table_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->new_table_size(), target);
  }

  // optional .TSCE.RangeCoordinateArchive old_table_size = 3;
  if (has_old_table_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->old_table_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableResizedInfoArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCE.CFUUIDArchive table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_id());
    }

    // required .TSCE.RangeCoordinateArchive new_table_size = 2;
    if (has_new_table_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_table_size());
    }

    // optional .TSCE.RangeCoordinateArchive old_table_size = 3;
    if (has_old_table_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_table_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableResizedInfoArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableResizedInfoArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableResizedInfoArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableResizedInfoArchive::MergeFrom(const TableResizedInfoArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      mutable_table_id()->::TSCE::CFUUIDArchive::MergeFrom(from.table_id());
    }
    if (from.has_new_table_size()) {
      mutable_new_table_size()->::TSCE::RangeCoordinateArchive::MergeFrom(from.new_table_size());
    }
    if (from.has_old_table_size()) {
      mutable_old_table_size()->::TSCE::RangeCoordinateArchive::MergeFrom(from.old_table_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableResizedInfoArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableResizedInfoArchive::CopyFrom(const TableResizedInfoArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableResizedInfoArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_new_table_size()) {
    if (!this->new_table_size().IsInitialized()) return false;
  }
  if (has_old_table_size()) {
    if (!this->old_table_size().IsInitialized()) return false;
  }
  return true;
}

void TableResizedInfoArchive::Swap(TableResizedInfoArchive* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(new_table_size_, other->new_table_size_);
    std::swap(old_table_size_, other->old_table_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableResizedInfoArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableResizedInfoArchive_descriptor_;
  metadata.reflection = TableResizedInfoArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CellMergeInfoArchive::kTableIdFieldNumber;
const int CellMergeInfoArchive::kMergedRangeFieldNumber;
#endif  // !_MSC_VER

CellMergeInfoArchive::CellMergeInfoArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CellMergeInfoArchive::InitAsDefaultInstance() {
  table_id_ = const_cast< ::TSCE::CFUUIDArchive*>(&::TSCE::CFUUIDArchive::default_instance());
  merged_range_ = const_cast< ::TSCE::RangeCoordinateArchive*>(&::TSCE::RangeCoordinateArchive::default_instance());
}

CellMergeInfoArchive::CellMergeInfoArchive(const CellMergeInfoArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CellMergeInfoArchive::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = NULL;
  merged_range_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CellMergeInfoArchive::~CellMergeInfoArchive() {
  SharedDtor();
}

void CellMergeInfoArchive::SharedDtor() {
  if (this != default_instance_) {
    delete table_id_;
    delete merged_range_;
  }
}

void CellMergeInfoArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellMergeInfoArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellMergeInfoArchive_descriptor_;
}

const CellMergeInfoArchive& CellMergeInfoArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

CellMergeInfoArchive* CellMergeInfoArchive::default_instance_ = NULL;

CellMergeInfoArchive* CellMergeInfoArchive::New() const {
  return new CellMergeInfoArchive;
}

void CellMergeInfoArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_id()) {
      if (table_id_ != NULL) table_id_->::TSCE::CFUUIDArchive::Clear();
    }
    if (has_merged_range()) {
      if (merged_range_ != NULL) merged_range_->::TSCE::RangeCoordinateArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CellMergeInfoArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCE.CFUUIDArchive table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_merged_range;
        break;
      }

      // required .TSCE.RangeCoordinateArchive merged_range = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_merged_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_merged_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CellMergeInfoArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCE.CFUUIDArchive table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_id(), output);
  }

  // required .TSCE.RangeCoordinateArchive merged_range = 2;
  if (has_merged_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->merged_range(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CellMergeInfoArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCE.CFUUIDArchive table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_id(), target);
  }

  // required .TSCE.RangeCoordinateArchive merged_range = 2;
  if (has_merged_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->merged_range(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CellMergeInfoArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCE.CFUUIDArchive table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_id());
    }

    // required .TSCE.RangeCoordinateArchive merged_range = 2;
    if (has_merged_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->merged_range());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellMergeInfoArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CellMergeInfoArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CellMergeInfoArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CellMergeInfoArchive::MergeFrom(const CellMergeInfoArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      mutable_table_id()->::TSCE::CFUUIDArchive::MergeFrom(from.table_id());
    }
    if (from.has_merged_range()) {
      mutable_merged_range()->::TSCE::RangeCoordinateArchive::MergeFrom(from.merged_range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CellMergeInfoArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellMergeInfoArchive::CopyFrom(const CellMergeInfoArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellMergeInfoArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_merged_range()) {
    if (!this->merged_range().IsInitialized()) return false;
  }
  return true;
}

void CellMergeInfoArchive::Swap(CellMergeInfoArchive* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(merged_range_, other->merged_range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CellMergeInfoArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CellMergeInfoArchive_descriptor_;
  metadata.reflection = CellMergeInfoArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FormulaRewriteSpecArchive_RewriteType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FormulaRewriteSpecArchive_RewriteType_descriptor_;
}
bool FormulaRewriteSpecArchive_RewriteType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::TECTONIC_SHIFT;
const FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::REMAP_WITH_SORT_MAPPING;
const FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::MOVE_RANGE;
const FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::DELETE_OWNER;
const FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::TABLE_RESIZE;
const FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::CELL_MERGE;
const FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::RewriteType_MIN;
const FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::RewriteType_MAX;
const int FormulaRewriteSpecArchive::RewriteType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FormulaRewriteSpecArchive::kRewriteTypeFieldNumber;
const int FormulaRewriteSpecArchive::kTectonicShiftFieldNumber;
const int FormulaRewriteSpecArchive::kSortMappingFieldNumber;
const int FormulaRewriteSpecArchive::kRangeMovedInfoFieldNumber;
const int FormulaRewriteSpecArchive::kDeletedOwnerIdFieldNumber;
const int FormulaRewriteSpecArchive::kTableResizedInfoFieldNumber;
const int FormulaRewriteSpecArchive::kCellMergeInfoFieldNumber;
#endif  // !_MSC_VER

FormulaRewriteSpecArchive::FormulaRewriteSpecArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FormulaRewriteSpecArchive::InitAsDefaultInstance() {
  tectonic_shift_ = const_cast< ::TSCE::TectonicShiftArchive*>(&::TSCE::TectonicShiftArchive::default_instance());
  sort_mapping_ = const_cast< ::TSCE::RewriteSortMappingArchive*>(&::TSCE::RewriteSortMappingArchive::default_instance());
  range_moved_info_ = const_cast< ::TSCE::RangeMovedInfoArchive*>(&::TSCE::RangeMovedInfoArchive::default_instance());
  deleted_owner_id_ = const_cast< ::TSCE::CFUUIDArchive*>(&::TSCE::CFUUIDArchive::default_instance());
  table_resized_info_ = const_cast< ::TSCE::TableResizedInfoArchive*>(&::TSCE::TableResizedInfoArchive::default_instance());
  cell_merge_info_ = const_cast< ::TSCE::CellMergeInfoArchive*>(&::TSCE::CellMergeInfoArchive::default_instance());
}

FormulaRewriteSpecArchive::FormulaRewriteSpecArchive(const FormulaRewriteSpecArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FormulaRewriteSpecArchive::SharedCtor() {
  _cached_size_ = 0;
  rewrite_type_ = 1;
  tectonic_shift_ = NULL;
  sort_mapping_ = NULL;
  range_moved_info_ = NULL;
  deleted_owner_id_ = NULL;
  table_resized_info_ = NULL;
  cell_merge_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FormulaRewriteSpecArchive::~FormulaRewriteSpecArchive() {
  SharedDtor();
}

void FormulaRewriteSpecArchive::SharedDtor() {
  if (this != default_instance_) {
    delete tectonic_shift_;
    delete sort_mapping_;
    delete range_moved_info_;
    delete deleted_owner_id_;
    delete table_resized_info_;
    delete cell_merge_info_;
  }
}

void FormulaRewriteSpecArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FormulaRewriteSpecArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FormulaRewriteSpecArchive_descriptor_;
}

const FormulaRewriteSpecArchive& FormulaRewriteSpecArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

FormulaRewriteSpecArchive* FormulaRewriteSpecArchive::default_instance_ = NULL;

FormulaRewriteSpecArchive* FormulaRewriteSpecArchive::New() const {
  return new FormulaRewriteSpecArchive;
}

void FormulaRewriteSpecArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rewrite_type_ = 1;
    if (has_tectonic_shift()) {
      if (tectonic_shift_ != NULL) tectonic_shift_->::TSCE::TectonicShiftArchive::Clear();
    }
    if (has_sort_mapping()) {
      if (sort_mapping_ != NULL) sort_mapping_->::TSCE::RewriteSortMappingArchive::Clear();
    }
    if (has_range_moved_info()) {
      if (range_moved_info_ != NULL) range_moved_info_->::TSCE::RangeMovedInfoArchive::Clear();
    }
    if (has_deleted_owner_id()) {
      if (deleted_owner_id_ != NULL) deleted_owner_id_->::TSCE::CFUUIDArchive::Clear();
    }
    if (has_table_resized_info()) {
      if (table_resized_info_ != NULL) table_resized_info_->::TSCE::TableResizedInfoArchive::Clear();
    }
    if (has_cell_merge_info()) {
      if (cell_merge_info_ != NULL) cell_merge_info_->::TSCE::CellMergeInfoArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FormulaRewriteSpecArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCE.FormulaRewriteSpecArchive.RewriteType rewrite_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSCE::FormulaRewriteSpecArchive_RewriteType_IsValid(value)) {
            set_rewrite_type(static_cast< ::TSCE::FormulaRewriteSpecArchive_RewriteType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tectonic_shift;
        break;
      }

      // optional .TSCE.TectonicShiftArchive tectonic_shift = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tectonic_shift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tectonic_shift()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sort_mapping;
        break;
      }

      // optional .TSCE.RewriteSortMappingArchive sort_mapping = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sort_mapping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sort_mapping()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_range_moved_info;
        break;
      }

      // optional .TSCE.RangeMovedInfoArchive range_moved_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_range_moved_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range_moved_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_deleted_owner_id;
        break;
      }

      // optional .TSCE.CFUUIDArchive deleted_owner_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deleted_owner_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deleted_owner_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_table_resized_info;
        break;
      }

      // optional .TSCE.TableResizedInfoArchive table_resized_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_resized_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_resized_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_cell_merge_info;
        break;
      }

      // optional .TSCE.CellMergeInfoArchive cell_merge_info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_merge_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell_merge_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FormulaRewriteSpecArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCE.FormulaRewriteSpecArchive.RewriteType rewrite_type = 1;
  if (has_rewrite_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rewrite_type(), output);
  }

  // optional .TSCE.TectonicShiftArchive tectonic_shift = 2;
  if (has_tectonic_shift()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tectonic_shift(), output);
  }

  // optional .TSCE.RewriteSortMappingArchive sort_mapping = 3;
  if (has_sort_mapping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sort_mapping(), output);
  }

  // optional .TSCE.RangeMovedInfoArchive range_moved_info = 4;
  if (has_range_moved_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->range_moved_info(), output);
  }

  // optional .TSCE.CFUUIDArchive deleted_owner_id = 5;
  if (has_deleted_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->deleted_owner_id(), output);
  }

  // optional .TSCE.TableResizedInfoArchive table_resized_info = 6;
  if (has_table_resized_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->table_resized_info(), output);
  }

  // optional .TSCE.CellMergeInfoArchive cell_merge_info = 7;
  if (has_cell_merge_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->cell_merge_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FormulaRewriteSpecArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCE.FormulaRewriteSpecArchive.RewriteType rewrite_type = 1;
  if (has_rewrite_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rewrite_type(), target);
  }

  // optional .TSCE.TectonicShiftArchive tectonic_shift = 2;
  if (has_tectonic_shift()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tectonic_shift(), target);
  }

  // optional .TSCE.RewriteSortMappingArchive sort_mapping = 3;
  if (has_sort_mapping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sort_mapping(), target);
  }

  // optional .TSCE.RangeMovedInfoArchive range_moved_info = 4;
  if (has_range_moved_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->range_moved_info(), target);
  }

  // optional .TSCE.CFUUIDArchive deleted_owner_id = 5;
  if (has_deleted_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->deleted_owner_id(), target);
  }

  // optional .TSCE.TableResizedInfoArchive table_resized_info = 6;
  if (has_table_resized_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->table_resized_info(), target);
  }

  // optional .TSCE.CellMergeInfoArchive cell_merge_info = 7;
  if (has_cell_merge_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->cell_merge_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FormulaRewriteSpecArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCE.FormulaRewriteSpecArchive.RewriteType rewrite_type = 1;
    if (has_rewrite_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rewrite_type());
    }

    // optional .TSCE.TectonicShiftArchive tectonic_shift = 2;
    if (has_tectonic_shift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tectonic_shift());
    }

    // optional .TSCE.RewriteSortMappingArchive sort_mapping = 3;
    if (has_sort_mapping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sort_mapping());
    }

    // optional .TSCE.RangeMovedInfoArchive range_moved_info = 4;
    if (has_range_moved_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->range_moved_info());
    }

    // optional .TSCE.CFUUIDArchive deleted_owner_id = 5;
    if (has_deleted_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deleted_owner_id());
    }

    // optional .TSCE.TableResizedInfoArchive table_resized_info = 6;
    if (has_table_resized_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_resized_info());
    }

    // optional .TSCE.CellMergeInfoArchive cell_merge_info = 7;
    if (has_cell_merge_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cell_merge_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FormulaRewriteSpecArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FormulaRewriteSpecArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FormulaRewriteSpecArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FormulaRewriteSpecArchive::MergeFrom(const FormulaRewriteSpecArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewrite_type()) {
      set_rewrite_type(from.rewrite_type());
    }
    if (from.has_tectonic_shift()) {
      mutable_tectonic_shift()->::TSCE::TectonicShiftArchive::MergeFrom(from.tectonic_shift());
    }
    if (from.has_sort_mapping()) {
      mutable_sort_mapping()->::TSCE::RewriteSortMappingArchive::MergeFrom(from.sort_mapping());
    }
    if (from.has_range_moved_info()) {
      mutable_range_moved_info()->::TSCE::RangeMovedInfoArchive::MergeFrom(from.range_moved_info());
    }
    if (from.has_deleted_owner_id()) {
      mutable_deleted_owner_id()->::TSCE::CFUUIDArchive::MergeFrom(from.deleted_owner_id());
    }
    if (from.has_table_resized_info()) {
      mutable_table_resized_info()->::TSCE::TableResizedInfoArchive::MergeFrom(from.table_resized_info());
    }
    if (from.has_cell_merge_info()) {
      mutable_cell_merge_info()->::TSCE::CellMergeInfoArchive::MergeFrom(from.cell_merge_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FormulaRewriteSpecArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormulaRewriteSpecArchive::CopyFrom(const FormulaRewriteSpecArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaRewriteSpecArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_tectonic_shift()) {
    if (!this->tectonic_shift().IsInitialized()) return false;
  }
  if (has_sort_mapping()) {
    if (!this->sort_mapping().IsInitialized()) return false;
  }
  if (has_range_moved_info()) {
    if (!this->range_moved_info().IsInitialized()) return false;
  }
  if (has_table_resized_info()) {
    if (!this->table_resized_info().IsInitialized()) return false;
  }
  if (has_cell_merge_info()) {
    if (!this->cell_merge_info().IsInitialized()) return false;
  }
  return true;
}

void FormulaRewriteSpecArchive::Swap(FormulaRewriteSpecArchive* other) {
  if (other != this) {
    std::swap(rewrite_type_, other->rewrite_type_);
    std::swap(tectonic_shift_, other->tectonic_shift_);
    std::swap(sort_mapping_, other->sort_mapping_);
    std::swap(range_moved_info_, other->range_moved_info_);
    std::swap(deleted_owner_id_, other->deleted_owner_id_);
    std::swap(table_resized_info_, other->table_resized_info_);
    std::swap(cell_merge_info_, other->cell_merge_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FormulaRewriteSpecArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FormulaRewriteSpecArchive_descriptor_;
  metadata.reflection = FormulaRewriteSpecArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CellCoordinateFormulaPairArchive::kColumnFieldNumber;
const int CellCoordinateFormulaPairArchive::kRowFieldNumber;
const int CellCoordinateFormulaPairArchive::kFormulaFieldNumber;
#endif  // !_MSC_VER

CellCoordinateFormulaPairArchive::CellCoordinateFormulaPairArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CellCoordinateFormulaPairArchive::InitAsDefaultInstance() {
  formula_ = const_cast< ::TSCE::FormulaArchive*>(&::TSCE::FormulaArchive::default_instance());
}

CellCoordinateFormulaPairArchive::CellCoordinateFormulaPairArchive(const CellCoordinateFormulaPairArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CellCoordinateFormulaPairArchive::SharedCtor() {
  _cached_size_ = 0;
  column_ = 0u;
  row_ = 0u;
  formula_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CellCoordinateFormulaPairArchive::~CellCoordinateFormulaPairArchive() {
  SharedDtor();
}

void CellCoordinateFormulaPairArchive::SharedDtor() {
  if (this != default_instance_) {
    delete formula_;
  }
}

void CellCoordinateFormulaPairArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellCoordinateFormulaPairArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellCoordinateFormulaPairArchive_descriptor_;
}

const CellCoordinateFormulaPairArchive& CellCoordinateFormulaPairArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

CellCoordinateFormulaPairArchive* CellCoordinateFormulaPairArchive::default_instance_ = NULL;

CellCoordinateFormulaPairArchive* CellCoordinateFormulaPairArchive::New() const {
  return new CellCoordinateFormulaPairArchive;
}

void CellCoordinateFormulaPairArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    column_ = 0u;
    row_ = 0u;
    if (has_formula()) {
      if (formula_ != NULL) formula_->::TSCE::FormulaArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CellCoordinateFormulaPairArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 column = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &column_)));
          set_has_column();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_row;
        break;
      }

      // required uint32 row = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_formula;
        break;
      }

      // optional .TSCE.FormulaArchive formula = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_formula()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CellCoordinateFormulaPairArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 column = 1;
  if (has_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->column(), output);
  }

  // required uint32 row = 2;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->row(), output);
  }

  // optional .TSCE.FormulaArchive formula = 3;
  if (has_formula()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->formula(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CellCoordinateFormulaPairArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 column = 1;
  if (has_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->column(), target);
  }

  // required uint32 row = 2;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->row(), target);
  }

  // optional .TSCE.FormulaArchive formula = 3;
  if (has_formula()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->formula(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CellCoordinateFormulaPairArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 column = 1;
    if (has_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->column());
    }

    // required uint32 row = 2;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->row());
    }

    // optional .TSCE.FormulaArchive formula = 3;
    if (has_formula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formula());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellCoordinateFormulaPairArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CellCoordinateFormulaPairArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CellCoordinateFormulaPairArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CellCoordinateFormulaPairArchive::MergeFrom(const CellCoordinateFormulaPairArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_column()) {
      set_column(from.column());
    }
    if (from.has_row()) {
      set_row(from.row());
    }
    if (from.has_formula()) {
      mutable_formula()->::TSCE::FormulaArchive::MergeFrom(from.formula());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CellCoordinateFormulaPairArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellCoordinateFormulaPairArchive::CopyFrom(const CellCoordinateFormulaPairArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellCoordinateFormulaPairArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_formula()) {
    if (!this->formula().IsInitialized()) return false;
  }
  return true;
}

void CellCoordinateFormulaPairArchive::Swap(CellCoordinateFormulaPairArchive* other) {
  if (other != this) {
    std::swap(column_, other->column_);
    std::swap(row_, other->row_);
    std::swap(formula_, other->formula_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CellCoordinateFormulaPairArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CellCoordinateFormulaPairArchive_descriptor_;
  metadata.reflection = CellCoordinateFormulaPairArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CellCoordinateArchive::kPackedDataFieldNumber;
const int CellCoordinateArchive::kColumnFieldNumber;
const int CellCoordinateArchive::kRowFieldNumber;
#endif  // !_MSC_VER

CellCoordinateArchive::CellCoordinateArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CellCoordinateArchive::InitAsDefaultInstance() {
}

CellCoordinateArchive::CellCoordinateArchive(const CellCoordinateArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CellCoordinateArchive::SharedCtor() {
  _cached_size_ = 0;
  packeddata_ = 0u;
  column_ = 0u;
  row_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CellCoordinateArchive::~CellCoordinateArchive() {
  SharedDtor();
}

void CellCoordinateArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CellCoordinateArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellCoordinateArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellCoordinateArchive_descriptor_;
}

const CellCoordinateArchive& CellCoordinateArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

CellCoordinateArchive* CellCoordinateArchive::default_instance_ = NULL;

CellCoordinateArchive* CellCoordinateArchive::New() const {
  return new CellCoordinateArchive;
}

void CellCoordinateArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packeddata_ = 0u;
    column_ = 0u;
    row_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CellCoordinateArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 packedData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &packeddata_)));
          set_has_packeddata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_column;
        break;
      }

      // optional uint32 column = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &column_)));
          set_has_column();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_row;
        break;
      }

      // optional uint32 row = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CellCoordinateArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 packedData = 1;
  if (has_packeddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->packeddata(), output);
  }

  // optional uint32 column = 2;
  if (has_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->column(), output);
  }

  // optional uint32 row = 3;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->row(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CellCoordinateArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 packedData = 1;
  if (has_packeddata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->packeddata(), target);
  }

  // optional uint32 column = 2;
  if (has_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->column(), target);
  }

  // optional uint32 row = 3;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->row(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CellCoordinateArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 packedData = 1;
    if (has_packeddata()) {
      total_size += 1 + 4;
    }

    // optional uint32 column = 2;
    if (has_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->column());
    }

    // optional uint32 row = 3;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->row());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellCoordinateArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CellCoordinateArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CellCoordinateArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CellCoordinateArchive::MergeFrom(const CellCoordinateArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packeddata()) {
      set_packeddata(from.packeddata());
    }
    if (from.has_column()) {
      set_column(from.column());
    }
    if (from.has_row()) {
      set_row(from.row());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CellCoordinateArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellCoordinateArchive::CopyFrom(const CellCoordinateArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellCoordinateArchive::IsInitialized() const {

  return true;
}

void CellCoordinateArchive::Swap(CellCoordinateArchive* other) {
  if (other != this) {
    std::swap(packeddata_, other->packeddata_);
    std::swap(column_, other->column_);
    std::swap(row_, other->row_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CellCoordinateArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CellCoordinateArchive_descriptor_;
  metadata.reflection = CellCoordinateArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CellCoordinateVectorArchive::kCellCoordinateFieldNumber;
#endif  // !_MSC_VER

CellCoordinateVectorArchive::CellCoordinateVectorArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CellCoordinateVectorArchive::InitAsDefaultInstance() {
}

CellCoordinateVectorArchive::CellCoordinateVectorArchive(const CellCoordinateVectorArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CellCoordinateVectorArchive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CellCoordinateVectorArchive::~CellCoordinateVectorArchive() {
  SharedDtor();
}

void CellCoordinateVectorArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CellCoordinateVectorArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellCoordinateVectorArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellCoordinateVectorArchive_descriptor_;
}

const CellCoordinateVectorArchive& CellCoordinateVectorArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

CellCoordinateVectorArchive* CellCoordinateVectorArchive::default_instance_ = NULL;

CellCoordinateVectorArchive* CellCoordinateVectorArchive::New() const {
  return new CellCoordinateVectorArchive;
}

void CellCoordinateVectorArchive::Clear() {
  cell_coordinate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CellCoordinateVectorArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSCE.CellCoordinateArchive cell_coordinate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_coordinate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cell_coordinate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cell_coordinate;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CellCoordinateVectorArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSCE.CellCoordinateArchive cell_coordinate = 1;
  for (int i = 0; i < this->cell_coordinate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cell_coordinate(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CellCoordinateVectorArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSCE.CellCoordinateArchive cell_coordinate = 1;
  for (int i = 0; i < this->cell_coordinate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cell_coordinate(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CellCoordinateVectorArchive::ByteSize() const {
  int total_size = 0;

  // repeated .TSCE.CellCoordinateArchive cell_coordinate = 1;
  total_size += 1 * this->cell_coordinate_size();
  for (int i = 0; i < this->cell_coordinate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cell_coordinate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellCoordinateVectorArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CellCoordinateVectorArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CellCoordinateVectorArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CellCoordinateVectorArchive::MergeFrom(const CellCoordinateVectorArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  cell_coordinate_.MergeFrom(from.cell_coordinate_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CellCoordinateVectorArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellCoordinateVectorArchive::CopyFrom(const CellCoordinateVectorArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellCoordinateVectorArchive::IsInitialized() const {

  return true;
}

void CellCoordinateVectorArchive::Swap(CellCoordinateVectorArchive* other) {
  if (other != this) {
    cell_coordinate_.Swap(&other->cell_coordinate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CellCoordinateVectorArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CellCoordinateVectorArchive_descriptor_;
  metadata.reflection = CellCoordinateVectorArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CellCoordinateObjectPairArchive::kCellCoordinateFieldNumber;
const int CellCoordinateObjectPairArchive::kObjectFieldNumber;
#endif  // !_MSC_VER

CellCoordinateObjectPairArchive::CellCoordinateObjectPairArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CellCoordinateObjectPairArchive::InitAsDefaultInstance() {
  cell_coordinate_ = const_cast< ::TSCE::CellCoordinateArchive*>(&::TSCE::CellCoordinateArchive::default_instance());
  object_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CellCoordinateObjectPairArchive::CellCoordinateObjectPairArchive(const CellCoordinateObjectPairArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CellCoordinateObjectPairArchive::SharedCtor() {
  _cached_size_ = 0;
  cell_coordinate_ = NULL;
  object_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CellCoordinateObjectPairArchive::~CellCoordinateObjectPairArchive() {
  SharedDtor();
}

void CellCoordinateObjectPairArchive::SharedDtor() {
  if (this != default_instance_) {
    delete cell_coordinate_;
    delete object_;
  }
}

void CellCoordinateObjectPairArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellCoordinateObjectPairArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellCoordinateObjectPairArchive_descriptor_;
}

const CellCoordinateObjectPairArchive& CellCoordinateObjectPairArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

CellCoordinateObjectPairArchive* CellCoordinateObjectPairArchive::default_instance_ = NULL;

CellCoordinateObjectPairArchive* CellCoordinateObjectPairArchive::New() const {
  return new CellCoordinateObjectPairArchive;
}

void CellCoordinateObjectPairArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cell_coordinate()) {
      if (cell_coordinate_ != NULL) cell_coordinate_->::TSCE::CellCoordinateArchive::Clear();
    }
    if (has_object()) {
      if (object_ != NULL) object_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CellCoordinateObjectPairArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCE.CellCoordinateArchive cell_coordinate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell_coordinate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_object;
        break;
      }

      // required .TSP.Reference object = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CellCoordinateObjectPairArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCE.CellCoordinateArchive cell_coordinate = 1;
  if (has_cell_coordinate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cell_coordinate(), output);
  }

  // required .TSP.Reference object = 2;
  if (has_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->object(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CellCoordinateObjectPairArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCE.CellCoordinateArchive cell_coordinate = 1;
  if (has_cell_coordinate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cell_coordinate(), target);
  }

  // required .TSP.Reference object = 2;
  if (has_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->object(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CellCoordinateObjectPairArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCE.CellCoordinateArchive cell_coordinate = 1;
    if (has_cell_coordinate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cell_coordinate());
    }

    // required .TSP.Reference object = 2;
    if (has_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellCoordinateObjectPairArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CellCoordinateObjectPairArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CellCoordinateObjectPairArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CellCoordinateObjectPairArchive::MergeFrom(const CellCoordinateObjectPairArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cell_coordinate()) {
      mutable_cell_coordinate()->::TSCE::CellCoordinateArchive::MergeFrom(from.cell_coordinate());
    }
    if (from.has_object()) {
      mutable_object()->::TSP::Reference::MergeFrom(from.object());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CellCoordinateObjectPairArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellCoordinateObjectPairArchive::CopyFrom(const CellCoordinateObjectPairArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellCoordinateObjectPairArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_object()) {
    if (!this->object().IsInitialized()) return false;
  }
  return true;
}

void CellCoordinateObjectPairArchive::Swap(CellCoordinateObjectPairArchive* other) {
  if (other != this) {
    std::swap(cell_coordinate_, other->cell_coordinate_);
    std::swap(object_, other->object_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CellCoordinateObjectPairArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CellCoordinateObjectPairArchive_descriptor_;
  metadata.reflection = CellCoordinateObjectPairArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CellCoordinateObjectMapArchive::kCellCoordinateObjectPairFieldNumber;
#endif  // !_MSC_VER

CellCoordinateObjectMapArchive::CellCoordinateObjectMapArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CellCoordinateObjectMapArchive::InitAsDefaultInstance() {
}

CellCoordinateObjectMapArchive::CellCoordinateObjectMapArchive(const CellCoordinateObjectMapArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CellCoordinateObjectMapArchive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CellCoordinateObjectMapArchive::~CellCoordinateObjectMapArchive() {
  SharedDtor();
}

void CellCoordinateObjectMapArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CellCoordinateObjectMapArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellCoordinateObjectMapArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellCoordinateObjectMapArchive_descriptor_;
}

const CellCoordinateObjectMapArchive& CellCoordinateObjectMapArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

CellCoordinateObjectMapArchive* CellCoordinateObjectMapArchive::default_instance_ = NULL;

CellCoordinateObjectMapArchive* CellCoordinateObjectMapArchive::New() const {
  return new CellCoordinateObjectMapArchive;
}

void CellCoordinateObjectMapArchive::Clear() {
  cell_coordinate_object_pair_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CellCoordinateObjectMapArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSCE.CellCoordinateObjectPairArchive cell_coordinate_object_pair = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_coordinate_object_pair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cell_coordinate_object_pair()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cell_coordinate_object_pair;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CellCoordinateObjectMapArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSCE.CellCoordinateObjectPairArchive cell_coordinate_object_pair = 1;
  for (int i = 0; i < this->cell_coordinate_object_pair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cell_coordinate_object_pair(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CellCoordinateObjectMapArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSCE.CellCoordinateObjectPairArchive cell_coordinate_object_pair = 1;
  for (int i = 0; i < this->cell_coordinate_object_pair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cell_coordinate_object_pair(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CellCoordinateObjectMapArchive::ByteSize() const {
  int total_size = 0;

  // repeated .TSCE.CellCoordinateObjectPairArchive cell_coordinate_object_pair = 1;
  total_size += 1 * this->cell_coordinate_object_pair_size();
  for (int i = 0; i < this->cell_coordinate_object_pair_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cell_coordinate_object_pair(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellCoordinateObjectMapArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CellCoordinateObjectMapArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CellCoordinateObjectMapArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CellCoordinateObjectMapArchive::MergeFrom(const CellCoordinateObjectMapArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  cell_coordinate_object_pair_.MergeFrom(from.cell_coordinate_object_pair_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CellCoordinateObjectMapArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellCoordinateObjectMapArchive::CopyFrom(const CellCoordinateObjectMapArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellCoordinateObjectMapArchive::IsInitialized() const {

  for (int i = 0; i < cell_coordinate_object_pair_size(); i++) {
    if (!this->cell_coordinate_object_pair(i).IsInitialized()) return false;
  }
  return true;
}

void CellCoordinateObjectMapArchive::Swap(CellCoordinateObjectMapArchive* other) {
  if (other != this) {
    cell_coordinate_object_pair_.Swap(&other->cell_coordinate_object_pair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CellCoordinateObjectMapArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CellCoordinateObjectMapArchive_descriptor_;
  metadata.reflection = CellCoordinateObjectMapArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OwnerFormulaMapArchive::kCoordinateFormulaPairFieldNumber;
#endif  // !_MSC_VER

OwnerFormulaMapArchive::OwnerFormulaMapArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OwnerFormulaMapArchive::InitAsDefaultInstance() {
}

OwnerFormulaMapArchive::OwnerFormulaMapArchive(const OwnerFormulaMapArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OwnerFormulaMapArchive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OwnerFormulaMapArchive::~OwnerFormulaMapArchive() {
  SharedDtor();
}

void OwnerFormulaMapArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OwnerFormulaMapArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OwnerFormulaMapArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OwnerFormulaMapArchive_descriptor_;
}

const OwnerFormulaMapArchive& OwnerFormulaMapArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

OwnerFormulaMapArchive* OwnerFormulaMapArchive::default_instance_ = NULL;

OwnerFormulaMapArchive* OwnerFormulaMapArchive::New() const {
  return new OwnerFormulaMapArchive;
}

void OwnerFormulaMapArchive::Clear() {
  coordinate_formula_pair_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OwnerFormulaMapArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSCE.CellCoordinateFormulaPairArchive coordinate_formula_pair = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coordinate_formula_pair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_coordinate_formula_pair()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_coordinate_formula_pair;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OwnerFormulaMapArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSCE.CellCoordinateFormulaPairArchive coordinate_formula_pair = 1;
  for (int i = 0; i < this->coordinate_formula_pair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->coordinate_formula_pair(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OwnerFormulaMapArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSCE.CellCoordinateFormulaPairArchive coordinate_formula_pair = 1;
  for (int i = 0; i < this->coordinate_formula_pair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->coordinate_formula_pair(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OwnerFormulaMapArchive::ByteSize() const {
  int total_size = 0;

  // repeated .TSCE.CellCoordinateFormulaPairArchive coordinate_formula_pair = 1;
  total_size += 1 * this->coordinate_formula_pair_size();
  for (int i = 0; i < this->coordinate_formula_pair_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->coordinate_formula_pair(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OwnerFormulaMapArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OwnerFormulaMapArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OwnerFormulaMapArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OwnerFormulaMapArchive::MergeFrom(const OwnerFormulaMapArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  coordinate_formula_pair_.MergeFrom(from.coordinate_formula_pair_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OwnerFormulaMapArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OwnerFormulaMapArchive::CopyFrom(const OwnerFormulaMapArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnerFormulaMapArchive::IsInitialized() const {

  for (int i = 0; i < coordinate_formula_pair_size(); i++) {
    if (!this->coordinate_formula_pair(i).IsInitialized()) return false;
  }
  return true;
}

void OwnerFormulaMapArchive::Swap(OwnerFormulaMapArchive* other) {
  if (other != this) {
    coordinate_formula_pair_.Swap(&other->coordinate_formula_pair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OwnerFormulaMapArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OwnerFormulaMapArchive_descriptor_;
  metadata.reflection = OwnerFormulaMapArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FormulaRewriteCommandArchive::kTableRewriteCommandFieldNumber;
const int FormulaRewriteCommandArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

FormulaRewriteCommandArchive::FormulaRewriteCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FormulaRewriteCommandArchive::InitAsDefaultInstance() {
  table_rewrite_command_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

FormulaRewriteCommandArchive::FormulaRewriteCommandArchive(const FormulaRewriteCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FormulaRewriteCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  table_rewrite_command_ = NULL;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FormulaRewriteCommandArchive::~FormulaRewriteCommandArchive() {
  SharedDtor();
}

void FormulaRewriteCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete table_rewrite_command_;
    delete super_;
  }
}

void FormulaRewriteCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FormulaRewriteCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FormulaRewriteCommandArchive_descriptor_;
}

const FormulaRewriteCommandArchive& FormulaRewriteCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

FormulaRewriteCommandArchive* FormulaRewriteCommandArchive::default_instance_ = NULL;

FormulaRewriteCommandArchive* FormulaRewriteCommandArchive::New() const {
  return new FormulaRewriteCommandArchive;
}

void FormulaRewriteCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_rewrite_command()) {
      if (table_rewrite_command_ != NULL) table_rewrite_command_->::TSP::Reference::Clear();
    }
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FormulaRewriteCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference table_rewrite_command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_rewrite_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_super;
        break;
      }

      // optional .TSK.CommandArchive super = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FormulaRewriteCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference table_rewrite_command = 1;
  if (has_table_rewrite_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_rewrite_command(), output);
  }

  // optional .TSK.CommandArchive super = 2;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FormulaRewriteCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference table_rewrite_command = 1;
  if (has_table_rewrite_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_rewrite_command(), target);
  }

  // optional .TSK.CommandArchive super = 2;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FormulaRewriteCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference table_rewrite_command = 1;
    if (has_table_rewrite_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_rewrite_command());
    }

    // optional .TSK.CommandArchive super = 2;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FormulaRewriteCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FormulaRewriteCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FormulaRewriteCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FormulaRewriteCommandArchive::MergeFrom(const FormulaRewriteCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_rewrite_command()) {
      mutable_table_rewrite_command()->::TSP::Reference::MergeFrom(from.table_rewrite_command());
    }
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FormulaRewriteCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormulaRewriteCommandArchive::CopyFrom(const FormulaRewriteCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaRewriteCommandArchive::IsInitialized() const {

  if (has_table_rewrite_command()) {
    if (!this->table_rewrite_command().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void FormulaRewriteCommandArchive::Swap(FormulaRewriteCommandArchive* other) {
  if (other != this) {
    std::swap(table_rewrite_command_, other->table_rewrite_command_);
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FormulaRewriteCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FormulaRewriteCommandArchive_descriptor_;
  metadata.reflection = FormulaRewriteCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NumberTrackedReferencePairArchive::kNumberFieldNumber;
const int NumberTrackedReferencePairArchive::kTrackedReferenceFieldNumber;
#endif  // !_MSC_VER

NumberTrackedReferencePairArchive::NumberTrackedReferencePairArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NumberTrackedReferencePairArchive::InitAsDefaultInstance() {
  tracked_reference_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

NumberTrackedReferencePairArchive::NumberTrackedReferencePairArchive(const NumberTrackedReferencePairArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NumberTrackedReferencePairArchive::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0u;
  tracked_reference_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NumberTrackedReferencePairArchive::~NumberTrackedReferencePairArchive() {
  SharedDtor();
}

void NumberTrackedReferencePairArchive::SharedDtor() {
  if (this != default_instance_) {
    delete tracked_reference_;
  }
}

void NumberTrackedReferencePairArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NumberTrackedReferencePairArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NumberTrackedReferencePairArchive_descriptor_;
}

const NumberTrackedReferencePairArchive& NumberTrackedReferencePairArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

NumberTrackedReferencePairArchive* NumberTrackedReferencePairArchive::default_instance_ = NULL;

NumberTrackedReferencePairArchive* NumberTrackedReferencePairArchive::New() const {
  return new NumberTrackedReferencePairArchive;
}

void NumberTrackedReferencePairArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0u;
    if (has_tracked_reference()) {
      if (tracked_reference_ != NULL) tracked_reference_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NumberTrackedReferencePairArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tracked_reference;
        break;
      }

      // optional .TSP.Reference tracked_reference = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tracked_reference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tracked_reference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NumberTrackedReferencePairArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->number(), output);
  }

  // optional .TSP.Reference tracked_reference = 2;
  if (has_tracked_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tracked_reference(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NumberTrackedReferencePairArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->number(), target);
  }

  // optional .TSP.Reference tracked_reference = 2;
  if (has_tracked_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tracked_reference(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NumberTrackedReferencePairArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }

    // optional .TSP.Reference tracked_reference = 2;
    if (has_tracked_reference()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tracked_reference());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NumberTrackedReferencePairArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NumberTrackedReferencePairArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NumberTrackedReferencePairArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NumberTrackedReferencePairArchive::MergeFrom(const NumberTrackedReferencePairArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_tracked_reference()) {
      mutable_tracked_reference()->::TSP::Reference::MergeFrom(from.tracked_reference());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NumberTrackedReferencePairArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NumberTrackedReferencePairArchive::CopyFrom(const NumberTrackedReferencePairArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumberTrackedReferencePairArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_tracked_reference()) {
    if (!this->tracked_reference().IsInitialized()) return false;
  }
  return true;
}

void NumberTrackedReferencePairArchive::Swap(NumberTrackedReferencePairArchive* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(tracked_reference_, other->tracked_reference_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NumberTrackedReferencePairArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NumberTrackedReferencePairArchive_descriptor_;
  metadata.reflection = NumberTrackedReferencePairArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NumberToTrackedReferenceMapArchive::kNumberTrackedReferencePairFieldNumber;
#endif  // !_MSC_VER

NumberToTrackedReferenceMapArchive::NumberToTrackedReferenceMapArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NumberToTrackedReferenceMapArchive::InitAsDefaultInstance() {
}

NumberToTrackedReferenceMapArchive::NumberToTrackedReferenceMapArchive(const NumberToTrackedReferenceMapArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NumberToTrackedReferenceMapArchive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NumberToTrackedReferenceMapArchive::~NumberToTrackedReferenceMapArchive() {
  SharedDtor();
}

void NumberToTrackedReferenceMapArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NumberToTrackedReferenceMapArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NumberToTrackedReferenceMapArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NumberToTrackedReferenceMapArchive_descriptor_;
}

const NumberToTrackedReferenceMapArchive& NumberToTrackedReferenceMapArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

NumberToTrackedReferenceMapArchive* NumberToTrackedReferenceMapArchive::default_instance_ = NULL;

NumberToTrackedReferenceMapArchive* NumberToTrackedReferenceMapArchive::New() const {
  return new NumberToTrackedReferenceMapArchive;
}

void NumberToTrackedReferenceMapArchive::Clear() {
  number_tracked_reference_pair_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NumberToTrackedReferenceMapArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSCE.NumberTrackedReferencePairArchive number_tracked_reference_pair = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_number_tracked_reference_pair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_number_tracked_reference_pair()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_number_tracked_reference_pair;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NumberToTrackedReferenceMapArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSCE.NumberTrackedReferencePairArchive number_tracked_reference_pair = 1;
  for (int i = 0; i < this->number_tracked_reference_pair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->number_tracked_reference_pair(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NumberToTrackedReferenceMapArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSCE.NumberTrackedReferencePairArchive number_tracked_reference_pair = 1;
  for (int i = 0; i < this->number_tracked_reference_pair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->number_tracked_reference_pair(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NumberToTrackedReferenceMapArchive::ByteSize() const {
  int total_size = 0;

  // repeated .TSCE.NumberTrackedReferencePairArchive number_tracked_reference_pair = 1;
  total_size += 1 * this->number_tracked_reference_pair_size();
  for (int i = 0; i < this->number_tracked_reference_pair_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->number_tracked_reference_pair(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NumberToTrackedReferenceMapArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NumberToTrackedReferenceMapArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NumberToTrackedReferenceMapArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NumberToTrackedReferenceMapArchive::MergeFrom(const NumberToTrackedReferenceMapArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  number_tracked_reference_pair_.MergeFrom(from.number_tracked_reference_pair_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NumberToTrackedReferenceMapArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NumberToTrackedReferenceMapArchive::CopyFrom(const NumberToTrackedReferenceMapArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumberToTrackedReferenceMapArchive::IsInitialized() const {

  for (int i = 0; i < number_tracked_reference_pair_size(); i++) {
    if (!this->number_tracked_reference_pair(i).IsInitialized()) return false;
  }
  return true;
}

void NumberToTrackedReferenceMapArchive::Swap(NumberToTrackedReferenceMapArchive* other) {
  if (other != this) {
    number_tracked_reference_pair_.Swap(&other->number_tracked_reference_pair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NumberToTrackedReferenceMapArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NumberToTrackedReferenceMapArchive_descriptor_;
  metadata.reflection = NumberToTrackedReferenceMapArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrackedReferencesRewriteCommandArchive::kReferencesInReferenceTrackerFieldNumber;
const int TrackedReferencesRewriteCommandArchive::kOriginalTrackedReferenceCopiesFieldNumber;
const int TrackedReferencesRewriteCommandArchive::kRewriteSpecFieldNumber;
const int TrackedReferencesRewriteCommandArchive::kReferenceTrackerFieldNumber;
const int TrackedReferencesRewriteCommandArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

TrackedReferencesRewriteCommandArchive::TrackedReferencesRewriteCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrackedReferencesRewriteCommandArchive::InitAsDefaultInstance() {
  references_in_reference_tracker_ = const_cast< ::TSCE::NumberToTrackedReferenceMapArchive*>(&::TSCE::NumberToTrackedReferenceMapArchive::default_instance());
  original_tracked_reference_copies_ = const_cast< ::TSCE::NumberToTrackedReferenceMapArchive*>(&::TSCE::NumberToTrackedReferenceMapArchive::default_instance());
  rewrite_spec_ = const_cast< ::TSCE::FormulaRewriteSpecArchive*>(&::TSCE::FormulaRewriteSpecArchive::default_instance());
  reference_tracker_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

TrackedReferencesRewriteCommandArchive::TrackedReferencesRewriteCommandArchive(const TrackedReferencesRewriteCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrackedReferencesRewriteCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  references_in_reference_tracker_ = NULL;
  original_tracked_reference_copies_ = NULL;
  rewrite_spec_ = NULL;
  reference_tracker_ = NULL;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackedReferencesRewriteCommandArchive::~TrackedReferencesRewriteCommandArchive() {
  SharedDtor();
}

void TrackedReferencesRewriteCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete references_in_reference_tracker_;
    delete original_tracked_reference_copies_;
    delete rewrite_spec_;
    delete reference_tracker_;
    delete super_;
  }
}

void TrackedReferencesRewriteCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackedReferencesRewriteCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackedReferencesRewriteCommandArchive_descriptor_;
}

const TrackedReferencesRewriteCommandArchive& TrackedReferencesRewriteCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

TrackedReferencesRewriteCommandArchive* TrackedReferencesRewriteCommandArchive::default_instance_ = NULL;

TrackedReferencesRewriteCommandArchive* TrackedReferencesRewriteCommandArchive::New() const {
  return new TrackedReferencesRewriteCommandArchive;
}

void TrackedReferencesRewriteCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_references_in_reference_tracker()) {
      if (references_in_reference_tracker_ != NULL) references_in_reference_tracker_->::TSCE::NumberToTrackedReferenceMapArchive::Clear();
    }
    if (has_original_tracked_reference_copies()) {
      if (original_tracked_reference_copies_ != NULL) original_tracked_reference_copies_->::TSCE::NumberToTrackedReferenceMapArchive::Clear();
    }
    if (has_rewrite_spec()) {
      if (rewrite_spec_ != NULL) rewrite_spec_->::TSCE::FormulaRewriteSpecArchive::Clear();
    }
    if (has_reference_tracker()) {
      if (reference_tracker_ != NULL) reference_tracker_->::TSP::Reference::Clear();
    }
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrackedReferencesRewriteCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSCE.NumberToTrackedReferenceMapArchive references_in_reference_tracker = 1 [deprecated = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_references_in_reference_tracker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_original_tracked_reference_copies;
        break;
      }

      // optional .TSCE.NumberToTrackedReferenceMapArchive original_tracked_reference_copies = 2 [deprecated = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_original_tracked_reference_copies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_original_tracked_reference_copies()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rewrite_spec;
        break;
      }

      // optional .TSCE.FormulaRewriteSpecArchive rewrite_spec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewrite_spec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewrite_spec()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reference_tracker;
        break;
      }

      // required .TSP.Reference reference_tracker = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reference_tracker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reference_tracker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_super;
        break;
      }

      // required .TSK.CommandArchive super = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrackedReferencesRewriteCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSCE.NumberToTrackedReferenceMapArchive references_in_reference_tracker = 1 [deprecated = true];
  if (has_references_in_reference_tracker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->references_in_reference_tracker(), output);
  }

  // optional .TSCE.NumberToTrackedReferenceMapArchive original_tracked_reference_copies = 2 [deprecated = true];
  if (has_original_tracked_reference_copies()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->original_tracked_reference_copies(), output);
  }

  // optional .TSCE.FormulaRewriteSpecArchive rewrite_spec = 3;
  if (has_rewrite_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rewrite_spec(), output);
  }

  // required .TSP.Reference reference_tracker = 4;
  if (has_reference_tracker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reference_tracker(), output);
  }

  // required .TSK.CommandArchive super = 5;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrackedReferencesRewriteCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSCE.NumberToTrackedReferenceMapArchive references_in_reference_tracker = 1 [deprecated = true];
  if (has_references_in_reference_tracker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->references_in_reference_tracker(), target);
  }

  // optional .TSCE.NumberToTrackedReferenceMapArchive original_tracked_reference_copies = 2 [deprecated = true];
  if (has_original_tracked_reference_copies()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->original_tracked_reference_copies(), target);
  }

  // optional .TSCE.FormulaRewriteSpecArchive rewrite_spec = 3;
  if (has_rewrite_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rewrite_spec(), target);
  }

  // required .TSP.Reference reference_tracker = 4;
  if (has_reference_tracker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reference_tracker(), target);
  }

  // required .TSK.CommandArchive super = 5;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrackedReferencesRewriteCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSCE.NumberToTrackedReferenceMapArchive references_in_reference_tracker = 1 [deprecated = true];
    if (has_references_in_reference_tracker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->references_in_reference_tracker());
    }

    // optional .TSCE.NumberToTrackedReferenceMapArchive original_tracked_reference_copies = 2 [deprecated = true];
    if (has_original_tracked_reference_copies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->original_tracked_reference_copies());
    }

    // optional .TSCE.FormulaRewriteSpecArchive rewrite_spec = 3;
    if (has_rewrite_spec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewrite_spec());
    }

    // required .TSP.Reference reference_tracker = 4;
    if (has_reference_tracker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reference_tracker());
    }

    // required .TSK.CommandArchive super = 5;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackedReferencesRewriteCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrackedReferencesRewriteCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrackedReferencesRewriteCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrackedReferencesRewriteCommandArchive::MergeFrom(const TrackedReferencesRewriteCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_references_in_reference_tracker()) {
      mutable_references_in_reference_tracker()->::TSCE::NumberToTrackedReferenceMapArchive::MergeFrom(from.references_in_reference_tracker());
    }
    if (from.has_original_tracked_reference_copies()) {
      mutable_original_tracked_reference_copies()->::TSCE::NumberToTrackedReferenceMapArchive::MergeFrom(from.original_tracked_reference_copies());
    }
    if (from.has_rewrite_spec()) {
      mutable_rewrite_spec()->::TSCE::FormulaRewriteSpecArchive::MergeFrom(from.rewrite_spec());
    }
    if (from.has_reference_tracker()) {
      mutable_reference_tracker()->::TSP::Reference::MergeFrom(from.reference_tracker());
    }
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrackedReferencesRewriteCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackedReferencesRewriteCommandArchive::CopyFrom(const TrackedReferencesRewriteCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackedReferencesRewriteCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000018) != 0x00000018) return false;

  if (has_references_in_reference_tracker()) {
    if (!this->references_in_reference_tracker().IsInitialized()) return false;
  }
  if (has_original_tracked_reference_copies()) {
    if (!this->original_tracked_reference_copies().IsInitialized()) return false;
  }
  if (has_rewrite_spec()) {
    if (!this->rewrite_spec().IsInitialized()) return false;
  }
  if (has_reference_tracker()) {
    if (!this->reference_tracker().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void TrackedReferencesRewriteCommandArchive::Swap(TrackedReferencesRewriteCommandArchive* other) {
  if (other != this) {
    std::swap(references_in_reference_tracker_, other->references_in_reference_tracker_);
    std::swap(original_tracked_reference_copies_, other->original_tracked_reference_copies_);
    std::swap(rewrite_spec_, other->rewrite_spec_);
    std::swap(reference_tracker_, other->reference_tracker_);
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrackedReferencesRewriteCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackedReferencesRewriteCommandArchive_descriptor_;
  metadata.reflection = TrackedReferencesRewriteCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrackedReferenceArchive::kAstFieldNumber;
const int TrackedReferenceArchive::kFormulaIdFieldNumber;
#endif  // !_MSC_VER

TrackedReferenceArchive::TrackedReferenceArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrackedReferenceArchive::InitAsDefaultInstance() {
  ast_ = const_cast< ::TSCE::ASTNodeArrayArchive*>(&::TSCE::ASTNodeArrayArchive::default_instance());
}

TrackedReferenceArchive::TrackedReferenceArchive(const TrackedReferenceArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrackedReferenceArchive::SharedCtor() {
  _cached_size_ = 0;
  ast_ = NULL;
  formula_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackedReferenceArchive::~TrackedReferenceArchive() {
  SharedDtor();
}

void TrackedReferenceArchive::SharedDtor() {
  if (this != default_instance_) {
    delete ast_;
  }
}

void TrackedReferenceArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackedReferenceArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackedReferenceArchive_descriptor_;
}

const TrackedReferenceArchive& TrackedReferenceArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

TrackedReferenceArchive* TrackedReferenceArchive::default_instance_ = NULL;

TrackedReferenceArchive* TrackedReferenceArchive::New() const {
  return new TrackedReferenceArchive;
}

void TrackedReferenceArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ast()) {
      if (ast_ != NULL) ast_->::TSCE::ASTNodeArrayArchive::Clear();
    }
    formula_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrackedReferenceArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCE.ASTNodeArrayArchive ast = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ast()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_formula_id;
        break;
      }

      // required uint32 formula_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_formula_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &formula_id_)));
          set_has_formula_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrackedReferenceArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCE.ASTNodeArrayArchive ast = 1;
  if (has_ast()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ast(), output);
  }

  // required uint32 formula_id = 2;
  if (has_formula_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->formula_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrackedReferenceArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCE.ASTNodeArrayArchive ast = 1;
  if (has_ast()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ast(), target);
  }

  // required uint32 formula_id = 2;
  if (has_formula_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->formula_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrackedReferenceArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCE.ASTNodeArrayArchive ast = 1;
    if (has_ast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ast());
    }

    // required uint32 formula_id = 2;
    if (has_formula_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->formula_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackedReferenceArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrackedReferenceArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrackedReferenceArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrackedReferenceArchive::MergeFrom(const TrackedReferenceArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ast()) {
      mutable_ast()->::TSCE::ASTNodeArrayArchive::MergeFrom(from.ast());
    }
    if (from.has_formula_id()) {
      set_formula_id(from.formula_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrackedReferenceArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackedReferenceArchive::CopyFrom(const TrackedReferenceArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackedReferenceArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_ast()) {
    if (!this->ast().IsInitialized()) return false;
  }
  return true;
}

void TrackedReferenceArchive::Swap(TrackedReferenceArchive* other) {
  if (other != this) {
    std::swap(ast_, other->ast_);
    std::swap(formula_id_, other->formula_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrackedReferenceArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackedReferenceArchive_descriptor_;
  metadata.reflection = TrackedReferenceArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReferenceTrackerArchive::kUuidFieldNumber;
const int ReferenceTrackerArchive::kTrackedReferenceFieldNumber;
const int ReferenceTrackerArchive::kContainedTrackedReferenceFieldNumber;
#endif  // !_MSC_VER

ReferenceTrackerArchive::ReferenceTrackerArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReferenceTrackerArchive::InitAsDefaultInstance() {
  uuid_ = const_cast< ::TSCE::CFUUIDArchive*>(&::TSCE::CFUUIDArchive::default_instance());
}

ReferenceTrackerArchive::ReferenceTrackerArchive(const ReferenceTrackerArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReferenceTrackerArchive::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReferenceTrackerArchive::~ReferenceTrackerArchive() {
  SharedDtor();
}

void ReferenceTrackerArchive::SharedDtor() {
  if (this != default_instance_) {
    delete uuid_;
  }
}

void ReferenceTrackerArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReferenceTrackerArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReferenceTrackerArchive_descriptor_;
}

const ReferenceTrackerArchive& ReferenceTrackerArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

ReferenceTrackerArchive* ReferenceTrackerArchive::default_instance_ = NULL;

ReferenceTrackerArchive* ReferenceTrackerArchive::New() const {
  return new ReferenceTrackerArchive;
}

void ReferenceTrackerArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != NULL) uuid_->::TSCE::CFUUIDArchive::Clear();
    }
  }
  tracked_reference_.Clear();
  contained_tracked_reference_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReferenceTrackerArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCE.CFUUIDArchive uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tracked_reference;
        break;
      }

      // repeated .TSP.Reference tracked_reference = 2 [deprecated = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tracked_reference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tracked_reference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tracked_reference;
        if (input->ExpectTag(26)) goto parse_contained_tracked_reference;
        break;
      }

      // repeated .TSCE.TrackedReferenceArchive contained_tracked_reference = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contained_tracked_reference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contained_tracked_reference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_contained_tracked_reference;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReferenceTrackerArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCE.CFUUIDArchive uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uuid(), output);
  }

  // repeated .TSP.Reference tracked_reference = 2 [deprecated = true];
  for (int i = 0; i < this->tracked_reference_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tracked_reference(i), output);
  }

  // repeated .TSCE.TrackedReferenceArchive contained_tracked_reference = 3;
  for (int i = 0; i < this->contained_tracked_reference_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->contained_tracked_reference(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReferenceTrackerArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCE.CFUUIDArchive uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uuid(), target);
  }

  // repeated .TSP.Reference tracked_reference = 2 [deprecated = true];
  for (int i = 0; i < this->tracked_reference_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tracked_reference(i), target);
  }

  // repeated .TSCE.TrackedReferenceArchive contained_tracked_reference = 3;
  for (int i = 0; i < this->contained_tracked_reference_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->contained_tracked_reference(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReferenceTrackerArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCE.CFUUIDArchive uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uuid());
    }

  }
  // repeated .TSP.Reference tracked_reference = 2 [deprecated = true];
  total_size += 1 * this->tracked_reference_size();
  for (int i = 0; i < this->tracked_reference_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tracked_reference(i));
  }

  // repeated .TSCE.TrackedReferenceArchive contained_tracked_reference = 3;
  total_size += 1 * this->contained_tracked_reference_size();
  for (int i = 0; i < this->contained_tracked_reference_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contained_tracked_reference(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReferenceTrackerArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReferenceTrackerArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReferenceTrackerArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReferenceTrackerArchive::MergeFrom(const ReferenceTrackerArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  tracked_reference_.MergeFrom(from.tracked_reference_);
  contained_tracked_reference_.MergeFrom(from.contained_tracked_reference_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      mutable_uuid()->::TSCE::CFUUIDArchive::MergeFrom(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReferenceTrackerArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceTrackerArchive::CopyFrom(const ReferenceTrackerArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceTrackerArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < tracked_reference_size(); i++) {
    if (!this->tracked_reference(i).IsInitialized()) return false;
  }
  for (int i = 0; i < contained_tracked_reference_size(); i++) {
    if (!this->contained_tracked_reference(i).IsInitialized()) return false;
  }
  return true;
}

void ReferenceTrackerArchive::Swap(ReferenceTrackerArchive* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    tracked_reference_.Swap(&other->tracked_reference_);
    contained_tracked_reference_.Swap(&other->contained_tracked_reference_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReferenceTrackerArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReferenceTrackerArchive_descriptor_;
  metadata.reflection = ReferenceTrackerArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BooleanCellValueArchive::kValueFieldNumber;
#endif  // !_MSC_VER

BooleanCellValueArchive::BooleanCellValueArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BooleanCellValueArchive::InitAsDefaultInstance() {
}

BooleanCellValueArchive::BooleanCellValueArchive(const BooleanCellValueArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BooleanCellValueArchive::SharedCtor() {
  _cached_size_ = 0;
  value_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BooleanCellValueArchive::~BooleanCellValueArchive() {
  SharedDtor();
}

void BooleanCellValueArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BooleanCellValueArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BooleanCellValueArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BooleanCellValueArchive_descriptor_;
}

const BooleanCellValueArchive& BooleanCellValueArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

BooleanCellValueArchive* BooleanCellValueArchive::default_instance_ = NULL;

BooleanCellValueArchive* BooleanCellValueArchive::New() const {
  return new BooleanCellValueArchive;
}

void BooleanCellValueArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BooleanCellValueArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BooleanCellValueArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BooleanCellValueArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BooleanCellValueArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool value = 1;
    if (has_value()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BooleanCellValueArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BooleanCellValueArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BooleanCellValueArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BooleanCellValueArchive::MergeFrom(const BooleanCellValueArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BooleanCellValueArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BooleanCellValueArchive::CopyFrom(const BooleanCellValueArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BooleanCellValueArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BooleanCellValueArchive::Swap(BooleanCellValueArchive* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BooleanCellValueArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BooleanCellValueArchive_descriptor_;
  metadata.reflection = BooleanCellValueArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DateCellValueArchive::kValueFieldNumber;
const int DateCellValueArchive::kFormatFieldNumber;
const int DateCellValueArchive::kFormatIsImplicitFieldNumber;
#endif  // !_MSC_VER

DateCellValueArchive::DateCellValueArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DateCellValueArchive::InitAsDefaultInstance() {
  format_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
}

DateCellValueArchive::DateCellValueArchive(const DateCellValueArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DateCellValueArchive::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  format_ = NULL;
  format_is_implicit_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DateCellValueArchive::~DateCellValueArchive() {
  SharedDtor();
}

void DateCellValueArchive::SharedDtor() {
  if (this != default_instance_) {
    delete format_;
  }
}

void DateCellValueArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DateCellValueArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DateCellValueArchive_descriptor_;
}

const DateCellValueArchive& DateCellValueArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

DateCellValueArchive* DateCellValueArchive::default_instance_ = NULL;

DateCellValueArchive* DateCellValueArchive::New() const {
  return new DateCellValueArchive;
}

void DateCellValueArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
    if (has_format()) {
      if (format_ != NULL) format_->::TSK::FormatStructArchive::Clear();
    }
    format_is_implicit_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DateCellValueArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_format;
        break;
      }

      // required .TSK.FormatStructArchive format = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_format_is_implicit;
        break;
      }

      // optional bool format_is_implicit = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_format_is_implicit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &format_is_implicit_)));
          set_has_format_is_implicit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DateCellValueArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->value(), output);
  }

  // required .TSK.FormatStructArchive format = 2;
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->format(), output);
  }

  // optional bool format_is_implicit = 3 [default = true];
  if (has_format_is_implicit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->format_is_implicit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DateCellValueArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->value(), target);
  }

  // required .TSK.FormatStructArchive format = 2;
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->format(), target);
  }

  // optional bool format_is_implicit = 3 [default = true];
  if (has_format_is_implicit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->format_is_implicit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DateCellValueArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double value = 1;
    if (has_value()) {
      total_size += 1 + 8;
    }

    // required .TSK.FormatStructArchive format = 2;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->format());
    }

    // optional bool format_is_implicit = 3 [default = true];
    if (has_format_is_implicit()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DateCellValueArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DateCellValueArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DateCellValueArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DateCellValueArchive::MergeFrom(const DateCellValueArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_format()) {
      mutable_format()->::TSK::FormatStructArchive::MergeFrom(from.format());
    }
    if (from.has_format_is_implicit()) {
      set_format_is_implicit(from.format_is_implicit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DateCellValueArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateCellValueArchive::CopyFrom(const DateCellValueArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateCellValueArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_format()) {
    if (!this->format().IsInitialized()) return false;
  }
  return true;
}

void DateCellValueArchive::Swap(DateCellValueArchive* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(format_, other->format_);
    std::swap(format_is_implicit_, other->format_is_implicit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DateCellValueArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DateCellValueArchive_descriptor_;
  metadata.reflection = DateCellValueArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NumberCellValueArchive::kValueFieldNumber;
const int NumberCellValueArchive::kUnitIndexFieldNumber;
const int NumberCellValueArchive::kCurrencyCodeFieldNumber;
const int NumberCellValueArchive::kFormatFieldNumber;
const int NumberCellValueArchive::kFormatIsImplicitFieldNumber;
#endif  // !_MSC_VER

NumberCellValueArchive::NumberCellValueArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NumberCellValueArchive::InitAsDefaultInstance() {
  format_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
}

NumberCellValueArchive::NumberCellValueArchive(const NumberCellValueArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NumberCellValueArchive::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  unit_index_ = 0;
  currency_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  format_ = NULL;
  format_is_implicit_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NumberCellValueArchive::~NumberCellValueArchive() {
  SharedDtor();
}

void NumberCellValueArchive::SharedDtor() {
  if (currency_code_ != &::google::protobuf::internal::kEmptyString) {
    delete currency_code_;
  }
  if (this != default_instance_) {
    delete format_;
  }
}

void NumberCellValueArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NumberCellValueArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NumberCellValueArchive_descriptor_;
}

const NumberCellValueArchive& NumberCellValueArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

NumberCellValueArchive* NumberCellValueArchive::default_instance_ = NULL;

NumberCellValueArchive* NumberCellValueArchive::New() const {
  return new NumberCellValueArchive;
}

void NumberCellValueArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
    unit_index_ = 0;
    if (has_currency_code()) {
      if (currency_code_ != &::google::protobuf::internal::kEmptyString) {
        currency_code_->clear();
      }
    }
    if (has_format()) {
      if (format_ != NULL) format_->::TSK::FormatStructArchive::Clear();
    }
    format_is_implicit_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NumberCellValueArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unit_index;
        break;
      }

      // optional int32 unit_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unit_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unit_index_)));
          set_has_unit_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_format;
        break;
      }

      // required .TSK.FormatStructArchive format = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_format_is_implicit;
        break;
      }

      // optional bool format_is_implicit = 4 [default = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_format_is_implicit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &format_is_implicit_)));
          set_has_format_is_implicit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_currency_code;
        break;
      }

      // optional string currency_code = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currency_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currency_code().data(), this->currency_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NumberCellValueArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->value(), output);
  }

  // optional int32 unit_index = 2;
  if (has_unit_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->unit_index(), output);
  }

  // required .TSK.FormatStructArchive format = 3;
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->format(), output);
  }

  // optional bool format_is_implicit = 4 [default = true];
  if (has_format_is_implicit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->format_is_implicit(), output);
  }

  // optional string currency_code = 5;
  if (has_currency_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency_code().data(), this->currency_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->currency_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NumberCellValueArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->value(), target);
  }

  // optional int32 unit_index = 2;
  if (has_unit_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->unit_index(), target);
  }

  // required .TSK.FormatStructArchive format = 3;
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->format(), target);
  }

  // optional bool format_is_implicit = 4 [default = true];
  if (has_format_is_implicit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->format_is_implicit(), target);
  }

  // optional string currency_code = 5;
  if (has_currency_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency_code().data(), this->currency_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->currency_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NumberCellValueArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double value = 1;
    if (has_value()) {
      total_size += 1 + 8;
    }

    // optional int32 unit_index = 2;
    if (has_unit_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unit_index());
    }

    // optional string currency_code = 5;
    if (has_currency_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency_code());
    }

    // required .TSK.FormatStructArchive format = 3;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->format());
    }

    // optional bool format_is_implicit = 4 [default = true];
    if (has_format_is_implicit()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NumberCellValueArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NumberCellValueArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NumberCellValueArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NumberCellValueArchive::MergeFrom(const NumberCellValueArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_unit_index()) {
      set_unit_index(from.unit_index());
    }
    if (from.has_currency_code()) {
      set_currency_code(from.currency_code());
    }
    if (from.has_format()) {
      mutable_format()->::TSK::FormatStructArchive::MergeFrom(from.format());
    }
    if (from.has_format_is_implicit()) {
      set_format_is_implicit(from.format_is_implicit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NumberCellValueArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NumberCellValueArchive::CopyFrom(const NumberCellValueArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumberCellValueArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  if (has_format()) {
    if (!this->format().IsInitialized()) return false;
  }
  return true;
}

void NumberCellValueArchive::Swap(NumberCellValueArchive* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(unit_index_, other->unit_index_);
    std::swap(currency_code_, other->currency_code_);
    std::swap(format_, other->format_);
    std::swap(format_is_implicit_, other->format_is_implicit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NumberCellValueArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NumberCellValueArchive_descriptor_;
  metadata.reflection = NumberCellValueArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StringCellValueArchive::kValueFieldNumber;
const int StringCellValueArchive::kFormatFieldNumber;
const int StringCellValueArchive::kFormatIsImplicitFieldNumber;
#endif  // !_MSC_VER

StringCellValueArchive::StringCellValueArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StringCellValueArchive::InitAsDefaultInstance() {
  format_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
}

StringCellValueArchive::StringCellValueArchive(const StringCellValueArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StringCellValueArchive::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  format_ = NULL;
  format_is_implicit_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringCellValueArchive::~StringCellValueArchive() {
  SharedDtor();
}

void StringCellValueArchive::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
    delete format_;
  }
}

void StringCellValueArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringCellValueArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringCellValueArchive_descriptor_;
}

const StringCellValueArchive& StringCellValueArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

StringCellValueArchive* StringCellValueArchive::default_instance_ = NULL;

StringCellValueArchive* StringCellValueArchive::New() const {
  return new StringCellValueArchive;
}

void StringCellValueArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    if (has_format()) {
      if (format_ != NULL) format_->::TSK::FormatStructArchive::Clear();
    }
    format_is_implicit_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringCellValueArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_format;
        break;
      }

      // required .TSK.FormatStructArchive format = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_format_is_implicit;
        break;
      }

      // optional bool format_is_implicit = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_format_is_implicit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &format_is_implicit_)));
          set_has_format_is_implicit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringCellValueArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->value(), output);
  }

  // required .TSK.FormatStructArchive format = 2;
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->format(), output);
  }

  // optional bool format_is_implicit = 3 [default = true];
  if (has_format_is_implicit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->format_is_implicit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StringCellValueArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  // required .TSK.FormatStructArchive format = 2;
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->format(), target);
  }

  // optional bool format_is_implicit = 3 [default = true];
  if (has_format_is_implicit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->format_is_implicit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StringCellValueArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // required .TSK.FormatStructArchive format = 2;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->format());
    }

    // optional bool format_is_implicit = 3 [default = true];
    if (has_format_is_implicit()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringCellValueArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringCellValueArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringCellValueArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringCellValueArchive::MergeFrom(const StringCellValueArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_format()) {
      mutable_format()->::TSK::FormatStructArchive::MergeFrom(from.format());
    }
    if (from.has_format_is_implicit()) {
      set_format_is_implicit(from.format_is_implicit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringCellValueArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringCellValueArchive::CopyFrom(const StringCellValueArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringCellValueArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_format()) {
    if (!this->format().IsInitialized()) return false;
  }
  return true;
}

void StringCellValueArchive::Swap(StringCellValueArchive* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(format_, other->format_);
    std::swap(format_is_implicit_, other->format_is_implicit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StringCellValueArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringCellValueArchive_descriptor_;
  metadata.reflection = StringCellValueArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CellValueArchive_CellValueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellValueArchive_CellValueType_descriptor_;
}
bool CellValueArchive_CellValueType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CellValueArchive_CellValueType CellValueArchive::NIL_TYPE;
const CellValueArchive_CellValueType CellValueArchive::BOOLEAN_TYPE;
const CellValueArchive_CellValueType CellValueArchive::DATE_TYPE;
const CellValueArchive_CellValueType CellValueArchive::NUMBER_TYPE;
const CellValueArchive_CellValueType CellValueArchive::STRING_TYPE;
const CellValueArchive_CellValueType CellValueArchive::CellValueType_MIN;
const CellValueArchive_CellValueType CellValueArchive::CellValueType_MAX;
const int CellValueArchive::CellValueType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CellValueArchive::kCellValueTypeFieldNumber;
const int CellValueArchive::kBooleanValueFieldNumber;
const int CellValueArchive::kDateValueFieldNumber;
const int CellValueArchive::kNumberValueFieldNumber;
const int CellValueArchive::kStringValueFieldNumber;
#endif  // !_MSC_VER

CellValueArchive::CellValueArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CellValueArchive::InitAsDefaultInstance() {
  boolean_value_ = const_cast< ::TSCE::BooleanCellValueArchive*>(&::TSCE::BooleanCellValueArchive::default_instance());
  date_value_ = const_cast< ::TSCE::DateCellValueArchive*>(&::TSCE::DateCellValueArchive::default_instance());
  number_value_ = const_cast< ::TSCE::NumberCellValueArchive*>(&::TSCE::NumberCellValueArchive::default_instance());
  string_value_ = const_cast< ::TSCE::StringCellValueArchive*>(&::TSCE::StringCellValueArchive::default_instance());
}

CellValueArchive::CellValueArchive(const CellValueArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CellValueArchive::SharedCtor() {
  _cached_size_ = 0;
  cell_value_type_ = 1;
  boolean_value_ = NULL;
  date_value_ = NULL;
  number_value_ = NULL;
  string_value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CellValueArchive::~CellValueArchive() {
  SharedDtor();
}

void CellValueArchive::SharedDtor() {
  if (this != default_instance_) {
    delete boolean_value_;
    delete date_value_;
    delete number_value_;
    delete string_value_;
  }
}

void CellValueArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellValueArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellValueArchive_descriptor_;
}

const CellValueArchive& CellValueArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSCEArchives_2eproto();
  return *default_instance_;
}

CellValueArchive* CellValueArchive::default_instance_ = NULL;

CellValueArchive* CellValueArchive::New() const {
  return new CellValueArchive;
}

void CellValueArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cell_value_type_ = 1;
    if (has_boolean_value()) {
      if (boolean_value_ != NULL) boolean_value_->::TSCE::BooleanCellValueArchive::Clear();
    }
    if (has_date_value()) {
      if (date_value_ != NULL) date_value_->::TSCE::DateCellValueArchive::Clear();
    }
    if (has_number_value()) {
      if (number_value_ != NULL) number_value_->::TSCE::NumberCellValueArchive::Clear();
    }
    if (has_string_value()) {
      if (string_value_ != NULL) string_value_->::TSCE::StringCellValueArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CellValueArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSCE.CellValueArchive.CellValueType cell_value_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSCE::CellValueArchive_CellValueType_IsValid(value)) {
            set_cell_value_type(static_cast< ::TSCE::CellValueArchive_CellValueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_boolean_value;
        break;
      }

      // optional .TSCE.BooleanCellValueArchive boolean_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boolean_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boolean_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_date_value;
        break;
      }

      // optional .TSCE.DateCellValueArchive date_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_date_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_number_value;
        break;
      }

      // optional .TSCE.NumberCellValueArchive number_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_number_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_number_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_string_value;
        break;
      }

      // optional .TSCE.StringCellValueArchive string_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_string_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CellValueArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSCE.CellValueArchive.CellValueType cell_value_type = 1;
  if (has_cell_value_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cell_value_type(), output);
  }

  // optional .TSCE.BooleanCellValueArchive boolean_value = 2;
  if (has_boolean_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->boolean_value(), output);
  }

  // optional .TSCE.DateCellValueArchive date_value = 3;
  if (has_date_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->date_value(), output);
  }

  // optional .TSCE.NumberCellValueArchive number_value = 4;
  if (has_number_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->number_value(), output);
  }

  // optional .TSCE.StringCellValueArchive string_value = 5;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->string_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CellValueArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSCE.CellValueArchive.CellValueType cell_value_type = 1;
  if (has_cell_value_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cell_value_type(), target);
  }

  // optional .TSCE.BooleanCellValueArchive boolean_value = 2;
  if (has_boolean_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->boolean_value(), target);
  }

  // optional .TSCE.DateCellValueArchive date_value = 3;
  if (has_date_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->date_value(), target);
  }

  // optional .TSCE.NumberCellValueArchive number_value = 4;
  if (has_number_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->number_value(), target);
  }

  // optional .TSCE.StringCellValueArchive string_value = 5;
  if (has_string_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->string_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CellValueArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSCE.CellValueArchive.CellValueType cell_value_type = 1;
    if (has_cell_value_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cell_value_type());
    }

    // optional .TSCE.BooleanCellValueArchive boolean_value = 2;
    if (has_boolean_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boolean_value());
    }

    // optional .TSCE.DateCellValueArchive date_value = 3;
    if (has_date_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->date_value());
    }

    // optional .TSCE.NumberCellValueArchive number_value = 4;
    if (has_number_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->number_value());
    }

    // optional .TSCE.StringCellValueArchive string_value = 5;
    if (has_string_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->string_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellValueArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CellValueArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CellValueArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CellValueArchive::MergeFrom(const CellValueArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cell_value_type()) {
      set_cell_value_type(from.cell_value_type());
    }
    if (from.has_boolean_value()) {
      mutable_boolean_value()->::TSCE::BooleanCellValueArchive::MergeFrom(from.boolean_value());
    }
    if (from.has_date_value()) {
      mutable_date_value()->::TSCE::DateCellValueArchive::MergeFrom(from.date_value());
    }
    if (from.has_number_value()) {
      mutable_number_value()->::TSCE::NumberCellValueArchive::MergeFrom(from.number_value());
    }
    if (from.has_string_value()) {
      mutable_string_value()->::TSCE::StringCellValueArchive::MergeFrom(from.string_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CellValueArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellValueArchive::CopyFrom(const CellValueArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellValueArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_boolean_value()) {
    if (!this->boolean_value().IsInitialized()) return false;
  }
  if (has_date_value()) {
    if (!this->date_value().IsInitialized()) return false;
  }
  if (has_number_value()) {
    if (!this->number_value().IsInitialized()) return false;
  }
  if (has_string_value()) {
    if (!this->string_value().IsInitialized()) return false;
  }
  return true;
}

void CellValueArchive::Swap(CellValueArchive* other) {
  if (other != this) {
    std::swap(cell_value_type_, other->cell_value_type_);
    std::swap(boolean_value_, other->boolean_value_);
    std::swap(date_value_, other->date_value_);
    std::swap(number_value_, other->number_value_);
    std::swap(string_value_, other->string_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CellValueArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CellValueArchive_descriptor_;
  metadata.reflection = CellValueArchive_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSCE

// @@protoc_insertion_point(global_scope)
