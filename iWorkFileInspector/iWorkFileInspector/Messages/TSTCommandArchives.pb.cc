// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSTCommandArchives.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TSTCommandArchives.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TST {

namespace {

const ::google::protobuf::Descriptor* TableCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandApplyCellDiffArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandApplyCellDiffArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandChangeFreezeHeaderStateArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandChangeFreezeHeaderStateArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandDeleteCellsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandDeleteCellsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandDeleteCellContentsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandDeleteCellContentsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetMultipleCellsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetMultipleCellsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetMultipleCellsCustomArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetMultipleCellsCustomArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetMultipleCellsMultipleChoiceListArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetMultipleCellsMultipleChoiceListArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandCoerceMultipleCellsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandCoerceMultipleCellsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetControlCellsDisplayNumberFormatArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetControlCellsDisplayNumberFormatArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetAutomaticFormatArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetAutomaticFormatArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetAutomaticDurationUnitsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetAutomaticDurationUnitsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandReplaceCustomFormatArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandReplaceCustomFormatArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandInsertColumnsOrRowsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandInsertColumnsOrRowsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandInsertColumnsOrRowsArchive_StyleIndexPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandInsertColumnsOrRowsArchive_StyleIndexPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandPasteArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandPasteArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandRemoveColumnsOrRowsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandRemoveColumnsOrRowsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandResizeColumnOrRowArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandResizeColumnOrRowArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetCellArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetCellArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandTextPreflightInsertCellArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandTextPreflightInsertCellArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandPostflightSetCellArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandPostflightSetCellArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetNumberOfHeadersOrFootersArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetNumberOfHeadersOrFootersArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandFixWPStylesInRowsOrColumnsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandFixWPStylesInRowsOrColumnsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandFixStylesInHeadersOrFootersArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandFixStylesInHeadersOrFootersArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetTableNameArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetTableNameArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetTableNameEnabledArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetTableNameEnabledArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetTableFontSizeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetTableFontSizeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetTableFontNameArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetTableFontNameArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetTableNameHeightArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetTableNameHeightArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandStyleCellsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandStyleCellsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetFillPropertyArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetFillPropertyArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandStyleTableArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandStyleTableArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandFillCellsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandFillCellsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandReplaceTextArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandReplaceTextArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandReplaceAllTextArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandReplaceAllTextArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetRepeatingHeaderEnabledArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetRepeatingHeaderEnabledArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetFiltersEnabledArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetFiltersEnabledArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandAddQuickFilterRulesArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandAddQuickFilterRulesArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandDeleteFilterRulesArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandDeleteFilterRulesArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandModifyFilterRuleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandModifyFilterRuleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandApplyStrokePresetArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandApplyStrokePresetArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandAddTableStylePresetArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandAddTableStylePresetArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandRemoveTableStylePresetArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandRemoveTableStylePresetArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandReplaceTableStylePresetArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandReplaceTableStylePresetArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandApplyTableStylePresetArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandApplyTableStylePresetArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandApplyTableStylePresetArchive_StyleIndexTuple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandApplyTableStylePresetArchive_StyleIndexTuple_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetStyleApplyClearsAllFlagArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetStyleApplyClearsAllFlagArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandApplyThemeToTableArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandApplyThemeToTableArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandApplyThemeChildForTableArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandApplyThemeChildForTableArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandToggleTextPropertyArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandToggleTextPropertyArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandResetFillPropertyToDefault_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandResetFillPropertyToDefault_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetSingleNumberFormatParameterArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetSingleNumberFormatParameterArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetBaseArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetBaseArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetBasePlacesArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetBasePlacesArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetBaseUseMinusSignArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetBaseUseMinusSignArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetControlMinimumArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetControlMinimumArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetControlMaximumArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetControlMaximumArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetControlIncrementArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetControlIncrementArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetCurrencyCodeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetCurrencyCodeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetFractionAccuracyArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetFractionAccuracyArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetMultipleChoiceListFormatForEditedItemArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetMultipleChoiceListFormatForEditedItemArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetMultipleChoiceListFormatForDeleteItemArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetMultipleChoiceListFormatForDeleteItemArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetMultipleChoiceListFormatForReorderItemArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetMultipleChoiceListFormatForReorderItemArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetMultipleChoiceListFormatForInitialValueArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetMultipleChoiceListFormatForInitialValueArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetNegativeNumberStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetNegativeNumberStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetExplicitFormatArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetExplicitFormatArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetNumberOfDecimalPlacesArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetNumberOfDecimalPlacesArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetDateTimeFormatArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetDateTimeFormatArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetShowThousandsSeparatorArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetShowThousandsSeparatorArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetUseAccountingStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetUseAccountingStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandMoveRowsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandMoveRowsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandMoveColumnsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandMoveColumnsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSortArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSortArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandRewriteFormulasForSortArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandRewriteFormulasForSortArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandRewriteFormulasForTectonicShiftArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandRewriteFormulasForTectonicShiftArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandRewriteFormulasForMoveArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandRewriteFormulasForMoveArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandRewriteFormulasForCellMergeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandRewriteFormulasForCellMergeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandRewriteFilterFormulasForTableResizeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandRewriteFilterFormulasForTableResizeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandRewriteFilterFormulasForTectonicShiftArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandRewriteFilterFormulasForTectonicShiftArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandRewriteFilterFormulasForSortArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandRewriteFilterFormulasForSortArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandRewriteConditionalStylesForTectonicShiftArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandRewriteConditionalStylesForTectonicShiftArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandRewriteConditionalStylesForSortArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandRewriteConditionalStylesForSortArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandRewriteConditionalStylesForRangeMoveArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandRewriteConditionalStylesForRangeMoveArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandRewriteConditionalStylesForCellMergeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandRewriteConditionalStylesForCellMergeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandMergeUnmergeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandMergeUnmergeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandHideShowArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandHideShowArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableInfoGeometryCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableInfoGeometryCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* FormulaEditingCommandGroupArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FormulaEditingCommandGroupArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* FormulaEditingCommandSelectionBehaviorArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FormulaEditingCommandSelectionBehaviorArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* UndoRedoStateCommandSelectionBehaviorArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UndoRedoStateCommandSelectionBehaviorArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableCommandSelectionBehaviorArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableCommandSelectionBehaviorArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* DisableTableNameSelectionBehaviorArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DisableTableNameSelectionBehaviorArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandApplyCellCommentArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandApplyCellCommentArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandApplyConditionalStyleSetArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandApplyConditionalStyleSetArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetFormulaTokenizationArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetFormulaTokenizationArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetFilterEnabledArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetFilterEnabledArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetFilterRuleEnabledArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetFilterRuleEnabledArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetFilterSetTypeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetFilterSetTypeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetStyleNetworkArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetStyleNetworkArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandMutateCellsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandMutateCellsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandDisableFilterRulesForColumnArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandDisableFilterRulesForColumnArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetTextStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetTextStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandNotifyForTransformingArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandNotifyForTransformingArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetStorageLanguageArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetStorageLanguageArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandSetSortOrderArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandSetSortOrderArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandRewriteSortOrderForTectonicShiftArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandRewriteSortOrderForTectonicShiftArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandRewriteSortOrderForSortArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandRewriteSortOrderForSortArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandRewriteSortOrderForTableResizeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandRewriteSortOrderForTableResizeArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CommandDirectionArchive_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CommandRegionArchive_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_TSTCommandArchives_2eproto() {
  protobuf_AddDesc_TSTCommandArchives_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TSTCommandArchives.proto");
  GOOGLE_CHECK(file != NULL);
  TableCommandArchive_descriptor_ = file->message_type(0);
  static const int TableCommandArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableCommandArchive, tableinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableCommandArchive, commandname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableCommandArchive, editing_mode_at_start_),
  };
  TableCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableCommandArchive_descriptor_,
      TableCommandArchive::default_instance_,
      TableCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableCommandArchive));
  CommandApplyCellDiffArchive_descriptor_ = file->message_type(1);
  static const int CommandApplyCellDiffArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyCellDiffArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyCellDiffArchive, cell_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyCellDiffArchive, cell_diff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyCellDiffArchive, inverse_cell_diff_map_),
  };
  CommandApplyCellDiffArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandApplyCellDiffArchive_descriptor_,
      CommandApplyCellDiffArchive::default_instance_,
      CommandApplyCellDiffArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyCellDiffArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyCellDiffArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandApplyCellDiffArchive));
  CommandChangeFreezeHeaderStateArchive_descriptor_ = file->message_type(2);
  static const int CommandChangeFreezeHeaderStateArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChangeFreezeHeaderStateArchive, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChangeFreezeHeaderStateArchive, new_freeze_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChangeFreezeHeaderStateArchive, super_),
  };
  CommandChangeFreezeHeaderStateArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandChangeFreezeHeaderStateArchive_descriptor_,
      CommandChangeFreezeHeaderStateArchive::default_instance_,
      CommandChangeFreezeHeaderStateArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChangeFreezeHeaderStateArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandChangeFreezeHeaderStateArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandChangeFreezeHeaderStateArchive));
  CommandDeleteCellsArchive_descriptor_ = file->message_type(3);
  static const int CommandDeleteCellsArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteCellsArchive, selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteCellsArchive, undo_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteCellsArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteCellsArchive, redo_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteCellsArchive, invalidate_comments_),
  };
  CommandDeleteCellsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandDeleteCellsArchive_descriptor_,
      CommandDeleteCellsArchive::default_instance_,
      CommandDeleteCellsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteCellsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteCellsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandDeleteCellsArchive));
  CommandDeleteCellContentsArchive_descriptor_ = file->message_type(4);
  static const int CommandDeleteCellContentsArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteCellContentsArchive, selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteCellContentsArchive, undo_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteCellContentsArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteCellContentsArchive, redo_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteCellContentsArchive, invalidate_comments_),
  };
  CommandDeleteCellContentsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandDeleteCellContentsArchive_descriptor_,
      CommandDeleteCellContentsArchive::default_instance_,
      CommandDeleteCellContentsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteCellContentsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteCellContentsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandDeleteCellContentsArchive));
  CommandSetMultipleCellsArchive_descriptor_ = file->message_type(5);
  static const int CommandSetMultipleCellsArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleCellsArchive, selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleCellsArchive, undo_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleCellsArchive, redo_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleCellsArchive, source_cell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleCellsArchive, only_if_format_differs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleCellsArchive, super_),
  };
  CommandSetMultipleCellsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetMultipleCellsArchive_descriptor_,
      CommandSetMultipleCellsArchive::default_instance_,
      CommandSetMultipleCellsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleCellsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleCellsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetMultipleCellsArchive));
  CommandSetMultipleCellsCustomArchive_descriptor_ = file->message_type(6);
  static const int CommandSetMultipleCellsCustomArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleCellsCustomArchive, selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleCellsCustomArchive, undo_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleCellsCustomArchive, redo_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleCellsCustomArchive, cell_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleCellsCustomArchive, super_),
  };
  CommandSetMultipleCellsCustomArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetMultipleCellsCustomArchive_descriptor_,
      CommandSetMultipleCellsCustomArchive::default_instance_,
      CommandSetMultipleCellsCustomArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleCellsCustomArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleCellsCustomArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetMultipleCellsCustomArchive));
  CommandSetMultipleCellsMultipleChoiceListArchive_descriptor_ = file->message_type(7);
  static const int CommandSetMultipleCellsMultipleChoiceListArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleCellsMultipleChoiceListArchive, selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleCellsMultipleChoiceListArchive, undo_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleCellsMultipleChoiceListArchive, redo_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleCellsMultipleChoiceListArchive, super_),
  };
  CommandSetMultipleCellsMultipleChoiceListArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetMultipleCellsMultipleChoiceListArchive_descriptor_,
      CommandSetMultipleCellsMultipleChoiceListArchive::default_instance_,
      CommandSetMultipleCellsMultipleChoiceListArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleCellsMultipleChoiceListArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleCellsMultipleChoiceListArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetMultipleCellsMultipleChoiceListArchive));
  CommandCoerceMultipleCellsArchive_descriptor_ = file->message_type(8);
  static const int CommandCoerceMultipleCellsArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandCoerceMultipleCellsArchive, selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandCoerceMultipleCellsArchive, undo_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandCoerceMultipleCellsArchive, redo_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandCoerceMultipleCellsArchive, desired_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandCoerceMultipleCellsArchive, super_),
  };
  CommandCoerceMultipleCellsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandCoerceMultipleCellsArchive_descriptor_,
      CommandCoerceMultipleCellsArchive::default_instance_,
      CommandCoerceMultipleCellsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandCoerceMultipleCellsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandCoerceMultipleCellsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandCoerceMultipleCellsArchive));
  CommandSetControlCellsDisplayNumberFormatArchive_descriptor_ = file->message_type(9);
  static const int CommandSetControlCellsDisplayNumberFormatArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetControlCellsDisplayNumberFormatArchive, selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetControlCellsDisplayNumberFormatArchive, undo_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetControlCellsDisplayNumberFormatArchive, redo_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetControlCellsDisplayNumberFormatArchive, super_),
  };
  CommandSetControlCellsDisplayNumberFormatArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetControlCellsDisplayNumberFormatArchive_descriptor_,
      CommandSetControlCellsDisplayNumberFormatArchive::default_instance_,
      CommandSetControlCellsDisplayNumberFormatArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetControlCellsDisplayNumberFormatArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetControlCellsDisplayNumberFormatArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetControlCellsDisplayNumberFormatArchive));
  CommandSetAutomaticFormatArchive_descriptor_ = file->message_type(10);
  static const int CommandSetAutomaticFormatArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetAutomaticFormatArchive, selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetAutomaticFormatArchive, undo_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetAutomaticFormatArchive, redo_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetAutomaticFormatArchive, super_),
  };
  CommandSetAutomaticFormatArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetAutomaticFormatArchive_descriptor_,
      CommandSetAutomaticFormatArchive::default_instance_,
      CommandSetAutomaticFormatArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetAutomaticFormatArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetAutomaticFormatArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetAutomaticFormatArchive));
  CommandSetAutomaticDurationUnitsArchive_descriptor_ = file->message_type(11);
  static const int CommandSetAutomaticDurationUnitsArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetAutomaticDurationUnitsArchive, selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetAutomaticDurationUnitsArchive, undo_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetAutomaticDurationUnitsArchive, redo_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetAutomaticDurationUnitsArchive, automatic_units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetAutomaticDurationUnitsArchive, super_),
  };
  CommandSetAutomaticDurationUnitsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetAutomaticDurationUnitsArchive_descriptor_,
      CommandSetAutomaticDurationUnitsArchive::default_instance_,
      CommandSetAutomaticDurationUnitsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetAutomaticDurationUnitsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetAutomaticDurationUnitsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetAutomaticDurationUnitsArchive));
  CommandReplaceCustomFormatArchive_descriptor_ = file->message_type(12);
  static const int CommandReplaceCustomFormatArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceCustomFormatArchive, undo_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceCustomFormatArchive, redo_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceCustomFormatArchive, super_),
  };
  CommandReplaceCustomFormatArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandReplaceCustomFormatArchive_descriptor_,
      CommandReplaceCustomFormatArchive::default_instance_,
      CommandReplaceCustomFormatArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceCustomFormatArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceCustomFormatArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandReplaceCustomFormatArchive));
  CommandInsertColumnsOrRowsArchive_descriptor_ = file->message_type(13);
  static const int CommandInsertColumnsOrRowsArchive_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive, before_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive, header_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive, headers_added_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive, footer_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive, footers_added_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive, row_column_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive, cell_style_redo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive, formula_rewrite_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive, width_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive, height_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive, allow_horizontal_autosize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive, inherit_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive, inherit_formats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive, inherit_formulas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive, cell_style_index_pairs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive, text_style_index_pairs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive, sizes_),
  };
  CommandInsertColumnsOrRowsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandInsertColumnsOrRowsArchive_descriptor_,
      CommandInsertColumnsOrRowsArchive::default_instance_,
      CommandInsertColumnsOrRowsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandInsertColumnsOrRowsArchive));
  CommandInsertColumnsOrRowsArchive_StyleIndexPair_descriptor_ = CommandInsertColumnsOrRowsArchive_descriptor_->nested_type(0);
  static const int CommandInsertColumnsOrRowsArchive_StyleIndexPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive_StyleIndexPair, style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive_StyleIndexPair, index_),
  };
  CommandInsertColumnsOrRowsArchive_StyleIndexPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandInsertColumnsOrRowsArchive_StyleIndexPair_descriptor_,
      CommandInsertColumnsOrRowsArchive_StyleIndexPair::default_instance_,
      CommandInsertColumnsOrRowsArchive_StyleIndexPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive_StyleIndexPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive_StyleIndexPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandInsertColumnsOrRowsArchive_StyleIndexPair));
  CommandPasteArchive_descriptor_ = file->message_type(14);
  static const int CommandPasteArchive_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPasteArchive, user_selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPasteArchive, final_selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPasteArchive, undo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPasteArchive, redo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPasteArchive, command_undo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPasteArchive, invalidate_comments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPasteArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPasteArchive, formula_rewrite_commands_),
  };
  CommandPasteArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandPasteArchive_descriptor_,
      CommandPasteArchive::default_instance_,
      CommandPasteArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPasteArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPasteArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandPasteArchive));
  CommandRemoveColumnsOrRowsArchive_descriptor_ = file->message_type(15);
  static const int CommandRemoveColumnsOrRowsArchive_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveColumnsOrRowsArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveColumnsOrRowsArchive, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveColumnsOrRowsArchive, indices_to_remove_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveColumnsOrRowsArchive, cellmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveColumnsOrRowsArchive, oldgeom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveColumnsOrRowsArchive, newgeom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveColumnsOrRowsArchive, subsizes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveColumnsOrRowsArchive, formula_rewrite_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveColumnsOrRowsArchive, width_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveColumnsOrRowsArchive, height_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveColumnsOrRowsArchive, allow_horizontal_autosize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveColumnsOrRowsArchive, undo_merge_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveColumnsOrRowsArchive, redo_merge_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveColumnsOrRowsArchive, hiding_actions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveColumnsOrRowsArchive, orig_filter_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveColumnsOrRowsArchive, undo_command_collector_),
  };
  CommandRemoveColumnsOrRowsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandRemoveColumnsOrRowsArchive_descriptor_,
      CommandRemoveColumnsOrRowsArchive::default_instance_,
      CommandRemoveColumnsOrRowsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveColumnsOrRowsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveColumnsOrRowsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandRemoveColumnsOrRowsArchive));
  CommandResizeColumnOrRowArchive_descriptor_ = file->message_type(16);
  static const int CommandResizeColumnOrRowArchive_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResizeColumnOrRowArchive, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResizeColumnOrRowArchive, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResizeColumnOrRowArchive, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResizeColumnOrRowArchive, newsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResizeColumnOrRowArchive, oldgeom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResizeColumnOrRowArchive, newgeom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResizeColumnOrRowArchive, subsizes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResizeColumnOrRowArchive, old_default_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResizeColumnOrRowArchive, uniformsizes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResizeColumnOrRowArchive, resizemode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResizeColumnOrRowArchive, super_),
  };
  CommandResizeColumnOrRowArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandResizeColumnOrRowArchive_descriptor_,
      CommandResizeColumnOrRowArchive::default_instance_,
      CommandResizeColumnOrRowArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResizeColumnOrRowArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResizeColumnOrRowArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandResizeColumnOrRowArchive));
  CommandSetCellArchive_descriptor_ = file->message_type(17);
  static const int CommandSetCellArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetCellArchive, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetCellArchive, newcell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetCellArchive, oldcell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetCellArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetCellArchive, post_undo_redo_selection_),
  };
  CommandSetCellArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetCellArchive_descriptor_,
      CommandSetCellArchive::default_instance_,
      CommandSetCellArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetCellArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetCellArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetCellArchive));
  CommandTextPreflightInsertCellArchive_descriptor_ = file->message_type(18);
  static const int CommandTextPreflightInsertCellArchive_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTextPreflightInsertCellArchive, editing_cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTextPreflightInsertCellArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTextPreflightInsertCellArchive, coalesced_textcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTextPreflightInsertCellArchive, postflightcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTextPreflightInsertCellArchive, grouped_with_postflight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTextPreflightInsertCellArchive, editing_cell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTextPreflightInsertCellArchive, editing_storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTextPreflightInsertCellArchive, last_column_hit_by_tap_),
  };
  CommandTextPreflightInsertCellArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandTextPreflightInsertCellArchive_descriptor_,
      CommandTextPreflightInsertCellArchive::default_instance_,
      CommandTextPreflightInsertCellArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTextPreflightInsertCellArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandTextPreflightInsertCellArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandTextPreflightInsertCellArchive));
  CommandPostflightSetCellArchive_descriptor_ = file->message_type(19);
  static const int CommandPostflightSetCellArchive_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPostflightSetCellArchive, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPostflightSetCellArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPostflightSetCellArchive, childcommandundo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPostflightSetCellArchive, editing_cell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPostflightSetCellArchive, new_cell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPostflightSetCellArchive, editing_storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPostflightSetCellArchive, last_column_hit_by_tap_),
  };
  CommandPostflightSetCellArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandPostflightSetCellArchive_descriptor_,
      CommandPostflightSetCellArchive::default_instance_,
      CommandPostflightSetCellArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPostflightSetCellArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandPostflightSetCellArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandPostflightSetCellArchive));
  CommandSetNumberOfHeadersOrFootersArchive_descriptor_ = file->message_type(20);
  static const int CommandSetNumberOfHeadersOrFootersArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetNumberOfHeadersOrFootersArchive, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetNumberOfHeadersOrFootersArchive, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetNumberOfHeadersOrFootersArchive, oldcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetNumberOfHeadersOrFootersArchive, super_),
  };
  CommandSetNumberOfHeadersOrFootersArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetNumberOfHeadersOrFootersArchive_descriptor_,
      CommandSetNumberOfHeadersOrFootersArchive::default_instance_,
      CommandSetNumberOfHeadersOrFootersArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetNumberOfHeadersOrFootersArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetNumberOfHeadersOrFootersArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetNumberOfHeadersOrFootersArchive));
  CommandFixWPStylesInRowsOrColumnsArchive_descriptor_ = file->message_type(21);
  static const int CommandFixWPStylesInRowsOrColumnsArchive_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFixWPStylesInRowsOrColumnsArchive, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFixWPStylesInRowsOrColumnsArchive, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFixWPStylesInRowsOrColumnsArchive, undo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFixWPStylesInRowsOrColumnsArchive, redo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFixWPStylesInRowsOrColumnsArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFixWPStylesInRowsOrColumnsArchive, reference_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFixWPStylesInRowsOrColumnsArchive, inherit_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFixWPStylesInRowsOrColumnsArchive, count_),
  };
  CommandFixWPStylesInRowsOrColumnsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandFixWPStylesInRowsOrColumnsArchive_descriptor_,
      CommandFixWPStylesInRowsOrColumnsArchive::default_instance_,
      CommandFixWPStylesInRowsOrColumnsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFixWPStylesInRowsOrColumnsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFixWPStylesInRowsOrColumnsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandFixWPStylesInRowsOrColumnsArchive));
  CommandFixStylesInHeadersOrFootersArchive_descriptor_ = file->message_type(22);
  static const int CommandFixStylesInHeadersOrFootersArchive_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFixStylesInHeadersOrFootersArchive, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFixStylesInHeadersOrFootersArchive, old_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFixStylesInHeadersOrFootersArchive, new_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFixStylesInHeadersOrFootersArchive, redo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFixStylesInHeadersOrFootersArchive, undo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFixStylesInHeadersOrFootersArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFixStylesInHeadersOrFootersArchive, textundo_),
  };
  CommandFixStylesInHeadersOrFootersArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandFixStylesInHeadersOrFootersArchive_descriptor_,
      CommandFixStylesInHeadersOrFootersArchive::default_instance_,
      CommandFixStylesInHeadersOrFootersArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFixStylesInHeadersOrFootersArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFixStylesInHeadersOrFootersArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandFixStylesInHeadersOrFootersArchive));
  CommandSetTableNameArchive_descriptor_ = file->message_type(23);
  static const int CommandSetTableNameArchive_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableNameArchive, newtablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableNameArchive, oldtablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableNameArchive, newstyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableNameArchive, oldstyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableNameArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableNameArchive, old_shape_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableNameArchive, new_shape_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableNameArchive, old_table_name_border_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableNameArchive, new_table_name_border_enabled_),
  };
  CommandSetTableNameArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetTableNameArchive_descriptor_,
      CommandSetTableNameArchive::default_instance_,
      CommandSetTableNameArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableNameArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableNameArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetTableNameArchive));
  CommandSetTableNameEnabledArchive_descriptor_ = file->message_type(24);
  static const int CommandSetTableNameEnabledArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableNameEnabledArchive, table_name_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableNameEnabledArchive, super_),
  };
  CommandSetTableNameEnabledArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetTableNameEnabledArchive_descriptor_,
      CommandSetTableNameEnabledArchive::default_instance_,
      CommandSetTableNameEnabledArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableNameEnabledArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableNameEnabledArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetTableNameEnabledArchive));
  CommandSetTableFontSizeArchive_descriptor_ = file->message_type(25);
  static const int CommandSetTableFontSizeArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableFontSizeArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableFontSizeArchive, scale_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableFontSizeArchive, undo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableFontSizeArchive, redo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableFontSizeArchive, resize_default_cells_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableFontSizeArchive, text_undo_),
  };
  CommandSetTableFontSizeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetTableFontSizeArchive_descriptor_,
      CommandSetTableFontSizeArchive::default_instance_,
      CommandSetTableFontSizeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableFontSizeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableFontSizeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetTableFontSizeArchive));
  CommandSetTableFontNameArchive_descriptor_ = file->message_type(26);
  static const int CommandSetTableFontNameArchive_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableFontNameArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableFontNameArchive, font_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableFontNameArchive, old_font_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableFontNameArchive, preserve_face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableFontNameArchive, undo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableFontNameArchive, redo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableFontNameArchive, text_undo_),
  };
  CommandSetTableFontNameArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetTableFontNameArchive_descriptor_,
      CommandSetTableFontNameArchive::default_instance_,
      CommandSetTableFontNameArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableFontNameArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableFontNameArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetTableFontNameArchive));
  CommandSetTableNameHeightArchive_descriptor_ = file->message_type(27);
  static const int CommandSetTableNameHeightArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableNameHeightArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableNameHeightArchive, old_table_name_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableNameHeightArchive, new_table_name_height_),
  };
  CommandSetTableNameHeightArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetTableNameHeightArchive_descriptor_,
      CommandSetTableNameHeightArchive::default_instance_,
      CommandSetTableNameHeightArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableNameHeightArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTableNameHeightArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetTableNameHeightArchive));
  CommandStyleCellsArchive_descriptor_ = file->message_type(28);
  static const int CommandStyleCellsArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandStyleCellsArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandStyleCellsArchive, format_properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandStyleCellsArchive, selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandStyleCellsArchive, undo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandStyleCellsArchive, redo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandStyleCellsArchive, text_undo_),
  };
  CommandStyleCellsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandStyleCellsArchive_descriptor_,
      CommandStyleCellsArchive::default_instance_,
      CommandStyleCellsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandStyleCellsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandStyleCellsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandStyleCellsArchive));
  CommandSetFillPropertyArchive_descriptor_ = file->message_type(29);
  static const int CommandSetFillPropertyArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFillPropertyArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFillPropertyArchive, fill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFillPropertyArchive, cell_fill_stand_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFillPropertyArchive, selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFillPropertyArchive, undo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFillPropertyArchive, redo_cell_map_),
  };
  CommandSetFillPropertyArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetFillPropertyArchive_descriptor_,
      CommandSetFillPropertyArchive::default_instance_,
      CommandSetFillPropertyArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFillPropertyArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFillPropertyArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetFillPropertyArchive));
  CommandStyleTableArchive_descriptor_ = file->message_type(30);
  static const int CommandStyleTableArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandStyleTableArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandStyleTableArchive, format_properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandStyleTableArchive, old_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandStyleTableArchive, new_style_),
  };
  CommandStyleTableArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandStyleTableArchive_descriptor_,
      CommandStyleTableArchive::default_instance_,
      CommandStyleTableArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandStyleTableArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandStyleTableArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandStyleTableArchive));
  CommandFillCellsArchive_descriptor_ = file->message_type(31);
  static const int CommandFillCellsArchive_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFillCellsArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFillCellsArchive, sourceselection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFillCellsArchive, sourcecellrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFillCellsArchive, targetcellrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFillCellsArchive, undo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFillCellsArchive, filldirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFillCellsArchive, targetselection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFillCellsArchive, redo_cell_map_),
  };
  CommandFillCellsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandFillCellsArchive_descriptor_,
      CommandFillCellsArchive::default_instance_,
      CommandFillCellsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFillCellsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandFillCellsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandFillCellsArchive));
  CommandReplaceTextArchive_descriptor_ = file->message_type(32);
  static const int CommandReplaceTextArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceTextArchive, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceTextArchive, newcell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceTextArchive, oldcell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceTextArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceTextArchive, child_command_undo_),
  };
  CommandReplaceTextArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandReplaceTextArchive_descriptor_,
      CommandReplaceTextArchive::default_instance_,
      CommandReplaceTextArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceTextArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceTextArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandReplaceTextArchive));
  CommandReplaceAllTextArchive_descriptor_ = file->message_type(33);
  static const int CommandReplaceAllTextArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceAllTextArchive, tableinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceAllTextArchive, undo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceAllTextArchive, redo_cell_map_),
  };
  CommandReplaceAllTextArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandReplaceAllTextArchive_descriptor_,
      CommandReplaceAllTextArchive::default_instance_,
      CommandReplaceAllTextArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceAllTextArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceAllTextArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandReplaceAllTextArchive));
  CommandSetRepeatingHeaderEnabledArchive_descriptor_ = file->message_type(34);
  static const int CommandSetRepeatingHeaderEnabledArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetRepeatingHeaderEnabledArchive, repeating_header_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetRepeatingHeaderEnabledArchive, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetRepeatingHeaderEnabledArchive, super_),
  };
  CommandSetRepeatingHeaderEnabledArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetRepeatingHeaderEnabledArchive_descriptor_,
      CommandSetRepeatingHeaderEnabledArchive::default_instance_,
      CommandSetRepeatingHeaderEnabledArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetRepeatingHeaderEnabledArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetRepeatingHeaderEnabledArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetRepeatingHeaderEnabledArchive));
  CommandSetFiltersEnabledArchive_descriptor_ = file->message_type(35);
  static const int CommandSetFiltersEnabledArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFiltersEnabledArchive, enable_filters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFiltersEnabledArchive, super_),
  };
  CommandSetFiltersEnabledArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetFiltersEnabledArchive_descriptor_,
      CommandSetFiltersEnabledArchive::default_instance_,
      CommandSetFiltersEnabledArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFiltersEnabledArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFiltersEnabledArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetFiltersEnabledArchive));
  CommandAddQuickFilterRulesArchive_descriptor_ = file->message_type(36);
  static const int CommandAddQuickFilterRulesArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandAddQuickFilterRulesArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandAddQuickFilterRulesArchive, rules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandAddQuickFilterRulesArchive, filter_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandAddQuickFilterRulesArchive, rule_indices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandAddQuickFilterRulesArchive, filter_set_enabled_),
  };
  CommandAddQuickFilterRulesArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandAddQuickFilterRulesArchive_descriptor_,
      CommandAddQuickFilterRulesArchive::default_instance_,
      CommandAddQuickFilterRulesArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandAddQuickFilterRulesArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandAddQuickFilterRulesArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandAddQuickFilterRulesArchive));
  CommandDeleteFilterRulesArchive_descriptor_ = file->message_type(37);
  static const int CommandDeleteFilterRulesArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteFilterRulesArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteFilterRulesArchive, undo_rules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteFilterRulesArchive, rule_indices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteFilterRulesArchive, filter_removed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteFilterRulesArchive, filter_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteFilterRulesArchive, filter_set_enabled_),
  };
  CommandDeleteFilterRulesArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandDeleteFilterRulesArchive_descriptor_,
      CommandDeleteFilterRulesArchive::default_instance_,
      CommandDeleteFilterRulesArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteFilterRulesArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDeleteFilterRulesArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandDeleteFilterRulesArchive));
  CommandModifyFilterRuleArchive_descriptor_ = file->message_type(38);
  static const int CommandModifyFilterRuleArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandModifyFilterRuleArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandModifyFilterRuleArchive, undo_rule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandModifyFilterRuleArchive, redo_rule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandModifyFilterRuleArchive, rule_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandModifyFilterRuleArchive, filter_index_),
  };
  CommandModifyFilterRuleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandModifyFilterRuleArchive_descriptor_,
      CommandModifyFilterRuleArchive::default_instance_,
      CommandModifyFilterRuleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandModifyFilterRuleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandModifyFilterRuleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandModifyFilterRuleArchive));
  CommandApplyStrokePresetArchive_descriptor_ = file->message_type(39);
  static const int CommandApplyStrokePresetArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyStrokePresetArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyStrokePresetArchive, undo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyStrokePresetArchive, redo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyStrokePresetArchive, selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyStrokePresetArchive, expanded_selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyStrokePresetArchive, preset_index_),
  };
  CommandApplyStrokePresetArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandApplyStrokePresetArchive_descriptor_,
      CommandApplyStrokePresetArchive::default_instance_,
      CommandApplyStrokePresetArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyStrokePresetArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyStrokePresetArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandApplyStrokePresetArchive));
  CommandAddTableStylePresetArchive_descriptor_ = file->message_type(40);
  static const int CommandAddTableStylePresetArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandAddTableStylePresetArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandAddTableStylePresetArchive, preset_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandAddTableStylePresetArchive, table_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandAddTableStylePresetArchive, send_notification_),
  };
  CommandAddTableStylePresetArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandAddTableStylePresetArchive_descriptor_,
      CommandAddTableStylePresetArchive::default_instance_,
      CommandAddTableStylePresetArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandAddTableStylePresetArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandAddTableStylePresetArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandAddTableStylePresetArchive));
  CommandRemoveTableStylePresetArchive_descriptor_ = file->message_type(41);
  static const int CommandRemoveTableStylePresetArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveTableStylePresetArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveTableStylePresetArchive, theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveTableStylePresetArchive, removed_table_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveTableStylePresetArchive, preset_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveTableStylePresetArchive, preset_index_in_theme_),
  };
  CommandRemoveTableStylePresetArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandRemoveTableStylePresetArchive_descriptor_,
      CommandRemoveTableStylePresetArchive::default_instance_,
      CommandRemoveTableStylePresetArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveTableStylePresetArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRemoveTableStylePresetArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandRemoveTableStylePresetArchive));
  CommandReplaceTableStylePresetArchive_descriptor_ = file->message_type(42);
  static const int CommandReplaceTableStylePresetArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceTableStylePresetArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceTableStylePresetArchive, theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceTableStylePresetArchive, old_table_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceTableStylePresetArchive, new_table_styles_),
  };
  CommandReplaceTableStylePresetArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandReplaceTableStylePresetArchive_descriptor_,
      CommandReplaceTableStylePresetArchive::default_instance_,
      CommandReplaceTableStylePresetArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceTableStylePresetArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReplaceTableStylePresetArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandReplaceTableStylePresetArchive));
  CommandApplyTableStylePresetArchive_descriptor_ = file->message_type(43);
  static const int CommandApplyTableStylePresetArchive_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyTableStylePresetArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyTableStylePresetArchive, undo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyTableStylePresetArchive, redo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyTableStylePresetArchive, preset_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyTableStylePresetArchive, old_table_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyTableStylePresetArchive, new_table_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyTableStylePresetArchive, apply_clears_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyTableStylePresetArchive, font_size_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyTableStylePresetArchive, set_style_apply_clears_all_flag_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyTableStylePresetArchive, row_style_index_tuples_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyTableStylePresetArchive, col_style_index_tuples_),
  };
  CommandApplyTableStylePresetArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandApplyTableStylePresetArchive_descriptor_,
      CommandApplyTableStylePresetArchive::default_instance_,
      CommandApplyTableStylePresetArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyTableStylePresetArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyTableStylePresetArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandApplyTableStylePresetArchive));
  CommandApplyTableStylePresetArchive_StyleIndexTuple_descriptor_ = CommandApplyTableStylePresetArchive_descriptor_->nested_type(0);
  static const int CommandApplyTableStylePresetArchive_StyleIndexTuple_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyTableStylePresetArchive_StyleIndexTuple, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyTableStylePresetArchive_StyleIndexTuple, cell_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyTableStylePresetArchive_StyleIndexTuple, text_style_),
  };
  CommandApplyTableStylePresetArchive_StyleIndexTuple_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandApplyTableStylePresetArchive_StyleIndexTuple_descriptor_,
      CommandApplyTableStylePresetArchive_StyleIndexTuple::default_instance_,
      CommandApplyTableStylePresetArchive_StyleIndexTuple_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyTableStylePresetArchive_StyleIndexTuple, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyTableStylePresetArchive_StyleIndexTuple, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandApplyTableStylePresetArchive_StyleIndexTuple));
  CommandSetStyleApplyClearsAllFlagArchive_descriptor_ = file->message_type(44);
  static const int CommandSetStyleApplyClearsAllFlagArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetStyleApplyClearsAllFlagArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetStyleApplyClearsAllFlagArchive, apply_clears_all_),
  };
  CommandSetStyleApplyClearsAllFlagArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetStyleApplyClearsAllFlagArchive_descriptor_,
      CommandSetStyleApplyClearsAllFlagArchive::default_instance_,
      CommandSetStyleApplyClearsAllFlagArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetStyleApplyClearsAllFlagArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetStyleApplyClearsAllFlagArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetStyleApplyClearsAllFlagArchive));
  CommandApplyThemeToTableArchive_descriptor_ = file->message_type(45);
  static const int CommandApplyThemeToTableArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyThemeToTableArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyThemeToTableArchive, undo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyThemeToTableArchive, redo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyThemeToTableArchive, old_table_styles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyThemeToTableArchive, new_table_styles_),
  };
  CommandApplyThemeToTableArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandApplyThemeToTableArchive_descriptor_,
      CommandApplyThemeToTableArchive::default_instance_,
      CommandApplyThemeToTableArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyThemeToTableArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyThemeToTableArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandApplyThemeToTableArchive));
  CommandApplyThemeChildForTableArchive_descriptor_ = file->message_type(46);
  static const int CommandApplyThemeChildForTableArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyThemeChildForTableArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyThemeChildForTableArchive, apply_command_),
  };
  CommandApplyThemeChildForTableArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandApplyThemeChildForTableArchive_descriptor_,
      CommandApplyThemeChildForTableArchive::default_instance_,
      CommandApplyThemeChildForTableArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyThemeChildForTableArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyThemeChildForTableArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandApplyThemeChildForTableArchive));
  CommandToggleTextPropertyArchive_descriptor_ = file->message_type(47);
  static const int CommandToggleTextPropertyArchive_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandToggleTextPropertyArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandToggleTextPropertyArchive, selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandToggleTextPropertyArchive, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandToggleTextPropertyArchive, undo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandToggleTextPropertyArchive, redo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandToggleTextPropertyArchive, default_body_cell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandToggleTextPropertyArchive, default_hr_cell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandToggleTextPropertyArchive, default_hc_cell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandToggleTextPropertyArchive, default_fr_cell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandToggleTextPropertyArchive, text_undo_),
  };
  CommandToggleTextPropertyArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandToggleTextPropertyArchive_descriptor_,
      CommandToggleTextPropertyArchive::default_instance_,
      CommandToggleTextPropertyArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandToggleTextPropertyArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandToggleTextPropertyArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandToggleTextPropertyArchive));
  CommandResetFillPropertyToDefault_descriptor_ = file->message_type(48);
  static const int CommandResetFillPropertyToDefault_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResetFillPropertyToDefault, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResetFillPropertyToDefault, selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResetFillPropertyToDefault, undo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResetFillPropertyToDefault, redo_cell_map_),
  };
  CommandResetFillPropertyToDefault_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandResetFillPropertyToDefault_descriptor_,
      CommandResetFillPropertyToDefault::default_instance_,
      CommandResetFillPropertyToDefault_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResetFillPropertyToDefault, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandResetFillPropertyToDefault, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandResetFillPropertyToDefault));
  CommandSetSingleNumberFormatParameterArchive_descriptor_ = file->message_type(49);
  static const int CommandSetSingleNumberFormatParameterArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetSingleNumberFormatParameterArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetSingleNumberFormatParameterArchive, selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetSingleNumberFormatParameterArchive, undo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetSingleNumberFormatParameterArchive, redo_cell_map_),
  };
  CommandSetSingleNumberFormatParameterArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetSingleNumberFormatParameterArchive_descriptor_,
      CommandSetSingleNumberFormatParameterArchive::default_instance_,
      CommandSetSingleNumberFormatParameterArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetSingleNumberFormatParameterArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetSingleNumberFormatParameterArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetSingleNumberFormatParameterArchive));
  CommandSetBaseArchive_descriptor_ = file->message_type(50);
  static const int CommandSetBaseArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetBaseArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetBaseArchive, base_),
  };
  CommandSetBaseArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetBaseArchive_descriptor_,
      CommandSetBaseArchive::default_instance_,
      CommandSetBaseArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetBaseArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetBaseArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetBaseArchive));
  CommandSetBasePlacesArchive_descriptor_ = file->message_type(51);
  static const int CommandSetBasePlacesArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetBasePlacesArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetBasePlacesArchive, base_places_),
  };
  CommandSetBasePlacesArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetBasePlacesArchive_descriptor_,
      CommandSetBasePlacesArchive::default_instance_,
      CommandSetBasePlacesArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetBasePlacesArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetBasePlacesArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetBasePlacesArchive));
  CommandSetBaseUseMinusSignArchive_descriptor_ = file->message_type(52);
  static const int CommandSetBaseUseMinusSignArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetBaseUseMinusSignArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetBaseUseMinusSignArchive, base_use_minus_sign_),
  };
  CommandSetBaseUseMinusSignArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetBaseUseMinusSignArchive_descriptor_,
      CommandSetBaseUseMinusSignArchive::default_instance_,
      CommandSetBaseUseMinusSignArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetBaseUseMinusSignArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetBaseUseMinusSignArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetBaseUseMinusSignArchive));
  CommandSetControlMinimumArchive_descriptor_ = file->message_type(53);
  static const int CommandSetControlMinimumArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetControlMinimumArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetControlMinimumArchive, minimum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetControlMinimumArchive, format_type_),
  };
  CommandSetControlMinimumArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetControlMinimumArchive_descriptor_,
      CommandSetControlMinimumArchive::default_instance_,
      CommandSetControlMinimumArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetControlMinimumArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetControlMinimumArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetControlMinimumArchive));
  CommandSetControlMaximumArchive_descriptor_ = file->message_type(54);
  static const int CommandSetControlMaximumArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetControlMaximumArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetControlMaximumArchive, maximum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetControlMaximumArchive, format_type_),
  };
  CommandSetControlMaximumArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetControlMaximumArchive_descriptor_,
      CommandSetControlMaximumArchive::default_instance_,
      CommandSetControlMaximumArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetControlMaximumArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetControlMaximumArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetControlMaximumArchive));
  CommandSetControlIncrementArchive_descriptor_ = file->message_type(55);
  static const int CommandSetControlIncrementArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetControlIncrementArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetControlIncrementArchive, increment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetControlIncrementArchive, format_type_),
  };
  CommandSetControlIncrementArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetControlIncrementArchive_descriptor_,
      CommandSetControlIncrementArchive::default_instance_,
      CommandSetControlIncrementArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetControlIncrementArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetControlIncrementArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetControlIncrementArchive));
  CommandSetCurrencyCodeArchive_descriptor_ = file->message_type(56);
  static const int CommandSetCurrencyCodeArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetCurrencyCodeArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetCurrencyCodeArchive, currency_code_),
  };
  CommandSetCurrencyCodeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetCurrencyCodeArchive_descriptor_,
      CommandSetCurrencyCodeArchive::default_instance_,
      CommandSetCurrencyCodeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetCurrencyCodeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetCurrencyCodeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetCurrencyCodeArchive));
  CommandSetFractionAccuracyArchive_descriptor_ = file->message_type(57);
  static const int CommandSetFractionAccuracyArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFractionAccuracyArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFractionAccuracyArchive, fraction_accuracy_),
  };
  CommandSetFractionAccuracyArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetFractionAccuracyArchive_descriptor_,
      CommandSetFractionAccuracyArchive::default_instance_,
      CommandSetFractionAccuracyArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFractionAccuracyArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFractionAccuracyArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetFractionAccuracyArchive));
  CommandSetMultipleChoiceListFormatForEditedItemArchive_descriptor_ = file->message_type(58);
  static const int CommandSetMultipleChoiceListFormatForEditedItemArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleChoiceListFormatForEditedItemArchive, super_),
  };
  CommandSetMultipleChoiceListFormatForEditedItemArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetMultipleChoiceListFormatForEditedItemArchive_descriptor_,
      CommandSetMultipleChoiceListFormatForEditedItemArchive::default_instance_,
      CommandSetMultipleChoiceListFormatForEditedItemArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleChoiceListFormatForEditedItemArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleChoiceListFormatForEditedItemArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetMultipleChoiceListFormatForEditedItemArchive));
  CommandSetMultipleChoiceListFormatForDeleteItemArchive_descriptor_ = file->message_type(59);
  static const int CommandSetMultipleChoiceListFormatForDeleteItemArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleChoiceListFormatForDeleteItemArchive, super_),
  };
  CommandSetMultipleChoiceListFormatForDeleteItemArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetMultipleChoiceListFormatForDeleteItemArchive_descriptor_,
      CommandSetMultipleChoiceListFormatForDeleteItemArchive::default_instance_,
      CommandSetMultipleChoiceListFormatForDeleteItemArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleChoiceListFormatForDeleteItemArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleChoiceListFormatForDeleteItemArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetMultipleChoiceListFormatForDeleteItemArchive));
  CommandSetMultipleChoiceListFormatForReorderItemArchive_descriptor_ = file->message_type(60);
  static const int CommandSetMultipleChoiceListFormatForReorderItemArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleChoiceListFormatForReorderItemArchive, super_),
  };
  CommandSetMultipleChoiceListFormatForReorderItemArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetMultipleChoiceListFormatForReorderItemArchive_descriptor_,
      CommandSetMultipleChoiceListFormatForReorderItemArchive::default_instance_,
      CommandSetMultipleChoiceListFormatForReorderItemArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleChoiceListFormatForReorderItemArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleChoiceListFormatForReorderItemArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetMultipleChoiceListFormatForReorderItemArchive));
  CommandSetMultipleChoiceListFormatForInitialValueArchive_descriptor_ = file->message_type(61);
  static const int CommandSetMultipleChoiceListFormatForInitialValueArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleChoiceListFormatForInitialValueArchive, super_),
  };
  CommandSetMultipleChoiceListFormatForInitialValueArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetMultipleChoiceListFormatForInitialValueArchive_descriptor_,
      CommandSetMultipleChoiceListFormatForInitialValueArchive::default_instance_,
      CommandSetMultipleChoiceListFormatForInitialValueArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleChoiceListFormatForInitialValueArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetMultipleChoiceListFormatForInitialValueArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetMultipleChoiceListFormatForInitialValueArchive));
  CommandSetNegativeNumberStyleArchive_descriptor_ = file->message_type(62);
  static const int CommandSetNegativeNumberStyleArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetNegativeNumberStyleArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetNegativeNumberStyleArchive, negative_number_style_),
  };
  CommandSetNegativeNumberStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetNegativeNumberStyleArchive_descriptor_,
      CommandSetNegativeNumberStyleArchive::default_instance_,
      CommandSetNegativeNumberStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetNegativeNumberStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetNegativeNumberStyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetNegativeNumberStyleArchive));
  CommandSetExplicitFormatArchive_descriptor_ = file->message_type(63);
  static const int CommandSetExplicitFormatArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetExplicitFormatArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetExplicitFormatArchive, selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetExplicitFormatArchive, cell_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetExplicitFormatArchive, undo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetExplicitFormatArchive, redo_cell_map_),
  };
  CommandSetExplicitFormatArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetExplicitFormatArchive_descriptor_,
      CommandSetExplicitFormatArchive::default_instance_,
      CommandSetExplicitFormatArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetExplicitFormatArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetExplicitFormatArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetExplicitFormatArchive));
  CommandSetNumberOfDecimalPlacesArchive_descriptor_ = file->message_type(64);
  static const int CommandSetNumberOfDecimalPlacesArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetNumberOfDecimalPlacesArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetNumberOfDecimalPlacesArchive, decimal_places_),
  };
  CommandSetNumberOfDecimalPlacesArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetNumberOfDecimalPlacesArchive_descriptor_,
      CommandSetNumberOfDecimalPlacesArchive::default_instance_,
      CommandSetNumberOfDecimalPlacesArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetNumberOfDecimalPlacesArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetNumberOfDecimalPlacesArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetNumberOfDecimalPlacesArchive));
  CommandSetDateTimeFormatArchive_descriptor_ = file->message_type(65);
  static const int CommandSetDateTimeFormatArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetDateTimeFormatArchive, super_),
  };
  CommandSetDateTimeFormatArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetDateTimeFormatArchive_descriptor_,
      CommandSetDateTimeFormatArchive::default_instance_,
      CommandSetDateTimeFormatArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetDateTimeFormatArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetDateTimeFormatArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetDateTimeFormatArchive));
  CommandSetShowThousandsSeparatorArchive_descriptor_ = file->message_type(66);
  static const int CommandSetShowThousandsSeparatorArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetShowThousandsSeparatorArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetShowThousandsSeparatorArchive, show_thousands_separator_),
  };
  CommandSetShowThousandsSeparatorArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetShowThousandsSeparatorArchive_descriptor_,
      CommandSetShowThousandsSeparatorArchive::default_instance_,
      CommandSetShowThousandsSeparatorArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetShowThousandsSeparatorArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetShowThousandsSeparatorArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetShowThousandsSeparatorArchive));
  CommandSetUseAccountingStyleArchive_descriptor_ = file->message_type(67);
  static const int CommandSetUseAccountingStyleArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetUseAccountingStyleArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetUseAccountingStyleArchive, use_accounting_style_),
  };
  CommandSetUseAccountingStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetUseAccountingStyleArchive_descriptor_,
      CommandSetUseAccountingStyleArchive::default_instance_,
      CommandSetUseAccountingStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetUseAccountingStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetUseAccountingStyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetUseAccountingStyleArchive));
  CommandMoveRowsArchive_descriptor_ = file->message_type(68);
  static const int CommandMoveRowsArchive_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveRowsArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveRowsArchive, selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveRowsArchive, start_row_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveRowsArchive, dest_row_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveRowsArchive, number_of_rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveRowsArchive, formula_rewrite_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveRowsArchive, show_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveRowsArchive, unmerge_invalid_ranges_command_),
  };
  CommandMoveRowsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandMoveRowsArchive_descriptor_,
      CommandMoveRowsArchive::default_instance_,
      CommandMoveRowsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveRowsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveRowsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandMoveRowsArchive));
  CommandMoveColumnsArchive_descriptor_ = file->message_type(69);
  static const int CommandMoveColumnsArchive_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveColumnsArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveColumnsArchive, selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveColumnsArchive, start_column_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveColumnsArchive, dest_column_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveColumnsArchive, number_of_columns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveColumnsArchive, formula_rewrite_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveColumnsArchive, show_command_),
  };
  CommandMoveColumnsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandMoveColumnsArchive_descriptor_,
      CommandMoveColumnsArchive::default_instance_,
      CommandMoveColumnsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveColumnsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMoveColumnsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandMoveColumnsArchive));
  CommandSortArchive_descriptor_ = file->message_type(70);
  static const int CommandSortArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSortArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSortArchive, mapping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSortArchive, formula_rewrite_command_),
  };
  CommandSortArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSortArchive_descriptor_,
      CommandSortArchive::default_instance_,
      CommandSortArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSortArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSortArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSortArchive));
  CommandRewriteFormulasForSortArchive_descriptor_ = file->message_type(71);
  static const int CommandRewriteFormulasForSortArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFormulasForSortArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFormulasForSortArchive, formula_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFormulasForSortArchive, sort_mapping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFormulasForSortArchive, sorted_table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFormulasForSortArchive, explode_ranges_),
  };
  CommandRewriteFormulasForSortArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandRewriteFormulasForSortArchive_descriptor_,
      CommandRewriteFormulasForSortArchive::default_instance_,
      CommandRewriteFormulasForSortArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFormulasForSortArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFormulasForSortArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandRewriteFormulasForSortArchive));
  CommandRewriteFormulasForTectonicShiftArchive_descriptor_ = file->message_type(72);
  static const int CommandRewriteFormulasForTectonicShiftArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFormulasForTectonicShiftArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFormulasForTectonicShiftArchive, formula_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFormulasForTectonicShiftArchive, tectonic_shift_),
  };
  CommandRewriteFormulasForTectonicShiftArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandRewriteFormulasForTectonicShiftArchive_descriptor_,
      CommandRewriteFormulasForTectonicShiftArchive::default_instance_,
      CommandRewriteFormulasForTectonicShiftArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFormulasForTectonicShiftArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFormulasForTectonicShiftArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandRewriteFormulasForTectonicShiftArchive));
  CommandRewriteFormulasForMoveArchive_descriptor_ = file->message_type(73);
  static const int CommandRewriteFormulasForMoveArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFormulasForMoveArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFormulasForMoveArchive, formula_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFormulasForMoveArchive, from_reference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFormulasForMoveArchive, to_reference_),
  };
  CommandRewriteFormulasForMoveArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandRewriteFormulasForMoveArchive_descriptor_,
      CommandRewriteFormulasForMoveArchive::default_instance_,
      CommandRewriteFormulasForMoveArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFormulasForMoveArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFormulasForMoveArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandRewriteFormulasForMoveArchive));
  CommandRewriteFormulasForCellMergeArchive_descriptor_ = file->message_type(74);
  static const int CommandRewriteFormulasForCellMergeArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFormulasForCellMergeArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFormulasForCellMergeArchive, formula_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFormulasForCellMergeArchive, merged_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFormulasForCellMergeArchive, table_id_),
  };
  CommandRewriteFormulasForCellMergeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandRewriteFormulasForCellMergeArchive_descriptor_,
      CommandRewriteFormulasForCellMergeArchive::default_instance_,
      CommandRewriteFormulasForCellMergeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFormulasForCellMergeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFormulasForCellMergeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandRewriteFormulasForCellMergeArchive));
  CommandRewriteFilterFormulasForTableResizeArchive_descriptor_ = file->message_type(75);
  static const int CommandRewriteFilterFormulasForTableResizeArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFilterFormulasForTableResizeArchive, super_),
  };
  CommandRewriteFilterFormulasForTableResizeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandRewriteFilterFormulasForTableResizeArchive_descriptor_,
      CommandRewriteFilterFormulasForTableResizeArchive::default_instance_,
      CommandRewriteFilterFormulasForTableResizeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFilterFormulasForTableResizeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFilterFormulasForTableResizeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandRewriteFilterFormulasForTableResizeArchive));
  CommandRewriteFilterFormulasForTectonicShiftArchive_descriptor_ = file->message_type(76);
  static const int CommandRewriteFilterFormulasForTectonicShiftArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFilterFormulasForTectonicShiftArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFilterFormulasForTectonicShiftArchive, filter_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFilterFormulasForTectonicShiftArchive, tectonic_shift_),
  };
  CommandRewriteFilterFormulasForTectonicShiftArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandRewriteFilterFormulasForTectonicShiftArchive_descriptor_,
      CommandRewriteFilterFormulasForTectonicShiftArchive::default_instance_,
      CommandRewriteFilterFormulasForTectonicShiftArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFilterFormulasForTectonicShiftArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFilterFormulasForTectonicShiftArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandRewriteFilterFormulasForTectonicShiftArchive));
  CommandRewriteFilterFormulasForSortArchive_descriptor_ = file->message_type(77);
  static const int CommandRewriteFilterFormulasForSortArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFilterFormulasForSortArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFilterFormulasForSortArchive, filter_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFilterFormulasForSortArchive, sort_mapping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFilterFormulasForSortArchive, sorted_table_id_),
  };
  CommandRewriteFilterFormulasForSortArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandRewriteFilterFormulasForSortArchive_descriptor_,
      CommandRewriteFilterFormulasForSortArchive::default_instance_,
      CommandRewriteFilterFormulasForSortArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFilterFormulasForSortArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteFilterFormulasForSortArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandRewriteFilterFormulasForSortArchive));
  CommandRewriteConditionalStylesForTectonicShiftArchive_descriptor_ = file->message_type(78);
  static const int CommandRewriteConditionalStylesForTectonicShiftArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteConditionalStylesForTectonicShiftArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteConditionalStylesForTectonicShiftArchive, tectonic_shift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteConditionalStylesForTectonicShiftArchive, cells_to_rewrite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteConditionalStylesForTectonicShiftArchive, conditional_style_sets_),
  };
  CommandRewriteConditionalStylesForTectonicShiftArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandRewriteConditionalStylesForTectonicShiftArchive_descriptor_,
      CommandRewriteConditionalStylesForTectonicShiftArchive::default_instance_,
      CommandRewriteConditionalStylesForTectonicShiftArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteConditionalStylesForTectonicShiftArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteConditionalStylesForTectonicShiftArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandRewriteConditionalStylesForTectonicShiftArchive));
  CommandRewriteConditionalStylesForSortArchive_descriptor_ = file->message_type(79);
  static const int CommandRewriteConditionalStylesForSortArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteConditionalStylesForSortArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteConditionalStylesForSortArchive, sort_mapping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteConditionalStylesForSortArchive, sorted_table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteConditionalStylesForSortArchive, cells_to_rewrite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteConditionalStylesForSortArchive, conditional_style_sets_),
  };
  CommandRewriteConditionalStylesForSortArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandRewriteConditionalStylesForSortArchive_descriptor_,
      CommandRewriteConditionalStylesForSortArchive::default_instance_,
      CommandRewriteConditionalStylesForSortArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteConditionalStylesForSortArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteConditionalStylesForSortArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandRewriteConditionalStylesForSortArchive));
  CommandRewriteConditionalStylesForRangeMoveArchive_descriptor_ = file->message_type(80);
  static const int CommandRewriteConditionalStylesForRangeMoveArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteConditionalStylesForRangeMoveArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteConditionalStylesForRangeMoveArchive, from_range_reference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteConditionalStylesForRangeMoveArchive, to_range_reference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteConditionalStylesForRangeMoveArchive, cells_to_rewrite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteConditionalStylesForRangeMoveArchive, conditional_style_sets_),
  };
  CommandRewriteConditionalStylesForRangeMoveArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandRewriteConditionalStylesForRangeMoveArchive_descriptor_,
      CommandRewriteConditionalStylesForRangeMoveArchive::default_instance_,
      CommandRewriteConditionalStylesForRangeMoveArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteConditionalStylesForRangeMoveArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteConditionalStylesForRangeMoveArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandRewriteConditionalStylesForRangeMoveArchive));
  CommandRewriteConditionalStylesForCellMergeArchive_descriptor_ = file->message_type(81);
  static const int CommandRewriteConditionalStylesForCellMergeArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteConditionalStylesForCellMergeArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteConditionalStylesForCellMergeArchive, merged_table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteConditionalStylesForCellMergeArchive, merged_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteConditionalStylesForCellMergeArchive, cells_to_rewrite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteConditionalStylesForCellMergeArchive, conditional_style_sets_),
  };
  CommandRewriteConditionalStylesForCellMergeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandRewriteConditionalStylesForCellMergeArchive_descriptor_,
      CommandRewriteConditionalStylesForCellMergeArchive::default_instance_,
      CommandRewriteConditionalStylesForCellMergeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteConditionalStylesForCellMergeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteConditionalStylesForCellMergeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandRewriteConditionalStylesForCellMergeArchive));
  CommandMergeUnmergeArchive_descriptor_ = file->message_type(82);
  static const int CommandMergeUnmergeArchive_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMergeUnmergeArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMergeUnmergeArchive, merge_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMergeUnmergeArchive, selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMergeUnmergeArchive, undo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMergeUnmergeArchive, redo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMergeUnmergeArchive, old_merge_ranges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMergeUnmergeArchive, undo_formula_rewrite_command_),
  };
  CommandMergeUnmergeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandMergeUnmergeArchive_descriptor_,
      CommandMergeUnmergeArchive::default_instance_,
      CommandMergeUnmergeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMergeUnmergeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMergeUnmergeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandMergeUnmergeArchive));
  CommandHideShowArchive_descriptor_ = file->message_type(83);
  static const int CommandHideShowArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHideShowArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHideShowArchive, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHideShowArchive, hide_show_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHideShowArchive, hiding_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHideShowArchive, elements_affected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHideShowArchive, old_hiding_states_),
  };
  CommandHideShowArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandHideShowArchive_descriptor_,
      CommandHideShowArchive::default_instance_,
      CommandHideShowArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHideShowArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandHideShowArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandHideShowArchive));
  TableInfoGeometryCommandArchive_descriptor_ = file->message_type(84);
  static const int TableInfoGeometryCommandArchive_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoGeometryCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoGeometryCommandArchive, scale_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoGeometryCommandArchive, table_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoGeometryCommandArchive, new_geometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoGeometryCommandArchive, old_geometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoGeometryCommandArchive, turn_off_auto_resize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoGeometryCommandArchive, should_clear_object_placeholder_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoGeometryCommandArchive, did_match_object_placeholder_geometry_),
  };
  TableInfoGeometryCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableInfoGeometryCommandArchive_descriptor_,
      TableInfoGeometryCommandArchive::default_instance_,
      TableInfoGeometryCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoGeometryCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoGeometryCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableInfoGeometryCommandArchive));
  FormulaEditingCommandGroupArchive_descriptor_ = file->message_type(85);
  static const int FormulaEditingCommandGroupArchive_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaEditingCommandGroupArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaEditingCommandGroupArchive, undoselectionvalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaEditingCommandGroupArchive, undoselectionstart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaEditingCommandGroupArchive, undoselectionlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaEditingCommandGroupArchive, undoactivetoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaEditingCommandGroupArchive, redoselectionvalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaEditingCommandGroupArchive, redoselectionstart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaEditingCommandGroupArchive, redoselectionlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaEditingCommandGroupArchive, redoactivetoken_),
  };
  FormulaEditingCommandGroupArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FormulaEditingCommandGroupArchive_descriptor_,
      FormulaEditingCommandGroupArchive::default_instance_,
      FormulaEditingCommandGroupArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaEditingCommandGroupArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaEditingCommandGroupArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FormulaEditingCommandGroupArchive));
  FormulaEditingCommandSelectionBehaviorArchive_descriptor_ = file->message_type(86);
  static const int FormulaEditingCommandSelectionBehaviorArchive_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaEditingCommandSelectionBehaviorArchive, undoselectionvalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaEditingCommandSelectionBehaviorArchive, undoselectionstart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaEditingCommandSelectionBehaviorArchive, undoselectionlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaEditingCommandSelectionBehaviorArchive, undoactivetoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaEditingCommandSelectionBehaviorArchive, redoselectionvalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaEditingCommandSelectionBehaviorArchive, redoselectionstart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaEditingCommandSelectionBehaviorArchive, redoselectionlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaEditingCommandSelectionBehaviorArchive, redoactivetoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaEditingCommandSelectionBehaviorArchive, storage_),
  };
  FormulaEditingCommandSelectionBehaviorArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FormulaEditingCommandSelectionBehaviorArchive_descriptor_,
      FormulaEditingCommandSelectionBehaviorArchive::default_instance_,
      FormulaEditingCommandSelectionBehaviorArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaEditingCommandSelectionBehaviorArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormulaEditingCommandSelectionBehaviorArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FormulaEditingCommandSelectionBehaviorArchive));
  UndoRedoStateCommandSelectionBehaviorArchive_descriptor_ = file->message_type(87);
  static const int UndoRedoStateCommandSelectionBehaviorArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoRedoStateCommandSelectionBehaviorArchive, before_undo_redo_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoRedoStateCommandSelectionBehaviorArchive, after_undo_redo_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoRedoStateCommandSelectionBehaviorArchive, table_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoRedoStateCommandSelectionBehaviorArchive, before_table_selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoRedoStateCommandSelectionBehaviorArchive, after_table_selection_),
  };
  UndoRedoStateCommandSelectionBehaviorArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UndoRedoStateCommandSelectionBehaviorArchive_descriptor_,
      UndoRedoStateCommandSelectionBehaviorArchive::default_instance_,
      UndoRedoStateCommandSelectionBehaviorArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoRedoStateCommandSelectionBehaviorArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndoRedoStateCommandSelectionBehaviorArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UndoRedoStateCommandSelectionBehaviorArchive));
  TableCommandSelectionBehaviorArchive_descriptor_ = file->message_type(88);
  static const int TableCommandSelectionBehaviorArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableCommandSelectionBehaviorArchive, before_table_selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableCommandSelectionBehaviorArchive, after_table_selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableCommandSelectionBehaviorArchive, table_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableCommandSelectionBehaviorArchive, last_column_hit_by_tap_),
  };
  TableCommandSelectionBehaviorArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableCommandSelectionBehaviorArchive_descriptor_,
      TableCommandSelectionBehaviorArchive::default_instance_,
      TableCommandSelectionBehaviorArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableCommandSelectionBehaviorArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableCommandSelectionBehaviorArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableCommandSelectionBehaviorArchive));
  DisableTableNameSelectionBehaviorArchive_descriptor_ = file->message_type(89);
  static const int DisableTableNameSelectionBehaviorArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisableTableNameSelectionBehaviorArchive, super_),
  };
  DisableTableNameSelectionBehaviorArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DisableTableNameSelectionBehaviorArchive_descriptor_,
      DisableTableNameSelectionBehaviorArchive::default_instance_,
      DisableTableNameSelectionBehaviorArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisableTableNameSelectionBehaviorArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisableTableNameSelectionBehaviorArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DisableTableNameSelectionBehaviorArchive));
  CommandApplyCellCommentArchive_descriptor_ = file->message_type(90);
  static const int CommandApplyCellCommentArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyCellCommentArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyCellCommentArchive, cell_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyCellCommentArchive, old_comment_storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyCellCommentArchive, new_comment_storage_),
  };
  CommandApplyCellCommentArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandApplyCellCommentArchive_descriptor_,
      CommandApplyCellCommentArchive::default_instance_,
      CommandApplyCellCommentArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyCellCommentArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyCellCommentArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandApplyCellCommentArchive));
  CommandApplyConditionalStyleSetArchive_descriptor_ = file->message_type(91);
  static const int CommandApplyConditionalStyleSetArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyConditionalStyleSetArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyConditionalStyleSetArchive, selection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyConditionalStyleSetArchive, undo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyConditionalStyleSetArchive, redo_cell_map_),
  };
  CommandApplyConditionalStyleSetArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandApplyConditionalStyleSetArchive_descriptor_,
      CommandApplyConditionalStyleSetArchive::default_instance_,
      CommandApplyConditionalStyleSetArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyConditionalStyleSetArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandApplyConditionalStyleSetArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandApplyConditionalStyleSetArchive));
  CommandSetFormulaTokenizationArchive_descriptor_ = file->message_type(92);
  static const int CommandSetFormulaTokenizationArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFormulaTokenizationArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFormulaTokenizationArchive, tokenization_),
  };
  CommandSetFormulaTokenizationArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetFormulaTokenizationArchive_descriptor_,
      CommandSetFormulaTokenizationArchive::default_instance_,
      CommandSetFormulaTokenizationArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFormulaTokenizationArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFormulaTokenizationArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetFormulaTokenizationArchive));
  CommandSetFilterEnabledArchive_descriptor_ = file->message_type(93);
  static const int CommandSetFilterEnabledArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFilterEnabledArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFilterEnabledArchive, filter_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFilterEnabledArchive, enabled_),
  };
  CommandSetFilterEnabledArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetFilterEnabledArchive_descriptor_,
      CommandSetFilterEnabledArchive::default_instance_,
      CommandSetFilterEnabledArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFilterEnabledArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFilterEnabledArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetFilterEnabledArchive));
  CommandSetFilterRuleEnabledArchive_descriptor_ = file->message_type(94);
  static const int CommandSetFilterRuleEnabledArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFilterRuleEnabledArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFilterRuleEnabledArchive, filter_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFilterRuleEnabledArchive, rule_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFilterRuleEnabledArchive, enabled_),
  };
  CommandSetFilterRuleEnabledArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetFilterRuleEnabledArchive_descriptor_,
      CommandSetFilterRuleEnabledArchive::default_instance_,
      CommandSetFilterRuleEnabledArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFilterRuleEnabledArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFilterRuleEnabledArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetFilterRuleEnabledArchive));
  CommandSetFilterSetTypeArchive_descriptor_ = file->message_type(95);
  static const int CommandSetFilterSetTypeArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFilterSetTypeArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFilterSetTypeArchive, old_filter_set_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFilterSetTypeArchive, new_filter_set_type_),
  };
  CommandSetFilterSetTypeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetFilterSetTypeArchive_descriptor_,
      CommandSetFilterSetTypeArchive::default_instance_,
      CommandSetFilterSetTypeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFilterSetTypeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetFilterSetTypeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetFilterSetTypeArchive));
  CommandSetStyleNetworkArchive_descriptor_ = file->message_type(96);
  static const int CommandSetStyleNetworkArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetStyleNetworkArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetStyleNetworkArchive, old_style_network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetStyleNetworkArchive, new_style_network_),
  };
  CommandSetStyleNetworkArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetStyleNetworkArchive_descriptor_,
      CommandSetStyleNetworkArchive::default_instance_,
      CommandSetStyleNetworkArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetStyleNetworkArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetStyleNetworkArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetStyleNetworkArchive));
  CommandMutateCellsArchive_descriptor_ = file->message_type(97);
  static const int CommandMutateCellsArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMutateCellsArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMutateCellsArchive, undo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMutateCellsArchive, redo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMutateCellsArchive, selection_),
  };
  CommandMutateCellsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandMutateCellsArchive_descriptor_,
      CommandMutateCellsArchive::default_instance_,
      CommandMutateCellsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMutateCellsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMutateCellsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandMutateCellsArchive));
  CommandDisableFilterRulesForColumnArchive_descriptor_ = file->message_type(98);
  static const int CommandDisableFilterRulesForColumnArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDisableFilterRulesForColumnArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDisableFilterRulesForColumnArchive, column_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDisableFilterRulesForColumnArchive, rule_indices_),
  };
  CommandDisableFilterRulesForColumnArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandDisableFilterRulesForColumnArchive_descriptor_,
      CommandDisableFilterRulesForColumnArchive::default_instance_,
      CommandDisableFilterRulesForColumnArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDisableFilterRulesForColumnArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandDisableFilterRulesForColumnArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandDisableFilterRulesForColumnArchive));
  CommandSetTextStyleArchive_descriptor_ = file->message_type(99);
  static const int CommandSetTextStyleArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTextStyleArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTextStyleArchive, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTextStyleArchive, undo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTextStyleArchive, redo_cell_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTextStyleArchive, subcommands_),
  };
  CommandSetTextStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetTextStyleArchive_descriptor_,
      CommandSetTextStyleArchive::default_instance_,
      CommandSetTextStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTextStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetTextStyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetTextStyleArchive));
  CommandNotifyForTransformingArchive_descriptor_ = file->message_type(100);
  static const int CommandNotifyForTransformingArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandNotifyForTransformingArchive, super_),
  };
  CommandNotifyForTransformingArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandNotifyForTransformingArchive_descriptor_,
      CommandNotifyForTransformingArchive::default_instance_,
      CommandNotifyForTransformingArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandNotifyForTransformingArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandNotifyForTransformingArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandNotifyForTransformingArchive));
  CommandSetStorageLanguageArchive_descriptor_ = file->message_type(101);
  static const int CommandSetStorageLanguageArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetStorageLanguageArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetStorageLanguageArchive, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetStorageLanguageArchive, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetStorageLanguageArchive, range_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetStorageLanguageArchive, range_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetStorageLanguageArchive, undo_transaction_),
  };
  CommandSetStorageLanguageArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetStorageLanguageArchive_descriptor_,
      CommandSetStorageLanguageArchive::default_instance_,
      CommandSetStorageLanguageArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetStorageLanguageArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetStorageLanguageArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetStorageLanguageArchive));
  CommandSetSortOrderArchive_descriptor_ = file->message_type(102);
  static const int CommandSetSortOrderArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetSortOrderArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetSortOrderArchive, old_sort_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetSortOrderArchive, new_sort_order_),
  };
  CommandSetSortOrderArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandSetSortOrderArchive_descriptor_,
      CommandSetSortOrderArchive::default_instance_,
      CommandSetSortOrderArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetSortOrderArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandSetSortOrderArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandSetSortOrderArchive));
  CommandRewriteSortOrderForTectonicShiftArchive_descriptor_ = file->message_type(103);
  static const int CommandRewriteSortOrderForTectonicShiftArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteSortOrderForTectonicShiftArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteSortOrderForTectonicShiftArchive, tectonic_shift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteSortOrderForTectonicShiftArchive, old_sort_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteSortOrderForTectonicShiftArchive, new_sort_order_),
  };
  CommandRewriteSortOrderForTectonicShiftArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandRewriteSortOrderForTectonicShiftArchive_descriptor_,
      CommandRewriteSortOrderForTectonicShiftArchive::default_instance_,
      CommandRewriteSortOrderForTectonicShiftArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteSortOrderForTectonicShiftArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteSortOrderForTectonicShiftArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandRewriteSortOrderForTectonicShiftArchive));
  CommandRewriteSortOrderForSortArchive_descriptor_ = file->message_type(104);
  static const int CommandRewriteSortOrderForSortArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteSortOrderForSortArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteSortOrderForSortArchive, sort_mapping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteSortOrderForSortArchive, old_sort_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteSortOrderForSortArchive, new_sort_order_),
  };
  CommandRewriteSortOrderForSortArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandRewriteSortOrderForSortArchive_descriptor_,
      CommandRewriteSortOrderForSortArchive::default_instance_,
      CommandRewriteSortOrderForSortArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteSortOrderForSortArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteSortOrderForSortArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandRewriteSortOrderForSortArchive));
  CommandRewriteSortOrderForTableResizeArchive_descriptor_ = file->message_type(105);
  static const int CommandRewriteSortOrderForTableResizeArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteSortOrderForTableResizeArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteSortOrderForTableResizeArchive, old_sort_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteSortOrderForTableResizeArchive, new_sort_order_),
  };
  CommandRewriteSortOrderForTableResizeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandRewriteSortOrderForTableResizeArchive_descriptor_,
      CommandRewriteSortOrderForTableResizeArchive::default_instance_,
      CommandRewriteSortOrderForTableResizeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteSortOrderForTableResizeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRewriteSortOrderForTableResizeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandRewriteSortOrderForTableResizeArchive));
  CommandDirectionArchive_descriptor_ = file->enum_type(0);
  CommandRegionArchive_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TSTCommandArchives_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableCommandArchive_descriptor_, &TableCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandApplyCellDiffArchive_descriptor_, &CommandApplyCellDiffArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandChangeFreezeHeaderStateArchive_descriptor_, &CommandChangeFreezeHeaderStateArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandDeleteCellsArchive_descriptor_, &CommandDeleteCellsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandDeleteCellContentsArchive_descriptor_, &CommandDeleteCellContentsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetMultipleCellsArchive_descriptor_, &CommandSetMultipleCellsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetMultipleCellsCustomArchive_descriptor_, &CommandSetMultipleCellsCustomArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetMultipleCellsMultipleChoiceListArchive_descriptor_, &CommandSetMultipleCellsMultipleChoiceListArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandCoerceMultipleCellsArchive_descriptor_, &CommandCoerceMultipleCellsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetControlCellsDisplayNumberFormatArchive_descriptor_, &CommandSetControlCellsDisplayNumberFormatArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetAutomaticFormatArchive_descriptor_, &CommandSetAutomaticFormatArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetAutomaticDurationUnitsArchive_descriptor_, &CommandSetAutomaticDurationUnitsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandReplaceCustomFormatArchive_descriptor_, &CommandReplaceCustomFormatArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandInsertColumnsOrRowsArchive_descriptor_, &CommandInsertColumnsOrRowsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandInsertColumnsOrRowsArchive_StyleIndexPair_descriptor_, &CommandInsertColumnsOrRowsArchive_StyleIndexPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandPasteArchive_descriptor_, &CommandPasteArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandRemoveColumnsOrRowsArchive_descriptor_, &CommandRemoveColumnsOrRowsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandResizeColumnOrRowArchive_descriptor_, &CommandResizeColumnOrRowArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetCellArchive_descriptor_, &CommandSetCellArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandTextPreflightInsertCellArchive_descriptor_, &CommandTextPreflightInsertCellArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandPostflightSetCellArchive_descriptor_, &CommandPostflightSetCellArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetNumberOfHeadersOrFootersArchive_descriptor_, &CommandSetNumberOfHeadersOrFootersArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandFixWPStylesInRowsOrColumnsArchive_descriptor_, &CommandFixWPStylesInRowsOrColumnsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandFixStylesInHeadersOrFootersArchive_descriptor_, &CommandFixStylesInHeadersOrFootersArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetTableNameArchive_descriptor_, &CommandSetTableNameArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetTableNameEnabledArchive_descriptor_, &CommandSetTableNameEnabledArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetTableFontSizeArchive_descriptor_, &CommandSetTableFontSizeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetTableFontNameArchive_descriptor_, &CommandSetTableFontNameArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetTableNameHeightArchive_descriptor_, &CommandSetTableNameHeightArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandStyleCellsArchive_descriptor_, &CommandStyleCellsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetFillPropertyArchive_descriptor_, &CommandSetFillPropertyArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandStyleTableArchive_descriptor_, &CommandStyleTableArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandFillCellsArchive_descriptor_, &CommandFillCellsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandReplaceTextArchive_descriptor_, &CommandReplaceTextArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandReplaceAllTextArchive_descriptor_, &CommandReplaceAllTextArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetRepeatingHeaderEnabledArchive_descriptor_, &CommandSetRepeatingHeaderEnabledArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetFiltersEnabledArchive_descriptor_, &CommandSetFiltersEnabledArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandAddQuickFilterRulesArchive_descriptor_, &CommandAddQuickFilterRulesArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandDeleteFilterRulesArchive_descriptor_, &CommandDeleteFilterRulesArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandModifyFilterRuleArchive_descriptor_, &CommandModifyFilterRuleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandApplyStrokePresetArchive_descriptor_, &CommandApplyStrokePresetArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandAddTableStylePresetArchive_descriptor_, &CommandAddTableStylePresetArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandRemoveTableStylePresetArchive_descriptor_, &CommandRemoveTableStylePresetArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandReplaceTableStylePresetArchive_descriptor_, &CommandReplaceTableStylePresetArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandApplyTableStylePresetArchive_descriptor_, &CommandApplyTableStylePresetArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandApplyTableStylePresetArchive_StyleIndexTuple_descriptor_, &CommandApplyTableStylePresetArchive_StyleIndexTuple::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetStyleApplyClearsAllFlagArchive_descriptor_, &CommandSetStyleApplyClearsAllFlagArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandApplyThemeToTableArchive_descriptor_, &CommandApplyThemeToTableArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandApplyThemeChildForTableArchive_descriptor_, &CommandApplyThemeChildForTableArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandToggleTextPropertyArchive_descriptor_, &CommandToggleTextPropertyArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandResetFillPropertyToDefault_descriptor_, &CommandResetFillPropertyToDefault::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetSingleNumberFormatParameterArchive_descriptor_, &CommandSetSingleNumberFormatParameterArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetBaseArchive_descriptor_, &CommandSetBaseArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetBasePlacesArchive_descriptor_, &CommandSetBasePlacesArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetBaseUseMinusSignArchive_descriptor_, &CommandSetBaseUseMinusSignArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetControlMinimumArchive_descriptor_, &CommandSetControlMinimumArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetControlMaximumArchive_descriptor_, &CommandSetControlMaximumArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetControlIncrementArchive_descriptor_, &CommandSetControlIncrementArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetCurrencyCodeArchive_descriptor_, &CommandSetCurrencyCodeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetFractionAccuracyArchive_descriptor_, &CommandSetFractionAccuracyArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetMultipleChoiceListFormatForEditedItemArchive_descriptor_, &CommandSetMultipleChoiceListFormatForEditedItemArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetMultipleChoiceListFormatForDeleteItemArchive_descriptor_, &CommandSetMultipleChoiceListFormatForDeleteItemArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetMultipleChoiceListFormatForReorderItemArchive_descriptor_, &CommandSetMultipleChoiceListFormatForReorderItemArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetMultipleChoiceListFormatForInitialValueArchive_descriptor_, &CommandSetMultipleChoiceListFormatForInitialValueArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetNegativeNumberStyleArchive_descriptor_, &CommandSetNegativeNumberStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetExplicitFormatArchive_descriptor_, &CommandSetExplicitFormatArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetNumberOfDecimalPlacesArchive_descriptor_, &CommandSetNumberOfDecimalPlacesArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetDateTimeFormatArchive_descriptor_, &CommandSetDateTimeFormatArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetShowThousandsSeparatorArchive_descriptor_, &CommandSetShowThousandsSeparatorArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetUseAccountingStyleArchive_descriptor_, &CommandSetUseAccountingStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandMoveRowsArchive_descriptor_, &CommandMoveRowsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandMoveColumnsArchive_descriptor_, &CommandMoveColumnsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSortArchive_descriptor_, &CommandSortArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandRewriteFormulasForSortArchive_descriptor_, &CommandRewriteFormulasForSortArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandRewriteFormulasForTectonicShiftArchive_descriptor_, &CommandRewriteFormulasForTectonicShiftArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandRewriteFormulasForMoveArchive_descriptor_, &CommandRewriteFormulasForMoveArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandRewriteFormulasForCellMergeArchive_descriptor_, &CommandRewriteFormulasForCellMergeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandRewriteFilterFormulasForTableResizeArchive_descriptor_, &CommandRewriteFilterFormulasForTableResizeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandRewriteFilterFormulasForTectonicShiftArchive_descriptor_, &CommandRewriteFilterFormulasForTectonicShiftArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandRewriteFilterFormulasForSortArchive_descriptor_, &CommandRewriteFilterFormulasForSortArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandRewriteConditionalStylesForTectonicShiftArchive_descriptor_, &CommandRewriteConditionalStylesForTectonicShiftArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandRewriteConditionalStylesForSortArchive_descriptor_, &CommandRewriteConditionalStylesForSortArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandRewriteConditionalStylesForRangeMoveArchive_descriptor_, &CommandRewriteConditionalStylesForRangeMoveArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandRewriteConditionalStylesForCellMergeArchive_descriptor_, &CommandRewriteConditionalStylesForCellMergeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandMergeUnmergeArchive_descriptor_, &CommandMergeUnmergeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandHideShowArchive_descriptor_, &CommandHideShowArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableInfoGeometryCommandArchive_descriptor_, &TableInfoGeometryCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FormulaEditingCommandGroupArchive_descriptor_, &FormulaEditingCommandGroupArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FormulaEditingCommandSelectionBehaviorArchive_descriptor_, &FormulaEditingCommandSelectionBehaviorArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UndoRedoStateCommandSelectionBehaviorArchive_descriptor_, &UndoRedoStateCommandSelectionBehaviorArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableCommandSelectionBehaviorArchive_descriptor_, &TableCommandSelectionBehaviorArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DisableTableNameSelectionBehaviorArchive_descriptor_, &DisableTableNameSelectionBehaviorArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandApplyCellCommentArchive_descriptor_, &CommandApplyCellCommentArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandApplyConditionalStyleSetArchive_descriptor_, &CommandApplyConditionalStyleSetArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetFormulaTokenizationArchive_descriptor_, &CommandSetFormulaTokenizationArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetFilterEnabledArchive_descriptor_, &CommandSetFilterEnabledArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetFilterRuleEnabledArchive_descriptor_, &CommandSetFilterRuleEnabledArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetFilterSetTypeArchive_descriptor_, &CommandSetFilterSetTypeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetStyleNetworkArchive_descriptor_, &CommandSetStyleNetworkArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandMutateCellsArchive_descriptor_, &CommandMutateCellsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandDisableFilterRulesForColumnArchive_descriptor_, &CommandDisableFilterRulesForColumnArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetTextStyleArchive_descriptor_, &CommandSetTextStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandNotifyForTransformingArchive_descriptor_, &CommandNotifyForTransformingArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetStorageLanguageArchive_descriptor_, &CommandSetStorageLanguageArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandSetSortOrderArchive_descriptor_, &CommandSetSortOrderArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandRewriteSortOrderForTectonicShiftArchive_descriptor_, &CommandRewriteSortOrderForTectonicShiftArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandRewriteSortOrderForSortArchive_descriptor_, &CommandRewriteSortOrderForSortArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandRewriteSortOrderForTableResizeArchive_descriptor_, &CommandRewriteSortOrderForTableResizeArchive::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TSTCommandArchives_2eproto() {
  delete TableCommandArchive::default_instance_;
  delete TableCommandArchive_reflection_;
  delete CommandApplyCellDiffArchive::default_instance_;
  delete CommandApplyCellDiffArchive_reflection_;
  delete CommandChangeFreezeHeaderStateArchive::default_instance_;
  delete CommandChangeFreezeHeaderStateArchive_reflection_;
  delete CommandDeleteCellsArchive::default_instance_;
  delete CommandDeleteCellsArchive_reflection_;
  delete CommandDeleteCellContentsArchive::default_instance_;
  delete CommandDeleteCellContentsArchive_reflection_;
  delete CommandSetMultipleCellsArchive::default_instance_;
  delete CommandSetMultipleCellsArchive_reflection_;
  delete CommandSetMultipleCellsCustomArchive::default_instance_;
  delete CommandSetMultipleCellsCustomArchive_reflection_;
  delete CommandSetMultipleCellsMultipleChoiceListArchive::default_instance_;
  delete CommandSetMultipleCellsMultipleChoiceListArchive_reflection_;
  delete CommandCoerceMultipleCellsArchive::default_instance_;
  delete CommandCoerceMultipleCellsArchive_reflection_;
  delete CommandSetControlCellsDisplayNumberFormatArchive::default_instance_;
  delete CommandSetControlCellsDisplayNumberFormatArchive_reflection_;
  delete CommandSetAutomaticFormatArchive::default_instance_;
  delete CommandSetAutomaticFormatArchive_reflection_;
  delete CommandSetAutomaticDurationUnitsArchive::default_instance_;
  delete CommandSetAutomaticDurationUnitsArchive_reflection_;
  delete CommandReplaceCustomFormatArchive::default_instance_;
  delete CommandReplaceCustomFormatArchive_reflection_;
  delete CommandInsertColumnsOrRowsArchive::default_instance_;
  delete CommandInsertColumnsOrRowsArchive_reflection_;
  delete CommandInsertColumnsOrRowsArchive_StyleIndexPair::default_instance_;
  delete CommandInsertColumnsOrRowsArchive_StyleIndexPair_reflection_;
  delete CommandPasteArchive::default_instance_;
  delete CommandPasteArchive_reflection_;
  delete CommandRemoveColumnsOrRowsArchive::default_instance_;
  delete CommandRemoveColumnsOrRowsArchive_reflection_;
  delete CommandResizeColumnOrRowArchive::default_instance_;
  delete CommandResizeColumnOrRowArchive_reflection_;
  delete CommandSetCellArchive::default_instance_;
  delete CommandSetCellArchive_reflection_;
  delete CommandTextPreflightInsertCellArchive::default_instance_;
  delete CommandTextPreflightInsertCellArchive_reflection_;
  delete CommandPostflightSetCellArchive::default_instance_;
  delete CommandPostflightSetCellArchive_reflection_;
  delete CommandSetNumberOfHeadersOrFootersArchive::default_instance_;
  delete CommandSetNumberOfHeadersOrFootersArchive_reflection_;
  delete CommandFixWPStylesInRowsOrColumnsArchive::default_instance_;
  delete CommandFixWPStylesInRowsOrColumnsArchive_reflection_;
  delete CommandFixStylesInHeadersOrFootersArchive::default_instance_;
  delete CommandFixStylesInHeadersOrFootersArchive_reflection_;
  delete CommandSetTableNameArchive::default_instance_;
  delete CommandSetTableNameArchive_reflection_;
  delete CommandSetTableNameEnabledArchive::default_instance_;
  delete CommandSetTableNameEnabledArchive_reflection_;
  delete CommandSetTableFontSizeArchive::default_instance_;
  delete CommandSetTableFontSizeArchive_reflection_;
  delete CommandSetTableFontNameArchive::default_instance_;
  delete CommandSetTableFontNameArchive_reflection_;
  delete CommandSetTableNameHeightArchive::default_instance_;
  delete CommandSetTableNameHeightArchive_reflection_;
  delete CommandStyleCellsArchive::default_instance_;
  delete CommandStyleCellsArchive_reflection_;
  delete CommandSetFillPropertyArchive::default_instance_;
  delete CommandSetFillPropertyArchive_reflection_;
  delete CommandStyleTableArchive::default_instance_;
  delete CommandStyleTableArchive_reflection_;
  delete CommandFillCellsArchive::default_instance_;
  delete CommandFillCellsArchive_reflection_;
  delete CommandReplaceTextArchive::default_instance_;
  delete CommandReplaceTextArchive_reflection_;
  delete CommandReplaceAllTextArchive::default_instance_;
  delete CommandReplaceAllTextArchive_reflection_;
  delete CommandSetRepeatingHeaderEnabledArchive::default_instance_;
  delete CommandSetRepeatingHeaderEnabledArchive_reflection_;
  delete CommandSetFiltersEnabledArchive::default_instance_;
  delete CommandSetFiltersEnabledArchive_reflection_;
  delete CommandAddQuickFilterRulesArchive::default_instance_;
  delete CommandAddQuickFilterRulesArchive_reflection_;
  delete CommandDeleteFilterRulesArchive::default_instance_;
  delete CommandDeleteFilterRulesArchive_reflection_;
  delete CommandModifyFilterRuleArchive::default_instance_;
  delete CommandModifyFilterRuleArchive_reflection_;
  delete CommandApplyStrokePresetArchive::default_instance_;
  delete CommandApplyStrokePresetArchive_reflection_;
  delete CommandAddTableStylePresetArchive::default_instance_;
  delete CommandAddTableStylePresetArchive_reflection_;
  delete CommandRemoveTableStylePresetArchive::default_instance_;
  delete CommandRemoveTableStylePresetArchive_reflection_;
  delete CommandReplaceTableStylePresetArchive::default_instance_;
  delete CommandReplaceTableStylePresetArchive_reflection_;
  delete CommandApplyTableStylePresetArchive::default_instance_;
  delete CommandApplyTableStylePresetArchive_reflection_;
  delete CommandApplyTableStylePresetArchive_StyleIndexTuple::default_instance_;
  delete CommandApplyTableStylePresetArchive_StyleIndexTuple_reflection_;
  delete CommandSetStyleApplyClearsAllFlagArchive::default_instance_;
  delete CommandSetStyleApplyClearsAllFlagArchive_reflection_;
  delete CommandApplyThemeToTableArchive::default_instance_;
  delete CommandApplyThemeToTableArchive_reflection_;
  delete CommandApplyThemeChildForTableArchive::default_instance_;
  delete CommandApplyThemeChildForTableArchive_reflection_;
  delete CommandToggleTextPropertyArchive::default_instance_;
  delete CommandToggleTextPropertyArchive_reflection_;
  delete CommandResetFillPropertyToDefault::default_instance_;
  delete CommandResetFillPropertyToDefault_reflection_;
  delete CommandSetSingleNumberFormatParameterArchive::default_instance_;
  delete CommandSetSingleNumberFormatParameterArchive_reflection_;
  delete CommandSetBaseArchive::default_instance_;
  delete CommandSetBaseArchive_reflection_;
  delete CommandSetBasePlacesArchive::default_instance_;
  delete CommandSetBasePlacesArchive_reflection_;
  delete CommandSetBaseUseMinusSignArchive::default_instance_;
  delete CommandSetBaseUseMinusSignArchive_reflection_;
  delete CommandSetControlMinimumArchive::default_instance_;
  delete CommandSetControlMinimumArchive_reflection_;
  delete CommandSetControlMaximumArchive::default_instance_;
  delete CommandSetControlMaximumArchive_reflection_;
  delete CommandSetControlIncrementArchive::default_instance_;
  delete CommandSetControlIncrementArchive_reflection_;
  delete CommandSetCurrencyCodeArchive::default_instance_;
  delete CommandSetCurrencyCodeArchive_reflection_;
  delete CommandSetFractionAccuracyArchive::default_instance_;
  delete CommandSetFractionAccuracyArchive_reflection_;
  delete CommandSetMultipleChoiceListFormatForEditedItemArchive::default_instance_;
  delete CommandSetMultipleChoiceListFormatForEditedItemArchive_reflection_;
  delete CommandSetMultipleChoiceListFormatForDeleteItemArchive::default_instance_;
  delete CommandSetMultipleChoiceListFormatForDeleteItemArchive_reflection_;
  delete CommandSetMultipleChoiceListFormatForReorderItemArchive::default_instance_;
  delete CommandSetMultipleChoiceListFormatForReorderItemArchive_reflection_;
  delete CommandSetMultipleChoiceListFormatForInitialValueArchive::default_instance_;
  delete CommandSetMultipleChoiceListFormatForInitialValueArchive_reflection_;
  delete CommandSetNegativeNumberStyleArchive::default_instance_;
  delete CommandSetNegativeNumberStyleArchive_reflection_;
  delete CommandSetExplicitFormatArchive::default_instance_;
  delete CommandSetExplicitFormatArchive_reflection_;
  delete CommandSetNumberOfDecimalPlacesArchive::default_instance_;
  delete CommandSetNumberOfDecimalPlacesArchive_reflection_;
  delete CommandSetDateTimeFormatArchive::default_instance_;
  delete CommandSetDateTimeFormatArchive_reflection_;
  delete CommandSetShowThousandsSeparatorArchive::default_instance_;
  delete CommandSetShowThousandsSeparatorArchive_reflection_;
  delete CommandSetUseAccountingStyleArchive::default_instance_;
  delete CommandSetUseAccountingStyleArchive_reflection_;
  delete CommandMoveRowsArchive::default_instance_;
  delete CommandMoveRowsArchive_reflection_;
  delete CommandMoveColumnsArchive::default_instance_;
  delete CommandMoveColumnsArchive_reflection_;
  delete CommandSortArchive::default_instance_;
  delete CommandSortArchive_reflection_;
  delete CommandRewriteFormulasForSortArchive::default_instance_;
  delete CommandRewriteFormulasForSortArchive_reflection_;
  delete CommandRewriteFormulasForTectonicShiftArchive::default_instance_;
  delete CommandRewriteFormulasForTectonicShiftArchive_reflection_;
  delete CommandRewriteFormulasForMoveArchive::default_instance_;
  delete CommandRewriteFormulasForMoveArchive_reflection_;
  delete CommandRewriteFormulasForCellMergeArchive::default_instance_;
  delete CommandRewriteFormulasForCellMergeArchive_reflection_;
  delete CommandRewriteFilterFormulasForTableResizeArchive::default_instance_;
  delete CommandRewriteFilterFormulasForTableResizeArchive_reflection_;
  delete CommandRewriteFilterFormulasForTectonicShiftArchive::default_instance_;
  delete CommandRewriteFilterFormulasForTectonicShiftArchive_reflection_;
  delete CommandRewriteFilterFormulasForSortArchive::default_instance_;
  delete CommandRewriteFilterFormulasForSortArchive_reflection_;
  delete CommandRewriteConditionalStylesForTectonicShiftArchive::default_instance_;
  delete CommandRewriteConditionalStylesForTectonicShiftArchive_reflection_;
  delete CommandRewriteConditionalStylesForSortArchive::default_instance_;
  delete CommandRewriteConditionalStylesForSortArchive_reflection_;
  delete CommandRewriteConditionalStylesForRangeMoveArchive::default_instance_;
  delete CommandRewriteConditionalStylesForRangeMoveArchive_reflection_;
  delete CommandRewriteConditionalStylesForCellMergeArchive::default_instance_;
  delete CommandRewriteConditionalStylesForCellMergeArchive_reflection_;
  delete CommandMergeUnmergeArchive::default_instance_;
  delete CommandMergeUnmergeArchive_reflection_;
  delete CommandHideShowArchive::default_instance_;
  delete CommandHideShowArchive_reflection_;
  delete TableInfoGeometryCommandArchive::default_instance_;
  delete TableInfoGeometryCommandArchive_reflection_;
  delete FormulaEditingCommandGroupArchive::default_instance_;
  delete FormulaEditingCommandGroupArchive_reflection_;
  delete FormulaEditingCommandSelectionBehaviorArchive::default_instance_;
  delete FormulaEditingCommandSelectionBehaviorArchive_reflection_;
  delete UndoRedoStateCommandSelectionBehaviorArchive::default_instance_;
  delete UndoRedoStateCommandSelectionBehaviorArchive_reflection_;
  delete TableCommandSelectionBehaviorArchive::default_instance_;
  delete TableCommandSelectionBehaviorArchive_reflection_;
  delete DisableTableNameSelectionBehaviorArchive::default_instance_;
  delete DisableTableNameSelectionBehaviorArchive_reflection_;
  delete CommandApplyCellCommentArchive::default_instance_;
  delete CommandApplyCellCommentArchive_reflection_;
  delete CommandApplyConditionalStyleSetArchive::default_instance_;
  delete CommandApplyConditionalStyleSetArchive_reflection_;
  delete CommandSetFormulaTokenizationArchive::default_instance_;
  delete CommandSetFormulaTokenizationArchive_reflection_;
  delete CommandSetFilterEnabledArchive::default_instance_;
  delete CommandSetFilterEnabledArchive_reflection_;
  delete CommandSetFilterRuleEnabledArchive::default_instance_;
  delete CommandSetFilterRuleEnabledArchive_reflection_;
  delete CommandSetFilterSetTypeArchive::default_instance_;
  delete CommandSetFilterSetTypeArchive_reflection_;
  delete CommandSetStyleNetworkArchive::default_instance_;
  delete CommandSetStyleNetworkArchive_reflection_;
  delete CommandMutateCellsArchive::default_instance_;
  delete CommandMutateCellsArchive_reflection_;
  delete CommandDisableFilterRulesForColumnArchive::default_instance_;
  delete CommandDisableFilterRulesForColumnArchive_reflection_;
  delete CommandSetTextStyleArchive::default_instance_;
  delete CommandSetTextStyleArchive_reflection_;
  delete CommandNotifyForTransformingArchive::default_instance_;
  delete CommandNotifyForTransformingArchive_reflection_;
  delete CommandSetStorageLanguageArchive::default_instance_;
  delete CommandSetStorageLanguageArchive_reflection_;
  delete CommandSetSortOrderArchive::default_instance_;
  delete CommandSetSortOrderArchive_reflection_;
  delete CommandRewriteSortOrderForTectonicShiftArchive::default_instance_;
  delete CommandRewriteSortOrderForTectonicShiftArchive_reflection_;
  delete CommandRewriteSortOrderForSortArchive::default_instance_;
  delete CommandRewriteSortOrderForSortArchive_reflection_;
  delete CommandRewriteSortOrderForTableResizeArchive::default_instance_;
  delete CommandRewriteSortOrderForTableResizeArchive_reflection_;
}

void protobuf_AddDesc_TSTCommandArchives_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::TSP::protobuf_AddDesc_TSPMessages_2eproto();
  ::TSD::protobuf_AddDesc_TSDArchives_2eproto();
  ::TSK::protobuf_AddDesc_TSKArchives_2eproto();
  ::TSS::protobuf_AddDesc_TSSArchives_2eproto();
  ::TSCE::protobuf_AddDesc_TSCEArchives_2eproto();
  ::TSWP::protobuf_AddDesc_TSWPArchives_2eproto();
  ::TST::protobuf_AddDesc_TSTArchives_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030TSTCommandArchives.proto\022\003TST\032\021TSPMess"
    "ages.proto\032\021TSDArchives.proto\032\021TSKArchiv"
    "es.proto\032\021TSSArchives.proto\032\022TSCEArchive"
    "s.proto\032\022TSWPArchives.proto\032\021TSTArchives"
    ".proto\"\220\001\n\023TableCommandArchive\022!\n\ttableI"
    "nfo\030\001 \002(\0132\016.TSP.Reference\022\023\n\013commandname"
    "\030\002 \001(\t\022\"\n\005super\030\003 \002(\0132\023.TSK.CommandArchi"
    "ve\022\035\n\025editing_mode_at_start\030\004 \001(\r\"\276\001\n\033Co"
    "mmandApplyCellDiffArchive\022\'\n\005super\030\001 \002(\013"
    "2\030.TST.TableCommandArchive\022$\n\013cell_regio"
    "n\030\002 \002(\0132\017.TST.CellRegion\022!\n\tcell_diff\030\003 "
    "\002(\0132\016.TSP.Reference\022-\n\025inverse_cell_diff"
    "_map\030\004 \002(\0132\016.TSP.Reference\"\233\001\n%CommandCh"
    "angeFreezeHeaderStateArchive\022/\n\tdirectio"
    "n\030\001 \002(\0162\034.TST.CommandDirectionArchive\022\030\n"
    "\020new_freeze_state\030\002 \002(\010\022\'\n\005super\030\003 \002(\0132\030"
    ".TST.TableCommandArchive\"\331\001\n\031CommandDele"
    "teCellsArchive\022(\n\tselection\030\001 \002(\0132\025.TST."
    "SelectionArchive\022%\n\010undo_map\030\002 \002(\0132\023.TST"
    ".CellMapArchive\022\'\n\005super\030\003 \002(\0132\030.TST.Tab"
    "leCommandArchive\022%\n\010redo_map\030\004 \002(\0132\023.TST"
    ".CellMapArchive\022\033\n\023invalidate_comments\030\005"
    " \002(\010\"\340\001\n CommandDeleteCellContentsArchiv"
    "e\022(\n\tselection\030\001 \002(\0132\025.TST.SelectionArch"
    "ive\022%\n\010undo_map\030\002 \002(\0132\023.TST.CellMapArchi"
    "ve\022\'\n\005super\030\003 \002(\0132\030.TST.TableCommandArch"
    "ive\022%\n\010redo_map\030\004 \002(\0132\023.TST.CellMapArchi"
    "ve\022\033\n\023invalidate_comments\030\005 \002(\010\"\201\002\n\036Comm"
    "andSetMultipleCellsArchive\022(\n\tselection\030"
    "\001 \002(\0132\025.TST.SelectionArchive\022%\n\010undo_map"
    "\030\002 \002(\0132\023.TST.CellMapArchive\022%\n\010redo_map\030"
    "\003 \002(\0132\023.TST.CellMapArchive\022\036\n\013source_cel"
    "l\030\004 \001(\0132\t.TST.Cell\022\036\n\026only_if_format_dif"
    "fers\030\006 \001(\010\022\'\n\005super\030\007 \002(\0132\030.TST.TableCom"
    "mandArchive\"\366\001\n$CommandSetMultipleCellsC"
    "ustomArchive\022(\n\tselection\030\001 \002(\0132\025.TST.Se"
    "lectionArchive\022%\n\010undo_map\030\002 \002(\0132\023.TST.C"
    "ellMapArchive\022%\n\010redo_map\030\003 \002(\0132\023.TST.Ce"
    "llMapArchive\022-\n\013cell_format\030\004 \002(\0132\030.TSK."
    "FormatStructArchive\022\'\n\005super\030\007 \002(\0132\030.TST"
    ".TableCommandArchive\"\323\001\n0CommandSetMulti"
    "pleCellsMultipleChoiceListArchive\022(\n\tsel"
    "ection\030\001 \002(\0132\025.TST.SelectionArchive\022%\n\010u"
    "ndo_map\030\002 \002(\0132\023.TST.CellMapArchive\022%\n\010re"
    "do_map\030\003 \002(\0132\023.TST.CellMapArchive\022\'\n\005sup"
    "er\030\005 \002(\0132\030.TST.TableCommandArchive\"\334\001\n!C"
    "ommandCoerceMultipleCellsArchive\022(\n\tsele"
    "ction\030\001 \002(\0132\025.TST.SelectionArchive\022%\n\010un"
    "do_map\030\002 \002(\0132\023.TST.CellMapArchive\022%\n\010red"
    "o_map\030\003 \002(\0132\023.TST.CellMapArchive\022\026\n\016desi"
    "red_format\030\004 \002(\005\022\'\n\005super\030\006 \002(\0132\030.TST.Ta"
    "bleCommandArchive\"\323\001\n0CommandSetControlC"
    "ellsDisplayNumberFormatArchive\022(\n\tselect"
    "ion\030\001 \002(\0132\025.TST.SelectionArchive\022%\n\010undo"
    "_map\030\002 \002(\0132\023.TST.CellMapArchive\022%\n\010redo_"
    "map\030\003 \002(\0132\023.TST.CellMapArchive\022\'\n\005super\030"
    "\006 \002(\0132\030.TST.TableCommandArchive\"\303\001\n Comm"
    "andSetAutomaticFormatArchive\022(\n\tselectio"
    "n\030\001 \002(\0132\025.TST.SelectionArchive\022%\n\010undo_m"
    "ap\030\002 \002(\0132\023.TST.CellMapArchive\022%\n\010redo_ma"
    "p\030\003 \002(\0132\023.TST.CellMapArchive\022\'\n\005super\030\006 "
    "\002(\0132\030.TST.TableCommandArchive\"\343\001\n\'Comman"
    "dSetAutomaticDurationUnitsArchive\022(\n\tsel"
    "ection\030\001 \002(\0132\025.TST.SelectionArchive\022%\n\010u"
    "ndo_map\030\002 \002(\0132\023.TST.CellMapArchive\022%\n\010re"
    "do_map\030\003 \002(\0132\023.TST.CellMapArchive\022\027\n\017aut"
    "omatic_units\030\004 \001(\010\022\'\n\005super\030\006 \002(\0132\030.TST."
    "TableCommandArchive\"\232\001\n!CommandReplaceCu"
    "stomFormatArchive\022%\n\010undo_map\030\001 \002(\0132\023.TS"
    "T.CellMapArchive\022%\n\010redo_map\030\002 \002(\0132\023.TST"
    ".CellMapArchive\022\'\n\005super\030\006 \002(\0132\030.TST.Tab"
    "leCommandArchive\"\264\006\n!CommandInsertColumn"
    "sOrRowsArchive\022/\n\tdirection\030\001 \002(\0162\034.TST."
    "CommandDirectionArchive\022\r\n\005index\030\002 \002(\r\022\r"
    "\n\005count\030\003 \002(\r\022\014\n\004size\030\004 \002(\002\022\016\n\006before\030\005 "
    "\002(\010\022\024\n\014header_count\030\013 \002(\r\022\025\n\rheaders_add"
    "ed\030\014 \002(\r\022\024\n\014footer_count\030\r \002(\r\022\025\n\rfooter"
    "s_added\030\016 \002(\r\022(\n\020row_column_style\030\010 \001(\0132"
    "\016.TSP.Reference\022,\n\017cell_style_redo\030\t \001(\013"
    "2\023.TST.CellMapArchive\022\'\n\005super\030\n \002(\0132\030.T"
    "ST.TableCommandArchive\022/\n\027formula_rewrit"
    "e_command\030\017 \001(\0132\016.TSP.Reference\022\024\n\014width"
    "_factor\030\020 \002(\002\022\025\n\rheight_factor\030\021 \002(\002\022!\n\031"
    "allow_horizontal_autosize\030\022 \001(\010\022\026\n\016inher"
    "it_styles\030\023 \001(\010\022\027\n\017inherit_formats\030\024 \001(\010"
    "\022\030\n\020inherit_formulas\030\030 \001(\010\022U\n\026cell_style"
    "_index_pairs\030\025 \003(\01325.TST.CommandInsertCo"
    "lumnsOrRowsArchive.StyleIndexPair\022U\n\026tex"
    "t_style_index_pairs\030\026 \003(\01325.TST.CommandI"
    "nsertColumnsOrRowsArchive.StyleIndexPair"
    "\022\r\n\005sizes\030\027 \003(\001\032>\n\016StyleIndexPair\022\035\n\005sty"
    "le\030\001 \002(\0132\016.TSP.Reference\022\r\n\005index\030\002 \002(\r\""
    "\364\002\n\023CommandPasteArchive\022-\n\016user_selectio"
    "n\030\001 \002(\0132\025.TST.SelectionArchive\022.\n\017final_"
    "selection\030\002 \002(\0132\025.TST.SelectionArchive\022/"
    "\n\rundo_cell_map\030\003 \002(\0132\030.TST.TiledCellMap"
    "Archive\022/\n\rredo_cell_map\030\004 \002(\0132\030.TST.Til"
    "edCellMapArchive\022$\n\014command_undo\030\006 \001(\0132\016"
    ".TSP.Reference\022\033\n\023invalidate_comments\030\007 "
    "\002(\010\022\'\n\005super\030\013 \002(\0132\030.TST.TableCommandArc"
    "hive\0220\n\030formula_rewrite_commands\030\017 \003(\0132\016"
    ".TSP.Reference\"\357\004\n!CommandRemoveColumnsO"
    "rRowsArchive\022\'\n\005super\030\001 \002(\0132\030.TST.TableC"
    "ommandArchive\022/\n\tdirection\030\002 \002(\0162\034.TST.C"
    "ommandDirectionArchive\022(\n\021indices_to_rem"
    "ove\030\003 \002(\0132\r.TSP.IndexSet\022$\n\007cellMap\030\004 \001("
    "\0132\023.TST.CellMapArchive\022%\n\007oldgeom\030\005 \002(\0132"
    "\024.TSD.GeometryArchive\022%\n\007newgeom\030\006 \002(\0132\024"
    ".TSD.GeometryArchive\022\020\n\010subsizes\030\007 \003(\002\022/"
    "\n\027formula_rewrite_command\030\010 \001(\0132\016.TSP.Re"
    "ference\022\024\n\014width_factor\030\t \002(\002\022\025\n\rheight_"
    "factor\030\n \002(\002\022!\n\031allow_horizontal_autosiz"
    "e\030\013 \001(\010\022&\n\016undo_merge_map\030\014 \001(\0132\016.TSP.Re"
    "ference\022&\n\016redo_merge_map\030\r \001(\0132\016.TSP.Re"
    "ference\022\026\n\016hiding_actions\030\016 \003(\r\022\'\n\017orig_"
    "filter_set\030\017 \001(\0132\016.TSP.Reference\022.\n\026undo"
    "_command_collector\030\020 \003(\0132\016.TSP.Reference"
    "\"\311\002\n\037CommandResizeColumnOrRowArchive\022/\n\t"
    "direction\030\001 \002(\0162\034.TST.CommandDirectionAr"
    "chive\022\r\n\005index\030\002 \002(\r\022\r\n\005count\030\003 \002(\r\022\017\n\007n"
    "ewsize\030\004 \002(\002\022%\n\007oldgeom\030\005 \001(\0132\024.TSD.Geom"
    "etryArchive\022%\n\007newgeom\030\006 \001(\0132\024.TSD.Geome"
    "tryArchive\022\020\n\010subsizes\030\007 \003(\002\022\023\n\013old_defa"
    "ult\030\010 \001(\002\022\024\n\014uniformsizes\030\t \001(\010\022\022\n\nresiz"
    "emode\030\n \001(\r\022\'\n\005super\030\013 \002(\0132\030.TST.TableCo"
    "mmandArchive\"\267\001\n\025CommandSetCellArchive\022\033"
    "\n\006cellID\030\001 \002(\0132\013.TST.CellID\022\032\n\007newcell\030\002"
    " \001(\0132\t.TST.Cell\022\032\n\007oldcell\030\003 \001(\0132\t.TST.C"
    "ell\022\'\n\005super\030\005 \002(\0132\030.TST.TableCommandArc"
    "hive\022 \n\030post_undo_redo_selection\030\006 \001(\010\"\332"
    "\002\n%CommandTextPreflightInsertCellArchive"
    "\022#\n\016editing_cellID\030\001 \002(\0132\013.TST.CellID\022\'\n"
    "\005super\030\003 \002(\0132\030.TST.TableCommandArchive\022-"
    "\n\025coalesced_textcommand\030\006 \001(\0132\016.TSP.Refe"
    "rence\022)\n\021postflightcommand\030\010 \001(\0132\016.TSP.R"
    "eference\022\037\n\027grouped_with_postflight\030\t \001("
    "\010\022\037\n\014editing_cell\030\n \002(\0132\t.TST.Cell\022\'\n\017ed"
    "iting_storage\030\013 \002(\0132\016.TSP.Reference\022\036\n\026l"
    "ast_column_hit_by_tap\030\014 \001(\r\"\230\002\n\037CommandP"
    "ostflightSetCellArchive\022\033\n\006cellID\030\001 \002(\0132"
    "\013.TST.CellID\022\'\n\005super\030\003 \002(\0132\030.TST.TableC"
    "ommandArchive\022(\n\020childcommandundo\030\004 \001(\0132"
    "\016.TSP.Reference\022\037\n\014editing_cell\030\006 \002(\0132\t."
    "TST.Cell\022\033\n\010new_cell\030\007 \002(\0132\t.TST.Cell\022\'\n"
    "\017editing_storage\030\010 \002(\0132\016.TSP.Reference\022\036"
    "\n\026last_column_hit_by_tap\030\t \001(\r\"\240\001\n)Comma"
    "ndSetNumberOfHeadersOrFootersArchive\022)\n\006"
    "region\030\001 \002(\0162\031.TST.CommandRegionArchive\022"
    "\r\n\005count\030\002 \002(\r\022\020\n\010oldcount\030\003 \002(\r\022\'\n\005supe"
    "r\030\006 \002(\0132\030.TST.TableCommandArchive\"\253\002\n(Co"
    "mmandFixWPStylesInRowsOrColumnsArchive\022/"
    "\n\tdirection\030\001 \002(\0162\034.TST.CommandDirection"
    "Archive\022\r\n\005index\030\002 \002(\r\022*\n\rundo_cell_map\030"
    "\003 \002(\0132\023.TST.CellMapArchive\022*\n\rredo_cell_"
    "map\030\004 \002(\0132\023.TST.CellMapArchive\022\'\n\005super\030"
    "\006 \002(\0132\030.TST.TableCommandArchive\022\027\n\017refer"
    "ence_index\030\007 \002(\r\022\026\n\016inherit_styles\030\010 \002(\010"
    "\022\r\n\005count\030\t \001(\r\"\241\002\n)CommandFixStylesInHe"
    "adersOrFootersArchive\022)\n\006region\030\001 \002(\0162\031."
    "TST.CommandRegionArchive\022\022\n\nold_number\030\002"
    " \002(\r\022\022\n\nnew_number\030\003 \002(\r\022*\n\rredo_cell_ma"
    "p\030\004 \002(\0132\023.TST.CellMapArchive\022*\n\rundo_cel"
    "l_map\030\005 \002(\0132\023.TST.CellMapArchive\022\'\n\005supe"
    "r\030\006 \002(\0132\030.TST.TableCommandArchive\022 \n\010tex"
    "tundo\030\007 \001(\0132\016.TSP.Reference\"\325\002\n\032CommandS"
    "etTableNameArchive\022\024\n\014newtablename\030\001 \002(\t"
    "\022\024\n\014oldtablename\030\002 \002(\t\022 \n\010newstyle\030\003 \001(\013"
    "2\016.TSP.Reference\022 \n\010oldstyle\030\004 \001(\0132\016.TSP"
    ".Reference\022\'\n\005super\030\005 \002(\0132\030.TST.TableCom"
    "mandArchive\022\'\n\017old_shape_style\030\006 \001(\0132\016.T"
    "SP.Reference\022\'\n\017new_shape_style\030\007 \001(\0132\016."
    "TSP.Reference\022%\n\035old_table_name_border_e"
    "nabled\030\010 \001(\010\022%\n\035new_table_name_border_en"
    "abled\030\t \001(\010\"h\n!CommandSetTableNameEnable"
    "dArchive\022\032\n\022table_name_enabled\030\001 \002(\010\022\'\n\005"
    "super\030\003 \002(\0132\030.TST.TableCommandArchive\"\370\001"
    "\n\036CommandSetTableFontSizeArchive\022\'\n\005supe"
    "r\030\001 \002(\0132\030.TST.TableCommandArchive\022\024\n\014sca"
    "le_factor\030\t \002(\002\022*\n\rundo_cell_map\030\005 \001(\0132\023"
    ".TST.CellMapArchive\022*\n\rredo_cell_map\030\006 \001"
    "(\0132\023.TST.CellMapArchive\022\034\n\024resize_defaul"
    "t_cells\030\007 \001(\010\022!\n\ttext_undo\030\010 \001(\0132\016.TSP.R"
    "eference\"\205\002\n\036CommandSetTableFontNameArch"
    "ive\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommandArc"
    "hive\022\021\n\tfont_name\030\002 \002(\t\022\025\n\rold_font_name"
    "\030\003 \002(\t\022\025\n\rpreserve_face\030\005 \001(\010\022*\n\rundo_ce"
    "ll_map\030\006 \001(\0132\023.TST.CellMapArchive\022*\n\rred"
    "o_cell_map\030\007 \001(\0132\023.TST.CellMapArchive\022!\n"
    "\ttext_undo\030\010 \001(\0132\016.TSP.Reference\"\211\001\n Com"
    "mandSetTableNameHeightArchive\022\'\n\005super\030\001"
    " \002(\0132\030.TST.TableCommandArchive\022\035\n\025old_ta"
    "ble_name_height\030\002 \002(\001\022\035\n\025new_table_name_"
    "height\030\003 \002(\001\"\235\002\n\030CommandStyleCellsArchiv"
    "e\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommandArchi"
    "ve\0223\n\021format_properties\030\002 \001(\0132\030.TSP.Refe"
    "renceDictionary\022(\n\tselection\030\003 \002(\0132\025.TST"
    ".SelectionArchive\022*\n\rundo_cell_map\030\004 \002(\013"
    "2\023.TST.CellMapArchive\022*\n\rredo_cell_map\030\005"
    " \002(\0132\023.TST.CellMapArchive\022!\n\ttext_undo\030\006"
    " \001(\0132\016.TSP.Reference\"\234\002\n\035CommandSetFillP"
    "ropertyArchive\022\'\n\005super\030\001 \002(\0132\030.TST.Tabl"
    "eCommandArchive\022\036\n\004fill\030\002 \001(\0132\020.TSD.Fill"
    "Archive\0220\n\022cell_fill_stand_in\030\003 \001(\0132\024.TS"
    "T.CellFillStandIn\022(\n\tselection\030\004 \002(\0132\025.T"
    "ST.SelectionArchive\022*\n\rundo_cell_map\030\005 \002"
    "(\0132\023.TST.CellMapArchive\022*\n\rredo_cell_map"
    "\030\006 \002(\0132\023.TST.CellMapArchive\"\276\001\n\030CommandS"
    "tyleTableArchive\022\'\n\005super\030\001 \002(\0132\030.TST.Ta"
    "bleCommandArchive\0223\n\021format_properties\030\002"
    " \001(\0132\030.TSP.ReferenceDictionary\022!\n\told_st"
    "yle\030\003 \001(\0132\016.TSP.Reference\022!\n\tnew_style\030\004"
    " \001(\0132\016.TSP.Reference\"\376\002\n\027CommandFillCell"
    "sArchive\022\'\n\005super\030\001 \002(\0132\030.TST.TableComma"
    "ndArchive\022.\n\017sourceselection\030\002 \002(\0132\025.TST"
    ".SelectionArchive\022\'\n\017sourcecellrange\030\003 \002"
    "(\0132\016.TST.CellRange\022\'\n\017targetcellrange\030\004 "
    "\002(\0132\016.TST.CellRange\022*\n\rundo_cell_map\030\005 \002"
    "(\0132\023.TST.CellMapArchive\0220\n\rfillDirection"
    "\030\006 \002(\0162\031.TST.FillDirectionArchive\022.\n\017tar"
    "getselection\030\007 \002(\0132\025.TST.SelectionArchiv"
    "e\022*\n\rredo_cell_map\030\010 \002(\0132\023.TST.CellMapAr"
    "chive\"\305\001\n\031CommandReplaceTextArchive\022\033\n\006c"
    "ellID\030\001 \002(\0132\013.TST.CellID\022\032\n\007newcell\030\002 \002("
    "\0132\t.TST.Cell\022\032\n\007oldcell\030\003 \002(\0132\t.TST.Cell"
    "\022\'\n\005super\030\004 \002(\0132\030.TST.TableCommandArchiv"
    "e\022*\n\022child_command_undo\030\005 \001(\0132\016.TSP.Refe"
    "rence\"\231\001\n\034CommandReplaceAllTextArchive\022!"
    "\n\ttableInfo\030\001 \002(\0132\016.TSP.Reference\022*\n\rund"
    "o_cell_map\030\002 \002(\0132\023.TST.CellMapArchive\022*\n"
    "\rredo_cell_map\030\003 \002(\0132\023.TST.CellMapArchiv"
    "e\"\245\001\n\'CommandSetRepeatingHeaderEnabledAr"
    "chive\022 \n\030repeating_header_enabled\030\001 \002(\010\022"
    "/\n\tdirection\030\002 \002(\0162\034.TST.CommandDirectio"
    "nArchive\022\'\n\005super\030\003 \002(\0132\030.TST.TableComma"
    "ndArchive\"b\n\037CommandSetFiltersEnabledArc"
    "hive\022\026\n\016enable_filters\030\001 \002(\010\022\'\n\005super\030\002 "
    "\002(\0132\030.TST.TableCommandArchive\"\273\001\n!Comman"
    "dAddQuickFilterRulesArchive\022\'\n\005super\030\001 \002"
    "(\0132\030.TST.TableCommandArchive\022%\n\005rules\030\002 "
    "\003(\0132\026.TST.FilterRuleArchive\022\024\n\014filter_in"
    "dex\030\003 \002(\r\022\024\n\014rule_indices\030\004 \003(\r\022\032\n\022filte"
    "r_set_enabled\030\005 \002(\010\"\326\001\n\037CommandDeleteFil"
    "terRulesArchive\022\'\n\005super\030\001 \002(\0132\030.TST.Tab"
    "leCommandArchive\022*\n\nundo_rules\030\002 \003(\0132\026.T"
    "ST.FilterRuleArchive\022\024\n\014rule_indices\030\003 \003"
    "(\r\022\026\n\016filter_removed\030\004 \002(\010\022\024\n\014filter_ind"
    "ex\030\005 \002(\r\022\032\n\022filter_set_enabled\030\006 \002(\010\"\311\001\n"
    "\036CommandModifyFilterRuleArchive\022\'\n\005super"
    "\030\001 \002(\0132\030.TST.TableCommandArchive\022)\n\tundo"
    "_rule\030\002 \002(\0132\026.TST.FilterRuleArchive\022)\n\tr"
    "edo_rule\030\003 \002(\0132\026.TST.FilterRuleArchive\022\022"
    "\n\nrule_index\030\004 \002(\r\022\024\n\014filter_index\030\005 \002(\r"
    "\"\225\002\n\037CommandApplyStrokePresetArchive\022\'\n\005"
    "super\030\001 \002(\0132\030.TST.TableCommandArchive\022*\n"
    "\rundo_cell_map\030\002 \002(\0132\023.TST.CellMapArchiv"
    "e\022*\n\rredo_cell_map\030\004 \002(\0132\023.TST.CellMapAr"
    "chive\022(\n\tselection\030\003 \002(\0132\025.TST.Selection"
    "Archive\0221\n\022expanded_selection\030\006 \001(\0132\025.TS"
    "T.SelectionArchive\022\024\n\014preset_index\030\005 \002(\005"
    "\"\262\001\n!CommandAddTableStylePresetArchive\022\'"
    "\n\005super\030\001 \002(\0132\030.TST.TableCommandArchive\022"
    "\024\n\014preset_index\030\002 \002(\005\0223\n\014table_styles\030\003 "
    "\002(\0132\035.TST.TableStyleNetworkArchive\022\031\n\021se"
    "nd_notification\030\004 \002(\010\"\330\001\n$CommandRemoveT"
    "ableStylePresetArchive\022\"\n\005super\030\001 \002(\0132\023."
    "TSK.CommandArchive\022\035\n\005theme\030\002 \002(\0132\016.TSP."
    "Reference\022;\n\024removed_table_styles\030\003 \002(\0132"
    "\035.TST.TableStyleNetworkArchive\022\021\n\tpreset"
    "_id\030\004 \002(\005\022\035\n\025preset_index_in_theme\030\005 \002(\005"
    "\"\334\001\n%CommandReplaceTableStylePresetArchi"
    "ve\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\035"
    "\n\005theme\030\002 \002(\0132\016.TSP.Reference\0227\n\020old_tab"
    "le_styles\030\003 \002(\0132\035.TST.TableStyleNetworkA"
    "rchive\0227\n\020new_table_styles\030\004 \002(\0132\035.TST.T"
    "ableStyleNetworkArchive\"\326\005\n#CommandApply"
    "TableStylePresetArchive\022\'\n\005super\030\001 \002(\0132\030"
    ".TST.TableCommandArchive\022*\n\rundo_cell_ma"
    "p\030\002 \002(\0132\023.TST.CellMapArchive\022*\n\rredo_cel"
    "l_map\030\004 \002(\0132\023.TST.CellMapArchive\022\024\n\014pres"
    "et_index\030\005 \002(\005\0227\n\020old_table_styles\030\007 \002(\013"
    "2\035.TST.TableStyleNetworkArchive\022;\n\020new_t"
    "able_styles\030\010 \001(\0132\035.TST.TableStyleNetwor"
    "kArchiveB\002\030\001\022\030\n\020apply_clears_all\030\n \001(\010\022)"
    "\n\021font_size_command\030\013 \001(\0132\016.TSP.Referenc"
    "e\022\?\n\'set_style_apply_clears_all_flag_com"
    "mand\030\014 \001(\0132\016.TSP.Reference\022X\n\026row_style_"
    "index_tuples\030\r \003(\01328.TST.CommandApplyTab"
    "leStylePresetArchive.StyleIndexTuple\022X\n\026"
    "col_style_index_tuples\030\016 \003(\01328.TST.Comma"
    "ndApplyTableStylePresetArchive.StyleInde"
    "xTuple\032h\n\017StyleIndexTuple\022\r\n\005index\030\001 \002(\r"
    "\022\"\n\ncell_style\030\005 \001(\0132\016.TSP.Reference\022\"\n\n"
    "text_style\030\006 \001(\0132\016.TSP.Reference\"m\n(Comm"
    "andSetStyleApplyClearsAllFlagArchive\022\'\n\005"
    "super\030\001 \002(\0132\030.TST.TableCommandArchive\022\030\n"
    "\020apply_clears_all\030\002 \002(\010\"\224\002\n\037CommandApply"
    "ThemeToTableArchive\022\'\n\005super\030\001 \002(\0132\030.TST"
    ".TableCommandArchive\022*\n\rundo_cell_map\030\002 "
    "\002(\0132\023.TST.CellMapArchive\022*\n\rredo_cell_ma"
    "p\030\004 \002(\0132\023.TST.CellMapArchive\0227\n\020old_tabl"
    "e_styles\030\007 \002(\0132\035.TST.TableStyleNetworkAr"
    "chive\0227\n\020new_table_styles\030\010 \002(\0132\035.TST.Ta"
    "bleStyleNetworkArchive\"\201\001\n%CommandApplyT"
    "hemeChildForTableArchive\0221\n\005super\030\001 \002(\0132"
    "\".TSS.ApplyThemeChildCommandArchive\022%\n\ra"
    "pply_command\030\002 \002(\0132\016.TSP.Reference\"\224\003\n C"
    "ommandToggleTextPropertyArchive\022\'\n\005super"
    "\030\001 \002(\0132\030.TST.TableCommandArchive\022(\n\tsele"
    "ction\030\002 \002(\0132\025.TST.SelectionArchive\022\020\n\010pr"
    "operty\030\003 \002(\r\022*\n\rundo_cell_map\030\004 \002(\0132\023.TS"
    "T.CellMapArchive\022*\n\rredo_cell_map\030\005 \002(\0132"
    "\023.TST.CellMapArchive\022$\n\021default_body_cel"
    "l\030\006 \002(\0132\t.TST.Cell\022\"\n\017default_hr_cell\030\007 "
    "\002(\0132\t.TST.Cell\022\"\n\017default_hc_cell\030\010 \002(\0132"
    "\t.TST.Cell\022\"\n\017default_fr_cell\030\t \002(\0132\t.TS"
    "T.Cell\022!\n\ttext_undo\030\n \001(\0132\016.TSP.Referenc"
    "e\"\316\001\n!CommandResetFillPropertyToDefault\022"
    "\'\n\005super\030\001 \002(\0132\030.TST.TableCommandArchive"
    "\022(\n\tselection\030\002 \002(\0132\025.TST.SelectionArchi"
    "ve\022*\n\rundo_cell_map\030\004 \002(\0132\023.TST.CellMapA"
    "rchive\022*\n\rredo_cell_map\030\005 \002(\0132\023.TST.Cell"
    "MapArchive\"\331\001\n,CommandSetSingleNumberFor"
    "matParameterArchive\022\'\n\005super\030\001 \002(\0132\030.TST"
    ".TableCommandArchive\022(\n\tselection\030\002 \002(\0132"
    "\025.TST.SelectionArchive\022*\n\rundo_cell_map\030"
    "\003 \002(\0132\023.TST.CellMapArchive\022*\n\rredo_cell_"
    "map\030\004 \002(\0132\023.TST.CellMapArchive\"g\n\025Comman"
    "dSetBaseArchive\022@\n\005super\030\001 \002(\01321.TST.Com"
    "mandSetSingleNumberFormatParameterArchiv"
    "e\022\014\n\004base\030\002 \002(\r\"t\n\033CommandSetBasePlacesA"
    "rchive\022@\n\005super\030\001 \002(\01321.TST.CommandSetSi"
    "ngleNumberFormatParameterArchive\022\023\n\013base"
    "_places\030\002 \002(\r\"\202\001\n!CommandSetBaseUseMinus"
    "SignArchive\022@\n\005super\030\001 \002(\01321.TST.Command"
    "SetSingleNumberFormatParameterArchive\022\033\n"
    "\023base_use_minus_sign\030\002 \002(\010\"\211\001\n\037CommandSe"
    "tControlMinimumArchive\022@\n\005super\030\001 \002(\01321."
    "TST.CommandSetSingleNumberFormatParamete"
    "rArchive\022\017\n\007minimum\030\002 \002(\001\022\023\n\013format_type"
    "\030\003 \002(\r\"\211\001\n\037CommandSetControlMaximumArchi"
    "ve\022@\n\005super\030\001 \002(\01321.TST.CommandSetSingle"
    "NumberFormatParameterArchive\022\017\n\007maximum\030"
    "\002 \002(\001\022\023\n\013format_type\030\003 \002(\r\"\215\001\n!CommandSe"
    "tControlIncrementArchive\022@\n\005super\030\001 \002(\0132"
    "1.TST.CommandSetSingleNumberFormatParame"
    "terArchive\022\021\n\tincrement\030\002 \002(\001\022\023\n\013format_"
    "type\030\003 \002(\r\"x\n\035CommandSetCurrencyCodeArch"
    "ive\022@\n\005super\030\001 \002(\01321.TST.CommandSetSingl"
    "eNumberFormatParameterArchive\022\025\n\rcurrenc"
    "y_code\030\002 \002(\t\"\200\001\n!CommandSetFractionAccur"
    "acyArchive\022@\n\005super\030\001 \002(\01321.TST.CommandS"
    "etSingleNumberFormatParameterArchive\022\031\n\021"
    "fraction_accuracy\030\002 \002(\r\"z\n6CommandSetMul"
    "tipleChoiceListFormatForEditedItemArchiv"
    "e\022@\n\005super\030\001 \002(\01321.TST.CommandSetSingleN"
    "umberFormatParameterArchive\"z\n6CommandSe"
    "tMultipleChoiceListFormatForDeleteItemAr"
    "chive\022@\n\005super\030\001 \002(\01321.TST.CommandSetSin"
    "gleNumberFormatParameterArchive\"{\n7Comma"
    "ndSetMultipleChoiceListFormatForReorderI"
    "temArchive\022@\n\005super\030\001 \002(\01321.TST.CommandS"
    "etSingleNumberFormatParameterArchive\"|\n8"
    "CommandSetMultipleChoiceListFormatForIni"
    "tialValueArchive\022@\n\005super\030\001 \002(\01321.TST.Co"
    "mmandSetSingleNumberFormatParameterArchi"
    "ve\"\207\001\n$CommandSetNegativeNumberStyleArch"
    "ive\022@\n\005super\030\001 \002(\01321.TST.CommandSetSingl"
    "eNumberFormatParameterArchive\022\035\n\025negativ"
    "e_number_style\030\002 \002(\r\"\373\001\n\037CommandSetExpli"
    "citFormatArchive\022\'\n\005super\030\001 \002(\0132\030.TST.Ta"
    "bleCommandArchive\022(\n\tselection\030\002 \002(\0132\025.T"
    "ST.SelectionArchive\022-\n\013cell_format\030\003 \002(\013"
    "2\030.TSK.FormatStructArchive\022*\n\rundo_cell_"
    "map\030\004 \002(\0132\023.TST.CellMapArchive\022*\n\rredo_c"
    "ell_map\030\005 \002(\0132\023.TST.CellMapArchive\"\202\001\n&C"
    "ommandSetNumberOfDecimalPlacesArchive\022@\n"
    "\005super\030\001 \002(\01321.TST.CommandSetSingleNumbe"
    "rFormatParameterArchive\022\026\n\016decimal_place"
    "s\030\002 \002(\r\"c\n\037CommandSetDateTimeFormatArchi"
    "ve\022@\n\005super\030\001 \002(\01321.TST.CommandSetSingle"
    "NumberFormatParameterArchive\"\215\001\n\'Command"
    "SetShowThousandsSeparatorArchive\022@\n\005supe"
    "r\030\001 \002(\01321.TST.CommandSetSingleNumberForm"
    "atParameterArchive\022 \n\030show_thousands_sep"
    "arator\030\002 \002(\010\"\205\001\n#CommandSetUseAccounting"
    "StyleArchive\022@\n\005super\030\001 \002(\01321.TST.Comman"
    "dSetSingleNumberFormatParameterArchive\022\034"
    "\n\024use_accounting_style\030\002 \002(\010\"\303\002\n\026Command"
    "MoveRowsArchive\022\'\n\005super\030\001 \002(\0132\030.TST.Tab"
    "leCommandArchive\022(\n\tselection\030\002 \001(\0132\025.TS"
    "T.SelectionArchive\022\027\n\017start_row_index\030\003 "
    "\002(\r\022\026\n\016dest_row_index\030\004 \002(\r\022\026\n\016number_of"
    "_rows\030\005 \002(\r\022/\n\027formula_rewrite_command\030\007"
    " \001(\0132\016.TSP.Reference\022$\n\014show_command\030\010 \001"
    "(\0132\016.TSP.Reference\0226\n\036unmerge_invalid_ra"
    "nges_command\030\t \001(\0132\016.TSP.Reference\"\227\002\n\031C"
    "ommandMoveColumnsArchive\022\'\n\005super\030\001 \002(\0132"
    "\030.TST.TableCommandArchive\022(\n\tselection\030\002"
    " \001(\0132\025.TST.SelectionArchive\022\032\n\022start_col"
    "umn_index\030\003 \002(\r\022\031\n\021dest_column_index\030\004 \002"
    "(\r\022\031\n\021number_of_columns\030\005 \002(\r\022/\n\027formula"
    "_rewrite_command\030\007 \001(\0132\016.TSP.Reference\022$"
    "\n\014show_command\030\010 \001(\0132\016.TSP.Reference\"\233\001\n"
    "\022CommandSortArchive\022\'\n\005super\030\001 \002(\0132\030.TST"
    ".TableCommandArchive\022+\n\007mapping\030\005 \002(\0132\032."
    "TSK.ShuffleMappingArchive\022/\n\027formula_rew"
    "rite_command\030\007 \001(\0132\016.TSP.Reference\"\372\001\n$C"
    "ommandRewriteFormulasForSortArchive\022\'\n\005s"
    "uper\030\001 \002(\0132\030.TST.TableCommandArchive\0221\n\013"
    "formula_map\030\002 \002(\0132\034.TSCE.OwnerFormulaMap"
    "Archive\0220\n\014sort_mapping\030\003 \002(\0132\032.TSK.Shuf"
    "fleMappingArchive\022,\n\017sorted_table_id\030\004 \002"
    "(\0132\023.TSCE.CFUUIDArchive\022\026\n\016explode_range"
    "s\030\005 \002(\010\"\277\001\n-CommandRewriteFormulasForTec"
    "tonicShiftArchive\022\'\n\005super\030\001 \002(\0132\030.TST.T"
    "ableCommandArchive\0221\n\013formula_map\030\002 \002(\0132"
    "\034.TSCE.OwnerFormulaMapArchive\0222\n\016tectoni"
    "c_shift\030\003 \002(\0132\032.TSCE.TectonicShiftArchiv"
    "e\"\352\001\n$CommandRewriteFormulasForMoveArchi"
    "ve\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommandArch"
    "ive\0221\n\013formula_map\030\002 \002(\0132\034.TSCE.OwnerFor"
    "mulaMapArchive\0223\n\016from_reference\030\006 \002(\0132\033"
    ".TSCE.RangeReferenceArchive\0221\n\014to_refere"
    "nce\030\007 \002(\0132\033.TSCE.RangeReferenceArchive\"\342"
    "\001\n)CommandRewriteFormulasForCellMergeArc"
    "hive\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommandAr"
    "chive\0221\n\013formula_map\030\002 \002(\0132\034.TSCE.OwnerF"
    "ormulaMapArchive\0222\n\014merged_range\030\003 \002(\0132\034"
    ".TSCE.RangeCoordinateArchive\022%\n\010table_id"
    "\030\004 \002(\0132\023.TSCE.CFUUIDArchive\"\\\n1CommandRe"
    "writeFilterFormulasForTableResizeArchive"
    "\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommandArchiv"
    "e\"\266\001\n3CommandRewriteFilterFormulasForTec"
    "tonicShiftArchive\022\'\n\005super\030\001 \002(\0132\030.TST.T"
    "ableCommandArchive\022\"\n\nfilter_set\030\002 \002(\0132\016"
    ".TSP.Reference\0222\n\016tectonic_shift\030\003 \002(\0132\032"
    ".TSCE.TectonicShiftArchive\"\331\001\n*CommandRe"
    "writeFilterFormulasForSortArchive\022\'\n\005sup"
    "er\030\001 \002(\0132\030.TST.TableCommandArchive\022\"\n\nfi"
    "lter_set\030\002 \002(\0132\016.TSP.Reference\0220\n\014sort_m"
    "apping\030\003 \002(\0132\032.TSK.ShuffleMappingArchive"
    "\022,\n\017sorted_table_id\030\004 \002(\0132\023.TSCE.CFUUIDA"
    "rchive\"\230\002\n6CommandRewriteConditionalStyl"
    "esForTectonicShiftArchive\022\'\n\005super\030\001 \002(\013"
    "2\030.TST.TableCommandArchive\0222\n\016tectonic_s"
    "hift\030\002 \002(\0132\032.TSCE.TectonicShiftArchive\022;"
    "\n\020cells_to_rewrite\030\003 \001(\0132!.TSCE.CellCoor"
    "dinateVectorArchive\022D\n\026conditional_style"
    "_sets\030\004 \001(\0132$.TSCE.CellCoordinateObjectM"
    "apArchive\"\273\002\n-CommandRewriteConditionalS"
    "tylesForSortArchive\022\'\n\005super\030\001 \002(\0132\030.TST"
    ".TableCommandArchive\0220\n\014sort_mapping\030\002 \002"
    "(\0132\032.TSK.ShuffleMappingArchive\022,\n\017sorted"
    "_table_id\030\003 \002(\0132\023.TSCE.CFUUIDArchive\022;\n\020"
    "cells_to_rewrite\030\004 \001(\0132!.TSCE.CellCoordi"
    "nateVectorArchive\022D\n\026conditional_style_s"
    "ets\030\005 \001(\0132$.TSCE.CellCoordinateObjectMap"
    "Archive\"\324\002\n2CommandRewriteConditionalSty"
    "lesForRangeMoveArchive\022\'\n\005super\030\001 \002(\0132\030."
    "TST.TableCommandArchive\0229\n\024from_range_re"
    "ference\030\007 \001(\0132\033.TSCE.RangeReferenceArchi"
    "ve\0227\n\022to_range_reference\030\010 \001(\0132\033.TSCE.Ra"
    "ngeReferenceArchive\022;\n\020cells_to_rewrite\030"
    "\005 \001(\0132!.TSCE.CellCoordinateVectorArchive"
    "\022D\n\026conditional_style_sets\030\006 \001(\0132$.TSCE."
    "CellCoordinateObjectMapArchive\"\302\002\n2Comma"
    "ndRewriteConditionalStylesForCellMergeAr"
    "chive\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommandA"
    "rchive\022,\n\017merged_table_id\030\002 \002(\0132\023.TSCE.C"
    "FUUIDArchive\0222\n\014merged_range\030\003 \002(\0132\034.TSC"
    "E.RangeCoordinateArchive\022;\n\020cells_to_rew"
    "rite\030\004 \001(\0132!.TSCE.CellCoordinateVectorAr"
    "chive\022D\n\026conditional_style_sets\030\005 \001(\0132$."
    "TSCE.CellCoordinateObjectMapArchive\"\326\002\n\032"
    "CommandMergeUnmergeArchive\022\'\n\005super\030\001 \002("
    "\0132\030.TST.TableCommandArchive\022-\n\014merge_act"
    "ion\030\002 \002(\0162\027.TST.MergeActionArchive\022(\n\tse"
    "lection\030\003 \002(\0132\025.TST.SelectionArchive\022*\n\r"
    "undo_cell_map\030\004 \002(\0132\023.TST.CellMapArchive"
    "\022*\n\rredo_cell_map\030\005 \002(\0132\023.TST.CellMapArc"
    "hive\022(\n\020old_merge_ranges\030\010 \001(\0132\016.TSP.Ref"
    "erence\0224\n\034undo_formula_rewrite_command\030\t"
    " \001(\0132\016.TSP.Reference\"\204\002\n\026CommandHideShow"
    "Archive\022\'\n\005super\030\001 \002(\0132\030.TST.TableComman"
    "dArchive\022/\n\tdirection\030\002 \002(\0162\034.TST.Comman"
    "dDirectionArchive\0224\n\020hide_show_action\030\003 "
    "\002(\0162\032.TST.HideShowActionArchive\022\025\n\rhidin"
    "g_action\030\004 \002(\r\022(\n\021elements_affected\030\005 \002("
    "\0132\r.TSP.IndexSet\022\031\n\021old_hiding_states\030\007 "
    "\003(\r\"\335\002\n\037TableInfoGeometryCommandArchive\022"
    "\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\037\n\014s"
    "cale_factor\030\002 \002(\0132\t.TSP.Size\022\"\n\ntable_in"
    "fo\030\003 \001(\0132\016.TSP.Reference\022*\n\014new_geometry"
    "\030\004 \001(\0132\024.TSD.GeometryArchive\022*\n\014old_geom"
    "etry\030\005 \001(\0132\024.TSD.GeometryArchive\022\034\n\024turn"
    "_off_auto_resize\030\006 \001(\010\022,\n$should_clear_o"
    "bject_placeholder_flag\030\007 \001(\010\022-\n%did_matc"
    "h_object_placeholder_geometry\030\010 \001(\010\"\263\002\n!"
    "FormulaEditingCommandGroupArchive\0222\n\005sup"
    "er\030\001 \002(\0132#.TSK.ProgressiveCommandGroupAr"
    "chive\022\032\n\022undoSelectionValid\030\002 \002(\010\022\032\n\022und"
    "oSelectionStart\030\003 \002(\r\022\033\n\023undoSelectionLe"
    "ngth\030\004 \002(\r\022\027\n\017undoActiveToken\030\005 \002(\r\022\032\n\022r"
    "edoSelectionValid\030\006 \002(\010\022\032\n\022redoSelection"
    "Start\030\007 \002(\r\022\033\n\023redoSelectionLength\030\010 \002(\r"
    "\022\027\n\017redoActiveToken\030\t \002(\r\"\254\002\n-FormulaEdi"
    "tingCommandSelectionBehaviorArchive\022\032\n\022u"
    "ndoSelectionValid\030\002 \001(\010\022\032\n\022undoSelection"
    "Start\030\003 \001(\r\022\033\n\023undoSelectionLength\030\004 \001(\r"
    "\022\027\n\017undoActiveToken\030\005 \001(\r\022\032\n\022redoSelecti"
    "onValid\030\006 \001(\010\022\032\n\022redoSelectionStart\030\007 \001("
    "\r\022\033\n\023redoSelectionLength\030\010 \001(\r\022\027\n\017redoAc"
    "tiveToken\030\t \001(\r\022\037\n\007storage\030\n \001(\0132\016.TSP.R"
    "eference\"\246\002\n,UndoRedoStateCommandSelecti"
    "onBehaviorArchive\0222\n\026before_undo_redo_st"
    "ate\030\001 \001(\0132\016.TSP.ReferenceB\002\030\001\0221\n\025after_u"
    "ndo_redo_state\030\002 \001(\0132\016.TSP.ReferenceB\002\030\001"
    "\022\"\n\ntable_info\030\003 \001(\0132\016.TSP.Reference\0225\n\026"
    "before_table_selection\030\004 \001(\0132\025.TST.Selec"
    "tionArchive\0224\n\025after_table_selection\030\006 \001"
    "(\0132\025.TST.SelectionArchive\"\327\001\n$TableComma"
    "ndSelectionBehaviorArchive\0225\n\026before_tab"
    "le_selection\030\001 \001(\0132\025.TST.SelectionArchiv"
    "e\0224\n\025after_table_selection\030\002 \001(\0132\025.TST.S"
    "electionArchive\022\"\n\ntable_info\030\003 \001(\0132\016.TS"
    "P.Reference\022\036\n\026last_column_hit_by_tap\030\004 "
    "\001(\r\"d\n(DisableTableNameSelectionBehavior"
    "Archive\0228\n\005super\030\001 \002(\0132).TST.TableComman"
    "dSelectionBehaviorArchive\"\301\001\n\036CommandApp"
    "lyCellCommentArchive\022\'\n\005super\030\001 \002(\0132\030.TS"
    "T.TableCommandArchive\022\034\n\007cell_id\030\002 \002(\0132\013"
    ".TST.CellID\022+\n\023old_comment_storage\030\003 \001(\013"
    "2\016.TSP.Reference\022+\n\023new_comment_storage\030"
    "\004 \001(\0132\016.TSP.Reference\"\323\001\n&CommandApplyCo"
    "nditionalStyleSetArchive\022\'\n\005super\030\001 \002(\0132"
    "\030.TST.TableCommandArchive\022(\n\tselection\030\002"
    " \002(\0132\025.TST.SelectionArchive\022*\n\rundo_cell"
    "_map\030\003 \002(\0132\023.TST.CellMapArchive\022*\n\rredo_"
    "cell_map\030\004 \002(\0132\023.TST.CellMapArchive\"`\n$C"
    "ommandSetFormulaTokenizationArchive\022\"\n\005s"
    "uper\030\001 \002(\0132\023.TSK.CommandArchive\022\024\n\014token"
    "ization\030\002 \002(\010\"p\n\036CommandSetFilterEnabled"
    "Archive\022\'\n\005super\030\001 \002(\0132\030.TST.TableComman"
    "dArchive\022\024\n\014filter_index\030\002 \002(\r\022\017\n\007enable"
    "d\030\004 \002(\010\"\210\001\n\"CommandSetFilterRuleEnabledA"
    "rchive\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommand"
    "Archive\022\024\n\014filter_index\030\002 \002(\r\022\022\n\nrule_in"
    "dex\030\003 \002(\r\022\017\n\007enabled\030\004 \002(\010\"\315\001\n\036CommandSe"
    "tFilterSetTypeArchive\022\'\n\005super\030\001 \002(\0132\030.T"
    "ST.TableCommandArchive\022@\n\023old_filter_set"
    "_type\030\002 \002(\0162#.TST.FilterSetArchive.Filte"
    "rSetType\022@\n\023new_filter_set_type\030\003 \002(\0162#."
    "TST.FilterSetArchive.FilterSetType\"\274\001\n\035C"
    "ommandSetStyleNetworkArchive\022\'\n\005super\030\001 "
    "\002(\0132\030.TST.TableCommandArchive\0228\n\021old_sty"
    "le_network\030\002 \002(\0132\035.TST.TableStyleNetwork"
    "Archive\0228\n\021new_style_network\030\003 \002(\0132\035.TST"
    ".TableStyleNetworkArchive\"\306\001\n\031CommandMut"
    "ateCellsArchive\022\'\n\005super\030\001 \002(\0132\030.TST.Tab"
    "leCommandArchive\022*\n\rundo_cell_map\030\002 \002(\0132"
    "\023.TST.CellMapArchive\022*\n\rredo_cell_map\030\003 "
    "\002(\0132\023.TST.CellMapArchive\022(\n\tselection\030\004 "
    "\001(\0132\025.TST.SelectionArchive\"\200\001\n)CommandDi"
    "sableFilterRulesForColumnArchive\022\'\n\005supe"
    "r\030\001 \002(\0132\030.TST.TableCommandArchive\022\024\n\014col"
    "umn_index\030\002 \002(\r\022\024\n\014rule_indices\030\003 \003(\r\"\343\001"
    "\n\032CommandSetTextStyleArchive\022\'\n\005super\030\001 "
    "\002(\0132\030.TST.TableCommandArchive\022\037\n\006region\030"
    "\002 \002(\0132\017.TST.CellRegion\022*\n\rundo_cell_map\030"
    "\003 \001(\0132\023.TST.CellMapArchive\022*\n\rredo_cell_"
    "map\030\004 \001(\0132\023.TST.CellMapArchive\022#\n\013subcom"
    "mands\030\005 \001(\0132\016.TSP.Reference\"N\n#CommandNo"
    "tifyForTransformingArchive\022\'\n\005super\030\001 \002("
    "\0132\030.TST.TableCommandArchive\"\330\001\n CommandS"
    "etStorageLanguageArchive\022\"\n\005super\030\001 \002(\0132"
    "\023.TSK.CommandArchive\022\037\n\007storage\030\002 \002(\0132\016."
    "TSP.Reference\022\020\n\010language\030\003 \002(\t\022\026\n\016range"
    "_location\030\004 \002(\r\022\024\n\014range_length\030\005 \002(\r\022/\n"
    "\020undo_transaction\030\006 \001(\0132\025.TSWP.UndoTrans"
    "action\"\255\001\n\032CommandSetSortOrderArchive\022\'\n"
    "\005super\030\001 \002(\0132\030.TST.TableCommandArchive\0222"
    "\n\016old_sort_order\030\002 \001(\0132\032.TST.TableSortOr"
    "derArchive\0222\n\016new_sort_order\030\003 \001(\0132\032.TST"
    ".TableSortOrderArchive\"\365\001\n.CommandRewrit"
    "eSortOrderForTectonicShiftArchive\022\'\n\005sup"
    "er\030\001 \002(\0132\030.TST.TableCommandArchive\0222\n\016te"
    "ctonic_shift\030\002 \002(\0132\032.TSCE.TectonicShiftA"
    "rchive\0222\n\016old_sort_order\030\003 \001(\0132\032.TST.Tab"
    "leSortOrderArchive\0222\n\016new_sort_order\030\004 \001"
    "(\0132\032.TST.TableSortOrderArchive\"\352\001\n%Comma"
    "ndRewriteSortOrderForSortArchive\022\'\n\005supe"
    "r\030\001 \002(\0132\030.TST.TableCommandArchive\0220\n\014sor"
    "t_mapping\030\002 \002(\0132\032.TSK.ShuffleMappingArch"
    "ive\0222\n\016old_sort_order\030\003 \001(\0132\032.TST.TableS"
    "ortOrderArchive\0222\n\016new_sort_order\030\004 \001(\0132"
    "\032.TST.TableSortOrderArchive\"\277\001\n,CommandR"
    "ewriteSortOrderForTableResizeArchive\022\'\n\005"
    "super\030\001 \002(\0132\030.TST.TableCommandArchive\0222\n"
    "\016old_sort_order\030\002 \001(\0132\032.TST.TableSortOrd"
    "erArchive\0222\n\016new_sort_order\030\003 \001(\0132\032.TST."
    "TableSortOrderArchive*@\n\027CommandDirectio"
    "nArchive\022\020\n\014directionRow\020\000\022\023\n\017directionC"
    "olumn\020\001*h\n\024CommandRegionArchive\022\016\n\nbodyR"
    "egion\020\000\022\023\n\017headerRowRegion\020\001\022\026\n\022headerCo"
    "lumnRegion\020\002\022\023\n\017footerRowRegion\020\003", 24193);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TSTCommandArchives.proto", &protobuf_RegisterTypes);
  TableCommandArchive::default_instance_ = new TableCommandArchive();
  CommandApplyCellDiffArchive::default_instance_ = new CommandApplyCellDiffArchive();
  CommandChangeFreezeHeaderStateArchive::default_instance_ = new CommandChangeFreezeHeaderStateArchive();
  CommandDeleteCellsArchive::default_instance_ = new CommandDeleteCellsArchive();
  CommandDeleteCellContentsArchive::default_instance_ = new CommandDeleteCellContentsArchive();
  CommandSetMultipleCellsArchive::default_instance_ = new CommandSetMultipleCellsArchive();
  CommandSetMultipleCellsCustomArchive::default_instance_ = new CommandSetMultipleCellsCustomArchive();
  CommandSetMultipleCellsMultipleChoiceListArchive::default_instance_ = new CommandSetMultipleCellsMultipleChoiceListArchive();
  CommandCoerceMultipleCellsArchive::default_instance_ = new CommandCoerceMultipleCellsArchive();
  CommandSetControlCellsDisplayNumberFormatArchive::default_instance_ = new CommandSetControlCellsDisplayNumberFormatArchive();
  CommandSetAutomaticFormatArchive::default_instance_ = new CommandSetAutomaticFormatArchive();
  CommandSetAutomaticDurationUnitsArchive::default_instance_ = new CommandSetAutomaticDurationUnitsArchive();
  CommandReplaceCustomFormatArchive::default_instance_ = new CommandReplaceCustomFormatArchive();
  CommandInsertColumnsOrRowsArchive::default_instance_ = new CommandInsertColumnsOrRowsArchive();
  CommandInsertColumnsOrRowsArchive_StyleIndexPair::default_instance_ = new CommandInsertColumnsOrRowsArchive_StyleIndexPair();
  CommandPasteArchive::default_instance_ = new CommandPasteArchive();
  CommandRemoveColumnsOrRowsArchive::default_instance_ = new CommandRemoveColumnsOrRowsArchive();
  CommandResizeColumnOrRowArchive::default_instance_ = new CommandResizeColumnOrRowArchive();
  CommandSetCellArchive::default_instance_ = new CommandSetCellArchive();
  CommandTextPreflightInsertCellArchive::default_instance_ = new CommandTextPreflightInsertCellArchive();
  CommandPostflightSetCellArchive::default_instance_ = new CommandPostflightSetCellArchive();
  CommandSetNumberOfHeadersOrFootersArchive::default_instance_ = new CommandSetNumberOfHeadersOrFootersArchive();
  CommandFixWPStylesInRowsOrColumnsArchive::default_instance_ = new CommandFixWPStylesInRowsOrColumnsArchive();
  CommandFixStylesInHeadersOrFootersArchive::default_instance_ = new CommandFixStylesInHeadersOrFootersArchive();
  CommandSetTableNameArchive::default_instance_ = new CommandSetTableNameArchive();
  CommandSetTableNameEnabledArchive::default_instance_ = new CommandSetTableNameEnabledArchive();
  CommandSetTableFontSizeArchive::default_instance_ = new CommandSetTableFontSizeArchive();
  CommandSetTableFontNameArchive::default_instance_ = new CommandSetTableFontNameArchive();
  CommandSetTableNameHeightArchive::default_instance_ = new CommandSetTableNameHeightArchive();
  CommandStyleCellsArchive::default_instance_ = new CommandStyleCellsArchive();
  CommandSetFillPropertyArchive::default_instance_ = new CommandSetFillPropertyArchive();
  CommandStyleTableArchive::default_instance_ = new CommandStyleTableArchive();
  CommandFillCellsArchive::default_instance_ = new CommandFillCellsArchive();
  CommandReplaceTextArchive::default_instance_ = new CommandReplaceTextArchive();
  CommandReplaceAllTextArchive::default_instance_ = new CommandReplaceAllTextArchive();
  CommandSetRepeatingHeaderEnabledArchive::default_instance_ = new CommandSetRepeatingHeaderEnabledArchive();
  CommandSetFiltersEnabledArchive::default_instance_ = new CommandSetFiltersEnabledArchive();
  CommandAddQuickFilterRulesArchive::default_instance_ = new CommandAddQuickFilterRulesArchive();
  CommandDeleteFilterRulesArchive::default_instance_ = new CommandDeleteFilterRulesArchive();
  CommandModifyFilterRuleArchive::default_instance_ = new CommandModifyFilterRuleArchive();
  CommandApplyStrokePresetArchive::default_instance_ = new CommandApplyStrokePresetArchive();
  CommandAddTableStylePresetArchive::default_instance_ = new CommandAddTableStylePresetArchive();
  CommandRemoveTableStylePresetArchive::default_instance_ = new CommandRemoveTableStylePresetArchive();
  CommandReplaceTableStylePresetArchive::default_instance_ = new CommandReplaceTableStylePresetArchive();
  CommandApplyTableStylePresetArchive::default_instance_ = new CommandApplyTableStylePresetArchive();
  CommandApplyTableStylePresetArchive_StyleIndexTuple::default_instance_ = new CommandApplyTableStylePresetArchive_StyleIndexTuple();
  CommandSetStyleApplyClearsAllFlagArchive::default_instance_ = new CommandSetStyleApplyClearsAllFlagArchive();
  CommandApplyThemeToTableArchive::default_instance_ = new CommandApplyThemeToTableArchive();
  CommandApplyThemeChildForTableArchive::default_instance_ = new CommandApplyThemeChildForTableArchive();
  CommandToggleTextPropertyArchive::default_instance_ = new CommandToggleTextPropertyArchive();
  CommandResetFillPropertyToDefault::default_instance_ = new CommandResetFillPropertyToDefault();
  CommandSetSingleNumberFormatParameterArchive::default_instance_ = new CommandSetSingleNumberFormatParameterArchive();
  CommandSetBaseArchive::default_instance_ = new CommandSetBaseArchive();
  CommandSetBasePlacesArchive::default_instance_ = new CommandSetBasePlacesArchive();
  CommandSetBaseUseMinusSignArchive::default_instance_ = new CommandSetBaseUseMinusSignArchive();
  CommandSetControlMinimumArchive::default_instance_ = new CommandSetControlMinimumArchive();
  CommandSetControlMaximumArchive::default_instance_ = new CommandSetControlMaximumArchive();
  CommandSetControlIncrementArchive::default_instance_ = new CommandSetControlIncrementArchive();
  CommandSetCurrencyCodeArchive::default_instance_ = new CommandSetCurrencyCodeArchive();
  CommandSetFractionAccuracyArchive::default_instance_ = new CommandSetFractionAccuracyArchive();
  CommandSetMultipleChoiceListFormatForEditedItemArchive::default_instance_ = new CommandSetMultipleChoiceListFormatForEditedItemArchive();
  CommandSetMultipleChoiceListFormatForDeleteItemArchive::default_instance_ = new CommandSetMultipleChoiceListFormatForDeleteItemArchive();
  CommandSetMultipleChoiceListFormatForReorderItemArchive::default_instance_ = new CommandSetMultipleChoiceListFormatForReorderItemArchive();
  CommandSetMultipleChoiceListFormatForInitialValueArchive::default_instance_ = new CommandSetMultipleChoiceListFormatForInitialValueArchive();
  CommandSetNegativeNumberStyleArchive::default_instance_ = new CommandSetNegativeNumberStyleArchive();
  CommandSetExplicitFormatArchive::default_instance_ = new CommandSetExplicitFormatArchive();
  CommandSetNumberOfDecimalPlacesArchive::default_instance_ = new CommandSetNumberOfDecimalPlacesArchive();
  CommandSetDateTimeFormatArchive::default_instance_ = new CommandSetDateTimeFormatArchive();
  CommandSetShowThousandsSeparatorArchive::default_instance_ = new CommandSetShowThousandsSeparatorArchive();
  CommandSetUseAccountingStyleArchive::default_instance_ = new CommandSetUseAccountingStyleArchive();
  CommandMoveRowsArchive::default_instance_ = new CommandMoveRowsArchive();
  CommandMoveColumnsArchive::default_instance_ = new CommandMoveColumnsArchive();
  CommandSortArchive::default_instance_ = new CommandSortArchive();
  CommandRewriteFormulasForSortArchive::default_instance_ = new CommandRewriteFormulasForSortArchive();
  CommandRewriteFormulasForTectonicShiftArchive::default_instance_ = new CommandRewriteFormulasForTectonicShiftArchive();
  CommandRewriteFormulasForMoveArchive::default_instance_ = new CommandRewriteFormulasForMoveArchive();
  CommandRewriteFormulasForCellMergeArchive::default_instance_ = new CommandRewriteFormulasForCellMergeArchive();
  CommandRewriteFilterFormulasForTableResizeArchive::default_instance_ = new CommandRewriteFilterFormulasForTableResizeArchive();
  CommandRewriteFilterFormulasForTectonicShiftArchive::default_instance_ = new CommandRewriteFilterFormulasForTectonicShiftArchive();
  CommandRewriteFilterFormulasForSortArchive::default_instance_ = new CommandRewriteFilterFormulasForSortArchive();
  CommandRewriteConditionalStylesForTectonicShiftArchive::default_instance_ = new CommandRewriteConditionalStylesForTectonicShiftArchive();
  CommandRewriteConditionalStylesForSortArchive::default_instance_ = new CommandRewriteConditionalStylesForSortArchive();
  CommandRewriteConditionalStylesForRangeMoveArchive::default_instance_ = new CommandRewriteConditionalStylesForRangeMoveArchive();
  CommandRewriteConditionalStylesForCellMergeArchive::default_instance_ = new CommandRewriteConditionalStylesForCellMergeArchive();
  CommandMergeUnmergeArchive::default_instance_ = new CommandMergeUnmergeArchive();
  CommandHideShowArchive::default_instance_ = new CommandHideShowArchive();
  TableInfoGeometryCommandArchive::default_instance_ = new TableInfoGeometryCommandArchive();
  FormulaEditingCommandGroupArchive::default_instance_ = new FormulaEditingCommandGroupArchive();
  FormulaEditingCommandSelectionBehaviorArchive::default_instance_ = new FormulaEditingCommandSelectionBehaviorArchive();
  UndoRedoStateCommandSelectionBehaviorArchive::default_instance_ = new UndoRedoStateCommandSelectionBehaviorArchive();
  TableCommandSelectionBehaviorArchive::default_instance_ = new TableCommandSelectionBehaviorArchive();
  DisableTableNameSelectionBehaviorArchive::default_instance_ = new DisableTableNameSelectionBehaviorArchive();
  CommandApplyCellCommentArchive::default_instance_ = new CommandApplyCellCommentArchive();
  CommandApplyConditionalStyleSetArchive::default_instance_ = new CommandApplyConditionalStyleSetArchive();
  CommandSetFormulaTokenizationArchive::default_instance_ = new CommandSetFormulaTokenizationArchive();
  CommandSetFilterEnabledArchive::default_instance_ = new CommandSetFilterEnabledArchive();
  CommandSetFilterRuleEnabledArchive::default_instance_ = new CommandSetFilterRuleEnabledArchive();
  CommandSetFilterSetTypeArchive::default_instance_ = new CommandSetFilterSetTypeArchive();
  CommandSetStyleNetworkArchive::default_instance_ = new CommandSetStyleNetworkArchive();
  CommandMutateCellsArchive::default_instance_ = new CommandMutateCellsArchive();
  CommandDisableFilterRulesForColumnArchive::default_instance_ = new CommandDisableFilterRulesForColumnArchive();
  CommandSetTextStyleArchive::default_instance_ = new CommandSetTextStyleArchive();
  CommandNotifyForTransformingArchive::default_instance_ = new CommandNotifyForTransformingArchive();
  CommandSetStorageLanguageArchive::default_instance_ = new CommandSetStorageLanguageArchive();
  CommandSetSortOrderArchive::default_instance_ = new CommandSetSortOrderArchive();
  CommandRewriteSortOrderForTectonicShiftArchive::default_instance_ = new CommandRewriteSortOrderForTectonicShiftArchive();
  CommandRewriteSortOrderForSortArchive::default_instance_ = new CommandRewriteSortOrderForSortArchive();
  CommandRewriteSortOrderForTableResizeArchive::default_instance_ = new CommandRewriteSortOrderForTableResizeArchive();
  TableCommandArchive::default_instance_->InitAsDefaultInstance();
  CommandApplyCellDiffArchive::default_instance_->InitAsDefaultInstance();
  CommandChangeFreezeHeaderStateArchive::default_instance_->InitAsDefaultInstance();
  CommandDeleteCellsArchive::default_instance_->InitAsDefaultInstance();
  CommandDeleteCellContentsArchive::default_instance_->InitAsDefaultInstance();
  CommandSetMultipleCellsArchive::default_instance_->InitAsDefaultInstance();
  CommandSetMultipleCellsCustomArchive::default_instance_->InitAsDefaultInstance();
  CommandSetMultipleCellsMultipleChoiceListArchive::default_instance_->InitAsDefaultInstance();
  CommandCoerceMultipleCellsArchive::default_instance_->InitAsDefaultInstance();
  CommandSetControlCellsDisplayNumberFormatArchive::default_instance_->InitAsDefaultInstance();
  CommandSetAutomaticFormatArchive::default_instance_->InitAsDefaultInstance();
  CommandSetAutomaticDurationUnitsArchive::default_instance_->InitAsDefaultInstance();
  CommandReplaceCustomFormatArchive::default_instance_->InitAsDefaultInstance();
  CommandInsertColumnsOrRowsArchive::default_instance_->InitAsDefaultInstance();
  CommandInsertColumnsOrRowsArchive_StyleIndexPair::default_instance_->InitAsDefaultInstance();
  CommandPasteArchive::default_instance_->InitAsDefaultInstance();
  CommandRemoveColumnsOrRowsArchive::default_instance_->InitAsDefaultInstance();
  CommandResizeColumnOrRowArchive::default_instance_->InitAsDefaultInstance();
  CommandSetCellArchive::default_instance_->InitAsDefaultInstance();
  CommandTextPreflightInsertCellArchive::default_instance_->InitAsDefaultInstance();
  CommandPostflightSetCellArchive::default_instance_->InitAsDefaultInstance();
  CommandSetNumberOfHeadersOrFootersArchive::default_instance_->InitAsDefaultInstance();
  CommandFixWPStylesInRowsOrColumnsArchive::default_instance_->InitAsDefaultInstance();
  CommandFixStylesInHeadersOrFootersArchive::default_instance_->InitAsDefaultInstance();
  CommandSetTableNameArchive::default_instance_->InitAsDefaultInstance();
  CommandSetTableNameEnabledArchive::default_instance_->InitAsDefaultInstance();
  CommandSetTableFontSizeArchive::default_instance_->InitAsDefaultInstance();
  CommandSetTableFontNameArchive::default_instance_->InitAsDefaultInstance();
  CommandSetTableNameHeightArchive::default_instance_->InitAsDefaultInstance();
  CommandStyleCellsArchive::default_instance_->InitAsDefaultInstance();
  CommandSetFillPropertyArchive::default_instance_->InitAsDefaultInstance();
  CommandStyleTableArchive::default_instance_->InitAsDefaultInstance();
  CommandFillCellsArchive::default_instance_->InitAsDefaultInstance();
  CommandReplaceTextArchive::default_instance_->InitAsDefaultInstance();
  CommandReplaceAllTextArchive::default_instance_->InitAsDefaultInstance();
  CommandSetRepeatingHeaderEnabledArchive::default_instance_->InitAsDefaultInstance();
  CommandSetFiltersEnabledArchive::default_instance_->InitAsDefaultInstance();
  CommandAddQuickFilterRulesArchive::default_instance_->InitAsDefaultInstance();
  CommandDeleteFilterRulesArchive::default_instance_->InitAsDefaultInstance();
  CommandModifyFilterRuleArchive::default_instance_->InitAsDefaultInstance();
  CommandApplyStrokePresetArchive::default_instance_->InitAsDefaultInstance();
  CommandAddTableStylePresetArchive::default_instance_->InitAsDefaultInstance();
  CommandRemoveTableStylePresetArchive::default_instance_->InitAsDefaultInstance();
  CommandReplaceTableStylePresetArchive::default_instance_->InitAsDefaultInstance();
  CommandApplyTableStylePresetArchive::default_instance_->InitAsDefaultInstance();
  CommandApplyTableStylePresetArchive_StyleIndexTuple::default_instance_->InitAsDefaultInstance();
  CommandSetStyleApplyClearsAllFlagArchive::default_instance_->InitAsDefaultInstance();
  CommandApplyThemeToTableArchive::default_instance_->InitAsDefaultInstance();
  CommandApplyThemeChildForTableArchive::default_instance_->InitAsDefaultInstance();
  CommandToggleTextPropertyArchive::default_instance_->InitAsDefaultInstance();
  CommandResetFillPropertyToDefault::default_instance_->InitAsDefaultInstance();
  CommandSetSingleNumberFormatParameterArchive::default_instance_->InitAsDefaultInstance();
  CommandSetBaseArchive::default_instance_->InitAsDefaultInstance();
  CommandSetBasePlacesArchive::default_instance_->InitAsDefaultInstance();
  CommandSetBaseUseMinusSignArchive::default_instance_->InitAsDefaultInstance();
  CommandSetControlMinimumArchive::default_instance_->InitAsDefaultInstance();
  CommandSetControlMaximumArchive::default_instance_->InitAsDefaultInstance();
  CommandSetControlIncrementArchive::default_instance_->InitAsDefaultInstance();
  CommandSetCurrencyCodeArchive::default_instance_->InitAsDefaultInstance();
  CommandSetFractionAccuracyArchive::default_instance_->InitAsDefaultInstance();
  CommandSetMultipleChoiceListFormatForEditedItemArchive::default_instance_->InitAsDefaultInstance();
  CommandSetMultipleChoiceListFormatForDeleteItemArchive::default_instance_->InitAsDefaultInstance();
  CommandSetMultipleChoiceListFormatForReorderItemArchive::default_instance_->InitAsDefaultInstance();
  CommandSetMultipleChoiceListFormatForInitialValueArchive::default_instance_->InitAsDefaultInstance();
  CommandSetNegativeNumberStyleArchive::default_instance_->InitAsDefaultInstance();
  CommandSetExplicitFormatArchive::default_instance_->InitAsDefaultInstance();
  CommandSetNumberOfDecimalPlacesArchive::default_instance_->InitAsDefaultInstance();
  CommandSetDateTimeFormatArchive::default_instance_->InitAsDefaultInstance();
  CommandSetShowThousandsSeparatorArchive::default_instance_->InitAsDefaultInstance();
  CommandSetUseAccountingStyleArchive::default_instance_->InitAsDefaultInstance();
  CommandMoveRowsArchive::default_instance_->InitAsDefaultInstance();
  CommandMoveColumnsArchive::default_instance_->InitAsDefaultInstance();
  CommandSortArchive::default_instance_->InitAsDefaultInstance();
  CommandRewriteFormulasForSortArchive::default_instance_->InitAsDefaultInstance();
  CommandRewriteFormulasForTectonicShiftArchive::default_instance_->InitAsDefaultInstance();
  CommandRewriteFormulasForMoveArchive::default_instance_->InitAsDefaultInstance();
  CommandRewriteFormulasForCellMergeArchive::default_instance_->InitAsDefaultInstance();
  CommandRewriteFilterFormulasForTableResizeArchive::default_instance_->InitAsDefaultInstance();
  CommandRewriteFilterFormulasForTectonicShiftArchive::default_instance_->InitAsDefaultInstance();
  CommandRewriteFilterFormulasForSortArchive::default_instance_->InitAsDefaultInstance();
  CommandRewriteConditionalStylesForTectonicShiftArchive::default_instance_->InitAsDefaultInstance();
  CommandRewriteConditionalStylesForSortArchive::default_instance_->InitAsDefaultInstance();
  CommandRewriteConditionalStylesForRangeMoveArchive::default_instance_->InitAsDefaultInstance();
  CommandRewriteConditionalStylesForCellMergeArchive::default_instance_->InitAsDefaultInstance();
  CommandMergeUnmergeArchive::default_instance_->InitAsDefaultInstance();
  CommandHideShowArchive::default_instance_->InitAsDefaultInstance();
  TableInfoGeometryCommandArchive::default_instance_->InitAsDefaultInstance();
  FormulaEditingCommandGroupArchive::default_instance_->InitAsDefaultInstance();
  FormulaEditingCommandSelectionBehaviorArchive::default_instance_->InitAsDefaultInstance();
  UndoRedoStateCommandSelectionBehaviorArchive::default_instance_->InitAsDefaultInstance();
  TableCommandSelectionBehaviorArchive::default_instance_->InitAsDefaultInstance();
  DisableTableNameSelectionBehaviorArchive::default_instance_->InitAsDefaultInstance();
  CommandApplyCellCommentArchive::default_instance_->InitAsDefaultInstance();
  CommandApplyConditionalStyleSetArchive::default_instance_->InitAsDefaultInstance();
  CommandSetFormulaTokenizationArchive::default_instance_->InitAsDefaultInstance();
  CommandSetFilterEnabledArchive::default_instance_->InitAsDefaultInstance();
  CommandSetFilterRuleEnabledArchive::default_instance_->InitAsDefaultInstance();
  CommandSetFilterSetTypeArchive::default_instance_->InitAsDefaultInstance();
  CommandSetStyleNetworkArchive::default_instance_->InitAsDefaultInstance();
  CommandMutateCellsArchive::default_instance_->InitAsDefaultInstance();
  CommandDisableFilterRulesForColumnArchive::default_instance_->InitAsDefaultInstance();
  CommandSetTextStyleArchive::default_instance_->InitAsDefaultInstance();
  CommandNotifyForTransformingArchive::default_instance_->InitAsDefaultInstance();
  CommandSetStorageLanguageArchive::default_instance_->InitAsDefaultInstance();
  CommandSetSortOrderArchive::default_instance_->InitAsDefaultInstance();
  CommandRewriteSortOrderForTectonicShiftArchive::default_instance_->InitAsDefaultInstance();
  CommandRewriteSortOrderForSortArchive::default_instance_->InitAsDefaultInstance();
  CommandRewriteSortOrderForTableResizeArchive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TSTCommandArchives_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TSTCommandArchives_2eproto {
  StaticDescriptorInitializer_TSTCommandArchives_2eproto() {
    protobuf_AddDesc_TSTCommandArchives_2eproto();
  }
} static_descriptor_initializer_TSTCommandArchives_2eproto_;
const ::google::protobuf::EnumDescriptor* CommandDirectionArchive_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandDirectionArchive_descriptor_;
}
bool CommandDirectionArchive_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CommandRegionArchive_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandRegionArchive_descriptor_;
}
bool CommandRegionArchive_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TableCommandArchive::kTableInfoFieldNumber;
const int TableCommandArchive::kCommandnameFieldNumber;
const int TableCommandArchive::kSuperFieldNumber;
const int TableCommandArchive::kEditingModeAtStartFieldNumber;
#endif  // !_MSC_VER

TableCommandArchive::TableCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableCommandArchive::InitAsDefaultInstance() {
  tableinfo_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

TableCommandArchive::TableCommandArchive(const TableCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  tableinfo_ = NULL;
  commandname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  super_ = NULL;
  editing_mode_at_start_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableCommandArchive::~TableCommandArchive() {
  SharedDtor();
}

void TableCommandArchive::SharedDtor() {
  if (commandname_ != &::google::protobuf::internal::kEmptyString) {
    delete commandname_;
  }
  if (this != default_instance_) {
    delete tableinfo_;
    delete super_;
  }
}

void TableCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableCommandArchive_descriptor_;
}

const TableCommandArchive& TableCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

TableCommandArchive* TableCommandArchive::default_instance_ = NULL;

TableCommandArchive* TableCommandArchive::New() const {
  return new TableCommandArchive;
}

void TableCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tableinfo()) {
      if (tableinfo_ != NULL) tableinfo_->::TSP::Reference::Clear();
    }
    if (has_commandname()) {
      if (commandname_ != &::google::protobuf::internal::kEmptyString) {
        commandname_->clear();
      }
    }
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    editing_mode_at_start_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Reference tableInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tableinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_commandname;
        break;
      }

      // optional string commandname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commandname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commandname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->commandname().data(), this->commandname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_super;
        break;
      }

      // required .TSK.CommandArchive super = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_editing_mode_at_start;
        break;
      }

      // optional uint32 editing_mode_at_start = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_editing_mode_at_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &editing_mode_at_start_)));
          set_has_editing_mode_at_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Reference tableInfo = 1;
  if (has_tableinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tableinfo(), output);
  }

  // optional string commandname = 2;
  if (has_commandname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commandname().data(), this->commandname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->commandname(), output);
  }

  // required .TSK.CommandArchive super = 3;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->super(), output);
  }

  // optional uint32 editing_mode_at_start = 4;
  if (has_editing_mode_at_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->editing_mode_at_start(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Reference tableInfo = 1;
  if (has_tableinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tableinfo(), target);
  }

  // optional string commandname = 2;
  if (has_commandname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commandname().data(), this->commandname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->commandname(), target);
  }

  // required .TSK.CommandArchive super = 3;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->super(), target);
  }

  // optional uint32 editing_mode_at_start = 4;
  if (has_editing_mode_at_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->editing_mode_at_start(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.Reference tableInfo = 1;
    if (has_tableinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tableinfo());
    }

    // optional string commandname = 2;
    if (has_commandname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commandname());
    }

    // required .TSK.CommandArchive super = 3;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional uint32 editing_mode_at_start = 4;
    if (has_editing_mode_at_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->editing_mode_at_start());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableCommandArchive::MergeFrom(const TableCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableinfo()) {
      mutable_tableinfo()->::TSP::Reference::MergeFrom(from.tableinfo());
    }
    if (from.has_commandname()) {
      set_commandname(from.commandname());
    }
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_editing_mode_at_start()) {
      set_editing_mode_at_start(from.editing_mode_at_start());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableCommandArchive::CopyFrom(const TableCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_tableinfo()) {
    if (!this->tableinfo().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void TableCommandArchive::Swap(TableCommandArchive* other) {
  if (other != this) {
    std::swap(tableinfo_, other->tableinfo_);
    std::swap(commandname_, other->commandname_);
    std::swap(super_, other->super_);
    std::swap(editing_mode_at_start_, other->editing_mode_at_start_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableCommandArchive_descriptor_;
  metadata.reflection = TableCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandApplyCellDiffArchive::kSuperFieldNumber;
const int CommandApplyCellDiffArchive::kCellRegionFieldNumber;
const int CommandApplyCellDiffArchive::kCellDiffFieldNumber;
const int CommandApplyCellDiffArchive::kInverseCellDiffMapFieldNumber;
#endif  // !_MSC_VER

CommandApplyCellDiffArchive::CommandApplyCellDiffArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandApplyCellDiffArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  cell_region_ = const_cast< ::TST::CellRegion*>(&::TST::CellRegion::default_instance());
  cell_diff_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  inverse_cell_diff_map_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandApplyCellDiffArchive::CommandApplyCellDiffArchive(const CommandApplyCellDiffArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandApplyCellDiffArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  cell_region_ = NULL;
  cell_diff_ = NULL;
  inverse_cell_diff_map_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandApplyCellDiffArchive::~CommandApplyCellDiffArchive() {
  SharedDtor();
}

void CommandApplyCellDiffArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete cell_region_;
    delete cell_diff_;
    delete inverse_cell_diff_map_;
  }
}

void CommandApplyCellDiffArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandApplyCellDiffArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandApplyCellDiffArchive_descriptor_;
}

const CommandApplyCellDiffArchive& CommandApplyCellDiffArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandApplyCellDiffArchive* CommandApplyCellDiffArchive::default_instance_ = NULL;

CommandApplyCellDiffArchive* CommandApplyCellDiffArchive::New() const {
  return new CommandApplyCellDiffArchive;
}

void CommandApplyCellDiffArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_cell_region()) {
      if (cell_region_ != NULL) cell_region_->::TST::CellRegion::Clear();
    }
    if (has_cell_diff()) {
      if (cell_diff_ != NULL) cell_diff_->::TSP::Reference::Clear();
    }
    if (has_inverse_cell_diff_map()) {
      if (inverse_cell_diff_map_ != NULL) inverse_cell_diff_map_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandApplyCellDiffArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cell_region;
        break;
      }

      // required .TST.CellRegion cell_region = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cell_diff;
        break;
      }

      // required .TSP.Reference cell_diff = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_diff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell_diff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_inverse_cell_diff_map;
        break;
      }

      // required .TSP.Reference inverse_cell_diff_map = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inverse_cell_diff_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inverse_cell_diff_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandApplyCellDiffArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TST.CellRegion cell_region = 2;
  if (has_cell_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cell_region(), output);
  }

  // required .TSP.Reference cell_diff = 3;
  if (has_cell_diff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cell_diff(), output);
  }

  // required .TSP.Reference inverse_cell_diff_map = 4;
  if (has_inverse_cell_diff_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->inverse_cell_diff_map(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandApplyCellDiffArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TST.CellRegion cell_region = 2;
  if (has_cell_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cell_region(), target);
  }

  // required .TSP.Reference cell_diff = 3;
  if (has_cell_diff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cell_diff(), target);
  }

  // required .TSP.Reference inverse_cell_diff_map = 4;
  if (has_inverse_cell_diff_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->inverse_cell_diff_map(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandApplyCellDiffArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TST.CellRegion cell_region = 2;
    if (has_cell_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cell_region());
    }

    // required .TSP.Reference cell_diff = 3;
    if (has_cell_diff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cell_diff());
    }

    // required .TSP.Reference inverse_cell_diff_map = 4;
    if (has_inverse_cell_diff_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inverse_cell_diff_map());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandApplyCellDiffArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandApplyCellDiffArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandApplyCellDiffArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandApplyCellDiffArchive::MergeFrom(const CommandApplyCellDiffArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_cell_region()) {
      mutable_cell_region()->::TST::CellRegion::MergeFrom(from.cell_region());
    }
    if (from.has_cell_diff()) {
      mutable_cell_diff()->::TSP::Reference::MergeFrom(from.cell_diff());
    }
    if (from.has_inverse_cell_diff_map()) {
      mutable_inverse_cell_diff_map()->::TSP::Reference::MergeFrom(from.inverse_cell_diff_map());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandApplyCellDiffArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandApplyCellDiffArchive::CopyFrom(const CommandApplyCellDiffArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandApplyCellDiffArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_cell_region()) {
    if (!this->cell_region().IsInitialized()) return false;
  }
  if (has_cell_diff()) {
    if (!this->cell_diff().IsInitialized()) return false;
  }
  if (has_inverse_cell_diff_map()) {
    if (!this->inverse_cell_diff_map().IsInitialized()) return false;
  }
  return true;
}

void CommandApplyCellDiffArchive::Swap(CommandApplyCellDiffArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(cell_region_, other->cell_region_);
    std::swap(cell_diff_, other->cell_diff_);
    std::swap(inverse_cell_diff_map_, other->inverse_cell_diff_map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandApplyCellDiffArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandApplyCellDiffArchive_descriptor_;
  metadata.reflection = CommandApplyCellDiffArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandChangeFreezeHeaderStateArchive::kDirectionFieldNumber;
const int CommandChangeFreezeHeaderStateArchive::kNewFreezeStateFieldNumber;
const int CommandChangeFreezeHeaderStateArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandChangeFreezeHeaderStateArchive::CommandChangeFreezeHeaderStateArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandChangeFreezeHeaderStateArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
}

CommandChangeFreezeHeaderStateArchive::CommandChangeFreezeHeaderStateArchive(const CommandChangeFreezeHeaderStateArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandChangeFreezeHeaderStateArchive::SharedCtor() {
  _cached_size_ = 0;
  direction_ = 0;
  new_freeze_state_ = false;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandChangeFreezeHeaderStateArchive::~CommandChangeFreezeHeaderStateArchive() {
  SharedDtor();
}

void CommandChangeFreezeHeaderStateArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandChangeFreezeHeaderStateArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandChangeFreezeHeaderStateArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandChangeFreezeHeaderStateArchive_descriptor_;
}

const CommandChangeFreezeHeaderStateArchive& CommandChangeFreezeHeaderStateArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandChangeFreezeHeaderStateArchive* CommandChangeFreezeHeaderStateArchive::default_instance_ = NULL;

CommandChangeFreezeHeaderStateArchive* CommandChangeFreezeHeaderStateArchive::New() const {
  return new CommandChangeFreezeHeaderStateArchive;
}

void CommandChangeFreezeHeaderStateArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    direction_ = 0;
    new_freeze_state_ = false;
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandChangeFreezeHeaderStateArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CommandDirectionArchive direction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TST::CommandDirectionArchive_IsValid(value)) {
            set_direction(static_cast< ::TST::CommandDirectionArchive >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_new_freeze_state;
        break;
      }

      // required bool new_freeze_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_freeze_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &new_freeze_state_)));
          set_has_new_freeze_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_super;
        break;
      }

      // required .TST.TableCommandArchive super = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandChangeFreezeHeaderStateArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CommandDirectionArchive direction = 1;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->direction(), output);
  }

  // required bool new_freeze_state = 2;
  if (has_new_freeze_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->new_freeze_state(), output);
  }

  // required .TST.TableCommandArchive super = 3;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandChangeFreezeHeaderStateArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CommandDirectionArchive direction = 1;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->direction(), target);
  }

  // required bool new_freeze_state = 2;
  if (has_new_freeze_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->new_freeze_state(), target);
  }

  // required .TST.TableCommandArchive super = 3;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandChangeFreezeHeaderStateArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CommandDirectionArchive direction = 1;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

    // required bool new_freeze_state = 2;
    if (has_new_freeze_state()) {
      total_size += 1 + 1;
    }

    // required .TST.TableCommandArchive super = 3;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandChangeFreezeHeaderStateArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandChangeFreezeHeaderStateArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandChangeFreezeHeaderStateArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandChangeFreezeHeaderStateArchive::MergeFrom(const CommandChangeFreezeHeaderStateArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_new_freeze_state()) {
      set_new_freeze_state(from.new_freeze_state());
    }
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandChangeFreezeHeaderStateArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandChangeFreezeHeaderStateArchive::CopyFrom(const CommandChangeFreezeHeaderStateArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandChangeFreezeHeaderStateArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandChangeFreezeHeaderStateArchive::Swap(CommandChangeFreezeHeaderStateArchive* other) {
  if (other != this) {
    std::swap(direction_, other->direction_);
    std::swap(new_freeze_state_, other->new_freeze_state_);
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandChangeFreezeHeaderStateArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandChangeFreezeHeaderStateArchive_descriptor_;
  metadata.reflection = CommandChangeFreezeHeaderStateArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandDeleteCellsArchive::kSelectionFieldNumber;
const int CommandDeleteCellsArchive::kUndoMapFieldNumber;
const int CommandDeleteCellsArchive::kSuperFieldNumber;
const int CommandDeleteCellsArchive::kRedoMapFieldNumber;
const int CommandDeleteCellsArchive::kInvalidateCommentsFieldNumber;
#endif  // !_MSC_VER

CommandDeleteCellsArchive::CommandDeleteCellsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandDeleteCellsArchive::InitAsDefaultInstance() {
  selection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
  undo_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  redo_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
}

CommandDeleteCellsArchive::CommandDeleteCellsArchive(const CommandDeleteCellsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandDeleteCellsArchive::SharedCtor() {
  _cached_size_ = 0;
  selection_ = NULL;
  undo_map_ = NULL;
  super_ = NULL;
  redo_map_ = NULL;
  invalidate_comments_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandDeleteCellsArchive::~CommandDeleteCellsArchive() {
  SharedDtor();
}

void CommandDeleteCellsArchive::SharedDtor() {
  if (this != default_instance_) {
    delete selection_;
    delete undo_map_;
    delete super_;
    delete redo_map_;
  }
}

void CommandDeleteCellsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandDeleteCellsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandDeleteCellsArchive_descriptor_;
}

const CommandDeleteCellsArchive& CommandDeleteCellsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandDeleteCellsArchive* CommandDeleteCellsArchive::default_instance_ = NULL;

CommandDeleteCellsArchive* CommandDeleteCellsArchive::New() const {
  return new CommandDeleteCellsArchive;
}

void CommandDeleteCellsArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selection()) {
      if (selection_ != NULL) selection_->::TST::SelectionArchive::Clear();
    }
    if (has_undo_map()) {
      if (undo_map_ != NULL) undo_map_->::TST::CellMapArchive::Clear();
    }
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_redo_map()) {
      if (redo_map_ != NULL) redo_map_->::TST::CellMapArchive::Clear();
    }
    invalidate_comments_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandDeleteCellsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.SelectionArchive selection = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_undo_map;
        break;
      }

      // required .TST.CellMapArchive undo_map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_super;
        break;
      }

      // required .TST.TableCommandArchive super = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_redo_map;
        break;
      }

      // required .TST.CellMapArchive redo_map = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_invalidate_comments;
        break;
      }

      // required bool invalidate_comments = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invalidate_comments:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &invalidate_comments_)));
          set_has_invalidate_comments();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandDeleteCellsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.SelectionArchive selection = 1;
  if (has_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selection(), output);
  }

  // required .TST.CellMapArchive undo_map = 2;
  if (has_undo_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->undo_map(), output);
  }

  // required .TST.TableCommandArchive super = 3;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->super(), output);
  }

  // required .TST.CellMapArchive redo_map = 4;
  if (has_redo_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->redo_map(), output);
  }

  // required bool invalidate_comments = 5;
  if (has_invalidate_comments()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->invalidate_comments(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandDeleteCellsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.SelectionArchive selection = 1;
  if (has_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selection(), target);
  }

  // required .TST.CellMapArchive undo_map = 2;
  if (has_undo_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->undo_map(), target);
  }

  // required .TST.TableCommandArchive super = 3;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->super(), target);
  }

  // required .TST.CellMapArchive redo_map = 4;
  if (has_redo_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->redo_map(), target);
  }

  // required bool invalidate_comments = 5;
  if (has_invalidate_comments()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->invalidate_comments(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandDeleteCellsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.SelectionArchive selection = 1;
    if (has_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selection());
    }

    // required .TST.CellMapArchive undo_map = 2;
    if (has_undo_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_map());
    }

    // required .TST.TableCommandArchive super = 3;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TST.CellMapArchive redo_map = 4;
    if (has_redo_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_map());
    }

    // required bool invalidate_comments = 5;
    if (has_invalidate_comments()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandDeleteCellsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandDeleteCellsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandDeleteCellsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandDeleteCellsArchive::MergeFrom(const CommandDeleteCellsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selection()) {
      mutable_selection()->::TST::SelectionArchive::MergeFrom(from.selection());
    }
    if (from.has_undo_map()) {
      mutable_undo_map()->::TST::CellMapArchive::MergeFrom(from.undo_map());
    }
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_redo_map()) {
      mutable_redo_map()->::TST::CellMapArchive::MergeFrom(from.redo_map());
    }
    if (from.has_invalidate_comments()) {
      set_invalidate_comments(from.invalidate_comments());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandDeleteCellsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandDeleteCellsArchive::CopyFrom(const CommandDeleteCellsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDeleteCellsArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_selection()) {
    if (!this->selection().IsInitialized()) return false;
  }
  if (has_undo_map()) {
    if (!this->undo_map().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_redo_map()) {
    if (!this->redo_map().IsInitialized()) return false;
  }
  return true;
}

void CommandDeleteCellsArchive::Swap(CommandDeleteCellsArchive* other) {
  if (other != this) {
    std::swap(selection_, other->selection_);
    std::swap(undo_map_, other->undo_map_);
    std::swap(super_, other->super_);
    std::swap(redo_map_, other->redo_map_);
    std::swap(invalidate_comments_, other->invalidate_comments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandDeleteCellsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandDeleteCellsArchive_descriptor_;
  metadata.reflection = CommandDeleteCellsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandDeleteCellContentsArchive::kSelectionFieldNumber;
const int CommandDeleteCellContentsArchive::kUndoMapFieldNumber;
const int CommandDeleteCellContentsArchive::kSuperFieldNumber;
const int CommandDeleteCellContentsArchive::kRedoMapFieldNumber;
const int CommandDeleteCellContentsArchive::kInvalidateCommentsFieldNumber;
#endif  // !_MSC_VER

CommandDeleteCellContentsArchive::CommandDeleteCellContentsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandDeleteCellContentsArchive::InitAsDefaultInstance() {
  selection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
  undo_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  redo_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
}

CommandDeleteCellContentsArchive::CommandDeleteCellContentsArchive(const CommandDeleteCellContentsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandDeleteCellContentsArchive::SharedCtor() {
  _cached_size_ = 0;
  selection_ = NULL;
  undo_map_ = NULL;
  super_ = NULL;
  redo_map_ = NULL;
  invalidate_comments_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandDeleteCellContentsArchive::~CommandDeleteCellContentsArchive() {
  SharedDtor();
}

void CommandDeleteCellContentsArchive::SharedDtor() {
  if (this != default_instance_) {
    delete selection_;
    delete undo_map_;
    delete super_;
    delete redo_map_;
  }
}

void CommandDeleteCellContentsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandDeleteCellContentsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandDeleteCellContentsArchive_descriptor_;
}

const CommandDeleteCellContentsArchive& CommandDeleteCellContentsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandDeleteCellContentsArchive* CommandDeleteCellContentsArchive::default_instance_ = NULL;

CommandDeleteCellContentsArchive* CommandDeleteCellContentsArchive::New() const {
  return new CommandDeleteCellContentsArchive;
}

void CommandDeleteCellContentsArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selection()) {
      if (selection_ != NULL) selection_->::TST::SelectionArchive::Clear();
    }
    if (has_undo_map()) {
      if (undo_map_ != NULL) undo_map_->::TST::CellMapArchive::Clear();
    }
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_redo_map()) {
      if (redo_map_ != NULL) redo_map_->::TST::CellMapArchive::Clear();
    }
    invalidate_comments_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandDeleteCellContentsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.SelectionArchive selection = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_undo_map;
        break;
      }

      // required .TST.CellMapArchive undo_map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_super;
        break;
      }

      // required .TST.TableCommandArchive super = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_redo_map;
        break;
      }

      // required .TST.CellMapArchive redo_map = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_invalidate_comments;
        break;
      }

      // required bool invalidate_comments = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invalidate_comments:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &invalidate_comments_)));
          set_has_invalidate_comments();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandDeleteCellContentsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.SelectionArchive selection = 1;
  if (has_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selection(), output);
  }

  // required .TST.CellMapArchive undo_map = 2;
  if (has_undo_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->undo_map(), output);
  }

  // required .TST.TableCommandArchive super = 3;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->super(), output);
  }

  // required .TST.CellMapArchive redo_map = 4;
  if (has_redo_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->redo_map(), output);
  }

  // required bool invalidate_comments = 5;
  if (has_invalidate_comments()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->invalidate_comments(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandDeleteCellContentsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.SelectionArchive selection = 1;
  if (has_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selection(), target);
  }

  // required .TST.CellMapArchive undo_map = 2;
  if (has_undo_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->undo_map(), target);
  }

  // required .TST.TableCommandArchive super = 3;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->super(), target);
  }

  // required .TST.CellMapArchive redo_map = 4;
  if (has_redo_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->redo_map(), target);
  }

  // required bool invalidate_comments = 5;
  if (has_invalidate_comments()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->invalidate_comments(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandDeleteCellContentsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.SelectionArchive selection = 1;
    if (has_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selection());
    }

    // required .TST.CellMapArchive undo_map = 2;
    if (has_undo_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_map());
    }

    // required .TST.TableCommandArchive super = 3;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TST.CellMapArchive redo_map = 4;
    if (has_redo_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_map());
    }

    // required bool invalidate_comments = 5;
    if (has_invalidate_comments()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandDeleteCellContentsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandDeleteCellContentsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandDeleteCellContentsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandDeleteCellContentsArchive::MergeFrom(const CommandDeleteCellContentsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selection()) {
      mutable_selection()->::TST::SelectionArchive::MergeFrom(from.selection());
    }
    if (from.has_undo_map()) {
      mutable_undo_map()->::TST::CellMapArchive::MergeFrom(from.undo_map());
    }
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_redo_map()) {
      mutable_redo_map()->::TST::CellMapArchive::MergeFrom(from.redo_map());
    }
    if (from.has_invalidate_comments()) {
      set_invalidate_comments(from.invalidate_comments());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandDeleteCellContentsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandDeleteCellContentsArchive::CopyFrom(const CommandDeleteCellContentsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDeleteCellContentsArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_selection()) {
    if (!this->selection().IsInitialized()) return false;
  }
  if (has_undo_map()) {
    if (!this->undo_map().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_redo_map()) {
    if (!this->redo_map().IsInitialized()) return false;
  }
  return true;
}

void CommandDeleteCellContentsArchive::Swap(CommandDeleteCellContentsArchive* other) {
  if (other != this) {
    std::swap(selection_, other->selection_);
    std::swap(undo_map_, other->undo_map_);
    std::swap(super_, other->super_);
    std::swap(redo_map_, other->redo_map_);
    std::swap(invalidate_comments_, other->invalidate_comments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandDeleteCellContentsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandDeleteCellContentsArchive_descriptor_;
  metadata.reflection = CommandDeleteCellContentsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetMultipleCellsArchive::kSelectionFieldNumber;
const int CommandSetMultipleCellsArchive::kUndoMapFieldNumber;
const int CommandSetMultipleCellsArchive::kRedoMapFieldNumber;
const int CommandSetMultipleCellsArchive::kSourceCellFieldNumber;
const int CommandSetMultipleCellsArchive::kOnlyIfFormatDiffersFieldNumber;
const int CommandSetMultipleCellsArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandSetMultipleCellsArchive::CommandSetMultipleCellsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetMultipleCellsArchive::InitAsDefaultInstance() {
  selection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
  undo_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  redo_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  source_cell_ = const_cast< ::TST::Cell*>(&::TST::Cell::default_instance());
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
}

CommandSetMultipleCellsArchive::CommandSetMultipleCellsArchive(const CommandSetMultipleCellsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetMultipleCellsArchive::SharedCtor() {
  _cached_size_ = 0;
  selection_ = NULL;
  undo_map_ = NULL;
  redo_map_ = NULL;
  source_cell_ = NULL;
  only_if_format_differs_ = false;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetMultipleCellsArchive::~CommandSetMultipleCellsArchive() {
  SharedDtor();
}

void CommandSetMultipleCellsArchive::SharedDtor() {
  if (this != default_instance_) {
    delete selection_;
    delete undo_map_;
    delete redo_map_;
    delete source_cell_;
    delete super_;
  }
}

void CommandSetMultipleCellsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetMultipleCellsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetMultipleCellsArchive_descriptor_;
}

const CommandSetMultipleCellsArchive& CommandSetMultipleCellsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetMultipleCellsArchive* CommandSetMultipleCellsArchive::default_instance_ = NULL;

CommandSetMultipleCellsArchive* CommandSetMultipleCellsArchive::New() const {
  return new CommandSetMultipleCellsArchive;
}

void CommandSetMultipleCellsArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selection()) {
      if (selection_ != NULL) selection_->::TST::SelectionArchive::Clear();
    }
    if (has_undo_map()) {
      if (undo_map_ != NULL) undo_map_->::TST::CellMapArchive::Clear();
    }
    if (has_redo_map()) {
      if (redo_map_ != NULL) redo_map_->::TST::CellMapArchive::Clear();
    }
    if (has_source_cell()) {
      if (source_cell_ != NULL) source_cell_->::TST::Cell::Clear();
    }
    only_if_format_differs_ = false;
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetMultipleCellsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.SelectionArchive selection = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_undo_map;
        break;
      }

      // required .TST.CellMapArchive undo_map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_redo_map;
        break;
      }

      // required .TST.CellMapArchive redo_map = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_source_cell;
        break;
      }

      // optional .TST.Cell source_cell = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_source_cell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source_cell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_only_if_format_differs;
        break;
      }

      // optional bool only_if_format_differs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_only_if_format_differs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_if_format_differs_)));
          set_has_only_if_format_differs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_super;
        break;
      }

      // required .TST.TableCommandArchive super = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetMultipleCellsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.SelectionArchive selection = 1;
  if (has_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selection(), output);
  }

  // required .TST.CellMapArchive undo_map = 2;
  if (has_undo_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->undo_map(), output);
  }

  // required .TST.CellMapArchive redo_map = 3;
  if (has_redo_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->redo_map(), output);
  }

  // optional .TST.Cell source_cell = 4;
  if (has_source_cell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->source_cell(), output);
  }

  // optional bool only_if_format_differs = 6;
  if (has_only_if_format_differs()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->only_if_format_differs(), output);
  }

  // required .TST.TableCommandArchive super = 7;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetMultipleCellsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.SelectionArchive selection = 1;
  if (has_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selection(), target);
  }

  // required .TST.CellMapArchive undo_map = 2;
  if (has_undo_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->undo_map(), target);
  }

  // required .TST.CellMapArchive redo_map = 3;
  if (has_redo_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->redo_map(), target);
  }

  // optional .TST.Cell source_cell = 4;
  if (has_source_cell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->source_cell(), target);
  }

  // optional bool only_if_format_differs = 6;
  if (has_only_if_format_differs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->only_if_format_differs(), target);
  }

  // required .TST.TableCommandArchive super = 7;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetMultipleCellsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.SelectionArchive selection = 1;
    if (has_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selection());
    }

    // required .TST.CellMapArchive undo_map = 2;
    if (has_undo_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_map());
    }

    // required .TST.CellMapArchive redo_map = 3;
    if (has_redo_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_map());
    }

    // optional .TST.Cell source_cell = 4;
    if (has_source_cell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->source_cell());
    }

    // optional bool only_if_format_differs = 6;
    if (has_only_if_format_differs()) {
      total_size += 1 + 1;
    }

    // required .TST.TableCommandArchive super = 7;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetMultipleCellsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetMultipleCellsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetMultipleCellsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetMultipleCellsArchive::MergeFrom(const CommandSetMultipleCellsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selection()) {
      mutable_selection()->::TST::SelectionArchive::MergeFrom(from.selection());
    }
    if (from.has_undo_map()) {
      mutable_undo_map()->::TST::CellMapArchive::MergeFrom(from.undo_map());
    }
    if (from.has_redo_map()) {
      mutable_redo_map()->::TST::CellMapArchive::MergeFrom(from.redo_map());
    }
    if (from.has_source_cell()) {
      mutable_source_cell()->::TST::Cell::MergeFrom(from.source_cell());
    }
    if (from.has_only_if_format_differs()) {
      set_only_if_format_differs(from.only_if_format_differs());
    }
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetMultipleCellsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetMultipleCellsArchive::CopyFrom(const CommandSetMultipleCellsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetMultipleCellsArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;

  if (has_selection()) {
    if (!this->selection().IsInitialized()) return false;
  }
  if (has_undo_map()) {
    if (!this->undo_map().IsInitialized()) return false;
  }
  if (has_redo_map()) {
    if (!this->redo_map().IsInitialized()) return false;
  }
  if (has_source_cell()) {
    if (!this->source_cell().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetMultipleCellsArchive::Swap(CommandSetMultipleCellsArchive* other) {
  if (other != this) {
    std::swap(selection_, other->selection_);
    std::swap(undo_map_, other->undo_map_);
    std::swap(redo_map_, other->redo_map_);
    std::swap(source_cell_, other->source_cell_);
    std::swap(only_if_format_differs_, other->only_if_format_differs_);
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetMultipleCellsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetMultipleCellsArchive_descriptor_;
  metadata.reflection = CommandSetMultipleCellsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetMultipleCellsCustomArchive::kSelectionFieldNumber;
const int CommandSetMultipleCellsCustomArchive::kUndoMapFieldNumber;
const int CommandSetMultipleCellsCustomArchive::kRedoMapFieldNumber;
const int CommandSetMultipleCellsCustomArchive::kCellFormatFieldNumber;
const int CommandSetMultipleCellsCustomArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandSetMultipleCellsCustomArchive::CommandSetMultipleCellsCustomArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetMultipleCellsCustomArchive::InitAsDefaultInstance() {
  selection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
  undo_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  redo_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  cell_format_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
}

CommandSetMultipleCellsCustomArchive::CommandSetMultipleCellsCustomArchive(const CommandSetMultipleCellsCustomArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetMultipleCellsCustomArchive::SharedCtor() {
  _cached_size_ = 0;
  selection_ = NULL;
  undo_map_ = NULL;
  redo_map_ = NULL;
  cell_format_ = NULL;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetMultipleCellsCustomArchive::~CommandSetMultipleCellsCustomArchive() {
  SharedDtor();
}

void CommandSetMultipleCellsCustomArchive::SharedDtor() {
  if (this != default_instance_) {
    delete selection_;
    delete undo_map_;
    delete redo_map_;
    delete cell_format_;
    delete super_;
  }
}

void CommandSetMultipleCellsCustomArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetMultipleCellsCustomArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetMultipleCellsCustomArchive_descriptor_;
}

const CommandSetMultipleCellsCustomArchive& CommandSetMultipleCellsCustomArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetMultipleCellsCustomArchive* CommandSetMultipleCellsCustomArchive::default_instance_ = NULL;

CommandSetMultipleCellsCustomArchive* CommandSetMultipleCellsCustomArchive::New() const {
  return new CommandSetMultipleCellsCustomArchive;
}

void CommandSetMultipleCellsCustomArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selection()) {
      if (selection_ != NULL) selection_->::TST::SelectionArchive::Clear();
    }
    if (has_undo_map()) {
      if (undo_map_ != NULL) undo_map_->::TST::CellMapArchive::Clear();
    }
    if (has_redo_map()) {
      if (redo_map_ != NULL) redo_map_->::TST::CellMapArchive::Clear();
    }
    if (has_cell_format()) {
      if (cell_format_ != NULL) cell_format_->::TSK::FormatStructArchive::Clear();
    }
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetMultipleCellsCustomArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.SelectionArchive selection = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_undo_map;
        break;
      }

      // required .TST.CellMapArchive undo_map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_redo_map;
        break;
      }

      // required .TST.CellMapArchive redo_map = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cell_format;
        break;
      }

      // required .TSK.FormatStructArchive cell_format = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_super;
        break;
      }

      // required .TST.TableCommandArchive super = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetMultipleCellsCustomArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.SelectionArchive selection = 1;
  if (has_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selection(), output);
  }

  // required .TST.CellMapArchive undo_map = 2;
  if (has_undo_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->undo_map(), output);
  }

  // required .TST.CellMapArchive redo_map = 3;
  if (has_redo_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->redo_map(), output);
  }

  // required .TSK.FormatStructArchive cell_format = 4;
  if (has_cell_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cell_format(), output);
  }

  // required .TST.TableCommandArchive super = 7;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetMultipleCellsCustomArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.SelectionArchive selection = 1;
  if (has_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selection(), target);
  }

  // required .TST.CellMapArchive undo_map = 2;
  if (has_undo_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->undo_map(), target);
  }

  // required .TST.CellMapArchive redo_map = 3;
  if (has_redo_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->redo_map(), target);
  }

  // required .TSK.FormatStructArchive cell_format = 4;
  if (has_cell_format()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cell_format(), target);
  }

  // required .TST.TableCommandArchive super = 7;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetMultipleCellsCustomArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.SelectionArchive selection = 1;
    if (has_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selection());
    }

    // required .TST.CellMapArchive undo_map = 2;
    if (has_undo_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_map());
    }

    // required .TST.CellMapArchive redo_map = 3;
    if (has_redo_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_map());
    }

    // required .TSK.FormatStructArchive cell_format = 4;
    if (has_cell_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cell_format());
    }

    // required .TST.TableCommandArchive super = 7;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetMultipleCellsCustomArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetMultipleCellsCustomArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetMultipleCellsCustomArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetMultipleCellsCustomArchive::MergeFrom(const CommandSetMultipleCellsCustomArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selection()) {
      mutable_selection()->::TST::SelectionArchive::MergeFrom(from.selection());
    }
    if (from.has_undo_map()) {
      mutable_undo_map()->::TST::CellMapArchive::MergeFrom(from.undo_map());
    }
    if (from.has_redo_map()) {
      mutable_redo_map()->::TST::CellMapArchive::MergeFrom(from.redo_map());
    }
    if (from.has_cell_format()) {
      mutable_cell_format()->::TSK::FormatStructArchive::MergeFrom(from.cell_format());
    }
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetMultipleCellsCustomArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetMultipleCellsCustomArchive::CopyFrom(const CommandSetMultipleCellsCustomArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetMultipleCellsCustomArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_selection()) {
    if (!this->selection().IsInitialized()) return false;
  }
  if (has_undo_map()) {
    if (!this->undo_map().IsInitialized()) return false;
  }
  if (has_redo_map()) {
    if (!this->redo_map().IsInitialized()) return false;
  }
  if (has_cell_format()) {
    if (!this->cell_format().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetMultipleCellsCustomArchive::Swap(CommandSetMultipleCellsCustomArchive* other) {
  if (other != this) {
    std::swap(selection_, other->selection_);
    std::swap(undo_map_, other->undo_map_);
    std::swap(redo_map_, other->redo_map_);
    std::swap(cell_format_, other->cell_format_);
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetMultipleCellsCustomArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetMultipleCellsCustomArchive_descriptor_;
  metadata.reflection = CommandSetMultipleCellsCustomArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetMultipleCellsMultipleChoiceListArchive::kSelectionFieldNumber;
const int CommandSetMultipleCellsMultipleChoiceListArchive::kUndoMapFieldNumber;
const int CommandSetMultipleCellsMultipleChoiceListArchive::kRedoMapFieldNumber;
const int CommandSetMultipleCellsMultipleChoiceListArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandSetMultipleCellsMultipleChoiceListArchive::CommandSetMultipleCellsMultipleChoiceListArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetMultipleCellsMultipleChoiceListArchive::InitAsDefaultInstance() {
  selection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
  undo_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  redo_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
}

CommandSetMultipleCellsMultipleChoiceListArchive::CommandSetMultipleCellsMultipleChoiceListArchive(const CommandSetMultipleCellsMultipleChoiceListArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetMultipleCellsMultipleChoiceListArchive::SharedCtor() {
  _cached_size_ = 0;
  selection_ = NULL;
  undo_map_ = NULL;
  redo_map_ = NULL;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetMultipleCellsMultipleChoiceListArchive::~CommandSetMultipleCellsMultipleChoiceListArchive() {
  SharedDtor();
}

void CommandSetMultipleCellsMultipleChoiceListArchive::SharedDtor() {
  if (this != default_instance_) {
    delete selection_;
    delete undo_map_;
    delete redo_map_;
    delete super_;
  }
}

void CommandSetMultipleCellsMultipleChoiceListArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetMultipleCellsMultipleChoiceListArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetMultipleCellsMultipleChoiceListArchive_descriptor_;
}

const CommandSetMultipleCellsMultipleChoiceListArchive& CommandSetMultipleCellsMultipleChoiceListArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetMultipleCellsMultipleChoiceListArchive* CommandSetMultipleCellsMultipleChoiceListArchive::default_instance_ = NULL;

CommandSetMultipleCellsMultipleChoiceListArchive* CommandSetMultipleCellsMultipleChoiceListArchive::New() const {
  return new CommandSetMultipleCellsMultipleChoiceListArchive;
}

void CommandSetMultipleCellsMultipleChoiceListArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selection()) {
      if (selection_ != NULL) selection_->::TST::SelectionArchive::Clear();
    }
    if (has_undo_map()) {
      if (undo_map_ != NULL) undo_map_->::TST::CellMapArchive::Clear();
    }
    if (has_redo_map()) {
      if (redo_map_ != NULL) redo_map_->::TST::CellMapArchive::Clear();
    }
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetMultipleCellsMultipleChoiceListArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.SelectionArchive selection = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_undo_map;
        break;
      }

      // required .TST.CellMapArchive undo_map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_redo_map;
        break;
      }

      // required .TST.CellMapArchive redo_map = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_super;
        break;
      }

      // required .TST.TableCommandArchive super = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetMultipleCellsMultipleChoiceListArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.SelectionArchive selection = 1;
  if (has_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selection(), output);
  }

  // required .TST.CellMapArchive undo_map = 2;
  if (has_undo_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->undo_map(), output);
  }

  // required .TST.CellMapArchive redo_map = 3;
  if (has_redo_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->redo_map(), output);
  }

  // required .TST.TableCommandArchive super = 5;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetMultipleCellsMultipleChoiceListArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.SelectionArchive selection = 1;
  if (has_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selection(), target);
  }

  // required .TST.CellMapArchive undo_map = 2;
  if (has_undo_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->undo_map(), target);
  }

  // required .TST.CellMapArchive redo_map = 3;
  if (has_redo_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->redo_map(), target);
  }

  // required .TST.TableCommandArchive super = 5;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetMultipleCellsMultipleChoiceListArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.SelectionArchive selection = 1;
    if (has_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selection());
    }

    // required .TST.CellMapArchive undo_map = 2;
    if (has_undo_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_map());
    }

    // required .TST.CellMapArchive redo_map = 3;
    if (has_redo_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_map());
    }

    // required .TST.TableCommandArchive super = 5;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetMultipleCellsMultipleChoiceListArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetMultipleCellsMultipleChoiceListArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetMultipleCellsMultipleChoiceListArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetMultipleCellsMultipleChoiceListArchive::MergeFrom(const CommandSetMultipleCellsMultipleChoiceListArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selection()) {
      mutable_selection()->::TST::SelectionArchive::MergeFrom(from.selection());
    }
    if (from.has_undo_map()) {
      mutable_undo_map()->::TST::CellMapArchive::MergeFrom(from.undo_map());
    }
    if (from.has_redo_map()) {
      mutable_redo_map()->::TST::CellMapArchive::MergeFrom(from.redo_map());
    }
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetMultipleCellsMultipleChoiceListArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetMultipleCellsMultipleChoiceListArchive::CopyFrom(const CommandSetMultipleCellsMultipleChoiceListArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetMultipleCellsMultipleChoiceListArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_selection()) {
    if (!this->selection().IsInitialized()) return false;
  }
  if (has_undo_map()) {
    if (!this->undo_map().IsInitialized()) return false;
  }
  if (has_redo_map()) {
    if (!this->redo_map().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetMultipleCellsMultipleChoiceListArchive::Swap(CommandSetMultipleCellsMultipleChoiceListArchive* other) {
  if (other != this) {
    std::swap(selection_, other->selection_);
    std::swap(undo_map_, other->undo_map_);
    std::swap(redo_map_, other->redo_map_);
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetMultipleCellsMultipleChoiceListArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetMultipleCellsMultipleChoiceListArchive_descriptor_;
  metadata.reflection = CommandSetMultipleCellsMultipleChoiceListArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandCoerceMultipleCellsArchive::kSelectionFieldNumber;
const int CommandCoerceMultipleCellsArchive::kUndoMapFieldNumber;
const int CommandCoerceMultipleCellsArchive::kRedoMapFieldNumber;
const int CommandCoerceMultipleCellsArchive::kDesiredFormatFieldNumber;
const int CommandCoerceMultipleCellsArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandCoerceMultipleCellsArchive::CommandCoerceMultipleCellsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandCoerceMultipleCellsArchive::InitAsDefaultInstance() {
  selection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
  undo_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  redo_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
}

CommandCoerceMultipleCellsArchive::CommandCoerceMultipleCellsArchive(const CommandCoerceMultipleCellsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandCoerceMultipleCellsArchive::SharedCtor() {
  _cached_size_ = 0;
  selection_ = NULL;
  undo_map_ = NULL;
  redo_map_ = NULL;
  desired_format_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandCoerceMultipleCellsArchive::~CommandCoerceMultipleCellsArchive() {
  SharedDtor();
}

void CommandCoerceMultipleCellsArchive::SharedDtor() {
  if (this != default_instance_) {
    delete selection_;
    delete undo_map_;
    delete redo_map_;
    delete super_;
  }
}

void CommandCoerceMultipleCellsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandCoerceMultipleCellsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandCoerceMultipleCellsArchive_descriptor_;
}

const CommandCoerceMultipleCellsArchive& CommandCoerceMultipleCellsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandCoerceMultipleCellsArchive* CommandCoerceMultipleCellsArchive::default_instance_ = NULL;

CommandCoerceMultipleCellsArchive* CommandCoerceMultipleCellsArchive::New() const {
  return new CommandCoerceMultipleCellsArchive;
}

void CommandCoerceMultipleCellsArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selection()) {
      if (selection_ != NULL) selection_->::TST::SelectionArchive::Clear();
    }
    if (has_undo_map()) {
      if (undo_map_ != NULL) undo_map_->::TST::CellMapArchive::Clear();
    }
    if (has_redo_map()) {
      if (redo_map_ != NULL) redo_map_->::TST::CellMapArchive::Clear();
    }
    desired_format_ = 0;
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandCoerceMultipleCellsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.SelectionArchive selection = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_undo_map;
        break;
      }

      // required .TST.CellMapArchive undo_map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_redo_map;
        break;
      }

      // required .TST.CellMapArchive redo_map = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_desired_format;
        break;
      }

      // required int32 desired_format = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_desired_format:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &desired_format_)));
          set_has_desired_format();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_super;
        break;
      }

      // required .TST.TableCommandArchive super = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandCoerceMultipleCellsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.SelectionArchive selection = 1;
  if (has_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selection(), output);
  }

  // required .TST.CellMapArchive undo_map = 2;
  if (has_undo_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->undo_map(), output);
  }

  // required .TST.CellMapArchive redo_map = 3;
  if (has_redo_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->redo_map(), output);
  }

  // required int32 desired_format = 4;
  if (has_desired_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->desired_format(), output);
  }

  // required .TST.TableCommandArchive super = 6;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandCoerceMultipleCellsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.SelectionArchive selection = 1;
  if (has_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selection(), target);
  }

  // required .TST.CellMapArchive undo_map = 2;
  if (has_undo_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->undo_map(), target);
  }

  // required .TST.CellMapArchive redo_map = 3;
  if (has_redo_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->redo_map(), target);
  }

  // required int32 desired_format = 4;
  if (has_desired_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->desired_format(), target);
  }

  // required .TST.TableCommandArchive super = 6;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandCoerceMultipleCellsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.SelectionArchive selection = 1;
    if (has_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selection());
    }

    // required .TST.CellMapArchive undo_map = 2;
    if (has_undo_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_map());
    }

    // required .TST.CellMapArchive redo_map = 3;
    if (has_redo_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_map());
    }

    // required int32 desired_format = 4;
    if (has_desired_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desired_format());
    }

    // required .TST.TableCommandArchive super = 6;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandCoerceMultipleCellsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandCoerceMultipleCellsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandCoerceMultipleCellsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandCoerceMultipleCellsArchive::MergeFrom(const CommandCoerceMultipleCellsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selection()) {
      mutable_selection()->::TST::SelectionArchive::MergeFrom(from.selection());
    }
    if (from.has_undo_map()) {
      mutable_undo_map()->::TST::CellMapArchive::MergeFrom(from.undo_map());
    }
    if (from.has_redo_map()) {
      mutable_redo_map()->::TST::CellMapArchive::MergeFrom(from.redo_map());
    }
    if (from.has_desired_format()) {
      set_desired_format(from.desired_format());
    }
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandCoerceMultipleCellsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandCoerceMultipleCellsArchive::CopyFrom(const CommandCoerceMultipleCellsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandCoerceMultipleCellsArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_selection()) {
    if (!this->selection().IsInitialized()) return false;
  }
  if (has_undo_map()) {
    if (!this->undo_map().IsInitialized()) return false;
  }
  if (has_redo_map()) {
    if (!this->redo_map().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandCoerceMultipleCellsArchive::Swap(CommandCoerceMultipleCellsArchive* other) {
  if (other != this) {
    std::swap(selection_, other->selection_);
    std::swap(undo_map_, other->undo_map_);
    std::swap(redo_map_, other->redo_map_);
    std::swap(desired_format_, other->desired_format_);
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandCoerceMultipleCellsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandCoerceMultipleCellsArchive_descriptor_;
  metadata.reflection = CommandCoerceMultipleCellsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetControlCellsDisplayNumberFormatArchive::kSelectionFieldNumber;
const int CommandSetControlCellsDisplayNumberFormatArchive::kUndoMapFieldNumber;
const int CommandSetControlCellsDisplayNumberFormatArchive::kRedoMapFieldNumber;
const int CommandSetControlCellsDisplayNumberFormatArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandSetControlCellsDisplayNumberFormatArchive::CommandSetControlCellsDisplayNumberFormatArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetControlCellsDisplayNumberFormatArchive::InitAsDefaultInstance() {
  selection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
  undo_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  redo_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
}

CommandSetControlCellsDisplayNumberFormatArchive::CommandSetControlCellsDisplayNumberFormatArchive(const CommandSetControlCellsDisplayNumberFormatArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetControlCellsDisplayNumberFormatArchive::SharedCtor() {
  _cached_size_ = 0;
  selection_ = NULL;
  undo_map_ = NULL;
  redo_map_ = NULL;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetControlCellsDisplayNumberFormatArchive::~CommandSetControlCellsDisplayNumberFormatArchive() {
  SharedDtor();
}

void CommandSetControlCellsDisplayNumberFormatArchive::SharedDtor() {
  if (this != default_instance_) {
    delete selection_;
    delete undo_map_;
    delete redo_map_;
    delete super_;
  }
}

void CommandSetControlCellsDisplayNumberFormatArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetControlCellsDisplayNumberFormatArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetControlCellsDisplayNumberFormatArchive_descriptor_;
}

const CommandSetControlCellsDisplayNumberFormatArchive& CommandSetControlCellsDisplayNumberFormatArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetControlCellsDisplayNumberFormatArchive* CommandSetControlCellsDisplayNumberFormatArchive::default_instance_ = NULL;

CommandSetControlCellsDisplayNumberFormatArchive* CommandSetControlCellsDisplayNumberFormatArchive::New() const {
  return new CommandSetControlCellsDisplayNumberFormatArchive;
}

void CommandSetControlCellsDisplayNumberFormatArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selection()) {
      if (selection_ != NULL) selection_->::TST::SelectionArchive::Clear();
    }
    if (has_undo_map()) {
      if (undo_map_ != NULL) undo_map_->::TST::CellMapArchive::Clear();
    }
    if (has_redo_map()) {
      if (redo_map_ != NULL) redo_map_->::TST::CellMapArchive::Clear();
    }
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetControlCellsDisplayNumberFormatArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.SelectionArchive selection = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_undo_map;
        break;
      }

      // required .TST.CellMapArchive undo_map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_redo_map;
        break;
      }

      // required .TST.CellMapArchive redo_map = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_super;
        break;
      }

      // required .TST.TableCommandArchive super = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetControlCellsDisplayNumberFormatArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.SelectionArchive selection = 1;
  if (has_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selection(), output);
  }

  // required .TST.CellMapArchive undo_map = 2;
  if (has_undo_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->undo_map(), output);
  }

  // required .TST.CellMapArchive redo_map = 3;
  if (has_redo_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->redo_map(), output);
  }

  // required .TST.TableCommandArchive super = 6;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetControlCellsDisplayNumberFormatArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.SelectionArchive selection = 1;
  if (has_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selection(), target);
  }

  // required .TST.CellMapArchive undo_map = 2;
  if (has_undo_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->undo_map(), target);
  }

  // required .TST.CellMapArchive redo_map = 3;
  if (has_redo_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->redo_map(), target);
  }

  // required .TST.TableCommandArchive super = 6;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetControlCellsDisplayNumberFormatArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.SelectionArchive selection = 1;
    if (has_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selection());
    }

    // required .TST.CellMapArchive undo_map = 2;
    if (has_undo_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_map());
    }

    // required .TST.CellMapArchive redo_map = 3;
    if (has_redo_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_map());
    }

    // required .TST.TableCommandArchive super = 6;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetControlCellsDisplayNumberFormatArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetControlCellsDisplayNumberFormatArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetControlCellsDisplayNumberFormatArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetControlCellsDisplayNumberFormatArchive::MergeFrom(const CommandSetControlCellsDisplayNumberFormatArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selection()) {
      mutable_selection()->::TST::SelectionArchive::MergeFrom(from.selection());
    }
    if (from.has_undo_map()) {
      mutable_undo_map()->::TST::CellMapArchive::MergeFrom(from.undo_map());
    }
    if (from.has_redo_map()) {
      mutable_redo_map()->::TST::CellMapArchive::MergeFrom(from.redo_map());
    }
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetControlCellsDisplayNumberFormatArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetControlCellsDisplayNumberFormatArchive::CopyFrom(const CommandSetControlCellsDisplayNumberFormatArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetControlCellsDisplayNumberFormatArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_selection()) {
    if (!this->selection().IsInitialized()) return false;
  }
  if (has_undo_map()) {
    if (!this->undo_map().IsInitialized()) return false;
  }
  if (has_redo_map()) {
    if (!this->redo_map().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetControlCellsDisplayNumberFormatArchive::Swap(CommandSetControlCellsDisplayNumberFormatArchive* other) {
  if (other != this) {
    std::swap(selection_, other->selection_);
    std::swap(undo_map_, other->undo_map_);
    std::swap(redo_map_, other->redo_map_);
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetControlCellsDisplayNumberFormatArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetControlCellsDisplayNumberFormatArchive_descriptor_;
  metadata.reflection = CommandSetControlCellsDisplayNumberFormatArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetAutomaticFormatArchive::kSelectionFieldNumber;
const int CommandSetAutomaticFormatArchive::kUndoMapFieldNumber;
const int CommandSetAutomaticFormatArchive::kRedoMapFieldNumber;
const int CommandSetAutomaticFormatArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandSetAutomaticFormatArchive::CommandSetAutomaticFormatArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetAutomaticFormatArchive::InitAsDefaultInstance() {
  selection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
  undo_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  redo_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
}

CommandSetAutomaticFormatArchive::CommandSetAutomaticFormatArchive(const CommandSetAutomaticFormatArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetAutomaticFormatArchive::SharedCtor() {
  _cached_size_ = 0;
  selection_ = NULL;
  undo_map_ = NULL;
  redo_map_ = NULL;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetAutomaticFormatArchive::~CommandSetAutomaticFormatArchive() {
  SharedDtor();
}

void CommandSetAutomaticFormatArchive::SharedDtor() {
  if (this != default_instance_) {
    delete selection_;
    delete undo_map_;
    delete redo_map_;
    delete super_;
  }
}

void CommandSetAutomaticFormatArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetAutomaticFormatArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetAutomaticFormatArchive_descriptor_;
}

const CommandSetAutomaticFormatArchive& CommandSetAutomaticFormatArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetAutomaticFormatArchive* CommandSetAutomaticFormatArchive::default_instance_ = NULL;

CommandSetAutomaticFormatArchive* CommandSetAutomaticFormatArchive::New() const {
  return new CommandSetAutomaticFormatArchive;
}

void CommandSetAutomaticFormatArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selection()) {
      if (selection_ != NULL) selection_->::TST::SelectionArchive::Clear();
    }
    if (has_undo_map()) {
      if (undo_map_ != NULL) undo_map_->::TST::CellMapArchive::Clear();
    }
    if (has_redo_map()) {
      if (redo_map_ != NULL) redo_map_->::TST::CellMapArchive::Clear();
    }
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetAutomaticFormatArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.SelectionArchive selection = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_undo_map;
        break;
      }

      // required .TST.CellMapArchive undo_map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_redo_map;
        break;
      }

      // required .TST.CellMapArchive redo_map = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_super;
        break;
      }

      // required .TST.TableCommandArchive super = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetAutomaticFormatArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.SelectionArchive selection = 1;
  if (has_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selection(), output);
  }

  // required .TST.CellMapArchive undo_map = 2;
  if (has_undo_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->undo_map(), output);
  }

  // required .TST.CellMapArchive redo_map = 3;
  if (has_redo_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->redo_map(), output);
  }

  // required .TST.TableCommandArchive super = 6;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetAutomaticFormatArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.SelectionArchive selection = 1;
  if (has_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selection(), target);
  }

  // required .TST.CellMapArchive undo_map = 2;
  if (has_undo_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->undo_map(), target);
  }

  // required .TST.CellMapArchive redo_map = 3;
  if (has_redo_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->redo_map(), target);
  }

  // required .TST.TableCommandArchive super = 6;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetAutomaticFormatArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.SelectionArchive selection = 1;
    if (has_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selection());
    }

    // required .TST.CellMapArchive undo_map = 2;
    if (has_undo_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_map());
    }

    // required .TST.CellMapArchive redo_map = 3;
    if (has_redo_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_map());
    }

    // required .TST.TableCommandArchive super = 6;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetAutomaticFormatArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetAutomaticFormatArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetAutomaticFormatArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetAutomaticFormatArchive::MergeFrom(const CommandSetAutomaticFormatArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selection()) {
      mutable_selection()->::TST::SelectionArchive::MergeFrom(from.selection());
    }
    if (from.has_undo_map()) {
      mutable_undo_map()->::TST::CellMapArchive::MergeFrom(from.undo_map());
    }
    if (from.has_redo_map()) {
      mutable_redo_map()->::TST::CellMapArchive::MergeFrom(from.redo_map());
    }
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetAutomaticFormatArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetAutomaticFormatArchive::CopyFrom(const CommandSetAutomaticFormatArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetAutomaticFormatArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_selection()) {
    if (!this->selection().IsInitialized()) return false;
  }
  if (has_undo_map()) {
    if (!this->undo_map().IsInitialized()) return false;
  }
  if (has_redo_map()) {
    if (!this->redo_map().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetAutomaticFormatArchive::Swap(CommandSetAutomaticFormatArchive* other) {
  if (other != this) {
    std::swap(selection_, other->selection_);
    std::swap(undo_map_, other->undo_map_);
    std::swap(redo_map_, other->redo_map_);
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetAutomaticFormatArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetAutomaticFormatArchive_descriptor_;
  metadata.reflection = CommandSetAutomaticFormatArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetAutomaticDurationUnitsArchive::kSelectionFieldNumber;
const int CommandSetAutomaticDurationUnitsArchive::kUndoMapFieldNumber;
const int CommandSetAutomaticDurationUnitsArchive::kRedoMapFieldNumber;
const int CommandSetAutomaticDurationUnitsArchive::kAutomaticUnitsFieldNumber;
const int CommandSetAutomaticDurationUnitsArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandSetAutomaticDurationUnitsArchive::CommandSetAutomaticDurationUnitsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetAutomaticDurationUnitsArchive::InitAsDefaultInstance() {
  selection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
  undo_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  redo_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
}

CommandSetAutomaticDurationUnitsArchive::CommandSetAutomaticDurationUnitsArchive(const CommandSetAutomaticDurationUnitsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetAutomaticDurationUnitsArchive::SharedCtor() {
  _cached_size_ = 0;
  selection_ = NULL;
  undo_map_ = NULL;
  redo_map_ = NULL;
  automatic_units_ = false;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetAutomaticDurationUnitsArchive::~CommandSetAutomaticDurationUnitsArchive() {
  SharedDtor();
}

void CommandSetAutomaticDurationUnitsArchive::SharedDtor() {
  if (this != default_instance_) {
    delete selection_;
    delete undo_map_;
    delete redo_map_;
    delete super_;
  }
}

void CommandSetAutomaticDurationUnitsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetAutomaticDurationUnitsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetAutomaticDurationUnitsArchive_descriptor_;
}

const CommandSetAutomaticDurationUnitsArchive& CommandSetAutomaticDurationUnitsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetAutomaticDurationUnitsArchive* CommandSetAutomaticDurationUnitsArchive::default_instance_ = NULL;

CommandSetAutomaticDurationUnitsArchive* CommandSetAutomaticDurationUnitsArchive::New() const {
  return new CommandSetAutomaticDurationUnitsArchive;
}

void CommandSetAutomaticDurationUnitsArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_selection()) {
      if (selection_ != NULL) selection_->::TST::SelectionArchive::Clear();
    }
    if (has_undo_map()) {
      if (undo_map_ != NULL) undo_map_->::TST::CellMapArchive::Clear();
    }
    if (has_redo_map()) {
      if (redo_map_ != NULL) redo_map_->::TST::CellMapArchive::Clear();
    }
    automatic_units_ = false;
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetAutomaticDurationUnitsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.SelectionArchive selection = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_undo_map;
        break;
      }

      // required .TST.CellMapArchive undo_map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_redo_map;
        break;
      }

      // required .TST.CellMapArchive redo_map = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_automatic_units;
        break;
      }

      // optional bool automatic_units = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_automatic_units:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &automatic_units_)));
          set_has_automatic_units();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_super;
        break;
      }

      // required .TST.TableCommandArchive super = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetAutomaticDurationUnitsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.SelectionArchive selection = 1;
  if (has_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selection(), output);
  }

  // required .TST.CellMapArchive undo_map = 2;
  if (has_undo_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->undo_map(), output);
  }

  // required .TST.CellMapArchive redo_map = 3;
  if (has_redo_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->redo_map(), output);
  }

  // optional bool automatic_units = 4;
  if (has_automatic_units()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->automatic_units(), output);
  }

  // required .TST.TableCommandArchive super = 6;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetAutomaticDurationUnitsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.SelectionArchive selection = 1;
  if (has_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selection(), target);
  }

  // required .TST.CellMapArchive undo_map = 2;
  if (has_undo_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->undo_map(), target);
  }

  // required .TST.CellMapArchive redo_map = 3;
  if (has_redo_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->redo_map(), target);
  }

  // optional bool automatic_units = 4;
  if (has_automatic_units()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->automatic_units(), target);
  }

  // required .TST.TableCommandArchive super = 6;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetAutomaticDurationUnitsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.SelectionArchive selection = 1;
    if (has_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selection());
    }

    // required .TST.CellMapArchive undo_map = 2;
    if (has_undo_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_map());
    }

    // required .TST.CellMapArchive redo_map = 3;
    if (has_redo_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_map());
    }

    // optional bool automatic_units = 4;
    if (has_automatic_units()) {
      total_size += 1 + 1;
    }

    // required .TST.TableCommandArchive super = 6;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetAutomaticDurationUnitsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetAutomaticDurationUnitsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetAutomaticDurationUnitsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetAutomaticDurationUnitsArchive::MergeFrom(const CommandSetAutomaticDurationUnitsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selection()) {
      mutable_selection()->::TST::SelectionArchive::MergeFrom(from.selection());
    }
    if (from.has_undo_map()) {
      mutable_undo_map()->::TST::CellMapArchive::MergeFrom(from.undo_map());
    }
    if (from.has_redo_map()) {
      mutable_redo_map()->::TST::CellMapArchive::MergeFrom(from.redo_map());
    }
    if (from.has_automatic_units()) {
      set_automatic_units(from.automatic_units());
    }
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetAutomaticDurationUnitsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetAutomaticDurationUnitsArchive::CopyFrom(const CommandSetAutomaticDurationUnitsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetAutomaticDurationUnitsArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  if (has_selection()) {
    if (!this->selection().IsInitialized()) return false;
  }
  if (has_undo_map()) {
    if (!this->undo_map().IsInitialized()) return false;
  }
  if (has_redo_map()) {
    if (!this->redo_map().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetAutomaticDurationUnitsArchive::Swap(CommandSetAutomaticDurationUnitsArchive* other) {
  if (other != this) {
    std::swap(selection_, other->selection_);
    std::swap(undo_map_, other->undo_map_);
    std::swap(redo_map_, other->redo_map_);
    std::swap(automatic_units_, other->automatic_units_);
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetAutomaticDurationUnitsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetAutomaticDurationUnitsArchive_descriptor_;
  metadata.reflection = CommandSetAutomaticDurationUnitsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandReplaceCustomFormatArchive::kUndoMapFieldNumber;
const int CommandReplaceCustomFormatArchive::kRedoMapFieldNumber;
const int CommandReplaceCustomFormatArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandReplaceCustomFormatArchive::CommandReplaceCustomFormatArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandReplaceCustomFormatArchive::InitAsDefaultInstance() {
  undo_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  redo_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
}

CommandReplaceCustomFormatArchive::CommandReplaceCustomFormatArchive(const CommandReplaceCustomFormatArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandReplaceCustomFormatArchive::SharedCtor() {
  _cached_size_ = 0;
  undo_map_ = NULL;
  redo_map_ = NULL;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandReplaceCustomFormatArchive::~CommandReplaceCustomFormatArchive() {
  SharedDtor();
}

void CommandReplaceCustomFormatArchive::SharedDtor() {
  if (this != default_instance_) {
    delete undo_map_;
    delete redo_map_;
    delete super_;
  }
}

void CommandReplaceCustomFormatArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandReplaceCustomFormatArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandReplaceCustomFormatArchive_descriptor_;
}

const CommandReplaceCustomFormatArchive& CommandReplaceCustomFormatArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandReplaceCustomFormatArchive* CommandReplaceCustomFormatArchive::default_instance_ = NULL;

CommandReplaceCustomFormatArchive* CommandReplaceCustomFormatArchive::New() const {
  return new CommandReplaceCustomFormatArchive;
}

void CommandReplaceCustomFormatArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_undo_map()) {
      if (undo_map_ != NULL) undo_map_->::TST::CellMapArchive::Clear();
    }
    if (has_redo_map()) {
      if (redo_map_ != NULL) redo_map_->::TST::CellMapArchive::Clear();
    }
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandReplaceCustomFormatArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CellMapArchive undo_map = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_redo_map;
        break;
      }

      // required .TST.CellMapArchive redo_map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_super;
        break;
      }

      // required .TST.TableCommandArchive super = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandReplaceCustomFormatArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CellMapArchive undo_map = 1;
  if (has_undo_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->undo_map(), output);
  }

  // required .TST.CellMapArchive redo_map = 2;
  if (has_redo_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->redo_map(), output);
  }

  // required .TST.TableCommandArchive super = 6;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandReplaceCustomFormatArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CellMapArchive undo_map = 1;
  if (has_undo_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->undo_map(), target);
  }

  // required .TST.CellMapArchive redo_map = 2;
  if (has_redo_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->redo_map(), target);
  }

  // required .TST.TableCommandArchive super = 6;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandReplaceCustomFormatArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CellMapArchive undo_map = 1;
    if (has_undo_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_map());
    }

    // required .TST.CellMapArchive redo_map = 2;
    if (has_redo_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_map());
    }

    // required .TST.TableCommandArchive super = 6;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandReplaceCustomFormatArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandReplaceCustomFormatArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandReplaceCustomFormatArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandReplaceCustomFormatArchive::MergeFrom(const CommandReplaceCustomFormatArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_undo_map()) {
      mutable_undo_map()->::TST::CellMapArchive::MergeFrom(from.undo_map());
    }
    if (from.has_redo_map()) {
      mutable_redo_map()->::TST::CellMapArchive::MergeFrom(from.redo_map());
    }
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandReplaceCustomFormatArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandReplaceCustomFormatArchive::CopyFrom(const CommandReplaceCustomFormatArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReplaceCustomFormatArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_undo_map()) {
    if (!this->undo_map().IsInitialized()) return false;
  }
  if (has_redo_map()) {
    if (!this->redo_map().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandReplaceCustomFormatArchive::Swap(CommandReplaceCustomFormatArchive* other) {
  if (other != this) {
    std::swap(undo_map_, other->undo_map_);
    std::swap(redo_map_, other->redo_map_);
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandReplaceCustomFormatArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandReplaceCustomFormatArchive_descriptor_;
  metadata.reflection = CommandReplaceCustomFormatArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandInsertColumnsOrRowsArchive_StyleIndexPair::kStyleFieldNumber;
const int CommandInsertColumnsOrRowsArchive_StyleIndexPair::kIndexFieldNumber;
#endif  // !_MSC_VER

CommandInsertColumnsOrRowsArchive_StyleIndexPair::CommandInsertColumnsOrRowsArchive_StyleIndexPair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandInsertColumnsOrRowsArchive_StyleIndexPair::InitAsDefaultInstance() {
  style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandInsertColumnsOrRowsArchive_StyleIndexPair::CommandInsertColumnsOrRowsArchive_StyleIndexPair(const CommandInsertColumnsOrRowsArchive_StyleIndexPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandInsertColumnsOrRowsArchive_StyleIndexPair::SharedCtor() {
  _cached_size_ = 0;
  style_ = NULL;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandInsertColumnsOrRowsArchive_StyleIndexPair::~CommandInsertColumnsOrRowsArchive_StyleIndexPair() {
  SharedDtor();
}

void CommandInsertColumnsOrRowsArchive_StyleIndexPair::SharedDtor() {
  if (this != default_instance_) {
    delete style_;
  }
}

void CommandInsertColumnsOrRowsArchive_StyleIndexPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandInsertColumnsOrRowsArchive_StyleIndexPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandInsertColumnsOrRowsArchive_StyleIndexPair_descriptor_;
}

const CommandInsertColumnsOrRowsArchive_StyleIndexPair& CommandInsertColumnsOrRowsArchive_StyleIndexPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandInsertColumnsOrRowsArchive_StyleIndexPair* CommandInsertColumnsOrRowsArchive_StyleIndexPair::default_instance_ = NULL;

CommandInsertColumnsOrRowsArchive_StyleIndexPair* CommandInsertColumnsOrRowsArchive_StyleIndexPair::New() const {
  return new CommandInsertColumnsOrRowsArchive_StyleIndexPair;
}

void CommandInsertColumnsOrRowsArchive_StyleIndexPair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_style()) {
      if (style_ != NULL) style_->::TSP::Reference::Clear();
    }
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandInsertColumnsOrRowsArchive_StyleIndexPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Reference style = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required uint32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandInsertColumnsOrRowsArchive_StyleIndexPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Reference style = 1;
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->style(), output);
  }

  // required uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandInsertColumnsOrRowsArchive_StyleIndexPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Reference style = 1;
  if (has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->style(), target);
  }

  // required uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandInsertColumnsOrRowsArchive_StyleIndexPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.Reference style = 1;
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->style());
    }

    // required uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandInsertColumnsOrRowsArchive_StyleIndexPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandInsertColumnsOrRowsArchive_StyleIndexPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandInsertColumnsOrRowsArchive_StyleIndexPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandInsertColumnsOrRowsArchive_StyleIndexPair::MergeFrom(const CommandInsertColumnsOrRowsArchive_StyleIndexPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_style()) {
      mutable_style()->::TSP::Reference::MergeFrom(from.style());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandInsertColumnsOrRowsArchive_StyleIndexPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandInsertColumnsOrRowsArchive_StyleIndexPair::CopyFrom(const CommandInsertColumnsOrRowsArchive_StyleIndexPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandInsertColumnsOrRowsArchive_StyleIndexPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_style()) {
    if (!this->style().IsInitialized()) return false;
  }
  return true;
}

void CommandInsertColumnsOrRowsArchive_StyleIndexPair::Swap(CommandInsertColumnsOrRowsArchive_StyleIndexPair* other) {
  if (other != this) {
    std::swap(style_, other->style_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandInsertColumnsOrRowsArchive_StyleIndexPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandInsertColumnsOrRowsArchive_StyleIndexPair_descriptor_;
  metadata.reflection = CommandInsertColumnsOrRowsArchive_StyleIndexPair_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CommandInsertColumnsOrRowsArchive::kDirectionFieldNumber;
const int CommandInsertColumnsOrRowsArchive::kIndexFieldNumber;
const int CommandInsertColumnsOrRowsArchive::kCountFieldNumber;
const int CommandInsertColumnsOrRowsArchive::kSizeFieldNumber;
const int CommandInsertColumnsOrRowsArchive::kBeforeFieldNumber;
const int CommandInsertColumnsOrRowsArchive::kHeaderCountFieldNumber;
const int CommandInsertColumnsOrRowsArchive::kHeadersAddedFieldNumber;
const int CommandInsertColumnsOrRowsArchive::kFooterCountFieldNumber;
const int CommandInsertColumnsOrRowsArchive::kFootersAddedFieldNumber;
const int CommandInsertColumnsOrRowsArchive::kRowColumnStyleFieldNumber;
const int CommandInsertColumnsOrRowsArchive::kCellStyleRedoFieldNumber;
const int CommandInsertColumnsOrRowsArchive::kSuperFieldNumber;
const int CommandInsertColumnsOrRowsArchive::kFormulaRewriteCommandFieldNumber;
const int CommandInsertColumnsOrRowsArchive::kWidthFactorFieldNumber;
const int CommandInsertColumnsOrRowsArchive::kHeightFactorFieldNumber;
const int CommandInsertColumnsOrRowsArchive::kAllowHorizontalAutosizeFieldNumber;
const int CommandInsertColumnsOrRowsArchive::kInheritStylesFieldNumber;
const int CommandInsertColumnsOrRowsArchive::kInheritFormatsFieldNumber;
const int CommandInsertColumnsOrRowsArchive::kInheritFormulasFieldNumber;
const int CommandInsertColumnsOrRowsArchive::kCellStyleIndexPairsFieldNumber;
const int CommandInsertColumnsOrRowsArchive::kTextStyleIndexPairsFieldNumber;
const int CommandInsertColumnsOrRowsArchive::kSizesFieldNumber;
#endif  // !_MSC_VER

CommandInsertColumnsOrRowsArchive::CommandInsertColumnsOrRowsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandInsertColumnsOrRowsArchive::InitAsDefaultInstance() {
  row_column_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  cell_style_redo_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  formula_rewrite_command_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandInsertColumnsOrRowsArchive::CommandInsertColumnsOrRowsArchive(const CommandInsertColumnsOrRowsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandInsertColumnsOrRowsArchive::SharedCtor() {
  _cached_size_ = 0;
  direction_ = 0;
  index_ = 0u;
  count_ = 0u;
  size_ = 0;
  before_ = false;
  header_count_ = 0u;
  headers_added_ = 0u;
  footer_count_ = 0u;
  footers_added_ = 0u;
  row_column_style_ = NULL;
  cell_style_redo_ = NULL;
  super_ = NULL;
  formula_rewrite_command_ = NULL;
  width_factor_ = 0;
  height_factor_ = 0;
  allow_horizontal_autosize_ = false;
  inherit_styles_ = false;
  inherit_formats_ = false;
  inherit_formulas_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandInsertColumnsOrRowsArchive::~CommandInsertColumnsOrRowsArchive() {
  SharedDtor();
}

void CommandInsertColumnsOrRowsArchive::SharedDtor() {
  if (this != default_instance_) {
    delete row_column_style_;
    delete cell_style_redo_;
    delete super_;
    delete formula_rewrite_command_;
  }
}

void CommandInsertColumnsOrRowsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandInsertColumnsOrRowsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandInsertColumnsOrRowsArchive_descriptor_;
}

const CommandInsertColumnsOrRowsArchive& CommandInsertColumnsOrRowsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandInsertColumnsOrRowsArchive* CommandInsertColumnsOrRowsArchive::default_instance_ = NULL;

CommandInsertColumnsOrRowsArchive* CommandInsertColumnsOrRowsArchive::New() const {
  return new CommandInsertColumnsOrRowsArchive;
}

void CommandInsertColumnsOrRowsArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    direction_ = 0;
    index_ = 0u;
    count_ = 0u;
    size_ = 0;
    before_ = false;
    header_count_ = 0u;
    headers_added_ = 0u;
    footer_count_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    footers_added_ = 0u;
    if (has_row_column_style()) {
      if (row_column_style_ != NULL) row_column_style_->::TSP::Reference::Clear();
    }
    if (has_cell_style_redo()) {
      if (cell_style_redo_ != NULL) cell_style_redo_->::TST::CellMapArchive::Clear();
    }
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_formula_rewrite_command()) {
      if (formula_rewrite_command_ != NULL) formula_rewrite_command_->::TSP::Reference::Clear();
    }
    width_factor_ = 0;
    height_factor_ = 0;
    allow_horizontal_autosize_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    inherit_styles_ = false;
    inherit_formats_ = false;
    inherit_formulas_ = false;
  }
  cell_style_index_pairs_.Clear();
  text_style_index_pairs_.Clear();
  sizes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandInsertColumnsOrRowsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CommandDirectionArchive direction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TST::CommandDirectionArchive_IsValid(value)) {
            set_direction(static_cast< ::TST::CommandDirectionArchive >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required uint32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_size;
        break;
      }

      // required float size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_before;
        break;
      }

      // required bool before = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_before:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &before_)));
          set_has_before();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_row_column_style;
        break;
      }

      // optional .TSP.Reference row_column_style = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_row_column_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_row_column_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_cell_style_redo;
        break;
      }

      // optional .TST.CellMapArchive cell_style_redo = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_style_redo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell_style_redo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_super;
        break;
      }

      // required .TST.TableCommandArchive super = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_header_count;
        break;
      }

      // required uint32 header_count = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_header_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &header_count_)));
          set_has_header_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_headers_added;
        break;
      }

      // required uint32 headers_added = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headers_added:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headers_added_)));
          set_has_headers_added();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_footer_count;
        break;
      }

      // required uint32 footer_count = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_footer_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &footer_count_)));
          set_has_footer_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_footers_added;
        break;
      }

      // required uint32 footers_added = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_footers_added:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &footers_added_)));
          set_has_footers_added();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_formula_rewrite_command;
        break;
      }

      // optional .TSP.Reference formula_rewrite_command = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formula_rewrite_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_formula_rewrite_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_width_factor;
        break;
      }

      // required float width_factor = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_width_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_factor_)));
          set_has_width_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_height_factor;
        break;
      }

      // required float height_factor = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_height_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_factor_)));
          set_has_height_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_allow_horizontal_autosize;
        break;
      }

      // optional bool allow_horizontal_autosize = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allow_horizontal_autosize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_horizontal_autosize_)));
          set_has_allow_horizontal_autosize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_inherit_styles;
        break;
      }

      // optional bool inherit_styles = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inherit_styles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inherit_styles_)));
          set_has_inherit_styles();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_inherit_formats;
        break;
      }

      // optional bool inherit_formats = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inherit_formats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inherit_formats_)));
          set_has_inherit_formats();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_cell_style_index_pairs;
        break;
      }

      // repeated .TST.CommandInsertColumnsOrRowsArchive.StyleIndexPair cell_style_index_pairs = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_style_index_pairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cell_style_index_pairs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_cell_style_index_pairs;
        if (input->ExpectTag(178)) goto parse_text_style_index_pairs;
        break;
      }

      // repeated .TST.CommandInsertColumnsOrRowsArchive.StyleIndexPair text_style_index_pairs = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text_style_index_pairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_text_style_index_pairs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_text_style_index_pairs;
        if (input->ExpectTag(185)) goto parse_sizes;
        break;
      }

      // repeated double sizes = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sizes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 185, input, this->mutable_sizes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_sizes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_sizes;
        if (input->ExpectTag(192)) goto parse_inherit_formulas;
        break;
      }

      // optional bool inherit_formulas = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inherit_formulas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inherit_formulas_)));
          set_has_inherit_formulas();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandInsertColumnsOrRowsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CommandDirectionArchive direction = 1;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->direction(), output);
  }

  // required uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // required float size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->size(), output);
  }

  // required bool before = 5;
  if (has_before()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->before(), output);
  }

  // optional .TSP.Reference row_column_style = 8;
  if (has_row_column_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->row_column_style(), output);
  }

  // optional .TST.CellMapArchive cell_style_redo = 9;
  if (has_cell_style_redo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->cell_style_redo(), output);
  }

  // required .TST.TableCommandArchive super = 10;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->super(), output);
  }

  // required uint32 header_count = 11;
  if (has_header_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->header_count(), output);
  }

  // required uint32 headers_added = 12;
  if (has_headers_added()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->headers_added(), output);
  }

  // required uint32 footer_count = 13;
  if (has_footer_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->footer_count(), output);
  }

  // required uint32 footers_added = 14;
  if (has_footers_added()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->footers_added(), output);
  }

  // optional .TSP.Reference formula_rewrite_command = 15;
  if (has_formula_rewrite_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->formula_rewrite_command(), output);
  }

  // required float width_factor = 16;
  if (has_width_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->width_factor(), output);
  }

  // required float height_factor = 17;
  if (has_height_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->height_factor(), output);
  }

  // optional bool allow_horizontal_autosize = 18;
  if (has_allow_horizontal_autosize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->allow_horizontal_autosize(), output);
  }

  // optional bool inherit_styles = 19;
  if (has_inherit_styles()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->inherit_styles(), output);
  }

  // optional bool inherit_formats = 20;
  if (has_inherit_formats()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->inherit_formats(), output);
  }

  // repeated .TST.CommandInsertColumnsOrRowsArchive.StyleIndexPair cell_style_index_pairs = 21;
  for (int i = 0; i < this->cell_style_index_pairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->cell_style_index_pairs(i), output);
  }

  // repeated .TST.CommandInsertColumnsOrRowsArchive.StyleIndexPair text_style_index_pairs = 22;
  for (int i = 0; i < this->text_style_index_pairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->text_style_index_pairs(i), output);
  }

  // repeated double sizes = 23;
  for (int i = 0; i < this->sizes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      23, this->sizes(i), output);
  }

  // optional bool inherit_formulas = 24;
  if (has_inherit_formulas()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->inherit_formulas(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandInsertColumnsOrRowsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CommandDirectionArchive direction = 1;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->direction(), target);
  }

  // required uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // required float size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->size(), target);
  }

  // required bool before = 5;
  if (has_before()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->before(), target);
  }

  // optional .TSP.Reference row_column_style = 8;
  if (has_row_column_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->row_column_style(), target);
  }

  // optional .TST.CellMapArchive cell_style_redo = 9;
  if (has_cell_style_redo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->cell_style_redo(), target);
  }

  // required .TST.TableCommandArchive super = 10;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->super(), target);
  }

  // required uint32 header_count = 11;
  if (has_header_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->header_count(), target);
  }

  // required uint32 headers_added = 12;
  if (has_headers_added()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->headers_added(), target);
  }

  // required uint32 footer_count = 13;
  if (has_footer_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->footer_count(), target);
  }

  // required uint32 footers_added = 14;
  if (has_footers_added()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->footers_added(), target);
  }

  // optional .TSP.Reference formula_rewrite_command = 15;
  if (has_formula_rewrite_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->formula_rewrite_command(), target);
  }

  // required float width_factor = 16;
  if (has_width_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->width_factor(), target);
  }

  // required float height_factor = 17;
  if (has_height_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->height_factor(), target);
  }

  // optional bool allow_horizontal_autosize = 18;
  if (has_allow_horizontal_autosize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->allow_horizontal_autosize(), target);
  }

  // optional bool inherit_styles = 19;
  if (has_inherit_styles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->inherit_styles(), target);
  }

  // optional bool inherit_formats = 20;
  if (has_inherit_formats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->inherit_formats(), target);
  }

  // repeated .TST.CommandInsertColumnsOrRowsArchive.StyleIndexPair cell_style_index_pairs = 21;
  for (int i = 0; i < this->cell_style_index_pairs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->cell_style_index_pairs(i), target);
  }

  // repeated .TST.CommandInsertColumnsOrRowsArchive.StyleIndexPair text_style_index_pairs = 22;
  for (int i = 0; i < this->text_style_index_pairs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->text_style_index_pairs(i), target);
  }

  // repeated double sizes = 23;
  for (int i = 0; i < this->sizes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(23, this->sizes(i), target);
  }

  // optional bool inherit_formulas = 24;
  if (has_inherit_formulas()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->inherit_formulas(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandInsertColumnsOrRowsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CommandDirectionArchive direction = 1;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

    // required uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required float size = 4;
    if (has_size()) {
      total_size += 1 + 4;
    }

    // required bool before = 5;
    if (has_before()) {
      total_size += 1 + 1;
    }

    // required uint32 header_count = 11;
    if (has_header_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->header_count());
    }

    // required uint32 headers_added = 12;
    if (has_headers_added()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headers_added());
    }

    // required uint32 footer_count = 13;
    if (has_footer_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->footer_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 footers_added = 14;
    if (has_footers_added()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->footers_added());
    }

    // optional .TSP.Reference row_column_style = 8;
    if (has_row_column_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->row_column_style());
    }

    // optional .TST.CellMapArchive cell_style_redo = 9;
    if (has_cell_style_redo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cell_style_redo());
    }

    // required .TST.TableCommandArchive super = 10;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference formula_rewrite_command = 15;
    if (has_formula_rewrite_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formula_rewrite_command());
    }

    // required float width_factor = 16;
    if (has_width_factor()) {
      total_size += 2 + 4;
    }

    // required float height_factor = 17;
    if (has_height_factor()) {
      total_size += 2 + 4;
    }

    // optional bool allow_horizontal_autosize = 18;
    if (has_allow_horizontal_autosize()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool inherit_styles = 19;
    if (has_inherit_styles()) {
      total_size += 2 + 1;
    }

    // optional bool inherit_formats = 20;
    if (has_inherit_formats()) {
      total_size += 2 + 1;
    }

    // optional bool inherit_formulas = 24;
    if (has_inherit_formulas()) {
      total_size += 2 + 1;
    }

  }
  // repeated .TST.CommandInsertColumnsOrRowsArchive.StyleIndexPair cell_style_index_pairs = 21;
  total_size += 2 * this->cell_style_index_pairs_size();
  for (int i = 0; i < this->cell_style_index_pairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cell_style_index_pairs(i));
  }

  // repeated .TST.CommandInsertColumnsOrRowsArchive.StyleIndexPair text_style_index_pairs = 22;
  total_size += 2 * this->text_style_index_pairs_size();
  for (int i = 0; i < this->text_style_index_pairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->text_style_index_pairs(i));
  }

  // repeated double sizes = 23;
  {
    int data_size = 0;
    data_size = 8 * this->sizes_size();
    total_size += 2 * this->sizes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandInsertColumnsOrRowsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandInsertColumnsOrRowsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandInsertColumnsOrRowsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandInsertColumnsOrRowsArchive::MergeFrom(const CommandInsertColumnsOrRowsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  cell_style_index_pairs_.MergeFrom(from.cell_style_index_pairs_);
  text_style_index_pairs_.MergeFrom(from.text_style_index_pairs_);
  sizes_.MergeFrom(from.sizes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_before()) {
      set_before(from.before());
    }
    if (from.has_header_count()) {
      set_header_count(from.header_count());
    }
    if (from.has_headers_added()) {
      set_headers_added(from.headers_added());
    }
    if (from.has_footer_count()) {
      set_footer_count(from.footer_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_footers_added()) {
      set_footers_added(from.footers_added());
    }
    if (from.has_row_column_style()) {
      mutable_row_column_style()->::TSP::Reference::MergeFrom(from.row_column_style());
    }
    if (from.has_cell_style_redo()) {
      mutable_cell_style_redo()->::TST::CellMapArchive::MergeFrom(from.cell_style_redo());
    }
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_formula_rewrite_command()) {
      mutable_formula_rewrite_command()->::TSP::Reference::MergeFrom(from.formula_rewrite_command());
    }
    if (from.has_width_factor()) {
      set_width_factor(from.width_factor());
    }
    if (from.has_height_factor()) {
      set_height_factor(from.height_factor());
    }
    if (from.has_allow_horizontal_autosize()) {
      set_allow_horizontal_autosize(from.allow_horizontal_autosize());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_inherit_styles()) {
      set_inherit_styles(from.inherit_styles());
    }
    if (from.has_inherit_formats()) {
      set_inherit_formats(from.inherit_formats());
    }
    if (from.has_inherit_formulas()) {
      set_inherit_formulas(from.inherit_formulas());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandInsertColumnsOrRowsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandInsertColumnsOrRowsArchive::CopyFrom(const CommandInsertColumnsOrRowsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandInsertColumnsOrRowsArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x000069ff) != 0x000069ff) return false;

  if (has_row_column_style()) {
    if (!this->row_column_style().IsInitialized()) return false;
  }
  if (has_cell_style_redo()) {
    if (!this->cell_style_redo().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_formula_rewrite_command()) {
    if (!this->formula_rewrite_command().IsInitialized()) return false;
  }
  for (int i = 0; i < cell_style_index_pairs_size(); i++) {
    if (!this->cell_style_index_pairs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < text_style_index_pairs_size(); i++) {
    if (!this->text_style_index_pairs(i).IsInitialized()) return false;
  }
  return true;
}

void CommandInsertColumnsOrRowsArchive::Swap(CommandInsertColumnsOrRowsArchive* other) {
  if (other != this) {
    std::swap(direction_, other->direction_);
    std::swap(index_, other->index_);
    std::swap(count_, other->count_);
    std::swap(size_, other->size_);
    std::swap(before_, other->before_);
    std::swap(header_count_, other->header_count_);
    std::swap(headers_added_, other->headers_added_);
    std::swap(footer_count_, other->footer_count_);
    std::swap(footers_added_, other->footers_added_);
    std::swap(row_column_style_, other->row_column_style_);
    std::swap(cell_style_redo_, other->cell_style_redo_);
    std::swap(super_, other->super_);
    std::swap(formula_rewrite_command_, other->formula_rewrite_command_);
    std::swap(width_factor_, other->width_factor_);
    std::swap(height_factor_, other->height_factor_);
    std::swap(allow_horizontal_autosize_, other->allow_horizontal_autosize_);
    std::swap(inherit_styles_, other->inherit_styles_);
    std::swap(inherit_formats_, other->inherit_formats_);
    std::swap(inherit_formulas_, other->inherit_formulas_);
    cell_style_index_pairs_.Swap(&other->cell_style_index_pairs_);
    text_style_index_pairs_.Swap(&other->text_style_index_pairs_);
    sizes_.Swap(&other->sizes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandInsertColumnsOrRowsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandInsertColumnsOrRowsArchive_descriptor_;
  metadata.reflection = CommandInsertColumnsOrRowsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandPasteArchive::kUserSelectionFieldNumber;
const int CommandPasteArchive::kFinalSelectionFieldNumber;
const int CommandPasteArchive::kUndoCellMapFieldNumber;
const int CommandPasteArchive::kRedoCellMapFieldNumber;
const int CommandPasteArchive::kCommandUndoFieldNumber;
const int CommandPasteArchive::kInvalidateCommentsFieldNumber;
const int CommandPasteArchive::kSuperFieldNumber;
const int CommandPasteArchive::kFormulaRewriteCommandsFieldNumber;
#endif  // !_MSC_VER

CommandPasteArchive::CommandPasteArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandPasteArchive::InitAsDefaultInstance() {
  user_selection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
  final_selection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
  undo_cell_map_ = const_cast< ::TST::TiledCellMapArchive*>(&::TST::TiledCellMapArchive::default_instance());
  redo_cell_map_ = const_cast< ::TST::TiledCellMapArchive*>(&::TST::TiledCellMapArchive::default_instance());
  command_undo_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
}

CommandPasteArchive::CommandPasteArchive(const CommandPasteArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandPasteArchive::SharedCtor() {
  _cached_size_ = 0;
  user_selection_ = NULL;
  final_selection_ = NULL;
  undo_cell_map_ = NULL;
  redo_cell_map_ = NULL;
  command_undo_ = NULL;
  invalidate_comments_ = false;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandPasteArchive::~CommandPasteArchive() {
  SharedDtor();
}

void CommandPasteArchive::SharedDtor() {
  if (this != default_instance_) {
    delete user_selection_;
    delete final_selection_;
    delete undo_cell_map_;
    delete redo_cell_map_;
    delete command_undo_;
    delete super_;
  }
}

void CommandPasteArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandPasteArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandPasteArchive_descriptor_;
}

const CommandPasteArchive& CommandPasteArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandPasteArchive* CommandPasteArchive::default_instance_ = NULL;

CommandPasteArchive* CommandPasteArchive::New() const {
  return new CommandPasteArchive;
}

void CommandPasteArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_selection()) {
      if (user_selection_ != NULL) user_selection_->::TST::SelectionArchive::Clear();
    }
    if (has_final_selection()) {
      if (final_selection_ != NULL) final_selection_->::TST::SelectionArchive::Clear();
    }
    if (has_undo_cell_map()) {
      if (undo_cell_map_ != NULL) undo_cell_map_->::TST::TiledCellMapArchive::Clear();
    }
    if (has_redo_cell_map()) {
      if (redo_cell_map_ != NULL) redo_cell_map_->::TST::TiledCellMapArchive::Clear();
    }
    if (has_command_undo()) {
      if (command_undo_ != NULL) command_undo_->::TSP::Reference::Clear();
    }
    invalidate_comments_ = false;
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
  }
  formula_rewrite_commands_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandPasteArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.SelectionArchive user_selection = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_final_selection;
        break;
      }

      // required .TST.SelectionArchive final_selection = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_final_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_final_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_undo_cell_map;
        break;
      }

      // required .TST.TiledCellMapArchive undo_cell_map = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_redo_cell_map;
        break;
      }

      // required .TST.TiledCellMapArchive redo_cell_map = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_command_undo;
        break;
      }

      // optional .TSP.Reference command_undo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command_undo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command_undo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_invalidate_comments;
        break;
      }

      // required bool invalidate_comments = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invalidate_comments:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &invalidate_comments_)));
          set_has_invalidate_comments();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_super;
        break;
      }

      // required .TST.TableCommandArchive super = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_formula_rewrite_commands;
        break;
      }

      // repeated .TSP.Reference formula_rewrite_commands = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formula_rewrite_commands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_formula_rewrite_commands()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_formula_rewrite_commands;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandPasteArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.SelectionArchive user_selection = 1;
  if (has_user_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_selection(), output);
  }

  // required .TST.SelectionArchive final_selection = 2;
  if (has_final_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->final_selection(), output);
  }

  // required .TST.TiledCellMapArchive undo_cell_map = 3;
  if (has_undo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->undo_cell_map(), output);
  }

  // required .TST.TiledCellMapArchive redo_cell_map = 4;
  if (has_redo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->redo_cell_map(), output);
  }

  // optional .TSP.Reference command_undo = 6;
  if (has_command_undo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->command_undo(), output);
  }

  // required bool invalidate_comments = 7;
  if (has_invalidate_comments()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->invalidate_comments(), output);
  }

  // required .TST.TableCommandArchive super = 11;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->super(), output);
  }

  // repeated .TSP.Reference formula_rewrite_commands = 15;
  for (int i = 0; i < this->formula_rewrite_commands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->formula_rewrite_commands(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandPasteArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.SelectionArchive user_selection = 1;
  if (has_user_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_selection(), target);
  }

  // required .TST.SelectionArchive final_selection = 2;
  if (has_final_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->final_selection(), target);
  }

  // required .TST.TiledCellMapArchive undo_cell_map = 3;
  if (has_undo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->undo_cell_map(), target);
  }

  // required .TST.TiledCellMapArchive redo_cell_map = 4;
  if (has_redo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->redo_cell_map(), target);
  }

  // optional .TSP.Reference command_undo = 6;
  if (has_command_undo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->command_undo(), target);
  }

  // required bool invalidate_comments = 7;
  if (has_invalidate_comments()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->invalidate_comments(), target);
  }

  // required .TST.TableCommandArchive super = 11;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->super(), target);
  }

  // repeated .TSP.Reference formula_rewrite_commands = 15;
  for (int i = 0; i < this->formula_rewrite_commands_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->formula_rewrite_commands(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandPasteArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.SelectionArchive user_selection = 1;
    if (has_user_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_selection());
    }

    // required .TST.SelectionArchive final_selection = 2;
    if (has_final_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->final_selection());
    }

    // required .TST.TiledCellMapArchive undo_cell_map = 3;
    if (has_undo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_cell_map());
    }

    // required .TST.TiledCellMapArchive redo_cell_map = 4;
    if (has_redo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_cell_map());
    }

    // optional .TSP.Reference command_undo = 6;
    if (has_command_undo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command_undo());
    }

    // required bool invalidate_comments = 7;
    if (has_invalidate_comments()) {
      total_size += 1 + 1;
    }

    // required .TST.TableCommandArchive super = 11;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  // repeated .TSP.Reference formula_rewrite_commands = 15;
  total_size += 1 * this->formula_rewrite_commands_size();
  for (int i = 0; i < this->formula_rewrite_commands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->formula_rewrite_commands(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandPasteArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandPasteArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandPasteArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandPasteArchive::MergeFrom(const CommandPasteArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  formula_rewrite_commands_.MergeFrom(from.formula_rewrite_commands_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_selection()) {
      mutable_user_selection()->::TST::SelectionArchive::MergeFrom(from.user_selection());
    }
    if (from.has_final_selection()) {
      mutable_final_selection()->::TST::SelectionArchive::MergeFrom(from.final_selection());
    }
    if (from.has_undo_cell_map()) {
      mutable_undo_cell_map()->::TST::TiledCellMapArchive::MergeFrom(from.undo_cell_map());
    }
    if (from.has_redo_cell_map()) {
      mutable_redo_cell_map()->::TST::TiledCellMapArchive::MergeFrom(from.redo_cell_map());
    }
    if (from.has_command_undo()) {
      mutable_command_undo()->::TSP::Reference::MergeFrom(from.command_undo());
    }
    if (from.has_invalidate_comments()) {
      set_invalidate_comments(from.invalidate_comments());
    }
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandPasteArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandPasteArchive::CopyFrom(const CommandPasteArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPasteArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000006f) != 0x0000006f) return false;

  if (has_user_selection()) {
    if (!this->user_selection().IsInitialized()) return false;
  }
  if (has_final_selection()) {
    if (!this->final_selection().IsInitialized()) return false;
  }
  if (has_undo_cell_map()) {
    if (!this->undo_cell_map().IsInitialized()) return false;
  }
  if (has_redo_cell_map()) {
    if (!this->redo_cell_map().IsInitialized()) return false;
  }
  if (has_command_undo()) {
    if (!this->command_undo().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  for (int i = 0; i < formula_rewrite_commands_size(); i++) {
    if (!this->formula_rewrite_commands(i).IsInitialized()) return false;
  }
  return true;
}

void CommandPasteArchive::Swap(CommandPasteArchive* other) {
  if (other != this) {
    std::swap(user_selection_, other->user_selection_);
    std::swap(final_selection_, other->final_selection_);
    std::swap(undo_cell_map_, other->undo_cell_map_);
    std::swap(redo_cell_map_, other->redo_cell_map_);
    std::swap(command_undo_, other->command_undo_);
    std::swap(invalidate_comments_, other->invalidate_comments_);
    std::swap(super_, other->super_);
    formula_rewrite_commands_.Swap(&other->formula_rewrite_commands_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandPasteArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandPasteArchive_descriptor_;
  metadata.reflection = CommandPasteArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandRemoveColumnsOrRowsArchive::kSuperFieldNumber;
const int CommandRemoveColumnsOrRowsArchive::kDirectionFieldNumber;
const int CommandRemoveColumnsOrRowsArchive::kIndicesToRemoveFieldNumber;
const int CommandRemoveColumnsOrRowsArchive::kCellMapFieldNumber;
const int CommandRemoveColumnsOrRowsArchive::kOldgeomFieldNumber;
const int CommandRemoveColumnsOrRowsArchive::kNewgeomFieldNumber;
const int CommandRemoveColumnsOrRowsArchive::kSubsizesFieldNumber;
const int CommandRemoveColumnsOrRowsArchive::kFormulaRewriteCommandFieldNumber;
const int CommandRemoveColumnsOrRowsArchive::kWidthFactorFieldNumber;
const int CommandRemoveColumnsOrRowsArchive::kHeightFactorFieldNumber;
const int CommandRemoveColumnsOrRowsArchive::kAllowHorizontalAutosizeFieldNumber;
const int CommandRemoveColumnsOrRowsArchive::kUndoMergeMapFieldNumber;
const int CommandRemoveColumnsOrRowsArchive::kRedoMergeMapFieldNumber;
const int CommandRemoveColumnsOrRowsArchive::kHidingActionsFieldNumber;
const int CommandRemoveColumnsOrRowsArchive::kOrigFilterSetFieldNumber;
const int CommandRemoveColumnsOrRowsArchive::kUndoCommandCollectorFieldNumber;
#endif  // !_MSC_VER

CommandRemoveColumnsOrRowsArchive::CommandRemoveColumnsOrRowsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandRemoveColumnsOrRowsArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  indices_to_remove_ = const_cast< ::TSP::IndexSet*>(&::TSP::IndexSet::default_instance());
  cellmap_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  oldgeom_ = const_cast< ::TSD::GeometryArchive*>(&::TSD::GeometryArchive::default_instance());
  newgeom_ = const_cast< ::TSD::GeometryArchive*>(&::TSD::GeometryArchive::default_instance());
  formula_rewrite_command_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  undo_merge_map_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  redo_merge_map_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  orig_filter_set_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandRemoveColumnsOrRowsArchive::CommandRemoveColumnsOrRowsArchive(const CommandRemoveColumnsOrRowsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandRemoveColumnsOrRowsArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  direction_ = 0;
  indices_to_remove_ = NULL;
  cellmap_ = NULL;
  oldgeom_ = NULL;
  newgeom_ = NULL;
  formula_rewrite_command_ = NULL;
  width_factor_ = 0;
  height_factor_ = 0;
  allow_horizontal_autosize_ = false;
  undo_merge_map_ = NULL;
  redo_merge_map_ = NULL;
  orig_filter_set_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandRemoveColumnsOrRowsArchive::~CommandRemoveColumnsOrRowsArchive() {
  SharedDtor();
}

void CommandRemoveColumnsOrRowsArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete indices_to_remove_;
    delete cellmap_;
    delete oldgeom_;
    delete newgeom_;
    delete formula_rewrite_command_;
    delete undo_merge_map_;
    delete redo_merge_map_;
    delete orig_filter_set_;
  }
}

void CommandRemoveColumnsOrRowsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandRemoveColumnsOrRowsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandRemoveColumnsOrRowsArchive_descriptor_;
}

const CommandRemoveColumnsOrRowsArchive& CommandRemoveColumnsOrRowsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandRemoveColumnsOrRowsArchive* CommandRemoveColumnsOrRowsArchive::default_instance_ = NULL;

CommandRemoveColumnsOrRowsArchive* CommandRemoveColumnsOrRowsArchive::New() const {
  return new CommandRemoveColumnsOrRowsArchive;
}

void CommandRemoveColumnsOrRowsArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    direction_ = 0;
    if (has_indices_to_remove()) {
      if (indices_to_remove_ != NULL) indices_to_remove_->::TSP::IndexSet::Clear();
    }
    if (has_cellmap()) {
      if (cellmap_ != NULL) cellmap_->::TST::CellMapArchive::Clear();
    }
    if (has_oldgeom()) {
      if (oldgeom_ != NULL) oldgeom_->::TSD::GeometryArchive::Clear();
    }
    if (has_newgeom()) {
      if (newgeom_ != NULL) newgeom_->::TSD::GeometryArchive::Clear();
    }
    if (has_formula_rewrite_command()) {
      if (formula_rewrite_command_ != NULL) formula_rewrite_command_->::TSP::Reference::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    width_factor_ = 0;
    height_factor_ = 0;
    allow_horizontal_autosize_ = false;
    if (has_undo_merge_map()) {
      if (undo_merge_map_ != NULL) undo_merge_map_->::TSP::Reference::Clear();
    }
    if (has_redo_merge_map()) {
      if (redo_merge_map_ != NULL) redo_merge_map_->::TSP::Reference::Clear();
    }
    if (has_orig_filter_set()) {
      if (orig_filter_set_ != NULL) orig_filter_set_->::TSP::Reference::Clear();
    }
  }
  subsizes_.Clear();
  hiding_actions_.Clear();
  undo_command_collector_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandRemoveColumnsOrRowsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_direction;
        break;
      }

      // required .TST.CommandDirectionArchive direction = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TST::CommandDirectionArchive_IsValid(value)) {
            set_direction(static_cast< ::TST::CommandDirectionArchive >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_indices_to_remove;
        break;
      }

      // required .TSP.IndexSet indices_to_remove = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_indices_to_remove:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_indices_to_remove()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cellMap;
        break;
      }

      // optional .TST.CellMapArchive cellMap = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cellMap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cellmap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_oldgeom;
        break;
      }

      // required .TSD.GeometryArchive oldgeom = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldgeom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldgeom()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_newgeom;
        break;
      }

      // required .TSD.GeometryArchive newgeom = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newgeom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newgeom()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_subsizes;
        break;
      }

      // repeated float subsizes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_subsizes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61, input, this->mutable_subsizes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_subsizes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_subsizes;
        if (input->ExpectTag(66)) goto parse_formula_rewrite_command;
        break;
      }

      // optional .TSP.Reference formula_rewrite_command = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formula_rewrite_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_formula_rewrite_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_width_factor;
        break;
      }

      // required float width_factor = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_width_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_factor_)));
          set_has_width_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_height_factor;
        break;
      }

      // required float height_factor = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_height_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_factor_)));
          set_has_height_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_allow_horizontal_autosize;
        break;
      }

      // optional bool allow_horizontal_autosize = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allow_horizontal_autosize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_horizontal_autosize_)));
          set_has_allow_horizontal_autosize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_undo_merge_map;
        break;
      }

      // optional .TSP.Reference undo_merge_map = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_merge_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_merge_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_redo_merge_map;
        break;
      }

      // optional .TSP.Reference redo_merge_map = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_merge_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_merge_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_hiding_actions;
        break;
      }

      // repeated uint32 hiding_actions = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hiding_actions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112, input, this->mutable_hiding_actions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hiding_actions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_hiding_actions;
        if (input->ExpectTag(122)) goto parse_orig_filter_set;
        break;
      }

      // optional .TSP.Reference orig_filter_set = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orig_filter_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orig_filter_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_undo_command_collector;
        break;
      }

      // repeated .TSP.Reference undo_command_collector = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_command_collector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_undo_command_collector()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_undo_command_collector;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandRemoveColumnsOrRowsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TST.CommandDirectionArchive direction = 2;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->direction(), output);
  }

  // required .TSP.IndexSet indices_to_remove = 3;
  if (has_indices_to_remove()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->indices_to_remove(), output);
  }

  // optional .TST.CellMapArchive cellMap = 4;
  if (has_cellmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cellmap(), output);
  }

  // required .TSD.GeometryArchive oldgeom = 5;
  if (has_oldgeom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->oldgeom(), output);
  }

  // required .TSD.GeometryArchive newgeom = 6;
  if (has_newgeom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->newgeom(), output);
  }

  // repeated float subsizes = 7;
  for (int i = 0; i < this->subsizes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      7, this->subsizes(i), output);
  }

  // optional .TSP.Reference formula_rewrite_command = 8;
  if (has_formula_rewrite_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->formula_rewrite_command(), output);
  }

  // required float width_factor = 9;
  if (has_width_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->width_factor(), output);
  }

  // required float height_factor = 10;
  if (has_height_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->height_factor(), output);
  }

  // optional bool allow_horizontal_autosize = 11;
  if (has_allow_horizontal_autosize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->allow_horizontal_autosize(), output);
  }

  // optional .TSP.Reference undo_merge_map = 12;
  if (has_undo_merge_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->undo_merge_map(), output);
  }

  // optional .TSP.Reference redo_merge_map = 13;
  if (has_redo_merge_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->redo_merge_map(), output);
  }

  // repeated uint32 hiding_actions = 14;
  for (int i = 0; i < this->hiding_actions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->hiding_actions(i), output);
  }

  // optional .TSP.Reference orig_filter_set = 15;
  if (has_orig_filter_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->orig_filter_set(), output);
  }

  // repeated .TSP.Reference undo_command_collector = 16;
  for (int i = 0; i < this->undo_command_collector_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->undo_command_collector(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandRemoveColumnsOrRowsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TST.CommandDirectionArchive direction = 2;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->direction(), target);
  }

  // required .TSP.IndexSet indices_to_remove = 3;
  if (has_indices_to_remove()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->indices_to_remove(), target);
  }

  // optional .TST.CellMapArchive cellMap = 4;
  if (has_cellmap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cellmap(), target);
  }

  // required .TSD.GeometryArchive oldgeom = 5;
  if (has_oldgeom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->oldgeom(), target);
  }

  // required .TSD.GeometryArchive newgeom = 6;
  if (has_newgeom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->newgeom(), target);
  }

  // repeated float subsizes = 7;
  for (int i = 0; i < this->subsizes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(7, this->subsizes(i), target);
  }

  // optional .TSP.Reference formula_rewrite_command = 8;
  if (has_formula_rewrite_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->formula_rewrite_command(), target);
  }

  // required float width_factor = 9;
  if (has_width_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->width_factor(), target);
  }

  // required float height_factor = 10;
  if (has_height_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->height_factor(), target);
  }

  // optional bool allow_horizontal_autosize = 11;
  if (has_allow_horizontal_autosize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->allow_horizontal_autosize(), target);
  }

  // optional .TSP.Reference undo_merge_map = 12;
  if (has_undo_merge_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->undo_merge_map(), target);
  }

  // optional .TSP.Reference redo_merge_map = 13;
  if (has_redo_merge_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->redo_merge_map(), target);
  }

  // repeated uint32 hiding_actions = 14;
  for (int i = 0; i < this->hiding_actions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(14, this->hiding_actions(i), target);
  }

  // optional .TSP.Reference orig_filter_set = 15;
  if (has_orig_filter_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->orig_filter_set(), target);
  }

  // repeated .TSP.Reference undo_command_collector = 16;
  for (int i = 0; i < this->undo_command_collector_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->undo_command_collector(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandRemoveColumnsOrRowsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TST.CommandDirectionArchive direction = 2;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

    // required .TSP.IndexSet indices_to_remove = 3;
    if (has_indices_to_remove()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->indices_to_remove());
    }

    // optional .TST.CellMapArchive cellMap = 4;
    if (has_cellmap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cellmap());
    }

    // required .TSD.GeometryArchive oldgeom = 5;
    if (has_oldgeom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oldgeom());
    }

    // required .TSD.GeometryArchive newgeom = 6;
    if (has_newgeom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newgeom());
    }

    // optional .TSP.Reference formula_rewrite_command = 8;
    if (has_formula_rewrite_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formula_rewrite_command());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float width_factor = 9;
    if (has_width_factor()) {
      total_size += 1 + 4;
    }

    // required float height_factor = 10;
    if (has_height_factor()) {
      total_size += 1 + 4;
    }

    // optional bool allow_horizontal_autosize = 11;
    if (has_allow_horizontal_autosize()) {
      total_size += 1 + 1;
    }

    // optional .TSP.Reference undo_merge_map = 12;
    if (has_undo_merge_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_merge_map());
    }

    // optional .TSP.Reference redo_merge_map = 13;
    if (has_redo_merge_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_merge_map());
    }

    // optional .TSP.Reference orig_filter_set = 15;
    if (has_orig_filter_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->orig_filter_set());
    }

  }
  // repeated float subsizes = 7;
  {
    int data_size = 0;
    data_size = 4 * this->subsizes_size();
    total_size += 1 * this->subsizes_size() + data_size;
  }

  // repeated uint32 hiding_actions = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->hiding_actions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hiding_actions(i));
    }
    total_size += 1 * this->hiding_actions_size() + data_size;
  }

  // repeated .TSP.Reference undo_command_collector = 16;
  total_size += 2 * this->undo_command_collector_size();
  for (int i = 0; i < this->undo_command_collector_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->undo_command_collector(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandRemoveColumnsOrRowsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandRemoveColumnsOrRowsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandRemoveColumnsOrRowsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandRemoveColumnsOrRowsArchive::MergeFrom(const CommandRemoveColumnsOrRowsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  subsizes_.MergeFrom(from.subsizes_);
  hiding_actions_.MergeFrom(from.hiding_actions_);
  undo_command_collector_.MergeFrom(from.undo_command_collector_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_indices_to_remove()) {
      mutable_indices_to_remove()->::TSP::IndexSet::MergeFrom(from.indices_to_remove());
    }
    if (from.has_cellmap()) {
      mutable_cellmap()->::TST::CellMapArchive::MergeFrom(from.cellmap());
    }
    if (from.has_oldgeom()) {
      mutable_oldgeom()->::TSD::GeometryArchive::MergeFrom(from.oldgeom());
    }
    if (from.has_newgeom()) {
      mutable_newgeom()->::TSD::GeometryArchive::MergeFrom(from.newgeom());
    }
    if (from.has_formula_rewrite_command()) {
      mutable_formula_rewrite_command()->::TSP::Reference::MergeFrom(from.formula_rewrite_command());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_width_factor()) {
      set_width_factor(from.width_factor());
    }
    if (from.has_height_factor()) {
      set_height_factor(from.height_factor());
    }
    if (from.has_allow_horizontal_autosize()) {
      set_allow_horizontal_autosize(from.allow_horizontal_autosize());
    }
    if (from.has_undo_merge_map()) {
      mutable_undo_merge_map()->::TSP::Reference::MergeFrom(from.undo_merge_map());
    }
    if (from.has_redo_merge_map()) {
      mutable_redo_merge_map()->::TSP::Reference::MergeFrom(from.redo_merge_map());
    }
    if (from.has_orig_filter_set()) {
      mutable_orig_filter_set()->::TSP::Reference::MergeFrom(from.orig_filter_set());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandRemoveColumnsOrRowsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandRemoveColumnsOrRowsArchive::CopyFrom(const CommandRemoveColumnsOrRowsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRemoveColumnsOrRowsArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000337) != 0x00000337) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_indices_to_remove()) {
    if (!this->indices_to_remove().IsInitialized()) return false;
  }
  if (has_cellmap()) {
    if (!this->cellmap().IsInitialized()) return false;
  }
  if (has_oldgeom()) {
    if (!this->oldgeom().IsInitialized()) return false;
  }
  if (has_newgeom()) {
    if (!this->newgeom().IsInitialized()) return false;
  }
  if (has_formula_rewrite_command()) {
    if (!this->formula_rewrite_command().IsInitialized()) return false;
  }
  if (has_undo_merge_map()) {
    if (!this->undo_merge_map().IsInitialized()) return false;
  }
  if (has_redo_merge_map()) {
    if (!this->redo_merge_map().IsInitialized()) return false;
  }
  if (has_orig_filter_set()) {
    if (!this->orig_filter_set().IsInitialized()) return false;
  }
  for (int i = 0; i < undo_command_collector_size(); i++) {
    if (!this->undo_command_collector(i).IsInitialized()) return false;
  }
  return true;
}

void CommandRemoveColumnsOrRowsArchive::Swap(CommandRemoveColumnsOrRowsArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(direction_, other->direction_);
    std::swap(indices_to_remove_, other->indices_to_remove_);
    std::swap(cellmap_, other->cellmap_);
    std::swap(oldgeom_, other->oldgeom_);
    std::swap(newgeom_, other->newgeom_);
    subsizes_.Swap(&other->subsizes_);
    std::swap(formula_rewrite_command_, other->formula_rewrite_command_);
    std::swap(width_factor_, other->width_factor_);
    std::swap(height_factor_, other->height_factor_);
    std::swap(allow_horizontal_autosize_, other->allow_horizontal_autosize_);
    std::swap(undo_merge_map_, other->undo_merge_map_);
    std::swap(redo_merge_map_, other->redo_merge_map_);
    hiding_actions_.Swap(&other->hiding_actions_);
    std::swap(orig_filter_set_, other->orig_filter_set_);
    undo_command_collector_.Swap(&other->undo_command_collector_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandRemoveColumnsOrRowsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandRemoveColumnsOrRowsArchive_descriptor_;
  metadata.reflection = CommandRemoveColumnsOrRowsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandResizeColumnOrRowArchive::kDirectionFieldNumber;
const int CommandResizeColumnOrRowArchive::kIndexFieldNumber;
const int CommandResizeColumnOrRowArchive::kCountFieldNumber;
const int CommandResizeColumnOrRowArchive::kNewsizeFieldNumber;
const int CommandResizeColumnOrRowArchive::kOldgeomFieldNumber;
const int CommandResizeColumnOrRowArchive::kNewgeomFieldNumber;
const int CommandResizeColumnOrRowArchive::kSubsizesFieldNumber;
const int CommandResizeColumnOrRowArchive::kOldDefaultFieldNumber;
const int CommandResizeColumnOrRowArchive::kUniformsizesFieldNumber;
const int CommandResizeColumnOrRowArchive::kResizemodeFieldNumber;
const int CommandResizeColumnOrRowArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandResizeColumnOrRowArchive::CommandResizeColumnOrRowArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandResizeColumnOrRowArchive::InitAsDefaultInstance() {
  oldgeom_ = const_cast< ::TSD::GeometryArchive*>(&::TSD::GeometryArchive::default_instance());
  newgeom_ = const_cast< ::TSD::GeometryArchive*>(&::TSD::GeometryArchive::default_instance());
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
}

CommandResizeColumnOrRowArchive::CommandResizeColumnOrRowArchive(const CommandResizeColumnOrRowArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandResizeColumnOrRowArchive::SharedCtor() {
  _cached_size_ = 0;
  direction_ = 0;
  index_ = 0u;
  count_ = 0u;
  newsize_ = 0;
  oldgeom_ = NULL;
  newgeom_ = NULL;
  old_default_ = 0;
  uniformsizes_ = false;
  resizemode_ = 0u;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandResizeColumnOrRowArchive::~CommandResizeColumnOrRowArchive() {
  SharedDtor();
}

void CommandResizeColumnOrRowArchive::SharedDtor() {
  if (this != default_instance_) {
    delete oldgeom_;
    delete newgeom_;
    delete super_;
  }
}

void CommandResizeColumnOrRowArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandResizeColumnOrRowArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandResizeColumnOrRowArchive_descriptor_;
}

const CommandResizeColumnOrRowArchive& CommandResizeColumnOrRowArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandResizeColumnOrRowArchive* CommandResizeColumnOrRowArchive::default_instance_ = NULL;

CommandResizeColumnOrRowArchive* CommandResizeColumnOrRowArchive::New() const {
  return new CommandResizeColumnOrRowArchive;
}

void CommandResizeColumnOrRowArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    direction_ = 0;
    index_ = 0u;
    count_ = 0u;
    newsize_ = 0;
    if (has_oldgeom()) {
      if (oldgeom_ != NULL) oldgeom_->::TSD::GeometryArchive::Clear();
    }
    if (has_newgeom()) {
      if (newgeom_ != NULL) newgeom_->::TSD::GeometryArchive::Clear();
    }
    old_default_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    uniformsizes_ = false;
    resizemode_ = 0u;
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
  }
  subsizes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandResizeColumnOrRowArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CommandDirectionArchive direction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TST::CommandDirectionArchive_IsValid(value)) {
            set_direction(static_cast< ::TST::CommandDirectionArchive >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required uint32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_newsize;
        break;
      }

      // required float newsize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_newsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &newsize_)));
          set_has_newsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_oldgeom;
        break;
      }

      // optional .TSD.GeometryArchive oldgeom = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldgeom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldgeom()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_newgeom;
        break;
      }

      // optional .TSD.GeometryArchive newgeom = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newgeom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newgeom()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_subsizes;
        break;
      }

      // repeated float subsizes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_subsizes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61, input, this->mutable_subsizes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_subsizes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_subsizes;
        if (input->ExpectTag(69)) goto parse_old_default;
        break;
      }

      // optional float old_default = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_old_default:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &old_default_)));
          set_has_old_default();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_uniformsizes;
        break;
      }

      // optional bool uniformsizes = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uniformsizes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &uniformsizes_)));
          set_has_uniformsizes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_resizemode;
        break;
      }

      // optional uint32 resizemode = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resizemode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resizemode_)));
          set_has_resizemode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_super;
        break;
      }

      // required .TST.TableCommandArchive super = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandResizeColumnOrRowArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CommandDirectionArchive direction = 1;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->direction(), output);
  }

  // required uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // required float newsize = 4;
  if (has_newsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->newsize(), output);
  }

  // optional .TSD.GeometryArchive oldgeom = 5;
  if (has_oldgeom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->oldgeom(), output);
  }

  // optional .TSD.GeometryArchive newgeom = 6;
  if (has_newgeom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->newgeom(), output);
  }

  // repeated float subsizes = 7;
  for (int i = 0; i < this->subsizes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      7, this->subsizes(i), output);
  }

  // optional float old_default = 8;
  if (has_old_default()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->old_default(), output);
  }

  // optional bool uniformsizes = 9;
  if (has_uniformsizes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->uniformsizes(), output);
  }

  // optional uint32 resizemode = 10;
  if (has_resizemode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->resizemode(), output);
  }

  // required .TST.TableCommandArchive super = 11;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandResizeColumnOrRowArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CommandDirectionArchive direction = 1;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->direction(), target);
  }

  // required uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // required float newsize = 4;
  if (has_newsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->newsize(), target);
  }

  // optional .TSD.GeometryArchive oldgeom = 5;
  if (has_oldgeom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->oldgeom(), target);
  }

  // optional .TSD.GeometryArchive newgeom = 6;
  if (has_newgeom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->newgeom(), target);
  }

  // repeated float subsizes = 7;
  for (int i = 0; i < this->subsizes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(7, this->subsizes(i), target);
  }

  // optional float old_default = 8;
  if (has_old_default()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->old_default(), target);
  }

  // optional bool uniformsizes = 9;
  if (has_uniformsizes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->uniformsizes(), target);
  }

  // optional uint32 resizemode = 10;
  if (has_resizemode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->resizemode(), target);
  }

  // required .TST.TableCommandArchive super = 11;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandResizeColumnOrRowArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CommandDirectionArchive direction = 1;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

    // required uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required float newsize = 4;
    if (has_newsize()) {
      total_size += 1 + 4;
    }

    // optional .TSD.GeometryArchive oldgeom = 5;
    if (has_oldgeom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oldgeom());
    }

    // optional .TSD.GeometryArchive newgeom = 6;
    if (has_newgeom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newgeom());
    }

    // optional float old_default = 8;
    if (has_old_default()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool uniformsizes = 9;
    if (has_uniformsizes()) {
      total_size += 1 + 1;
    }

    // optional uint32 resizemode = 10;
    if (has_resizemode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resizemode());
    }

    // required .TST.TableCommandArchive super = 11;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  // repeated float subsizes = 7;
  {
    int data_size = 0;
    data_size = 4 * this->subsizes_size();
    total_size += 1 * this->subsizes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandResizeColumnOrRowArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandResizeColumnOrRowArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandResizeColumnOrRowArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandResizeColumnOrRowArchive::MergeFrom(const CommandResizeColumnOrRowArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  subsizes_.MergeFrom(from.subsizes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_newsize()) {
      set_newsize(from.newsize());
    }
    if (from.has_oldgeom()) {
      mutable_oldgeom()->::TSD::GeometryArchive::MergeFrom(from.oldgeom());
    }
    if (from.has_newgeom()) {
      mutable_newgeom()->::TSD::GeometryArchive::MergeFrom(from.newgeom());
    }
    if (from.has_old_default()) {
      set_old_default(from.old_default());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_uniformsizes()) {
      set_uniformsizes(from.uniformsizes());
    }
    if (from.has_resizemode()) {
      set_resizemode(from.resizemode());
    }
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandResizeColumnOrRowArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandResizeColumnOrRowArchive::CopyFrom(const CommandResizeColumnOrRowArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandResizeColumnOrRowArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000040f) != 0x0000040f) return false;

  if (has_oldgeom()) {
    if (!this->oldgeom().IsInitialized()) return false;
  }
  if (has_newgeom()) {
    if (!this->newgeom().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandResizeColumnOrRowArchive::Swap(CommandResizeColumnOrRowArchive* other) {
  if (other != this) {
    std::swap(direction_, other->direction_);
    std::swap(index_, other->index_);
    std::swap(count_, other->count_);
    std::swap(newsize_, other->newsize_);
    std::swap(oldgeom_, other->oldgeom_);
    std::swap(newgeom_, other->newgeom_);
    subsizes_.Swap(&other->subsizes_);
    std::swap(old_default_, other->old_default_);
    std::swap(uniformsizes_, other->uniformsizes_);
    std::swap(resizemode_, other->resizemode_);
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandResizeColumnOrRowArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandResizeColumnOrRowArchive_descriptor_;
  metadata.reflection = CommandResizeColumnOrRowArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetCellArchive::kCellIDFieldNumber;
const int CommandSetCellArchive::kNewcellFieldNumber;
const int CommandSetCellArchive::kOldcellFieldNumber;
const int CommandSetCellArchive::kSuperFieldNumber;
const int CommandSetCellArchive::kPostUndoRedoSelectionFieldNumber;
#endif  // !_MSC_VER

CommandSetCellArchive::CommandSetCellArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetCellArchive::InitAsDefaultInstance() {
  cellid_ = const_cast< ::TST::CellID*>(&::TST::CellID::default_instance());
  newcell_ = const_cast< ::TST::Cell*>(&::TST::Cell::default_instance());
  oldcell_ = const_cast< ::TST::Cell*>(&::TST::Cell::default_instance());
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
}

CommandSetCellArchive::CommandSetCellArchive(const CommandSetCellArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetCellArchive::SharedCtor() {
  _cached_size_ = 0;
  cellid_ = NULL;
  newcell_ = NULL;
  oldcell_ = NULL;
  super_ = NULL;
  post_undo_redo_selection_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetCellArchive::~CommandSetCellArchive() {
  SharedDtor();
}

void CommandSetCellArchive::SharedDtor() {
  if (this != default_instance_) {
    delete cellid_;
    delete newcell_;
    delete oldcell_;
    delete super_;
  }
}

void CommandSetCellArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetCellArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetCellArchive_descriptor_;
}

const CommandSetCellArchive& CommandSetCellArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetCellArchive* CommandSetCellArchive::default_instance_ = NULL;

CommandSetCellArchive* CommandSetCellArchive::New() const {
  return new CommandSetCellArchive;
}

void CommandSetCellArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cellid()) {
      if (cellid_ != NULL) cellid_->::TST::CellID::Clear();
    }
    if (has_newcell()) {
      if (newcell_ != NULL) newcell_->::TST::Cell::Clear();
    }
    if (has_oldcell()) {
      if (oldcell_ != NULL) oldcell_->::TST::Cell::Clear();
    }
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    post_undo_redo_selection_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetCellArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CellID cellID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cellid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_newcell;
        break;
      }

      // optional .TST.Cell newcell = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newcell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newcell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_oldcell;
        break;
      }

      // optional .TST.Cell oldcell = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldcell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldcell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_super;
        break;
      }

      // required .TST.TableCommandArchive super = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_post_undo_redo_selection;
        break;
      }

      // optional bool post_undo_redo_selection = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_post_undo_redo_selection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &post_undo_redo_selection_)));
          set_has_post_undo_redo_selection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetCellArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CellID cellID = 1;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cellid(), output);
  }

  // optional .TST.Cell newcell = 2;
  if (has_newcell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->newcell(), output);
  }

  // optional .TST.Cell oldcell = 3;
  if (has_oldcell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->oldcell(), output);
  }

  // required .TST.TableCommandArchive super = 5;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->super(), output);
  }

  // optional bool post_undo_redo_selection = 6;
  if (has_post_undo_redo_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->post_undo_redo_selection(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetCellArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CellID cellID = 1;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cellid(), target);
  }

  // optional .TST.Cell newcell = 2;
  if (has_newcell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->newcell(), target);
  }

  // optional .TST.Cell oldcell = 3;
  if (has_oldcell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->oldcell(), target);
  }

  // required .TST.TableCommandArchive super = 5;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->super(), target);
  }

  // optional bool post_undo_redo_selection = 6;
  if (has_post_undo_redo_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->post_undo_redo_selection(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetCellArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CellID cellID = 1;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cellid());
    }

    // optional .TST.Cell newcell = 2;
    if (has_newcell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newcell());
    }

    // optional .TST.Cell oldcell = 3;
    if (has_oldcell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oldcell());
    }

    // required .TST.TableCommandArchive super = 5;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional bool post_undo_redo_selection = 6;
    if (has_post_undo_redo_selection()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetCellArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetCellArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetCellArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetCellArchive::MergeFrom(const CommandSetCellArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellid()) {
      mutable_cellid()->::TST::CellID::MergeFrom(from.cellid());
    }
    if (from.has_newcell()) {
      mutable_newcell()->::TST::Cell::MergeFrom(from.newcell());
    }
    if (from.has_oldcell()) {
      mutable_oldcell()->::TST::Cell::MergeFrom(from.oldcell());
    }
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_post_undo_redo_selection()) {
      set_post_undo_redo_selection(from.post_undo_redo_selection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetCellArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetCellArchive::CopyFrom(const CommandSetCellArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetCellArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  if (has_cellid()) {
    if (!this->cellid().IsInitialized()) return false;
  }
  if (has_newcell()) {
    if (!this->newcell().IsInitialized()) return false;
  }
  if (has_oldcell()) {
    if (!this->oldcell().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetCellArchive::Swap(CommandSetCellArchive* other) {
  if (other != this) {
    std::swap(cellid_, other->cellid_);
    std::swap(newcell_, other->newcell_);
    std::swap(oldcell_, other->oldcell_);
    std::swap(super_, other->super_);
    std::swap(post_undo_redo_selection_, other->post_undo_redo_selection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetCellArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetCellArchive_descriptor_;
  metadata.reflection = CommandSetCellArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandTextPreflightInsertCellArchive::kEditingCellIDFieldNumber;
const int CommandTextPreflightInsertCellArchive::kSuperFieldNumber;
const int CommandTextPreflightInsertCellArchive::kCoalescedTextcommandFieldNumber;
const int CommandTextPreflightInsertCellArchive::kPostflightcommandFieldNumber;
const int CommandTextPreflightInsertCellArchive::kGroupedWithPostflightFieldNumber;
const int CommandTextPreflightInsertCellArchive::kEditingCellFieldNumber;
const int CommandTextPreflightInsertCellArchive::kEditingStorageFieldNumber;
const int CommandTextPreflightInsertCellArchive::kLastColumnHitByTapFieldNumber;
#endif  // !_MSC_VER

CommandTextPreflightInsertCellArchive::CommandTextPreflightInsertCellArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandTextPreflightInsertCellArchive::InitAsDefaultInstance() {
  editing_cellid_ = const_cast< ::TST::CellID*>(&::TST::CellID::default_instance());
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  coalesced_textcommand_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  postflightcommand_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  editing_cell_ = const_cast< ::TST::Cell*>(&::TST::Cell::default_instance());
  editing_storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandTextPreflightInsertCellArchive::CommandTextPreflightInsertCellArchive(const CommandTextPreflightInsertCellArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandTextPreflightInsertCellArchive::SharedCtor() {
  _cached_size_ = 0;
  editing_cellid_ = NULL;
  super_ = NULL;
  coalesced_textcommand_ = NULL;
  postflightcommand_ = NULL;
  grouped_with_postflight_ = false;
  editing_cell_ = NULL;
  editing_storage_ = NULL;
  last_column_hit_by_tap_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandTextPreflightInsertCellArchive::~CommandTextPreflightInsertCellArchive() {
  SharedDtor();
}

void CommandTextPreflightInsertCellArchive::SharedDtor() {
  if (this != default_instance_) {
    delete editing_cellid_;
    delete super_;
    delete coalesced_textcommand_;
    delete postflightcommand_;
    delete editing_cell_;
    delete editing_storage_;
  }
}

void CommandTextPreflightInsertCellArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandTextPreflightInsertCellArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandTextPreflightInsertCellArchive_descriptor_;
}

const CommandTextPreflightInsertCellArchive& CommandTextPreflightInsertCellArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandTextPreflightInsertCellArchive* CommandTextPreflightInsertCellArchive::default_instance_ = NULL;

CommandTextPreflightInsertCellArchive* CommandTextPreflightInsertCellArchive::New() const {
  return new CommandTextPreflightInsertCellArchive;
}

void CommandTextPreflightInsertCellArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_editing_cellid()) {
      if (editing_cellid_ != NULL) editing_cellid_->::TST::CellID::Clear();
    }
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_coalesced_textcommand()) {
      if (coalesced_textcommand_ != NULL) coalesced_textcommand_->::TSP::Reference::Clear();
    }
    if (has_postflightcommand()) {
      if (postflightcommand_ != NULL) postflightcommand_->::TSP::Reference::Clear();
    }
    grouped_with_postflight_ = false;
    if (has_editing_cell()) {
      if (editing_cell_ != NULL) editing_cell_->::TST::Cell::Clear();
    }
    if (has_editing_storage()) {
      if (editing_storage_ != NULL) editing_storage_->::TSP::Reference::Clear();
    }
    last_column_hit_by_tap_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandTextPreflightInsertCellArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CellID editing_cellID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_editing_cellid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_super;
        break;
      }

      // required .TST.TableCommandArchive super = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_coalesced_textcommand;
        break;
      }

      // optional .TSP.Reference coalesced_textcommand = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coalesced_textcommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coalesced_textcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_postflightcommand;
        break;
      }

      // optional .TSP.Reference postflightcommand = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_postflightcommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_postflightcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_grouped_with_postflight;
        break;
      }

      // optional bool grouped_with_postflight = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grouped_with_postflight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &grouped_with_postflight_)));
          set_has_grouped_with_postflight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_editing_cell;
        break;
      }

      // required .TST.Cell editing_cell = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_editing_cell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_editing_cell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_editing_storage;
        break;
      }

      // required .TSP.Reference editing_storage = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_editing_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_editing_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_last_column_hit_by_tap;
        break;
      }

      // optional uint32 last_column_hit_by_tap = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_column_hit_by_tap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_column_hit_by_tap_)));
          set_has_last_column_hit_by_tap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandTextPreflightInsertCellArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CellID editing_cellID = 1;
  if (has_editing_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->editing_cellid(), output);
  }

  // required .TST.TableCommandArchive super = 3;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->super(), output);
  }

  // optional .TSP.Reference coalesced_textcommand = 6;
  if (has_coalesced_textcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->coalesced_textcommand(), output);
  }

  // optional .TSP.Reference postflightcommand = 8;
  if (has_postflightcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->postflightcommand(), output);
  }

  // optional bool grouped_with_postflight = 9;
  if (has_grouped_with_postflight()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->grouped_with_postflight(), output);
  }

  // required .TST.Cell editing_cell = 10;
  if (has_editing_cell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->editing_cell(), output);
  }

  // required .TSP.Reference editing_storage = 11;
  if (has_editing_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->editing_storage(), output);
  }

  // optional uint32 last_column_hit_by_tap = 12;
  if (has_last_column_hit_by_tap()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->last_column_hit_by_tap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandTextPreflightInsertCellArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CellID editing_cellID = 1;
  if (has_editing_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->editing_cellid(), target);
  }

  // required .TST.TableCommandArchive super = 3;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->super(), target);
  }

  // optional .TSP.Reference coalesced_textcommand = 6;
  if (has_coalesced_textcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->coalesced_textcommand(), target);
  }

  // optional .TSP.Reference postflightcommand = 8;
  if (has_postflightcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->postflightcommand(), target);
  }

  // optional bool grouped_with_postflight = 9;
  if (has_grouped_with_postflight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->grouped_with_postflight(), target);
  }

  // required .TST.Cell editing_cell = 10;
  if (has_editing_cell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->editing_cell(), target);
  }

  // required .TSP.Reference editing_storage = 11;
  if (has_editing_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->editing_storage(), target);
  }

  // optional uint32 last_column_hit_by_tap = 12;
  if (has_last_column_hit_by_tap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->last_column_hit_by_tap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandTextPreflightInsertCellArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CellID editing_cellID = 1;
    if (has_editing_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->editing_cellid());
    }

    // required .TST.TableCommandArchive super = 3;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference coalesced_textcommand = 6;
    if (has_coalesced_textcommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coalesced_textcommand());
    }

    // optional .TSP.Reference postflightcommand = 8;
    if (has_postflightcommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->postflightcommand());
    }

    // optional bool grouped_with_postflight = 9;
    if (has_grouped_with_postflight()) {
      total_size += 1 + 1;
    }

    // required .TST.Cell editing_cell = 10;
    if (has_editing_cell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->editing_cell());
    }

    // required .TSP.Reference editing_storage = 11;
    if (has_editing_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->editing_storage());
    }

    // optional uint32 last_column_hit_by_tap = 12;
    if (has_last_column_hit_by_tap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_column_hit_by_tap());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandTextPreflightInsertCellArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandTextPreflightInsertCellArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandTextPreflightInsertCellArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandTextPreflightInsertCellArchive::MergeFrom(const CommandTextPreflightInsertCellArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_editing_cellid()) {
      mutable_editing_cellid()->::TST::CellID::MergeFrom(from.editing_cellid());
    }
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_coalesced_textcommand()) {
      mutable_coalesced_textcommand()->::TSP::Reference::MergeFrom(from.coalesced_textcommand());
    }
    if (from.has_postflightcommand()) {
      mutable_postflightcommand()->::TSP::Reference::MergeFrom(from.postflightcommand());
    }
    if (from.has_grouped_with_postflight()) {
      set_grouped_with_postflight(from.grouped_with_postflight());
    }
    if (from.has_editing_cell()) {
      mutable_editing_cell()->::TST::Cell::MergeFrom(from.editing_cell());
    }
    if (from.has_editing_storage()) {
      mutable_editing_storage()->::TSP::Reference::MergeFrom(from.editing_storage());
    }
    if (from.has_last_column_hit_by_tap()) {
      set_last_column_hit_by_tap(from.last_column_hit_by_tap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandTextPreflightInsertCellArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandTextPreflightInsertCellArchive::CopyFrom(const CommandTextPreflightInsertCellArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandTextPreflightInsertCellArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000063) != 0x00000063) return false;

  if (has_editing_cellid()) {
    if (!this->editing_cellid().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_coalesced_textcommand()) {
    if (!this->coalesced_textcommand().IsInitialized()) return false;
  }
  if (has_postflightcommand()) {
    if (!this->postflightcommand().IsInitialized()) return false;
  }
  if (has_editing_cell()) {
    if (!this->editing_cell().IsInitialized()) return false;
  }
  if (has_editing_storage()) {
    if (!this->editing_storage().IsInitialized()) return false;
  }
  return true;
}

void CommandTextPreflightInsertCellArchive::Swap(CommandTextPreflightInsertCellArchive* other) {
  if (other != this) {
    std::swap(editing_cellid_, other->editing_cellid_);
    std::swap(super_, other->super_);
    std::swap(coalesced_textcommand_, other->coalesced_textcommand_);
    std::swap(postflightcommand_, other->postflightcommand_);
    std::swap(grouped_with_postflight_, other->grouped_with_postflight_);
    std::swap(editing_cell_, other->editing_cell_);
    std::swap(editing_storage_, other->editing_storage_);
    std::swap(last_column_hit_by_tap_, other->last_column_hit_by_tap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandTextPreflightInsertCellArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandTextPreflightInsertCellArchive_descriptor_;
  metadata.reflection = CommandTextPreflightInsertCellArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandPostflightSetCellArchive::kCellIDFieldNumber;
const int CommandPostflightSetCellArchive::kSuperFieldNumber;
const int CommandPostflightSetCellArchive::kChildcommandundoFieldNumber;
const int CommandPostflightSetCellArchive::kEditingCellFieldNumber;
const int CommandPostflightSetCellArchive::kNewCellFieldNumber;
const int CommandPostflightSetCellArchive::kEditingStorageFieldNumber;
const int CommandPostflightSetCellArchive::kLastColumnHitByTapFieldNumber;
#endif  // !_MSC_VER

CommandPostflightSetCellArchive::CommandPostflightSetCellArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandPostflightSetCellArchive::InitAsDefaultInstance() {
  cellid_ = const_cast< ::TST::CellID*>(&::TST::CellID::default_instance());
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  childcommandundo_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  editing_cell_ = const_cast< ::TST::Cell*>(&::TST::Cell::default_instance());
  new_cell_ = const_cast< ::TST::Cell*>(&::TST::Cell::default_instance());
  editing_storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandPostflightSetCellArchive::CommandPostflightSetCellArchive(const CommandPostflightSetCellArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandPostflightSetCellArchive::SharedCtor() {
  _cached_size_ = 0;
  cellid_ = NULL;
  super_ = NULL;
  childcommandundo_ = NULL;
  editing_cell_ = NULL;
  new_cell_ = NULL;
  editing_storage_ = NULL;
  last_column_hit_by_tap_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandPostflightSetCellArchive::~CommandPostflightSetCellArchive() {
  SharedDtor();
}

void CommandPostflightSetCellArchive::SharedDtor() {
  if (this != default_instance_) {
    delete cellid_;
    delete super_;
    delete childcommandundo_;
    delete editing_cell_;
    delete new_cell_;
    delete editing_storage_;
  }
}

void CommandPostflightSetCellArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandPostflightSetCellArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandPostflightSetCellArchive_descriptor_;
}

const CommandPostflightSetCellArchive& CommandPostflightSetCellArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandPostflightSetCellArchive* CommandPostflightSetCellArchive::default_instance_ = NULL;

CommandPostflightSetCellArchive* CommandPostflightSetCellArchive::New() const {
  return new CommandPostflightSetCellArchive;
}

void CommandPostflightSetCellArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cellid()) {
      if (cellid_ != NULL) cellid_->::TST::CellID::Clear();
    }
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_childcommandundo()) {
      if (childcommandundo_ != NULL) childcommandundo_->::TSP::Reference::Clear();
    }
    if (has_editing_cell()) {
      if (editing_cell_ != NULL) editing_cell_->::TST::Cell::Clear();
    }
    if (has_new_cell()) {
      if (new_cell_ != NULL) new_cell_->::TST::Cell::Clear();
    }
    if (has_editing_storage()) {
      if (editing_storage_ != NULL) editing_storage_->::TSP::Reference::Clear();
    }
    last_column_hit_by_tap_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandPostflightSetCellArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CellID cellID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cellid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_super;
        break;
      }

      // required .TST.TableCommandArchive super = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_childcommandundo;
        break;
      }

      // optional .TSP.Reference childcommandundo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_childcommandundo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_childcommandundo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_editing_cell;
        break;
      }

      // required .TST.Cell editing_cell = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_editing_cell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_editing_cell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_new_cell;
        break;
      }

      // required .TST.Cell new_cell = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_cell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_cell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_editing_storage;
        break;
      }

      // required .TSP.Reference editing_storage = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_editing_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_editing_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_last_column_hit_by_tap;
        break;
      }

      // optional uint32 last_column_hit_by_tap = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_column_hit_by_tap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_column_hit_by_tap_)));
          set_has_last_column_hit_by_tap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandPostflightSetCellArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CellID cellID = 1;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cellid(), output);
  }

  // required .TST.TableCommandArchive super = 3;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->super(), output);
  }

  // optional .TSP.Reference childcommandundo = 4;
  if (has_childcommandundo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->childcommandundo(), output);
  }

  // required .TST.Cell editing_cell = 6;
  if (has_editing_cell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->editing_cell(), output);
  }

  // required .TST.Cell new_cell = 7;
  if (has_new_cell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->new_cell(), output);
  }

  // required .TSP.Reference editing_storage = 8;
  if (has_editing_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->editing_storage(), output);
  }

  // optional uint32 last_column_hit_by_tap = 9;
  if (has_last_column_hit_by_tap()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->last_column_hit_by_tap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandPostflightSetCellArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CellID cellID = 1;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cellid(), target);
  }

  // required .TST.TableCommandArchive super = 3;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->super(), target);
  }

  // optional .TSP.Reference childcommandundo = 4;
  if (has_childcommandundo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->childcommandundo(), target);
  }

  // required .TST.Cell editing_cell = 6;
  if (has_editing_cell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->editing_cell(), target);
  }

  // required .TST.Cell new_cell = 7;
  if (has_new_cell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->new_cell(), target);
  }

  // required .TSP.Reference editing_storage = 8;
  if (has_editing_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->editing_storage(), target);
  }

  // optional uint32 last_column_hit_by_tap = 9;
  if (has_last_column_hit_by_tap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->last_column_hit_by_tap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandPostflightSetCellArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CellID cellID = 1;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cellid());
    }

    // required .TST.TableCommandArchive super = 3;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference childcommandundo = 4;
    if (has_childcommandundo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->childcommandundo());
    }

    // required .TST.Cell editing_cell = 6;
    if (has_editing_cell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->editing_cell());
    }

    // required .TST.Cell new_cell = 7;
    if (has_new_cell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_cell());
    }

    // required .TSP.Reference editing_storage = 8;
    if (has_editing_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->editing_storage());
    }

    // optional uint32 last_column_hit_by_tap = 9;
    if (has_last_column_hit_by_tap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_column_hit_by_tap());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandPostflightSetCellArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandPostflightSetCellArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandPostflightSetCellArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandPostflightSetCellArchive::MergeFrom(const CommandPostflightSetCellArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellid()) {
      mutable_cellid()->::TST::CellID::MergeFrom(from.cellid());
    }
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_childcommandundo()) {
      mutable_childcommandundo()->::TSP::Reference::MergeFrom(from.childcommandundo());
    }
    if (from.has_editing_cell()) {
      mutable_editing_cell()->::TST::Cell::MergeFrom(from.editing_cell());
    }
    if (from.has_new_cell()) {
      mutable_new_cell()->::TST::Cell::MergeFrom(from.new_cell());
    }
    if (from.has_editing_storage()) {
      mutable_editing_storage()->::TSP::Reference::MergeFrom(from.editing_storage());
    }
    if (from.has_last_column_hit_by_tap()) {
      set_last_column_hit_by_tap(from.last_column_hit_by_tap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandPostflightSetCellArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandPostflightSetCellArchive::CopyFrom(const CommandPostflightSetCellArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPostflightSetCellArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003b) != 0x0000003b) return false;

  if (has_cellid()) {
    if (!this->cellid().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_childcommandundo()) {
    if (!this->childcommandundo().IsInitialized()) return false;
  }
  if (has_editing_cell()) {
    if (!this->editing_cell().IsInitialized()) return false;
  }
  if (has_new_cell()) {
    if (!this->new_cell().IsInitialized()) return false;
  }
  if (has_editing_storage()) {
    if (!this->editing_storage().IsInitialized()) return false;
  }
  return true;
}

void CommandPostflightSetCellArchive::Swap(CommandPostflightSetCellArchive* other) {
  if (other != this) {
    std::swap(cellid_, other->cellid_);
    std::swap(super_, other->super_);
    std::swap(childcommandundo_, other->childcommandundo_);
    std::swap(editing_cell_, other->editing_cell_);
    std::swap(new_cell_, other->new_cell_);
    std::swap(editing_storage_, other->editing_storage_);
    std::swap(last_column_hit_by_tap_, other->last_column_hit_by_tap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandPostflightSetCellArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandPostflightSetCellArchive_descriptor_;
  metadata.reflection = CommandPostflightSetCellArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetNumberOfHeadersOrFootersArchive::kRegionFieldNumber;
const int CommandSetNumberOfHeadersOrFootersArchive::kCountFieldNumber;
const int CommandSetNumberOfHeadersOrFootersArchive::kOldcountFieldNumber;
const int CommandSetNumberOfHeadersOrFootersArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandSetNumberOfHeadersOrFootersArchive::CommandSetNumberOfHeadersOrFootersArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetNumberOfHeadersOrFootersArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
}

CommandSetNumberOfHeadersOrFootersArchive::CommandSetNumberOfHeadersOrFootersArchive(const CommandSetNumberOfHeadersOrFootersArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetNumberOfHeadersOrFootersArchive::SharedCtor() {
  _cached_size_ = 0;
  region_ = 0;
  count_ = 0u;
  oldcount_ = 0u;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetNumberOfHeadersOrFootersArchive::~CommandSetNumberOfHeadersOrFootersArchive() {
  SharedDtor();
}

void CommandSetNumberOfHeadersOrFootersArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetNumberOfHeadersOrFootersArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetNumberOfHeadersOrFootersArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetNumberOfHeadersOrFootersArchive_descriptor_;
}

const CommandSetNumberOfHeadersOrFootersArchive& CommandSetNumberOfHeadersOrFootersArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetNumberOfHeadersOrFootersArchive* CommandSetNumberOfHeadersOrFootersArchive::default_instance_ = NULL;

CommandSetNumberOfHeadersOrFootersArchive* CommandSetNumberOfHeadersOrFootersArchive::New() const {
  return new CommandSetNumberOfHeadersOrFootersArchive;
}

void CommandSetNumberOfHeadersOrFootersArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    region_ = 0;
    count_ = 0u;
    oldcount_ = 0u;
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetNumberOfHeadersOrFootersArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CommandRegionArchive region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TST::CommandRegionArchive_IsValid(value)) {
            set_region(static_cast< ::TST::CommandRegionArchive >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_oldcount;
        break;
      }

      // required uint32 oldcount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldcount_)));
          set_has_oldcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_super;
        break;
      }

      // required .TST.TableCommandArchive super = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetNumberOfHeadersOrFootersArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CommandRegionArchive region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->region(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // required uint32 oldcount = 3;
  if (has_oldcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->oldcount(), output);
  }

  // required .TST.TableCommandArchive super = 6;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetNumberOfHeadersOrFootersArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CommandRegionArchive region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->region(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // required uint32 oldcount = 3;
  if (has_oldcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->oldcount(), target);
  }

  // required .TST.TableCommandArchive super = 6;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetNumberOfHeadersOrFootersArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CommandRegionArchive region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->region());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 oldcount = 3;
    if (has_oldcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldcount());
    }

    // required .TST.TableCommandArchive super = 6;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetNumberOfHeadersOrFootersArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetNumberOfHeadersOrFootersArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetNumberOfHeadersOrFootersArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetNumberOfHeadersOrFootersArchive::MergeFrom(const CommandSetNumberOfHeadersOrFootersArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_oldcount()) {
      set_oldcount(from.oldcount());
    }
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetNumberOfHeadersOrFootersArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetNumberOfHeadersOrFootersArchive::CopyFrom(const CommandSetNumberOfHeadersOrFootersArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetNumberOfHeadersOrFootersArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetNumberOfHeadersOrFootersArchive::Swap(CommandSetNumberOfHeadersOrFootersArchive* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(count_, other->count_);
    std::swap(oldcount_, other->oldcount_);
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetNumberOfHeadersOrFootersArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetNumberOfHeadersOrFootersArchive_descriptor_;
  metadata.reflection = CommandSetNumberOfHeadersOrFootersArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandFixWPStylesInRowsOrColumnsArchive::kDirectionFieldNumber;
const int CommandFixWPStylesInRowsOrColumnsArchive::kIndexFieldNumber;
const int CommandFixWPStylesInRowsOrColumnsArchive::kUndoCellMapFieldNumber;
const int CommandFixWPStylesInRowsOrColumnsArchive::kRedoCellMapFieldNumber;
const int CommandFixWPStylesInRowsOrColumnsArchive::kSuperFieldNumber;
const int CommandFixWPStylesInRowsOrColumnsArchive::kReferenceIndexFieldNumber;
const int CommandFixWPStylesInRowsOrColumnsArchive::kInheritStylesFieldNumber;
const int CommandFixWPStylesInRowsOrColumnsArchive::kCountFieldNumber;
#endif  // !_MSC_VER

CommandFixWPStylesInRowsOrColumnsArchive::CommandFixWPStylesInRowsOrColumnsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandFixWPStylesInRowsOrColumnsArchive::InitAsDefaultInstance() {
  undo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  redo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
}

CommandFixWPStylesInRowsOrColumnsArchive::CommandFixWPStylesInRowsOrColumnsArchive(const CommandFixWPStylesInRowsOrColumnsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandFixWPStylesInRowsOrColumnsArchive::SharedCtor() {
  _cached_size_ = 0;
  direction_ = 0;
  index_ = 0u;
  undo_cell_map_ = NULL;
  redo_cell_map_ = NULL;
  super_ = NULL;
  reference_index_ = 0u;
  inherit_styles_ = false;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandFixWPStylesInRowsOrColumnsArchive::~CommandFixWPStylesInRowsOrColumnsArchive() {
  SharedDtor();
}

void CommandFixWPStylesInRowsOrColumnsArchive::SharedDtor() {
  if (this != default_instance_) {
    delete undo_cell_map_;
    delete redo_cell_map_;
    delete super_;
  }
}

void CommandFixWPStylesInRowsOrColumnsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandFixWPStylesInRowsOrColumnsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandFixWPStylesInRowsOrColumnsArchive_descriptor_;
}

const CommandFixWPStylesInRowsOrColumnsArchive& CommandFixWPStylesInRowsOrColumnsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandFixWPStylesInRowsOrColumnsArchive* CommandFixWPStylesInRowsOrColumnsArchive::default_instance_ = NULL;

CommandFixWPStylesInRowsOrColumnsArchive* CommandFixWPStylesInRowsOrColumnsArchive::New() const {
  return new CommandFixWPStylesInRowsOrColumnsArchive;
}

void CommandFixWPStylesInRowsOrColumnsArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    direction_ = 0;
    index_ = 0u;
    if (has_undo_cell_map()) {
      if (undo_cell_map_ != NULL) undo_cell_map_->::TST::CellMapArchive::Clear();
    }
    if (has_redo_cell_map()) {
      if (redo_cell_map_ != NULL) redo_cell_map_->::TST::CellMapArchive::Clear();
    }
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    reference_index_ = 0u;
    inherit_styles_ = false;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandFixWPStylesInRowsOrColumnsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CommandDirectionArchive direction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TST::CommandDirectionArchive_IsValid(value)) {
            set_direction(static_cast< ::TST::CommandDirectionArchive >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required uint32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_undo_cell_map;
        break;
      }

      // required .TST.CellMapArchive undo_cell_map = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_redo_cell_map;
        break;
      }

      // required .TST.CellMapArchive redo_cell_map = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_super;
        break;
      }

      // required .TST.TableCommandArchive super = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_reference_index;
        break;
      }

      // required uint32 reference_index = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reference_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reference_index_)));
          set_has_reference_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_inherit_styles;
        break;
      }

      // required bool inherit_styles = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inherit_styles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inherit_styles_)));
          set_has_inherit_styles();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_count;
        break;
      }

      // optional uint32 count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandFixWPStylesInRowsOrColumnsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CommandDirectionArchive direction = 1;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->direction(), output);
  }

  // required uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // required .TST.CellMapArchive undo_cell_map = 3;
  if (has_undo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->undo_cell_map(), output);
  }

  // required .TST.CellMapArchive redo_cell_map = 4;
  if (has_redo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->redo_cell_map(), output);
  }

  // required .TST.TableCommandArchive super = 6;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->super(), output);
  }

  // required uint32 reference_index = 7;
  if (has_reference_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->reference_index(), output);
  }

  // required bool inherit_styles = 8;
  if (has_inherit_styles()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->inherit_styles(), output);
  }

  // optional uint32 count = 9;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandFixWPStylesInRowsOrColumnsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CommandDirectionArchive direction = 1;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->direction(), target);
  }

  // required uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // required .TST.CellMapArchive undo_cell_map = 3;
  if (has_undo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->undo_cell_map(), target);
  }

  // required .TST.CellMapArchive redo_cell_map = 4;
  if (has_redo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->redo_cell_map(), target);
  }

  // required .TST.TableCommandArchive super = 6;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->super(), target);
  }

  // required uint32 reference_index = 7;
  if (has_reference_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->reference_index(), target);
  }

  // required bool inherit_styles = 8;
  if (has_inherit_styles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->inherit_styles(), target);
  }

  // optional uint32 count = 9;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandFixWPStylesInRowsOrColumnsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CommandDirectionArchive direction = 1;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

    // required uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required .TST.CellMapArchive undo_cell_map = 3;
    if (has_undo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_cell_map());
    }

    // required .TST.CellMapArchive redo_cell_map = 4;
    if (has_redo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_cell_map());
    }

    // required .TST.TableCommandArchive super = 6;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required uint32 reference_index = 7;
    if (has_reference_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reference_index());
    }

    // required bool inherit_styles = 8;
    if (has_inherit_styles()) {
      total_size += 1 + 1;
    }

    // optional uint32 count = 9;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandFixWPStylesInRowsOrColumnsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandFixWPStylesInRowsOrColumnsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandFixWPStylesInRowsOrColumnsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandFixWPStylesInRowsOrColumnsArchive::MergeFrom(const CommandFixWPStylesInRowsOrColumnsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_undo_cell_map()) {
      mutable_undo_cell_map()->::TST::CellMapArchive::MergeFrom(from.undo_cell_map());
    }
    if (from.has_redo_cell_map()) {
      mutable_redo_cell_map()->::TST::CellMapArchive::MergeFrom(from.redo_cell_map());
    }
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_reference_index()) {
      set_reference_index(from.reference_index());
    }
    if (from.has_inherit_styles()) {
      set_inherit_styles(from.inherit_styles());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandFixWPStylesInRowsOrColumnsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandFixWPStylesInRowsOrColumnsArchive::CopyFrom(const CommandFixWPStylesInRowsOrColumnsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandFixWPStylesInRowsOrColumnsArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_undo_cell_map()) {
    if (!this->undo_cell_map().IsInitialized()) return false;
  }
  if (has_redo_cell_map()) {
    if (!this->redo_cell_map().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandFixWPStylesInRowsOrColumnsArchive::Swap(CommandFixWPStylesInRowsOrColumnsArchive* other) {
  if (other != this) {
    std::swap(direction_, other->direction_);
    std::swap(index_, other->index_);
    std::swap(undo_cell_map_, other->undo_cell_map_);
    std::swap(redo_cell_map_, other->redo_cell_map_);
    std::swap(super_, other->super_);
    std::swap(reference_index_, other->reference_index_);
    std::swap(inherit_styles_, other->inherit_styles_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandFixWPStylesInRowsOrColumnsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandFixWPStylesInRowsOrColumnsArchive_descriptor_;
  metadata.reflection = CommandFixWPStylesInRowsOrColumnsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandFixStylesInHeadersOrFootersArchive::kRegionFieldNumber;
const int CommandFixStylesInHeadersOrFootersArchive::kOldNumberFieldNumber;
const int CommandFixStylesInHeadersOrFootersArchive::kNewNumberFieldNumber;
const int CommandFixStylesInHeadersOrFootersArchive::kRedoCellMapFieldNumber;
const int CommandFixStylesInHeadersOrFootersArchive::kUndoCellMapFieldNumber;
const int CommandFixStylesInHeadersOrFootersArchive::kSuperFieldNumber;
const int CommandFixStylesInHeadersOrFootersArchive::kTextundoFieldNumber;
#endif  // !_MSC_VER

CommandFixStylesInHeadersOrFootersArchive::CommandFixStylesInHeadersOrFootersArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandFixStylesInHeadersOrFootersArchive::InitAsDefaultInstance() {
  redo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  undo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  textundo_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandFixStylesInHeadersOrFootersArchive::CommandFixStylesInHeadersOrFootersArchive(const CommandFixStylesInHeadersOrFootersArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandFixStylesInHeadersOrFootersArchive::SharedCtor() {
  _cached_size_ = 0;
  region_ = 0;
  old_number_ = 0u;
  new_number_ = 0u;
  redo_cell_map_ = NULL;
  undo_cell_map_ = NULL;
  super_ = NULL;
  textundo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandFixStylesInHeadersOrFootersArchive::~CommandFixStylesInHeadersOrFootersArchive() {
  SharedDtor();
}

void CommandFixStylesInHeadersOrFootersArchive::SharedDtor() {
  if (this != default_instance_) {
    delete redo_cell_map_;
    delete undo_cell_map_;
    delete super_;
    delete textundo_;
  }
}

void CommandFixStylesInHeadersOrFootersArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandFixStylesInHeadersOrFootersArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandFixStylesInHeadersOrFootersArchive_descriptor_;
}

const CommandFixStylesInHeadersOrFootersArchive& CommandFixStylesInHeadersOrFootersArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandFixStylesInHeadersOrFootersArchive* CommandFixStylesInHeadersOrFootersArchive::default_instance_ = NULL;

CommandFixStylesInHeadersOrFootersArchive* CommandFixStylesInHeadersOrFootersArchive::New() const {
  return new CommandFixStylesInHeadersOrFootersArchive;
}

void CommandFixStylesInHeadersOrFootersArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    region_ = 0;
    old_number_ = 0u;
    new_number_ = 0u;
    if (has_redo_cell_map()) {
      if (redo_cell_map_ != NULL) redo_cell_map_->::TST::CellMapArchive::Clear();
    }
    if (has_undo_cell_map()) {
      if (undo_cell_map_ != NULL) undo_cell_map_->::TST::CellMapArchive::Clear();
    }
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_textundo()) {
      if (textundo_ != NULL) textundo_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandFixStylesInHeadersOrFootersArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CommandRegionArchive region = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TST::CommandRegionArchive_IsValid(value)) {
            set_region(static_cast< ::TST::CommandRegionArchive >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_old_number;
        break;
      }

      // required uint32 old_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_number_)));
          set_has_old_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_new_number;
        break;
      }

      // required uint32 new_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_number_)));
          set_has_new_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_redo_cell_map;
        break;
      }

      // required .TST.CellMapArchive redo_cell_map = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_undo_cell_map;
        break;
      }

      // required .TST.CellMapArchive undo_cell_map = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_super;
        break;
      }

      // required .TST.TableCommandArchive super = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_textundo;
        break;
      }

      // optional .TSP.Reference textundo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_textundo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_textundo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandFixStylesInHeadersOrFootersArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CommandRegionArchive region = 1;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->region(), output);
  }

  // required uint32 old_number = 2;
  if (has_old_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->old_number(), output);
  }

  // required uint32 new_number = 3;
  if (has_new_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->new_number(), output);
  }

  // required .TST.CellMapArchive redo_cell_map = 4;
  if (has_redo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->redo_cell_map(), output);
  }

  // required .TST.CellMapArchive undo_cell_map = 5;
  if (has_undo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->undo_cell_map(), output);
  }

  // required .TST.TableCommandArchive super = 6;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->super(), output);
  }

  // optional .TSP.Reference textundo = 7;
  if (has_textundo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->textundo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandFixStylesInHeadersOrFootersArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CommandRegionArchive region = 1;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->region(), target);
  }

  // required uint32 old_number = 2;
  if (has_old_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->old_number(), target);
  }

  // required uint32 new_number = 3;
  if (has_new_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->new_number(), target);
  }

  // required .TST.CellMapArchive redo_cell_map = 4;
  if (has_redo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->redo_cell_map(), target);
  }

  // required .TST.CellMapArchive undo_cell_map = 5;
  if (has_undo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->undo_cell_map(), target);
  }

  // required .TST.TableCommandArchive super = 6;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->super(), target);
  }

  // optional .TSP.Reference textundo = 7;
  if (has_textundo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->textundo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandFixStylesInHeadersOrFootersArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CommandRegionArchive region = 1;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->region());
    }

    // required uint32 old_number = 2;
    if (has_old_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_number());
    }

    // required uint32 new_number = 3;
    if (has_new_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_number());
    }

    // required .TST.CellMapArchive redo_cell_map = 4;
    if (has_redo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_cell_map());
    }

    // required .TST.CellMapArchive undo_cell_map = 5;
    if (has_undo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_cell_map());
    }

    // required .TST.TableCommandArchive super = 6;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference textundo = 7;
    if (has_textundo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->textundo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandFixStylesInHeadersOrFootersArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandFixStylesInHeadersOrFootersArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandFixStylesInHeadersOrFootersArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandFixStylesInHeadersOrFootersArchive::MergeFrom(const CommandFixStylesInHeadersOrFootersArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_old_number()) {
      set_old_number(from.old_number());
    }
    if (from.has_new_number()) {
      set_new_number(from.new_number());
    }
    if (from.has_redo_cell_map()) {
      mutable_redo_cell_map()->::TST::CellMapArchive::MergeFrom(from.redo_cell_map());
    }
    if (from.has_undo_cell_map()) {
      mutable_undo_cell_map()->::TST::CellMapArchive::MergeFrom(from.undo_cell_map());
    }
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_textundo()) {
      mutable_textundo()->::TSP::Reference::MergeFrom(from.textundo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandFixStylesInHeadersOrFootersArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandFixStylesInHeadersOrFootersArchive::CopyFrom(const CommandFixStylesInHeadersOrFootersArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandFixStylesInHeadersOrFootersArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_redo_cell_map()) {
    if (!this->redo_cell_map().IsInitialized()) return false;
  }
  if (has_undo_cell_map()) {
    if (!this->undo_cell_map().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_textundo()) {
    if (!this->textundo().IsInitialized()) return false;
  }
  return true;
}

void CommandFixStylesInHeadersOrFootersArchive::Swap(CommandFixStylesInHeadersOrFootersArchive* other) {
  if (other != this) {
    std::swap(region_, other->region_);
    std::swap(old_number_, other->old_number_);
    std::swap(new_number_, other->new_number_);
    std::swap(redo_cell_map_, other->redo_cell_map_);
    std::swap(undo_cell_map_, other->undo_cell_map_);
    std::swap(super_, other->super_);
    std::swap(textundo_, other->textundo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandFixStylesInHeadersOrFootersArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandFixStylesInHeadersOrFootersArchive_descriptor_;
  metadata.reflection = CommandFixStylesInHeadersOrFootersArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetTableNameArchive::kNewtablenameFieldNumber;
const int CommandSetTableNameArchive::kOldtablenameFieldNumber;
const int CommandSetTableNameArchive::kNewstyleFieldNumber;
const int CommandSetTableNameArchive::kOldstyleFieldNumber;
const int CommandSetTableNameArchive::kSuperFieldNumber;
const int CommandSetTableNameArchive::kOldShapeStyleFieldNumber;
const int CommandSetTableNameArchive::kNewShapeStyleFieldNumber;
const int CommandSetTableNameArchive::kOldTableNameBorderEnabledFieldNumber;
const int CommandSetTableNameArchive::kNewTableNameBorderEnabledFieldNumber;
#endif  // !_MSC_VER

CommandSetTableNameArchive::CommandSetTableNameArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetTableNameArchive::InitAsDefaultInstance() {
  newstyle_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  oldstyle_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  old_shape_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  new_shape_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandSetTableNameArchive::CommandSetTableNameArchive(const CommandSetTableNameArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetTableNameArchive::SharedCtor() {
  _cached_size_ = 0;
  newtablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  oldtablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  newstyle_ = NULL;
  oldstyle_ = NULL;
  super_ = NULL;
  old_shape_style_ = NULL;
  new_shape_style_ = NULL;
  old_table_name_border_enabled_ = false;
  new_table_name_border_enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetTableNameArchive::~CommandSetTableNameArchive() {
  SharedDtor();
}

void CommandSetTableNameArchive::SharedDtor() {
  if (newtablename_ != &::google::protobuf::internal::kEmptyString) {
    delete newtablename_;
  }
  if (oldtablename_ != &::google::protobuf::internal::kEmptyString) {
    delete oldtablename_;
  }
  if (this != default_instance_) {
    delete newstyle_;
    delete oldstyle_;
    delete super_;
    delete old_shape_style_;
    delete new_shape_style_;
  }
}

void CommandSetTableNameArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetTableNameArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetTableNameArchive_descriptor_;
}

const CommandSetTableNameArchive& CommandSetTableNameArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetTableNameArchive* CommandSetTableNameArchive::default_instance_ = NULL;

CommandSetTableNameArchive* CommandSetTableNameArchive::New() const {
  return new CommandSetTableNameArchive;
}

void CommandSetTableNameArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_newtablename()) {
      if (newtablename_ != &::google::protobuf::internal::kEmptyString) {
        newtablename_->clear();
      }
    }
    if (has_oldtablename()) {
      if (oldtablename_ != &::google::protobuf::internal::kEmptyString) {
        oldtablename_->clear();
      }
    }
    if (has_newstyle()) {
      if (newstyle_ != NULL) newstyle_->::TSP::Reference::Clear();
    }
    if (has_oldstyle()) {
      if (oldstyle_ != NULL) oldstyle_->::TSP::Reference::Clear();
    }
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_old_shape_style()) {
      if (old_shape_style_ != NULL) old_shape_style_->::TSP::Reference::Clear();
    }
    if (has_new_shape_style()) {
      if (new_shape_style_ != NULL) new_shape_style_->::TSP::Reference::Clear();
    }
    old_table_name_border_enabled_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    new_table_name_border_enabled_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetTableNameArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string newtablename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newtablename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newtablename().data(), this->newtablename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_oldtablename;
        break;
      }

      // required string oldtablename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldtablename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldtablename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->oldtablename().data(), this->oldtablename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_newstyle;
        break;
      }

      // optional .TSP.Reference newstyle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newstyle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newstyle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_oldstyle;
        break;
      }

      // optional .TSP.Reference oldstyle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldstyle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldstyle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_super;
        break;
      }

      // required .TST.TableCommandArchive super = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_old_shape_style;
        break;
      }

      // optional .TSP.Reference old_shape_style = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_shape_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_shape_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_new_shape_style;
        break;
      }

      // optional .TSP.Reference new_shape_style = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_shape_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_shape_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_old_table_name_border_enabled;
        break;
      }

      // optional bool old_table_name_border_enabled = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_table_name_border_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &old_table_name_border_enabled_)));
          set_has_old_table_name_border_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_new_table_name_border_enabled;
        break;
      }

      // optional bool new_table_name_border_enabled = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_table_name_border_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &new_table_name_border_enabled_)));
          set_has_new_table_name_border_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetTableNameArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string newtablename = 1;
  if (has_newtablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newtablename().data(), this->newtablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->newtablename(), output);
  }

  // required string oldtablename = 2;
  if (has_oldtablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldtablename().data(), this->oldtablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->oldtablename(), output);
  }

  // optional .TSP.Reference newstyle = 3;
  if (has_newstyle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->newstyle(), output);
  }

  // optional .TSP.Reference oldstyle = 4;
  if (has_oldstyle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->oldstyle(), output);
  }

  // required .TST.TableCommandArchive super = 5;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->super(), output);
  }

  // optional .TSP.Reference old_shape_style = 6;
  if (has_old_shape_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->old_shape_style(), output);
  }

  // optional .TSP.Reference new_shape_style = 7;
  if (has_new_shape_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->new_shape_style(), output);
  }

  // optional bool old_table_name_border_enabled = 8;
  if (has_old_table_name_border_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->old_table_name_border_enabled(), output);
  }

  // optional bool new_table_name_border_enabled = 9;
  if (has_new_table_name_border_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->new_table_name_border_enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetTableNameArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string newtablename = 1;
  if (has_newtablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newtablename().data(), this->newtablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->newtablename(), target);
  }

  // required string oldtablename = 2;
  if (has_oldtablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldtablename().data(), this->oldtablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->oldtablename(), target);
  }

  // optional .TSP.Reference newstyle = 3;
  if (has_newstyle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->newstyle(), target);
  }

  // optional .TSP.Reference oldstyle = 4;
  if (has_oldstyle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->oldstyle(), target);
  }

  // required .TST.TableCommandArchive super = 5;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->super(), target);
  }

  // optional .TSP.Reference old_shape_style = 6;
  if (has_old_shape_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->old_shape_style(), target);
  }

  // optional .TSP.Reference new_shape_style = 7;
  if (has_new_shape_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->new_shape_style(), target);
  }

  // optional bool old_table_name_border_enabled = 8;
  if (has_old_table_name_border_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->old_table_name_border_enabled(), target);
  }

  // optional bool new_table_name_border_enabled = 9;
  if (has_new_table_name_border_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->new_table_name_border_enabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetTableNameArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string newtablename = 1;
    if (has_newtablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newtablename());
    }

    // required string oldtablename = 2;
    if (has_oldtablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldtablename());
    }

    // optional .TSP.Reference newstyle = 3;
    if (has_newstyle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newstyle());
    }

    // optional .TSP.Reference oldstyle = 4;
    if (has_oldstyle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oldstyle());
    }

    // required .TST.TableCommandArchive super = 5;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference old_shape_style = 6;
    if (has_old_shape_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_shape_style());
    }

    // optional .TSP.Reference new_shape_style = 7;
    if (has_new_shape_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_shape_style());
    }

    // optional bool old_table_name_border_enabled = 8;
    if (has_old_table_name_border_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool new_table_name_border_enabled = 9;
    if (has_new_table_name_border_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetTableNameArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetTableNameArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetTableNameArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetTableNameArchive::MergeFrom(const CommandSetTableNameArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newtablename()) {
      set_newtablename(from.newtablename());
    }
    if (from.has_oldtablename()) {
      set_oldtablename(from.oldtablename());
    }
    if (from.has_newstyle()) {
      mutable_newstyle()->::TSP::Reference::MergeFrom(from.newstyle());
    }
    if (from.has_oldstyle()) {
      mutable_oldstyle()->::TSP::Reference::MergeFrom(from.oldstyle());
    }
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_old_shape_style()) {
      mutable_old_shape_style()->::TSP::Reference::MergeFrom(from.old_shape_style());
    }
    if (from.has_new_shape_style()) {
      mutable_new_shape_style()->::TSP::Reference::MergeFrom(from.new_shape_style());
    }
    if (from.has_old_table_name_border_enabled()) {
      set_old_table_name_border_enabled(from.old_table_name_border_enabled());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_new_table_name_border_enabled()) {
      set_new_table_name_border_enabled(from.new_table_name_border_enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetTableNameArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetTableNameArchive::CopyFrom(const CommandSetTableNameArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetTableNameArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  if (has_newstyle()) {
    if (!this->newstyle().IsInitialized()) return false;
  }
  if (has_oldstyle()) {
    if (!this->oldstyle().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_old_shape_style()) {
    if (!this->old_shape_style().IsInitialized()) return false;
  }
  if (has_new_shape_style()) {
    if (!this->new_shape_style().IsInitialized()) return false;
  }
  return true;
}

void CommandSetTableNameArchive::Swap(CommandSetTableNameArchive* other) {
  if (other != this) {
    std::swap(newtablename_, other->newtablename_);
    std::swap(oldtablename_, other->oldtablename_);
    std::swap(newstyle_, other->newstyle_);
    std::swap(oldstyle_, other->oldstyle_);
    std::swap(super_, other->super_);
    std::swap(old_shape_style_, other->old_shape_style_);
    std::swap(new_shape_style_, other->new_shape_style_);
    std::swap(old_table_name_border_enabled_, other->old_table_name_border_enabled_);
    std::swap(new_table_name_border_enabled_, other->new_table_name_border_enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetTableNameArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetTableNameArchive_descriptor_;
  metadata.reflection = CommandSetTableNameArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetTableNameEnabledArchive::kTableNameEnabledFieldNumber;
const int CommandSetTableNameEnabledArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandSetTableNameEnabledArchive::CommandSetTableNameEnabledArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetTableNameEnabledArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
}

CommandSetTableNameEnabledArchive::CommandSetTableNameEnabledArchive(const CommandSetTableNameEnabledArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetTableNameEnabledArchive::SharedCtor() {
  _cached_size_ = 0;
  table_name_enabled_ = false;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetTableNameEnabledArchive::~CommandSetTableNameEnabledArchive() {
  SharedDtor();
}

void CommandSetTableNameEnabledArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetTableNameEnabledArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetTableNameEnabledArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetTableNameEnabledArchive_descriptor_;
}

const CommandSetTableNameEnabledArchive& CommandSetTableNameEnabledArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetTableNameEnabledArchive* CommandSetTableNameEnabledArchive::default_instance_ = NULL;

CommandSetTableNameEnabledArchive* CommandSetTableNameEnabledArchive::New() const {
  return new CommandSetTableNameEnabledArchive;
}

void CommandSetTableNameEnabledArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_name_enabled_ = false;
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetTableNameEnabledArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool table_name_enabled = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &table_name_enabled_)));
          set_has_table_name_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_super;
        break;
      }

      // required .TST.TableCommandArchive super = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetTableNameEnabledArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool table_name_enabled = 1;
  if (has_table_name_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->table_name_enabled(), output);
  }

  // required .TST.TableCommandArchive super = 3;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetTableNameEnabledArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool table_name_enabled = 1;
  if (has_table_name_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->table_name_enabled(), target);
  }

  // required .TST.TableCommandArchive super = 3;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetTableNameEnabledArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool table_name_enabled = 1;
    if (has_table_name_enabled()) {
      total_size += 1 + 1;
    }

    // required .TST.TableCommandArchive super = 3;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetTableNameEnabledArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetTableNameEnabledArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetTableNameEnabledArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetTableNameEnabledArchive::MergeFrom(const CommandSetTableNameEnabledArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name_enabled()) {
      set_table_name_enabled(from.table_name_enabled());
    }
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetTableNameEnabledArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetTableNameEnabledArchive::CopyFrom(const CommandSetTableNameEnabledArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetTableNameEnabledArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetTableNameEnabledArchive::Swap(CommandSetTableNameEnabledArchive* other) {
  if (other != this) {
    std::swap(table_name_enabled_, other->table_name_enabled_);
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetTableNameEnabledArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetTableNameEnabledArchive_descriptor_;
  metadata.reflection = CommandSetTableNameEnabledArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetTableFontSizeArchive::kSuperFieldNumber;
const int CommandSetTableFontSizeArchive::kScaleFactorFieldNumber;
const int CommandSetTableFontSizeArchive::kUndoCellMapFieldNumber;
const int CommandSetTableFontSizeArchive::kRedoCellMapFieldNumber;
const int CommandSetTableFontSizeArchive::kResizeDefaultCellsFieldNumber;
const int CommandSetTableFontSizeArchive::kTextUndoFieldNumber;
#endif  // !_MSC_VER

CommandSetTableFontSizeArchive::CommandSetTableFontSizeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetTableFontSizeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  undo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  redo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  text_undo_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandSetTableFontSizeArchive::CommandSetTableFontSizeArchive(const CommandSetTableFontSizeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetTableFontSizeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  scale_factor_ = 0;
  undo_cell_map_ = NULL;
  redo_cell_map_ = NULL;
  resize_default_cells_ = false;
  text_undo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetTableFontSizeArchive::~CommandSetTableFontSizeArchive() {
  SharedDtor();
}

void CommandSetTableFontSizeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete undo_cell_map_;
    delete redo_cell_map_;
    delete text_undo_;
  }
}

void CommandSetTableFontSizeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetTableFontSizeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetTableFontSizeArchive_descriptor_;
}

const CommandSetTableFontSizeArchive& CommandSetTableFontSizeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetTableFontSizeArchive* CommandSetTableFontSizeArchive::default_instance_ = NULL;

CommandSetTableFontSizeArchive* CommandSetTableFontSizeArchive::New() const {
  return new CommandSetTableFontSizeArchive;
}

void CommandSetTableFontSizeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    scale_factor_ = 0;
    if (has_undo_cell_map()) {
      if (undo_cell_map_ != NULL) undo_cell_map_->::TST::CellMapArchive::Clear();
    }
    if (has_redo_cell_map()) {
      if (redo_cell_map_ != NULL) redo_cell_map_->::TST::CellMapArchive::Clear();
    }
    resize_default_cells_ = false;
    if (has_text_undo()) {
      if (text_undo_ != NULL) text_undo_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetTableFontSizeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_undo_cell_map;
        break;
      }

      // optional .TST.CellMapArchive undo_cell_map = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_redo_cell_map;
        break;
      }

      // optional .TST.CellMapArchive redo_cell_map = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_resize_default_cells;
        break;
      }

      // optional bool resize_default_cells = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resize_default_cells:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &resize_default_cells_)));
          set_has_resize_default_cells();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_text_undo;
        break;
      }

      // optional .TSP.Reference text_undo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text_undo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text_undo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_scale_factor;
        break;
      }

      // required float scale_factor = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_factor_)));
          set_has_scale_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetTableFontSizeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TST.CellMapArchive undo_cell_map = 5;
  if (has_undo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->undo_cell_map(), output);
  }

  // optional .TST.CellMapArchive redo_cell_map = 6;
  if (has_redo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->redo_cell_map(), output);
  }

  // optional bool resize_default_cells = 7;
  if (has_resize_default_cells()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->resize_default_cells(), output);
  }

  // optional .TSP.Reference text_undo = 8;
  if (has_text_undo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->text_undo(), output);
  }

  // required float scale_factor = 9;
  if (has_scale_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->scale_factor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetTableFontSizeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TST.CellMapArchive undo_cell_map = 5;
  if (has_undo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->undo_cell_map(), target);
  }

  // optional .TST.CellMapArchive redo_cell_map = 6;
  if (has_redo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->redo_cell_map(), target);
  }

  // optional bool resize_default_cells = 7;
  if (has_resize_default_cells()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->resize_default_cells(), target);
  }

  // optional .TSP.Reference text_undo = 8;
  if (has_text_undo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->text_undo(), target);
  }

  // required float scale_factor = 9;
  if (has_scale_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->scale_factor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetTableFontSizeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required float scale_factor = 9;
    if (has_scale_factor()) {
      total_size += 1 + 4;
    }

    // optional .TST.CellMapArchive undo_cell_map = 5;
    if (has_undo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_cell_map());
    }

    // optional .TST.CellMapArchive redo_cell_map = 6;
    if (has_redo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_cell_map());
    }

    // optional bool resize_default_cells = 7;
    if (has_resize_default_cells()) {
      total_size += 1 + 1;
    }

    // optional .TSP.Reference text_undo = 8;
    if (has_text_undo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text_undo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetTableFontSizeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetTableFontSizeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetTableFontSizeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetTableFontSizeArchive::MergeFrom(const CommandSetTableFontSizeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_scale_factor()) {
      set_scale_factor(from.scale_factor());
    }
    if (from.has_undo_cell_map()) {
      mutable_undo_cell_map()->::TST::CellMapArchive::MergeFrom(from.undo_cell_map());
    }
    if (from.has_redo_cell_map()) {
      mutable_redo_cell_map()->::TST::CellMapArchive::MergeFrom(from.redo_cell_map());
    }
    if (from.has_resize_default_cells()) {
      set_resize_default_cells(from.resize_default_cells());
    }
    if (from.has_text_undo()) {
      mutable_text_undo()->::TSP::Reference::MergeFrom(from.text_undo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetTableFontSizeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetTableFontSizeArchive::CopyFrom(const CommandSetTableFontSizeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetTableFontSizeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_undo_cell_map()) {
    if (!this->undo_cell_map().IsInitialized()) return false;
  }
  if (has_redo_cell_map()) {
    if (!this->redo_cell_map().IsInitialized()) return false;
  }
  if (has_text_undo()) {
    if (!this->text_undo().IsInitialized()) return false;
  }
  return true;
}

void CommandSetTableFontSizeArchive::Swap(CommandSetTableFontSizeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(scale_factor_, other->scale_factor_);
    std::swap(undo_cell_map_, other->undo_cell_map_);
    std::swap(redo_cell_map_, other->redo_cell_map_);
    std::swap(resize_default_cells_, other->resize_default_cells_);
    std::swap(text_undo_, other->text_undo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetTableFontSizeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetTableFontSizeArchive_descriptor_;
  metadata.reflection = CommandSetTableFontSizeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetTableFontNameArchive::kSuperFieldNumber;
const int CommandSetTableFontNameArchive::kFontNameFieldNumber;
const int CommandSetTableFontNameArchive::kOldFontNameFieldNumber;
const int CommandSetTableFontNameArchive::kPreserveFaceFieldNumber;
const int CommandSetTableFontNameArchive::kUndoCellMapFieldNumber;
const int CommandSetTableFontNameArchive::kRedoCellMapFieldNumber;
const int CommandSetTableFontNameArchive::kTextUndoFieldNumber;
#endif  // !_MSC_VER

CommandSetTableFontNameArchive::CommandSetTableFontNameArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetTableFontNameArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  undo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  redo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  text_undo_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandSetTableFontNameArchive::CommandSetTableFontNameArchive(const CommandSetTableFontNameArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetTableFontNameArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  font_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  old_font_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  preserve_face_ = false;
  undo_cell_map_ = NULL;
  redo_cell_map_ = NULL;
  text_undo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetTableFontNameArchive::~CommandSetTableFontNameArchive() {
  SharedDtor();
}

void CommandSetTableFontNameArchive::SharedDtor() {
  if (font_name_ != &::google::protobuf::internal::kEmptyString) {
    delete font_name_;
  }
  if (old_font_name_ != &::google::protobuf::internal::kEmptyString) {
    delete old_font_name_;
  }
  if (this != default_instance_) {
    delete super_;
    delete undo_cell_map_;
    delete redo_cell_map_;
    delete text_undo_;
  }
}

void CommandSetTableFontNameArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetTableFontNameArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetTableFontNameArchive_descriptor_;
}

const CommandSetTableFontNameArchive& CommandSetTableFontNameArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetTableFontNameArchive* CommandSetTableFontNameArchive::default_instance_ = NULL;

CommandSetTableFontNameArchive* CommandSetTableFontNameArchive::New() const {
  return new CommandSetTableFontNameArchive;
}

void CommandSetTableFontNameArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_font_name()) {
      if (font_name_ != &::google::protobuf::internal::kEmptyString) {
        font_name_->clear();
      }
    }
    if (has_old_font_name()) {
      if (old_font_name_ != &::google::protobuf::internal::kEmptyString) {
        old_font_name_->clear();
      }
    }
    preserve_face_ = false;
    if (has_undo_cell_map()) {
      if (undo_cell_map_ != NULL) undo_cell_map_->::TST::CellMapArchive::Clear();
    }
    if (has_redo_cell_map()) {
      if (redo_cell_map_ != NULL) redo_cell_map_->::TST::CellMapArchive::Clear();
    }
    if (has_text_undo()) {
      if (text_undo_ != NULL) text_undo_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetTableFontNameArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_font_name;
        break;
      }

      // required string font_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_font_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_font_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->font_name().data(), this->font_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_old_font_name;
        break;
      }

      // required string old_font_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_font_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_font_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->old_font_name().data(), this->old_font_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_preserve_face;
        break;
      }

      // optional bool preserve_face = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preserve_face:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preserve_face_)));
          set_has_preserve_face();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_undo_cell_map;
        break;
      }

      // optional .TST.CellMapArchive undo_cell_map = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_redo_cell_map;
        break;
      }

      // optional .TST.CellMapArchive redo_cell_map = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_text_undo;
        break;
      }

      // optional .TSP.Reference text_undo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text_undo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text_undo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetTableFontNameArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required string font_name = 2;
  if (has_font_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->font_name().data(), this->font_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->font_name(), output);
  }

  // required string old_font_name = 3;
  if (has_old_font_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_font_name().data(), this->old_font_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->old_font_name(), output);
  }

  // optional bool preserve_face = 5;
  if (has_preserve_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->preserve_face(), output);
  }

  // optional .TST.CellMapArchive undo_cell_map = 6;
  if (has_undo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->undo_cell_map(), output);
  }

  // optional .TST.CellMapArchive redo_cell_map = 7;
  if (has_redo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->redo_cell_map(), output);
  }

  // optional .TSP.Reference text_undo = 8;
  if (has_text_undo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->text_undo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetTableFontNameArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required string font_name = 2;
  if (has_font_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->font_name().data(), this->font_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->font_name(), target);
  }

  // required string old_font_name = 3;
  if (has_old_font_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_font_name().data(), this->old_font_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->old_font_name(), target);
  }

  // optional bool preserve_face = 5;
  if (has_preserve_face()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->preserve_face(), target);
  }

  // optional .TST.CellMapArchive undo_cell_map = 6;
  if (has_undo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->undo_cell_map(), target);
  }

  // optional .TST.CellMapArchive redo_cell_map = 7;
  if (has_redo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->redo_cell_map(), target);
  }

  // optional .TSP.Reference text_undo = 8;
  if (has_text_undo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->text_undo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetTableFontNameArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required string font_name = 2;
    if (has_font_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->font_name());
    }

    // required string old_font_name = 3;
    if (has_old_font_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->old_font_name());
    }

    // optional bool preserve_face = 5;
    if (has_preserve_face()) {
      total_size += 1 + 1;
    }

    // optional .TST.CellMapArchive undo_cell_map = 6;
    if (has_undo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_cell_map());
    }

    // optional .TST.CellMapArchive redo_cell_map = 7;
    if (has_redo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_cell_map());
    }

    // optional .TSP.Reference text_undo = 8;
    if (has_text_undo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text_undo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetTableFontNameArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetTableFontNameArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetTableFontNameArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetTableFontNameArchive::MergeFrom(const CommandSetTableFontNameArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_font_name()) {
      set_font_name(from.font_name());
    }
    if (from.has_old_font_name()) {
      set_old_font_name(from.old_font_name());
    }
    if (from.has_preserve_face()) {
      set_preserve_face(from.preserve_face());
    }
    if (from.has_undo_cell_map()) {
      mutable_undo_cell_map()->::TST::CellMapArchive::MergeFrom(from.undo_cell_map());
    }
    if (from.has_redo_cell_map()) {
      mutable_redo_cell_map()->::TST::CellMapArchive::MergeFrom(from.redo_cell_map());
    }
    if (from.has_text_undo()) {
      mutable_text_undo()->::TSP::Reference::MergeFrom(from.text_undo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetTableFontNameArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetTableFontNameArchive::CopyFrom(const CommandSetTableFontNameArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetTableFontNameArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_undo_cell_map()) {
    if (!this->undo_cell_map().IsInitialized()) return false;
  }
  if (has_redo_cell_map()) {
    if (!this->redo_cell_map().IsInitialized()) return false;
  }
  if (has_text_undo()) {
    if (!this->text_undo().IsInitialized()) return false;
  }
  return true;
}

void CommandSetTableFontNameArchive::Swap(CommandSetTableFontNameArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(font_name_, other->font_name_);
    std::swap(old_font_name_, other->old_font_name_);
    std::swap(preserve_face_, other->preserve_face_);
    std::swap(undo_cell_map_, other->undo_cell_map_);
    std::swap(redo_cell_map_, other->redo_cell_map_);
    std::swap(text_undo_, other->text_undo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetTableFontNameArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetTableFontNameArchive_descriptor_;
  metadata.reflection = CommandSetTableFontNameArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetTableNameHeightArchive::kSuperFieldNumber;
const int CommandSetTableNameHeightArchive::kOldTableNameHeightFieldNumber;
const int CommandSetTableNameHeightArchive::kNewTableNameHeightFieldNumber;
#endif  // !_MSC_VER

CommandSetTableNameHeightArchive::CommandSetTableNameHeightArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetTableNameHeightArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
}

CommandSetTableNameHeightArchive::CommandSetTableNameHeightArchive(const CommandSetTableNameHeightArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetTableNameHeightArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  old_table_name_height_ = 0;
  new_table_name_height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetTableNameHeightArchive::~CommandSetTableNameHeightArchive() {
  SharedDtor();
}

void CommandSetTableNameHeightArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetTableNameHeightArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetTableNameHeightArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetTableNameHeightArchive_descriptor_;
}

const CommandSetTableNameHeightArchive& CommandSetTableNameHeightArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetTableNameHeightArchive* CommandSetTableNameHeightArchive::default_instance_ = NULL;

CommandSetTableNameHeightArchive* CommandSetTableNameHeightArchive::New() const {
  return new CommandSetTableNameHeightArchive;
}

void CommandSetTableNameHeightArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    old_table_name_height_ = 0;
    new_table_name_height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetTableNameHeightArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_old_table_name_height;
        break;
      }

      // required double old_table_name_height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_old_table_name_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &old_table_name_height_)));
          set_has_old_table_name_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_new_table_name_height;
        break;
      }

      // required double new_table_name_height = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_new_table_name_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &new_table_name_height_)));
          set_has_new_table_name_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetTableNameHeightArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required double old_table_name_height = 2;
  if (has_old_table_name_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->old_table_name_height(), output);
  }

  // required double new_table_name_height = 3;
  if (has_new_table_name_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->new_table_name_height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetTableNameHeightArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required double old_table_name_height = 2;
  if (has_old_table_name_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->old_table_name_height(), target);
  }

  // required double new_table_name_height = 3;
  if (has_new_table_name_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->new_table_name_height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetTableNameHeightArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required double old_table_name_height = 2;
    if (has_old_table_name_height()) {
      total_size += 1 + 8;
    }

    // required double new_table_name_height = 3;
    if (has_new_table_name_height()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetTableNameHeightArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetTableNameHeightArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetTableNameHeightArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetTableNameHeightArchive::MergeFrom(const CommandSetTableNameHeightArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_old_table_name_height()) {
      set_old_table_name_height(from.old_table_name_height());
    }
    if (from.has_new_table_name_height()) {
      set_new_table_name_height(from.new_table_name_height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetTableNameHeightArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetTableNameHeightArchive::CopyFrom(const CommandSetTableNameHeightArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetTableNameHeightArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetTableNameHeightArchive::Swap(CommandSetTableNameHeightArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(old_table_name_height_, other->old_table_name_height_);
    std::swap(new_table_name_height_, other->new_table_name_height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetTableNameHeightArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetTableNameHeightArchive_descriptor_;
  metadata.reflection = CommandSetTableNameHeightArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandStyleCellsArchive::kSuperFieldNumber;
const int CommandStyleCellsArchive::kFormatPropertiesFieldNumber;
const int CommandStyleCellsArchive::kSelectionFieldNumber;
const int CommandStyleCellsArchive::kUndoCellMapFieldNumber;
const int CommandStyleCellsArchive::kRedoCellMapFieldNumber;
const int CommandStyleCellsArchive::kTextUndoFieldNumber;
#endif  // !_MSC_VER

CommandStyleCellsArchive::CommandStyleCellsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandStyleCellsArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  format_properties_ = const_cast< ::TSP::ReferenceDictionary*>(&::TSP::ReferenceDictionary::default_instance());
  selection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
  undo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  redo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  text_undo_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandStyleCellsArchive::CommandStyleCellsArchive(const CommandStyleCellsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandStyleCellsArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  format_properties_ = NULL;
  selection_ = NULL;
  undo_cell_map_ = NULL;
  redo_cell_map_ = NULL;
  text_undo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandStyleCellsArchive::~CommandStyleCellsArchive() {
  SharedDtor();
}

void CommandStyleCellsArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete format_properties_;
    delete selection_;
    delete undo_cell_map_;
    delete redo_cell_map_;
    delete text_undo_;
  }
}

void CommandStyleCellsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandStyleCellsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandStyleCellsArchive_descriptor_;
}

const CommandStyleCellsArchive& CommandStyleCellsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandStyleCellsArchive* CommandStyleCellsArchive::default_instance_ = NULL;

CommandStyleCellsArchive* CommandStyleCellsArchive::New() const {
  return new CommandStyleCellsArchive;
}

void CommandStyleCellsArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_format_properties()) {
      if (format_properties_ != NULL) format_properties_->::TSP::ReferenceDictionary::Clear();
    }
    if (has_selection()) {
      if (selection_ != NULL) selection_->::TST::SelectionArchive::Clear();
    }
    if (has_undo_cell_map()) {
      if (undo_cell_map_ != NULL) undo_cell_map_->::TST::CellMapArchive::Clear();
    }
    if (has_redo_cell_map()) {
      if (redo_cell_map_ != NULL) redo_cell_map_->::TST::CellMapArchive::Clear();
    }
    if (has_text_undo()) {
      if (text_undo_ != NULL) text_undo_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandStyleCellsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_format_properties;
        break;
      }

      // optional .TSP.ReferenceDictionary format_properties = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_format_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_format_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_selection;
        break;
      }

      // required .TST.SelectionArchive selection = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_undo_cell_map;
        break;
      }

      // required .TST.CellMapArchive undo_cell_map = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_redo_cell_map;
        break;
      }

      // required .TST.CellMapArchive redo_cell_map = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_text_undo;
        break;
      }

      // optional .TSP.Reference text_undo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text_undo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text_undo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandStyleCellsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.ReferenceDictionary format_properties = 2;
  if (has_format_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->format_properties(), output);
  }

  // required .TST.SelectionArchive selection = 3;
  if (has_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->selection(), output);
  }

  // required .TST.CellMapArchive undo_cell_map = 4;
  if (has_undo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->undo_cell_map(), output);
  }

  // required .TST.CellMapArchive redo_cell_map = 5;
  if (has_redo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->redo_cell_map(), output);
  }

  // optional .TSP.Reference text_undo = 6;
  if (has_text_undo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->text_undo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandStyleCellsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.ReferenceDictionary format_properties = 2;
  if (has_format_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->format_properties(), target);
  }

  // required .TST.SelectionArchive selection = 3;
  if (has_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->selection(), target);
  }

  // required .TST.CellMapArchive undo_cell_map = 4;
  if (has_undo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->undo_cell_map(), target);
  }

  // required .TST.CellMapArchive redo_cell_map = 5;
  if (has_redo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->redo_cell_map(), target);
  }

  // optional .TSP.Reference text_undo = 6;
  if (has_text_undo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->text_undo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandStyleCellsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.ReferenceDictionary format_properties = 2;
    if (has_format_properties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->format_properties());
    }

    // required .TST.SelectionArchive selection = 3;
    if (has_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selection());
    }

    // required .TST.CellMapArchive undo_cell_map = 4;
    if (has_undo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_cell_map());
    }

    // required .TST.CellMapArchive redo_cell_map = 5;
    if (has_redo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_cell_map());
    }

    // optional .TSP.Reference text_undo = 6;
    if (has_text_undo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text_undo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandStyleCellsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandStyleCellsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandStyleCellsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandStyleCellsArchive::MergeFrom(const CommandStyleCellsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_format_properties()) {
      mutable_format_properties()->::TSP::ReferenceDictionary::MergeFrom(from.format_properties());
    }
    if (from.has_selection()) {
      mutable_selection()->::TST::SelectionArchive::MergeFrom(from.selection());
    }
    if (from.has_undo_cell_map()) {
      mutable_undo_cell_map()->::TST::CellMapArchive::MergeFrom(from.undo_cell_map());
    }
    if (from.has_redo_cell_map()) {
      mutable_redo_cell_map()->::TST::CellMapArchive::MergeFrom(from.redo_cell_map());
    }
    if (from.has_text_undo()) {
      mutable_text_undo()->::TSP::Reference::MergeFrom(from.text_undo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandStyleCellsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandStyleCellsArchive::CopyFrom(const CommandStyleCellsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandStyleCellsArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_format_properties()) {
    if (!this->format_properties().IsInitialized()) return false;
  }
  if (has_selection()) {
    if (!this->selection().IsInitialized()) return false;
  }
  if (has_undo_cell_map()) {
    if (!this->undo_cell_map().IsInitialized()) return false;
  }
  if (has_redo_cell_map()) {
    if (!this->redo_cell_map().IsInitialized()) return false;
  }
  if (has_text_undo()) {
    if (!this->text_undo().IsInitialized()) return false;
  }
  return true;
}

void CommandStyleCellsArchive::Swap(CommandStyleCellsArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(format_properties_, other->format_properties_);
    std::swap(selection_, other->selection_);
    std::swap(undo_cell_map_, other->undo_cell_map_);
    std::swap(redo_cell_map_, other->redo_cell_map_);
    std::swap(text_undo_, other->text_undo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandStyleCellsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandStyleCellsArchive_descriptor_;
  metadata.reflection = CommandStyleCellsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetFillPropertyArchive::kSuperFieldNumber;
const int CommandSetFillPropertyArchive::kFillFieldNumber;
const int CommandSetFillPropertyArchive::kCellFillStandInFieldNumber;
const int CommandSetFillPropertyArchive::kSelectionFieldNumber;
const int CommandSetFillPropertyArchive::kUndoCellMapFieldNumber;
const int CommandSetFillPropertyArchive::kRedoCellMapFieldNumber;
#endif  // !_MSC_VER

CommandSetFillPropertyArchive::CommandSetFillPropertyArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetFillPropertyArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  fill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  cell_fill_stand_in_ = const_cast< ::TST::CellFillStandIn*>(&::TST::CellFillStandIn::default_instance());
  selection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
  undo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  redo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
}

CommandSetFillPropertyArchive::CommandSetFillPropertyArchive(const CommandSetFillPropertyArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetFillPropertyArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  fill_ = NULL;
  cell_fill_stand_in_ = NULL;
  selection_ = NULL;
  undo_cell_map_ = NULL;
  redo_cell_map_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetFillPropertyArchive::~CommandSetFillPropertyArchive() {
  SharedDtor();
}

void CommandSetFillPropertyArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete fill_;
    delete cell_fill_stand_in_;
    delete selection_;
    delete undo_cell_map_;
    delete redo_cell_map_;
  }
}

void CommandSetFillPropertyArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetFillPropertyArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetFillPropertyArchive_descriptor_;
}

const CommandSetFillPropertyArchive& CommandSetFillPropertyArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetFillPropertyArchive* CommandSetFillPropertyArchive::default_instance_ = NULL;

CommandSetFillPropertyArchive* CommandSetFillPropertyArchive::New() const {
  return new CommandSetFillPropertyArchive;
}

void CommandSetFillPropertyArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_fill()) {
      if (fill_ != NULL) fill_->::TSD::FillArchive::Clear();
    }
    if (has_cell_fill_stand_in()) {
      if (cell_fill_stand_in_ != NULL) cell_fill_stand_in_->::TST::CellFillStandIn::Clear();
    }
    if (has_selection()) {
      if (selection_ != NULL) selection_->::TST::SelectionArchive::Clear();
    }
    if (has_undo_cell_map()) {
      if (undo_cell_map_ != NULL) undo_cell_map_->::TST::CellMapArchive::Clear();
    }
    if (has_redo_cell_map()) {
      if (redo_cell_map_ != NULL) redo_cell_map_->::TST::CellMapArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetFillPropertyArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fill;
        break;
      }

      // optional .TSD.FillArchive fill = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cell_fill_stand_in;
        break;
      }

      // optional .TST.CellFillStandIn cell_fill_stand_in = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_fill_stand_in:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell_fill_stand_in()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_selection;
        break;
      }

      // required .TST.SelectionArchive selection = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_undo_cell_map;
        break;
      }

      // required .TST.CellMapArchive undo_cell_map = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_redo_cell_map;
        break;
      }

      // required .TST.CellMapArchive redo_cell_map = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetFillPropertyArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSD.FillArchive fill = 2;
  if (has_fill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fill(), output);
  }

  // optional .TST.CellFillStandIn cell_fill_stand_in = 3;
  if (has_cell_fill_stand_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cell_fill_stand_in(), output);
  }

  // required .TST.SelectionArchive selection = 4;
  if (has_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->selection(), output);
  }

  // required .TST.CellMapArchive undo_cell_map = 5;
  if (has_undo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->undo_cell_map(), output);
  }

  // required .TST.CellMapArchive redo_cell_map = 6;
  if (has_redo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->redo_cell_map(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetFillPropertyArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSD.FillArchive fill = 2;
  if (has_fill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fill(), target);
  }

  // optional .TST.CellFillStandIn cell_fill_stand_in = 3;
  if (has_cell_fill_stand_in()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cell_fill_stand_in(), target);
  }

  // required .TST.SelectionArchive selection = 4;
  if (has_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->selection(), target);
  }

  // required .TST.CellMapArchive undo_cell_map = 5;
  if (has_undo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->undo_cell_map(), target);
  }

  // required .TST.CellMapArchive redo_cell_map = 6;
  if (has_redo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->redo_cell_map(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetFillPropertyArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSD.FillArchive fill = 2;
    if (has_fill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fill());
    }

    // optional .TST.CellFillStandIn cell_fill_stand_in = 3;
    if (has_cell_fill_stand_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cell_fill_stand_in());
    }

    // required .TST.SelectionArchive selection = 4;
    if (has_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selection());
    }

    // required .TST.CellMapArchive undo_cell_map = 5;
    if (has_undo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_cell_map());
    }

    // required .TST.CellMapArchive redo_cell_map = 6;
    if (has_redo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_cell_map());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetFillPropertyArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetFillPropertyArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetFillPropertyArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetFillPropertyArchive::MergeFrom(const CommandSetFillPropertyArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_fill()) {
      mutable_fill()->::TSD::FillArchive::MergeFrom(from.fill());
    }
    if (from.has_cell_fill_stand_in()) {
      mutable_cell_fill_stand_in()->::TST::CellFillStandIn::MergeFrom(from.cell_fill_stand_in());
    }
    if (from.has_selection()) {
      mutable_selection()->::TST::SelectionArchive::MergeFrom(from.selection());
    }
    if (from.has_undo_cell_map()) {
      mutable_undo_cell_map()->::TST::CellMapArchive::MergeFrom(from.undo_cell_map());
    }
    if (from.has_redo_cell_map()) {
      mutable_redo_cell_map()->::TST::CellMapArchive::MergeFrom(from.redo_cell_map());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetFillPropertyArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetFillPropertyArchive::CopyFrom(const CommandSetFillPropertyArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetFillPropertyArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000039) != 0x00000039) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_fill()) {
    if (!this->fill().IsInitialized()) return false;
  }
  if (has_cell_fill_stand_in()) {
    if (!this->cell_fill_stand_in().IsInitialized()) return false;
  }
  if (has_selection()) {
    if (!this->selection().IsInitialized()) return false;
  }
  if (has_undo_cell_map()) {
    if (!this->undo_cell_map().IsInitialized()) return false;
  }
  if (has_redo_cell_map()) {
    if (!this->redo_cell_map().IsInitialized()) return false;
  }
  return true;
}

void CommandSetFillPropertyArchive::Swap(CommandSetFillPropertyArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(fill_, other->fill_);
    std::swap(cell_fill_stand_in_, other->cell_fill_stand_in_);
    std::swap(selection_, other->selection_);
    std::swap(undo_cell_map_, other->undo_cell_map_);
    std::swap(redo_cell_map_, other->redo_cell_map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetFillPropertyArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetFillPropertyArchive_descriptor_;
  metadata.reflection = CommandSetFillPropertyArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandStyleTableArchive::kSuperFieldNumber;
const int CommandStyleTableArchive::kFormatPropertiesFieldNumber;
const int CommandStyleTableArchive::kOldStyleFieldNumber;
const int CommandStyleTableArchive::kNewStyleFieldNumber;
#endif  // !_MSC_VER

CommandStyleTableArchive::CommandStyleTableArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandStyleTableArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  format_properties_ = const_cast< ::TSP::ReferenceDictionary*>(&::TSP::ReferenceDictionary::default_instance());
  old_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  new_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandStyleTableArchive::CommandStyleTableArchive(const CommandStyleTableArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandStyleTableArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  format_properties_ = NULL;
  old_style_ = NULL;
  new_style_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandStyleTableArchive::~CommandStyleTableArchive() {
  SharedDtor();
}

void CommandStyleTableArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete format_properties_;
    delete old_style_;
    delete new_style_;
  }
}

void CommandStyleTableArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandStyleTableArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandStyleTableArchive_descriptor_;
}

const CommandStyleTableArchive& CommandStyleTableArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandStyleTableArchive* CommandStyleTableArchive::default_instance_ = NULL;

CommandStyleTableArchive* CommandStyleTableArchive::New() const {
  return new CommandStyleTableArchive;
}

void CommandStyleTableArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_format_properties()) {
      if (format_properties_ != NULL) format_properties_->::TSP::ReferenceDictionary::Clear();
    }
    if (has_old_style()) {
      if (old_style_ != NULL) old_style_->::TSP::Reference::Clear();
    }
    if (has_new_style()) {
      if (new_style_ != NULL) new_style_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandStyleTableArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_format_properties;
        break;
      }

      // optional .TSP.ReferenceDictionary format_properties = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_format_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_format_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_old_style;
        break;
      }

      // optional .TSP.Reference old_style = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_new_style;
        break;
      }

      // optional .TSP.Reference new_style = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandStyleTableArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.ReferenceDictionary format_properties = 2;
  if (has_format_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->format_properties(), output);
  }

  // optional .TSP.Reference old_style = 3;
  if (has_old_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->old_style(), output);
  }

  // optional .TSP.Reference new_style = 4;
  if (has_new_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->new_style(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandStyleTableArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.ReferenceDictionary format_properties = 2;
  if (has_format_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->format_properties(), target);
  }

  // optional .TSP.Reference old_style = 3;
  if (has_old_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->old_style(), target);
  }

  // optional .TSP.Reference new_style = 4;
  if (has_new_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->new_style(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandStyleTableArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.ReferenceDictionary format_properties = 2;
    if (has_format_properties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->format_properties());
    }

    // optional .TSP.Reference old_style = 3;
    if (has_old_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_style());
    }

    // optional .TSP.Reference new_style = 4;
    if (has_new_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_style());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandStyleTableArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandStyleTableArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandStyleTableArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandStyleTableArchive::MergeFrom(const CommandStyleTableArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_format_properties()) {
      mutable_format_properties()->::TSP::ReferenceDictionary::MergeFrom(from.format_properties());
    }
    if (from.has_old_style()) {
      mutable_old_style()->::TSP::Reference::MergeFrom(from.old_style());
    }
    if (from.has_new_style()) {
      mutable_new_style()->::TSP::Reference::MergeFrom(from.new_style());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandStyleTableArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandStyleTableArchive::CopyFrom(const CommandStyleTableArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandStyleTableArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_format_properties()) {
    if (!this->format_properties().IsInitialized()) return false;
  }
  if (has_old_style()) {
    if (!this->old_style().IsInitialized()) return false;
  }
  if (has_new_style()) {
    if (!this->new_style().IsInitialized()) return false;
  }
  return true;
}

void CommandStyleTableArchive::Swap(CommandStyleTableArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(format_properties_, other->format_properties_);
    std::swap(old_style_, other->old_style_);
    std::swap(new_style_, other->new_style_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandStyleTableArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandStyleTableArchive_descriptor_;
  metadata.reflection = CommandStyleTableArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandFillCellsArchive::kSuperFieldNumber;
const int CommandFillCellsArchive::kSourceselectionFieldNumber;
const int CommandFillCellsArchive::kSourcecellrangeFieldNumber;
const int CommandFillCellsArchive::kTargetcellrangeFieldNumber;
const int CommandFillCellsArchive::kUndoCellMapFieldNumber;
const int CommandFillCellsArchive::kFillDirectionFieldNumber;
const int CommandFillCellsArchive::kTargetselectionFieldNumber;
const int CommandFillCellsArchive::kRedoCellMapFieldNumber;
#endif  // !_MSC_VER

CommandFillCellsArchive::CommandFillCellsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandFillCellsArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  sourceselection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
  sourcecellrange_ = const_cast< ::TST::CellRange*>(&::TST::CellRange::default_instance());
  targetcellrange_ = const_cast< ::TST::CellRange*>(&::TST::CellRange::default_instance());
  undo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  targetselection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
  redo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
}

CommandFillCellsArchive::CommandFillCellsArchive(const CommandFillCellsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandFillCellsArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  sourceselection_ = NULL;
  sourcecellrange_ = NULL;
  targetcellrange_ = NULL;
  undo_cell_map_ = NULL;
  filldirection_ = 1;
  targetselection_ = NULL;
  redo_cell_map_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandFillCellsArchive::~CommandFillCellsArchive() {
  SharedDtor();
}

void CommandFillCellsArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete sourceselection_;
    delete sourcecellrange_;
    delete targetcellrange_;
    delete undo_cell_map_;
    delete targetselection_;
    delete redo_cell_map_;
  }
}

void CommandFillCellsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandFillCellsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandFillCellsArchive_descriptor_;
}

const CommandFillCellsArchive& CommandFillCellsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandFillCellsArchive* CommandFillCellsArchive::default_instance_ = NULL;

CommandFillCellsArchive* CommandFillCellsArchive::New() const {
  return new CommandFillCellsArchive;
}

void CommandFillCellsArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_sourceselection()) {
      if (sourceselection_ != NULL) sourceselection_->::TST::SelectionArchive::Clear();
    }
    if (has_sourcecellrange()) {
      if (sourcecellrange_ != NULL) sourcecellrange_->::TST::CellRange::Clear();
    }
    if (has_targetcellrange()) {
      if (targetcellrange_ != NULL) targetcellrange_->::TST::CellRange::Clear();
    }
    if (has_undo_cell_map()) {
      if (undo_cell_map_ != NULL) undo_cell_map_->::TST::CellMapArchive::Clear();
    }
    filldirection_ = 1;
    if (has_targetselection()) {
      if (targetselection_ != NULL) targetselection_->::TST::SelectionArchive::Clear();
    }
    if (has_redo_cell_map()) {
      if (redo_cell_map_ != NULL) redo_cell_map_->::TST::CellMapArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandFillCellsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sourceselection;
        break;
      }

      // required .TST.SelectionArchive sourceselection = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sourceselection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sourceselection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sourcecellrange;
        break;
      }

      // required .TST.CellRange sourcecellrange = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sourcecellrange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sourcecellrange()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_targetcellrange;
        break;
      }

      // required .TST.CellRange targetcellrange = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetcellrange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetcellrange()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_undo_cell_map;
        break;
      }

      // required .TST.CellMapArchive undo_cell_map = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fillDirection;
        break;
      }

      // required .TST.FillDirectionArchive fillDirection = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fillDirection:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TST::FillDirectionArchive_IsValid(value)) {
            set_filldirection(static_cast< ::TST::FillDirectionArchive >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_targetselection;
        break;
      }

      // required .TST.SelectionArchive targetselection = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetselection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetselection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_redo_cell_map;
        break;
      }

      // required .TST.CellMapArchive redo_cell_map = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandFillCellsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TST.SelectionArchive sourceselection = 2;
  if (has_sourceselection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sourceselection(), output);
  }

  // required .TST.CellRange sourcecellrange = 3;
  if (has_sourcecellrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sourcecellrange(), output);
  }

  // required .TST.CellRange targetcellrange = 4;
  if (has_targetcellrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->targetcellrange(), output);
  }

  // required .TST.CellMapArchive undo_cell_map = 5;
  if (has_undo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->undo_cell_map(), output);
  }

  // required .TST.FillDirectionArchive fillDirection = 6;
  if (has_filldirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->filldirection(), output);
  }

  // required .TST.SelectionArchive targetselection = 7;
  if (has_targetselection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->targetselection(), output);
  }

  // required .TST.CellMapArchive redo_cell_map = 8;
  if (has_redo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->redo_cell_map(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandFillCellsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TST.SelectionArchive sourceselection = 2;
  if (has_sourceselection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sourceselection(), target);
  }

  // required .TST.CellRange sourcecellrange = 3;
  if (has_sourcecellrange()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sourcecellrange(), target);
  }

  // required .TST.CellRange targetcellrange = 4;
  if (has_targetcellrange()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->targetcellrange(), target);
  }

  // required .TST.CellMapArchive undo_cell_map = 5;
  if (has_undo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->undo_cell_map(), target);
  }

  // required .TST.FillDirectionArchive fillDirection = 6;
  if (has_filldirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->filldirection(), target);
  }

  // required .TST.SelectionArchive targetselection = 7;
  if (has_targetselection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->targetselection(), target);
  }

  // required .TST.CellMapArchive redo_cell_map = 8;
  if (has_redo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->redo_cell_map(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandFillCellsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TST.SelectionArchive sourceselection = 2;
    if (has_sourceselection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sourceselection());
    }

    // required .TST.CellRange sourcecellrange = 3;
    if (has_sourcecellrange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sourcecellrange());
    }

    // required .TST.CellRange targetcellrange = 4;
    if (has_targetcellrange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetcellrange());
    }

    // required .TST.CellMapArchive undo_cell_map = 5;
    if (has_undo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_cell_map());
    }

    // required .TST.FillDirectionArchive fillDirection = 6;
    if (has_filldirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filldirection());
    }

    // required .TST.SelectionArchive targetselection = 7;
    if (has_targetselection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetselection());
    }

    // required .TST.CellMapArchive redo_cell_map = 8;
    if (has_redo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_cell_map());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandFillCellsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandFillCellsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandFillCellsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandFillCellsArchive::MergeFrom(const CommandFillCellsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_sourceselection()) {
      mutable_sourceselection()->::TST::SelectionArchive::MergeFrom(from.sourceselection());
    }
    if (from.has_sourcecellrange()) {
      mutable_sourcecellrange()->::TST::CellRange::MergeFrom(from.sourcecellrange());
    }
    if (from.has_targetcellrange()) {
      mutable_targetcellrange()->::TST::CellRange::MergeFrom(from.targetcellrange());
    }
    if (from.has_undo_cell_map()) {
      mutable_undo_cell_map()->::TST::CellMapArchive::MergeFrom(from.undo_cell_map());
    }
    if (from.has_filldirection()) {
      set_filldirection(from.filldirection());
    }
    if (from.has_targetselection()) {
      mutable_targetselection()->::TST::SelectionArchive::MergeFrom(from.targetselection());
    }
    if (from.has_redo_cell_map()) {
      mutable_redo_cell_map()->::TST::CellMapArchive::MergeFrom(from.redo_cell_map());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandFillCellsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandFillCellsArchive::CopyFrom(const CommandFillCellsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandFillCellsArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_sourceselection()) {
    if (!this->sourceselection().IsInitialized()) return false;
  }
  if (has_sourcecellrange()) {
    if (!this->sourcecellrange().IsInitialized()) return false;
  }
  if (has_targetcellrange()) {
    if (!this->targetcellrange().IsInitialized()) return false;
  }
  if (has_undo_cell_map()) {
    if (!this->undo_cell_map().IsInitialized()) return false;
  }
  if (has_targetselection()) {
    if (!this->targetselection().IsInitialized()) return false;
  }
  if (has_redo_cell_map()) {
    if (!this->redo_cell_map().IsInitialized()) return false;
  }
  return true;
}

void CommandFillCellsArchive::Swap(CommandFillCellsArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(sourceselection_, other->sourceselection_);
    std::swap(sourcecellrange_, other->sourcecellrange_);
    std::swap(targetcellrange_, other->targetcellrange_);
    std::swap(undo_cell_map_, other->undo_cell_map_);
    std::swap(filldirection_, other->filldirection_);
    std::swap(targetselection_, other->targetselection_);
    std::swap(redo_cell_map_, other->redo_cell_map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandFillCellsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandFillCellsArchive_descriptor_;
  metadata.reflection = CommandFillCellsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandReplaceTextArchive::kCellIDFieldNumber;
const int CommandReplaceTextArchive::kNewcellFieldNumber;
const int CommandReplaceTextArchive::kOldcellFieldNumber;
const int CommandReplaceTextArchive::kSuperFieldNumber;
const int CommandReplaceTextArchive::kChildCommandUndoFieldNumber;
#endif  // !_MSC_VER

CommandReplaceTextArchive::CommandReplaceTextArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandReplaceTextArchive::InitAsDefaultInstance() {
  cellid_ = const_cast< ::TST::CellID*>(&::TST::CellID::default_instance());
  newcell_ = const_cast< ::TST::Cell*>(&::TST::Cell::default_instance());
  oldcell_ = const_cast< ::TST::Cell*>(&::TST::Cell::default_instance());
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  child_command_undo_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandReplaceTextArchive::CommandReplaceTextArchive(const CommandReplaceTextArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandReplaceTextArchive::SharedCtor() {
  _cached_size_ = 0;
  cellid_ = NULL;
  newcell_ = NULL;
  oldcell_ = NULL;
  super_ = NULL;
  child_command_undo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandReplaceTextArchive::~CommandReplaceTextArchive() {
  SharedDtor();
}

void CommandReplaceTextArchive::SharedDtor() {
  if (this != default_instance_) {
    delete cellid_;
    delete newcell_;
    delete oldcell_;
    delete super_;
    delete child_command_undo_;
  }
}

void CommandReplaceTextArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandReplaceTextArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandReplaceTextArchive_descriptor_;
}

const CommandReplaceTextArchive& CommandReplaceTextArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandReplaceTextArchive* CommandReplaceTextArchive::default_instance_ = NULL;

CommandReplaceTextArchive* CommandReplaceTextArchive::New() const {
  return new CommandReplaceTextArchive;
}

void CommandReplaceTextArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cellid()) {
      if (cellid_ != NULL) cellid_->::TST::CellID::Clear();
    }
    if (has_newcell()) {
      if (newcell_ != NULL) newcell_->::TST::Cell::Clear();
    }
    if (has_oldcell()) {
      if (oldcell_ != NULL) oldcell_->::TST::Cell::Clear();
    }
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_child_command_undo()) {
      if (child_command_undo_ != NULL) child_command_undo_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandReplaceTextArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CellID cellID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cellid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_newcell;
        break;
      }

      // required .TST.Cell newcell = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newcell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newcell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_oldcell;
        break;
      }

      // required .TST.Cell oldcell = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldcell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldcell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_super;
        break;
      }

      // required .TST.TableCommandArchive super = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_child_command_undo;
        break;
      }

      // optional .TSP.Reference child_command_undo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_child_command_undo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_child_command_undo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandReplaceTextArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CellID cellID = 1;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cellid(), output);
  }

  // required .TST.Cell newcell = 2;
  if (has_newcell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->newcell(), output);
  }

  // required .TST.Cell oldcell = 3;
  if (has_oldcell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->oldcell(), output);
  }

  // required .TST.TableCommandArchive super = 4;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->super(), output);
  }

  // optional .TSP.Reference child_command_undo = 5;
  if (has_child_command_undo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->child_command_undo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandReplaceTextArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CellID cellID = 1;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cellid(), target);
  }

  // required .TST.Cell newcell = 2;
  if (has_newcell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->newcell(), target);
  }

  // required .TST.Cell oldcell = 3;
  if (has_oldcell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->oldcell(), target);
  }

  // required .TST.TableCommandArchive super = 4;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->super(), target);
  }

  // optional .TSP.Reference child_command_undo = 5;
  if (has_child_command_undo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->child_command_undo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandReplaceTextArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CellID cellID = 1;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cellid());
    }

    // required .TST.Cell newcell = 2;
    if (has_newcell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newcell());
    }

    // required .TST.Cell oldcell = 3;
    if (has_oldcell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oldcell());
    }

    // required .TST.TableCommandArchive super = 4;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference child_command_undo = 5;
    if (has_child_command_undo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->child_command_undo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandReplaceTextArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandReplaceTextArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandReplaceTextArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandReplaceTextArchive::MergeFrom(const CommandReplaceTextArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellid()) {
      mutable_cellid()->::TST::CellID::MergeFrom(from.cellid());
    }
    if (from.has_newcell()) {
      mutable_newcell()->::TST::Cell::MergeFrom(from.newcell());
    }
    if (from.has_oldcell()) {
      mutable_oldcell()->::TST::Cell::MergeFrom(from.oldcell());
    }
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_child_command_undo()) {
      mutable_child_command_undo()->::TSP::Reference::MergeFrom(from.child_command_undo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandReplaceTextArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandReplaceTextArchive::CopyFrom(const CommandReplaceTextArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReplaceTextArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_cellid()) {
    if (!this->cellid().IsInitialized()) return false;
  }
  if (has_newcell()) {
    if (!this->newcell().IsInitialized()) return false;
  }
  if (has_oldcell()) {
    if (!this->oldcell().IsInitialized()) return false;
  }
  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_child_command_undo()) {
    if (!this->child_command_undo().IsInitialized()) return false;
  }
  return true;
}

void CommandReplaceTextArchive::Swap(CommandReplaceTextArchive* other) {
  if (other != this) {
    std::swap(cellid_, other->cellid_);
    std::swap(newcell_, other->newcell_);
    std::swap(oldcell_, other->oldcell_);
    std::swap(super_, other->super_);
    std::swap(child_command_undo_, other->child_command_undo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandReplaceTextArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandReplaceTextArchive_descriptor_;
  metadata.reflection = CommandReplaceTextArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandReplaceAllTextArchive::kTableInfoFieldNumber;
const int CommandReplaceAllTextArchive::kUndoCellMapFieldNumber;
const int CommandReplaceAllTextArchive::kRedoCellMapFieldNumber;
#endif  // !_MSC_VER

CommandReplaceAllTextArchive::CommandReplaceAllTextArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandReplaceAllTextArchive::InitAsDefaultInstance() {
  tableinfo_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  undo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  redo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
}

CommandReplaceAllTextArchive::CommandReplaceAllTextArchive(const CommandReplaceAllTextArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandReplaceAllTextArchive::SharedCtor() {
  _cached_size_ = 0;
  tableinfo_ = NULL;
  undo_cell_map_ = NULL;
  redo_cell_map_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandReplaceAllTextArchive::~CommandReplaceAllTextArchive() {
  SharedDtor();
}

void CommandReplaceAllTextArchive::SharedDtor() {
  if (this != default_instance_) {
    delete tableinfo_;
    delete undo_cell_map_;
    delete redo_cell_map_;
  }
}

void CommandReplaceAllTextArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandReplaceAllTextArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandReplaceAllTextArchive_descriptor_;
}

const CommandReplaceAllTextArchive& CommandReplaceAllTextArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandReplaceAllTextArchive* CommandReplaceAllTextArchive::default_instance_ = NULL;

CommandReplaceAllTextArchive* CommandReplaceAllTextArchive::New() const {
  return new CommandReplaceAllTextArchive;
}

void CommandReplaceAllTextArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tableinfo()) {
      if (tableinfo_ != NULL) tableinfo_->::TSP::Reference::Clear();
    }
    if (has_undo_cell_map()) {
      if (undo_cell_map_ != NULL) undo_cell_map_->::TST::CellMapArchive::Clear();
    }
    if (has_redo_cell_map()) {
      if (redo_cell_map_ != NULL) redo_cell_map_->::TST::CellMapArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandReplaceAllTextArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Reference tableInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tableinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_undo_cell_map;
        break;
      }

      // required .TST.CellMapArchive undo_cell_map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_redo_cell_map;
        break;
      }

      // required .TST.CellMapArchive redo_cell_map = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandReplaceAllTextArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Reference tableInfo = 1;
  if (has_tableinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tableinfo(), output);
  }

  // required .TST.CellMapArchive undo_cell_map = 2;
  if (has_undo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->undo_cell_map(), output);
  }

  // required .TST.CellMapArchive redo_cell_map = 3;
  if (has_redo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->redo_cell_map(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandReplaceAllTextArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Reference tableInfo = 1;
  if (has_tableinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tableinfo(), target);
  }

  // required .TST.CellMapArchive undo_cell_map = 2;
  if (has_undo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->undo_cell_map(), target);
  }

  // required .TST.CellMapArchive redo_cell_map = 3;
  if (has_redo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->redo_cell_map(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandReplaceAllTextArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.Reference tableInfo = 1;
    if (has_tableinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tableinfo());
    }

    // required .TST.CellMapArchive undo_cell_map = 2;
    if (has_undo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_cell_map());
    }

    // required .TST.CellMapArchive redo_cell_map = 3;
    if (has_redo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_cell_map());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandReplaceAllTextArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandReplaceAllTextArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandReplaceAllTextArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandReplaceAllTextArchive::MergeFrom(const CommandReplaceAllTextArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableinfo()) {
      mutable_tableinfo()->::TSP::Reference::MergeFrom(from.tableinfo());
    }
    if (from.has_undo_cell_map()) {
      mutable_undo_cell_map()->::TST::CellMapArchive::MergeFrom(from.undo_cell_map());
    }
    if (from.has_redo_cell_map()) {
      mutable_redo_cell_map()->::TST::CellMapArchive::MergeFrom(from.redo_cell_map());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandReplaceAllTextArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandReplaceAllTextArchive::CopyFrom(const CommandReplaceAllTextArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReplaceAllTextArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_tableinfo()) {
    if (!this->tableinfo().IsInitialized()) return false;
  }
  if (has_undo_cell_map()) {
    if (!this->undo_cell_map().IsInitialized()) return false;
  }
  if (has_redo_cell_map()) {
    if (!this->redo_cell_map().IsInitialized()) return false;
  }
  return true;
}

void CommandReplaceAllTextArchive::Swap(CommandReplaceAllTextArchive* other) {
  if (other != this) {
    std::swap(tableinfo_, other->tableinfo_);
    std::swap(undo_cell_map_, other->undo_cell_map_);
    std::swap(redo_cell_map_, other->redo_cell_map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandReplaceAllTextArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandReplaceAllTextArchive_descriptor_;
  metadata.reflection = CommandReplaceAllTextArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetRepeatingHeaderEnabledArchive::kRepeatingHeaderEnabledFieldNumber;
const int CommandSetRepeatingHeaderEnabledArchive::kDirectionFieldNumber;
const int CommandSetRepeatingHeaderEnabledArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandSetRepeatingHeaderEnabledArchive::CommandSetRepeatingHeaderEnabledArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetRepeatingHeaderEnabledArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
}

CommandSetRepeatingHeaderEnabledArchive::CommandSetRepeatingHeaderEnabledArchive(const CommandSetRepeatingHeaderEnabledArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetRepeatingHeaderEnabledArchive::SharedCtor() {
  _cached_size_ = 0;
  repeating_header_enabled_ = false;
  direction_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetRepeatingHeaderEnabledArchive::~CommandSetRepeatingHeaderEnabledArchive() {
  SharedDtor();
}

void CommandSetRepeatingHeaderEnabledArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetRepeatingHeaderEnabledArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetRepeatingHeaderEnabledArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetRepeatingHeaderEnabledArchive_descriptor_;
}

const CommandSetRepeatingHeaderEnabledArchive& CommandSetRepeatingHeaderEnabledArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetRepeatingHeaderEnabledArchive* CommandSetRepeatingHeaderEnabledArchive::default_instance_ = NULL;

CommandSetRepeatingHeaderEnabledArchive* CommandSetRepeatingHeaderEnabledArchive::New() const {
  return new CommandSetRepeatingHeaderEnabledArchive;
}

void CommandSetRepeatingHeaderEnabledArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    repeating_header_enabled_ = false;
    direction_ = 0;
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetRepeatingHeaderEnabledArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool repeating_header_enabled = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &repeating_header_enabled_)));
          set_has_repeating_header_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_direction;
        break;
      }

      // required .TST.CommandDirectionArchive direction = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TST::CommandDirectionArchive_IsValid(value)) {
            set_direction(static_cast< ::TST::CommandDirectionArchive >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_super;
        break;
      }

      // required .TST.TableCommandArchive super = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetRepeatingHeaderEnabledArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool repeating_header_enabled = 1;
  if (has_repeating_header_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->repeating_header_enabled(), output);
  }

  // required .TST.CommandDirectionArchive direction = 2;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->direction(), output);
  }

  // required .TST.TableCommandArchive super = 3;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetRepeatingHeaderEnabledArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool repeating_header_enabled = 1;
  if (has_repeating_header_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->repeating_header_enabled(), target);
  }

  // required .TST.CommandDirectionArchive direction = 2;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->direction(), target);
  }

  // required .TST.TableCommandArchive super = 3;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetRepeatingHeaderEnabledArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool repeating_header_enabled = 1;
    if (has_repeating_header_enabled()) {
      total_size += 1 + 1;
    }

    // required .TST.CommandDirectionArchive direction = 2;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

    // required .TST.TableCommandArchive super = 3;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetRepeatingHeaderEnabledArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetRepeatingHeaderEnabledArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetRepeatingHeaderEnabledArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetRepeatingHeaderEnabledArchive::MergeFrom(const CommandSetRepeatingHeaderEnabledArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_repeating_header_enabled()) {
      set_repeating_header_enabled(from.repeating_header_enabled());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetRepeatingHeaderEnabledArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetRepeatingHeaderEnabledArchive::CopyFrom(const CommandSetRepeatingHeaderEnabledArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetRepeatingHeaderEnabledArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetRepeatingHeaderEnabledArchive::Swap(CommandSetRepeatingHeaderEnabledArchive* other) {
  if (other != this) {
    std::swap(repeating_header_enabled_, other->repeating_header_enabled_);
    std::swap(direction_, other->direction_);
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetRepeatingHeaderEnabledArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetRepeatingHeaderEnabledArchive_descriptor_;
  metadata.reflection = CommandSetRepeatingHeaderEnabledArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetFiltersEnabledArchive::kEnableFiltersFieldNumber;
const int CommandSetFiltersEnabledArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandSetFiltersEnabledArchive::CommandSetFiltersEnabledArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetFiltersEnabledArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
}

CommandSetFiltersEnabledArchive::CommandSetFiltersEnabledArchive(const CommandSetFiltersEnabledArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetFiltersEnabledArchive::SharedCtor() {
  _cached_size_ = 0;
  enable_filters_ = false;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetFiltersEnabledArchive::~CommandSetFiltersEnabledArchive() {
  SharedDtor();
}

void CommandSetFiltersEnabledArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetFiltersEnabledArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetFiltersEnabledArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetFiltersEnabledArchive_descriptor_;
}

const CommandSetFiltersEnabledArchive& CommandSetFiltersEnabledArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetFiltersEnabledArchive* CommandSetFiltersEnabledArchive::default_instance_ = NULL;

CommandSetFiltersEnabledArchive* CommandSetFiltersEnabledArchive::New() const {
  return new CommandSetFiltersEnabledArchive;
}

void CommandSetFiltersEnabledArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enable_filters_ = false;
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetFiltersEnabledArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool enable_filters = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_filters_)));
          set_has_enable_filters();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_super;
        break;
      }

      // required .TST.TableCommandArchive super = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetFiltersEnabledArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool enable_filters = 1;
  if (has_enable_filters()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable_filters(), output);
  }

  // required .TST.TableCommandArchive super = 2;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetFiltersEnabledArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool enable_filters = 1;
  if (has_enable_filters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable_filters(), target);
  }

  // required .TST.TableCommandArchive super = 2;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetFiltersEnabledArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool enable_filters = 1;
    if (has_enable_filters()) {
      total_size += 1 + 1;
    }

    // required .TST.TableCommandArchive super = 2;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetFiltersEnabledArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetFiltersEnabledArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetFiltersEnabledArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetFiltersEnabledArchive::MergeFrom(const CommandSetFiltersEnabledArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enable_filters()) {
      set_enable_filters(from.enable_filters());
    }
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetFiltersEnabledArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetFiltersEnabledArchive::CopyFrom(const CommandSetFiltersEnabledArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetFiltersEnabledArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetFiltersEnabledArchive::Swap(CommandSetFiltersEnabledArchive* other) {
  if (other != this) {
    std::swap(enable_filters_, other->enable_filters_);
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetFiltersEnabledArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetFiltersEnabledArchive_descriptor_;
  metadata.reflection = CommandSetFiltersEnabledArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandAddQuickFilterRulesArchive::kSuperFieldNumber;
const int CommandAddQuickFilterRulesArchive::kRulesFieldNumber;
const int CommandAddQuickFilterRulesArchive::kFilterIndexFieldNumber;
const int CommandAddQuickFilterRulesArchive::kRuleIndicesFieldNumber;
const int CommandAddQuickFilterRulesArchive::kFilterSetEnabledFieldNumber;
#endif  // !_MSC_VER

CommandAddQuickFilterRulesArchive::CommandAddQuickFilterRulesArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandAddQuickFilterRulesArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
}

CommandAddQuickFilterRulesArchive::CommandAddQuickFilterRulesArchive(const CommandAddQuickFilterRulesArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandAddQuickFilterRulesArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  filter_index_ = 0u;
  filter_set_enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandAddQuickFilterRulesArchive::~CommandAddQuickFilterRulesArchive() {
  SharedDtor();
}

void CommandAddQuickFilterRulesArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandAddQuickFilterRulesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandAddQuickFilterRulesArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandAddQuickFilterRulesArchive_descriptor_;
}

const CommandAddQuickFilterRulesArchive& CommandAddQuickFilterRulesArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandAddQuickFilterRulesArchive* CommandAddQuickFilterRulesArchive::default_instance_ = NULL;

CommandAddQuickFilterRulesArchive* CommandAddQuickFilterRulesArchive::New() const {
  return new CommandAddQuickFilterRulesArchive;
}

void CommandAddQuickFilterRulesArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    filter_index_ = 0u;
    filter_set_enabled_ = false;
  }
  rules_.Clear();
  rule_indices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandAddQuickFilterRulesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rules;
        break;
      }

      // repeated .TST.FilterRuleArchive rules = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rules;
        if (input->ExpectTag(24)) goto parse_filter_index;
        break;
      }

      // required uint32 filter_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_index_)));
          set_has_filter_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rule_indices;
        break;
      }

      // repeated uint32 rule_indices = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rule_indices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_rule_indices())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rule_indices())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rule_indices;
        if (input->ExpectTag(40)) goto parse_filter_set_enabled;
        break;
      }

      // required bool filter_set_enabled = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_set_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filter_set_enabled_)));
          set_has_filter_set_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandAddQuickFilterRulesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // repeated .TST.FilterRuleArchive rules = 2;
  for (int i = 0; i < this->rules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rules(i), output);
  }

  // required uint32 filter_index = 3;
  if (has_filter_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->filter_index(), output);
  }

  // repeated uint32 rule_indices = 4;
  for (int i = 0; i < this->rule_indices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->rule_indices(i), output);
  }

  // required bool filter_set_enabled = 5;
  if (has_filter_set_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->filter_set_enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandAddQuickFilterRulesArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // repeated .TST.FilterRuleArchive rules = 2;
  for (int i = 0; i < this->rules_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rules(i), target);
  }

  // required uint32 filter_index = 3;
  if (has_filter_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->filter_index(), target);
  }

  // repeated uint32 rule_indices = 4;
  for (int i = 0; i < this->rule_indices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->rule_indices(i), target);
  }

  // required bool filter_set_enabled = 5;
  if (has_filter_set_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->filter_set_enabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandAddQuickFilterRulesArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required uint32 filter_index = 3;
    if (has_filter_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_index());
    }

    // required bool filter_set_enabled = 5;
    if (has_filter_set_enabled()) {
      total_size += 1 + 1;
    }

  }
  // repeated .TST.FilterRuleArchive rules = 2;
  total_size += 1 * this->rules_size();
  for (int i = 0; i < this->rules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rules(i));
  }

  // repeated uint32 rule_indices = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->rule_indices_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rule_indices(i));
    }
    total_size += 1 * this->rule_indices_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandAddQuickFilterRulesArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandAddQuickFilterRulesArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandAddQuickFilterRulesArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandAddQuickFilterRulesArchive::MergeFrom(const CommandAddQuickFilterRulesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  rules_.MergeFrom(from.rules_);
  rule_indices_.MergeFrom(from.rule_indices_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_filter_index()) {
      set_filter_index(from.filter_index());
    }
    if (from.has_filter_set_enabled()) {
      set_filter_set_enabled(from.filter_set_enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandAddQuickFilterRulesArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandAddQuickFilterRulesArchive::CopyFrom(const CommandAddQuickFilterRulesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandAddQuickFilterRulesArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000015) != 0x00000015) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  for (int i = 0; i < rules_size(); i++) {
    if (!this->rules(i).IsInitialized()) return false;
  }
  return true;
}

void CommandAddQuickFilterRulesArchive::Swap(CommandAddQuickFilterRulesArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    rules_.Swap(&other->rules_);
    std::swap(filter_index_, other->filter_index_);
    rule_indices_.Swap(&other->rule_indices_);
    std::swap(filter_set_enabled_, other->filter_set_enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandAddQuickFilterRulesArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandAddQuickFilterRulesArchive_descriptor_;
  metadata.reflection = CommandAddQuickFilterRulesArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandDeleteFilterRulesArchive::kSuperFieldNumber;
const int CommandDeleteFilterRulesArchive::kUndoRulesFieldNumber;
const int CommandDeleteFilterRulesArchive::kRuleIndicesFieldNumber;
const int CommandDeleteFilterRulesArchive::kFilterRemovedFieldNumber;
const int CommandDeleteFilterRulesArchive::kFilterIndexFieldNumber;
const int CommandDeleteFilterRulesArchive::kFilterSetEnabledFieldNumber;
#endif  // !_MSC_VER

CommandDeleteFilterRulesArchive::CommandDeleteFilterRulesArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandDeleteFilterRulesArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
}

CommandDeleteFilterRulesArchive::CommandDeleteFilterRulesArchive(const CommandDeleteFilterRulesArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandDeleteFilterRulesArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  filter_removed_ = false;
  filter_index_ = 0u;
  filter_set_enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandDeleteFilterRulesArchive::~CommandDeleteFilterRulesArchive() {
  SharedDtor();
}

void CommandDeleteFilterRulesArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandDeleteFilterRulesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandDeleteFilterRulesArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandDeleteFilterRulesArchive_descriptor_;
}

const CommandDeleteFilterRulesArchive& CommandDeleteFilterRulesArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandDeleteFilterRulesArchive* CommandDeleteFilterRulesArchive::default_instance_ = NULL;

CommandDeleteFilterRulesArchive* CommandDeleteFilterRulesArchive::New() const {
  return new CommandDeleteFilterRulesArchive;
}

void CommandDeleteFilterRulesArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    filter_removed_ = false;
    filter_index_ = 0u;
    filter_set_enabled_ = false;
  }
  undo_rules_.Clear();
  rule_indices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandDeleteFilterRulesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_undo_rules;
        break;
      }

      // repeated .TST.FilterRuleArchive undo_rules = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_undo_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_undo_rules;
        if (input->ExpectTag(24)) goto parse_rule_indices;
        break;
      }

      // repeated uint32 rule_indices = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rule_indices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_rule_indices())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rule_indices())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rule_indices;
        if (input->ExpectTag(32)) goto parse_filter_removed;
        break;
      }

      // required bool filter_removed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_removed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filter_removed_)));
          set_has_filter_removed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_filter_index;
        break;
      }

      // required uint32 filter_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_index_)));
          set_has_filter_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_filter_set_enabled;
        break;
      }

      // required bool filter_set_enabled = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_set_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filter_set_enabled_)));
          set_has_filter_set_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandDeleteFilterRulesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // repeated .TST.FilterRuleArchive undo_rules = 2;
  for (int i = 0; i < this->undo_rules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->undo_rules(i), output);
  }

  // repeated uint32 rule_indices = 3;
  for (int i = 0; i < this->rule_indices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->rule_indices(i), output);
  }

  // required bool filter_removed = 4;
  if (has_filter_removed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->filter_removed(), output);
  }

  // required uint32 filter_index = 5;
  if (has_filter_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->filter_index(), output);
  }

  // required bool filter_set_enabled = 6;
  if (has_filter_set_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->filter_set_enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandDeleteFilterRulesArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // repeated .TST.FilterRuleArchive undo_rules = 2;
  for (int i = 0; i < this->undo_rules_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->undo_rules(i), target);
  }

  // repeated uint32 rule_indices = 3;
  for (int i = 0; i < this->rule_indices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->rule_indices(i), target);
  }

  // required bool filter_removed = 4;
  if (has_filter_removed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->filter_removed(), target);
  }

  // required uint32 filter_index = 5;
  if (has_filter_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->filter_index(), target);
  }

  // required bool filter_set_enabled = 6;
  if (has_filter_set_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->filter_set_enabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandDeleteFilterRulesArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required bool filter_removed = 4;
    if (has_filter_removed()) {
      total_size += 1 + 1;
    }

    // required uint32 filter_index = 5;
    if (has_filter_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_index());
    }

    // required bool filter_set_enabled = 6;
    if (has_filter_set_enabled()) {
      total_size += 1 + 1;
    }

  }
  // repeated .TST.FilterRuleArchive undo_rules = 2;
  total_size += 1 * this->undo_rules_size();
  for (int i = 0; i < this->undo_rules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->undo_rules(i));
  }

  // repeated uint32 rule_indices = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->rule_indices_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rule_indices(i));
    }
    total_size += 1 * this->rule_indices_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandDeleteFilterRulesArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandDeleteFilterRulesArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandDeleteFilterRulesArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandDeleteFilterRulesArchive::MergeFrom(const CommandDeleteFilterRulesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  undo_rules_.MergeFrom(from.undo_rules_);
  rule_indices_.MergeFrom(from.rule_indices_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_filter_removed()) {
      set_filter_removed(from.filter_removed());
    }
    if (from.has_filter_index()) {
      set_filter_index(from.filter_index());
    }
    if (from.has_filter_set_enabled()) {
      set_filter_set_enabled(from.filter_set_enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandDeleteFilterRulesArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandDeleteFilterRulesArchive::CopyFrom(const CommandDeleteFilterRulesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDeleteFilterRulesArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000039) != 0x00000039) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  for (int i = 0; i < undo_rules_size(); i++) {
    if (!this->undo_rules(i).IsInitialized()) return false;
  }
  return true;
}

void CommandDeleteFilterRulesArchive::Swap(CommandDeleteFilterRulesArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    undo_rules_.Swap(&other->undo_rules_);
    rule_indices_.Swap(&other->rule_indices_);
    std::swap(filter_removed_, other->filter_removed_);
    std::swap(filter_index_, other->filter_index_);
    std::swap(filter_set_enabled_, other->filter_set_enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandDeleteFilterRulesArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandDeleteFilterRulesArchive_descriptor_;
  metadata.reflection = CommandDeleteFilterRulesArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandModifyFilterRuleArchive::kSuperFieldNumber;
const int CommandModifyFilterRuleArchive::kUndoRuleFieldNumber;
const int CommandModifyFilterRuleArchive::kRedoRuleFieldNumber;
const int CommandModifyFilterRuleArchive::kRuleIndexFieldNumber;
const int CommandModifyFilterRuleArchive::kFilterIndexFieldNumber;
#endif  // !_MSC_VER

CommandModifyFilterRuleArchive::CommandModifyFilterRuleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandModifyFilterRuleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  undo_rule_ = const_cast< ::TST::FilterRuleArchive*>(&::TST::FilterRuleArchive::default_instance());
  redo_rule_ = const_cast< ::TST::FilterRuleArchive*>(&::TST::FilterRuleArchive::default_instance());
}

CommandModifyFilterRuleArchive::CommandModifyFilterRuleArchive(const CommandModifyFilterRuleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandModifyFilterRuleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  undo_rule_ = NULL;
  redo_rule_ = NULL;
  rule_index_ = 0u;
  filter_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandModifyFilterRuleArchive::~CommandModifyFilterRuleArchive() {
  SharedDtor();
}

void CommandModifyFilterRuleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete undo_rule_;
    delete redo_rule_;
  }
}

void CommandModifyFilterRuleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandModifyFilterRuleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandModifyFilterRuleArchive_descriptor_;
}

const CommandModifyFilterRuleArchive& CommandModifyFilterRuleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandModifyFilterRuleArchive* CommandModifyFilterRuleArchive::default_instance_ = NULL;

CommandModifyFilterRuleArchive* CommandModifyFilterRuleArchive::New() const {
  return new CommandModifyFilterRuleArchive;
}

void CommandModifyFilterRuleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_undo_rule()) {
      if (undo_rule_ != NULL) undo_rule_->::TST::FilterRuleArchive::Clear();
    }
    if (has_redo_rule()) {
      if (redo_rule_ != NULL) redo_rule_->::TST::FilterRuleArchive::Clear();
    }
    rule_index_ = 0u;
    filter_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandModifyFilterRuleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_undo_rule;
        break;
      }

      // required .TST.FilterRuleArchive undo_rule = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_rule:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_rule()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_redo_rule;
        break;
      }

      // required .TST.FilterRuleArchive redo_rule = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_rule:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_rule()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rule_index;
        break;
      }

      // required uint32 rule_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rule_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rule_index_)));
          set_has_rule_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_filter_index;
        break;
      }

      // required uint32 filter_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_index_)));
          set_has_filter_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandModifyFilterRuleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TST.FilterRuleArchive undo_rule = 2;
  if (has_undo_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->undo_rule(), output);
  }

  // required .TST.FilterRuleArchive redo_rule = 3;
  if (has_redo_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->redo_rule(), output);
  }

  // required uint32 rule_index = 4;
  if (has_rule_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rule_index(), output);
  }

  // required uint32 filter_index = 5;
  if (has_filter_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->filter_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandModifyFilterRuleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TST.FilterRuleArchive undo_rule = 2;
  if (has_undo_rule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->undo_rule(), target);
  }

  // required .TST.FilterRuleArchive redo_rule = 3;
  if (has_redo_rule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->redo_rule(), target);
  }

  // required uint32 rule_index = 4;
  if (has_rule_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rule_index(), target);
  }

  // required uint32 filter_index = 5;
  if (has_filter_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->filter_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandModifyFilterRuleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TST.FilterRuleArchive undo_rule = 2;
    if (has_undo_rule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_rule());
    }

    // required .TST.FilterRuleArchive redo_rule = 3;
    if (has_redo_rule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_rule());
    }

    // required uint32 rule_index = 4;
    if (has_rule_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rule_index());
    }

    // required uint32 filter_index = 5;
    if (has_filter_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandModifyFilterRuleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandModifyFilterRuleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandModifyFilterRuleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandModifyFilterRuleArchive::MergeFrom(const CommandModifyFilterRuleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_undo_rule()) {
      mutable_undo_rule()->::TST::FilterRuleArchive::MergeFrom(from.undo_rule());
    }
    if (from.has_redo_rule()) {
      mutable_redo_rule()->::TST::FilterRuleArchive::MergeFrom(from.redo_rule());
    }
    if (from.has_rule_index()) {
      set_rule_index(from.rule_index());
    }
    if (from.has_filter_index()) {
      set_filter_index(from.filter_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandModifyFilterRuleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandModifyFilterRuleArchive::CopyFrom(const CommandModifyFilterRuleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandModifyFilterRuleArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_undo_rule()) {
    if (!this->undo_rule().IsInitialized()) return false;
  }
  if (has_redo_rule()) {
    if (!this->redo_rule().IsInitialized()) return false;
  }
  return true;
}

void CommandModifyFilterRuleArchive::Swap(CommandModifyFilterRuleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(undo_rule_, other->undo_rule_);
    std::swap(redo_rule_, other->redo_rule_);
    std::swap(rule_index_, other->rule_index_);
    std::swap(filter_index_, other->filter_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandModifyFilterRuleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandModifyFilterRuleArchive_descriptor_;
  metadata.reflection = CommandModifyFilterRuleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandApplyStrokePresetArchive::kSuperFieldNumber;
const int CommandApplyStrokePresetArchive::kUndoCellMapFieldNumber;
const int CommandApplyStrokePresetArchive::kRedoCellMapFieldNumber;
const int CommandApplyStrokePresetArchive::kSelectionFieldNumber;
const int CommandApplyStrokePresetArchive::kExpandedSelectionFieldNumber;
const int CommandApplyStrokePresetArchive::kPresetIndexFieldNumber;
#endif  // !_MSC_VER

CommandApplyStrokePresetArchive::CommandApplyStrokePresetArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandApplyStrokePresetArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  undo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  redo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  selection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
  expanded_selection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
}

CommandApplyStrokePresetArchive::CommandApplyStrokePresetArchive(const CommandApplyStrokePresetArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandApplyStrokePresetArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  undo_cell_map_ = NULL;
  redo_cell_map_ = NULL;
  selection_ = NULL;
  expanded_selection_ = NULL;
  preset_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandApplyStrokePresetArchive::~CommandApplyStrokePresetArchive() {
  SharedDtor();
}

void CommandApplyStrokePresetArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete undo_cell_map_;
    delete redo_cell_map_;
    delete selection_;
    delete expanded_selection_;
  }
}

void CommandApplyStrokePresetArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandApplyStrokePresetArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandApplyStrokePresetArchive_descriptor_;
}

const CommandApplyStrokePresetArchive& CommandApplyStrokePresetArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandApplyStrokePresetArchive* CommandApplyStrokePresetArchive::default_instance_ = NULL;

CommandApplyStrokePresetArchive* CommandApplyStrokePresetArchive::New() const {
  return new CommandApplyStrokePresetArchive;
}

void CommandApplyStrokePresetArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_undo_cell_map()) {
      if (undo_cell_map_ != NULL) undo_cell_map_->::TST::CellMapArchive::Clear();
    }
    if (has_redo_cell_map()) {
      if (redo_cell_map_ != NULL) redo_cell_map_->::TST::CellMapArchive::Clear();
    }
    if (has_selection()) {
      if (selection_ != NULL) selection_->::TST::SelectionArchive::Clear();
    }
    if (has_expanded_selection()) {
      if (expanded_selection_ != NULL) expanded_selection_->::TST::SelectionArchive::Clear();
    }
    preset_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandApplyStrokePresetArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_undo_cell_map;
        break;
      }

      // required .TST.CellMapArchive undo_cell_map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_selection;
        break;
      }

      // required .TST.SelectionArchive selection = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_redo_cell_map;
        break;
      }

      // required .TST.CellMapArchive redo_cell_map = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_preset_index;
        break;
      }

      // required int32 preset_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preset_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preset_index_)));
          set_has_preset_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_expanded_selection;
        break;
      }

      // optional .TST.SelectionArchive expanded_selection = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_expanded_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expanded_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandApplyStrokePresetArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TST.CellMapArchive undo_cell_map = 2;
  if (has_undo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->undo_cell_map(), output);
  }

  // required .TST.SelectionArchive selection = 3;
  if (has_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->selection(), output);
  }

  // required .TST.CellMapArchive redo_cell_map = 4;
  if (has_redo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->redo_cell_map(), output);
  }

  // required int32 preset_index = 5;
  if (has_preset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->preset_index(), output);
  }

  // optional .TST.SelectionArchive expanded_selection = 6;
  if (has_expanded_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->expanded_selection(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandApplyStrokePresetArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TST.CellMapArchive undo_cell_map = 2;
  if (has_undo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->undo_cell_map(), target);
  }

  // required .TST.SelectionArchive selection = 3;
  if (has_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->selection(), target);
  }

  // required .TST.CellMapArchive redo_cell_map = 4;
  if (has_redo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->redo_cell_map(), target);
  }

  // required int32 preset_index = 5;
  if (has_preset_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->preset_index(), target);
  }

  // optional .TST.SelectionArchive expanded_selection = 6;
  if (has_expanded_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->expanded_selection(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandApplyStrokePresetArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TST.CellMapArchive undo_cell_map = 2;
    if (has_undo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_cell_map());
    }

    // required .TST.CellMapArchive redo_cell_map = 4;
    if (has_redo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_cell_map());
    }

    // required .TST.SelectionArchive selection = 3;
    if (has_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selection());
    }

    // optional .TST.SelectionArchive expanded_selection = 6;
    if (has_expanded_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->expanded_selection());
    }

    // required int32 preset_index = 5;
    if (has_preset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->preset_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandApplyStrokePresetArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandApplyStrokePresetArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandApplyStrokePresetArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandApplyStrokePresetArchive::MergeFrom(const CommandApplyStrokePresetArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_undo_cell_map()) {
      mutable_undo_cell_map()->::TST::CellMapArchive::MergeFrom(from.undo_cell_map());
    }
    if (from.has_redo_cell_map()) {
      mutable_redo_cell_map()->::TST::CellMapArchive::MergeFrom(from.redo_cell_map());
    }
    if (from.has_selection()) {
      mutable_selection()->::TST::SelectionArchive::MergeFrom(from.selection());
    }
    if (from.has_expanded_selection()) {
      mutable_expanded_selection()->::TST::SelectionArchive::MergeFrom(from.expanded_selection());
    }
    if (from.has_preset_index()) {
      set_preset_index(from.preset_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandApplyStrokePresetArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandApplyStrokePresetArchive::CopyFrom(const CommandApplyStrokePresetArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandApplyStrokePresetArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_undo_cell_map()) {
    if (!this->undo_cell_map().IsInitialized()) return false;
  }
  if (has_redo_cell_map()) {
    if (!this->redo_cell_map().IsInitialized()) return false;
  }
  if (has_selection()) {
    if (!this->selection().IsInitialized()) return false;
  }
  if (has_expanded_selection()) {
    if (!this->expanded_selection().IsInitialized()) return false;
  }
  return true;
}

void CommandApplyStrokePresetArchive::Swap(CommandApplyStrokePresetArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(undo_cell_map_, other->undo_cell_map_);
    std::swap(redo_cell_map_, other->redo_cell_map_);
    std::swap(selection_, other->selection_);
    std::swap(expanded_selection_, other->expanded_selection_);
    std::swap(preset_index_, other->preset_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandApplyStrokePresetArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandApplyStrokePresetArchive_descriptor_;
  metadata.reflection = CommandApplyStrokePresetArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandAddTableStylePresetArchive::kSuperFieldNumber;
const int CommandAddTableStylePresetArchive::kPresetIndexFieldNumber;
const int CommandAddTableStylePresetArchive::kTableStylesFieldNumber;
const int CommandAddTableStylePresetArchive::kSendNotificationFieldNumber;
#endif  // !_MSC_VER

CommandAddTableStylePresetArchive::CommandAddTableStylePresetArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandAddTableStylePresetArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  table_styles_ = const_cast< ::TST::TableStyleNetworkArchive*>(&::TST::TableStyleNetworkArchive::default_instance());
}

CommandAddTableStylePresetArchive::CommandAddTableStylePresetArchive(const CommandAddTableStylePresetArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandAddTableStylePresetArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  preset_index_ = 0;
  table_styles_ = NULL;
  send_notification_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandAddTableStylePresetArchive::~CommandAddTableStylePresetArchive() {
  SharedDtor();
}

void CommandAddTableStylePresetArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete table_styles_;
  }
}

void CommandAddTableStylePresetArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandAddTableStylePresetArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandAddTableStylePresetArchive_descriptor_;
}

const CommandAddTableStylePresetArchive& CommandAddTableStylePresetArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandAddTableStylePresetArchive* CommandAddTableStylePresetArchive::default_instance_ = NULL;

CommandAddTableStylePresetArchive* CommandAddTableStylePresetArchive::New() const {
  return new CommandAddTableStylePresetArchive;
}

void CommandAddTableStylePresetArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    preset_index_ = 0;
    if (has_table_styles()) {
      if (table_styles_ != NULL) table_styles_->::TST::TableStyleNetworkArchive::Clear();
    }
    send_notification_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandAddTableStylePresetArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_preset_index;
        break;
      }

      // required int32 preset_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preset_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preset_index_)));
          set_has_preset_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_table_styles;
        break;
      }

      // required .TST.TableStyleNetworkArchive table_styles = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_send_notification;
        break;
      }

      // required bool send_notification = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_notification:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_notification_)));
          set_has_send_notification();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandAddTableStylePresetArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required int32 preset_index = 2;
  if (has_preset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->preset_index(), output);
  }

  // required .TST.TableStyleNetworkArchive table_styles = 3;
  if (has_table_styles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->table_styles(), output);
  }

  // required bool send_notification = 4;
  if (has_send_notification()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->send_notification(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandAddTableStylePresetArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required int32 preset_index = 2;
  if (has_preset_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->preset_index(), target);
  }

  // required .TST.TableStyleNetworkArchive table_styles = 3;
  if (has_table_styles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->table_styles(), target);
  }

  // required bool send_notification = 4;
  if (has_send_notification()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->send_notification(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandAddTableStylePresetArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required int32 preset_index = 2;
    if (has_preset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->preset_index());
    }

    // required .TST.TableStyleNetworkArchive table_styles = 3;
    if (has_table_styles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_styles());
    }

    // required bool send_notification = 4;
    if (has_send_notification()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandAddTableStylePresetArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandAddTableStylePresetArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandAddTableStylePresetArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandAddTableStylePresetArchive::MergeFrom(const CommandAddTableStylePresetArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_preset_index()) {
      set_preset_index(from.preset_index());
    }
    if (from.has_table_styles()) {
      mutable_table_styles()->::TST::TableStyleNetworkArchive::MergeFrom(from.table_styles());
    }
    if (from.has_send_notification()) {
      set_send_notification(from.send_notification());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandAddTableStylePresetArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandAddTableStylePresetArchive::CopyFrom(const CommandAddTableStylePresetArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandAddTableStylePresetArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_table_styles()) {
    if (!this->table_styles().IsInitialized()) return false;
  }
  return true;
}

void CommandAddTableStylePresetArchive::Swap(CommandAddTableStylePresetArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(preset_index_, other->preset_index_);
    std::swap(table_styles_, other->table_styles_);
    std::swap(send_notification_, other->send_notification_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandAddTableStylePresetArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandAddTableStylePresetArchive_descriptor_;
  metadata.reflection = CommandAddTableStylePresetArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandRemoveTableStylePresetArchive::kSuperFieldNumber;
const int CommandRemoveTableStylePresetArchive::kThemeFieldNumber;
const int CommandRemoveTableStylePresetArchive::kRemovedTableStylesFieldNumber;
const int CommandRemoveTableStylePresetArchive::kPresetIdFieldNumber;
const int CommandRemoveTableStylePresetArchive::kPresetIndexInThemeFieldNumber;
#endif  // !_MSC_VER

CommandRemoveTableStylePresetArchive::CommandRemoveTableStylePresetArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandRemoveTableStylePresetArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  theme_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  removed_table_styles_ = const_cast< ::TST::TableStyleNetworkArchive*>(&::TST::TableStyleNetworkArchive::default_instance());
}

CommandRemoveTableStylePresetArchive::CommandRemoveTableStylePresetArchive(const CommandRemoveTableStylePresetArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandRemoveTableStylePresetArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  theme_ = NULL;
  removed_table_styles_ = NULL;
  preset_id_ = 0;
  preset_index_in_theme_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandRemoveTableStylePresetArchive::~CommandRemoveTableStylePresetArchive() {
  SharedDtor();
}

void CommandRemoveTableStylePresetArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete theme_;
    delete removed_table_styles_;
  }
}

void CommandRemoveTableStylePresetArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandRemoveTableStylePresetArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandRemoveTableStylePresetArchive_descriptor_;
}

const CommandRemoveTableStylePresetArchive& CommandRemoveTableStylePresetArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandRemoveTableStylePresetArchive* CommandRemoveTableStylePresetArchive::default_instance_ = NULL;

CommandRemoveTableStylePresetArchive* CommandRemoveTableStylePresetArchive::New() const {
  return new CommandRemoveTableStylePresetArchive;
}

void CommandRemoveTableStylePresetArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_theme()) {
      if (theme_ != NULL) theme_->::TSP::Reference::Clear();
    }
    if (has_removed_table_styles()) {
      if (removed_table_styles_ != NULL) removed_table_styles_->::TST::TableStyleNetworkArchive::Clear();
    }
    preset_id_ = 0;
    preset_index_in_theme_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandRemoveTableStylePresetArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_theme;
        break;
      }

      // required .TSP.Reference theme = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_theme()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_removed_table_styles;
        break;
      }

      // required .TST.TableStyleNetworkArchive removed_table_styles = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_removed_table_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_removed_table_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_preset_id;
        break;
      }

      // required int32 preset_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preset_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preset_id_)));
          set_has_preset_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_preset_index_in_theme;
        break;
      }

      // required int32 preset_index_in_theme = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preset_index_in_theme:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preset_index_in_theme_)));
          set_has_preset_index_in_theme();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandRemoveTableStylePresetArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference theme = 2;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->theme(), output);
  }

  // required .TST.TableStyleNetworkArchive removed_table_styles = 3;
  if (has_removed_table_styles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->removed_table_styles(), output);
  }

  // required int32 preset_id = 4;
  if (has_preset_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->preset_id(), output);
  }

  // required int32 preset_index_in_theme = 5;
  if (has_preset_index_in_theme()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->preset_index_in_theme(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandRemoveTableStylePresetArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference theme = 2;
  if (has_theme()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->theme(), target);
  }

  // required .TST.TableStyleNetworkArchive removed_table_styles = 3;
  if (has_removed_table_styles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->removed_table_styles(), target);
  }

  // required int32 preset_id = 4;
  if (has_preset_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->preset_id(), target);
  }

  // required int32 preset_index_in_theme = 5;
  if (has_preset_index_in_theme()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->preset_index_in_theme(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandRemoveTableStylePresetArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference theme = 2;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->theme());
    }

    // required .TST.TableStyleNetworkArchive removed_table_styles = 3;
    if (has_removed_table_styles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->removed_table_styles());
    }

    // required int32 preset_id = 4;
    if (has_preset_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->preset_id());
    }

    // required int32 preset_index_in_theme = 5;
    if (has_preset_index_in_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->preset_index_in_theme());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandRemoveTableStylePresetArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandRemoveTableStylePresetArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandRemoveTableStylePresetArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandRemoveTableStylePresetArchive::MergeFrom(const CommandRemoveTableStylePresetArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_theme()) {
      mutable_theme()->::TSP::Reference::MergeFrom(from.theme());
    }
    if (from.has_removed_table_styles()) {
      mutable_removed_table_styles()->::TST::TableStyleNetworkArchive::MergeFrom(from.removed_table_styles());
    }
    if (from.has_preset_id()) {
      set_preset_id(from.preset_id());
    }
    if (from.has_preset_index_in_theme()) {
      set_preset_index_in_theme(from.preset_index_in_theme());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandRemoveTableStylePresetArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandRemoveTableStylePresetArchive::CopyFrom(const CommandRemoveTableStylePresetArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRemoveTableStylePresetArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_theme()) {
    if (!this->theme().IsInitialized()) return false;
  }
  if (has_removed_table_styles()) {
    if (!this->removed_table_styles().IsInitialized()) return false;
  }
  return true;
}

void CommandRemoveTableStylePresetArchive::Swap(CommandRemoveTableStylePresetArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(theme_, other->theme_);
    std::swap(removed_table_styles_, other->removed_table_styles_);
    std::swap(preset_id_, other->preset_id_);
    std::swap(preset_index_in_theme_, other->preset_index_in_theme_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandRemoveTableStylePresetArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandRemoveTableStylePresetArchive_descriptor_;
  metadata.reflection = CommandRemoveTableStylePresetArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandReplaceTableStylePresetArchive::kSuperFieldNumber;
const int CommandReplaceTableStylePresetArchive::kThemeFieldNumber;
const int CommandReplaceTableStylePresetArchive::kOldTableStylesFieldNumber;
const int CommandReplaceTableStylePresetArchive::kNewTableStylesFieldNumber;
#endif  // !_MSC_VER

CommandReplaceTableStylePresetArchive::CommandReplaceTableStylePresetArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandReplaceTableStylePresetArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  theme_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  old_table_styles_ = const_cast< ::TST::TableStyleNetworkArchive*>(&::TST::TableStyleNetworkArchive::default_instance());
  new_table_styles_ = const_cast< ::TST::TableStyleNetworkArchive*>(&::TST::TableStyleNetworkArchive::default_instance());
}

CommandReplaceTableStylePresetArchive::CommandReplaceTableStylePresetArchive(const CommandReplaceTableStylePresetArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandReplaceTableStylePresetArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  theme_ = NULL;
  old_table_styles_ = NULL;
  new_table_styles_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandReplaceTableStylePresetArchive::~CommandReplaceTableStylePresetArchive() {
  SharedDtor();
}

void CommandReplaceTableStylePresetArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete theme_;
    delete old_table_styles_;
    delete new_table_styles_;
  }
}

void CommandReplaceTableStylePresetArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandReplaceTableStylePresetArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandReplaceTableStylePresetArchive_descriptor_;
}

const CommandReplaceTableStylePresetArchive& CommandReplaceTableStylePresetArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandReplaceTableStylePresetArchive* CommandReplaceTableStylePresetArchive::default_instance_ = NULL;

CommandReplaceTableStylePresetArchive* CommandReplaceTableStylePresetArchive::New() const {
  return new CommandReplaceTableStylePresetArchive;
}

void CommandReplaceTableStylePresetArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_theme()) {
      if (theme_ != NULL) theme_->::TSP::Reference::Clear();
    }
    if (has_old_table_styles()) {
      if (old_table_styles_ != NULL) old_table_styles_->::TST::TableStyleNetworkArchive::Clear();
    }
    if (has_new_table_styles()) {
      if (new_table_styles_ != NULL) new_table_styles_->::TST::TableStyleNetworkArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandReplaceTableStylePresetArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_theme;
        break;
      }

      // required .TSP.Reference theme = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_theme()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_old_table_styles;
        break;
      }

      // required .TST.TableStyleNetworkArchive old_table_styles = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_table_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_table_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_new_table_styles;
        break;
      }

      // required .TST.TableStyleNetworkArchive new_table_styles = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_table_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_table_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandReplaceTableStylePresetArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference theme = 2;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->theme(), output);
  }

  // required .TST.TableStyleNetworkArchive old_table_styles = 3;
  if (has_old_table_styles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->old_table_styles(), output);
  }

  // required .TST.TableStyleNetworkArchive new_table_styles = 4;
  if (has_new_table_styles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->new_table_styles(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandReplaceTableStylePresetArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference theme = 2;
  if (has_theme()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->theme(), target);
  }

  // required .TST.TableStyleNetworkArchive old_table_styles = 3;
  if (has_old_table_styles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->old_table_styles(), target);
  }

  // required .TST.TableStyleNetworkArchive new_table_styles = 4;
  if (has_new_table_styles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->new_table_styles(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandReplaceTableStylePresetArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference theme = 2;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->theme());
    }

    // required .TST.TableStyleNetworkArchive old_table_styles = 3;
    if (has_old_table_styles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_table_styles());
    }

    // required .TST.TableStyleNetworkArchive new_table_styles = 4;
    if (has_new_table_styles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_table_styles());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandReplaceTableStylePresetArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandReplaceTableStylePresetArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandReplaceTableStylePresetArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandReplaceTableStylePresetArchive::MergeFrom(const CommandReplaceTableStylePresetArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_theme()) {
      mutable_theme()->::TSP::Reference::MergeFrom(from.theme());
    }
    if (from.has_old_table_styles()) {
      mutable_old_table_styles()->::TST::TableStyleNetworkArchive::MergeFrom(from.old_table_styles());
    }
    if (from.has_new_table_styles()) {
      mutable_new_table_styles()->::TST::TableStyleNetworkArchive::MergeFrom(from.new_table_styles());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandReplaceTableStylePresetArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandReplaceTableStylePresetArchive::CopyFrom(const CommandReplaceTableStylePresetArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReplaceTableStylePresetArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_theme()) {
    if (!this->theme().IsInitialized()) return false;
  }
  if (has_old_table_styles()) {
    if (!this->old_table_styles().IsInitialized()) return false;
  }
  if (has_new_table_styles()) {
    if (!this->new_table_styles().IsInitialized()) return false;
  }
  return true;
}

void CommandReplaceTableStylePresetArchive::Swap(CommandReplaceTableStylePresetArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(theme_, other->theme_);
    std::swap(old_table_styles_, other->old_table_styles_);
    std::swap(new_table_styles_, other->new_table_styles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandReplaceTableStylePresetArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandReplaceTableStylePresetArchive_descriptor_;
  metadata.reflection = CommandReplaceTableStylePresetArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandApplyTableStylePresetArchive_StyleIndexTuple::kIndexFieldNumber;
const int CommandApplyTableStylePresetArchive_StyleIndexTuple::kCellStyleFieldNumber;
const int CommandApplyTableStylePresetArchive_StyleIndexTuple::kTextStyleFieldNumber;
#endif  // !_MSC_VER

CommandApplyTableStylePresetArchive_StyleIndexTuple::CommandApplyTableStylePresetArchive_StyleIndexTuple()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandApplyTableStylePresetArchive_StyleIndexTuple::InitAsDefaultInstance() {
  cell_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  text_style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandApplyTableStylePresetArchive_StyleIndexTuple::CommandApplyTableStylePresetArchive_StyleIndexTuple(const CommandApplyTableStylePresetArchive_StyleIndexTuple& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandApplyTableStylePresetArchive_StyleIndexTuple::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  cell_style_ = NULL;
  text_style_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandApplyTableStylePresetArchive_StyleIndexTuple::~CommandApplyTableStylePresetArchive_StyleIndexTuple() {
  SharedDtor();
}

void CommandApplyTableStylePresetArchive_StyleIndexTuple::SharedDtor() {
  if (this != default_instance_) {
    delete cell_style_;
    delete text_style_;
  }
}

void CommandApplyTableStylePresetArchive_StyleIndexTuple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandApplyTableStylePresetArchive_StyleIndexTuple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandApplyTableStylePresetArchive_StyleIndexTuple_descriptor_;
}

const CommandApplyTableStylePresetArchive_StyleIndexTuple& CommandApplyTableStylePresetArchive_StyleIndexTuple::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandApplyTableStylePresetArchive_StyleIndexTuple* CommandApplyTableStylePresetArchive_StyleIndexTuple::default_instance_ = NULL;

CommandApplyTableStylePresetArchive_StyleIndexTuple* CommandApplyTableStylePresetArchive_StyleIndexTuple::New() const {
  return new CommandApplyTableStylePresetArchive_StyleIndexTuple;
}

void CommandApplyTableStylePresetArchive_StyleIndexTuple::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    if (has_cell_style()) {
      if (cell_style_ != NULL) cell_style_->::TSP::Reference::Clear();
    }
    if (has_text_style()) {
      if (text_style_ != NULL) text_style_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandApplyTableStylePresetArchive_StyleIndexTuple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cell_style;
        break;
      }

      // optional .TSP.Reference cell_style = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_text_style;
        break;
      }

      // optional .TSP.Reference text_style = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandApplyTableStylePresetArchive_StyleIndexTuple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional .TSP.Reference cell_style = 5;
  if (has_cell_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cell_style(), output);
  }

  // optional .TSP.Reference text_style = 6;
  if (has_text_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->text_style(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandApplyTableStylePresetArchive_StyleIndexTuple::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional .TSP.Reference cell_style = 5;
  if (has_cell_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cell_style(), target);
  }

  // optional .TSP.Reference text_style = 6;
  if (has_text_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->text_style(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandApplyTableStylePresetArchive_StyleIndexTuple::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional .TSP.Reference cell_style = 5;
    if (has_cell_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cell_style());
    }

    // optional .TSP.Reference text_style = 6;
    if (has_text_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text_style());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandApplyTableStylePresetArchive_StyleIndexTuple::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandApplyTableStylePresetArchive_StyleIndexTuple* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandApplyTableStylePresetArchive_StyleIndexTuple*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandApplyTableStylePresetArchive_StyleIndexTuple::MergeFrom(const CommandApplyTableStylePresetArchive_StyleIndexTuple& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_cell_style()) {
      mutable_cell_style()->::TSP::Reference::MergeFrom(from.cell_style());
    }
    if (from.has_text_style()) {
      mutable_text_style()->::TSP::Reference::MergeFrom(from.text_style());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandApplyTableStylePresetArchive_StyleIndexTuple::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandApplyTableStylePresetArchive_StyleIndexTuple::CopyFrom(const CommandApplyTableStylePresetArchive_StyleIndexTuple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandApplyTableStylePresetArchive_StyleIndexTuple::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_cell_style()) {
    if (!this->cell_style().IsInitialized()) return false;
  }
  if (has_text_style()) {
    if (!this->text_style().IsInitialized()) return false;
  }
  return true;
}

void CommandApplyTableStylePresetArchive_StyleIndexTuple::Swap(CommandApplyTableStylePresetArchive_StyleIndexTuple* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(cell_style_, other->cell_style_);
    std::swap(text_style_, other->text_style_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandApplyTableStylePresetArchive_StyleIndexTuple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandApplyTableStylePresetArchive_StyleIndexTuple_descriptor_;
  metadata.reflection = CommandApplyTableStylePresetArchive_StyleIndexTuple_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CommandApplyTableStylePresetArchive::kSuperFieldNumber;
const int CommandApplyTableStylePresetArchive::kUndoCellMapFieldNumber;
const int CommandApplyTableStylePresetArchive::kRedoCellMapFieldNumber;
const int CommandApplyTableStylePresetArchive::kPresetIndexFieldNumber;
const int CommandApplyTableStylePresetArchive::kOldTableStylesFieldNumber;
const int CommandApplyTableStylePresetArchive::kNewTableStylesFieldNumber;
const int CommandApplyTableStylePresetArchive::kApplyClearsAllFieldNumber;
const int CommandApplyTableStylePresetArchive::kFontSizeCommandFieldNumber;
const int CommandApplyTableStylePresetArchive::kSetStyleApplyClearsAllFlagCommandFieldNumber;
const int CommandApplyTableStylePresetArchive::kRowStyleIndexTuplesFieldNumber;
const int CommandApplyTableStylePresetArchive::kColStyleIndexTuplesFieldNumber;
#endif  // !_MSC_VER

CommandApplyTableStylePresetArchive::CommandApplyTableStylePresetArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandApplyTableStylePresetArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  undo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  redo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  old_table_styles_ = const_cast< ::TST::TableStyleNetworkArchive*>(&::TST::TableStyleNetworkArchive::default_instance());
  new_table_styles_ = const_cast< ::TST::TableStyleNetworkArchive*>(&::TST::TableStyleNetworkArchive::default_instance());
  font_size_command_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  set_style_apply_clears_all_flag_command_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandApplyTableStylePresetArchive::CommandApplyTableStylePresetArchive(const CommandApplyTableStylePresetArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandApplyTableStylePresetArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  undo_cell_map_ = NULL;
  redo_cell_map_ = NULL;
  preset_index_ = 0;
  old_table_styles_ = NULL;
  new_table_styles_ = NULL;
  apply_clears_all_ = false;
  font_size_command_ = NULL;
  set_style_apply_clears_all_flag_command_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandApplyTableStylePresetArchive::~CommandApplyTableStylePresetArchive() {
  SharedDtor();
}

void CommandApplyTableStylePresetArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete undo_cell_map_;
    delete redo_cell_map_;
    delete old_table_styles_;
    delete new_table_styles_;
    delete font_size_command_;
    delete set_style_apply_clears_all_flag_command_;
  }
}

void CommandApplyTableStylePresetArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandApplyTableStylePresetArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandApplyTableStylePresetArchive_descriptor_;
}

const CommandApplyTableStylePresetArchive& CommandApplyTableStylePresetArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandApplyTableStylePresetArchive* CommandApplyTableStylePresetArchive::default_instance_ = NULL;

CommandApplyTableStylePresetArchive* CommandApplyTableStylePresetArchive::New() const {
  return new CommandApplyTableStylePresetArchive;
}

void CommandApplyTableStylePresetArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_undo_cell_map()) {
      if (undo_cell_map_ != NULL) undo_cell_map_->::TST::CellMapArchive::Clear();
    }
    if (has_redo_cell_map()) {
      if (redo_cell_map_ != NULL) redo_cell_map_->::TST::CellMapArchive::Clear();
    }
    preset_index_ = 0;
    if (has_old_table_styles()) {
      if (old_table_styles_ != NULL) old_table_styles_->::TST::TableStyleNetworkArchive::Clear();
    }
    if (has_new_table_styles()) {
      if (new_table_styles_ != NULL) new_table_styles_->::TST::TableStyleNetworkArchive::Clear();
    }
    apply_clears_all_ = false;
    if (has_font_size_command()) {
      if (font_size_command_ != NULL) font_size_command_->::TSP::Reference::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_set_style_apply_clears_all_flag_command()) {
      if (set_style_apply_clears_all_flag_command_ != NULL) set_style_apply_clears_all_flag_command_->::TSP::Reference::Clear();
    }
  }
  row_style_index_tuples_.Clear();
  col_style_index_tuples_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandApplyTableStylePresetArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_undo_cell_map;
        break;
      }

      // required .TST.CellMapArchive undo_cell_map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_redo_cell_map;
        break;
      }

      // required .TST.CellMapArchive redo_cell_map = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_preset_index;
        break;
      }

      // required int32 preset_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preset_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preset_index_)));
          set_has_preset_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_old_table_styles;
        break;
      }

      // required .TST.TableStyleNetworkArchive old_table_styles = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_table_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_table_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_new_table_styles;
        break;
      }

      // optional .TST.TableStyleNetworkArchive new_table_styles = 8 [deprecated = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_table_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_table_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_apply_clears_all;
        break;
      }

      // optional bool apply_clears_all = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_clears_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &apply_clears_all_)));
          set_has_apply_clears_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_font_size_command;
        break;
      }

      // optional .TSP.Reference font_size_command = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_font_size_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_font_size_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_set_style_apply_clears_all_flag_command;
        break;
      }

      // optional .TSP.Reference set_style_apply_clears_all_flag_command = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_set_style_apply_clears_all_flag_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_style_apply_clears_all_flag_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_row_style_index_tuples;
        break;
      }

      // repeated .TST.CommandApplyTableStylePresetArchive.StyleIndexTuple row_style_index_tuples = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_row_style_index_tuples:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_row_style_index_tuples()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_row_style_index_tuples;
        if (input->ExpectTag(114)) goto parse_col_style_index_tuples;
        break;
      }

      // repeated .TST.CommandApplyTableStylePresetArchive.StyleIndexTuple col_style_index_tuples = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_col_style_index_tuples:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_col_style_index_tuples()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_col_style_index_tuples;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandApplyTableStylePresetArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TST.CellMapArchive undo_cell_map = 2;
  if (has_undo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->undo_cell_map(), output);
  }

  // required .TST.CellMapArchive redo_cell_map = 4;
  if (has_redo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->redo_cell_map(), output);
  }

  // required int32 preset_index = 5;
  if (has_preset_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->preset_index(), output);
  }

  // required .TST.TableStyleNetworkArchive old_table_styles = 7;
  if (has_old_table_styles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->old_table_styles(), output);
  }

  // optional .TST.TableStyleNetworkArchive new_table_styles = 8 [deprecated = true];
  if (has_new_table_styles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->new_table_styles(), output);
  }

  // optional bool apply_clears_all = 10;
  if (has_apply_clears_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->apply_clears_all(), output);
  }

  // optional .TSP.Reference font_size_command = 11;
  if (has_font_size_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->font_size_command(), output);
  }

  // optional .TSP.Reference set_style_apply_clears_all_flag_command = 12;
  if (has_set_style_apply_clears_all_flag_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->set_style_apply_clears_all_flag_command(), output);
  }

  // repeated .TST.CommandApplyTableStylePresetArchive.StyleIndexTuple row_style_index_tuples = 13;
  for (int i = 0; i < this->row_style_index_tuples_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->row_style_index_tuples(i), output);
  }

  // repeated .TST.CommandApplyTableStylePresetArchive.StyleIndexTuple col_style_index_tuples = 14;
  for (int i = 0; i < this->col_style_index_tuples_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->col_style_index_tuples(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandApplyTableStylePresetArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TST.CellMapArchive undo_cell_map = 2;
  if (has_undo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->undo_cell_map(), target);
  }

  // required .TST.CellMapArchive redo_cell_map = 4;
  if (has_redo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->redo_cell_map(), target);
  }

  // required int32 preset_index = 5;
  if (has_preset_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->preset_index(), target);
  }

  // required .TST.TableStyleNetworkArchive old_table_styles = 7;
  if (has_old_table_styles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->old_table_styles(), target);
  }

  // optional .TST.TableStyleNetworkArchive new_table_styles = 8 [deprecated = true];
  if (has_new_table_styles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->new_table_styles(), target);
  }

  // optional bool apply_clears_all = 10;
  if (has_apply_clears_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->apply_clears_all(), target);
  }

  // optional .TSP.Reference font_size_command = 11;
  if (has_font_size_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->font_size_command(), target);
  }

  // optional .TSP.Reference set_style_apply_clears_all_flag_command = 12;
  if (has_set_style_apply_clears_all_flag_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->set_style_apply_clears_all_flag_command(), target);
  }

  // repeated .TST.CommandApplyTableStylePresetArchive.StyleIndexTuple row_style_index_tuples = 13;
  for (int i = 0; i < this->row_style_index_tuples_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->row_style_index_tuples(i), target);
  }

  // repeated .TST.CommandApplyTableStylePresetArchive.StyleIndexTuple col_style_index_tuples = 14;
  for (int i = 0; i < this->col_style_index_tuples_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->col_style_index_tuples(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandApplyTableStylePresetArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TST.CellMapArchive undo_cell_map = 2;
    if (has_undo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_cell_map());
    }

    // required .TST.CellMapArchive redo_cell_map = 4;
    if (has_redo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_cell_map());
    }

    // required int32 preset_index = 5;
    if (has_preset_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->preset_index());
    }

    // required .TST.TableStyleNetworkArchive old_table_styles = 7;
    if (has_old_table_styles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_table_styles());
    }

    // optional .TST.TableStyleNetworkArchive new_table_styles = 8 [deprecated = true];
    if (has_new_table_styles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_table_styles());
    }

    // optional bool apply_clears_all = 10;
    if (has_apply_clears_all()) {
      total_size += 1 + 1;
    }

    // optional .TSP.Reference font_size_command = 11;
    if (has_font_size_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->font_size_command());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TSP.Reference set_style_apply_clears_all_flag_command = 12;
    if (has_set_style_apply_clears_all_flag_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->set_style_apply_clears_all_flag_command());
    }

  }
  // repeated .TST.CommandApplyTableStylePresetArchive.StyleIndexTuple row_style_index_tuples = 13;
  total_size += 1 * this->row_style_index_tuples_size();
  for (int i = 0; i < this->row_style_index_tuples_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->row_style_index_tuples(i));
  }

  // repeated .TST.CommandApplyTableStylePresetArchive.StyleIndexTuple col_style_index_tuples = 14;
  total_size += 1 * this->col_style_index_tuples_size();
  for (int i = 0; i < this->col_style_index_tuples_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->col_style_index_tuples(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandApplyTableStylePresetArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandApplyTableStylePresetArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandApplyTableStylePresetArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandApplyTableStylePresetArchive::MergeFrom(const CommandApplyTableStylePresetArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  row_style_index_tuples_.MergeFrom(from.row_style_index_tuples_);
  col_style_index_tuples_.MergeFrom(from.col_style_index_tuples_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_undo_cell_map()) {
      mutable_undo_cell_map()->::TST::CellMapArchive::MergeFrom(from.undo_cell_map());
    }
    if (from.has_redo_cell_map()) {
      mutable_redo_cell_map()->::TST::CellMapArchive::MergeFrom(from.redo_cell_map());
    }
    if (from.has_preset_index()) {
      set_preset_index(from.preset_index());
    }
    if (from.has_old_table_styles()) {
      mutable_old_table_styles()->::TST::TableStyleNetworkArchive::MergeFrom(from.old_table_styles());
    }
    if (from.has_new_table_styles()) {
      mutable_new_table_styles()->::TST::TableStyleNetworkArchive::MergeFrom(from.new_table_styles());
    }
    if (from.has_apply_clears_all()) {
      set_apply_clears_all(from.apply_clears_all());
    }
    if (from.has_font_size_command()) {
      mutable_font_size_command()->::TSP::Reference::MergeFrom(from.font_size_command());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_set_style_apply_clears_all_flag_command()) {
      mutable_set_style_apply_clears_all_flag_command()->::TSP::Reference::MergeFrom(from.set_style_apply_clears_all_flag_command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandApplyTableStylePresetArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandApplyTableStylePresetArchive::CopyFrom(const CommandApplyTableStylePresetArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandApplyTableStylePresetArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_undo_cell_map()) {
    if (!this->undo_cell_map().IsInitialized()) return false;
  }
  if (has_redo_cell_map()) {
    if (!this->redo_cell_map().IsInitialized()) return false;
  }
  if (has_old_table_styles()) {
    if (!this->old_table_styles().IsInitialized()) return false;
  }
  if (has_new_table_styles()) {
    if (!this->new_table_styles().IsInitialized()) return false;
  }
  if (has_font_size_command()) {
    if (!this->font_size_command().IsInitialized()) return false;
  }
  if (has_set_style_apply_clears_all_flag_command()) {
    if (!this->set_style_apply_clears_all_flag_command().IsInitialized()) return false;
  }
  for (int i = 0; i < row_style_index_tuples_size(); i++) {
    if (!this->row_style_index_tuples(i).IsInitialized()) return false;
  }
  for (int i = 0; i < col_style_index_tuples_size(); i++) {
    if (!this->col_style_index_tuples(i).IsInitialized()) return false;
  }
  return true;
}

void CommandApplyTableStylePresetArchive::Swap(CommandApplyTableStylePresetArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(undo_cell_map_, other->undo_cell_map_);
    std::swap(redo_cell_map_, other->redo_cell_map_);
    std::swap(preset_index_, other->preset_index_);
    std::swap(old_table_styles_, other->old_table_styles_);
    std::swap(new_table_styles_, other->new_table_styles_);
    std::swap(apply_clears_all_, other->apply_clears_all_);
    std::swap(font_size_command_, other->font_size_command_);
    std::swap(set_style_apply_clears_all_flag_command_, other->set_style_apply_clears_all_flag_command_);
    row_style_index_tuples_.Swap(&other->row_style_index_tuples_);
    col_style_index_tuples_.Swap(&other->col_style_index_tuples_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandApplyTableStylePresetArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandApplyTableStylePresetArchive_descriptor_;
  metadata.reflection = CommandApplyTableStylePresetArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetStyleApplyClearsAllFlagArchive::kSuperFieldNumber;
const int CommandSetStyleApplyClearsAllFlagArchive::kApplyClearsAllFieldNumber;
#endif  // !_MSC_VER

CommandSetStyleApplyClearsAllFlagArchive::CommandSetStyleApplyClearsAllFlagArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetStyleApplyClearsAllFlagArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
}

CommandSetStyleApplyClearsAllFlagArchive::CommandSetStyleApplyClearsAllFlagArchive(const CommandSetStyleApplyClearsAllFlagArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetStyleApplyClearsAllFlagArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  apply_clears_all_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetStyleApplyClearsAllFlagArchive::~CommandSetStyleApplyClearsAllFlagArchive() {
  SharedDtor();
}

void CommandSetStyleApplyClearsAllFlagArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetStyleApplyClearsAllFlagArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetStyleApplyClearsAllFlagArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetStyleApplyClearsAllFlagArchive_descriptor_;
}

const CommandSetStyleApplyClearsAllFlagArchive& CommandSetStyleApplyClearsAllFlagArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetStyleApplyClearsAllFlagArchive* CommandSetStyleApplyClearsAllFlagArchive::default_instance_ = NULL;

CommandSetStyleApplyClearsAllFlagArchive* CommandSetStyleApplyClearsAllFlagArchive::New() const {
  return new CommandSetStyleApplyClearsAllFlagArchive;
}

void CommandSetStyleApplyClearsAllFlagArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    apply_clears_all_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetStyleApplyClearsAllFlagArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_apply_clears_all;
        break;
      }

      // required bool apply_clears_all = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_clears_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &apply_clears_all_)));
          set_has_apply_clears_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetStyleApplyClearsAllFlagArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required bool apply_clears_all = 2;
  if (has_apply_clears_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->apply_clears_all(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetStyleApplyClearsAllFlagArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required bool apply_clears_all = 2;
  if (has_apply_clears_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->apply_clears_all(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetStyleApplyClearsAllFlagArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required bool apply_clears_all = 2;
    if (has_apply_clears_all()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetStyleApplyClearsAllFlagArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetStyleApplyClearsAllFlagArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetStyleApplyClearsAllFlagArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetStyleApplyClearsAllFlagArchive::MergeFrom(const CommandSetStyleApplyClearsAllFlagArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_apply_clears_all()) {
      set_apply_clears_all(from.apply_clears_all());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetStyleApplyClearsAllFlagArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetStyleApplyClearsAllFlagArchive::CopyFrom(const CommandSetStyleApplyClearsAllFlagArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetStyleApplyClearsAllFlagArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetStyleApplyClearsAllFlagArchive::Swap(CommandSetStyleApplyClearsAllFlagArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(apply_clears_all_, other->apply_clears_all_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetStyleApplyClearsAllFlagArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetStyleApplyClearsAllFlagArchive_descriptor_;
  metadata.reflection = CommandSetStyleApplyClearsAllFlagArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandApplyThemeToTableArchive::kSuperFieldNumber;
const int CommandApplyThemeToTableArchive::kUndoCellMapFieldNumber;
const int CommandApplyThemeToTableArchive::kRedoCellMapFieldNumber;
const int CommandApplyThemeToTableArchive::kOldTableStylesFieldNumber;
const int CommandApplyThemeToTableArchive::kNewTableStylesFieldNumber;
#endif  // !_MSC_VER

CommandApplyThemeToTableArchive::CommandApplyThemeToTableArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandApplyThemeToTableArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  undo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  redo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  old_table_styles_ = const_cast< ::TST::TableStyleNetworkArchive*>(&::TST::TableStyleNetworkArchive::default_instance());
  new_table_styles_ = const_cast< ::TST::TableStyleNetworkArchive*>(&::TST::TableStyleNetworkArchive::default_instance());
}

CommandApplyThemeToTableArchive::CommandApplyThemeToTableArchive(const CommandApplyThemeToTableArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandApplyThemeToTableArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  undo_cell_map_ = NULL;
  redo_cell_map_ = NULL;
  old_table_styles_ = NULL;
  new_table_styles_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandApplyThemeToTableArchive::~CommandApplyThemeToTableArchive() {
  SharedDtor();
}

void CommandApplyThemeToTableArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete undo_cell_map_;
    delete redo_cell_map_;
    delete old_table_styles_;
    delete new_table_styles_;
  }
}

void CommandApplyThemeToTableArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandApplyThemeToTableArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandApplyThemeToTableArchive_descriptor_;
}

const CommandApplyThemeToTableArchive& CommandApplyThemeToTableArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandApplyThemeToTableArchive* CommandApplyThemeToTableArchive::default_instance_ = NULL;

CommandApplyThemeToTableArchive* CommandApplyThemeToTableArchive::New() const {
  return new CommandApplyThemeToTableArchive;
}

void CommandApplyThemeToTableArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_undo_cell_map()) {
      if (undo_cell_map_ != NULL) undo_cell_map_->::TST::CellMapArchive::Clear();
    }
    if (has_redo_cell_map()) {
      if (redo_cell_map_ != NULL) redo_cell_map_->::TST::CellMapArchive::Clear();
    }
    if (has_old_table_styles()) {
      if (old_table_styles_ != NULL) old_table_styles_->::TST::TableStyleNetworkArchive::Clear();
    }
    if (has_new_table_styles()) {
      if (new_table_styles_ != NULL) new_table_styles_->::TST::TableStyleNetworkArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandApplyThemeToTableArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_undo_cell_map;
        break;
      }

      // required .TST.CellMapArchive undo_cell_map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_redo_cell_map;
        break;
      }

      // required .TST.CellMapArchive redo_cell_map = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_old_table_styles;
        break;
      }

      // required .TST.TableStyleNetworkArchive old_table_styles = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_table_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_table_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_new_table_styles;
        break;
      }

      // required .TST.TableStyleNetworkArchive new_table_styles = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_table_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_table_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandApplyThemeToTableArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TST.CellMapArchive undo_cell_map = 2;
  if (has_undo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->undo_cell_map(), output);
  }

  // required .TST.CellMapArchive redo_cell_map = 4;
  if (has_redo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->redo_cell_map(), output);
  }

  // required .TST.TableStyleNetworkArchive old_table_styles = 7;
  if (has_old_table_styles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->old_table_styles(), output);
  }

  // required .TST.TableStyleNetworkArchive new_table_styles = 8;
  if (has_new_table_styles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->new_table_styles(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandApplyThemeToTableArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TST.CellMapArchive undo_cell_map = 2;
  if (has_undo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->undo_cell_map(), target);
  }

  // required .TST.CellMapArchive redo_cell_map = 4;
  if (has_redo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->redo_cell_map(), target);
  }

  // required .TST.TableStyleNetworkArchive old_table_styles = 7;
  if (has_old_table_styles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->old_table_styles(), target);
  }

  // required .TST.TableStyleNetworkArchive new_table_styles = 8;
  if (has_new_table_styles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->new_table_styles(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandApplyThemeToTableArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TST.CellMapArchive undo_cell_map = 2;
    if (has_undo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_cell_map());
    }

    // required .TST.CellMapArchive redo_cell_map = 4;
    if (has_redo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_cell_map());
    }

    // required .TST.TableStyleNetworkArchive old_table_styles = 7;
    if (has_old_table_styles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_table_styles());
    }

    // required .TST.TableStyleNetworkArchive new_table_styles = 8;
    if (has_new_table_styles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_table_styles());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandApplyThemeToTableArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandApplyThemeToTableArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandApplyThemeToTableArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandApplyThemeToTableArchive::MergeFrom(const CommandApplyThemeToTableArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_undo_cell_map()) {
      mutable_undo_cell_map()->::TST::CellMapArchive::MergeFrom(from.undo_cell_map());
    }
    if (from.has_redo_cell_map()) {
      mutable_redo_cell_map()->::TST::CellMapArchive::MergeFrom(from.redo_cell_map());
    }
    if (from.has_old_table_styles()) {
      mutable_old_table_styles()->::TST::TableStyleNetworkArchive::MergeFrom(from.old_table_styles());
    }
    if (from.has_new_table_styles()) {
      mutable_new_table_styles()->::TST::TableStyleNetworkArchive::MergeFrom(from.new_table_styles());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandApplyThemeToTableArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandApplyThemeToTableArchive::CopyFrom(const CommandApplyThemeToTableArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandApplyThemeToTableArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_undo_cell_map()) {
    if (!this->undo_cell_map().IsInitialized()) return false;
  }
  if (has_redo_cell_map()) {
    if (!this->redo_cell_map().IsInitialized()) return false;
  }
  if (has_old_table_styles()) {
    if (!this->old_table_styles().IsInitialized()) return false;
  }
  if (has_new_table_styles()) {
    if (!this->new_table_styles().IsInitialized()) return false;
  }
  return true;
}

void CommandApplyThemeToTableArchive::Swap(CommandApplyThemeToTableArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(undo_cell_map_, other->undo_cell_map_);
    std::swap(redo_cell_map_, other->redo_cell_map_);
    std::swap(old_table_styles_, other->old_table_styles_);
    std::swap(new_table_styles_, other->new_table_styles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandApplyThemeToTableArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandApplyThemeToTableArchive_descriptor_;
  metadata.reflection = CommandApplyThemeToTableArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandApplyThemeChildForTableArchive::kSuperFieldNumber;
const int CommandApplyThemeChildForTableArchive::kApplyCommandFieldNumber;
#endif  // !_MSC_VER

CommandApplyThemeChildForTableArchive::CommandApplyThemeChildForTableArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandApplyThemeChildForTableArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::ApplyThemeChildCommandArchive*>(&::TSS::ApplyThemeChildCommandArchive::default_instance());
  apply_command_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandApplyThemeChildForTableArchive::CommandApplyThemeChildForTableArchive(const CommandApplyThemeChildForTableArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandApplyThemeChildForTableArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  apply_command_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandApplyThemeChildForTableArchive::~CommandApplyThemeChildForTableArchive() {
  SharedDtor();
}

void CommandApplyThemeChildForTableArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete apply_command_;
  }
}

void CommandApplyThemeChildForTableArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandApplyThemeChildForTableArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandApplyThemeChildForTableArchive_descriptor_;
}

const CommandApplyThemeChildForTableArchive& CommandApplyThemeChildForTableArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandApplyThemeChildForTableArchive* CommandApplyThemeChildForTableArchive::default_instance_ = NULL;

CommandApplyThemeChildForTableArchive* CommandApplyThemeChildForTableArchive::New() const {
  return new CommandApplyThemeChildForTableArchive;
}

void CommandApplyThemeChildForTableArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::ApplyThemeChildCommandArchive::Clear();
    }
    if (has_apply_command()) {
      if (apply_command_ != NULL) apply_command_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandApplyThemeChildForTableArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSS.ApplyThemeChildCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_apply_command;
        break;
      }

      // required .TSP.Reference apply_command = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apply_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_apply_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandApplyThemeChildForTableArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSS.ApplyThemeChildCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference apply_command = 2;
  if (has_apply_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->apply_command(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandApplyThemeChildForTableArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSS.ApplyThemeChildCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference apply_command = 2;
  if (has_apply_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->apply_command(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandApplyThemeChildForTableArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSS.ApplyThemeChildCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference apply_command = 2;
    if (has_apply_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->apply_command());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandApplyThemeChildForTableArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandApplyThemeChildForTableArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandApplyThemeChildForTableArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandApplyThemeChildForTableArchive::MergeFrom(const CommandApplyThemeChildForTableArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::ApplyThemeChildCommandArchive::MergeFrom(from.super());
    }
    if (from.has_apply_command()) {
      mutable_apply_command()->::TSP::Reference::MergeFrom(from.apply_command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandApplyThemeChildForTableArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandApplyThemeChildForTableArchive::CopyFrom(const CommandApplyThemeChildForTableArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandApplyThemeChildForTableArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_apply_command()) {
    if (!this->apply_command().IsInitialized()) return false;
  }
  return true;
}

void CommandApplyThemeChildForTableArchive::Swap(CommandApplyThemeChildForTableArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(apply_command_, other->apply_command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandApplyThemeChildForTableArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandApplyThemeChildForTableArchive_descriptor_;
  metadata.reflection = CommandApplyThemeChildForTableArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandToggleTextPropertyArchive::kSuperFieldNumber;
const int CommandToggleTextPropertyArchive::kSelectionFieldNumber;
const int CommandToggleTextPropertyArchive::kPropertyFieldNumber;
const int CommandToggleTextPropertyArchive::kUndoCellMapFieldNumber;
const int CommandToggleTextPropertyArchive::kRedoCellMapFieldNumber;
const int CommandToggleTextPropertyArchive::kDefaultBodyCellFieldNumber;
const int CommandToggleTextPropertyArchive::kDefaultHrCellFieldNumber;
const int CommandToggleTextPropertyArchive::kDefaultHcCellFieldNumber;
const int CommandToggleTextPropertyArchive::kDefaultFrCellFieldNumber;
const int CommandToggleTextPropertyArchive::kTextUndoFieldNumber;
#endif  // !_MSC_VER

CommandToggleTextPropertyArchive::CommandToggleTextPropertyArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandToggleTextPropertyArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  selection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
  undo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  redo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  default_body_cell_ = const_cast< ::TST::Cell*>(&::TST::Cell::default_instance());
  default_hr_cell_ = const_cast< ::TST::Cell*>(&::TST::Cell::default_instance());
  default_hc_cell_ = const_cast< ::TST::Cell*>(&::TST::Cell::default_instance());
  default_fr_cell_ = const_cast< ::TST::Cell*>(&::TST::Cell::default_instance());
  text_undo_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandToggleTextPropertyArchive::CommandToggleTextPropertyArchive(const CommandToggleTextPropertyArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandToggleTextPropertyArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  selection_ = NULL;
  property_ = 0u;
  undo_cell_map_ = NULL;
  redo_cell_map_ = NULL;
  default_body_cell_ = NULL;
  default_hr_cell_ = NULL;
  default_hc_cell_ = NULL;
  default_fr_cell_ = NULL;
  text_undo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandToggleTextPropertyArchive::~CommandToggleTextPropertyArchive() {
  SharedDtor();
}

void CommandToggleTextPropertyArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete selection_;
    delete undo_cell_map_;
    delete redo_cell_map_;
    delete default_body_cell_;
    delete default_hr_cell_;
    delete default_hc_cell_;
    delete default_fr_cell_;
    delete text_undo_;
  }
}

void CommandToggleTextPropertyArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandToggleTextPropertyArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandToggleTextPropertyArchive_descriptor_;
}

const CommandToggleTextPropertyArchive& CommandToggleTextPropertyArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandToggleTextPropertyArchive* CommandToggleTextPropertyArchive::default_instance_ = NULL;

CommandToggleTextPropertyArchive* CommandToggleTextPropertyArchive::New() const {
  return new CommandToggleTextPropertyArchive;
}

void CommandToggleTextPropertyArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_selection()) {
      if (selection_ != NULL) selection_->::TST::SelectionArchive::Clear();
    }
    property_ = 0u;
    if (has_undo_cell_map()) {
      if (undo_cell_map_ != NULL) undo_cell_map_->::TST::CellMapArchive::Clear();
    }
    if (has_redo_cell_map()) {
      if (redo_cell_map_ != NULL) redo_cell_map_->::TST::CellMapArchive::Clear();
    }
    if (has_default_body_cell()) {
      if (default_body_cell_ != NULL) default_body_cell_->::TST::Cell::Clear();
    }
    if (has_default_hr_cell()) {
      if (default_hr_cell_ != NULL) default_hr_cell_->::TST::Cell::Clear();
    }
    if (has_default_hc_cell()) {
      if (default_hc_cell_ != NULL) default_hc_cell_->::TST::Cell::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_default_fr_cell()) {
      if (default_fr_cell_ != NULL) default_fr_cell_->::TST::Cell::Clear();
    }
    if (has_text_undo()) {
      if (text_undo_ != NULL) text_undo_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandToggleTextPropertyArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_selection;
        break;
      }

      // required .TST.SelectionArchive selection = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_property;
        break;
      }

      // required uint32 property = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_property:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &property_)));
          set_has_property();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_undo_cell_map;
        break;
      }

      // required .TST.CellMapArchive undo_cell_map = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_redo_cell_map;
        break;
      }

      // required .TST.CellMapArchive redo_cell_map = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_default_body_cell;
        break;
      }

      // required .TST.Cell default_body_cell = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_default_body_cell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_body_cell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_default_hr_cell;
        break;
      }

      // required .TST.Cell default_hr_cell = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_default_hr_cell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_hr_cell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_default_hc_cell;
        break;
      }

      // required .TST.Cell default_hc_cell = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_default_hc_cell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_hc_cell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_default_fr_cell;
        break;
      }

      // required .TST.Cell default_fr_cell = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_default_fr_cell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_fr_cell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_text_undo;
        break;
      }

      // optional .TSP.Reference text_undo = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text_undo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text_undo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandToggleTextPropertyArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TST.SelectionArchive selection = 2;
  if (has_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->selection(), output);
  }

  // required uint32 property = 3;
  if (has_property()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->property(), output);
  }

  // required .TST.CellMapArchive undo_cell_map = 4;
  if (has_undo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->undo_cell_map(), output);
  }

  // required .TST.CellMapArchive redo_cell_map = 5;
  if (has_redo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->redo_cell_map(), output);
  }

  // required .TST.Cell default_body_cell = 6;
  if (has_default_body_cell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->default_body_cell(), output);
  }

  // required .TST.Cell default_hr_cell = 7;
  if (has_default_hr_cell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->default_hr_cell(), output);
  }

  // required .TST.Cell default_hc_cell = 8;
  if (has_default_hc_cell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->default_hc_cell(), output);
  }

  // required .TST.Cell default_fr_cell = 9;
  if (has_default_fr_cell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->default_fr_cell(), output);
  }

  // optional .TSP.Reference text_undo = 10;
  if (has_text_undo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->text_undo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandToggleTextPropertyArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TST.SelectionArchive selection = 2;
  if (has_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->selection(), target);
  }

  // required uint32 property = 3;
  if (has_property()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->property(), target);
  }

  // required .TST.CellMapArchive undo_cell_map = 4;
  if (has_undo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->undo_cell_map(), target);
  }

  // required .TST.CellMapArchive redo_cell_map = 5;
  if (has_redo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->redo_cell_map(), target);
  }

  // required .TST.Cell default_body_cell = 6;
  if (has_default_body_cell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->default_body_cell(), target);
  }

  // required .TST.Cell default_hr_cell = 7;
  if (has_default_hr_cell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->default_hr_cell(), target);
  }

  // required .TST.Cell default_hc_cell = 8;
  if (has_default_hc_cell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->default_hc_cell(), target);
  }

  // required .TST.Cell default_fr_cell = 9;
  if (has_default_fr_cell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->default_fr_cell(), target);
  }

  // optional .TSP.Reference text_undo = 10;
  if (has_text_undo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->text_undo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandToggleTextPropertyArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TST.SelectionArchive selection = 2;
    if (has_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selection());
    }

    // required uint32 property = 3;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->property());
    }

    // required .TST.CellMapArchive undo_cell_map = 4;
    if (has_undo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_cell_map());
    }

    // required .TST.CellMapArchive redo_cell_map = 5;
    if (has_redo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_cell_map());
    }

    // required .TST.Cell default_body_cell = 6;
    if (has_default_body_cell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->default_body_cell());
    }

    // required .TST.Cell default_hr_cell = 7;
    if (has_default_hr_cell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->default_hr_cell());
    }

    // required .TST.Cell default_hc_cell = 8;
    if (has_default_hc_cell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->default_hc_cell());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .TST.Cell default_fr_cell = 9;
    if (has_default_fr_cell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->default_fr_cell());
    }

    // optional .TSP.Reference text_undo = 10;
    if (has_text_undo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text_undo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandToggleTextPropertyArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandToggleTextPropertyArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandToggleTextPropertyArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandToggleTextPropertyArchive::MergeFrom(const CommandToggleTextPropertyArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_selection()) {
      mutable_selection()->::TST::SelectionArchive::MergeFrom(from.selection());
    }
    if (from.has_property()) {
      set_property(from.property());
    }
    if (from.has_undo_cell_map()) {
      mutable_undo_cell_map()->::TST::CellMapArchive::MergeFrom(from.undo_cell_map());
    }
    if (from.has_redo_cell_map()) {
      mutable_redo_cell_map()->::TST::CellMapArchive::MergeFrom(from.redo_cell_map());
    }
    if (from.has_default_body_cell()) {
      mutable_default_body_cell()->::TST::Cell::MergeFrom(from.default_body_cell());
    }
    if (from.has_default_hr_cell()) {
      mutable_default_hr_cell()->::TST::Cell::MergeFrom(from.default_hr_cell());
    }
    if (from.has_default_hc_cell()) {
      mutable_default_hc_cell()->::TST::Cell::MergeFrom(from.default_hc_cell());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_default_fr_cell()) {
      mutable_default_fr_cell()->::TST::Cell::MergeFrom(from.default_fr_cell());
    }
    if (from.has_text_undo()) {
      mutable_text_undo()->::TSP::Reference::MergeFrom(from.text_undo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandToggleTextPropertyArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandToggleTextPropertyArchive::CopyFrom(const CommandToggleTextPropertyArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandToggleTextPropertyArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_selection()) {
    if (!this->selection().IsInitialized()) return false;
  }
  if (has_undo_cell_map()) {
    if (!this->undo_cell_map().IsInitialized()) return false;
  }
  if (has_redo_cell_map()) {
    if (!this->redo_cell_map().IsInitialized()) return false;
  }
  if (has_default_body_cell()) {
    if (!this->default_body_cell().IsInitialized()) return false;
  }
  if (has_default_hr_cell()) {
    if (!this->default_hr_cell().IsInitialized()) return false;
  }
  if (has_default_hc_cell()) {
    if (!this->default_hc_cell().IsInitialized()) return false;
  }
  if (has_default_fr_cell()) {
    if (!this->default_fr_cell().IsInitialized()) return false;
  }
  if (has_text_undo()) {
    if (!this->text_undo().IsInitialized()) return false;
  }
  return true;
}

void CommandToggleTextPropertyArchive::Swap(CommandToggleTextPropertyArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(selection_, other->selection_);
    std::swap(property_, other->property_);
    std::swap(undo_cell_map_, other->undo_cell_map_);
    std::swap(redo_cell_map_, other->redo_cell_map_);
    std::swap(default_body_cell_, other->default_body_cell_);
    std::swap(default_hr_cell_, other->default_hr_cell_);
    std::swap(default_hc_cell_, other->default_hc_cell_);
    std::swap(default_fr_cell_, other->default_fr_cell_);
    std::swap(text_undo_, other->text_undo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandToggleTextPropertyArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandToggleTextPropertyArchive_descriptor_;
  metadata.reflection = CommandToggleTextPropertyArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandResetFillPropertyToDefault::kSuperFieldNumber;
const int CommandResetFillPropertyToDefault::kSelectionFieldNumber;
const int CommandResetFillPropertyToDefault::kUndoCellMapFieldNumber;
const int CommandResetFillPropertyToDefault::kRedoCellMapFieldNumber;
#endif  // !_MSC_VER

CommandResetFillPropertyToDefault::CommandResetFillPropertyToDefault()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandResetFillPropertyToDefault::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  selection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
  undo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  redo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
}

CommandResetFillPropertyToDefault::CommandResetFillPropertyToDefault(const CommandResetFillPropertyToDefault& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandResetFillPropertyToDefault::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  selection_ = NULL;
  undo_cell_map_ = NULL;
  redo_cell_map_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandResetFillPropertyToDefault::~CommandResetFillPropertyToDefault() {
  SharedDtor();
}

void CommandResetFillPropertyToDefault::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete selection_;
    delete undo_cell_map_;
    delete redo_cell_map_;
  }
}

void CommandResetFillPropertyToDefault::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandResetFillPropertyToDefault::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandResetFillPropertyToDefault_descriptor_;
}

const CommandResetFillPropertyToDefault& CommandResetFillPropertyToDefault::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandResetFillPropertyToDefault* CommandResetFillPropertyToDefault::default_instance_ = NULL;

CommandResetFillPropertyToDefault* CommandResetFillPropertyToDefault::New() const {
  return new CommandResetFillPropertyToDefault;
}

void CommandResetFillPropertyToDefault::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_selection()) {
      if (selection_ != NULL) selection_->::TST::SelectionArchive::Clear();
    }
    if (has_undo_cell_map()) {
      if (undo_cell_map_ != NULL) undo_cell_map_->::TST::CellMapArchive::Clear();
    }
    if (has_redo_cell_map()) {
      if (redo_cell_map_ != NULL) redo_cell_map_->::TST::CellMapArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandResetFillPropertyToDefault::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_selection;
        break;
      }

      // required .TST.SelectionArchive selection = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_undo_cell_map;
        break;
      }

      // required .TST.CellMapArchive undo_cell_map = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_redo_cell_map;
        break;
      }

      // required .TST.CellMapArchive redo_cell_map = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandResetFillPropertyToDefault::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TST.SelectionArchive selection = 2;
  if (has_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->selection(), output);
  }

  // required .TST.CellMapArchive undo_cell_map = 4;
  if (has_undo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->undo_cell_map(), output);
  }

  // required .TST.CellMapArchive redo_cell_map = 5;
  if (has_redo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->redo_cell_map(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandResetFillPropertyToDefault::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TST.SelectionArchive selection = 2;
  if (has_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->selection(), target);
  }

  // required .TST.CellMapArchive undo_cell_map = 4;
  if (has_undo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->undo_cell_map(), target);
  }

  // required .TST.CellMapArchive redo_cell_map = 5;
  if (has_redo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->redo_cell_map(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandResetFillPropertyToDefault::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TST.SelectionArchive selection = 2;
    if (has_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selection());
    }

    // required .TST.CellMapArchive undo_cell_map = 4;
    if (has_undo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_cell_map());
    }

    // required .TST.CellMapArchive redo_cell_map = 5;
    if (has_redo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_cell_map());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandResetFillPropertyToDefault::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandResetFillPropertyToDefault* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandResetFillPropertyToDefault*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandResetFillPropertyToDefault::MergeFrom(const CommandResetFillPropertyToDefault& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_selection()) {
      mutable_selection()->::TST::SelectionArchive::MergeFrom(from.selection());
    }
    if (from.has_undo_cell_map()) {
      mutable_undo_cell_map()->::TST::CellMapArchive::MergeFrom(from.undo_cell_map());
    }
    if (from.has_redo_cell_map()) {
      mutable_redo_cell_map()->::TST::CellMapArchive::MergeFrom(from.redo_cell_map());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandResetFillPropertyToDefault::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandResetFillPropertyToDefault::CopyFrom(const CommandResetFillPropertyToDefault& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandResetFillPropertyToDefault::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_selection()) {
    if (!this->selection().IsInitialized()) return false;
  }
  if (has_undo_cell_map()) {
    if (!this->undo_cell_map().IsInitialized()) return false;
  }
  if (has_redo_cell_map()) {
    if (!this->redo_cell_map().IsInitialized()) return false;
  }
  return true;
}

void CommandResetFillPropertyToDefault::Swap(CommandResetFillPropertyToDefault* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(selection_, other->selection_);
    std::swap(undo_cell_map_, other->undo_cell_map_);
    std::swap(redo_cell_map_, other->redo_cell_map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandResetFillPropertyToDefault::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandResetFillPropertyToDefault_descriptor_;
  metadata.reflection = CommandResetFillPropertyToDefault_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetSingleNumberFormatParameterArchive::kSuperFieldNumber;
const int CommandSetSingleNumberFormatParameterArchive::kSelectionFieldNumber;
const int CommandSetSingleNumberFormatParameterArchive::kUndoCellMapFieldNumber;
const int CommandSetSingleNumberFormatParameterArchive::kRedoCellMapFieldNumber;
#endif  // !_MSC_VER

CommandSetSingleNumberFormatParameterArchive::CommandSetSingleNumberFormatParameterArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetSingleNumberFormatParameterArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  selection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
  undo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  redo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
}

CommandSetSingleNumberFormatParameterArchive::CommandSetSingleNumberFormatParameterArchive(const CommandSetSingleNumberFormatParameterArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetSingleNumberFormatParameterArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  selection_ = NULL;
  undo_cell_map_ = NULL;
  redo_cell_map_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetSingleNumberFormatParameterArchive::~CommandSetSingleNumberFormatParameterArchive() {
  SharedDtor();
}

void CommandSetSingleNumberFormatParameterArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete selection_;
    delete undo_cell_map_;
    delete redo_cell_map_;
  }
}

void CommandSetSingleNumberFormatParameterArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetSingleNumberFormatParameterArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetSingleNumberFormatParameterArchive_descriptor_;
}

const CommandSetSingleNumberFormatParameterArchive& CommandSetSingleNumberFormatParameterArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetSingleNumberFormatParameterArchive* CommandSetSingleNumberFormatParameterArchive::default_instance_ = NULL;

CommandSetSingleNumberFormatParameterArchive* CommandSetSingleNumberFormatParameterArchive::New() const {
  return new CommandSetSingleNumberFormatParameterArchive;
}

void CommandSetSingleNumberFormatParameterArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_selection()) {
      if (selection_ != NULL) selection_->::TST::SelectionArchive::Clear();
    }
    if (has_undo_cell_map()) {
      if (undo_cell_map_ != NULL) undo_cell_map_->::TST::CellMapArchive::Clear();
    }
    if (has_redo_cell_map()) {
      if (redo_cell_map_ != NULL) redo_cell_map_->::TST::CellMapArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetSingleNumberFormatParameterArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_selection;
        break;
      }

      // required .TST.SelectionArchive selection = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_undo_cell_map;
        break;
      }

      // required .TST.CellMapArchive undo_cell_map = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_redo_cell_map;
        break;
      }

      // required .TST.CellMapArchive redo_cell_map = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetSingleNumberFormatParameterArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TST.SelectionArchive selection = 2;
  if (has_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->selection(), output);
  }

  // required .TST.CellMapArchive undo_cell_map = 3;
  if (has_undo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->undo_cell_map(), output);
  }

  // required .TST.CellMapArchive redo_cell_map = 4;
  if (has_redo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->redo_cell_map(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetSingleNumberFormatParameterArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TST.SelectionArchive selection = 2;
  if (has_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->selection(), target);
  }

  // required .TST.CellMapArchive undo_cell_map = 3;
  if (has_undo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->undo_cell_map(), target);
  }

  // required .TST.CellMapArchive redo_cell_map = 4;
  if (has_redo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->redo_cell_map(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetSingleNumberFormatParameterArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TST.SelectionArchive selection = 2;
    if (has_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selection());
    }

    // required .TST.CellMapArchive undo_cell_map = 3;
    if (has_undo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_cell_map());
    }

    // required .TST.CellMapArchive redo_cell_map = 4;
    if (has_redo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_cell_map());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetSingleNumberFormatParameterArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetSingleNumberFormatParameterArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetSingleNumberFormatParameterArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetSingleNumberFormatParameterArchive::MergeFrom(const CommandSetSingleNumberFormatParameterArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_selection()) {
      mutable_selection()->::TST::SelectionArchive::MergeFrom(from.selection());
    }
    if (from.has_undo_cell_map()) {
      mutable_undo_cell_map()->::TST::CellMapArchive::MergeFrom(from.undo_cell_map());
    }
    if (from.has_redo_cell_map()) {
      mutable_redo_cell_map()->::TST::CellMapArchive::MergeFrom(from.redo_cell_map());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetSingleNumberFormatParameterArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetSingleNumberFormatParameterArchive::CopyFrom(const CommandSetSingleNumberFormatParameterArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetSingleNumberFormatParameterArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_selection()) {
    if (!this->selection().IsInitialized()) return false;
  }
  if (has_undo_cell_map()) {
    if (!this->undo_cell_map().IsInitialized()) return false;
  }
  if (has_redo_cell_map()) {
    if (!this->redo_cell_map().IsInitialized()) return false;
  }
  return true;
}

void CommandSetSingleNumberFormatParameterArchive::Swap(CommandSetSingleNumberFormatParameterArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(selection_, other->selection_);
    std::swap(undo_cell_map_, other->undo_cell_map_);
    std::swap(redo_cell_map_, other->redo_cell_map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetSingleNumberFormatParameterArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetSingleNumberFormatParameterArchive_descriptor_;
  metadata.reflection = CommandSetSingleNumberFormatParameterArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetBaseArchive::kSuperFieldNumber;
const int CommandSetBaseArchive::kBaseFieldNumber;
#endif  // !_MSC_VER

CommandSetBaseArchive::CommandSetBaseArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetBaseArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::CommandSetSingleNumberFormatParameterArchive*>(&::TST::CommandSetSingleNumberFormatParameterArchive::default_instance());
}

CommandSetBaseArchive::CommandSetBaseArchive(const CommandSetBaseArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetBaseArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  base_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetBaseArchive::~CommandSetBaseArchive() {
  SharedDtor();
}

void CommandSetBaseArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetBaseArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetBaseArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetBaseArchive_descriptor_;
}

const CommandSetBaseArchive& CommandSetBaseArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetBaseArchive* CommandSetBaseArchive::default_instance_ = NULL;

CommandSetBaseArchive* CommandSetBaseArchive::New() const {
  return new CommandSetBaseArchive;
}

void CommandSetBaseArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::CommandSetSingleNumberFormatParameterArchive::Clear();
    }
    base_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetBaseArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_base;
        break;
      }

      // required uint32 base = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_)));
          set_has_base();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetBaseArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required uint32 base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->base(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetBaseArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required uint32 base = 2;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->base(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetBaseArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required uint32 base = 2;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetBaseArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetBaseArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetBaseArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetBaseArchive::MergeFrom(const CommandSetBaseArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::CommandSetSingleNumberFormatParameterArchive::MergeFrom(from.super());
    }
    if (from.has_base()) {
      set_base(from.base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetBaseArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetBaseArchive::CopyFrom(const CommandSetBaseArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetBaseArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetBaseArchive::Swap(CommandSetBaseArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(base_, other->base_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetBaseArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetBaseArchive_descriptor_;
  metadata.reflection = CommandSetBaseArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetBasePlacesArchive::kSuperFieldNumber;
const int CommandSetBasePlacesArchive::kBasePlacesFieldNumber;
#endif  // !_MSC_VER

CommandSetBasePlacesArchive::CommandSetBasePlacesArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetBasePlacesArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::CommandSetSingleNumberFormatParameterArchive*>(&::TST::CommandSetSingleNumberFormatParameterArchive::default_instance());
}

CommandSetBasePlacesArchive::CommandSetBasePlacesArchive(const CommandSetBasePlacesArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetBasePlacesArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  base_places_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetBasePlacesArchive::~CommandSetBasePlacesArchive() {
  SharedDtor();
}

void CommandSetBasePlacesArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetBasePlacesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetBasePlacesArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetBasePlacesArchive_descriptor_;
}

const CommandSetBasePlacesArchive& CommandSetBasePlacesArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetBasePlacesArchive* CommandSetBasePlacesArchive::default_instance_ = NULL;

CommandSetBasePlacesArchive* CommandSetBasePlacesArchive::New() const {
  return new CommandSetBasePlacesArchive;
}

void CommandSetBasePlacesArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::CommandSetSingleNumberFormatParameterArchive::Clear();
    }
    base_places_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetBasePlacesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_base_places;
        break;
      }

      // required uint32 base_places = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_places:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_places_)));
          set_has_base_places();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetBasePlacesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required uint32 base_places = 2;
  if (has_base_places()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->base_places(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetBasePlacesArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required uint32 base_places = 2;
  if (has_base_places()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->base_places(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetBasePlacesArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required uint32 base_places = 2;
    if (has_base_places()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_places());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetBasePlacesArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetBasePlacesArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetBasePlacesArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetBasePlacesArchive::MergeFrom(const CommandSetBasePlacesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::CommandSetSingleNumberFormatParameterArchive::MergeFrom(from.super());
    }
    if (from.has_base_places()) {
      set_base_places(from.base_places());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetBasePlacesArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetBasePlacesArchive::CopyFrom(const CommandSetBasePlacesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetBasePlacesArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetBasePlacesArchive::Swap(CommandSetBasePlacesArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(base_places_, other->base_places_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetBasePlacesArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetBasePlacesArchive_descriptor_;
  metadata.reflection = CommandSetBasePlacesArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetBaseUseMinusSignArchive::kSuperFieldNumber;
const int CommandSetBaseUseMinusSignArchive::kBaseUseMinusSignFieldNumber;
#endif  // !_MSC_VER

CommandSetBaseUseMinusSignArchive::CommandSetBaseUseMinusSignArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetBaseUseMinusSignArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::CommandSetSingleNumberFormatParameterArchive*>(&::TST::CommandSetSingleNumberFormatParameterArchive::default_instance());
}

CommandSetBaseUseMinusSignArchive::CommandSetBaseUseMinusSignArchive(const CommandSetBaseUseMinusSignArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetBaseUseMinusSignArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  base_use_minus_sign_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetBaseUseMinusSignArchive::~CommandSetBaseUseMinusSignArchive() {
  SharedDtor();
}

void CommandSetBaseUseMinusSignArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetBaseUseMinusSignArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetBaseUseMinusSignArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetBaseUseMinusSignArchive_descriptor_;
}

const CommandSetBaseUseMinusSignArchive& CommandSetBaseUseMinusSignArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetBaseUseMinusSignArchive* CommandSetBaseUseMinusSignArchive::default_instance_ = NULL;

CommandSetBaseUseMinusSignArchive* CommandSetBaseUseMinusSignArchive::New() const {
  return new CommandSetBaseUseMinusSignArchive;
}

void CommandSetBaseUseMinusSignArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::CommandSetSingleNumberFormatParameterArchive::Clear();
    }
    base_use_minus_sign_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetBaseUseMinusSignArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_base_use_minus_sign;
        break;
      }

      // required bool base_use_minus_sign = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_use_minus_sign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &base_use_minus_sign_)));
          set_has_base_use_minus_sign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetBaseUseMinusSignArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required bool base_use_minus_sign = 2;
  if (has_base_use_minus_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->base_use_minus_sign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetBaseUseMinusSignArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required bool base_use_minus_sign = 2;
  if (has_base_use_minus_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->base_use_minus_sign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetBaseUseMinusSignArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required bool base_use_minus_sign = 2;
    if (has_base_use_minus_sign()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetBaseUseMinusSignArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetBaseUseMinusSignArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetBaseUseMinusSignArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetBaseUseMinusSignArchive::MergeFrom(const CommandSetBaseUseMinusSignArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::CommandSetSingleNumberFormatParameterArchive::MergeFrom(from.super());
    }
    if (from.has_base_use_minus_sign()) {
      set_base_use_minus_sign(from.base_use_minus_sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetBaseUseMinusSignArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetBaseUseMinusSignArchive::CopyFrom(const CommandSetBaseUseMinusSignArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetBaseUseMinusSignArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetBaseUseMinusSignArchive::Swap(CommandSetBaseUseMinusSignArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(base_use_minus_sign_, other->base_use_minus_sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetBaseUseMinusSignArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetBaseUseMinusSignArchive_descriptor_;
  metadata.reflection = CommandSetBaseUseMinusSignArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetControlMinimumArchive::kSuperFieldNumber;
const int CommandSetControlMinimumArchive::kMinimumFieldNumber;
const int CommandSetControlMinimumArchive::kFormatTypeFieldNumber;
#endif  // !_MSC_VER

CommandSetControlMinimumArchive::CommandSetControlMinimumArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetControlMinimumArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::CommandSetSingleNumberFormatParameterArchive*>(&::TST::CommandSetSingleNumberFormatParameterArchive::default_instance());
}

CommandSetControlMinimumArchive::CommandSetControlMinimumArchive(const CommandSetControlMinimumArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetControlMinimumArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  minimum_ = 0;
  format_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetControlMinimumArchive::~CommandSetControlMinimumArchive() {
  SharedDtor();
}

void CommandSetControlMinimumArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetControlMinimumArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetControlMinimumArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetControlMinimumArchive_descriptor_;
}

const CommandSetControlMinimumArchive& CommandSetControlMinimumArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetControlMinimumArchive* CommandSetControlMinimumArchive::default_instance_ = NULL;

CommandSetControlMinimumArchive* CommandSetControlMinimumArchive::New() const {
  return new CommandSetControlMinimumArchive;
}

void CommandSetControlMinimumArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::CommandSetSingleNumberFormatParameterArchive::Clear();
    }
    minimum_ = 0;
    format_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetControlMinimumArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_minimum;
        break;
      }

      // required double minimum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_minimum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minimum_)));
          set_has_minimum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_format_type;
        break;
      }

      // required uint32 format_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_format_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &format_type_)));
          set_has_format_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetControlMinimumArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required double minimum = 2;
  if (has_minimum()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->minimum(), output);
  }

  // required uint32 format_type = 3;
  if (has_format_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->format_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetControlMinimumArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required double minimum = 2;
  if (has_minimum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->minimum(), target);
  }

  // required uint32 format_type = 3;
  if (has_format_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->format_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetControlMinimumArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required double minimum = 2;
    if (has_minimum()) {
      total_size += 1 + 8;
    }

    // required uint32 format_type = 3;
    if (has_format_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->format_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetControlMinimumArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetControlMinimumArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetControlMinimumArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetControlMinimumArchive::MergeFrom(const CommandSetControlMinimumArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::CommandSetSingleNumberFormatParameterArchive::MergeFrom(from.super());
    }
    if (from.has_minimum()) {
      set_minimum(from.minimum());
    }
    if (from.has_format_type()) {
      set_format_type(from.format_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetControlMinimumArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetControlMinimumArchive::CopyFrom(const CommandSetControlMinimumArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetControlMinimumArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetControlMinimumArchive::Swap(CommandSetControlMinimumArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(minimum_, other->minimum_);
    std::swap(format_type_, other->format_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetControlMinimumArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetControlMinimumArchive_descriptor_;
  metadata.reflection = CommandSetControlMinimumArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetControlMaximumArchive::kSuperFieldNumber;
const int CommandSetControlMaximumArchive::kMaximumFieldNumber;
const int CommandSetControlMaximumArchive::kFormatTypeFieldNumber;
#endif  // !_MSC_VER

CommandSetControlMaximumArchive::CommandSetControlMaximumArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetControlMaximumArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::CommandSetSingleNumberFormatParameterArchive*>(&::TST::CommandSetSingleNumberFormatParameterArchive::default_instance());
}

CommandSetControlMaximumArchive::CommandSetControlMaximumArchive(const CommandSetControlMaximumArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetControlMaximumArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  maximum_ = 0;
  format_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetControlMaximumArchive::~CommandSetControlMaximumArchive() {
  SharedDtor();
}

void CommandSetControlMaximumArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetControlMaximumArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetControlMaximumArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetControlMaximumArchive_descriptor_;
}

const CommandSetControlMaximumArchive& CommandSetControlMaximumArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetControlMaximumArchive* CommandSetControlMaximumArchive::default_instance_ = NULL;

CommandSetControlMaximumArchive* CommandSetControlMaximumArchive::New() const {
  return new CommandSetControlMaximumArchive;
}

void CommandSetControlMaximumArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::CommandSetSingleNumberFormatParameterArchive::Clear();
    }
    maximum_ = 0;
    format_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetControlMaximumArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_maximum;
        break;
      }

      // required double maximum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maximum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maximum_)));
          set_has_maximum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_format_type;
        break;
      }

      // required uint32 format_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_format_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &format_type_)));
          set_has_format_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetControlMaximumArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required double maximum = 2;
  if (has_maximum()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->maximum(), output);
  }

  // required uint32 format_type = 3;
  if (has_format_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->format_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetControlMaximumArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required double maximum = 2;
  if (has_maximum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->maximum(), target);
  }

  // required uint32 format_type = 3;
  if (has_format_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->format_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetControlMaximumArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required double maximum = 2;
    if (has_maximum()) {
      total_size += 1 + 8;
    }

    // required uint32 format_type = 3;
    if (has_format_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->format_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetControlMaximumArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetControlMaximumArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetControlMaximumArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetControlMaximumArchive::MergeFrom(const CommandSetControlMaximumArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::CommandSetSingleNumberFormatParameterArchive::MergeFrom(from.super());
    }
    if (from.has_maximum()) {
      set_maximum(from.maximum());
    }
    if (from.has_format_type()) {
      set_format_type(from.format_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetControlMaximumArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetControlMaximumArchive::CopyFrom(const CommandSetControlMaximumArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetControlMaximumArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetControlMaximumArchive::Swap(CommandSetControlMaximumArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(maximum_, other->maximum_);
    std::swap(format_type_, other->format_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetControlMaximumArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetControlMaximumArchive_descriptor_;
  metadata.reflection = CommandSetControlMaximumArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetControlIncrementArchive::kSuperFieldNumber;
const int CommandSetControlIncrementArchive::kIncrementFieldNumber;
const int CommandSetControlIncrementArchive::kFormatTypeFieldNumber;
#endif  // !_MSC_VER

CommandSetControlIncrementArchive::CommandSetControlIncrementArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetControlIncrementArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::CommandSetSingleNumberFormatParameterArchive*>(&::TST::CommandSetSingleNumberFormatParameterArchive::default_instance());
}

CommandSetControlIncrementArchive::CommandSetControlIncrementArchive(const CommandSetControlIncrementArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetControlIncrementArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  increment_ = 0;
  format_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetControlIncrementArchive::~CommandSetControlIncrementArchive() {
  SharedDtor();
}

void CommandSetControlIncrementArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetControlIncrementArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetControlIncrementArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetControlIncrementArchive_descriptor_;
}

const CommandSetControlIncrementArchive& CommandSetControlIncrementArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetControlIncrementArchive* CommandSetControlIncrementArchive::default_instance_ = NULL;

CommandSetControlIncrementArchive* CommandSetControlIncrementArchive::New() const {
  return new CommandSetControlIncrementArchive;
}

void CommandSetControlIncrementArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::CommandSetSingleNumberFormatParameterArchive::Clear();
    }
    increment_ = 0;
    format_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetControlIncrementArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_increment;
        break;
      }

      // required double increment = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_increment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &increment_)));
          set_has_increment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_format_type;
        break;
      }

      // required uint32 format_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_format_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &format_type_)));
          set_has_format_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetControlIncrementArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required double increment = 2;
  if (has_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->increment(), output);
  }

  // required uint32 format_type = 3;
  if (has_format_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->format_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetControlIncrementArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required double increment = 2;
  if (has_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->increment(), target);
  }

  // required uint32 format_type = 3;
  if (has_format_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->format_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetControlIncrementArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required double increment = 2;
    if (has_increment()) {
      total_size += 1 + 8;
    }

    // required uint32 format_type = 3;
    if (has_format_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->format_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetControlIncrementArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetControlIncrementArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetControlIncrementArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetControlIncrementArchive::MergeFrom(const CommandSetControlIncrementArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::CommandSetSingleNumberFormatParameterArchive::MergeFrom(from.super());
    }
    if (from.has_increment()) {
      set_increment(from.increment());
    }
    if (from.has_format_type()) {
      set_format_type(from.format_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetControlIncrementArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetControlIncrementArchive::CopyFrom(const CommandSetControlIncrementArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetControlIncrementArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetControlIncrementArchive::Swap(CommandSetControlIncrementArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(increment_, other->increment_);
    std::swap(format_type_, other->format_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetControlIncrementArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetControlIncrementArchive_descriptor_;
  metadata.reflection = CommandSetControlIncrementArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetCurrencyCodeArchive::kSuperFieldNumber;
const int CommandSetCurrencyCodeArchive::kCurrencyCodeFieldNumber;
#endif  // !_MSC_VER

CommandSetCurrencyCodeArchive::CommandSetCurrencyCodeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetCurrencyCodeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::CommandSetSingleNumberFormatParameterArchive*>(&::TST::CommandSetSingleNumberFormatParameterArchive::default_instance());
}

CommandSetCurrencyCodeArchive::CommandSetCurrencyCodeArchive(const CommandSetCurrencyCodeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetCurrencyCodeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  currency_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetCurrencyCodeArchive::~CommandSetCurrencyCodeArchive() {
  SharedDtor();
}

void CommandSetCurrencyCodeArchive::SharedDtor() {
  if (currency_code_ != &::google::protobuf::internal::kEmptyString) {
    delete currency_code_;
  }
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetCurrencyCodeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetCurrencyCodeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetCurrencyCodeArchive_descriptor_;
}

const CommandSetCurrencyCodeArchive& CommandSetCurrencyCodeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetCurrencyCodeArchive* CommandSetCurrencyCodeArchive::default_instance_ = NULL;

CommandSetCurrencyCodeArchive* CommandSetCurrencyCodeArchive::New() const {
  return new CommandSetCurrencyCodeArchive;
}

void CommandSetCurrencyCodeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::CommandSetSingleNumberFormatParameterArchive::Clear();
    }
    if (has_currency_code()) {
      if (currency_code_ != &::google::protobuf::internal::kEmptyString) {
        currency_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetCurrencyCodeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_currency_code;
        break;
      }

      // required string currency_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currency_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currency_code().data(), this->currency_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetCurrencyCodeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required string currency_code = 2;
  if (has_currency_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency_code().data(), this->currency_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->currency_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetCurrencyCodeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required string currency_code = 2;
  if (has_currency_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency_code().data(), this->currency_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->currency_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetCurrencyCodeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required string currency_code = 2;
    if (has_currency_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetCurrencyCodeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetCurrencyCodeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetCurrencyCodeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetCurrencyCodeArchive::MergeFrom(const CommandSetCurrencyCodeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::CommandSetSingleNumberFormatParameterArchive::MergeFrom(from.super());
    }
    if (from.has_currency_code()) {
      set_currency_code(from.currency_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetCurrencyCodeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetCurrencyCodeArchive::CopyFrom(const CommandSetCurrencyCodeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetCurrencyCodeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetCurrencyCodeArchive::Swap(CommandSetCurrencyCodeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(currency_code_, other->currency_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetCurrencyCodeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetCurrencyCodeArchive_descriptor_;
  metadata.reflection = CommandSetCurrencyCodeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetFractionAccuracyArchive::kSuperFieldNumber;
const int CommandSetFractionAccuracyArchive::kFractionAccuracyFieldNumber;
#endif  // !_MSC_VER

CommandSetFractionAccuracyArchive::CommandSetFractionAccuracyArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetFractionAccuracyArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::CommandSetSingleNumberFormatParameterArchive*>(&::TST::CommandSetSingleNumberFormatParameterArchive::default_instance());
}

CommandSetFractionAccuracyArchive::CommandSetFractionAccuracyArchive(const CommandSetFractionAccuracyArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetFractionAccuracyArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  fraction_accuracy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetFractionAccuracyArchive::~CommandSetFractionAccuracyArchive() {
  SharedDtor();
}

void CommandSetFractionAccuracyArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetFractionAccuracyArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetFractionAccuracyArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetFractionAccuracyArchive_descriptor_;
}

const CommandSetFractionAccuracyArchive& CommandSetFractionAccuracyArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetFractionAccuracyArchive* CommandSetFractionAccuracyArchive::default_instance_ = NULL;

CommandSetFractionAccuracyArchive* CommandSetFractionAccuracyArchive::New() const {
  return new CommandSetFractionAccuracyArchive;
}

void CommandSetFractionAccuracyArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::CommandSetSingleNumberFormatParameterArchive::Clear();
    }
    fraction_accuracy_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetFractionAccuracyArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fraction_accuracy;
        break;
      }

      // required uint32 fraction_accuracy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fraction_accuracy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fraction_accuracy_)));
          set_has_fraction_accuracy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetFractionAccuracyArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required uint32 fraction_accuracy = 2;
  if (has_fraction_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fraction_accuracy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetFractionAccuracyArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required uint32 fraction_accuracy = 2;
  if (has_fraction_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fraction_accuracy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetFractionAccuracyArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required uint32 fraction_accuracy = 2;
    if (has_fraction_accuracy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fraction_accuracy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetFractionAccuracyArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetFractionAccuracyArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetFractionAccuracyArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetFractionAccuracyArchive::MergeFrom(const CommandSetFractionAccuracyArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::CommandSetSingleNumberFormatParameterArchive::MergeFrom(from.super());
    }
    if (from.has_fraction_accuracy()) {
      set_fraction_accuracy(from.fraction_accuracy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetFractionAccuracyArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetFractionAccuracyArchive::CopyFrom(const CommandSetFractionAccuracyArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetFractionAccuracyArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetFractionAccuracyArchive::Swap(CommandSetFractionAccuracyArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(fraction_accuracy_, other->fraction_accuracy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetFractionAccuracyArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetFractionAccuracyArchive_descriptor_;
  metadata.reflection = CommandSetFractionAccuracyArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetMultipleChoiceListFormatForEditedItemArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandSetMultipleChoiceListFormatForEditedItemArchive::CommandSetMultipleChoiceListFormatForEditedItemArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetMultipleChoiceListFormatForEditedItemArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::CommandSetSingleNumberFormatParameterArchive*>(&::TST::CommandSetSingleNumberFormatParameterArchive::default_instance());
}

CommandSetMultipleChoiceListFormatForEditedItemArchive::CommandSetMultipleChoiceListFormatForEditedItemArchive(const CommandSetMultipleChoiceListFormatForEditedItemArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetMultipleChoiceListFormatForEditedItemArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetMultipleChoiceListFormatForEditedItemArchive::~CommandSetMultipleChoiceListFormatForEditedItemArchive() {
  SharedDtor();
}

void CommandSetMultipleChoiceListFormatForEditedItemArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetMultipleChoiceListFormatForEditedItemArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetMultipleChoiceListFormatForEditedItemArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetMultipleChoiceListFormatForEditedItemArchive_descriptor_;
}

const CommandSetMultipleChoiceListFormatForEditedItemArchive& CommandSetMultipleChoiceListFormatForEditedItemArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetMultipleChoiceListFormatForEditedItemArchive* CommandSetMultipleChoiceListFormatForEditedItemArchive::default_instance_ = NULL;

CommandSetMultipleChoiceListFormatForEditedItemArchive* CommandSetMultipleChoiceListFormatForEditedItemArchive::New() const {
  return new CommandSetMultipleChoiceListFormatForEditedItemArchive;
}

void CommandSetMultipleChoiceListFormatForEditedItemArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::CommandSetSingleNumberFormatParameterArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetMultipleChoiceListFormatForEditedItemArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetMultipleChoiceListFormatForEditedItemArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetMultipleChoiceListFormatForEditedItemArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetMultipleChoiceListFormatForEditedItemArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetMultipleChoiceListFormatForEditedItemArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetMultipleChoiceListFormatForEditedItemArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetMultipleChoiceListFormatForEditedItemArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetMultipleChoiceListFormatForEditedItemArchive::MergeFrom(const CommandSetMultipleChoiceListFormatForEditedItemArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::CommandSetSingleNumberFormatParameterArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetMultipleChoiceListFormatForEditedItemArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetMultipleChoiceListFormatForEditedItemArchive::CopyFrom(const CommandSetMultipleChoiceListFormatForEditedItemArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetMultipleChoiceListFormatForEditedItemArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetMultipleChoiceListFormatForEditedItemArchive::Swap(CommandSetMultipleChoiceListFormatForEditedItemArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetMultipleChoiceListFormatForEditedItemArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetMultipleChoiceListFormatForEditedItemArchive_descriptor_;
  metadata.reflection = CommandSetMultipleChoiceListFormatForEditedItemArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetMultipleChoiceListFormatForDeleteItemArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandSetMultipleChoiceListFormatForDeleteItemArchive::CommandSetMultipleChoiceListFormatForDeleteItemArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetMultipleChoiceListFormatForDeleteItemArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::CommandSetSingleNumberFormatParameterArchive*>(&::TST::CommandSetSingleNumberFormatParameterArchive::default_instance());
}

CommandSetMultipleChoiceListFormatForDeleteItemArchive::CommandSetMultipleChoiceListFormatForDeleteItemArchive(const CommandSetMultipleChoiceListFormatForDeleteItemArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetMultipleChoiceListFormatForDeleteItemArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetMultipleChoiceListFormatForDeleteItemArchive::~CommandSetMultipleChoiceListFormatForDeleteItemArchive() {
  SharedDtor();
}

void CommandSetMultipleChoiceListFormatForDeleteItemArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetMultipleChoiceListFormatForDeleteItemArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetMultipleChoiceListFormatForDeleteItemArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetMultipleChoiceListFormatForDeleteItemArchive_descriptor_;
}

const CommandSetMultipleChoiceListFormatForDeleteItemArchive& CommandSetMultipleChoiceListFormatForDeleteItemArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetMultipleChoiceListFormatForDeleteItemArchive* CommandSetMultipleChoiceListFormatForDeleteItemArchive::default_instance_ = NULL;

CommandSetMultipleChoiceListFormatForDeleteItemArchive* CommandSetMultipleChoiceListFormatForDeleteItemArchive::New() const {
  return new CommandSetMultipleChoiceListFormatForDeleteItemArchive;
}

void CommandSetMultipleChoiceListFormatForDeleteItemArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::CommandSetSingleNumberFormatParameterArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetMultipleChoiceListFormatForDeleteItemArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetMultipleChoiceListFormatForDeleteItemArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetMultipleChoiceListFormatForDeleteItemArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetMultipleChoiceListFormatForDeleteItemArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetMultipleChoiceListFormatForDeleteItemArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetMultipleChoiceListFormatForDeleteItemArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetMultipleChoiceListFormatForDeleteItemArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetMultipleChoiceListFormatForDeleteItemArchive::MergeFrom(const CommandSetMultipleChoiceListFormatForDeleteItemArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::CommandSetSingleNumberFormatParameterArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetMultipleChoiceListFormatForDeleteItemArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetMultipleChoiceListFormatForDeleteItemArchive::CopyFrom(const CommandSetMultipleChoiceListFormatForDeleteItemArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetMultipleChoiceListFormatForDeleteItemArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetMultipleChoiceListFormatForDeleteItemArchive::Swap(CommandSetMultipleChoiceListFormatForDeleteItemArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetMultipleChoiceListFormatForDeleteItemArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetMultipleChoiceListFormatForDeleteItemArchive_descriptor_;
  metadata.reflection = CommandSetMultipleChoiceListFormatForDeleteItemArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetMultipleChoiceListFormatForReorderItemArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandSetMultipleChoiceListFormatForReorderItemArchive::CommandSetMultipleChoiceListFormatForReorderItemArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetMultipleChoiceListFormatForReorderItemArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::CommandSetSingleNumberFormatParameterArchive*>(&::TST::CommandSetSingleNumberFormatParameterArchive::default_instance());
}

CommandSetMultipleChoiceListFormatForReorderItemArchive::CommandSetMultipleChoiceListFormatForReorderItemArchive(const CommandSetMultipleChoiceListFormatForReorderItemArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetMultipleChoiceListFormatForReorderItemArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetMultipleChoiceListFormatForReorderItemArchive::~CommandSetMultipleChoiceListFormatForReorderItemArchive() {
  SharedDtor();
}

void CommandSetMultipleChoiceListFormatForReorderItemArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetMultipleChoiceListFormatForReorderItemArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetMultipleChoiceListFormatForReorderItemArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetMultipleChoiceListFormatForReorderItemArchive_descriptor_;
}

const CommandSetMultipleChoiceListFormatForReorderItemArchive& CommandSetMultipleChoiceListFormatForReorderItemArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetMultipleChoiceListFormatForReorderItemArchive* CommandSetMultipleChoiceListFormatForReorderItemArchive::default_instance_ = NULL;

CommandSetMultipleChoiceListFormatForReorderItemArchive* CommandSetMultipleChoiceListFormatForReorderItemArchive::New() const {
  return new CommandSetMultipleChoiceListFormatForReorderItemArchive;
}

void CommandSetMultipleChoiceListFormatForReorderItemArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::CommandSetSingleNumberFormatParameterArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetMultipleChoiceListFormatForReorderItemArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetMultipleChoiceListFormatForReorderItemArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetMultipleChoiceListFormatForReorderItemArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetMultipleChoiceListFormatForReorderItemArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetMultipleChoiceListFormatForReorderItemArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetMultipleChoiceListFormatForReorderItemArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetMultipleChoiceListFormatForReorderItemArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetMultipleChoiceListFormatForReorderItemArchive::MergeFrom(const CommandSetMultipleChoiceListFormatForReorderItemArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::CommandSetSingleNumberFormatParameterArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetMultipleChoiceListFormatForReorderItemArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetMultipleChoiceListFormatForReorderItemArchive::CopyFrom(const CommandSetMultipleChoiceListFormatForReorderItemArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetMultipleChoiceListFormatForReorderItemArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetMultipleChoiceListFormatForReorderItemArchive::Swap(CommandSetMultipleChoiceListFormatForReorderItemArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetMultipleChoiceListFormatForReorderItemArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetMultipleChoiceListFormatForReorderItemArchive_descriptor_;
  metadata.reflection = CommandSetMultipleChoiceListFormatForReorderItemArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetMultipleChoiceListFormatForInitialValueArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandSetMultipleChoiceListFormatForInitialValueArchive::CommandSetMultipleChoiceListFormatForInitialValueArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetMultipleChoiceListFormatForInitialValueArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::CommandSetSingleNumberFormatParameterArchive*>(&::TST::CommandSetSingleNumberFormatParameterArchive::default_instance());
}

CommandSetMultipleChoiceListFormatForInitialValueArchive::CommandSetMultipleChoiceListFormatForInitialValueArchive(const CommandSetMultipleChoiceListFormatForInitialValueArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetMultipleChoiceListFormatForInitialValueArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetMultipleChoiceListFormatForInitialValueArchive::~CommandSetMultipleChoiceListFormatForInitialValueArchive() {
  SharedDtor();
}

void CommandSetMultipleChoiceListFormatForInitialValueArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetMultipleChoiceListFormatForInitialValueArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetMultipleChoiceListFormatForInitialValueArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetMultipleChoiceListFormatForInitialValueArchive_descriptor_;
}

const CommandSetMultipleChoiceListFormatForInitialValueArchive& CommandSetMultipleChoiceListFormatForInitialValueArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetMultipleChoiceListFormatForInitialValueArchive* CommandSetMultipleChoiceListFormatForInitialValueArchive::default_instance_ = NULL;

CommandSetMultipleChoiceListFormatForInitialValueArchive* CommandSetMultipleChoiceListFormatForInitialValueArchive::New() const {
  return new CommandSetMultipleChoiceListFormatForInitialValueArchive;
}

void CommandSetMultipleChoiceListFormatForInitialValueArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::CommandSetSingleNumberFormatParameterArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetMultipleChoiceListFormatForInitialValueArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetMultipleChoiceListFormatForInitialValueArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetMultipleChoiceListFormatForInitialValueArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetMultipleChoiceListFormatForInitialValueArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetMultipleChoiceListFormatForInitialValueArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetMultipleChoiceListFormatForInitialValueArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetMultipleChoiceListFormatForInitialValueArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetMultipleChoiceListFormatForInitialValueArchive::MergeFrom(const CommandSetMultipleChoiceListFormatForInitialValueArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::CommandSetSingleNumberFormatParameterArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetMultipleChoiceListFormatForInitialValueArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetMultipleChoiceListFormatForInitialValueArchive::CopyFrom(const CommandSetMultipleChoiceListFormatForInitialValueArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetMultipleChoiceListFormatForInitialValueArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetMultipleChoiceListFormatForInitialValueArchive::Swap(CommandSetMultipleChoiceListFormatForInitialValueArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetMultipleChoiceListFormatForInitialValueArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetMultipleChoiceListFormatForInitialValueArchive_descriptor_;
  metadata.reflection = CommandSetMultipleChoiceListFormatForInitialValueArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetNegativeNumberStyleArchive::kSuperFieldNumber;
const int CommandSetNegativeNumberStyleArchive::kNegativeNumberStyleFieldNumber;
#endif  // !_MSC_VER

CommandSetNegativeNumberStyleArchive::CommandSetNegativeNumberStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetNegativeNumberStyleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::CommandSetSingleNumberFormatParameterArchive*>(&::TST::CommandSetSingleNumberFormatParameterArchive::default_instance());
}

CommandSetNegativeNumberStyleArchive::CommandSetNegativeNumberStyleArchive(const CommandSetNegativeNumberStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetNegativeNumberStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  negative_number_style_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetNegativeNumberStyleArchive::~CommandSetNegativeNumberStyleArchive() {
  SharedDtor();
}

void CommandSetNegativeNumberStyleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetNegativeNumberStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetNegativeNumberStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetNegativeNumberStyleArchive_descriptor_;
}

const CommandSetNegativeNumberStyleArchive& CommandSetNegativeNumberStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetNegativeNumberStyleArchive* CommandSetNegativeNumberStyleArchive::default_instance_ = NULL;

CommandSetNegativeNumberStyleArchive* CommandSetNegativeNumberStyleArchive::New() const {
  return new CommandSetNegativeNumberStyleArchive;
}

void CommandSetNegativeNumberStyleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::CommandSetSingleNumberFormatParameterArchive::Clear();
    }
    negative_number_style_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetNegativeNumberStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_negative_number_style;
        break;
      }

      // required uint32 negative_number_style = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_negative_number_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &negative_number_style_)));
          set_has_negative_number_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetNegativeNumberStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required uint32 negative_number_style = 2;
  if (has_negative_number_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->negative_number_style(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetNegativeNumberStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required uint32 negative_number_style = 2;
  if (has_negative_number_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->negative_number_style(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetNegativeNumberStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required uint32 negative_number_style = 2;
    if (has_negative_number_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->negative_number_style());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetNegativeNumberStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetNegativeNumberStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetNegativeNumberStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetNegativeNumberStyleArchive::MergeFrom(const CommandSetNegativeNumberStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::CommandSetSingleNumberFormatParameterArchive::MergeFrom(from.super());
    }
    if (from.has_negative_number_style()) {
      set_negative_number_style(from.negative_number_style());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetNegativeNumberStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetNegativeNumberStyleArchive::CopyFrom(const CommandSetNegativeNumberStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetNegativeNumberStyleArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetNegativeNumberStyleArchive::Swap(CommandSetNegativeNumberStyleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(negative_number_style_, other->negative_number_style_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetNegativeNumberStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetNegativeNumberStyleArchive_descriptor_;
  metadata.reflection = CommandSetNegativeNumberStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetExplicitFormatArchive::kSuperFieldNumber;
const int CommandSetExplicitFormatArchive::kSelectionFieldNumber;
const int CommandSetExplicitFormatArchive::kCellFormatFieldNumber;
const int CommandSetExplicitFormatArchive::kUndoCellMapFieldNumber;
const int CommandSetExplicitFormatArchive::kRedoCellMapFieldNumber;
#endif  // !_MSC_VER

CommandSetExplicitFormatArchive::CommandSetExplicitFormatArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetExplicitFormatArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  selection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
  cell_format_ = const_cast< ::TSK::FormatStructArchive*>(&::TSK::FormatStructArchive::default_instance());
  undo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  redo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
}

CommandSetExplicitFormatArchive::CommandSetExplicitFormatArchive(const CommandSetExplicitFormatArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetExplicitFormatArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  selection_ = NULL;
  cell_format_ = NULL;
  undo_cell_map_ = NULL;
  redo_cell_map_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetExplicitFormatArchive::~CommandSetExplicitFormatArchive() {
  SharedDtor();
}

void CommandSetExplicitFormatArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete selection_;
    delete cell_format_;
    delete undo_cell_map_;
    delete redo_cell_map_;
  }
}

void CommandSetExplicitFormatArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetExplicitFormatArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetExplicitFormatArchive_descriptor_;
}

const CommandSetExplicitFormatArchive& CommandSetExplicitFormatArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetExplicitFormatArchive* CommandSetExplicitFormatArchive::default_instance_ = NULL;

CommandSetExplicitFormatArchive* CommandSetExplicitFormatArchive::New() const {
  return new CommandSetExplicitFormatArchive;
}

void CommandSetExplicitFormatArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_selection()) {
      if (selection_ != NULL) selection_->::TST::SelectionArchive::Clear();
    }
    if (has_cell_format()) {
      if (cell_format_ != NULL) cell_format_->::TSK::FormatStructArchive::Clear();
    }
    if (has_undo_cell_map()) {
      if (undo_cell_map_ != NULL) undo_cell_map_->::TST::CellMapArchive::Clear();
    }
    if (has_redo_cell_map()) {
      if (redo_cell_map_ != NULL) redo_cell_map_->::TST::CellMapArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetExplicitFormatArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_selection;
        break;
      }

      // required .TST.SelectionArchive selection = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cell_format;
        break;
      }

      // required .TSK.FormatStructArchive cell_format = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_undo_cell_map;
        break;
      }

      // required .TST.CellMapArchive undo_cell_map = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_redo_cell_map;
        break;
      }

      // required .TST.CellMapArchive redo_cell_map = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetExplicitFormatArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TST.SelectionArchive selection = 2;
  if (has_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->selection(), output);
  }

  // required .TSK.FormatStructArchive cell_format = 3;
  if (has_cell_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cell_format(), output);
  }

  // required .TST.CellMapArchive undo_cell_map = 4;
  if (has_undo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->undo_cell_map(), output);
  }

  // required .TST.CellMapArchive redo_cell_map = 5;
  if (has_redo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->redo_cell_map(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetExplicitFormatArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TST.SelectionArchive selection = 2;
  if (has_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->selection(), target);
  }

  // required .TSK.FormatStructArchive cell_format = 3;
  if (has_cell_format()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cell_format(), target);
  }

  // required .TST.CellMapArchive undo_cell_map = 4;
  if (has_undo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->undo_cell_map(), target);
  }

  // required .TST.CellMapArchive redo_cell_map = 5;
  if (has_redo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->redo_cell_map(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetExplicitFormatArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TST.SelectionArchive selection = 2;
    if (has_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selection());
    }

    // required .TSK.FormatStructArchive cell_format = 3;
    if (has_cell_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cell_format());
    }

    // required .TST.CellMapArchive undo_cell_map = 4;
    if (has_undo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_cell_map());
    }

    // required .TST.CellMapArchive redo_cell_map = 5;
    if (has_redo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_cell_map());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetExplicitFormatArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetExplicitFormatArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetExplicitFormatArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetExplicitFormatArchive::MergeFrom(const CommandSetExplicitFormatArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_selection()) {
      mutable_selection()->::TST::SelectionArchive::MergeFrom(from.selection());
    }
    if (from.has_cell_format()) {
      mutable_cell_format()->::TSK::FormatStructArchive::MergeFrom(from.cell_format());
    }
    if (from.has_undo_cell_map()) {
      mutable_undo_cell_map()->::TST::CellMapArchive::MergeFrom(from.undo_cell_map());
    }
    if (from.has_redo_cell_map()) {
      mutable_redo_cell_map()->::TST::CellMapArchive::MergeFrom(from.redo_cell_map());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetExplicitFormatArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetExplicitFormatArchive::CopyFrom(const CommandSetExplicitFormatArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetExplicitFormatArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_selection()) {
    if (!this->selection().IsInitialized()) return false;
  }
  if (has_cell_format()) {
    if (!this->cell_format().IsInitialized()) return false;
  }
  if (has_undo_cell_map()) {
    if (!this->undo_cell_map().IsInitialized()) return false;
  }
  if (has_redo_cell_map()) {
    if (!this->redo_cell_map().IsInitialized()) return false;
  }
  return true;
}

void CommandSetExplicitFormatArchive::Swap(CommandSetExplicitFormatArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(selection_, other->selection_);
    std::swap(cell_format_, other->cell_format_);
    std::swap(undo_cell_map_, other->undo_cell_map_);
    std::swap(redo_cell_map_, other->redo_cell_map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetExplicitFormatArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetExplicitFormatArchive_descriptor_;
  metadata.reflection = CommandSetExplicitFormatArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetNumberOfDecimalPlacesArchive::kSuperFieldNumber;
const int CommandSetNumberOfDecimalPlacesArchive::kDecimalPlacesFieldNumber;
#endif  // !_MSC_VER

CommandSetNumberOfDecimalPlacesArchive::CommandSetNumberOfDecimalPlacesArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetNumberOfDecimalPlacesArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::CommandSetSingleNumberFormatParameterArchive*>(&::TST::CommandSetSingleNumberFormatParameterArchive::default_instance());
}

CommandSetNumberOfDecimalPlacesArchive::CommandSetNumberOfDecimalPlacesArchive(const CommandSetNumberOfDecimalPlacesArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetNumberOfDecimalPlacesArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  decimal_places_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetNumberOfDecimalPlacesArchive::~CommandSetNumberOfDecimalPlacesArchive() {
  SharedDtor();
}

void CommandSetNumberOfDecimalPlacesArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetNumberOfDecimalPlacesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetNumberOfDecimalPlacesArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetNumberOfDecimalPlacesArchive_descriptor_;
}

const CommandSetNumberOfDecimalPlacesArchive& CommandSetNumberOfDecimalPlacesArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetNumberOfDecimalPlacesArchive* CommandSetNumberOfDecimalPlacesArchive::default_instance_ = NULL;

CommandSetNumberOfDecimalPlacesArchive* CommandSetNumberOfDecimalPlacesArchive::New() const {
  return new CommandSetNumberOfDecimalPlacesArchive;
}

void CommandSetNumberOfDecimalPlacesArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::CommandSetSingleNumberFormatParameterArchive::Clear();
    }
    decimal_places_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetNumberOfDecimalPlacesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_decimal_places;
        break;
      }

      // required uint32 decimal_places = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_decimal_places:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &decimal_places_)));
          set_has_decimal_places();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetNumberOfDecimalPlacesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required uint32 decimal_places = 2;
  if (has_decimal_places()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->decimal_places(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetNumberOfDecimalPlacesArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required uint32 decimal_places = 2;
  if (has_decimal_places()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->decimal_places(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetNumberOfDecimalPlacesArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required uint32 decimal_places = 2;
    if (has_decimal_places()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->decimal_places());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetNumberOfDecimalPlacesArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetNumberOfDecimalPlacesArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetNumberOfDecimalPlacesArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetNumberOfDecimalPlacesArchive::MergeFrom(const CommandSetNumberOfDecimalPlacesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::CommandSetSingleNumberFormatParameterArchive::MergeFrom(from.super());
    }
    if (from.has_decimal_places()) {
      set_decimal_places(from.decimal_places());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetNumberOfDecimalPlacesArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetNumberOfDecimalPlacesArchive::CopyFrom(const CommandSetNumberOfDecimalPlacesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetNumberOfDecimalPlacesArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetNumberOfDecimalPlacesArchive::Swap(CommandSetNumberOfDecimalPlacesArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(decimal_places_, other->decimal_places_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetNumberOfDecimalPlacesArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetNumberOfDecimalPlacesArchive_descriptor_;
  metadata.reflection = CommandSetNumberOfDecimalPlacesArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetDateTimeFormatArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandSetDateTimeFormatArchive::CommandSetDateTimeFormatArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetDateTimeFormatArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::CommandSetSingleNumberFormatParameterArchive*>(&::TST::CommandSetSingleNumberFormatParameterArchive::default_instance());
}

CommandSetDateTimeFormatArchive::CommandSetDateTimeFormatArchive(const CommandSetDateTimeFormatArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetDateTimeFormatArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetDateTimeFormatArchive::~CommandSetDateTimeFormatArchive() {
  SharedDtor();
}

void CommandSetDateTimeFormatArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetDateTimeFormatArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetDateTimeFormatArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetDateTimeFormatArchive_descriptor_;
}

const CommandSetDateTimeFormatArchive& CommandSetDateTimeFormatArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetDateTimeFormatArchive* CommandSetDateTimeFormatArchive::default_instance_ = NULL;

CommandSetDateTimeFormatArchive* CommandSetDateTimeFormatArchive::New() const {
  return new CommandSetDateTimeFormatArchive;
}

void CommandSetDateTimeFormatArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::CommandSetSingleNumberFormatParameterArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetDateTimeFormatArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetDateTimeFormatArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetDateTimeFormatArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetDateTimeFormatArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetDateTimeFormatArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetDateTimeFormatArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetDateTimeFormatArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetDateTimeFormatArchive::MergeFrom(const CommandSetDateTimeFormatArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::CommandSetSingleNumberFormatParameterArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetDateTimeFormatArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetDateTimeFormatArchive::CopyFrom(const CommandSetDateTimeFormatArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetDateTimeFormatArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetDateTimeFormatArchive::Swap(CommandSetDateTimeFormatArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetDateTimeFormatArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetDateTimeFormatArchive_descriptor_;
  metadata.reflection = CommandSetDateTimeFormatArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetShowThousandsSeparatorArchive::kSuperFieldNumber;
const int CommandSetShowThousandsSeparatorArchive::kShowThousandsSeparatorFieldNumber;
#endif  // !_MSC_VER

CommandSetShowThousandsSeparatorArchive::CommandSetShowThousandsSeparatorArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetShowThousandsSeparatorArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::CommandSetSingleNumberFormatParameterArchive*>(&::TST::CommandSetSingleNumberFormatParameterArchive::default_instance());
}

CommandSetShowThousandsSeparatorArchive::CommandSetShowThousandsSeparatorArchive(const CommandSetShowThousandsSeparatorArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetShowThousandsSeparatorArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  show_thousands_separator_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetShowThousandsSeparatorArchive::~CommandSetShowThousandsSeparatorArchive() {
  SharedDtor();
}

void CommandSetShowThousandsSeparatorArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetShowThousandsSeparatorArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetShowThousandsSeparatorArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetShowThousandsSeparatorArchive_descriptor_;
}

const CommandSetShowThousandsSeparatorArchive& CommandSetShowThousandsSeparatorArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetShowThousandsSeparatorArchive* CommandSetShowThousandsSeparatorArchive::default_instance_ = NULL;

CommandSetShowThousandsSeparatorArchive* CommandSetShowThousandsSeparatorArchive::New() const {
  return new CommandSetShowThousandsSeparatorArchive;
}

void CommandSetShowThousandsSeparatorArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::CommandSetSingleNumberFormatParameterArchive::Clear();
    }
    show_thousands_separator_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetShowThousandsSeparatorArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_show_thousands_separator;
        break;
      }

      // required bool show_thousands_separator = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_thousands_separator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_thousands_separator_)));
          set_has_show_thousands_separator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetShowThousandsSeparatorArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required bool show_thousands_separator = 2;
  if (has_show_thousands_separator()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->show_thousands_separator(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetShowThousandsSeparatorArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required bool show_thousands_separator = 2;
  if (has_show_thousands_separator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->show_thousands_separator(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetShowThousandsSeparatorArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required bool show_thousands_separator = 2;
    if (has_show_thousands_separator()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetShowThousandsSeparatorArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetShowThousandsSeparatorArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetShowThousandsSeparatorArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetShowThousandsSeparatorArchive::MergeFrom(const CommandSetShowThousandsSeparatorArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::CommandSetSingleNumberFormatParameterArchive::MergeFrom(from.super());
    }
    if (from.has_show_thousands_separator()) {
      set_show_thousands_separator(from.show_thousands_separator());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetShowThousandsSeparatorArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetShowThousandsSeparatorArchive::CopyFrom(const CommandSetShowThousandsSeparatorArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetShowThousandsSeparatorArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetShowThousandsSeparatorArchive::Swap(CommandSetShowThousandsSeparatorArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(show_thousands_separator_, other->show_thousands_separator_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetShowThousandsSeparatorArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetShowThousandsSeparatorArchive_descriptor_;
  metadata.reflection = CommandSetShowThousandsSeparatorArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetUseAccountingStyleArchive::kSuperFieldNumber;
const int CommandSetUseAccountingStyleArchive::kUseAccountingStyleFieldNumber;
#endif  // !_MSC_VER

CommandSetUseAccountingStyleArchive::CommandSetUseAccountingStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetUseAccountingStyleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::CommandSetSingleNumberFormatParameterArchive*>(&::TST::CommandSetSingleNumberFormatParameterArchive::default_instance());
}

CommandSetUseAccountingStyleArchive::CommandSetUseAccountingStyleArchive(const CommandSetUseAccountingStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetUseAccountingStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  use_accounting_style_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetUseAccountingStyleArchive::~CommandSetUseAccountingStyleArchive() {
  SharedDtor();
}

void CommandSetUseAccountingStyleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetUseAccountingStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetUseAccountingStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetUseAccountingStyleArchive_descriptor_;
}

const CommandSetUseAccountingStyleArchive& CommandSetUseAccountingStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetUseAccountingStyleArchive* CommandSetUseAccountingStyleArchive::default_instance_ = NULL;

CommandSetUseAccountingStyleArchive* CommandSetUseAccountingStyleArchive::New() const {
  return new CommandSetUseAccountingStyleArchive;
}

void CommandSetUseAccountingStyleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::CommandSetSingleNumberFormatParameterArchive::Clear();
    }
    use_accounting_style_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetUseAccountingStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_use_accounting_style;
        break;
      }

      // required bool use_accounting_style = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_accounting_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_accounting_style_)));
          set_has_use_accounting_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetUseAccountingStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required bool use_accounting_style = 2;
  if (has_use_accounting_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->use_accounting_style(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetUseAccountingStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required bool use_accounting_style = 2;
  if (has_use_accounting_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->use_accounting_style(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetUseAccountingStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.CommandSetSingleNumberFormatParameterArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required bool use_accounting_style = 2;
    if (has_use_accounting_style()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetUseAccountingStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetUseAccountingStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetUseAccountingStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetUseAccountingStyleArchive::MergeFrom(const CommandSetUseAccountingStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::CommandSetSingleNumberFormatParameterArchive::MergeFrom(from.super());
    }
    if (from.has_use_accounting_style()) {
      set_use_accounting_style(from.use_accounting_style());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetUseAccountingStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetUseAccountingStyleArchive::CopyFrom(const CommandSetUseAccountingStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetUseAccountingStyleArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetUseAccountingStyleArchive::Swap(CommandSetUseAccountingStyleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(use_accounting_style_, other->use_accounting_style_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetUseAccountingStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetUseAccountingStyleArchive_descriptor_;
  metadata.reflection = CommandSetUseAccountingStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandMoveRowsArchive::kSuperFieldNumber;
const int CommandMoveRowsArchive::kSelectionFieldNumber;
const int CommandMoveRowsArchive::kStartRowIndexFieldNumber;
const int CommandMoveRowsArchive::kDestRowIndexFieldNumber;
const int CommandMoveRowsArchive::kNumberOfRowsFieldNumber;
const int CommandMoveRowsArchive::kFormulaRewriteCommandFieldNumber;
const int CommandMoveRowsArchive::kShowCommandFieldNumber;
const int CommandMoveRowsArchive::kUnmergeInvalidRangesCommandFieldNumber;
#endif  // !_MSC_VER

CommandMoveRowsArchive::CommandMoveRowsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandMoveRowsArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  selection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
  formula_rewrite_command_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  show_command_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  unmerge_invalid_ranges_command_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandMoveRowsArchive::CommandMoveRowsArchive(const CommandMoveRowsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandMoveRowsArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  selection_ = NULL;
  start_row_index_ = 0u;
  dest_row_index_ = 0u;
  number_of_rows_ = 0u;
  formula_rewrite_command_ = NULL;
  show_command_ = NULL;
  unmerge_invalid_ranges_command_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandMoveRowsArchive::~CommandMoveRowsArchive() {
  SharedDtor();
}

void CommandMoveRowsArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete selection_;
    delete formula_rewrite_command_;
    delete show_command_;
    delete unmerge_invalid_ranges_command_;
  }
}

void CommandMoveRowsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandMoveRowsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandMoveRowsArchive_descriptor_;
}

const CommandMoveRowsArchive& CommandMoveRowsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandMoveRowsArchive* CommandMoveRowsArchive::default_instance_ = NULL;

CommandMoveRowsArchive* CommandMoveRowsArchive::New() const {
  return new CommandMoveRowsArchive;
}

void CommandMoveRowsArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_selection()) {
      if (selection_ != NULL) selection_->::TST::SelectionArchive::Clear();
    }
    start_row_index_ = 0u;
    dest_row_index_ = 0u;
    number_of_rows_ = 0u;
    if (has_formula_rewrite_command()) {
      if (formula_rewrite_command_ != NULL) formula_rewrite_command_->::TSP::Reference::Clear();
    }
    if (has_show_command()) {
      if (show_command_ != NULL) show_command_->::TSP::Reference::Clear();
    }
    if (has_unmerge_invalid_ranges_command()) {
      if (unmerge_invalid_ranges_command_ != NULL) unmerge_invalid_ranges_command_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandMoveRowsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_selection;
        break;
      }

      // optional .TST.SelectionArchive selection = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_row_index;
        break;
      }

      // required uint32 start_row_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_row_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_row_index_)));
          set_has_start_row_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dest_row_index;
        break;
      }

      // required uint32 dest_row_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_row_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_row_index_)));
          set_has_dest_row_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_number_of_rows;
        break;
      }

      // required uint32 number_of_rows = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number_of_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_rows_)));
          set_has_number_of_rows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_formula_rewrite_command;
        break;
      }

      // optional .TSP.Reference formula_rewrite_command = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formula_rewrite_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_formula_rewrite_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_show_command;
        break;
      }

      // optional .TSP.Reference show_command = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_show_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_show_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_unmerge_invalid_ranges_command;
        break;
      }

      // optional .TSP.Reference unmerge_invalid_ranges_command = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unmerge_invalid_ranges_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unmerge_invalid_ranges_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandMoveRowsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TST.SelectionArchive selection = 2;
  if (has_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->selection(), output);
  }

  // required uint32 start_row_index = 3;
  if (has_start_row_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->start_row_index(), output);
  }

  // required uint32 dest_row_index = 4;
  if (has_dest_row_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dest_row_index(), output);
  }

  // required uint32 number_of_rows = 5;
  if (has_number_of_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->number_of_rows(), output);
  }

  // optional .TSP.Reference formula_rewrite_command = 7;
  if (has_formula_rewrite_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->formula_rewrite_command(), output);
  }

  // optional .TSP.Reference show_command = 8;
  if (has_show_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->show_command(), output);
  }

  // optional .TSP.Reference unmerge_invalid_ranges_command = 9;
  if (has_unmerge_invalid_ranges_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->unmerge_invalid_ranges_command(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandMoveRowsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TST.SelectionArchive selection = 2;
  if (has_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->selection(), target);
  }

  // required uint32 start_row_index = 3;
  if (has_start_row_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->start_row_index(), target);
  }

  // required uint32 dest_row_index = 4;
  if (has_dest_row_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dest_row_index(), target);
  }

  // required uint32 number_of_rows = 5;
  if (has_number_of_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->number_of_rows(), target);
  }

  // optional .TSP.Reference formula_rewrite_command = 7;
  if (has_formula_rewrite_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->formula_rewrite_command(), target);
  }

  // optional .TSP.Reference show_command = 8;
  if (has_show_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->show_command(), target);
  }

  // optional .TSP.Reference unmerge_invalid_ranges_command = 9;
  if (has_unmerge_invalid_ranges_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->unmerge_invalid_ranges_command(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandMoveRowsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TST.SelectionArchive selection = 2;
    if (has_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selection());
    }

    // required uint32 start_row_index = 3;
    if (has_start_row_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_row_index());
    }

    // required uint32 dest_row_index = 4;
    if (has_dest_row_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_row_index());
    }

    // required uint32 number_of_rows = 5;
    if (has_number_of_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_rows());
    }

    // optional .TSP.Reference formula_rewrite_command = 7;
    if (has_formula_rewrite_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formula_rewrite_command());
    }

    // optional .TSP.Reference show_command = 8;
    if (has_show_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->show_command());
    }

    // optional .TSP.Reference unmerge_invalid_ranges_command = 9;
    if (has_unmerge_invalid_ranges_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unmerge_invalid_ranges_command());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandMoveRowsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandMoveRowsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandMoveRowsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandMoveRowsArchive::MergeFrom(const CommandMoveRowsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_selection()) {
      mutable_selection()->::TST::SelectionArchive::MergeFrom(from.selection());
    }
    if (from.has_start_row_index()) {
      set_start_row_index(from.start_row_index());
    }
    if (from.has_dest_row_index()) {
      set_dest_row_index(from.dest_row_index());
    }
    if (from.has_number_of_rows()) {
      set_number_of_rows(from.number_of_rows());
    }
    if (from.has_formula_rewrite_command()) {
      mutable_formula_rewrite_command()->::TSP::Reference::MergeFrom(from.formula_rewrite_command());
    }
    if (from.has_show_command()) {
      mutable_show_command()->::TSP::Reference::MergeFrom(from.show_command());
    }
    if (from.has_unmerge_invalid_ranges_command()) {
      mutable_unmerge_invalid_ranges_command()->::TSP::Reference::MergeFrom(from.unmerge_invalid_ranges_command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandMoveRowsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandMoveRowsArchive::CopyFrom(const CommandMoveRowsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMoveRowsArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_selection()) {
    if (!this->selection().IsInitialized()) return false;
  }
  if (has_formula_rewrite_command()) {
    if (!this->formula_rewrite_command().IsInitialized()) return false;
  }
  if (has_show_command()) {
    if (!this->show_command().IsInitialized()) return false;
  }
  if (has_unmerge_invalid_ranges_command()) {
    if (!this->unmerge_invalid_ranges_command().IsInitialized()) return false;
  }
  return true;
}

void CommandMoveRowsArchive::Swap(CommandMoveRowsArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(selection_, other->selection_);
    std::swap(start_row_index_, other->start_row_index_);
    std::swap(dest_row_index_, other->dest_row_index_);
    std::swap(number_of_rows_, other->number_of_rows_);
    std::swap(formula_rewrite_command_, other->formula_rewrite_command_);
    std::swap(show_command_, other->show_command_);
    std::swap(unmerge_invalid_ranges_command_, other->unmerge_invalid_ranges_command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandMoveRowsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandMoveRowsArchive_descriptor_;
  metadata.reflection = CommandMoveRowsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandMoveColumnsArchive::kSuperFieldNumber;
const int CommandMoveColumnsArchive::kSelectionFieldNumber;
const int CommandMoveColumnsArchive::kStartColumnIndexFieldNumber;
const int CommandMoveColumnsArchive::kDestColumnIndexFieldNumber;
const int CommandMoveColumnsArchive::kNumberOfColumnsFieldNumber;
const int CommandMoveColumnsArchive::kFormulaRewriteCommandFieldNumber;
const int CommandMoveColumnsArchive::kShowCommandFieldNumber;
#endif  // !_MSC_VER

CommandMoveColumnsArchive::CommandMoveColumnsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandMoveColumnsArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  selection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
  formula_rewrite_command_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  show_command_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandMoveColumnsArchive::CommandMoveColumnsArchive(const CommandMoveColumnsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandMoveColumnsArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  selection_ = NULL;
  start_column_index_ = 0u;
  dest_column_index_ = 0u;
  number_of_columns_ = 0u;
  formula_rewrite_command_ = NULL;
  show_command_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandMoveColumnsArchive::~CommandMoveColumnsArchive() {
  SharedDtor();
}

void CommandMoveColumnsArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete selection_;
    delete formula_rewrite_command_;
    delete show_command_;
  }
}

void CommandMoveColumnsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandMoveColumnsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandMoveColumnsArchive_descriptor_;
}

const CommandMoveColumnsArchive& CommandMoveColumnsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandMoveColumnsArchive* CommandMoveColumnsArchive::default_instance_ = NULL;

CommandMoveColumnsArchive* CommandMoveColumnsArchive::New() const {
  return new CommandMoveColumnsArchive;
}

void CommandMoveColumnsArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_selection()) {
      if (selection_ != NULL) selection_->::TST::SelectionArchive::Clear();
    }
    start_column_index_ = 0u;
    dest_column_index_ = 0u;
    number_of_columns_ = 0u;
    if (has_formula_rewrite_command()) {
      if (formula_rewrite_command_ != NULL) formula_rewrite_command_->::TSP::Reference::Clear();
    }
    if (has_show_command()) {
      if (show_command_ != NULL) show_command_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandMoveColumnsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_selection;
        break;
      }

      // optional .TST.SelectionArchive selection = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_column_index;
        break;
      }

      // required uint32 start_column_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_column_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_column_index_)));
          set_has_start_column_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dest_column_index;
        break;
      }

      // required uint32 dest_column_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_column_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_column_index_)));
          set_has_dest_column_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_number_of_columns;
        break;
      }

      // required uint32 number_of_columns = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number_of_columns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_columns_)));
          set_has_number_of_columns();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_formula_rewrite_command;
        break;
      }

      // optional .TSP.Reference formula_rewrite_command = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formula_rewrite_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_formula_rewrite_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_show_command;
        break;
      }

      // optional .TSP.Reference show_command = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_show_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_show_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandMoveColumnsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TST.SelectionArchive selection = 2;
  if (has_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->selection(), output);
  }

  // required uint32 start_column_index = 3;
  if (has_start_column_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->start_column_index(), output);
  }

  // required uint32 dest_column_index = 4;
  if (has_dest_column_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dest_column_index(), output);
  }

  // required uint32 number_of_columns = 5;
  if (has_number_of_columns()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->number_of_columns(), output);
  }

  // optional .TSP.Reference formula_rewrite_command = 7;
  if (has_formula_rewrite_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->formula_rewrite_command(), output);
  }

  // optional .TSP.Reference show_command = 8;
  if (has_show_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->show_command(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandMoveColumnsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TST.SelectionArchive selection = 2;
  if (has_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->selection(), target);
  }

  // required uint32 start_column_index = 3;
  if (has_start_column_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->start_column_index(), target);
  }

  // required uint32 dest_column_index = 4;
  if (has_dest_column_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dest_column_index(), target);
  }

  // required uint32 number_of_columns = 5;
  if (has_number_of_columns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->number_of_columns(), target);
  }

  // optional .TSP.Reference formula_rewrite_command = 7;
  if (has_formula_rewrite_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->formula_rewrite_command(), target);
  }

  // optional .TSP.Reference show_command = 8;
  if (has_show_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->show_command(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandMoveColumnsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TST.SelectionArchive selection = 2;
    if (has_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selection());
    }

    // required uint32 start_column_index = 3;
    if (has_start_column_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_column_index());
    }

    // required uint32 dest_column_index = 4;
    if (has_dest_column_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_column_index());
    }

    // required uint32 number_of_columns = 5;
    if (has_number_of_columns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_columns());
    }

    // optional .TSP.Reference formula_rewrite_command = 7;
    if (has_formula_rewrite_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formula_rewrite_command());
    }

    // optional .TSP.Reference show_command = 8;
    if (has_show_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->show_command());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandMoveColumnsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandMoveColumnsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandMoveColumnsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandMoveColumnsArchive::MergeFrom(const CommandMoveColumnsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_selection()) {
      mutable_selection()->::TST::SelectionArchive::MergeFrom(from.selection());
    }
    if (from.has_start_column_index()) {
      set_start_column_index(from.start_column_index());
    }
    if (from.has_dest_column_index()) {
      set_dest_column_index(from.dest_column_index());
    }
    if (from.has_number_of_columns()) {
      set_number_of_columns(from.number_of_columns());
    }
    if (from.has_formula_rewrite_command()) {
      mutable_formula_rewrite_command()->::TSP::Reference::MergeFrom(from.formula_rewrite_command());
    }
    if (from.has_show_command()) {
      mutable_show_command()->::TSP::Reference::MergeFrom(from.show_command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandMoveColumnsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandMoveColumnsArchive::CopyFrom(const CommandMoveColumnsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMoveColumnsArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_selection()) {
    if (!this->selection().IsInitialized()) return false;
  }
  if (has_formula_rewrite_command()) {
    if (!this->formula_rewrite_command().IsInitialized()) return false;
  }
  if (has_show_command()) {
    if (!this->show_command().IsInitialized()) return false;
  }
  return true;
}

void CommandMoveColumnsArchive::Swap(CommandMoveColumnsArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(selection_, other->selection_);
    std::swap(start_column_index_, other->start_column_index_);
    std::swap(dest_column_index_, other->dest_column_index_);
    std::swap(number_of_columns_, other->number_of_columns_);
    std::swap(formula_rewrite_command_, other->formula_rewrite_command_);
    std::swap(show_command_, other->show_command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandMoveColumnsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandMoveColumnsArchive_descriptor_;
  metadata.reflection = CommandMoveColumnsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSortArchive::kSuperFieldNumber;
const int CommandSortArchive::kMappingFieldNumber;
const int CommandSortArchive::kFormulaRewriteCommandFieldNumber;
#endif  // !_MSC_VER

CommandSortArchive::CommandSortArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSortArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  mapping_ = const_cast< ::TSK::ShuffleMappingArchive*>(&::TSK::ShuffleMappingArchive::default_instance());
  formula_rewrite_command_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandSortArchive::CommandSortArchive(const CommandSortArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSortArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  mapping_ = NULL;
  formula_rewrite_command_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSortArchive::~CommandSortArchive() {
  SharedDtor();
}

void CommandSortArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete mapping_;
    delete formula_rewrite_command_;
  }
}

void CommandSortArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSortArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSortArchive_descriptor_;
}

const CommandSortArchive& CommandSortArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSortArchive* CommandSortArchive::default_instance_ = NULL;

CommandSortArchive* CommandSortArchive::New() const {
  return new CommandSortArchive;
}

void CommandSortArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_mapping()) {
      if (mapping_ != NULL) mapping_->::TSK::ShuffleMappingArchive::Clear();
    }
    if (has_formula_rewrite_command()) {
      if (formula_rewrite_command_ != NULL) formula_rewrite_command_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSortArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_mapping;
        break;
      }

      // required .TSK.ShuffleMappingArchive mapping = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mapping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mapping()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_formula_rewrite_command;
        break;
      }

      // optional .TSP.Reference formula_rewrite_command = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formula_rewrite_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_formula_rewrite_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSortArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSK.ShuffleMappingArchive mapping = 5;
  if (has_mapping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mapping(), output);
  }

  // optional .TSP.Reference formula_rewrite_command = 7;
  if (has_formula_rewrite_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->formula_rewrite_command(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSortArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSK.ShuffleMappingArchive mapping = 5;
  if (has_mapping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->mapping(), target);
  }

  // optional .TSP.Reference formula_rewrite_command = 7;
  if (has_formula_rewrite_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->formula_rewrite_command(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSortArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSK.ShuffleMappingArchive mapping = 5;
    if (has_mapping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mapping());
    }

    // optional .TSP.Reference formula_rewrite_command = 7;
    if (has_formula_rewrite_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formula_rewrite_command());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSortArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSortArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSortArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSortArchive::MergeFrom(const CommandSortArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_mapping()) {
      mutable_mapping()->::TSK::ShuffleMappingArchive::MergeFrom(from.mapping());
    }
    if (from.has_formula_rewrite_command()) {
      mutable_formula_rewrite_command()->::TSP::Reference::MergeFrom(from.formula_rewrite_command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSortArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSortArchive::CopyFrom(const CommandSortArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSortArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_mapping()) {
    if (!this->mapping().IsInitialized()) return false;
  }
  if (has_formula_rewrite_command()) {
    if (!this->formula_rewrite_command().IsInitialized()) return false;
  }
  return true;
}

void CommandSortArchive::Swap(CommandSortArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(mapping_, other->mapping_);
    std::swap(formula_rewrite_command_, other->formula_rewrite_command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSortArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSortArchive_descriptor_;
  metadata.reflection = CommandSortArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandRewriteFormulasForSortArchive::kSuperFieldNumber;
const int CommandRewriteFormulasForSortArchive::kFormulaMapFieldNumber;
const int CommandRewriteFormulasForSortArchive::kSortMappingFieldNumber;
const int CommandRewriteFormulasForSortArchive::kSortedTableIdFieldNumber;
const int CommandRewriteFormulasForSortArchive::kExplodeRangesFieldNumber;
#endif  // !_MSC_VER

CommandRewriteFormulasForSortArchive::CommandRewriteFormulasForSortArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandRewriteFormulasForSortArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  formula_map_ = const_cast< ::TSCE::OwnerFormulaMapArchive*>(&::TSCE::OwnerFormulaMapArchive::default_instance());
  sort_mapping_ = const_cast< ::TSK::ShuffleMappingArchive*>(&::TSK::ShuffleMappingArchive::default_instance());
  sorted_table_id_ = const_cast< ::TSCE::CFUUIDArchive*>(&::TSCE::CFUUIDArchive::default_instance());
}

CommandRewriteFormulasForSortArchive::CommandRewriteFormulasForSortArchive(const CommandRewriteFormulasForSortArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandRewriteFormulasForSortArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  formula_map_ = NULL;
  sort_mapping_ = NULL;
  sorted_table_id_ = NULL;
  explode_ranges_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandRewriteFormulasForSortArchive::~CommandRewriteFormulasForSortArchive() {
  SharedDtor();
}

void CommandRewriteFormulasForSortArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete formula_map_;
    delete sort_mapping_;
    delete sorted_table_id_;
  }
}

void CommandRewriteFormulasForSortArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandRewriteFormulasForSortArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandRewriteFormulasForSortArchive_descriptor_;
}

const CommandRewriteFormulasForSortArchive& CommandRewriteFormulasForSortArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandRewriteFormulasForSortArchive* CommandRewriteFormulasForSortArchive::default_instance_ = NULL;

CommandRewriteFormulasForSortArchive* CommandRewriteFormulasForSortArchive::New() const {
  return new CommandRewriteFormulasForSortArchive;
}

void CommandRewriteFormulasForSortArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_formula_map()) {
      if (formula_map_ != NULL) formula_map_->::TSCE::OwnerFormulaMapArchive::Clear();
    }
    if (has_sort_mapping()) {
      if (sort_mapping_ != NULL) sort_mapping_->::TSK::ShuffleMappingArchive::Clear();
    }
    if (has_sorted_table_id()) {
      if (sorted_table_id_ != NULL) sorted_table_id_->::TSCE::CFUUIDArchive::Clear();
    }
    explode_ranges_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandRewriteFormulasForSortArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_formula_map;
        break;
      }

      // required .TSCE.OwnerFormulaMapArchive formula_map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formula_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_formula_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sort_mapping;
        break;
      }

      // required .TSK.ShuffleMappingArchive sort_mapping = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sort_mapping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sort_mapping()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sorted_table_id;
        break;
      }

      // required .TSCE.CFUUIDArchive sorted_table_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sorted_table_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sorted_table_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_explode_ranges;
        break;
      }

      // required bool explode_ranges = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_explode_ranges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &explode_ranges_)));
          set_has_explode_ranges();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandRewriteFormulasForSortArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSCE.OwnerFormulaMapArchive formula_map = 2;
  if (has_formula_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->formula_map(), output);
  }

  // required .TSK.ShuffleMappingArchive sort_mapping = 3;
  if (has_sort_mapping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sort_mapping(), output);
  }

  // required .TSCE.CFUUIDArchive sorted_table_id = 4;
  if (has_sorted_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sorted_table_id(), output);
  }

  // required bool explode_ranges = 5;
  if (has_explode_ranges()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->explode_ranges(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandRewriteFormulasForSortArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSCE.OwnerFormulaMapArchive formula_map = 2;
  if (has_formula_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->formula_map(), target);
  }

  // required .TSK.ShuffleMappingArchive sort_mapping = 3;
  if (has_sort_mapping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sort_mapping(), target);
  }

  // required .TSCE.CFUUIDArchive sorted_table_id = 4;
  if (has_sorted_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sorted_table_id(), target);
  }

  // required bool explode_ranges = 5;
  if (has_explode_ranges()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->explode_ranges(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandRewriteFormulasForSortArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSCE.OwnerFormulaMapArchive formula_map = 2;
    if (has_formula_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formula_map());
    }

    // required .TSK.ShuffleMappingArchive sort_mapping = 3;
    if (has_sort_mapping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sort_mapping());
    }

    // required .TSCE.CFUUIDArchive sorted_table_id = 4;
    if (has_sorted_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sorted_table_id());
    }

    // required bool explode_ranges = 5;
    if (has_explode_ranges()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandRewriteFormulasForSortArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandRewriteFormulasForSortArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandRewriteFormulasForSortArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandRewriteFormulasForSortArchive::MergeFrom(const CommandRewriteFormulasForSortArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_formula_map()) {
      mutable_formula_map()->::TSCE::OwnerFormulaMapArchive::MergeFrom(from.formula_map());
    }
    if (from.has_sort_mapping()) {
      mutable_sort_mapping()->::TSK::ShuffleMappingArchive::MergeFrom(from.sort_mapping());
    }
    if (from.has_sorted_table_id()) {
      mutable_sorted_table_id()->::TSCE::CFUUIDArchive::MergeFrom(from.sorted_table_id());
    }
    if (from.has_explode_ranges()) {
      set_explode_ranges(from.explode_ranges());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandRewriteFormulasForSortArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandRewriteFormulasForSortArchive::CopyFrom(const CommandRewriteFormulasForSortArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteFormulasForSortArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_formula_map()) {
    if (!this->formula_map().IsInitialized()) return false;
  }
  if (has_sort_mapping()) {
    if (!this->sort_mapping().IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteFormulasForSortArchive::Swap(CommandRewriteFormulasForSortArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(formula_map_, other->formula_map_);
    std::swap(sort_mapping_, other->sort_mapping_);
    std::swap(sorted_table_id_, other->sorted_table_id_);
    std::swap(explode_ranges_, other->explode_ranges_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandRewriteFormulasForSortArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandRewriteFormulasForSortArchive_descriptor_;
  metadata.reflection = CommandRewriteFormulasForSortArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandRewriteFormulasForTectonicShiftArchive::kSuperFieldNumber;
const int CommandRewriteFormulasForTectonicShiftArchive::kFormulaMapFieldNumber;
const int CommandRewriteFormulasForTectonicShiftArchive::kTectonicShiftFieldNumber;
#endif  // !_MSC_VER

CommandRewriteFormulasForTectonicShiftArchive::CommandRewriteFormulasForTectonicShiftArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandRewriteFormulasForTectonicShiftArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  formula_map_ = const_cast< ::TSCE::OwnerFormulaMapArchive*>(&::TSCE::OwnerFormulaMapArchive::default_instance());
  tectonic_shift_ = const_cast< ::TSCE::TectonicShiftArchive*>(&::TSCE::TectonicShiftArchive::default_instance());
}

CommandRewriteFormulasForTectonicShiftArchive::CommandRewriteFormulasForTectonicShiftArchive(const CommandRewriteFormulasForTectonicShiftArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandRewriteFormulasForTectonicShiftArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  formula_map_ = NULL;
  tectonic_shift_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandRewriteFormulasForTectonicShiftArchive::~CommandRewriteFormulasForTectonicShiftArchive() {
  SharedDtor();
}

void CommandRewriteFormulasForTectonicShiftArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete formula_map_;
    delete tectonic_shift_;
  }
}

void CommandRewriteFormulasForTectonicShiftArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandRewriteFormulasForTectonicShiftArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandRewriteFormulasForTectonicShiftArchive_descriptor_;
}

const CommandRewriteFormulasForTectonicShiftArchive& CommandRewriteFormulasForTectonicShiftArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandRewriteFormulasForTectonicShiftArchive* CommandRewriteFormulasForTectonicShiftArchive::default_instance_ = NULL;

CommandRewriteFormulasForTectonicShiftArchive* CommandRewriteFormulasForTectonicShiftArchive::New() const {
  return new CommandRewriteFormulasForTectonicShiftArchive;
}

void CommandRewriteFormulasForTectonicShiftArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_formula_map()) {
      if (formula_map_ != NULL) formula_map_->::TSCE::OwnerFormulaMapArchive::Clear();
    }
    if (has_tectonic_shift()) {
      if (tectonic_shift_ != NULL) tectonic_shift_->::TSCE::TectonicShiftArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandRewriteFormulasForTectonicShiftArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_formula_map;
        break;
      }

      // required .TSCE.OwnerFormulaMapArchive formula_map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formula_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_formula_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tectonic_shift;
        break;
      }

      // required .TSCE.TectonicShiftArchive tectonic_shift = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tectonic_shift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tectonic_shift()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandRewriteFormulasForTectonicShiftArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSCE.OwnerFormulaMapArchive formula_map = 2;
  if (has_formula_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->formula_map(), output);
  }

  // required .TSCE.TectonicShiftArchive tectonic_shift = 3;
  if (has_tectonic_shift()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tectonic_shift(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandRewriteFormulasForTectonicShiftArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSCE.OwnerFormulaMapArchive formula_map = 2;
  if (has_formula_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->formula_map(), target);
  }

  // required .TSCE.TectonicShiftArchive tectonic_shift = 3;
  if (has_tectonic_shift()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tectonic_shift(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandRewriteFormulasForTectonicShiftArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSCE.OwnerFormulaMapArchive formula_map = 2;
    if (has_formula_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formula_map());
    }

    // required .TSCE.TectonicShiftArchive tectonic_shift = 3;
    if (has_tectonic_shift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tectonic_shift());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandRewriteFormulasForTectonicShiftArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandRewriteFormulasForTectonicShiftArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandRewriteFormulasForTectonicShiftArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandRewriteFormulasForTectonicShiftArchive::MergeFrom(const CommandRewriteFormulasForTectonicShiftArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_formula_map()) {
      mutable_formula_map()->::TSCE::OwnerFormulaMapArchive::MergeFrom(from.formula_map());
    }
    if (from.has_tectonic_shift()) {
      mutable_tectonic_shift()->::TSCE::TectonicShiftArchive::MergeFrom(from.tectonic_shift());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandRewriteFormulasForTectonicShiftArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandRewriteFormulasForTectonicShiftArchive::CopyFrom(const CommandRewriteFormulasForTectonicShiftArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteFormulasForTectonicShiftArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_formula_map()) {
    if (!this->formula_map().IsInitialized()) return false;
  }
  if (has_tectonic_shift()) {
    if (!this->tectonic_shift().IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteFormulasForTectonicShiftArchive::Swap(CommandRewriteFormulasForTectonicShiftArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(formula_map_, other->formula_map_);
    std::swap(tectonic_shift_, other->tectonic_shift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandRewriteFormulasForTectonicShiftArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandRewriteFormulasForTectonicShiftArchive_descriptor_;
  metadata.reflection = CommandRewriteFormulasForTectonicShiftArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandRewriteFormulasForMoveArchive::kSuperFieldNumber;
const int CommandRewriteFormulasForMoveArchive::kFormulaMapFieldNumber;
const int CommandRewriteFormulasForMoveArchive::kFromReferenceFieldNumber;
const int CommandRewriteFormulasForMoveArchive::kToReferenceFieldNumber;
#endif  // !_MSC_VER

CommandRewriteFormulasForMoveArchive::CommandRewriteFormulasForMoveArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandRewriteFormulasForMoveArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  formula_map_ = const_cast< ::TSCE::OwnerFormulaMapArchive*>(&::TSCE::OwnerFormulaMapArchive::default_instance());
  from_reference_ = const_cast< ::TSCE::RangeReferenceArchive*>(&::TSCE::RangeReferenceArchive::default_instance());
  to_reference_ = const_cast< ::TSCE::RangeReferenceArchive*>(&::TSCE::RangeReferenceArchive::default_instance());
}

CommandRewriteFormulasForMoveArchive::CommandRewriteFormulasForMoveArchive(const CommandRewriteFormulasForMoveArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandRewriteFormulasForMoveArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  formula_map_ = NULL;
  from_reference_ = NULL;
  to_reference_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandRewriteFormulasForMoveArchive::~CommandRewriteFormulasForMoveArchive() {
  SharedDtor();
}

void CommandRewriteFormulasForMoveArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete formula_map_;
    delete from_reference_;
    delete to_reference_;
  }
}

void CommandRewriteFormulasForMoveArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandRewriteFormulasForMoveArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandRewriteFormulasForMoveArchive_descriptor_;
}

const CommandRewriteFormulasForMoveArchive& CommandRewriteFormulasForMoveArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandRewriteFormulasForMoveArchive* CommandRewriteFormulasForMoveArchive::default_instance_ = NULL;

CommandRewriteFormulasForMoveArchive* CommandRewriteFormulasForMoveArchive::New() const {
  return new CommandRewriteFormulasForMoveArchive;
}

void CommandRewriteFormulasForMoveArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_formula_map()) {
      if (formula_map_ != NULL) formula_map_->::TSCE::OwnerFormulaMapArchive::Clear();
    }
    if (has_from_reference()) {
      if (from_reference_ != NULL) from_reference_->::TSCE::RangeReferenceArchive::Clear();
    }
    if (has_to_reference()) {
      if (to_reference_ != NULL) to_reference_->::TSCE::RangeReferenceArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandRewriteFormulasForMoveArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_formula_map;
        break;
      }

      // required .TSCE.OwnerFormulaMapArchive formula_map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formula_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_formula_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_from_reference;
        break;
      }

      // required .TSCE.RangeReferenceArchive from_reference = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_reference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from_reference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_to_reference;
        break;
      }

      // required .TSCE.RangeReferenceArchive to_reference = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_reference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_reference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandRewriteFormulasForMoveArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSCE.OwnerFormulaMapArchive formula_map = 2;
  if (has_formula_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->formula_map(), output);
  }

  // required .TSCE.RangeReferenceArchive from_reference = 6;
  if (has_from_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->from_reference(), output);
  }

  // required .TSCE.RangeReferenceArchive to_reference = 7;
  if (has_to_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->to_reference(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandRewriteFormulasForMoveArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSCE.OwnerFormulaMapArchive formula_map = 2;
  if (has_formula_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->formula_map(), target);
  }

  // required .TSCE.RangeReferenceArchive from_reference = 6;
  if (has_from_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->from_reference(), target);
  }

  // required .TSCE.RangeReferenceArchive to_reference = 7;
  if (has_to_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->to_reference(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandRewriteFormulasForMoveArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSCE.OwnerFormulaMapArchive formula_map = 2;
    if (has_formula_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formula_map());
    }

    // required .TSCE.RangeReferenceArchive from_reference = 6;
    if (has_from_reference()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->from_reference());
    }

    // required .TSCE.RangeReferenceArchive to_reference = 7;
    if (has_to_reference()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->to_reference());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandRewriteFormulasForMoveArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandRewriteFormulasForMoveArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandRewriteFormulasForMoveArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandRewriteFormulasForMoveArchive::MergeFrom(const CommandRewriteFormulasForMoveArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_formula_map()) {
      mutable_formula_map()->::TSCE::OwnerFormulaMapArchive::MergeFrom(from.formula_map());
    }
    if (from.has_from_reference()) {
      mutable_from_reference()->::TSCE::RangeReferenceArchive::MergeFrom(from.from_reference());
    }
    if (from.has_to_reference()) {
      mutable_to_reference()->::TSCE::RangeReferenceArchive::MergeFrom(from.to_reference());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandRewriteFormulasForMoveArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandRewriteFormulasForMoveArchive::CopyFrom(const CommandRewriteFormulasForMoveArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteFormulasForMoveArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_formula_map()) {
    if (!this->formula_map().IsInitialized()) return false;
  }
  if (has_from_reference()) {
    if (!this->from_reference().IsInitialized()) return false;
  }
  if (has_to_reference()) {
    if (!this->to_reference().IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteFormulasForMoveArchive::Swap(CommandRewriteFormulasForMoveArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(formula_map_, other->formula_map_);
    std::swap(from_reference_, other->from_reference_);
    std::swap(to_reference_, other->to_reference_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandRewriteFormulasForMoveArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandRewriteFormulasForMoveArchive_descriptor_;
  metadata.reflection = CommandRewriteFormulasForMoveArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandRewriteFormulasForCellMergeArchive::kSuperFieldNumber;
const int CommandRewriteFormulasForCellMergeArchive::kFormulaMapFieldNumber;
const int CommandRewriteFormulasForCellMergeArchive::kMergedRangeFieldNumber;
const int CommandRewriteFormulasForCellMergeArchive::kTableIdFieldNumber;
#endif  // !_MSC_VER

CommandRewriteFormulasForCellMergeArchive::CommandRewriteFormulasForCellMergeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandRewriteFormulasForCellMergeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  formula_map_ = const_cast< ::TSCE::OwnerFormulaMapArchive*>(&::TSCE::OwnerFormulaMapArchive::default_instance());
  merged_range_ = const_cast< ::TSCE::RangeCoordinateArchive*>(&::TSCE::RangeCoordinateArchive::default_instance());
  table_id_ = const_cast< ::TSCE::CFUUIDArchive*>(&::TSCE::CFUUIDArchive::default_instance());
}

CommandRewriteFormulasForCellMergeArchive::CommandRewriteFormulasForCellMergeArchive(const CommandRewriteFormulasForCellMergeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandRewriteFormulasForCellMergeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  formula_map_ = NULL;
  merged_range_ = NULL;
  table_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandRewriteFormulasForCellMergeArchive::~CommandRewriteFormulasForCellMergeArchive() {
  SharedDtor();
}

void CommandRewriteFormulasForCellMergeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete formula_map_;
    delete merged_range_;
    delete table_id_;
  }
}

void CommandRewriteFormulasForCellMergeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandRewriteFormulasForCellMergeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandRewriteFormulasForCellMergeArchive_descriptor_;
}

const CommandRewriteFormulasForCellMergeArchive& CommandRewriteFormulasForCellMergeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandRewriteFormulasForCellMergeArchive* CommandRewriteFormulasForCellMergeArchive::default_instance_ = NULL;

CommandRewriteFormulasForCellMergeArchive* CommandRewriteFormulasForCellMergeArchive::New() const {
  return new CommandRewriteFormulasForCellMergeArchive;
}

void CommandRewriteFormulasForCellMergeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_formula_map()) {
      if (formula_map_ != NULL) formula_map_->::TSCE::OwnerFormulaMapArchive::Clear();
    }
    if (has_merged_range()) {
      if (merged_range_ != NULL) merged_range_->::TSCE::RangeCoordinateArchive::Clear();
    }
    if (has_table_id()) {
      if (table_id_ != NULL) table_id_->::TSCE::CFUUIDArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandRewriteFormulasForCellMergeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_formula_map;
        break;
      }

      // required .TSCE.OwnerFormulaMapArchive formula_map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formula_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_formula_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_merged_range;
        break;
      }

      // required .TSCE.RangeCoordinateArchive merged_range = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_merged_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_merged_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_table_id;
        break;
      }

      // required .TSCE.CFUUIDArchive table_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandRewriteFormulasForCellMergeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSCE.OwnerFormulaMapArchive formula_map = 2;
  if (has_formula_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->formula_map(), output);
  }

  // required .TSCE.RangeCoordinateArchive merged_range = 3;
  if (has_merged_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->merged_range(), output);
  }

  // required .TSCE.CFUUIDArchive table_id = 4;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->table_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandRewriteFormulasForCellMergeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSCE.OwnerFormulaMapArchive formula_map = 2;
  if (has_formula_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->formula_map(), target);
  }

  // required .TSCE.RangeCoordinateArchive merged_range = 3;
  if (has_merged_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->merged_range(), target);
  }

  // required .TSCE.CFUUIDArchive table_id = 4;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->table_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandRewriteFormulasForCellMergeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSCE.OwnerFormulaMapArchive formula_map = 2;
    if (has_formula_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formula_map());
    }

    // required .TSCE.RangeCoordinateArchive merged_range = 3;
    if (has_merged_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->merged_range());
    }

    // required .TSCE.CFUUIDArchive table_id = 4;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandRewriteFormulasForCellMergeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandRewriteFormulasForCellMergeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandRewriteFormulasForCellMergeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandRewriteFormulasForCellMergeArchive::MergeFrom(const CommandRewriteFormulasForCellMergeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_formula_map()) {
      mutable_formula_map()->::TSCE::OwnerFormulaMapArchive::MergeFrom(from.formula_map());
    }
    if (from.has_merged_range()) {
      mutable_merged_range()->::TSCE::RangeCoordinateArchive::MergeFrom(from.merged_range());
    }
    if (from.has_table_id()) {
      mutable_table_id()->::TSCE::CFUUIDArchive::MergeFrom(from.table_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandRewriteFormulasForCellMergeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandRewriteFormulasForCellMergeArchive::CopyFrom(const CommandRewriteFormulasForCellMergeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteFormulasForCellMergeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_formula_map()) {
    if (!this->formula_map().IsInitialized()) return false;
  }
  if (has_merged_range()) {
    if (!this->merged_range().IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteFormulasForCellMergeArchive::Swap(CommandRewriteFormulasForCellMergeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(formula_map_, other->formula_map_);
    std::swap(merged_range_, other->merged_range_);
    std::swap(table_id_, other->table_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandRewriteFormulasForCellMergeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandRewriteFormulasForCellMergeArchive_descriptor_;
  metadata.reflection = CommandRewriteFormulasForCellMergeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandRewriteFilterFormulasForTableResizeArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandRewriteFilterFormulasForTableResizeArchive::CommandRewriteFilterFormulasForTableResizeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandRewriteFilterFormulasForTableResizeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
}

CommandRewriteFilterFormulasForTableResizeArchive::CommandRewriteFilterFormulasForTableResizeArchive(const CommandRewriteFilterFormulasForTableResizeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandRewriteFilterFormulasForTableResizeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandRewriteFilterFormulasForTableResizeArchive::~CommandRewriteFilterFormulasForTableResizeArchive() {
  SharedDtor();
}

void CommandRewriteFilterFormulasForTableResizeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandRewriteFilterFormulasForTableResizeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandRewriteFilterFormulasForTableResizeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandRewriteFilterFormulasForTableResizeArchive_descriptor_;
}

const CommandRewriteFilterFormulasForTableResizeArchive& CommandRewriteFilterFormulasForTableResizeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandRewriteFilterFormulasForTableResizeArchive* CommandRewriteFilterFormulasForTableResizeArchive::default_instance_ = NULL;

CommandRewriteFilterFormulasForTableResizeArchive* CommandRewriteFilterFormulasForTableResizeArchive::New() const {
  return new CommandRewriteFilterFormulasForTableResizeArchive;
}

void CommandRewriteFilterFormulasForTableResizeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandRewriteFilterFormulasForTableResizeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandRewriteFilterFormulasForTableResizeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandRewriteFilterFormulasForTableResizeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandRewriteFilterFormulasForTableResizeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandRewriteFilterFormulasForTableResizeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandRewriteFilterFormulasForTableResizeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandRewriteFilterFormulasForTableResizeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandRewriteFilterFormulasForTableResizeArchive::MergeFrom(const CommandRewriteFilterFormulasForTableResizeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandRewriteFilterFormulasForTableResizeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandRewriteFilterFormulasForTableResizeArchive::CopyFrom(const CommandRewriteFilterFormulasForTableResizeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteFilterFormulasForTableResizeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteFilterFormulasForTableResizeArchive::Swap(CommandRewriteFilterFormulasForTableResizeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandRewriteFilterFormulasForTableResizeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandRewriteFilterFormulasForTableResizeArchive_descriptor_;
  metadata.reflection = CommandRewriteFilterFormulasForTableResizeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandRewriteFilterFormulasForTectonicShiftArchive::kSuperFieldNumber;
const int CommandRewriteFilterFormulasForTectonicShiftArchive::kFilterSetFieldNumber;
const int CommandRewriteFilterFormulasForTectonicShiftArchive::kTectonicShiftFieldNumber;
#endif  // !_MSC_VER

CommandRewriteFilterFormulasForTectonicShiftArchive::CommandRewriteFilterFormulasForTectonicShiftArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandRewriteFilterFormulasForTectonicShiftArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  filter_set_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  tectonic_shift_ = const_cast< ::TSCE::TectonicShiftArchive*>(&::TSCE::TectonicShiftArchive::default_instance());
}

CommandRewriteFilterFormulasForTectonicShiftArchive::CommandRewriteFilterFormulasForTectonicShiftArchive(const CommandRewriteFilterFormulasForTectonicShiftArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandRewriteFilterFormulasForTectonicShiftArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  filter_set_ = NULL;
  tectonic_shift_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandRewriteFilterFormulasForTectonicShiftArchive::~CommandRewriteFilterFormulasForTectonicShiftArchive() {
  SharedDtor();
}

void CommandRewriteFilterFormulasForTectonicShiftArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete filter_set_;
    delete tectonic_shift_;
  }
}

void CommandRewriteFilterFormulasForTectonicShiftArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandRewriteFilterFormulasForTectonicShiftArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandRewriteFilterFormulasForTectonicShiftArchive_descriptor_;
}

const CommandRewriteFilterFormulasForTectonicShiftArchive& CommandRewriteFilterFormulasForTectonicShiftArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandRewriteFilterFormulasForTectonicShiftArchive* CommandRewriteFilterFormulasForTectonicShiftArchive::default_instance_ = NULL;

CommandRewriteFilterFormulasForTectonicShiftArchive* CommandRewriteFilterFormulasForTectonicShiftArchive::New() const {
  return new CommandRewriteFilterFormulasForTectonicShiftArchive;
}

void CommandRewriteFilterFormulasForTectonicShiftArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_filter_set()) {
      if (filter_set_ != NULL) filter_set_->::TSP::Reference::Clear();
    }
    if (has_tectonic_shift()) {
      if (tectonic_shift_ != NULL) tectonic_shift_->::TSCE::TectonicShiftArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandRewriteFilterFormulasForTectonicShiftArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_filter_set;
        break;
      }

      // required .TSP.Reference filter_set = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tectonic_shift;
        break;
      }

      // required .TSCE.TectonicShiftArchive tectonic_shift = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tectonic_shift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tectonic_shift()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandRewriteFilterFormulasForTectonicShiftArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference filter_set = 2;
  if (has_filter_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->filter_set(), output);
  }

  // required .TSCE.TectonicShiftArchive tectonic_shift = 3;
  if (has_tectonic_shift()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tectonic_shift(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandRewriteFilterFormulasForTectonicShiftArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference filter_set = 2;
  if (has_filter_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->filter_set(), target);
  }

  // required .TSCE.TectonicShiftArchive tectonic_shift = 3;
  if (has_tectonic_shift()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tectonic_shift(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandRewriteFilterFormulasForTectonicShiftArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference filter_set = 2;
    if (has_filter_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter_set());
    }

    // required .TSCE.TectonicShiftArchive tectonic_shift = 3;
    if (has_tectonic_shift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tectonic_shift());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandRewriteFilterFormulasForTectonicShiftArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandRewriteFilterFormulasForTectonicShiftArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandRewriteFilterFormulasForTectonicShiftArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandRewriteFilterFormulasForTectonicShiftArchive::MergeFrom(const CommandRewriteFilterFormulasForTectonicShiftArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_filter_set()) {
      mutable_filter_set()->::TSP::Reference::MergeFrom(from.filter_set());
    }
    if (from.has_tectonic_shift()) {
      mutable_tectonic_shift()->::TSCE::TectonicShiftArchive::MergeFrom(from.tectonic_shift());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandRewriteFilterFormulasForTectonicShiftArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandRewriteFilterFormulasForTectonicShiftArchive::CopyFrom(const CommandRewriteFilterFormulasForTectonicShiftArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteFilterFormulasForTectonicShiftArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_filter_set()) {
    if (!this->filter_set().IsInitialized()) return false;
  }
  if (has_tectonic_shift()) {
    if (!this->tectonic_shift().IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteFilterFormulasForTectonicShiftArchive::Swap(CommandRewriteFilterFormulasForTectonicShiftArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(filter_set_, other->filter_set_);
    std::swap(tectonic_shift_, other->tectonic_shift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandRewriteFilterFormulasForTectonicShiftArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandRewriteFilterFormulasForTectonicShiftArchive_descriptor_;
  metadata.reflection = CommandRewriteFilterFormulasForTectonicShiftArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandRewriteFilterFormulasForSortArchive::kSuperFieldNumber;
const int CommandRewriteFilterFormulasForSortArchive::kFilterSetFieldNumber;
const int CommandRewriteFilterFormulasForSortArchive::kSortMappingFieldNumber;
const int CommandRewriteFilterFormulasForSortArchive::kSortedTableIdFieldNumber;
#endif  // !_MSC_VER

CommandRewriteFilterFormulasForSortArchive::CommandRewriteFilterFormulasForSortArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandRewriteFilterFormulasForSortArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  filter_set_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  sort_mapping_ = const_cast< ::TSK::ShuffleMappingArchive*>(&::TSK::ShuffleMappingArchive::default_instance());
  sorted_table_id_ = const_cast< ::TSCE::CFUUIDArchive*>(&::TSCE::CFUUIDArchive::default_instance());
}

CommandRewriteFilterFormulasForSortArchive::CommandRewriteFilterFormulasForSortArchive(const CommandRewriteFilterFormulasForSortArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandRewriteFilterFormulasForSortArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  filter_set_ = NULL;
  sort_mapping_ = NULL;
  sorted_table_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandRewriteFilterFormulasForSortArchive::~CommandRewriteFilterFormulasForSortArchive() {
  SharedDtor();
}

void CommandRewriteFilterFormulasForSortArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete filter_set_;
    delete sort_mapping_;
    delete sorted_table_id_;
  }
}

void CommandRewriteFilterFormulasForSortArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandRewriteFilterFormulasForSortArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandRewriteFilterFormulasForSortArchive_descriptor_;
}

const CommandRewriteFilterFormulasForSortArchive& CommandRewriteFilterFormulasForSortArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandRewriteFilterFormulasForSortArchive* CommandRewriteFilterFormulasForSortArchive::default_instance_ = NULL;

CommandRewriteFilterFormulasForSortArchive* CommandRewriteFilterFormulasForSortArchive::New() const {
  return new CommandRewriteFilterFormulasForSortArchive;
}

void CommandRewriteFilterFormulasForSortArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_filter_set()) {
      if (filter_set_ != NULL) filter_set_->::TSP::Reference::Clear();
    }
    if (has_sort_mapping()) {
      if (sort_mapping_ != NULL) sort_mapping_->::TSK::ShuffleMappingArchive::Clear();
    }
    if (has_sorted_table_id()) {
      if (sorted_table_id_ != NULL) sorted_table_id_->::TSCE::CFUUIDArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandRewriteFilterFormulasForSortArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_filter_set;
        break;
      }

      // required .TSP.Reference filter_set = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sort_mapping;
        break;
      }

      // required .TSK.ShuffleMappingArchive sort_mapping = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sort_mapping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sort_mapping()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sorted_table_id;
        break;
      }

      // required .TSCE.CFUUIDArchive sorted_table_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sorted_table_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sorted_table_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandRewriteFilterFormulasForSortArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference filter_set = 2;
  if (has_filter_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->filter_set(), output);
  }

  // required .TSK.ShuffleMappingArchive sort_mapping = 3;
  if (has_sort_mapping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sort_mapping(), output);
  }

  // required .TSCE.CFUUIDArchive sorted_table_id = 4;
  if (has_sorted_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sorted_table_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandRewriteFilterFormulasForSortArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference filter_set = 2;
  if (has_filter_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->filter_set(), target);
  }

  // required .TSK.ShuffleMappingArchive sort_mapping = 3;
  if (has_sort_mapping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sort_mapping(), target);
  }

  // required .TSCE.CFUUIDArchive sorted_table_id = 4;
  if (has_sorted_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sorted_table_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandRewriteFilterFormulasForSortArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference filter_set = 2;
    if (has_filter_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter_set());
    }

    // required .TSK.ShuffleMappingArchive sort_mapping = 3;
    if (has_sort_mapping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sort_mapping());
    }

    // required .TSCE.CFUUIDArchive sorted_table_id = 4;
    if (has_sorted_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sorted_table_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandRewriteFilterFormulasForSortArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandRewriteFilterFormulasForSortArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandRewriteFilterFormulasForSortArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandRewriteFilterFormulasForSortArchive::MergeFrom(const CommandRewriteFilterFormulasForSortArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_filter_set()) {
      mutable_filter_set()->::TSP::Reference::MergeFrom(from.filter_set());
    }
    if (from.has_sort_mapping()) {
      mutable_sort_mapping()->::TSK::ShuffleMappingArchive::MergeFrom(from.sort_mapping());
    }
    if (from.has_sorted_table_id()) {
      mutable_sorted_table_id()->::TSCE::CFUUIDArchive::MergeFrom(from.sorted_table_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandRewriteFilterFormulasForSortArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandRewriteFilterFormulasForSortArchive::CopyFrom(const CommandRewriteFilterFormulasForSortArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteFilterFormulasForSortArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_filter_set()) {
    if (!this->filter_set().IsInitialized()) return false;
  }
  if (has_sort_mapping()) {
    if (!this->sort_mapping().IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteFilterFormulasForSortArchive::Swap(CommandRewriteFilterFormulasForSortArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(filter_set_, other->filter_set_);
    std::swap(sort_mapping_, other->sort_mapping_);
    std::swap(sorted_table_id_, other->sorted_table_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandRewriteFilterFormulasForSortArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandRewriteFilterFormulasForSortArchive_descriptor_;
  metadata.reflection = CommandRewriteFilterFormulasForSortArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandRewriteConditionalStylesForTectonicShiftArchive::kSuperFieldNumber;
const int CommandRewriteConditionalStylesForTectonicShiftArchive::kTectonicShiftFieldNumber;
const int CommandRewriteConditionalStylesForTectonicShiftArchive::kCellsToRewriteFieldNumber;
const int CommandRewriteConditionalStylesForTectonicShiftArchive::kConditionalStyleSetsFieldNumber;
#endif  // !_MSC_VER

CommandRewriteConditionalStylesForTectonicShiftArchive::CommandRewriteConditionalStylesForTectonicShiftArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandRewriteConditionalStylesForTectonicShiftArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  tectonic_shift_ = const_cast< ::TSCE::TectonicShiftArchive*>(&::TSCE::TectonicShiftArchive::default_instance());
  cells_to_rewrite_ = const_cast< ::TSCE::CellCoordinateVectorArchive*>(&::TSCE::CellCoordinateVectorArchive::default_instance());
  conditional_style_sets_ = const_cast< ::TSCE::CellCoordinateObjectMapArchive*>(&::TSCE::CellCoordinateObjectMapArchive::default_instance());
}

CommandRewriteConditionalStylesForTectonicShiftArchive::CommandRewriteConditionalStylesForTectonicShiftArchive(const CommandRewriteConditionalStylesForTectonicShiftArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandRewriteConditionalStylesForTectonicShiftArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  tectonic_shift_ = NULL;
  cells_to_rewrite_ = NULL;
  conditional_style_sets_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandRewriteConditionalStylesForTectonicShiftArchive::~CommandRewriteConditionalStylesForTectonicShiftArchive() {
  SharedDtor();
}

void CommandRewriteConditionalStylesForTectonicShiftArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete tectonic_shift_;
    delete cells_to_rewrite_;
    delete conditional_style_sets_;
  }
}

void CommandRewriteConditionalStylesForTectonicShiftArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandRewriteConditionalStylesForTectonicShiftArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandRewriteConditionalStylesForTectonicShiftArchive_descriptor_;
}

const CommandRewriteConditionalStylesForTectonicShiftArchive& CommandRewriteConditionalStylesForTectonicShiftArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandRewriteConditionalStylesForTectonicShiftArchive* CommandRewriteConditionalStylesForTectonicShiftArchive::default_instance_ = NULL;

CommandRewriteConditionalStylesForTectonicShiftArchive* CommandRewriteConditionalStylesForTectonicShiftArchive::New() const {
  return new CommandRewriteConditionalStylesForTectonicShiftArchive;
}

void CommandRewriteConditionalStylesForTectonicShiftArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_tectonic_shift()) {
      if (tectonic_shift_ != NULL) tectonic_shift_->::TSCE::TectonicShiftArchive::Clear();
    }
    if (has_cells_to_rewrite()) {
      if (cells_to_rewrite_ != NULL) cells_to_rewrite_->::TSCE::CellCoordinateVectorArchive::Clear();
    }
    if (has_conditional_style_sets()) {
      if (conditional_style_sets_ != NULL) conditional_style_sets_->::TSCE::CellCoordinateObjectMapArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandRewriteConditionalStylesForTectonicShiftArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tectonic_shift;
        break;
      }

      // required .TSCE.TectonicShiftArchive tectonic_shift = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tectonic_shift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tectonic_shift()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cells_to_rewrite;
        break;
      }

      // optional .TSCE.CellCoordinateVectorArchive cells_to_rewrite = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cells_to_rewrite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cells_to_rewrite()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_conditional_style_sets;
        break;
      }

      // optional .TSCE.CellCoordinateObjectMapArchive conditional_style_sets = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conditional_style_sets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conditional_style_sets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandRewriteConditionalStylesForTectonicShiftArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSCE.TectonicShiftArchive tectonic_shift = 2;
  if (has_tectonic_shift()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tectonic_shift(), output);
  }

  // optional .TSCE.CellCoordinateVectorArchive cells_to_rewrite = 3;
  if (has_cells_to_rewrite()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cells_to_rewrite(), output);
  }

  // optional .TSCE.CellCoordinateObjectMapArchive conditional_style_sets = 4;
  if (has_conditional_style_sets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->conditional_style_sets(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandRewriteConditionalStylesForTectonicShiftArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSCE.TectonicShiftArchive tectonic_shift = 2;
  if (has_tectonic_shift()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tectonic_shift(), target);
  }

  // optional .TSCE.CellCoordinateVectorArchive cells_to_rewrite = 3;
  if (has_cells_to_rewrite()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cells_to_rewrite(), target);
  }

  // optional .TSCE.CellCoordinateObjectMapArchive conditional_style_sets = 4;
  if (has_conditional_style_sets()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->conditional_style_sets(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandRewriteConditionalStylesForTectonicShiftArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSCE.TectonicShiftArchive tectonic_shift = 2;
    if (has_tectonic_shift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tectonic_shift());
    }

    // optional .TSCE.CellCoordinateVectorArchive cells_to_rewrite = 3;
    if (has_cells_to_rewrite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cells_to_rewrite());
    }

    // optional .TSCE.CellCoordinateObjectMapArchive conditional_style_sets = 4;
    if (has_conditional_style_sets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->conditional_style_sets());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandRewriteConditionalStylesForTectonicShiftArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandRewriteConditionalStylesForTectonicShiftArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandRewriteConditionalStylesForTectonicShiftArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandRewriteConditionalStylesForTectonicShiftArchive::MergeFrom(const CommandRewriteConditionalStylesForTectonicShiftArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_tectonic_shift()) {
      mutable_tectonic_shift()->::TSCE::TectonicShiftArchive::MergeFrom(from.tectonic_shift());
    }
    if (from.has_cells_to_rewrite()) {
      mutable_cells_to_rewrite()->::TSCE::CellCoordinateVectorArchive::MergeFrom(from.cells_to_rewrite());
    }
    if (from.has_conditional_style_sets()) {
      mutable_conditional_style_sets()->::TSCE::CellCoordinateObjectMapArchive::MergeFrom(from.conditional_style_sets());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandRewriteConditionalStylesForTectonicShiftArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandRewriteConditionalStylesForTectonicShiftArchive::CopyFrom(const CommandRewriteConditionalStylesForTectonicShiftArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteConditionalStylesForTectonicShiftArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_tectonic_shift()) {
    if (!this->tectonic_shift().IsInitialized()) return false;
  }
  if (has_conditional_style_sets()) {
    if (!this->conditional_style_sets().IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteConditionalStylesForTectonicShiftArchive::Swap(CommandRewriteConditionalStylesForTectonicShiftArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(tectonic_shift_, other->tectonic_shift_);
    std::swap(cells_to_rewrite_, other->cells_to_rewrite_);
    std::swap(conditional_style_sets_, other->conditional_style_sets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandRewriteConditionalStylesForTectonicShiftArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandRewriteConditionalStylesForTectonicShiftArchive_descriptor_;
  metadata.reflection = CommandRewriteConditionalStylesForTectonicShiftArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandRewriteConditionalStylesForSortArchive::kSuperFieldNumber;
const int CommandRewriteConditionalStylesForSortArchive::kSortMappingFieldNumber;
const int CommandRewriteConditionalStylesForSortArchive::kSortedTableIdFieldNumber;
const int CommandRewriteConditionalStylesForSortArchive::kCellsToRewriteFieldNumber;
const int CommandRewriteConditionalStylesForSortArchive::kConditionalStyleSetsFieldNumber;
#endif  // !_MSC_VER

CommandRewriteConditionalStylesForSortArchive::CommandRewriteConditionalStylesForSortArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandRewriteConditionalStylesForSortArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  sort_mapping_ = const_cast< ::TSK::ShuffleMappingArchive*>(&::TSK::ShuffleMappingArchive::default_instance());
  sorted_table_id_ = const_cast< ::TSCE::CFUUIDArchive*>(&::TSCE::CFUUIDArchive::default_instance());
  cells_to_rewrite_ = const_cast< ::TSCE::CellCoordinateVectorArchive*>(&::TSCE::CellCoordinateVectorArchive::default_instance());
  conditional_style_sets_ = const_cast< ::TSCE::CellCoordinateObjectMapArchive*>(&::TSCE::CellCoordinateObjectMapArchive::default_instance());
}

CommandRewriteConditionalStylesForSortArchive::CommandRewriteConditionalStylesForSortArchive(const CommandRewriteConditionalStylesForSortArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandRewriteConditionalStylesForSortArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  sort_mapping_ = NULL;
  sorted_table_id_ = NULL;
  cells_to_rewrite_ = NULL;
  conditional_style_sets_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandRewriteConditionalStylesForSortArchive::~CommandRewriteConditionalStylesForSortArchive() {
  SharedDtor();
}

void CommandRewriteConditionalStylesForSortArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete sort_mapping_;
    delete sorted_table_id_;
    delete cells_to_rewrite_;
    delete conditional_style_sets_;
  }
}

void CommandRewriteConditionalStylesForSortArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandRewriteConditionalStylesForSortArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandRewriteConditionalStylesForSortArchive_descriptor_;
}

const CommandRewriteConditionalStylesForSortArchive& CommandRewriteConditionalStylesForSortArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandRewriteConditionalStylesForSortArchive* CommandRewriteConditionalStylesForSortArchive::default_instance_ = NULL;

CommandRewriteConditionalStylesForSortArchive* CommandRewriteConditionalStylesForSortArchive::New() const {
  return new CommandRewriteConditionalStylesForSortArchive;
}

void CommandRewriteConditionalStylesForSortArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_sort_mapping()) {
      if (sort_mapping_ != NULL) sort_mapping_->::TSK::ShuffleMappingArchive::Clear();
    }
    if (has_sorted_table_id()) {
      if (sorted_table_id_ != NULL) sorted_table_id_->::TSCE::CFUUIDArchive::Clear();
    }
    if (has_cells_to_rewrite()) {
      if (cells_to_rewrite_ != NULL) cells_to_rewrite_->::TSCE::CellCoordinateVectorArchive::Clear();
    }
    if (has_conditional_style_sets()) {
      if (conditional_style_sets_ != NULL) conditional_style_sets_->::TSCE::CellCoordinateObjectMapArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandRewriteConditionalStylesForSortArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sort_mapping;
        break;
      }

      // required .TSK.ShuffleMappingArchive sort_mapping = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sort_mapping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sort_mapping()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sorted_table_id;
        break;
      }

      // required .TSCE.CFUUIDArchive sorted_table_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sorted_table_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sorted_table_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cells_to_rewrite;
        break;
      }

      // optional .TSCE.CellCoordinateVectorArchive cells_to_rewrite = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cells_to_rewrite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cells_to_rewrite()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_conditional_style_sets;
        break;
      }

      // optional .TSCE.CellCoordinateObjectMapArchive conditional_style_sets = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conditional_style_sets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conditional_style_sets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandRewriteConditionalStylesForSortArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSK.ShuffleMappingArchive sort_mapping = 2;
  if (has_sort_mapping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sort_mapping(), output);
  }

  // required .TSCE.CFUUIDArchive sorted_table_id = 3;
  if (has_sorted_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sorted_table_id(), output);
  }

  // optional .TSCE.CellCoordinateVectorArchive cells_to_rewrite = 4;
  if (has_cells_to_rewrite()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cells_to_rewrite(), output);
  }

  // optional .TSCE.CellCoordinateObjectMapArchive conditional_style_sets = 5;
  if (has_conditional_style_sets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->conditional_style_sets(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandRewriteConditionalStylesForSortArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSK.ShuffleMappingArchive sort_mapping = 2;
  if (has_sort_mapping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sort_mapping(), target);
  }

  // required .TSCE.CFUUIDArchive sorted_table_id = 3;
  if (has_sorted_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sorted_table_id(), target);
  }

  // optional .TSCE.CellCoordinateVectorArchive cells_to_rewrite = 4;
  if (has_cells_to_rewrite()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cells_to_rewrite(), target);
  }

  // optional .TSCE.CellCoordinateObjectMapArchive conditional_style_sets = 5;
  if (has_conditional_style_sets()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->conditional_style_sets(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandRewriteConditionalStylesForSortArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSK.ShuffleMappingArchive sort_mapping = 2;
    if (has_sort_mapping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sort_mapping());
    }

    // required .TSCE.CFUUIDArchive sorted_table_id = 3;
    if (has_sorted_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sorted_table_id());
    }

    // optional .TSCE.CellCoordinateVectorArchive cells_to_rewrite = 4;
    if (has_cells_to_rewrite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cells_to_rewrite());
    }

    // optional .TSCE.CellCoordinateObjectMapArchive conditional_style_sets = 5;
    if (has_conditional_style_sets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->conditional_style_sets());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandRewriteConditionalStylesForSortArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandRewriteConditionalStylesForSortArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandRewriteConditionalStylesForSortArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandRewriteConditionalStylesForSortArchive::MergeFrom(const CommandRewriteConditionalStylesForSortArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_sort_mapping()) {
      mutable_sort_mapping()->::TSK::ShuffleMappingArchive::MergeFrom(from.sort_mapping());
    }
    if (from.has_sorted_table_id()) {
      mutable_sorted_table_id()->::TSCE::CFUUIDArchive::MergeFrom(from.sorted_table_id());
    }
    if (from.has_cells_to_rewrite()) {
      mutable_cells_to_rewrite()->::TSCE::CellCoordinateVectorArchive::MergeFrom(from.cells_to_rewrite());
    }
    if (from.has_conditional_style_sets()) {
      mutable_conditional_style_sets()->::TSCE::CellCoordinateObjectMapArchive::MergeFrom(from.conditional_style_sets());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandRewriteConditionalStylesForSortArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandRewriteConditionalStylesForSortArchive::CopyFrom(const CommandRewriteConditionalStylesForSortArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteConditionalStylesForSortArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_sort_mapping()) {
    if (!this->sort_mapping().IsInitialized()) return false;
  }
  if (has_conditional_style_sets()) {
    if (!this->conditional_style_sets().IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteConditionalStylesForSortArchive::Swap(CommandRewriteConditionalStylesForSortArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(sort_mapping_, other->sort_mapping_);
    std::swap(sorted_table_id_, other->sorted_table_id_);
    std::swap(cells_to_rewrite_, other->cells_to_rewrite_);
    std::swap(conditional_style_sets_, other->conditional_style_sets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandRewriteConditionalStylesForSortArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandRewriteConditionalStylesForSortArchive_descriptor_;
  metadata.reflection = CommandRewriteConditionalStylesForSortArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandRewriteConditionalStylesForRangeMoveArchive::kSuperFieldNumber;
const int CommandRewriteConditionalStylesForRangeMoveArchive::kFromRangeReferenceFieldNumber;
const int CommandRewriteConditionalStylesForRangeMoveArchive::kToRangeReferenceFieldNumber;
const int CommandRewriteConditionalStylesForRangeMoveArchive::kCellsToRewriteFieldNumber;
const int CommandRewriteConditionalStylesForRangeMoveArchive::kConditionalStyleSetsFieldNumber;
#endif  // !_MSC_VER

CommandRewriteConditionalStylesForRangeMoveArchive::CommandRewriteConditionalStylesForRangeMoveArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandRewriteConditionalStylesForRangeMoveArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  from_range_reference_ = const_cast< ::TSCE::RangeReferenceArchive*>(&::TSCE::RangeReferenceArchive::default_instance());
  to_range_reference_ = const_cast< ::TSCE::RangeReferenceArchive*>(&::TSCE::RangeReferenceArchive::default_instance());
  cells_to_rewrite_ = const_cast< ::TSCE::CellCoordinateVectorArchive*>(&::TSCE::CellCoordinateVectorArchive::default_instance());
  conditional_style_sets_ = const_cast< ::TSCE::CellCoordinateObjectMapArchive*>(&::TSCE::CellCoordinateObjectMapArchive::default_instance());
}

CommandRewriteConditionalStylesForRangeMoveArchive::CommandRewriteConditionalStylesForRangeMoveArchive(const CommandRewriteConditionalStylesForRangeMoveArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandRewriteConditionalStylesForRangeMoveArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  from_range_reference_ = NULL;
  to_range_reference_ = NULL;
  cells_to_rewrite_ = NULL;
  conditional_style_sets_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandRewriteConditionalStylesForRangeMoveArchive::~CommandRewriteConditionalStylesForRangeMoveArchive() {
  SharedDtor();
}

void CommandRewriteConditionalStylesForRangeMoveArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete from_range_reference_;
    delete to_range_reference_;
    delete cells_to_rewrite_;
    delete conditional_style_sets_;
  }
}

void CommandRewriteConditionalStylesForRangeMoveArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandRewriteConditionalStylesForRangeMoveArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandRewriteConditionalStylesForRangeMoveArchive_descriptor_;
}

const CommandRewriteConditionalStylesForRangeMoveArchive& CommandRewriteConditionalStylesForRangeMoveArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandRewriteConditionalStylesForRangeMoveArchive* CommandRewriteConditionalStylesForRangeMoveArchive::default_instance_ = NULL;

CommandRewriteConditionalStylesForRangeMoveArchive* CommandRewriteConditionalStylesForRangeMoveArchive::New() const {
  return new CommandRewriteConditionalStylesForRangeMoveArchive;
}

void CommandRewriteConditionalStylesForRangeMoveArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_from_range_reference()) {
      if (from_range_reference_ != NULL) from_range_reference_->::TSCE::RangeReferenceArchive::Clear();
    }
    if (has_to_range_reference()) {
      if (to_range_reference_ != NULL) to_range_reference_->::TSCE::RangeReferenceArchive::Clear();
    }
    if (has_cells_to_rewrite()) {
      if (cells_to_rewrite_ != NULL) cells_to_rewrite_->::TSCE::CellCoordinateVectorArchive::Clear();
    }
    if (has_conditional_style_sets()) {
      if (conditional_style_sets_ != NULL) conditional_style_sets_->::TSCE::CellCoordinateObjectMapArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandRewriteConditionalStylesForRangeMoveArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cells_to_rewrite;
        break;
      }

      // optional .TSCE.CellCoordinateVectorArchive cells_to_rewrite = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cells_to_rewrite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cells_to_rewrite()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_conditional_style_sets;
        break;
      }

      // optional .TSCE.CellCoordinateObjectMapArchive conditional_style_sets = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conditional_style_sets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conditional_style_sets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_from_range_reference;
        break;
      }

      // optional .TSCE.RangeReferenceArchive from_range_reference = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_range_reference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from_range_reference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_to_range_reference;
        break;
      }

      // optional .TSCE.RangeReferenceArchive to_range_reference = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_range_reference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_range_reference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandRewriteConditionalStylesForRangeMoveArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSCE.CellCoordinateVectorArchive cells_to_rewrite = 5;
  if (has_cells_to_rewrite()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cells_to_rewrite(), output);
  }

  // optional .TSCE.CellCoordinateObjectMapArchive conditional_style_sets = 6;
  if (has_conditional_style_sets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->conditional_style_sets(), output);
  }

  // optional .TSCE.RangeReferenceArchive from_range_reference = 7;
  if (has_from_range_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->from_range_reference(), output);
  }

  // optional .TSCE.RangeReferenceArchive to_range_reference = 8;
  if (has_to_range_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->to_range_reference(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandRewriteConditionalStylesForRangeMoveArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSCE.CellCoordinateVectorArchive cells_to_rewrite = 5;
  if (has_cells_to_rewrite()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cells_to_rewrite(), target);
  }

  // optional .TSCE.CellCoordinateObjectMapArchive conditional_style_sets = 6;
  if (has_conditional_style_sets()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->conditional_style_sets(), target);
  }

  // optional .TSCE.RangeReferenceArchive from_range_reference = 7;
  if (has_from_range_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->from_range_reference(), target);
  }

  // optional .TSCE.RangeReferenceArchive to_range_reference = 8;
  if (has_to_range_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->to_range_reference(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandRewriteConditionalStylesForRangeMoveArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSCE.RangeReferenceArchive from_range_reference = 7;
    if (has_from_range_reference()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->from_range_reference());
    }

    // optional .TSCE.RangeReferenceArchive to_range_reference = 8;
    if (has_to_range_reference()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->to_range_reference());
    }

    // optional .TSCE.CellCoordinateVectorArchive cells_to_rewrite = 5;
    if (has_cells_to_rewrite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cells_to_rewrite());
    }

    // optional .TSCE.CellCoordinateObjectMapArchive conditional_style_sets = 6;
    if (has_conditional_style_sets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->conditional_style_sets());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandRewriteConditionalStylesForRangeMoveArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandRewriteConditionalStylesForRangeMoveArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandRewriteConditionalStylesForRangeMoveArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandRewriteConditionalStylesForRangeMoveArchive::MergeFrom(const CommandRewriteConditionalStylesForRangeMoveArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_from_range_reference()) {
      mutable_from_range_reference()->::TSCE::RangeReferenceArchive::MergeFrom(from.from_range_reference());
    }
    if (from.has_to_range_reference()) {
      mutable_to_range_reference()->::TSCE::RangeReferenceArchive::MergeFrom(from.to_range_reference());
    }
    if (from.has_cells_to_rewrite()) {
      mutable_cells_to_rewrite()->::TSCE::CellCoordinateVectorArchive::MergeFrom(from.cells_to_rewrite());
    }
    if (from.has_conditional_style_sets()) {
      mutable_conditional_style_sets()->::TSCE::CellCoordinateObjectMapArchive::MergeFrom(from.conditional_style_sets());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandRewriteConditionalStylesForRangeMoveArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandRewriteConditionalStylesForRangeMoveArchive::CopyFrom(const CommandRewriteConditionalStylesForRangeMoveArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteConditionalStylesForRangeMoveArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_from_range_reference()) {
    if (!this->from_range_reference().IsInitialized()) return false;
  }
  if (has_to_range_reference()) {
    if (!this->to_range_reference().IsInitialized()) return false;
  }
  if (has_conditional_style_sets()) {
    if (!this->conditional_style_sets().IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteConditionalStylesForRangeMoveArchive::Swap(CommandRewriteConditionalStylesForRangeMoveArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(from_range_reference_, other->from_range_reference_);
    std::swap(to_range_reference_, other->to_range_reference_);
    std::swap(cells_to_rewrite_, other->cells_to_rewrite_);
    std::swap(conditional_style_sets_, other->conditional_style_sets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandRewriteConditionalStylesForRangeMoveArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandRewriteConditionalStylesForRangeMoveArchive_descriptor_;
  metadata.reflection = CommandRewriteConditionalStylesForRangeMoveArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandRewriteConditionalStylesForCellMergeArchive::kSuperFieldNumber;
const int CommandRewriteConditionalStylesForCellMergeArchive::kMergedTableIdFieldNumber;
const int CommandRewriteConditionalStylesForCellMergeArchive::kMergedRangeFieldNumber;
const int CommandRewriteConditionalStylesForCellMergeArchive::kCellsToRewriteFieldNumber;
const int CommandRewriteConditionalStylesForCellMergeArchive::kConditionalStyleSetsFieldNumber;
#endif  // !_MSC_VER

CommandRewriteConditionalStylesForCellMergeArchive::CommandRewriteConditionalStylesForCellMergeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandRewriteConditionalStylesForCellMergeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  merged_table_id_ = const_cast< ::TSCE::CFUUIDArchive*>(&::TSCE::CFUUIDArchive::default_instance());
  merged_range_ = const_cast< ::TSCE::RangeCoordinateArchive*>(&::TSCE::RangeCoordinateArchive::default_instance());
  cells_to_rewrite_ = const_cast< ::TSCE::CellCoordinateVectorArchive*>(&::TSCE::CellCoordinateVectorArchive::default_instance());
  conditional_style_sets_ = const_cast< ::TSCE::CellCoordinateObjectMapArchive*>(&::TSCE::CellCoordinateObjectMapArchive::default_instance());
}

CommandRewriteConditionalStylesForCellMergeArchive::CommandRewriteConditionalStylesForCellMergeArchive(const CommandRewriteConditionalStylesForCellMergeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandRewriteConditionalStylesForCellMergeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  merged_table_id_ = NULL;
  merged_range_ = NULL;
  cells_to_rewrite_ = NULL;
  conditional_style_sets_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandRewriteConditionalStylesForCellMergeArchive::~CommandRewriteConditionalStylesForCellMergeArchive() {
  SharedDtor();
}

void CommandRewriteConditionalStylesForCellMergeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete merged_table_id_;
    delete merged_range_;
    delete cells_to_rewrite_;
    delete conditional_style_sets_;
  }
}

void CommandRewriteConditionalStylesForCellMergeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandRewriteConditionalStylesForCellMergeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandRewriteConditionalStylesForCellMergeArchive_descriptor_;
}

const CommandRewriteConditionalStylesForCellMergeArchive& CommandRewriteConditionalStylesForCellMergeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandRewriteConditionalStylesForCellMergeArchive* CommandRewriteConditionalStylesForCellMergeArchive::default_instance_ = NULL;

CommandRewriteConditionalStylesForCellMergeArchive* CommandRewriteConditionalStylesForCellMergeArchive::New() const {
  return new CommandRewriteConditionalStylesForCellMergeArchive;
}

void CommandRewriteConditionalStylesForCellMergeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_merged_table_id()) {
      if (merged_table_id_ != NULL) merged_table_id_->::TSCE::CFUUIDArchive::Clear();
    }
    if (has_merged_range()) {
      if (merged_range_ != NULL) merged_range_->::TSCE::RangeCoordinateArchive::Clear();
    }
    if (has_cells_to_rewrite()) {
      if (cells_to_rewrite_ != NULL) cells_to_rewrite_->::TSCE::CellCoordinateVectorArchive::Clear();
    }
    if (has_conditional_style_sets()) {
      if (conditional_style_sets_ != NULL) conditional_style_sets_->::TSCE::CellCoordinateObjectMapArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandRewriteConditionalStylesForCellMergeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_merged_table_id;
        break;
      }

      // required .TSCE.CFUUIDArchive merged_table_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_merged_table_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_merged_table_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_merged_range;
        break;
      }

      // required .TSCE.RangeCoordinateArchive merged_range = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_merged_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_merged_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cells_to_rewrite;
        break;
      }

      // optional .TSCE.CellCoordinateVectorArchive cells_to_rewrite = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cells_to_rewrite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cells_to_rewrite()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_conditional_style_sets;
        break;
      }

      // optional .TSCE.CellCoordinateObjectMapArchive conditional_style_sets = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conditional_style_sets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conditional_style_sets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandRewriteConditionalStylesForCellMergeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSCE.CFUUIDArchive merged_table_id = 2;
  if (has_merged_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->merged_table_id(), output);
  }

  // required .TSCE.RangeCoordinateArchive merged_range = 3;
  if (has_merged_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->merged_range(), output);
  }

  // optional .TSCE.CellCoordinateVectorArchive cells_to_rewrite = 4;
  if (has_cells_to_rewrite()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cells_to_rewrite(), output);
  }

  // optional .TSCE.CellCoordinateObjectMapArchive conditional_style_sets = 5;
  if (has_conditional_style_sets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->conditional_style_sets(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandRewriteConditionalStylesForCellMergeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSCE.CFUUIDArchive merged_table_id = 2;
  if (has_merged_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->merged_table_id(), target);
  }

  // required .TSCE.RangeCoordinateArchive merged_range = 3;
  if (has_merged_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->merged_range(), target);
  }

  // optional .TSCE.CellCoordinateVectorArchive cells_to_rewrite = 4;
  if (has_cells_to_rewrite()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cells_to_rewrite(), target);
  }

  // optional .TSCE.CellCoordinateObjectMapArchive conditional_style_sets = 5;
  if (has_conditional_style_sets()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->conditional_style_sets(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandRewriteConditionalStylesForCellMergeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSCE.CFUUIDArchive merged_table_id = 2;
    if (has_merged_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->merged_table_id());
    }

    // required .TSCE.RangeCoordinateArchive merged_range = 3;
    if (has_merged_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->merged_range());
    }

    // optional .TSCE.CellCoordinateVectorArchive cells_to_rewrite = 4;
    if (has_cells_to_rewrite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cells_to_rewrite());
    }

    // optional .TSCE.CellCoordinateObjectMapArchive conditional_style_sets = 5;
    if (has_conditional_style_sets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->conditional_style_sets());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandRewriteConditionalStylesForCellMergeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandRewriteConditionalStylesForCellMergeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandRewriteConditionalStylesForCellMergeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandRewriteConditionalStylesForCellMergeArchive::MergeFrom(const CommandRewriteConditionalStylesForCellMergeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_merged_table_id()) {
      mutable_merged_table_id()->::TSCE::CFUUIDArchive::MergeFrom(from.merged_table_id());
    }
    if (from.has_merged_range()) {
      mutable_merged_range()->::TSCE::RangeCoordinateArchive::MergeFrom(from.merged_range());
    }
    if (from.has_cells_to_rewrite()) {
      mutable_cells_to_rewrite()->::TSCE::CellCoordinateVectorArchive::MergeFrom(from.cells_to_rewrite());
    }
    if (from.has_conditional_style_sets()) {
      mutable_conditional_style_sets()->::TSCE::CellCoordinateObjectMapArchive::MergeFrom(from.conditional_style_sets());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandRewriteConditionalStylesForCellMergeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandRewriteConditionalStylesForCellMergeArchive::CopyFrom(const CommandRewriteConditionalStylesForCellMergeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteConditionalStylesForCellMergeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_merged_range()) {
    if (!this->merged_range().IsInitialized()) return false;
  }
  if (has_conditional_style_sets()) {
    if (!this->conditional_style_sets().IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteConditionalStylesForCellMergeArchive::Swap(CommandRewriteConditionalStylesForCellMergeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(merged_table_id_, other->merged_table_id_);
    std::swap(merged_range_, other->merged_range_);
    std::swap(cells_to_rewrite_, other->cells_to_rewrite_);
    std::swap(conditional_style_sets_, other->conditional_style_sets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandRewriteConditionalStylesForCellMergeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandRewriteConditionalStylesForCellMergeArchive_descriptor_;
  metadata.reflection = CommandRewriteConditionalStylesForCellMergeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandMergeUnmergeArchive::kSuperFieldNumber;
const int CommandMergeUnmergeArchive::kMergeActionFieldNumber;
const int CommandMergeUnmergeArchive::kSelectionFieldNumber;
const int CommandMergeUnmergeArchive::kUndoCellMapFieldNumber;
const int CommandMergeUnmergeArchive::kRedoCellMapFieldNumber;
const int CommandMergeUnmergeArchive::kOldMergeRangesFieldNumber;
const int CommandMergeUnmergeArchive::kUndoFormulaRewriteCommandFieldNumber;
#endif  // !_MSC_VER

CommandMergeUnmergeArchive::CommandMergeUnmergeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandMergeUnmergeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  selection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
  undo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  redo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  old_merge_ranges_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  undo_formula_rewrite_command_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandMergeUnmergeArchive::CommandMergeUnmergeArchive(const CommandMergeUnmergeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandMergeUnmergeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  merge_action_ = 0;
  selection_ = NULL;
  undo_cell_map_ = NULL;
  redo_cell_map_ = NULL;
  old_merge_ranges_ = NULL;
  undo_formula_rewrite_command_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandMergeUnmergeArchive::~CommandMergeUnmergeArchive() {
  SharedDtor();
}

void CommandMergeUnmergeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete selection_;
    delete undo_cell_map_;
    delete redo_cell_map_;
    delete old_merge_ranges_;
    delete undo_formula_rewrite_command_;
  }
}

void CommandMergeUnmergeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandMergeUnmergeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandMergeUnmergeArchive_descriptor_;
}

const CommandMergeUnmergeArchive& CommandMergeUnmergeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandMergeUnmergeArchive* CommandMergeUnmergeArchive::default_instance_ = NULL;

CommandMergeUnmergeArchive* CommandMergeUnmergeArchive::New() const {
  return new CommandMergeUnmergeArchive;
}

void CommandMergeUnmergeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    merge_action_ = 0;
    if (has_selection()) {
      if (selection_ != NULL) selection_->::TST::SelectionArchive::Clear();
    }
    if (has_undo_cell_map()) {
      if (undo_cell_map_ != NULL) undo_cell_map_->::TST::CellMapArchive::Clear();
    }
    if (has_redo_cell_map()) {
      if (redo_cell_map_ != NULL) redo_cell_map_->::TST::CellMapArchive::Clear();
    }
    if (has_old_merge_ranges()) {
      if (old_merge_ranges_ != NULL) old_merge_ranges_->::TSP::Reference::Clear();
    }
    if (has_undo_formula_rewrite_command()) {
      if (undo_formula_rewrite_command_ != NULL) undo_formula_rewrite_command_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandMergeUnmergeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_merge_action;
        break;
      }

      // required .TST.MergeActionArchive merge_action = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_merge_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TST::MergeActionArchive_IsValid(value)) {
            set_merge_action(static_cast< ::TST::MergeActionArchive >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_selection;
        break;
      }

      // required .TST.SelectionArchive selection = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_undo_cell_map;
        break;
      }

      // required .TST.CellMapArchive undo_cell_map = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_redo_cell_map;
        break;
      }

      // required .TST.CellMapArchive redo_cell_map = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_old_merge_ranges;
        break;
      }

      // optional .TSP.Reference old_merge_ranges = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_merge_ranges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_merge_ranges()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_undo_formula_rewrite_command;
        break;
      }

      // optional .TSP.Reference undo_formula_rewrite_command = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_formula_rewrite_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_formula_rewrite_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandMergeUnmergeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TST.MergeActionArchive merge_action = 2;
  if (has_merge_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->merge_action(), output);
  }

  // required .TST.SelectionArchive selection = 3;
  if (has_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->selection(), output);
  }

  // required .TST.CellMapArchive undo_cell_map = 4;
  if (has_undo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->undo_cell_map(), output);
  }

  // required .TST.CellMapArchive redo_cell_map = 5;
  if (has_redo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->redo_cell_map(), output);
  }

  // optional .TSP.Reference old_merge_ranges = 8;
  if (has_old_merge_ranges()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->old_merge_ranges(), output);
  }

  // optional .TSP.Reference undo_formula_rewrite_command = 9;
  if (has_undo_formula_rewrite_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->undo_formula_rewrite_command(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandMergeUnmergeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TST.MergeActionArchive merge_action = 2;
  if (has_merge_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->merge_action(), target);
  }

  // required .TST.SelectionArchive selection = 3;
  if (has_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->selection(), target);
  }

  // required .TST.CellMapArchive undo_cell_map = 4;
  if (has_undo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->undo_cell_map(), target);
  }

  // required .TST.CellMapArchive redo_cell_map = 5;
  if (has_redo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->redo_cell_map(), target);
  }

  // optional .TSP.Reference old_merge_ranges = 8;
  if (has_old_merge_ranges()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->old_merge_ranges(), target);
  }

  // optional .TSP.Reference undo_formula_rewrite_command = 9;
  if (has_undo_formula_rewrite_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->undo_formula_rewrite_command(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandMergeUnmergeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TST.MergeActionArchive merge_action = 2;
    if (has_merge_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->merge_action());
    }

    // required .TST.SelectionArchive selection = 3;
    if (has_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selection());
    }

    // required .TST.CellMapArchive undo_cell_map = 4;
    if (has_undo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_cell_map());
    }

    // required .TST.CellMapArchive redo_cell_map = 5;
    if (has_redo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_cell_map());
    }

    // optional .TSP.Reference old_merge_ranges = 8;
    if (has_old_merge_ranges()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_merge_ranges());
    }

    // optional .TSP.Reference undo_formula_rewrite_command = 9;
    if (has_undo_formula_rewrite_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_formula_rewrite_command());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandMergeUnmergeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandMergeUnmergeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandMergeUnmergeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandMergeUnmergeArchive::MergeFrom(const CommandMergeUnmergeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_merge_action()) {
      set_merge_action(from.merge_action());
    }
    if (from.has_selection()) {
      mutable_selection()->::TST::SelectionArchive::MergeFrom(from.selection());
    }
    if (from.has_undo_cell_map()) {
      mutable_undo_cell_map()->::TST::CellMapArchive::MergeFrom(from.undo_cell_map());
    }
    if (from.has_redo_cell_map()) {
      mutable_redo_cell_map()->::TST::CellMapArchive::MergeFrom(from.redo_cell_map());
    }
    if (from.has_old_merge_ranges()) {
      mutable_old_merge_ranges()->::TSP::Reference::MergeFrom(from.old_merge_ranges());
    }
    if (from.has_undo_formula_rewrite_command()) {
      mutable_undo_formula_rewrite_command()->::TSP::Reference::MergeFrom(from.undo_formula_rewrite_command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandMergeUnmergeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandMergeUnmergeArchive::CopyFrom(const CommandMergeUnmergeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMergeUnmergeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_selection()) {
    if (!this->selection().IsInitialized()) return false;
  }
  if (has_undo_cell_map()) {
    if (!this->undo_cell_map().IsInitialized()) return false;
  }
  if (has_redo_cell_map()) {
    if (!this->redo_cell_map().IsInitialized()) return false;
  }
  if (has_old_merge_ranges()) {
    if (!this->old_merge_ranges().IsInitialized()) return false;
  }
  if (has_undo_formula_rewrite_command()) {
    if (!this->undo_formula_rewrite_command().IsInitialized()) return false;
  }
  return true;
}

void CommandMergeUnmergeArchive::Swap(CommandMergeUnmergeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(merge_action_, other->merge_action_);
    std::swap(selection_, other->selection_);
    std::swap(undo_cell_map_, other->undo_cell_map_);
    std::swap(redo_cell_map_, other->redo_cell_map_);
    std::swap(old_merge_ranges_, other->old_merge_ranges_);
    std::swap(undo_formula_rewrite_command_, other->undo_formula_rewrite_command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandMergeUnmergeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandMergeUnmergeArchive_descriptor_;
  metadata.reflection = CommandMergeUnmergeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandHideShowArchive::kSuperFieldNumber;
const int CommandHideShowArchive::kDirectionFieldNumber;
const int CommandHideShowArchive::kHideShowActionFieldNumber;
const int CommandHideShowArchive::kHidingActionFieldNumber;
const int CommandHideShowArchive::kElementsAffectedFieldNumber;
const int CommandHideShowArchive::kOldHidingStatesFieldNumber;
#endif  // !_MSC_VER

CommandHideShowArchive::CommandHideShowArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandHideShowArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  elements_affected_ = const_cast< ::TSP::IndexSet*>(&::TSP::IndexSet::default_instance());
}

CommandHideShowArchive::CommandHideShowArchive(const CommandHideShowArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandHideShowArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  direction_ = 0;
  hide_show_action_ = 0;
  hiding_action_ = 0u;
  elements_affected_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandHideShowArchive::~CommandHideShowArchive() {
  SharedDtor();
}

void CommandHideShowArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete elements_affected_;
  }
}

void CommandHideShowArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandHideShowArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandHideShowArchive_descriptor_;
}

const CommandHideShowArchive& CommandHideShowArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandHideShowArchive* CommandHideShowArchive::default_instance_ = NULL;

CommandHideShowArchive* CommandHideShowArchive::New() const {
  return new CommandHideShowArchive;
}

void CommandHideShowArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    direction_ = 0;
    hide_show_action_ = 0;
    hiding_action_ = 0u;
    if (has_elements_affected()) {
      if (elements_affected_ != NULL) elements_affected_->::TSP::IndexSet::Clear();
    }
  }
  old_hiding_states_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandHideShowArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_direction;
        break;
      }

      // required .TST.CommandDirectionArchive direction = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TST::CommandDirectionArchive_IsValid(value)) {
            set_direction(static_cast< ::TST::CommandDirectionArchive >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hide_show_action;
        break;
      }

      // required .TST.HideShowActionArchive hide_show_action = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hide_show_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TST::HideShowActionArchive_IsValid(value)) {
            set_hide_show_action(static_cast< ::TST::HideShowActionArchive >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hiding_action;
        break;
      }

      // required uint32 hiding_action = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hiding_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hiding_action_)));
          set_has_hiding_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_elements_affected;
        break;
      }

      // required .TSP.IndexSet elements_affected = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elements_affected:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_elements_affected()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_old_hiding_states;
        break;
      }

      // repeated uint32 old_hiding_states = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_hiding_states:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_old_hiding_states())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_old_hiding_states())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_old_hiding_states;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandHideShowArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TST.CommandDirectionArchive direction = 2;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->direction(), output);
  }

  // required .TST.HideShowActionArchive hide_show_action = 3;
  if (has_hide_show_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->hide_show_action(), output);
  }

  // required uint32 hiding_action = 4;
  if (has_hiding_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hiding_action(), output);
  }

  // required .TSP.IndexSet elements_affected = 5;
  if (has_elements_affected()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->elements_affected(), output);
  }

  // repeated uint32 old_hiding_states = 7;
  for (int i = 0; i < this->old_hiding_states_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->old_hiding_states(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandHideShowArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TST.CommandDirectionArchive direction = 2;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->direction(), target);
  }

  // required .TST.HideShowActionArchive hide_show_action = 3;
  if (has_hide_show_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->hide_show_action(), target);
  }

  // required uint32 hiding_action = 4;
  if (has_hiding_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hiding_action(), target);
  }

  // required .TSP.IndexSet elements_affected = 5;
  if (has_elements_affected()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->elements_affected(), target);
  }

  // repeated uint32 old_hiding_states = 7;
  for (int i = 0; i < this->old_hiding_states_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->old_hiding_states(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandHideShowArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TST.CommandDirectionArchive direction = 2;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

    // required .TST.HideShowActionArchive hide_show_action = 3;
    if (has_hide_show_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->hide_show_action());
    }

    // required uint32 hiding_action = 4;
    if (has_hiding_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hiding_action());
    }

    // required .TSP.IndexSet elements_affected = 5;
    if (has_elements_affected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->elements_affected());
    }

  }
  // repeated uint32 old_hiding_states = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->old_hiding_states_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->old_hiding_states(i));
    }
    total_size += 1 * this->old_hiding_states_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandHideShowArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandHideShowArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandHideShowArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandHideShowArchive::MergeFrom(const CommandHideShowArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  old_hiding_states_.MergeFrom(from.old_hiding_states_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_hide_show_action()) {
      set_hide_show_action(from.hide_show_action());
    }
    if (from.has_hiding_action()) {
      set_hiding_action(from.hiding_action());
    }
    if (from.has_elements_affected()) {
      mutable_elements_affected()->::TSP::IndexSet::MergeFrom(from.elements_affected());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandHideShowArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandHideShowArchive::CopyFrom(const CommandHideShowArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandHideShowArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_elements_affected()) {
    if (!this->elements_affected().IsInitialized()) return false;
  }
  return true;
}

void CommandHideShowArchive::Swap(CommandHideShowArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(direction_, other->direction_);
    std::swap(hide_show_action_, other->hide_show_action_);
    std::swap(hiding_action_, other->hiding_action_);
    std::swap(elements_affected_, other->elements_affected_);
    old_hiding_states_.Swap(&other->old_hiding_states_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandHideShowArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandHideShowArchive_descriptor_;
  metadata.reflection = CommandHideShowArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableInfoGeometryCommandArchive::kSuperFieldNumber;
const int TableInfoGeometryCommandArchive::kScaleFactorFieldNumber;
const int TableInfoGeometryCommandArchive::kTableInfoFieldNumber;
const int TableInfoGeometryCommandArchive::kNewGeometryFieldNumber;
const int TableInfoGeometryCommandArchive::kOldGeometryFieldNumber;
const int TableInfoGeometryCommandArchive::kTurnOffAutoResizeFieldNumber;
const int TableInfoGeometryCommandArchive::kShouldClearObjectPlaceholderFlagFieldNumber;
const int TableInfoGeometryCommandArchive::kDidMatchObjectPlaceholderGeometryFieldNumber;
#endif  // !_MSC_VER

TableInfoGeometryCommandArchive::TableInfoGeometryCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableInfoGeometryCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  scale_factor_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
  table_info_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  new_geometry_ = const_cast< ::TSD::GeometryArchive*>(&::TSD::GeometryArchive::default_instance());
  old_geometry_ = const_cast< ::TSD::GeometryArchive*>(&::TSD::GeometryArchive::default_instance());
}

TableInfoGeometryCommandArchive::TableInfoGeometryCommandArchive(const TableInfoGeometryCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableInfoGeometryCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  scale_factor_ = NULL;
  table_info_ = NULL;
  new_geometry_ = NULL;
  old_geometry_ = NULL;
  turn_off_auto_resize_ = false;
  should_clear_object_placeholder_flag_ = false;
  did_match_object_placeholder_geometry_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableInfoGeometryCommandArchive::~TableInfoGeometryCommandArchive() {
  SharedDtor();
}

void TableInfoGeometryCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete scale_factor_;
    delete table_info_;
    delete new_geometry_;
    delete old_geometry_;
  }
}

void TableInfoGeometryCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableInfoGeometryCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableInfoGeometryCommandArchive_descriptor_;
}

const TableInfoGeometryCommandArchive& TableInfoGeometryCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

TableInfoGeometryCommandArchive* TableInfoGeometryCommandArchive::default_instance_ = NULL;

TableInfoGeometryCommandArchive* TableInfoGeometryCommandArchive::New() const {
  return new TableInfoGeometryCommandArchive;
}

void TableInfoGeometryCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_scale_factor()) {
      if (scale_factor_ != NULL) scale_factor_->::TSP::Size::Clear();
    }
    if (has_table_info()) {
      if (table_info_ != NULL) table_info_->::TSP::Reference::Clear();
    }
    if (has_new_geometry()) {
      if (new_geometry_ != NULL) new_geometry_->::TSD::GeometryArchive::Clear();
    }
    if (has_old_geometry()) {
      if (old_geometry_ != NULL) old_geometry_->::TSD::GeometryArchive::Clear();
    }
    turn_off_auto_resize_ = false;
    should_clear_object_placeholder_flag_ = false;
    did_match_object_placeholder_geometry_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableInfoGeometryCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scale_factor;
        break;
      }

      // required .TSP.Size scale_factor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scale_factor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale_factor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_table_info;
        break;
      }

      // optional .TSP.Reference table_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_new_geometry;
        break;
      }

      // optional .TSD.GeometryArchive new_geometry = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_geometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_geometry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_old_geometry;
        break;
      }

      // optional .TSD.GeometryArchive old_geometry = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_geometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_geometry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_turn_off_auto_resize;
        break;
      }

      // optional bool turn_off_auto_resize = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turn_off_auto_resize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &turn_off_auto_resize_)));
          set_has_turn_off_auto_resize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_should_clear_object_placeholder_flag;
        break;
      }

      // optional bool should_clear_object_placeholder_flag = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_should_clear_object_placeholder_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &should_clear_object_placeholder_flag_)));
          set_has_should_clear_object_placeholder_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_did_match_object_placeholder_geometry;
        break;
      }

      // optional bool did_match_object_placeholder_geometry = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_did_match_object_placeholder_geometry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &did_match_object_placeholder_geometry_)));
          set_has_did_match_object_placeholder_geometry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableInfoGeometryCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Size scale_factor = 2;
  if (has_scale_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->scale_factor(), output);
  }

  // optional .TSP.Reference table_info = 3;
  if (has_table_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->table_info(), output);
  }

  // optional .TSD.GeometryArchive new_geometry = 4;
  if (has_new_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->new_geometry(), output);
  }

  // optional .TSD.GeometryArchive old_geometry = 5;
  if (has_old_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->old_geometry(), output);
  }

  // optional bool turn_off_auto_resize = 6;
  if (has_turn_off_auto_resize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->turn_off_auto_resize(), output);
  }

  // optional bool should_clear_object_placeholder_flag = 7;
  if (has_should_clear_object_placeholder_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->should_clear_object_placeholder_flag(), output);
  }

  // optional bool did_match_object_placeholder_geometry = 8;
  if (has_did_match_object_placeholder_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->did_match_object_placeholder_geometry(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableInfoGeometryCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Size scale_factor = 2;
  if (has_scale_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->scale_factor(), target);
  }

  // optional .TSP.Reference table_info = 3;
  if (has_table_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->table_info(), target);
  }

  // optional .TSD.GeometryArchive new_geometry = 4;
  if (has_new_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->new_geometry(), target);
  }

  // optional .TSD.GeometryArchive old_geometry = 5;
  if (has_old_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->old_geometry(), target);
  }

  // optional bool turn_off_auto_resize = 6;
  if (has_turn_off_auto_resize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->turn_off_auto_resize(), target);
  }

  // optional bool should_clear_object_placeholder_flag = 7;
  if (has_should_clear_object_placeholder_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->should_clear_object_placeholder_flag(), target);
  }

  // optional bool did_match_object_placeholder_geometry = 8;
  if (has_did_match_object_placeholder_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->did_match_object_placeholder_geometry(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableInfoGeometryCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Size scale_factor = 2;
    if (has_scale_factor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale_factor());
    }

    // optional .TSP.Reference table_info = 3;
    if (has_table_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_info());
    }

    // optional .TSD.GeometryArchive new_geometry = 4;
    if (has_new_geometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_geometry());
    }

    // optional .TSD.GeometryArchive old_geometry = 5;
    if (has_old_geometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_geometry());
    }

    // optional bool turn_off_auto_resize = 6;
    if (has_turn_off_auto_resize()) {
      total_size += 1 + 1;
    }

    // optional bool should_clear_object_placeholder_flag = 7;
    if (has_should_clear_object_placeholder_flag()) {
      total_size += 1 + 1;
    }

    // optional bool did_match_object_placeholder_geometry = 8;
    if (has_did_match_object_placeholder_geometry()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableInfoGeometryCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableInfoGeometryCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableInfoGeometryCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableInfoGeometryCommandArchive::MergeFrom(const TableInfoGeometryCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_scale_factor()) {
      mutable_scale_factor()->::TSP::Size::MergeFrom(from.scale_factor());
    }
    if (from.has_table_info()) {
      mutable_table_info()->::TSP::Reference::MergeFrom(from.table_info());
    }
    if (from.has_new_geometry()) {
      mutable_new_geometry()->::TSD::GeometryArchive::MergeFrom(from.new_geometry());
    }
    if (from.has_old_geometry()) {
      mutable_old_geometry()->::TSD::GeometryArchive::MergeFrom(from.old_geometry());
    }
    if (from.has_turn_off_auto_resize()) {
      set_turn_off_auto_resize(from.turn_off_auto_resize());
    }
    if (from.has_should_clear_object_placeholder_flag()) {
      set_should_clear_object_placeholder_flag(from.should_clear_object_placeholder_flag());
    }
    if (from.has_did_match_object_placeholder_geometry()) {
      set_did_match_object_placeholder_geometry(from.did_match_object_placeholder_geometry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableInfoGeometryCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableInfoGeometryCommandArchive::CopyFrom(const TableInfoGeometryCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableInfoGeometryCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_scale_factor()) {
    if (!this->scale_factor().IsInitialized()) return false;
  }
  if (has_table_info()) {
    if (!this->table_info().IsInitialized()) return false;
  }
  if (has_new_geometry()) {
    if (!this->new_geometry().IsInitialized()) return false;
  }
  if (has_old_geometry()) {
    if (!this->old_geometry().IsInitialized()) return false;
  }
  return true;
}

void TableInfoGeometryCommandArchive::Swap(TableInfoGeometryCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(scale_factor_, other->scale_factor_);
    std::swap(table_info_, other->table_info_);
    std::swap(new_geometry_, other->new_geometry_);
    std::swap(old_geometry_, other->old_geometry_);
    std::swap(turn_off_auto_resize_, other->turn_off_auto_resize_);
    std::swap(should_clear_object_placeholder_flag_, other->should_clear_object_placeholder_flag_);
    std::swap(did_match_object_placeholder_geometry_, other->did_match_object_placeholder_geometry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableInfoGeometryCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableInfoGeometryCommandArchive_descriptor_;
  metadata.reflection = TableInfoGeometryCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FormulaEditingCommandGroupArchive::kSuperFieldNumber;
const int FormulaEditingCommandGroupArchive::kUndoSelectionValidFieldNumber;
const int FormulaEditingCommandGroupArchive::kUndoSelectionStartFieldNumber;
const int FormulaEditingCommandGroupArchive::kUndoSelectionLengthFieldNumber;
const int FormulaEditingCommandGroupArchive::kUndoActiveTokenFieldNumber;
const int FormulaEditingCommandGroupArchive::kRedoSelectionValidFieldNumber;
const int FormulaEditingCommandGroupArchive::kRedoSelectionStartFieldNumber;
const int FormulaEditingCommandGroupArchive::kRedoSelectionLengthFieldNumber;
const int FormulaEditingCommandGroupArchive::kRedoActiveTokenFieldNumber;
#endif  // !_MSC_VER

FormulaEditingCommandGroupArchive::FormulaEditingCommandGroupArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FormulaEditingCommandGroupArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::ProgressiveCommandGroupArchive*>(&::TSK::ProgressiveCommandGroupArchive::default_instance());
}

FormulaEditingCommandGroupArchive::FormulaEditingCommandGroupArchive(const FormulaEditingCommandGroupArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FormulaEditingCommandGroupArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  undoselectionvalid_ = false;
  undoselectionstart_ = 0u;
  undoselectionlength_ = 0u;
  undoactivetoken_ = 0u;
  redoselectionvalid_ = false;
  redoselectionstart_ = 0u;
  redoselectionlength_ = 0u;
  redoactivetoken_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FormulaEditingCommandGroupArchive::~FormulaEditingCommandGroupArchive() {
  SharedDtor();
}

void FormulaEditingCommandGroupArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void FormulaEditingCommandGroupArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FormulaEditingCommandGroupArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FormulaEditingCommandGroupArchive_descriptor_;
}

const FormulaEditingCommandGroupArchive& FormulaEditingCommandGroupArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

FormulaEditingCommandGroupArchive* FormulaEditingCommandGroupArchive::default_instance_ = NULL;

FormulaEditingCommandGroupArchive* FormulaEditingCommandGroupArchive::New() const {
  return new FormulaEditingCommandGroupArchive;
}

void FormulaEditingCommandGroupArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::ProgressiveCommandGroupArchive::Clear();
    }
    undoselectionvalid_ = false;
    undoselectionstart_ = 0u;
    undoselectionlength_ = 0u;
    undoactivetoken_ = 0u;
    redoselectionvalid_ = false;
    redoselectionstart_ = 0u;
    redoselectionlength_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    redoactivetoken_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FormulaEditingCommandGroupArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.ProgressiveCommandGroupArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_undoSelectionValid;
        break;
      }

      // required bool undoSelectionValid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_undoSelectionValid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &undoselectionvalid_)));
          set_has_undoselectionvalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_undoSelectionStart;
        break;
      }

      // required uint32 undoSelectionStart = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_undoSelectionStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &undoselectionstart_)));
          set_has_undoselectionstart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_undoSelectionLength;
        break;
      }

      // required uint32 undoSelectionLength = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_undoSelectionLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &undoselectionlength_)));
          set_has_undoselectionlength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_undoActiveToken;
        break;
      }

      // required uint32 undoActiveToken = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_undoActiveToken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &undoactivetoken_)));
          set_has_undoactivetoken();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_redoSelectionValid;
        break;
      }

      // required bool redoSelectionValid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redoSelectionValid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &redoselectionvalid_)));
          set_has_redoselectionvalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_redoSelectionStart;
        break;
      }

      // required uint32 redoSelectionStart = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redoSelectionStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redoselectionstart_)));
          set_has_redoselectionstart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_redoSelectionLength;
        break;
      }

      // required uint32 redoSelectionLength = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redoSelectionLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redoselectionlength_)));
          set_has_redoselectionlength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_redoActiveToken;
        break;
      }

      // required uint32 redoActiveToken = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redoActiveToken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redoactivetoken_)));
          set_has_redoactivetoken();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FormulaEditingCommandGroupArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.ProgressiveCommandGroupArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required bool undoSelectionValid = 2;
  if (has_undoselectionvalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->undoselectionvalid(), output);
  }

  // required uint32 undoSelectionStart = 3;
  if (has_undoselectionstart()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->undoselectionstart(), output);
  }

  // required uint32 undoSelectionLength = 4;
  if (has_undoselectionlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->undoselectionlength(), output);
  }

  // required uint32 undoActiveToken = 5;
  if (has_undoactivetoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->undoactivetoken(), output);
  }

  // required bool redoSelectionValid = 6;
  if (has_redoselectionvalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->redoselectionvalid(), output);
  }

  // required uint32 redoSelectionStart = 7;
  if (has_redoselectionstart()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->redoselectionstart(), output);
  }

  // required uint32 redoSelectionLength = 8;
  if (has_redoselectionlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->redoselectionlength(), output);
  }

  // required uint32 redoActiveToken = 9;
  if (has_redoactivetoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->redoactivetoken(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FormulaEditingCommandGroupArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.ProgressiveCommandGroupArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required bool undoSelectionValid = 2;
  if (has_undoselectionvalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->undoselectionvalid(), target);
  }

  // required uint32 undoSelectionStart = 3;
  if (has_undoselectionstart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->undoselectionstart(), target);
  }

  // required uint32 undoSelectionLength = 4;
  if (has_undoselectionlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->undoselectionlength(), target);
  }

  // required uint32 undoActiveToken = 5;
  if (has_undoactivetoken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->undoactivetoken(), target);
  }

  // required bool redoSelectionValid = 6;
  if (has_redoselectionvalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->redoselectionvalid(), target);
  }

  // required uint32 redoSelectionStart = 7;
  if (has_redoselectionstart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->redoselectionstart(), target);
  }

  // required uint32 redoSelectionLength = 8;
  if (has_redoselectionlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->redoselectionlength(), target);
  }

  // required uint32 redoActiveToken = 9;
  if (has_redoactivetoken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->redoactivetoken(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FormulaEditingCommandGroupArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.ProgressiveCommandGroupArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required bool undoSelectionValid = 2;
    if (has_undoselectionvalid()) {
      total_size += 1 + 1;
    }

    // required uint32 undoSelectionStart = 3;
    if (has_undoselectionstart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->undoselectionstart());
    }

    // required uint32 undoSelectionLength = 4;
    if (has_undoselectionlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->undoselectionlength());
    }

    // required uint32 undoActiveToken = 5;
    if (has_undoactivetoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->undoactivetoken());
    }

    // required bool redoSelectionValid = 6;
    if (has_redoselectionvalid()) {
      total_size += 1 + 1;
    }

    // required uint32 redoSelectionStart = 7;
    if (has_redoselectionstart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->redoselectionstart());
    }

    // required uint32 redoSelectionLength = 8;
    if (has_redoselectionlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->redoselectionlength());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 redoActiveToken = 9;
    if (has_redoactivetoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->redoactivetoken());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FormulaEditingCommandGroupArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FormulaEditingCommandGroupArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FormulaEditingCommandGroupArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FormulaEditingCommandGroupArchive::MergeFrom(const FormulaEditingCommandGroupArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::ProgressiveCommandGroupArchive::MergeFrom(from.super());
    }
    if (from.has_undoselectionvalid()) {
      set_undoselectionvalid(from.undoselectionvalid());
    }
    if (from.has_undoselectionstart()) {
      set_undoselectionstart(from.undoselectionstart());
    }
    if (from.has_undoselectionlength()) {
      set_undoselectionlength(from.undoselectionlength());
    }
    if (from.has_undoactivetoken()) {
      set_undoactivetoken(from.undoactivetoken());
    }
    if (from.has_redoselectionvalid()) {
      set_redoselectionvalid(from.redoselectionvalid());
    }
    if (from.has_redoselectionstart()) {
      set_redoselectionstart(from.redoselectionstart());
    }
    if (from.has_redoselectionlength()) {
      set_redoselectionlength(from.redoselectionlength());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_redoactivetoken()) {
      set_redoactivetoken(from.redoactivetoken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FormulaEditingCommandGroupArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormulaEditingCommandGroupArchive::CopyFrom(const FormulaEditingCommandGroupArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaEditingCommandGroupArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void FormulaEditingCommandGroupArchive::Swap(FormulaEditingCommandGroupArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(undoselectionvalid_, other->undoselectionvalid_);
    std::swap(undoselectionstart_, other->undoselectionstart_);
    std::swap(undoselectionlength_, other->undoselectionlength_);
    std::swap(undoactivetoken_, other->undoactivetoken_);
    std::swap(redoselectionvalid_, other->redoselectionvalid_);
    std::swap(redoselectionstart_, other->redoselectionstart_);
    std::swap(redoselectionlength_, other->redoselectionlength_);
    std::swap(redoactivetoken_, other->redoactivetoken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FormulaEditingCommandGroupArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FormulaEditingCommandGroupArchive_descriptor_;
  metadata.reflection = FormulaEditingCommandGroupArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FormulaEditingCommandSelectionBehaviorArchive::kUndoSelectionValidFieldNumber;
const int FormulaEditingCommandSelectionBehaviorArchive::kUndoSelectionStartFieldNumber;
const int FormulaEditingCommandSelectionBehaviorArchive::kUndoSelectionLengthFieldNumber;
const int FormulaEditingCommandSelectionBehaviorArchive::kUndoActiveTokenFieldNumber;
const int FormulaEditingCommandSelectionBehaviorArchive::kRedoSelectionValidFieldNumber;
const int FormulaEditingCommandSelectionBehaviorArchive::kRedoSelectionStartFieldNumber;
const int FormulaEditingCommandSelectionBehaviorArchive::kRedoSelectionLengthFieldNumber;
const int FormulaEditingCommandSelectionBehaviorArchive::kRedoActiveTokenFieldNumber;
const int FormulaEditingCommandSelectionBehaviorArchive::kStorageFieldNumber;
#endif  // !_MSC_VER

FormulaEditingCommandSelectionBehaviorArchive::FormulaEditingCommandSelectionBehaviorArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FormulaEditingCommandSelectionBehaviorArchive::InitAsDefaultInstance() {
  storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

FormulaEditingCommandSelectionBehaviorArchive::FormulaEditingCommandSelectionBehaviorArchive(const FormulaEditingCommandSelectionBehaviorArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FormulaEditingCommandSelectionBehaviorArchive::SharedCtor() {
  _cached_size_ = 0;
  undoselectionvalid_ = false;
  undoselectionstart_ = 0u;
  undoselectionlength_ = 0u;
  undoactivetoken_ = 0u;
  redoselectionvalid_ = false;
  redoselectionstart_ = 0u;
  redoselectionlength_ = 0u;
  redoactivetoken_ = 0u;
  storage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FormulaEditingCommandSelectionBehaviorArchive::~FormulaEditingCommandSelectionBehaviorArchive() {
  SharedDtor();
}

void FormulaEditingCommandSelectionBehaviorArchive::SharedDtor() {
  if (this != default_instance_) {
    delete storage_;
  }
}

void FormulaEditingCommandSelectionBehaviorArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FormulaEditingCommandSelectionBehaviorArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FormulaEditingCommandSelectionBehaviorArchive_descriptor_;
}

const FormulaEditingCommandSelectionBehaviorArchive& FormulaEditingCommandSelectionBehaviorArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

FormulaEditingCommandSelectionBehaviorArchive* FormulaEditingCommandSelectionBehaviorArchive::default_instance_ = NULL;

FormulaEditingCommandSelectionBehaviorArchive* FormulaEditingCommandSelectionBehaviorArchive::New() const {
  return new FormulaEditingCommandSelectionBehaviorArchive;
}

void FormulaEditingCommandSelectionBehaviorArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    undoselectionvalid_ = false;
    undoselectionstart_ = 0u;
    undoselectionlength_ = 0u;
    undoactivetoken_ = 0u;
    redoselectionvalid_ = false;
    redoselectionstart_ = 0u;
    redoselectionlength_ = 0u;
    redoactivetoken_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_storage()) {
      if (storage_ != NULL) storage_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FormulaEditingCommandSelectionBehaviorArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool undoSelectionValid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &undoselectionvalid_)));
          set_has_undoselectionvalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_undoSelectionStart;
        break;
      }

      // optional uint32 undoSelectionStart = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_undoSelectionStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &undoselectionstart_)));
          set_has_undoselectionstart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_undoSelectionLength;
        break;
      }

      // optional uint32 undoSelectionLength = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_undoSelectionLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &undoselectionlength_)));
          set_has_undoselectionlength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_undoActiveToken;
        break;
      }

      // optional uint32 undoActiveToken = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_undoActiveToken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &undoactivetoken_)));
          set_has_undoactivetoken();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_redoSelectionValid;
        break;
      }

      // optional bool redoSelectionValid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redoSelectionValid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &redoselectionvalid_)));
          set_has_redoselectionvalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_redoSelectionStart;
        break;
      }

      // optional uint32 redoSelectionStart = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redoSelectionStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redoselectionstart_)));
          set_has_redoselectionstart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_redoSelectionLength;
        break;
      }

      // optional uint32 redoSelectionLength = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redoSelectionLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redoselectionlength_)));
          set_has_redoselectionlength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_redoActiveToken;
        break;
      }

      // optional uint32 redoActiveToken = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redoActiveToken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redoactivetoken_)));
          set_has_redoactivetoken();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_storage;
        break;
      }

      // optional .TSP.Reference storage = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FormulaEditingCommandSelectionBehaviorArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool undoSelectionValid = 2;
  if (has_undoselectionvalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->undoselectionvalid(), output);
  }

  // optional uint32 undoSelectionStart = 3;
  if (has_undoselectionstart()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->undoselectionstart(), output);
  }

  // optional uint32 undoSelectionLength = 4;
  if (has_undoselectionlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->undoselectionlength(), output);
  }

  // optional uint32 undoActiveToken = 5;
  if (has_undoactivetoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->undoactivetoken(), output);
  }

  // optional bool redoSelectionValid = 6;
  if (has_redoselectionvalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->redoselectionvalid(), output);
  }

  // optional uint32 redoSelectionStart = 7;
  if (has_redoselectionstart()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->redoselectionstart(), output);
  }

  // optional uint32 redoSelectionLength = 8;
  if (has_redoselectionlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->redoselectionlength(), output);
  }

  // optional uint32 redoActiveToken = 9;
  if (has_redoactivetoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->redoactivetoken(), output);
  }

  // optional .TSP.Reference storage = 10;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->storage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FormulaEditingCommandSelectionBehaviorArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool undoSelectionValid = 2;
  if (has_undoselectionvalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->undoselectionvalid(), target);
  }

  // optional uint32 undoSelectionStart = 3;
  if (has_undoselectionstart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->undoselectionstart(), target);
  }

  // optional uint32 undoSelectionLength = 4;
  if (has_undoselectionlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->undoselectionlength(), target);
  }

  // optional uint32 undoActiveToken = 5;
  if (has_undoactivetoken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->undoactivetoken(), target);
  }

  // optional bool redoSelectionValid = 6;
  if (has_redoselectionvalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->redoselectionvalid(), target);
  }

  // optional uint32 redoSelectionStart = 7;
  if (has_redoselectionstart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->redoselectionstart(), target);
  }

  // optional uint32 redoSelectionLength = 8;
  if (has_redoselectionlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->redoselectionlength(), target);
  }

  // optional uint32 redoActiveToken = 9;
  if (has_redoactivetoken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->redoactivetoken(), target);
  }

  // optional .TSP.Reference storage = 10;
  if (has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->storage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FormulaEditingCommandSelectionBehaviorArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool undoSelectionValid = 2;
    if (has_undoselectionvalid()) {
      total_size += 1 + 1;
    }

    // optional uint32 undoSelectionStart = 3;
    if (has_undoselectionstart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->undoselectionstart());
    }

    // optional uint32 undoSelectionLength = 4;
    if (has_undoselectionlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->undoselectionlength());
    }

    // optional uint32 undoActiveToken = 5;
    if (has_undoactivetoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->undoactivetoken());
    }

    // optional bool redoSelectionValid = 6;
    if (has_redoselectionvalid()) {
      total_size += 1 + 1;
    }

    // optional uint32 redoSelectionStart = 7;
    if (has_redoselectionstart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->redoselectionstart());
    }

    // optional uint32 redoSelectionLength = 8;
    if (has_redoselectionlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->redoselectionlength());
    }

    // optional uint32 redoActiveToken = 9;
    if (has_redoactivetoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->redoactivetoken());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TSP.Reference storage = 10;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FormulaEditingCommandSelectionBehaviorArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FormulaEditingCommandSelectionBehaviorArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FormulaEditingCommandSelectionBehaviorArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FormulaEditingCommandSelectionBehaviorArchive::MergeFrom(const FormulaEditingCommandSelectionBehaviorArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_undoselectionvalid()) {
      set_undoselectionvalid(from.undoselectionvalid());
    }
    if (from.has_undoselectionstart()) {
      set_undoselectionstart(from.undoselectionstart());
    }
    if (from.has_undoselectionlength()) {
      set_undoselectionlength(from.undoselectionlength());
    }
    if (from.has_undoactivetoken()) {
      set_undoactivetoken(from.undoactivetoken());
    }
    if (from.has_redoselectionvalid()) {
      set_redoselectionvalid(from.redoselectionvalid());
    }
    if (from.has_redoselectionstart()) {
      set_redoselectionstart(from.redoselectionstart());
    }
    if (from.has_redoselectionlength()) {
      set_redoselectionlength(from.redoselectionlength());
    }
    if (from.has_redoactivetoken()) {
      set_redoactivetoken(from.redoactivetoken());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_storage()) {
      mutable_storage()->::TSP::Reference::MergeFrom(from.storage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FormulaEditingCommandSelectionBehaviorArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormulaEditingCommandSelectionBehaviorArchive::CopyFrom(const FormulaEditingCommandSelectionBehaviorArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaEditingCommandSelectionBehaviorArchive::IsInitialized() const {

  if (has_storage()) {
    if (!this->storage().IsInitialized()) return false;
  }
  return true;
}

void FormulaEditingCommandSelectionBehaviorArchive::Swap(FormulaEditingCommandSelectionBehaviorArchive* other) {
  if (other != this) {
    std::swap(undoselectionvalid_, other->undoselectionvalid_);
    std::swap(undoselectionstart_, other->undoselectionstart_);
    std::swap(undoselectionlength_, other->undoselectionlength_);
    std::swap(undoactivetoken_, other->undoactivetoken_);
    std::swap(redoselectionvalid_, other->redoselectionvalid_);
    std::swap(redoselectionstart_, other->redoselectionstart_);
    std::swap(redoselectionlength_, other->redoselectionlength_);
    std::swap(redoactivetoken_, other->redoactivetoken_);
    std::swap(storage_, other->storage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FormulaEditingCommandSelectionBehaviorArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FormulaEditingCommandSelectionBehaviorArchive_descriptor_;
  metadata.reflection = FormulaEditingCommandSelectionBehaviorArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UndoRedoStateCommandSelectionBehaviorArchive::kBeforeUndoRedoStateFieldNumber;
const int UndoRedoStateCommandSelectionBehaviorArchive::kAfterUndoRedoStateFieldNumber;
const int UndoRedoStateCommandSelectionBehaviorArchive::kTableInfoFieldNumber;
const int UndoRedoStateCommandSelectionBehaviorArchive::kBeforeTableSelectionFieldNumber;
const int UndoRedoStateCommandSelectionBehaviorArchive::kAfterTableSelectionFieldNumber;
#endif  // !_MSC_VER

UndoRedoStateCommandSelectionBehaviorArchive::UndoRedoStateCommandSelectionBehaviorArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UndoRedoStateCommandSelectionBehaviorArchive::InitAsDefaultInstance() {
  before_undo_redo_state_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  after_undo_redo_state_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  table_info_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  before_table_selection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
  after_table_selection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
}

UndoRedoStateCommandSelectionBehaviorArchive::UndoRedoStateCommandSelectionBehaviorArchive(const UndoRedoStateCommandSelectionBehaviorArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UndoRedoStateCommandSelectionBehaviorArchive::SharedCtor() {
  _cached_size_ = 0;
  before_undo_redo_state_ = NULL;
  after_undo_redo_state_ = NULL;
  table_info_ = NULL;
  before_table_selection_ = NULL;
  after_table_selection_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UndoRedoStateCommandSelectionBehaviorArchive::~UndoRedoStateCommandSelectionBehaviorArchive() {
  SharedDtor();
}

void UndoRedoStateCommandSelectionBehaviorArchive::SharedDtor() {
  if (this != default_instance_) {
    delete before_undo_redo_state_;
    delete after_undo_redo_state_;
    delete table_info_;
    delete before_table_selection_;
    delete after_table_selection_;
  }
}

void UndoRedoStateCommandSelectionBehaviorArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UndoRedoStateCommandSelectionBehaviorArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UndoRedoStateCommandSelectionBehaviorArchive_descriptor_;
}

const UndoRedoStateCommandSelectionBehaviorArchive& UndoRedoStateCommandSelectionBehaviorArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

UndoRedoStateCommandSelectionBehaviorArchive* UndoRedoStateCommandSelectionBehaviorArchive::default_instance_ = NULL;

UndoRedoStateCommandSelectionBehaviorArchive* UndoRedoStateCommandSelectionBehaviorArchive::New() const {
  return new UndoRedoStateCommandSelectionBehaviorArchive;
}

void UndoRedoStateCommandSelectionBehaviorArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_before_undo_redo_state()) {
      if (before_undo_redo_state_ != NULL) before_undo_redo_state_->::TSP::Reference::Clear();
    }
    if (has_after_undo_redo_state()) {
      if (after_undo_redo_state_ != NULL) after_undo_redo_state_->::TSP::Reference::Clear();
    }
    if (has_table_info()) {
      if (table_info_ != NULL) table_info_->::TSP::Reference::Clear();
    }
    if (has_before_table_selection()) {
      if (before_table_selection_ != NULL) before_table_selection_->::TST::SelectionArchive::Clear();
    }
    if (has_after_table_selection()) {
      if (after_table_selection_ != NULL) after_table_selection_->::TST::SelectionArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UndoRedoStateCommandSelectionBehaviorArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference before_undo_redo_state = 1 [deprecated = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_before_undo_redo_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_after_undo_redo_state;
        break;
      }

      // optional .TSP.Reference after_undo_redo_state = 2 [deprecated = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_after_undo_redo_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_after_undo_redo_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_table_info;
        break;
      }

      // optional .TSP.Reference table_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_before_table_selection;
        break;
      }

      // optional .TST.SelectionArchive before_table_selection = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_before_table_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_before_table_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_after_table_selection;
        break;
      }

      // optional .TST.SelectionArchive after_table_selection = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_after_table_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_after_table_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UndoRedoStateCommandSelectionBehaviorArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference before_undo_redo_state = 1 [deprecated = true];
  if (has_before_undo_redo_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->before_undo_redo_state(), output);
  }

  // optional .TSP.Reference after_undo_redo_state = 2 [deprecated = true];
  if (has_after_undo_redo_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->after_undo_redo_state(), output);
  }

  // optional .TSP.Reference table_info = 3;
  if (has_table_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->table_info(), output);
  }

  // optional .TST.SelectionArchive before_table_selection = 4;
  if (has_before_table_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->before_table_selection(), output);
  }

  // optional .TST.SelectionArchive after_table_selection = 6;
  if (has_after_table_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->after_table_selection(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UndoRedoStateCommandSelectionBehaviorArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference before_undo_redo_state = 1 [deprecated = true];
  if (has_before_undo_redo_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->before_undo_redo_state(), target);
  }

  // optional .TSP.Reference after_undo_redo_state = 2 [deprecated = true];
  if (has_after_undo_redo_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->after_undo_redo_state(), target);
  }

  // optional .TSP.Reference table_info = 3;
  if (has_table_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->table_info(), target);
  }

  // optional .TST.SelectionArchive before_table_selection = 4;
  if (has_before_table_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->before_table_selection(), target);
  }

  // optional .TST.SelectionArchive after_table_selection = 6;
  if (has_after_table_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->after_table_selection(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UndoRedoStateCommandSelectionBehaviorArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Reference before_undo_redo_state = 1 [deprecated = true];
    if (has_before_undo_redo_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->before_undo_redo_state());
    }

    // optional .TSP.Reference after_undo_redo_state = 2 [deprecated = true];
    if (has_after_undo_redo_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->after_undo_redo_state());
    }

    // optional .TSP.Reference table_info = 3;
    if (has_table_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_info());
    }

    // optional .TST.SelectionArchive before_table_selection = 4;
    if (has_before_table_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->before_table_selection());
    }

    // optional .TST.SelectionArchive after_table_selection = 6;
    if (has_after_table_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->after_table_selection());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UndoRedoStateCommandSelectionBehaviorArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UndoRedoStateCommandSelectionBehaviorArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UndoRedoStateCommandSelectionBehaviorArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UndoRedoStateCommandSelectionBehaviorArchive::MergeFrom(const UndoRedoStateCommandSelectionBehaviorArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_before_undo_redo_state()) {
      mutable_before_undo_redo_state()->::TSP::Reference::MergeFrom(from.before_undo_redo_state());
    }
    if (from.has_after_undo_redo_state()) {
      mutable_after_undo_redo_state()->::TSP::Reference::MergeFrom(from.after_undo_redo_state());
    }
    if (from.has_table_info()) {
      mutable_table_info()->::TSP::Reference::MergeFrom(from.table_info());
    }
    if (from.has_before_table_selection()) {
      mutable_before_table_selection()->::TST::SelectionArchive::MergeFrom(from.before_table_selection());
    }
    if (from.has_after_table_selection()) {
      mutable_after_table_selection()->::TST::SelectionArchive::MergeFrom(from.after_table_selection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UndoRedoStateCommandSelectionBehaviorArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndoRedoStateCommandSelectionBehaviorArchive::CopyFrom(const UndoRedoStateCommandSelectionBehaviorArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndoRedoStateCommandSelectionBehaviorArchive::IsInitialized() const {

  if (has_before_undo_redo_state()) {
    if (!this->before_undo_redo_state().IsInitialized()) return false;
  }
  if (has_after_undo_redo_state()) {
    if (!this->after_undo_redo_state().IsInitialized()) return false;
  }
  if (has_table_info()) {
    if (!this->table_info().IsInitialized()) return false;
  }
  if (has_before_table_selection()) {
    if (!this->before_table_selection().IsInitialized()) return false;
  }
  if (has_after_table_selection()) {
    if (!this->after_table_selection().IsInitialized()) return false;
  }
  return true;
}

void UndoRedoStateCommandSelectionBehaviorArchive::Swap(UndoRedoStateCommandSelectionBehaviorArchive* other) {
  if (other != this) {
    std::swap(before_undo_redo_state_, other->before_undo_redo_state_);
    std::swap(after_undo_redo_state_, other->after_undo_redo_state_);
    std::swap(table_info_, other->table_info_);
    std::swap(before_table_selection_, other->before_table_selection_);
    std::swap(after_table_selection_, other->after_table_selection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UndoRedoStateCommandSelectionBehaviorArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UndoRedoStateCommandSelectionBehaviorArchive_descriptor_;
  metadata.reflection = UndoRedoStateCommandSelectionBehaviorArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableCommandSelectionBehaviorArchive::kBeforeTableSelectionFieldNumber;
const int TableCommandSelectionBehaviorArchive::kAfterTableSelectionFieldNumber;
const int TableCommandSelectionBehaviorArchive::kTableInfoFieldNumber;
const int TableCommandSelectionBehaviorArchive::kLastColumnHitByTapFieldNumber;
#endif  // !_MSC_VER

TableCommandSelectionBehaviorArchive::TableCommandSelectionBehaviorArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableCommandSelectionBehaviorArchive::InitAsDefaultInstance() {
  before_table_selection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
  after_table_selection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
  table_info_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

TableCommandSelectionBehaviorArchive::TableCommandSelectionBehaviorArchive(const TableCommandSelectionBehaviorArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableCommandSelectionBehaviorArchive::SharedCtor() {
  _cached_size_ = 0;
  before_table_selection_ = NULL;
  after_table_selection_ = NULL;
  table_info_ = NULL;
  last_column_hit_by_tap_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableCommandSelectionBehaviorArchive::~TableCommandSelectionBehaviorArchive() {
  SharedDtor();
}

void TableCommandSelectionBehaviorArchive::SharedDtor() {
  if (this != default_instance_) {
    delete before_table_selection_;
    delete after_table_selection_;
    delete table_info_;
  }
}

void TableCommandSelectionBehaviorArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableCommandSelectionBehaviorArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableCommandSelectionBehaviorArchive_descriptor_;
}

const TableCommandSelectionBehaviorArchive& TableCommandSelectionBehaviorArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

TableCommandSelectionBehaviorArchive* TableCommandSelectionBehaviorArchive::default_instance_ = NULL;

TableCommandSelectionBehaviorArchive* TableCommandSelectionBehaviorArchive::New() const {
  return new TableCommandSelectionBehaviorArchive;
}

void TableCommandSelectionBehaviorArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_before_table_selection()) {
      if (before_table_selection_ != NULL) before_table_selection_->::TST::SelectionArchive::Clear();
    }
    if (has_after_table_selection()) {
      if (after_table_selection_ != NULL) after_table_selection_->::TST::SelectionArchive::Clear();
    }
    if (has_table_info()) {
      if (table_info_ != NULL) table_info_->::TSP::Reference::Clear();
    }
    last_column_hit_by_tap_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableCommandSelectionBehaviorArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TST.SelectionArchive before_table_selection = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_before_table_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_after_table_selection;
        break;
      }

      // optional .TST.SelectionArchive after_table_selection = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_after_table_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_after_table_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_table_info;
        break;
      }

      // optional .TSP.Reference table_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_column_hit_by_tap;
        break;
      }

      // optional uint32 last_column_hit_by_tap = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_column_hit_by_tap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_column_hit_by_tap_)));
          set_has_last_column_hit_by_tap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableCommandSelectionBehaviorArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TST.SelectionArchive before_table_selection = 1;
  if (has_before_table_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->before_table_selection(), output);
  }

  // optional .TST.SelectionArchive after_table_selection = 2;
  if (has_after_table_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->after_table_selection(), output);
  }

  // optional .TSP.Reference table_info = 3;
  if (has_table_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->table_info(), output);
  }

  // optional uint32 last_column_hit_by_tap = 4;
  if (has_last_column_hit_by_tap()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_column_hit_by_tap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableCommandSelectionBehaviorArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TST.SelectionArchive before_table_selection = 1;
  if (has_before_table_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->before_table_selection(), target);
  }

  // optional .TST.SelectionArchive after_table_selection = 2;
  if (has_after_table_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->after_table_selection(), target);
  }

  // optional .TSP.Reference table_info = 3;
  if (has_table_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->table_info(), target);
  }

  // optional uint32 last_column_hit_by_tap = 4;
  if (has_last_column_hit_by_tap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_column_hit_by_tap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableCommandSelectionBehaviorArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TST.SelectionArchive before_table_selection = 1;
    if (has_before_table_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->before_table_selection());
    }

    // optional .TST.SelectionArchive after_table_selection = 2;
    if (has_after_table_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->after_table_selection());
    }

    // optional .TSP.Reference table_info = 3;
    if (has_table_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->table_info());
    }

    // optional uint32 last_column_hit_by_tap = 4;
    if (has_last_column_hit_by_tap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_column_hit_by_tap());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableCommandSelectionBehaviorArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableCommandSelectionBehaviorArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableCommandSelectionBehaviorArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableCommandSelectionBehaviorArchive::MergeFrom(const TableCommandSelectionBehaviorArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_before_table_selection()) {
      mutable_before_table_selection()->::TST::SelectionArchive::MergeFrom(from.before_table_selection());
    }
    if (from.has_after_table_selection()) {
      mutable_after_table_selection()->::TST::SelectionArchive::MergeFrom(from.after_table_selection());
    }
    if (from.has_table_info()) {
      mutable_table_info()->::TSP::Reference::MergeFrom(from.table_info());
    }
    if (from.has_last_column_hit_by_tap()) {
      set_last_column_hit_by_tap(from.last_column_hit_by_tap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableCommandSelectionBehaviorArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableCommandSelectionBehaviorArchive::CopyFrom(const TableCommandSelectionBehaviorArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableCommandSelectionBehaviorArchive::IsInitialized() const {

  if (has_before_table_selection()) {
    if (!this->before_table_selection().IsInitialized()) return false;
  }
  if (has_after_table_selection()) {
    if (!this->after_table_selection().IsInitialized()) return false;
  }
  if (has_table_info()) {
    if (!this->table_info().IsInitialized()) return false;
  }
  return true;
}

void TableCommandSelectionBehaviorArchive::Swap(TableCommandSelectionBehaviorArchive* other) {
  if (other != this) {
    std::swap(before_table_selection_, other->before_table_selection_);
    std::swap(after_table_selection_, other->after_table_selection_);
    std::swap(table_info_, other->table_info_);
    std::swap(last_column_hit_by_tap_, other->last_column_hit_by_tap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableCommandSelectionBehaviorArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableCommandSelectionBehaviorArchive_descriptor_;
  metadata.reflection = TableCommandSelectionBehaviorArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DisableTableNameSelectionBehaviorArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

DisableTableNameSelectionBehaviorArchive::DisableTableNameSelectionBehaviorArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DisableTableNameSelectionBehaviorArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandSelectionBehaviorArchive*>(&::TST::TableCommandSelectionBehaviorArchive::default_instance());
}

DisableTableNameSelectionBehaviorArchive::DisableTableNameSelectionBehaviorArchive(const DisableTableNameSelectionBehaviorArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DisableTableNameSelectionBehaviorArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DisableTableNameSelectionBehaviorArchive::~DisableTableNameSelectionBehaviorArchive() {
  SharedDtor();
}

void DisableTableNameSelectionBehaviorArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void DisableTableNameSelectionBehaviorArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisableTableNameSelectionBehaviorArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DisableTableNameSelectionBehaviorArchive_descriptor_;
}

const DisableTableNameSelectionBehaviorArchive& DisableTableNameSelectionBehaviorArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

DisableTableNameSelectionBehaviorArchive* DisableTableNameSelectionBehaviorArchive::default_instance_ = NULL;

DisableTableNameSelectionBehaviorArchive* DisableTableNameSelectionBehaviorArchive::New() const {
  return new DisableTableNameSelectionBehaviorArchive;
}

void DisableTableNameSelectionBehaviorArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandSelectionBehaviorArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DisableTableNameSelectionBehaviorArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandSelectionBehaviorArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DisableTableNameSelectionBehaviorArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandSelectionBehaviorArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DisableTableNameSelectionBehaviorArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandSelectionBehaviorArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DisableTableNameSelectionBehaviorArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandSelectionBehaviorArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisableTableNameSelectionBehaviorArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DisableTableNameSelectionBehaviorArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DisableTableNameSelectionBehaviorArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DisableTableNameSelectionBehaviorArchive::MergeFrom(const DisableTableNameSelectionBehaviorArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandSelectionBehaviorArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DisableTableNameSelectionBehaviorArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisableTableNameSelectionBehaviorArchive::CopyFrom(const DisableTableNameSelectionBehaviorArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableTableNameSelectionBehaviorArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void DisableTableNameSelectionBehaviorArchive::Swap(DisableTableNameSelectionBehaviorArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DisableTableNameSelectionBehaviorArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DisableTableNameSelectionBehaviorArchive_descriptor_;
  metadata.reflection = DisableTableNameSelectionBehaviorArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandApplyCellCommentArchive::kSuperFieldNumber;
const int CommandApplyCellCommentArchive::kCellIdFieldNumber;
const int CommandApplyCellCommentArchive::kOldCommentStorageFieldNumber;
const int CommandApplyCellCommentArchive::kNewCommentStorageFieldNumber;
#endif  // !_MSC_VER

CommandApplyCellCommentArchive::CommandApplyCellCommentArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandApplyCellCommentArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  cell_id_ = const_cast< ::TST::CellID*>(&::TST::CellID::default_instance());
  old_comment_storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  new_comment_storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandApplyCellCommentArchive::CommandApplyCellCommentArchive(const CommandApplyCellCommentArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandApplyCellCommentArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  cell_id_ = NULL;
  old_comment_storage_ = NULL;
  new_comment_storage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandApplyCellCommentArchive::~CommandApplyCellCommentArchive() {
  SharedDtor();
}

void CommandApplyCellCommentArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete cell_id_;
    delete old_comment_storage_;
    delete new_comment_storage_;
  }
}

void CommandApplyCellCommentArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandApplyCellCommentArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandApplyCellCommentArchive_descriptor_;
}

const CommandApplyCellCommentArchive& CommandApplyCellCommentArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandApplyCellCommentArchive* CommandApplyCellCommentArchive::default_instance_ = NULL;

CommandApplyCellCommentArchive* CommandApplyCellCommentArchive::New() const {
  return new CommandApplyCellCommentArchive;
}

void CommandApplyCellCommentArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_cell_id()) {
      if (cell_id_ != NULL) cell_id_->::TST::CellID::Clear();
    }
    if (has_old_comment_storage()) {
      if (old_comment_storage_ != NULL) old_comment_storage_->::TSP::Reference::Clear();
    }
    if (has_new_comment_storage()) {
      if (new_comment_storage_ != NULL) new_comment_storage_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandApplyCellCommentArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cell_id;
        break;
      }

      // required .TST.CellID cell_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_old_comment_storage;
        break;
      }

      // optional .TSP.Reference old_comment_storage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_comment_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_comment_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_new_comment_storage;
        break;
      }

      // optional .TSP.Reference new_comment_storage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_comment_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_comment_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandApplyCellCommentArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TST.CellID cell_id = 2;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cell_id(), output);
  }

  // optional .TSP.Reference old_comment_storage = 3;
  if (has_old_comment_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->old_comment_storage(), output);
  }

  // optional .TSP.Reference new_comment_storage = 4;
  if (has_new_comment_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->new_comment_storage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandApplyCellCommentArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TST.CellID cell_id = 2;
  if (has_cell_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cell_id(), target);
  }

  // optional .TSP.Reference old_comment_storage = 3;
  if (has_old_comment_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->old_comment_storage(), target);
  }

  // optional .TSP.Reference new_comment_storage = 4;
  if (has_new_comment_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->new_comment_storage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandApplyCellCommentArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TST.CellID cell_id = 2;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cell_id());
    }

    // optional .TSP.Reference old_comment_storage = 3;
    if (has_old_comment_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_comment_storage());
    }

    // optional .TSP.Reference new_comment_storage = 4;
    if (has_new_comment_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_comment_storage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandApplyCellCommentArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandApplyCellCommentArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandApplyCellCommentArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandApplyCellCommentArchive::MergeFrom(const CommandApplyCellCommentArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_cell_id()) {
      mutable_cell_id()->::TST::CellID::MergeFrom(from.cell_id());
    }
    if (from.has_old_comment_storage()) {
      mutable_old_comment_storage()->::TSP::Reference::MergeFrom(from.old_comment_storage());
    }
    if (from.has_new_comment_storage()) {
      mutable_new_comment_storage()->::TSP::Reference::MergeFrom(from.new_comment_storage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandApplyCellCommentArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandApplyCellCommentArchive::CopyFrom(const CommandApplyCellCommentArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandApplyCellCommentArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_cell_id()) {
    if (!this->cell_id().IsInitialized()) return false;
  }
  if (has_old_comment_storage()) {
    if (!this->old_comment_storage().IsInitialized()) return false;
  }
  if (has_new_comment_storage()) {
    if (!this->new_comment_storage().IsInitialized()) return false;
  }
  return true;
}

void CommandApplyCellCommentArchive::Swap(CommandApplyCellCommentArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(old_comment_storage_, other->old_comment_storage_);
    std::swap(new_comment_storage_, other->new_comment_storage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandApplyCellCommentArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandApplyCellCommentArchive_descriptor_;
  metadata.reflection = CommandApplyCellCommentArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandApplyConditionalStyleSetArchive::kSuperFieldNumber;
const int CommandApplyConditionalStyleSetArchive::kSelectionFieldNumber;
const int CommandApplyConditionalStyleSetArchive::kUndoCellMapFieldNumber;
const int CommandApplyConditionalStyleSetArchive::kRedoCellMapFieldNumber;
#endif  // !_MSC_VER

CommandApplyConditionalStyleSetArchive::CommandApplyConditionalStyleSetArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandApplyConditionalStyleSetArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  selection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
  undo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  redo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
}

CommandApplyConditionalStyleSetArchive::CommandApplyConditionalStyleSetArchive(const CommandApplyConditionalStyleSetArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandApplyConditionalStyleSetArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  selection_ = NULL;
  undo_cell_map_ = NULL;
  redo_cell_map_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandApplyConditionalStyleSetArchive::~CommandApplyConditionalStyleSetArchive() {
  SharedDtor();
}

void CommandApplyConditionalStyleSetArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete selection_;
    delete undo_cell_map_;
    delete redo_cell_map_;
  }
}

void CommandApplyConditionalStyleSetArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandApplyConditionalStyleSetArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandApplyConditionalStyleSetArchive_descriptor_;
}

const CommandApplyConditionalStyleSetArchive& CommandApplyConditionalStyleSetArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandApplyConditionalStyleSetArchive* CommandApplyConditionalStyleSetArchive::default_instance_ = NULL;

CommandApplyConditionalStyleSetArchive* CommandApplyConditionalStyleSetArchive::New() const {
  return new CommandApplyConditionalStyleSetArchive;
}

void CommandApplyConditionalStyleSetArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_selection()) {
      if (selection_ != NULL) selection_->::TST::SelectionArchive::Clear();
    }
    if (has_undo_cell_map()) {
      if (undo_cell_map_ != NULL) undo_cell_map_->::TST::CellMapArchive::Clear();
    }
    if (has_redo_cell_map()) {
      if (redo_cell_map_ != NULL) redo_cell_map_->::TST::CellMapArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandApplyConditionalStyleSetArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_selection;
        break;
      }

      // required .TST.SelectionArchive selection = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_undo_cell_map;
        break;
      }

      // required .TST.CellMapArchive undo_cell_map = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_redo_cell_map;
        break;
      }

      // required .TST.CellMapArchive redo_cell_map = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandApplyConditionalStyleSetArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TST.SelectionArchive selection = 2;
  if (has_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->selection(), output);
  }

  // required .TST.CellMapArchive undo_cell_map = 3;
  if (has_undo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->undo_cell_map(), output);
  }

  // required .TST.CellMapArchive redo_cell_map = 4;
  if (has_redo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->redo_cell_map(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandApplyConditionalStyleSetArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TST.SelectionArchive selection = 2;
  if (has_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->selection(), target);
  }

  // required .TST.CellMapArchive undo_cell_map = 3;
  if (has_undo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->undo_cell_map(), target);
  }

  // required .TST.CellMapArchive redo_cell_map = 4;
  if (has_redo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->redo_cell_map(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandApplyConditionalStyleSetArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TST.SelectionArchive selection = 2;
    if (has_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selection());
    }

    // required .TST.CellMapArchive undo_cell_map = 3;
    if (has_undo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_cell_map());
    }

    // required .TST.CellMapArchive redo_cell_map = 4;
    if (has_redo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_cell_map());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandApplyConditionalStyleSetArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandApplyConditionalStyleSetArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandApplyConditionalStyleSetArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandApplyConditionalStyleSetArchive::MergeFrom(const CommandApplyConditionalStyleSetArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_selection()) {
      mutable_selection()->::TST::SelectionArchive::MergeFrom(from.selection());
    }
    if (from.has_undo_cell_map()) {
      mutable_undo_cell_map()->::TST::CellMapArchive::MergeFrom(from.undo_cell_map());
    }
    if (from.has_redo_cell_map()) {
      mutable_redo_cell_map()->::TST::CellMapArchive::MergeFrom(from.redo_cell_map());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandApplyConditionalStyleSetArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandApplyConditionalStyleSetArchive::CopyFrom(const CommandApplyConditionalStyleSetArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandApplyConditionalStyleSetArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_selection()) {
    if (!this->selection().IsInitialized()) return false;
  }
  if (has_undo_cell_map()) {
    if (!this->undo_cell_map().IsInitialized()) return false;
  }
  if (has_redo_cell_map()) {
    if (!this->redo_cell_map().IsInitialized()) return false;
  }
  return true;
}

void CommandApplyConditionalStyleSetArchive::Swap(CommandApplyConditionalStyleSetArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(selection_, other->selection_);
    std::swap(undo_cell_map_, other->undo_cell_map_);
    std::swap(redo_cell_map_, other->redo_cell_map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandApplyConditionalStyleSetArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandApplyConditionalStyleSetArchive_descriptor_;
  metadata.reflection = CommandApplyConditionalStyleSetArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetFormulaTokenizationArchive::kSuperFieldNumber;
const int CommandSetFormulaTokenizationArchive::kTokenizationFieldNumber;
#endif  // !_MSC_VER

CommandSetFormulaTokenizationArchive::CommandSetFormulaTokenizationArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetFormulaTokenizationArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
}

CommandSetFormulaTokenizationArchive::CommandSetFormulaTokenizationArchive(const CommandSetFormulaTokenizationArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetFormulaTokenizationArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  tokenization_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetFormulaTokenizationArchive::~CommandSetFormulaTokenizationArchive() {
  SharedDtor();
}

void CommandSetFormulaTokenizationArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetFormulaTokenizationArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetFormulaTokenizationArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetFormulaTokenizationArchive_descriptor_;
}

const CommandSetFormulaTokenizationArchive& CommandSetFormulaTokenizationArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetFormulaTokenizationArchive* CommandSetFormulaTokenizationArchive::default_instance_ = NULL;

CommandSetFormulaTokenizationArchive* CommandSetFormulaTokenizationArchive::New() const {
  return new CommandSetFormulaTokenizationArchive;
}

void CommandSetFormulaTokenizationArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    tokenization_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetFormulaTokenizationArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tokenization;
        break;
      }

      // required bool tokenization = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tokenization:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tokenization_)));
          set_has_tokenization();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetFormulaTokenizationArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required bool tokenization = 2;
  if (has_tokenization()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->tokenization(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetFormulaTokenizationArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required bool tokenization = 2;
  if (has_tokenization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->tokenization(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetFormulaTokenizationArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required bool tokenization = 2;
    if (has_tokenization()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetFormulaTokenizationArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetFormulaTokenizationArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetFormulaTokenizationArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetFormulaTokenizationArchive::MergeFrom(const CommandSetFormulaTokenizationArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_tokenization()) {
      set_tokenization(from.tokenization());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetFormulaTokenizationArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetFormulaTokenizationArchive::CopyFrom(const CommandSetFormulaTokenizationArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetFormulaTokenizationArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetFormulaTokenizationArchive::Swap(CommandSetFormulaTokenizationArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(tokenization_, other->tokenization_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetFormulaTokenizationArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetFormulaTokenizationArchive_descriptor_;
  metadata.reflection = CommandSetFormulaTokenizationArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetFilterEnabledArchive::kSuperFieldNumber;
const int CommandSetFilterEnabledArchive::kFilterIndexFieldNumber;
const int CommandSetFilterEnabledArchive::kEnabledFieldNumber;
#endif  // !_MSC_VER

CommandSetFilterEnabledArchive::CommandSetFilterEnabledArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetFilterEnabledArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
}

CommandSetFilterEnabledArchive::CommandSetFilterEnabledArchive(const CommandSetFilterEnabledArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetFilterEnabledArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  filter_index_ = 0u;
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetFilterEnabledArchive::~CommandSetFilterEnabledArchive() {
  SharedDtor();
}

void CommandSetFilterEnabledArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetFilterEnabledArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetFilterEnabledArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetFilterEnabledArchive_descriptor_;
}

const CommandSetFilterEnabledArchive& CommandSetFilterEnabledArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetFilterEnabledArchive* CommandSetFilterEnabledArchive::default_instance_ = NULL;

CommandSetFilterEnabledArchive* CommandSetFilterEnabledArchive::New() const {
  return new CommandSetFilterEnabledArchive;
}

void CommandSetFilterEnabledArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    filter_index_ = 0u;
    enabled_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetFilterEnabledArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_filter_index;
        break;
      }

      // required uint32 filter_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_index_)));
          set_has_filter_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_enabled;
        break;
      }

      // required bool enabled = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetFilterEnabledArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required uint32 filter_index = 2;
  if (has_filter_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->filter_index(), output);
  }

  // required bool enabled = 4;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetFilterEnabledArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required uint32 filter_index = 2;
  if (has_filter_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->filter_index(), target);
  }

  // required bool enabled = 4;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->enabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetFilterEnabledArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required uint32 filter_index = 2;
    if (has_filter_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_index());
    }

    // required bool enabled = 4;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetFilterEnabledArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetFilterEnabledArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetFilterEnabledArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetFilterEnabledArchive::MergeFrom(const CommandSetFilterEnabledArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_filter_index()) {
      set_filter_index(from.filter_index());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetFilterEnabledArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetFilterEnabledArchive::CopyFrom(const CommandSetFilterEnabledArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetFilterEnabledArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetFilterEnabledArchive::Swap(CommandSetFilterEnabledArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(filter_index_, other->filter_index_);
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetFilterEnabledArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetFilterEnabledArchive_descriptor_;
  metadata.reflection = CommandSetFilterEnabledArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetFilterRuleEnabledArchive::kSuperFieldNumber;
const int CommandSetFilterRuleEnabledArchive::kFilterIndexFieldNumber;
const int CommandSetFilterRuleEnabledArchive::kRuleIndexFieldNumber;
const int CommandSetFilterRuleEnabledArchive::kEnabledFieldNumber;
#endif  // !_MSC_VER

CommandSetFilterRuleEnabledArchive::CommandSetFilterRuleEnabledArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetFilterRuleEnabledArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
}

CommandSetFilterRuleEnabledArchive::CommandSetFilterRuleEnabledArchive(const CommandSetFilterRuleEnabledArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetFilterRuleEnabledArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  filter_index_ = 0u;
  rule_index_ = 0u;
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetFilterRuleEnabledArchive::~CommandSetFilterRuleEnabledArchive() {
  SharedDtor();
}

void CommandSetFilterRuleEnabledArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetFilterRuleEnabledArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetFilterRuleEnabledArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetFilterRuleEnabledArchive_descriptor_;
}

const CommandSetFilterRuleEnabledArchive& CommandSetFilterRuleEnabledArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetFilterRuleEnabledArchive* CommandSetFilterRuleEnabledArchive::default_instance_ = NULL;

CommandSetFilterRuleEnabledArchive* CommandSetFilterRuleEnabledArchive::New() const {
  return new CommandSetFilterRuleEnabledArchive;
}

void CommandSetFilterRuleEnabledArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    filter_index_ = 0u;
    rule_index_ = 0u;
    enabled_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetFilterRuleEnabledArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_filter_index;
        break;
      }

      // required uint32 filter_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_index_)));
          set_has_filter_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rule_index;
        break;
      }

      // required uint32 rule_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rule_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rule_index_)));
          set_has_rule_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_enabled;
        break;
      }

      // required bool enabled = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetFilterRuleEnabledArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required uint32 filter_index = 2;
  if (has_filter_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->filter_index(), output);
  }

  // required uint32 rule_index = 3;
  if (has_rule_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rule_index(), output);
  }

  // required bool enabled = 4;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->enabled(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetFilterRuleEnabledArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required uint32 filter_index = 2;
  if (has_filter_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->filter_index(), target);
  }

  // required uint32 rule_index = 3;
  if (has_rule_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rule_index(), target);
  }

  // required bool enabled = 4;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->enabled(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetFilterRuleEnabledArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required uint32 filter_index = 2;
    if (has_filter_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_index());
    }

    // required uint32 rule_index = 3;
    if (has_rule_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rule_index());
    }

    // required bool enabled = 4;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetFilterRuleEnabledArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetFilterRuleEnabledArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetFilterRuleEnabledArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetFilterRuleEnabledArchive::MergeFrom(const CommandSetFilterRuleEnabledArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_filter_index()) {
      set_filter_index(from.filter_index());
    }
    if (from.has_rule_index()) {
      set_rule_index(from.rule_index());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetFilterRuleEnabledArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetFilterRuleEnabledArchive::CopyFrom(const CommandSetFilterRuleEnabledArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetFilterRuleEnabledArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetFilterRuleEnabledArchive::Swap(CommandSetFilterRuleEnabledArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(filter_index_, other->filter_index_);
    std::swap(rule_index_, other->rule_index_);
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetFilterRuleEnabledArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetFilterRuleEnabledArchive_descriptor_;
  metadata.reflection = CommandSetFilterRuleEnabledArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetFilterSetTypeArchive::kSuperFieldNumber;
const int CommandSetFilterSetTypeArchive::kOldFilterSetTypeFieldNumber;
const int CommandSetFilterSetTypeArchive::kNewFilterSetTypeFieldNumber;
#endif  // !_MSC_VER

CommandSetFilterSetTypeArchive::CommandSetFilterSetTypeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetFilterSetTypeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
}

CommandSetFilterSetTypeArchive::CommandSetFilterSetTypeArchive(const CommandSetFilterSetTypeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetFilterSetTypeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  old_filter_set_type_ = 0;
  new_filter_set_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetFilterSetTypeArchive::~CommandSetFilterSetTypeArchive() {
  SharedDtor();
}

void CommandSetFilterSetTypeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandSetFilterSetTypeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetFilterSetTypeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetFilterSetTypeArchive_descriptor_;
}

const CommandSetFilterSetTypeArchive& CommandSetFilterSetTypeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetFilterSetTypeArchive* CommandSetFilterSetTypeArchive::default_instance_ = NULL;

CommandSetFilterSetTypeArchive* CommandSetFilterSetTypeArchive::New() const {
  return new CommandSetFilterSetTypeArchive;
}

void CommandSetFilterSetTypeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    old_filter_set_type_ = 0;
    new_filter_set_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetFilterSetTypeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_old_filter_set_type;
        break;
      }

      // required .TST.FilterSetArchive.FilterSetType old_filter_set_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_filter_set_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TST::FilterSetArchive_FilterSetType_IsValid(value)) {
            set_old_filter_set_type(static_cast< ::TST::FilterSetArchive_FilterSetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_new_filter_set_type;
        break;
      }

      // required .TST.FilterSetArchive.FilterSetType new_filter_set_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_filter_set_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TST::FilterSetArchive_FilterSetType_IsValid(value)) {
            set_new_filter_set_type(static_cast< ::TST::FilterSetArchive_FilterSetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetFilterSetTypeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TST.FilterSetArchive.FilterSetType old_filter_set_type = 2;
  if (has_old_filter_set_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->old_filter_set_type(), output);
  }

  // required .TST.FilterSetArchive.FilterSetType new_filter_set_type = 3;
  if (has_new_filter_set_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->new_filter_set_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetFilterSetTypeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TST.FilterSetArchive.FilterSetType old_filter_set_type = 2;
  if (has_old_filter_set_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->old_filter_set_type(), target);
  }

  // required .TST.FilterSetArchive.FilterSetType new_filter_set_type = 3;
  if (has_new_filter_set_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->new_filter_set_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetFilterSetTypeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TST.FilterSetArchive.FilterSetType old_filter_set_type = 2;
    if (has_old_filter_set_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->old_filter_set_type());
    }

    // required .TST.FilterSetArchive.FilterSetType new_filter_set_type = 3;
    if (has_new_filter_set_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->new_filter_set_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetFilterSetTypeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetFilterSetTypeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetFilterSetTypeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetFilterSetTypeArchive::MergeFrom(const CommandSetFilterSetTypeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_old_filter_set_type()) {
      set_old_filter_set_type(from.old_filter_set_type());
    }
    if (from.has_new_filter_set_type()) {
      set_new_filter_set_type(from.new_filter_set_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetFilterSetTypeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetFilterSetTypeArchive::CopyFrom(const CommandSetFilterSetTypeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetFilterSetTypeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandSetFilterSetTypeArchive::Swap(CommandSetFilterSetTypeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(old_filter_set_type_, other->old_filter_set_type_);
    std::swap(new_filter_set_type_, other->new_filter_set_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetFilterSetTypeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetFilterSetTypeArchive_descriptor_;
  metadata.reflection = CommandSetFilterSetTypeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetStyleNetworkArchive::kSuperFieldNumber;
const int CommandSetStyleNetworkArchive::kOldStyleNetworkFieldNumber;
const int CommandSetStyleNetworkArchive::kNewStyleNetworkFieldNumber;
#endif  // !_MSC_VER

CommandSetStyleNetworkArchive::CommandSetStyleNetworkArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetStyleNetworkArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  old_style_network_ = const_cast< ::TST::TableStyleNetworkArchive*>(&::TST::TableStyleNetworkArchive::default_instance());
  new_style_network_ = const_cast< ::TST::TableStyleNetworkArchive*>(&::TST::TableStyleNetworkArchive::default_instance());
}

CommandSetStyleNetworkArchive::CommandSetStyleNetworkArchive(const CommandSetStyleNetworkArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetStyleNetworkArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  old_style_network_ = NULL;
  new_style_network_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetStyleNetworkArchive::~CommandSetStyleNetworkArchive() {
  SharedDtor();
}

void CommandSetStyleNetworkArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete old_style_network_;
    delete new_style_network_;
  }
}

void CommandSetStyleNetworkArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetStyleNetworkArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetStyleNetworkArchive_descriptor_;
}

const CommandSetStyleNetworkArchive& CommandSetStyleNetworkArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetStyleNetworkArchive* CommandSetStyleNetworkArchive::default_instance_ = NULL;

CommandSetStyleNetworkArchive* CommandSetStyleNetworkArchive::New() const {
  return new CommandSetStyleNetworkArchive;
}

void CommandSetStyleNetworkArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_old_style_network()) {
      if (old_style_network_ != NULL) old_style_network_->::TST::TableStyleNetworkArchive::Clear();
    }
    if (has_new_style_network()) {
      if (new_style_network_ != NULL) new_style_network_->::TST::TableStyleNetworkArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetStyleNetworkArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_old_style_network;
        break;
      }

      // required .TST.TableStyleNetworkArchive old_style_network = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_style_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_style_network()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_style_network;
        break;
      }

      // required .TST.TableStyleNetworkArchive new_style_network = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_style_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_style_network()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetStyleNetworkArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TST.TableStyleNetworkArchive old_style_network = 2;
  if (has_old_style_network()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->old_style_network(), output);
  }

  // required .TST.TableStyleNetworkArchive new_style_network = 3;
  if (has_new_style_network()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->new_style_network(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetStyleNetworkArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TST.TableStyleNetworkArchive old_style_network = 2;
  if (has_old_style_network()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->old_style_network(), target);
  }

  // required .TST.TableStyleNetworkArchive new_style_network = 3;
  if (has_new_style_network()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->new_style_network(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetStyleNetworkArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TST.TableStyleNetworkArchive old_style_network = 2;
    if (has_old_style_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_style_network());
    }

    // required .TST.TableStyleNetworkArchive new_style_network = 3;
    if (has_new_style_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_style_network());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetStyleNetworkArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetStyleNetworkArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetStyleNetworkArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetStyleNetworkArchive::MergeFrom(const CommandSetStyleNetworkArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_old_style_network()) {
      mutable_old_style_network()->::TST::TableStyleNetworkArchive::MergeFrom(from.old_style_network());
    }
    if (from.has_new_style_network()) {
      mutable_new_style_network()->::TST::TableStyleNetworkArchive::MergeFrom(from.new_style_network());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetStyleNetworkArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetStyleNetworkArchive::CopyFrom(const CommandSetStyleNetworkArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetStyleNetworkArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_old_style_network()) {
    if (!this->old_style_network().IsInitialized()) return false;
  }
  if (has_new_style_network()) {
    if (!this->new_style_network().IsInitialized()) return false;
  }
  return true;
}

void CommandSetStyleNetworkArchive::Swap(CommandSetStyleNetworkArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(old_style_network_, other->old_style_network_);
    std::swap(new_style_network_, other->new_style_network_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetStyleNetworkArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetStyleNetworkArchive_descriptor_;
  metadata.reflection = CommandSetStyleNetworkArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandMutateCellsArchive::kSuperFieldNumber;
const int CommandMutateCellsArchive::kUndoCellMapFieldNumber;
const int CommandMutateCellsArchive::kRedoCellMapFieldNumber;
const int CommandMutateCellsArchive::kSelectionFieldNumber;
#endif  // !_MSC_VER

CommandMutateCellsArchive::CommandMutateCellsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandMutateCellsArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  undo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  redo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  selection_ = const_cast< ::TST::SelectionArchive*>(&::TST::SelectionArchive::default_instance());
}

CommandMutateCellsArchive::CommandMutateCellsArchive(const CommandMutateCellsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandMutateCellsArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  undo_cell_map_ = NULL;
  redo_cell_map_ = NULL;
  selection_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandMutateCellsArchive::~CommandMutateCellsArchive() {
  SharedDtor();
}

void CommandMutateCellsArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete undo_cell_map_;
    delete redo_cell_map_;
    delete selection_;
  }
}

void CommandMutateCellsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandMutateCellsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandMutateCellsArchive_descriptor_;
}

const CommandMutateCellsArchive& CommandMutateCellsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandMutateCellsArchive* CommandMutateCellsArchive::default_instance_ = NULL;

CommandMutateCellsArchive* CommandMutateCellsArchive::New() const {
  return new CommandMutateCellsArchive;
}

void CommandMutateCellsArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_undo_cell_map()) {
      if (undo_cell_map_ != NULL) undo_cell_map_->::TST::CellMapArchive::Clear();
    }
    if (has_redo_cell_map()) {
      if (redo_cell_map_ != NULL) redo_cell_map_->::TST::CellMapArchive::Clear();
    }
    if (has_selection()) {
      if (selection_ != NULL) selection_->::TST::SelectionArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandMutateCellsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_undo_cell_map;
        break;
      }

      // required .TST.CellMapArchive undo_cell_map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_redo_cell_map;
        break;
      }

      // required .TST.CellMapArchive redo_cell_map = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_selection;
        break;
      }

      // optional .TST.SelectionArchive selection = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandMutateCellsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TST.CellMapArchive undo_cell_map = 2;
  if (has_undo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->undo_cell_map(), output);
  }

  // required .TST.CellMapArchive redo_cell_map = 3;
  if (has_redo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->redo_cell_map(), output);
  }

  // optional .TST.SelectionArchive selection = 4;
  if (has_selection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->selection(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandMutateCellsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TST.CellMapArchive undo_cell_map = 2;
  if (has_undo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->undo_cell_map(), target);
  }

  // required .TST.CellMapArchive redo_cell_map = 3;
  if (has_redo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->redo_cell_map(), target);
  }

  // optional .TST.SelectionArchive selection = 4;
  if (has_selection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->selection(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandMutateCellsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TST.CellMapArchive undo_cell_map = 2;
    if (has_undo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_cell_map());
    }

    // required .TST.CellMapArchive redo_cell_map = 3;
    if (has_redo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_cell_map());
    }

    // optional .TST.SelectionArchive selection = 4;
    if (has_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selection());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandMutateCellsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandMutateCellsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandMutateCellsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandMutateCellsArchive::MergeFrom(const CommandMutateCellsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_undo_cell_map()) {
      mutable_undo_cell_map()->::TST::CellMapArchive::MergeFrom(from.undo_cell_map());
    }
    if (from.has_redo_cell_map()) {
      mutable_redo_cell_map()->::TST::CellMapArchive::MergeFrom(from.redo_cell_map());
    }
    if (from.has_selection()) {
      mutable_selection()->::TST::SelectionArchive::MergeFrom(from.selection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandMutateCellsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandMutateCellsArchive::CopyFrom(const CommandMutateCellsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMutateCellsArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_undo_cell_map()) {
    if (!this->undo_cell_map().IsInitialized()) return false;
  }
  if (has_redo_cell_map()) {
    if (!this->redo_cell_map().IsInitialized()) return false;
  }
  if (has_selection()) {
    if (!this->selection().IsInitialized()) return false;
  }
  return true;
}

void CommandMutateCellsArchive::Swap(CommandMutateCellsArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(undo_cell_map_, other->undo_cell_map_);
    std::swap(redo_cell_map_, other->redo_cell_map_);
    std::swap(selection_, other->selection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandMutateCellsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandMutateCellsArchive_descriptor_;
  metadata.reflection = CommandMutateCellsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandDisableFilterRulesForColumnArchive::kSuperFieldNumber;
const int CommandDisableFilterRulesForColumnArchive::kColumnIndexFieldNumber;
const int CommandDisableFilterRulesForColumnArchive::kRuleIndicesFieldNumber;
#endif  // !_MSC_VER

CommandDisableFilterRulesForColumnArchive::CommandDisableFilterRulesForColumnArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandDisableFilterRulesForColumnArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
}

CommandDisableFilterRulesForColumnArchive::CommandDisableFilterRulesForColumnArchive(const CommandDisableFilterRulesForColumnArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandDisableFilterRulesForColumnArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  column_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandDisableFilterRulesForColumnArchive::~CommandDisableFilterRulesForColumnArchive() {
  SharedDtor();
}

void CommandDisableFilterRulesForColumnArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandDisableFilterRulesForColumnArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandDisableFilterRulesForColumnArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandDisableFilterRulesForColumnArchive_descriptor_;
}

const CommandDisableFilterRulesForColumnArchive& CommandDisableFilterRulesForColumnArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandDisableFilterRulesForColumnArchive* CommandDisableFilterRulesForColumnArchive::default_instance_ = NULL;

CommandDisableFilterRulesForColumnArchive* CommandDisableFilterRulesForColumnArchive::New() const {
  return new CommandDisableFilterRulesForColumnArchive;
}

void CommandDisableFilterRulesForColumnArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    column_index_ = 0u;
  }
  rule_indices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandDisableFilterRulesForColumnArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_column_index;
        break;
      }

      // required uint32 column_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_column_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &column_index_)));
          set_has_column_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rule_indices;
        break;
      }

      // repeated uint32 rule_indices = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rule_indices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_rule_indices())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rule_indices())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rule_indices;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandDisableFilterRulesForColumnArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required uint32 column_index = 2;
  if (has_column_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->column_index(), output);
  }

  // repeated uint32 rule_indices = 3;
  for (int i = 0; i < this->rule_indices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->rule_indices(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandDisableFilterRulesForColumnArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required uint32 column_index = 2;
  if (has_column_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->column_index(), target);
  }

  // repeated uint32 rule_indices = 3;
  for (int i = 0; i < this->rule_indices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->rule_indices(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandDisableFilterRulesForColumnArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required uint32 column_index = 2;
    if (has_column_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->column_index());
    }

  }
  // repeated uint32 rule_indices = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->rule_indices_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rule_indices(i));
    }
    total_size += 1 * this->rule_indices_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandDisableFilterRulesForColumnArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandDisableFilterRulesForColumnArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandDisableFilterRulesForColumnArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandDisableFilterRulesForColumnArchive::MergeFrom(const CommandDisableFilterRulesForColumnArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  rule_indices_.MergeFrom(from.rule_indices_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_column_index()) {
      set_column_index(from.column_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandDisableFilterRulesForColumnArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandDisableFilterRulesForColumnArchive::CopyFrom(const CommandDisableFilterRulesForColumnArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDisableFilterRulesForColumnArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandDisableFilterRulesForColumnArchive::Swap(CommandDisableFilterRulesForColumnArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(column_index_, other->column_index_);
    rule_indices_.Swap(&other->rule_indices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandDisableFilterRulesForColumnArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandDisableFilterRulesForColumnArchive_descriptor_;
  metadata.reflection = CommandDisableFilterRulesForColumnArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetTextStyleArchive::kSuperFieldNumber;
const int CommandSetTextStyleArchive::kRegionFieldNumber;
const int CommandSetTextStyleArchive::kUndoCellMapFieldNumber;
const int CommandSetTextStyleArchive::kRedoCellMapFieldNumber;
const int CommandSetTextStyleArchive::kSubcommandsFieldNumber;
#endif  // !_MSC_VER

CommandSetTextStyleArchive::CommandSetTextStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetTextStyleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  region_ = const_cast< ::TST::CellRegion*>(&::TST::CellRegion::default_instance());
  undo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  redo_cell_map_ = const_cast< ::TST::CellMapArchive*>(&::TST::CellMapArchive::default_instance());
  subcommands_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommandSetTextStyleArchive::CommandSetTextStyleArchive(const CommandSetTextStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetTextStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  region_ = NULL;
  undo_cell_map_ = NULL;
  redo_cell_map_ = NULL;
  subcommands_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetTextStyleArchive::~CommandSetTextStyleArchive() {
  SharedDtor();
}

void CommandSetTextStyleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete region_;
    delete undo_cell_map_;
    delete redo_cell_map_;
    delete subcommands_;
  }
}

void CommandSetTextStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetTextStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetTextStyleArchive_descriptor_;
}

const CommandSetTextStyleArchive& CommandSetTextStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetTextStyleArchive* CommandSetTextStyleArchive::default_instance_ = NULL;

CommandSetTextStyleArchive* CommandSetTextStyleArchive::New() const {
  return new CommandSetTextStyleArchive;
}

void CommandSetTextStyleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_region()) {
      if (region_ != NULL) region_->::TST::CellRegion::Clear();
    }
    if (has_undo_cell_map()) {
      if (undo_cell_map_ != NULL) undo_cell_map_->::TST::CellMapArchive::Clear();
    }
    if (has_redo_cell_map()) {
      if (redo_cell_map_ != NULL) redo_cell_map_->::TST::CellMapArchive::Clear();
    }
    if (has_subcommands()) {
      if (subcommands_ != NULL) subcommands_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetTextStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_region;
        break;
      }

      // required .TST.CellRegion region = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_undo_cell_map;
        break;
      }

      // optional .TST.CellMapArchive undo_cell_map = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_redo_cell_map;
        break;
      }

      // optional .TST.CellMapArchive redo_cell_map = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redo_cell_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redo_cell_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_subcommands;
        break;
      }

      // optional .TSP.Reference subcommands = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subcommands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subcommands()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetTextStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TST.CellRegion region = 2;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->region(), output);
  }

  // optional .TST.CellMapArchive undo_cell_map = 3;
  if (has_undo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->undo_cell_map(), output);
  }

  // optional .TST.CellMapArchive redo_cell_map = 4;
  if (has_redo_cell_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->redo_cell_map(), output);
  }

  // optional .TSP.Reference subcommands = 5;
  if (has_subcommands()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->subcommands(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetTextStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TST.CellRegion region = 2;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->region(), target);
  }

  // optional .TST.CellMapArchive undo_cell_map = 3;
  if (has_undo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->undo_cell_map(), target);
  }

  // optional .TST.CellMapArchive redo_cell_map = 4;
  if (has_redo_cell_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->redo_cell_map(), target);
  }

  // optional .TSP.Reference subcommands = 5;
  if (has_subcommands()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->subcommands(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetTextStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TST.CellRegion region = 2;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->region());
    }

    // optional .TST.CellMapArchive undo_cell_map = 3;
    if (has_undo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_cell_map());
    }

    // optional .TST.CellMapArchive redo_cell_map = 4;
    if (has_redo_cell_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redo_cell_map());
    }

    // optional .TSP.Reference subcommands = 5;
    if (has_subcommands()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subcommands());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetTextStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetTextStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetTextStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetTextStyleArchive::MergeFrom(const CommandSetTextStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_region()) {
      mutable_region()->::TST::CellRegion::MergeFrom(from.region());
    }
    if (from.has_undo_cell_map()) {
      mutable_undo_cell_map()->::TST::CellMapArchive::MergeFrom(from.undo_cell_map());
    }
    if (from.has_redo_cell_map()) {
      mutable_redo_cell_map()->::TST::CellMapArchive::MergeFrom(from.redo_cell_map());
    }
    if (from.has_subcommands()) {
      mutable_subcommands()->::TSP::Reference::MergeFrom(from.subcommands());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetTextStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetTextStyleArchive::CopyFrom(const CommandSetTextStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetTextStyleArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_region()) {
    if (!this->region().IsInitialized()) return false;
  }
  if (has_undo_cell_map()) {
    if (!this->undo_cell_map().IsInitialized()) return false;
  }
  if (has_redo_cell_map()) {
    if (!this->redo_cell_map().IsInitialized()) return false;
  }
  if (has_subcommands()) {
    if (!this->subcommands().IsInitialized()) return false;
  }
  return true;
}

void CommandSetTextStyleArchive::Swap(CommandSetTextStyleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(region_, other->region_);
    std::swap(undo_cell_map_, other->undo_cell_map_);
    std::swap(redo_cell_map_, other->redo_cell_map_);
    std::swap(subcommands_, other->subcommands_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetTextStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetTextStyleArchive_descriptor_;
  metadata.reflection = CommandSetTextStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandNotifyForTransformingArchive::kSuperFieldNumber;
#endif  // !_MSC_VER

CommandNotifyForTransformingArchive::CommandNotifyForTransformingArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandNotifyForTransformingArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
}

CommandNotifyForTransformingArchive::CommandNotifyForTransformingArchive(const CommandNotifyForTransformingArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandNotifyForTransformingArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandNotifyForTransformingArchive::~CommandNotifyForTransformingArchive() {
  SharedDtor();
}

void CommandNotifyForTransformingArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void CommandNotifyForTransformingArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandNotifyForTransformingArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandNotifyForTransformingArchive_descriptor_;
}

const CommandNotifyForTransformingArchive& CommandNotifyForTransformingArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandNotifyForTransformingArchive* CommandNotifyForTransformingArchive::default_instance_ = NULL;

CommandNotifyForTransformingArchive* CommandNotifyForTransformingArchive::New() const {
  return new CommandNotifyForTransformingArchive;
}

void CommandNotifyForTransformingArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandNotifyForTransformingArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandNotifyForTransformingArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandNotifyForTransformingArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandNotifyForTransformingArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandNotifyForTransformingArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandNotifyForTransformingArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandNotifyForTransformingArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandNotifyForTransformingArchive::MergeFrom(const CommandNotifyForTransformingArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandNotifyForTransformingArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandNotifyForTransformingArchive::CopyFrom(const CommandNotifyForTransformingArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandNotifyForTransformingArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void CommandNotifyForTransformingArchive::Swap(CommandNotifyForTransformingArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandNotifyForTransformingArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandNotifyForTransformingArchive_descriptor_;
  metadata.reflection = CommandNotifyForTransformingArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetStorageLanguageArchive::kSuperFieldNumber;
const int CommandSetStorageLanguageArchive::kStorageFieldNumber;
const int CommandSetStorageLanguageArchive::kLanguageFieldNumber;
const int CommandSetStorageLanguageArchive::kRangeLocationFieldNumber;
const int CommandSetStorageLanguageArchive::kRangeLengthFieldNumber;
const int CommandSetStorageLanguageArchive::kUndoTransactionFieldNumber;
#endif  // !_MSC_VER

CommandSetStorageLanguageArchive::CommandSetStorageLanguageArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetStorageLanguageArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  storage_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  undo_transaction_ = const_cast< ::TSWP::UndoTransaction*>(&::TSWP::UndoTransaction::default_instance());
}

CommandSetStorageLanguageArchive::CommandSetStorageLanguageArchive(const CommandSetStorageLanguageArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetStorageLanguageArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  storage_ = NULL;
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  range_location_ = 0u;
  range_length_ = 0u;
  undo_transaction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetStorageLanguageArchive::~CommandSetStorageLanguageArchive() {
  SharedDtor();
}

void CommandSetStorageLanguageArchive::SharedDtor() {
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    delete language_;
  }
  if (this != default_instance_) {
    delete super_;
    delete storage_;
    delete undo_transaction_;
  }
}

void CommandSetStorageLanguageArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetStorageLanguageArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetStorageLanguageArchive_descriptor_;
}

const CommandSetStorageLanguageArchive& CommandSetStorageLanguageArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetStorageLanguageArchive* CommandSetStorageLanguageArchive::default_instance_ = NULL;

CommandSetStorageLanguageArchive* CommandSetStorageLanguageArchive::New() const {
  return new CommandSetStorageLanguageArchive;
}

void CommandSetStorageLanguageArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_storage()) {
      if (storage_ != NULL) storage_->::TSP::Reference::Clear();
    }
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::kEmptyString) {
        language_->clear();
      }
    }
    range_location_ = 0u;
    range_length_ = 0u;
    if (has_undo_transaction()) {
      if (undo_transaction_ != NULL) undo_transaction_->::TSWP::UndoTransaction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetStorageLanguageArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storage;
        break;
      }

      // required .TSP.Reference storage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_language;
        break;
      }

      // required string language = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_range_location;
        break;
      }

      // required uint32 range_location = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_range_location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range_location_)));
          set_has_range_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_range_length;
        break;
      }

      // required uint32 range_length = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_range_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range_length_)));
          set_has_range_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_undo_transaction;
        break;
      }

      // optional .TSWP.UndoTransaction undo_transaction = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undo_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undo_transaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetStorageLanguageArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference storage = 2;
  if (has_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->storage(), output);
  }

  // required string language = 3;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->language(), output);
  }

  // required uint32 range_location = 4;
  if (has_range_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->range_location(), output);
  }

  // required uint32 range_length = 5;
  if (has_range_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->range_length(), output);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 6;
  if (has_undo_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->undo_transaction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetStorageLanguageArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference storage = 2;
  if (has_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->storage(), target);
  }

  // required string language = 3;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->language(), target);
  }

  // required uint32 range_location = 4;
  if (has_range_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->range_location(), target);
  }

  // required uint32 range_length = 5;
  if (has_range_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->range_length(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 6;
  if (has_undo_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->undo_transaction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetStorageLanguageArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference storage = 2;
    if (has_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage());
    }

    // required string language = 3;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // required uint32 range_location = 4;
    if (has_range_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->range_location());
    }

    // required uint32 range_length = 5;
    if (has_range_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->range_length());
    }

    // optional .TSWP.UndoTransaction undo_transaction = 6;
    if (has_undo_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->undo_transaction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetStorageLanguageArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetStorageLanguageArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetStorageLanguageArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetStorageLanguageArchive::MergeFrom(const CommandSetStorageLanguageArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_storage()) {
      mutable_storage()->::TSP::Reference::MergeFrom(from.storage());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_range_location()) {
      set_range_location(from.range_location());
    }
    if (from.has_range_length()) {
      set_range_length(from.range_length());
    }
    if (from.has_undo_transaction()) {
      mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(from.undo_transaction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetStorageLanguageArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetStorageLanguageArchive::CopyFrom(const CommandSetStorageLanguageArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetStorageLanguageArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_storage()) {
    if (!this->storage().IsInitialized()) return false;
  }
  if (has_undo_transaction()) {
    if (!this->undo_transaction().IsInitialized()) return false;
  }
  return true;
}

void CommandSetStorageLanguageArchive::Swap(CommandSetStorageLanguageArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(storage_, other->storage_);
    std::swap(language_, other->language_);
    std::swap(range_location_, other->range_location_);
    std::swap(range_length_, other->range_length_);
    std::swap(undo_transaction_, other->undo_transaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetStorageLanguageArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetStorageLanguageArchive_descriptor_;
  metadata.reflection = CommandSetStorageLanguageArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandSetSortOrderArchive::kSuperFieldNumber;
const int CommandSetSortOrderArchive::kOldSortOrderFieldNumber;
const int CommandSetSortOrderArchive::kNewSortOrderFieldNumber;
#endif  // !_MSC_VER

CommandSetSortOrderArchive::CommandSetSortOrderArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandSetSortOrderArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  old_sort_order_ = const_cast< ::TST::TableSortOrderArchive*>(&::TST::TableSortOrderArchive::default_instance());
  new_sort_order_ = const_cast< ::TST::TableSortOrderArchive*>(&::TST::TableSortOrderArchive::default_instance());
}

CommandSetSortOrderArchive::CommandSetSortOrderArchive(const CommandSetSortOrderArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandSetSortOrderArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  old_sort_order_ = NULL;
  new_sort_order_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandSetSortOrderArchive::~CommandSetSortOrderArchive() {
  SharedDtor();
}

void CommandSetSortOrderArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete old_sort_order_;
    delete new_sort_order_;
  }
}

void CommandSetSortOrderArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandSetSortOrderArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandSetSortOrderArchive_descriptor_;
}

const CommandSetSortOrderArchive& CommandSetSortOrderArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandSetSortOrderArchive* CommandSetSortOrderArchive::default_instance_ = NULL;

CommandSetSortOrderArchive* CommandSetSortOrderArchive::New() const {
  return new CommandSetSortOrderArchive;
}

void CommandSetSortOrderArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_old_sort_order()) {
      if (old_sort_order_ != NULL) old_sort_order_->::TST::TableSortOrderArchive::Clear();
    }
    if (has_new_sort_order()) {
      if (new_sort_order_ != NULL) new_sort_order_->::TST::TableSortOrderArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandSetSortOrderArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_old_sort_order;
        break;
      }

      // optional .TST.TableSortOrderArchive old_sort_order = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_sort_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_sort_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_sort_order;
        break;
      }

      // optional .TST.TableSortOrderArchive new_sort_order = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_sort_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_sort_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandSetSortOrderArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TST.TableSortOrderArchive old_sort_order = 2;
  if (has_old_sort_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->old_sort_order(), output);
  }

  // optional .TST.TableSortOrderArchive new_sort_order = 3;
  if (has_new_sort_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->new_sort_order(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandSetSortOrderArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TST.TableSortOrderArchive old_sort_order = 2;
  if (has_old_sort_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->old_sort_order(), target);
  }

  // optional .TST.TableSortOrderArchive new_sort_order = 3;
  if (has_new_sort_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->new_sort_order(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandSetSortOrderArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TST.TableSortOrderArchive old_sort_order = 2;
    if (has_old_sort_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_sort_order());
    }

    // optional .TST.TableSortOrderArchive new_sort_order = 3;
    if (has_new_sort_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_sort_order());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandSetSortOrderArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandSetSortOrderArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandSetSortOrderArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandSetSortOrderArchive::MergeFrom(const CommandSetSortOrderArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_old_sort_order()) {
      mutable_old_sort_order()->::TST::TableSortOrderArchive::MergeFrom(from.old_sort_order());
    }
    if (from.has_new_sort_order()) {
      mutable_new_sort_order()->::TST::TableSortOrderArchive::MergeFrom(from.new_sort_order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandSetSortOrderArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandSetSortOrderArchive::CopyFrom(const CommandSetSortOrderArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetSortOrderArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_old_sort_order()) {
    if (!this->old_sort_order().IsInitialized()) return false;
  }
  if (has_new_sort_order()) {
    if (!this->new_sort_order().IsInitialized()) return false;
  }
  return true;
}

void CommandSetSortOrderArchive::Swap(CommandSetSortOrderArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(old_sort_order_, other->old_sort_order_);
    std::swap(new_sort_order_, other->new_sort_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandSetSortOrderArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandSetSortOrderArchive_descriptor_;
  metadata.reflection = CommandSetSortOrderArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandRewriteSortOrderForTectonicShiftArchive::kSuperFieldNumber;
const int CommandRewriteSortOrderForTectonicShiftArchive::kTectonicShiftFieldNumber;
const int CommandRewriteSortOrderForTectonicShiftArchive::kOldSortOrderFieldNumber;
const int CommandRewriteSortOrderForTectonicShiftArchive::kNewSortOrderFieldNumber;
#endif  // !_MSC_VER

CommandRewriteSortOrderForTectonicShiftArchive::CommandRewriteSortOrderForTectonicShiftArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandRewriteSortOrderForTectonicShiftArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  tectonic_shift_ = const_cast< ::TSCE::TectonicShiftArchive*>(&::TSCE::TectonicShiftArchive::default_instance());
  old_sort_order_ = const_cast< ::TST::TableSortOrderArchive*>(&::TST::TableSortOrderArchive::default_instance());
  new_sort_order_ = const_cast< ::TST::TableSortOrderArchive*>(&::TST::TableSortOrderArchive::default_instance());
}

CommandRewriteSortOrderForTectonicShiftArchive::CommandRewriteSortOrderForTectonicShiftArchive(const CommandRewriteSortOrderForTectonicShiftArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandRewriteSortOrderForTectonicShiftArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  tectonic_shift_ = NULL;
  old_sort_order_ = NULL;
  new_sort_order_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandRewriteSortOrderForTectonicShiftArchive::~CommandRewriteSortOrderForTectonicShiftArchive() {
  SharedDtor();
}

void CommandRewriteSortOrderForTectonicShiftArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete tectonic_shift_;
    delete old_sort_order_;
    delete new_sort_order_;
  }
}

void CommandRewriteSortOrderForTectonicShiftArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandRewriteSortOrderForTectonicShiftArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandRewriteSortOrderForTectonicShiftArchive_descriptor_;
}

const CommandRewriteSortOrderForTectonicShiftArchive& CommandRewriteSortOrderForTectonicShiftArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandRewriteSortOrderForTectonicShiftArchive* CommandRewriteSortOrderForTectonicShiftArchive::default_instance_ = NULL;

CommandRewriteSortOrderForTectonicShiftArchive* CommandRewriteSortOrderForTectonicShiftArchive::New() const {
  return new CommandRewriteSortOrderForTectonicShiftArchive;
}

void CommandRewriteSortOrderForTectonicShiftArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_tectonic_shift()) {
      if (tectonic_shift_ != NULL) tectonic_shift_->::TSCE::TectonicShiftArchive::Clear();
    }
    if (has_old_sort_order()) {
      if (old_sort_order_ != NULL) old_sort_order_->::TST::TableSortOrderArchive::Clear();
    }
    if (has_new_sort_order()) {
      if (new_sort_order_ != NULL) new_sort_order_->::TST::TableSortOrderArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandRewriteSortOrderForTectonicShiftArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tectonic_shift;
        break;
      }

      // required .TSCE.TectonicShiftArchive tectonic_shift = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tectonic_shift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tectonic_shift()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_old_sort_order;
        break;
      }

      // optional .TST.TableSortOrderArchive old_sort_order = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_sort_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_sort_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_new_sort_order;
        break;
      }

      // optional .TST.TableSortOrderArchive new_sort_order = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_sort_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_sort_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandRewriteSortOrderForTectonicShiftArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSCE.TectonicShiftArchive tectonic_shift = 2;
  if (has_tectonic_shift()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tectonic_shift(), output);
  }

  // optional .TST.TableSortOrderArchive old_sort_order = 3;
  if (has_old_sort_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->old_sort_order(), output);
  }

  // optional .TST.TableSortOrderArchive new_sort_order = 4;
  if (has_new_sort_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->new_sort_order(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandRewriteSortOrderForTectonicShiftArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSCE.TectonicShiftArchive tectonic_shift = 2;
  if (has_tectonic_shift()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tectonic_shift(), target);
  }

  // optional .TST.TableSortOrderArchive old_sort_order = 3;
  if (has_old_sort_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->old_sort_order(), target);
  }

  // optional .TST.TableSortOrderArchive new_sort_order = 4;
  if (has_new_sort_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->new_sort_order(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandRewriteSortOrderForTectonicShiftArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSCE.TectonicShiftArchive tectonic_shift = 2;
    if (has_tectonic_shift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tectonic_shift());
    }

    // optional .TST.TableSortOrderArchive old_sort_order = 3;
    if (has_old_sort_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_sort_order());
    }

    // optional .TST.TableSortOrderArchive new_sort_order = 4;
    if (has_new_sort_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_sort_order());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandRewriteSortOrderForTectonicShiftArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandRewriteSortOrderForTectonicShiftArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandRewriteSortOrderForTectonicShiftArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandRewriteSortOrderForTectonicShiftArchive::MergeFrom(const CommandRewriteSortOrderForTectonicShiftArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_tectonic_shift()) {
      mutable_tectonic_shift()->::TSCE::TectonicShiftArchive::MergeFrom(from.tectonic_shift());
    }
    if (from.has_old_sort_order()) {
      mutable_old_sort_order()->::TST::TableSortOrderArchive::MergeFrom(from.old_sort_order());
    }
    if (from.has_new_sort_order()) {
      mutable_new_sort_order()->::TST::TableSortOrderArchive::MergeFrom(from.new_sort_order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandRewriteSortOrderForTectonicShiftArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandRewriteSortOrderForTectonicShiftArchive::CopyFrom(const CommandRewriteSortOrderForTectonicShiftArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteSortOrderForTectonicShiftArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_tectonic_shift()) {
    if (!this->tectonic_shift().IsInitialized()) return false;
  }
  if (has_old_sort_order()) {
    if (!this->old_sort_order().IsInitialized()) return false;
  }
  if (has_new_sort_order()) {
    if (!this->new_sort_order().IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteSortOrderForTectonicShiftArchive::Swap(CommandRewriteSortOrderForTectonicShiftArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(tectonic_shift_, other->tectonic_shift_);
    std::swap(old_sort_order_, other->old_sort_order_);
    std::swap(new_sort_order_, other->new_sort_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandRewriteSortOrderForTectonicShiftArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandRewriteSortOrderForTectonicShiftArchive_descriptor_;
  metadata.reflection = CommandRewriteSortOrderForTectonicShiftArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandRewriteSortOrderForSortArchive::kSuperFieldNumber;
const int CommandRewriteSortOrderForSortArchive::kSortMappingFieldNumber;
const int CommandRewriteSortOrderForSortArchive::kOldSortOrderFieldNumber;
const int CommandRewriteSortOrderForSortArchive::kNewSortOrderFieldNumber;
#endif  // !_MSC_VER

CommandRewriteSortOrderForSortArchive::CommandRewriteSortOrderForSortArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandRewriteSortOrderForSortArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  sort_mapping_ = const_cast< ::TSK::ShuffleMappingArchive*>(&::TSK::ShuffleMappingArchive::default_instance());
  old_sort_order_ = const_cast< ::TST::TableSortOrderArchive*>(&::TST::TableSortOrderArchive::default_instance());
  new_sort_order_ = const_cast< ::TST::TableSortOrderArchive*>(&::TST::TableSortOrderArchive::default_instance());
}

CommandRewriteSortOrderForSortArchive::CommandRewriteSortOrderForSortArchive(const CommandRewriteSortOrderForSortArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandRewriteSortOrderForSortArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  sort_mapping_ = NULL;
  old_sort_order_ = NULL;
  new_sort_order_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandRewriteSortOrderForSortArchive::~CommandRewriteSortOrderForSortArchive() {
  SharedDtor();
}

void CommandRewriteSortOrderForSortArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete sort_mapping_;
    delete old_sort_order_;
    delete new_sort_order_;
  }
}

void CommandRewriteSortOrderForSortArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandRewriteSortOrderForSortArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandRewriteSortOrderForSortArchive_descriptor_;
}

const CommandRewriteSortOrderForSortArchive& CommandRewriteSortOrderForSortArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandRewriteSortOrderForSortArchive* CommandRewriteSortOrderForSortArchive::default_instance_ = NULL;

CommandRewriteSortOrderForSortArchive* CommandRewriteSortOrderForSortArchive::New() const {
  return new CommandRewriteSortOrderForSortArchive;
}

void CommandRewriteSortOrderForSortArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_sort_mapping()) {
      if (sort_mapping_ != NULL) sort_mapping_->::TSK::ShuffleMappingArchive::Clear();
    }
    if (has_old_sort_order()) {
      if (old_sort_order_ != NULL) old_sort_order_->::TST::TableSortOrderArchive::Clear();
    }
    if (has_new_sort_order()) {
      if (new_sort_order_ != NULL) new_sort_order_->::TST::TableSortOrderArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandRewriteSortOrderForSortArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sort_mapping;
        break;
      }

      // required .TSK.ShuffleMappingArchive sort_mapping = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sort_mapping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sort_mapping()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_old_sort_order;
        break;
      }

      // optional .TST.TableSortOrderArchive old_sort_order = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_sort_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_sort_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_new_sort_order;
        break;
      }

      // optional .TST.TableSortOrderArchive new_sort_order = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_sort_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_sort_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandRewriteSortOrderForSortArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSK.ShuffleMappingArchive sort_mapping = 2;
  if (has_sort_mapping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sort_mapping(), output);
  }

  // optional .TST.TableSortOrderArchive old_sort_order = 3;
  if (has_old_sort_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->old_sort_order(), output);
  }

  // optional .TST.TableSortOrderArchive new_sort_order = 4;
  if (has_new_sort_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->new_sort_order(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandRewriteSortOrderForSortArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSK.ShuffleMappingArchive sort_mapping = 2;
  if (has_sort_mapping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sort_mapping(), target);
  }

  // optional .TST.TableSortOrderArchive old_sort_order = 3;
  if (has_old_sort_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->old_sort_order(), target);
  }

  // optional .TST.TableSortOrderArchive new_sort_order = 4;
  if (has_new_sort_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->new_sort_order(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandRewriteSortOrderForSortArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSK.ShuffleMappingArchive sort_mapping = 2;
    if (has_sort_mapping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sort_mapping());
    }

    // optional .TST.TableSortOrderArchive old_sort_order = 3;
    if (has_old_sort_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_sort_order());
    }

    // optional .TST.TableSortOrderArchive new_sort_order = 4;
    if (has_new_sort_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_sort_order());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandRewriteSortOrderForSortArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandRewriteSortOrderForSortArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandRewriteSortOrderForSortArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandRewriteSortOrderForSortArchive::MergeFrom(const CommandRewriteSortOrderForSortArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_sort_mapping()) {
      mutable_sort_mapping()->::TSK::ShuffleMappingArchive::MergeFrom(from.sort_mapping());
    }
    if (from.has_old_sort_order()) {
      mutable_old_sort_order()->::TST::TableSortOrderArchive::MergeFrom(from.old_sort_order());
    }
    if (from.has_new_sort_order()) {
      mutable_new_sort_order()->::TST::TableSortOrderArchive::MergeFrom(from.new_sort_order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandRewriteSortOrderForSortArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandRewriteSortOrderForSortArchive::CopyFrom(const CommandRewriteSortOrderForSortArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteSortOrderForSortArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_sort_mapping()) {
    if (!this->sort_mapping().IsInitialized()) return false;
  }
  if (has_old_sort_order()) {
    if (!this->old_sort_order().IsInitialized()) return false;
  }
  if (has_new_sort_order()) {
    if (!this->new_sort_order().IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteSortOrderForSortArchive::Swap(CommandRewriteSortOrderForSortArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(sort_mapping_, other->sort_mapping_);
    std::swap(old_sort_order_, other->old_sort_order_);
    std::swap(new_sort_order_, other->new_sort_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandRewriteSortOrderForSortArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandRewriteSortOrderForSortArchive_descriptor_;
  metadata.reflection = CommandRewriteSortOrderForSortArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandRewriteSortOrderForTableResizeArchive::kSuperFieldNumber;
const int CommandRewriteSortOrderForTableResizeArchive::kOldSortOrderFieldNumber;
const int CommandRewriteSortOrderForTableResizeArchive::kNewSortOrderFieldNumber;
#endif  // !_MSC_VER

CommandRewriteSortOrderForTableResizeArchive::CommandRewriteSortOrderForTableResizeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandRewriteSortOrderForTableResizeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TST::TableCommandArchive*>(&::TST::TableCommandArchive::default_instance());
  old_sort_order_ = const_cast< ::TST::TableSortOrderArchive*>(&::TST::TableSortOrderArchive::default_instance());
  new_sort_order_ = const_cast< ::TST::TableSortOrderArchive*>(&::TST::TableSortOrderArchive::default_instance());
}

CommandRewriteSortOrderForTableResizeArchive::CommandRewriteSortOrderForTableResizeArchive(const CommandRewriteSortOrderForTableResizeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandRewriteSortOrderForTableResizeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  old_sort_order_ = NULL;
  new_sort_order_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandRewriteSortOrderForTableResizeArchive::~CommandRewriteSortOrderForTableResizeArchive() {
  SharedDtor();
}

void CommandRewriteSortOrderForTableResizeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete old_sort_order_;
    delete new_sort_order_;
  }
}

void CommandRewriteSortOrderForTableResizeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandRewriteSortOrderForTableResizeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandRewriteSortOrderForTableResizeArchive_descriptor_;
}

const CommandRewriteSortOrderForTableResizeArchive& CommandRewriteSortOrderForTableResizeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSTCommandArchives_2eproto();
  return *default_instance_;
}

CommandRewriteSortOrderForTableResizeArchive* CommandRewriteSortOrderForTableResizeArchive::default_instance_ = NULL;

CommandRewriteSortOrderForTableResizeArchive* CommandRewriteSortOrderForTableResizeArchive::New() const {
  return new CommandRewriteSortOrderForTableResizeArchive;
}

void CommandRewriteSortOrderForTableResizeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TST::TableCommandArchive::Clear();
    }
    if (has_old_sort_order()) {
      if (old_sort_order_ != NULL) old_sort_order_->::TST::TableSortOrderArchive::Clear();
    }
    if (has_new_sort_order()) {
      if (new_sort_order_ != NULL) new_sort_order_->::TST::TableSortOrderArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandRewriteSortOrderForTableResizeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TST.TableCommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_old_sort_order;
        break;
      }

      // optional .TST.TableSortOrderArchive old_sort_order = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_sort_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_sort_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_sort_order;
        break;
      }

      // optional .TST.TableSortOrderArchive new_sort_order = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_sort_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_sort_order()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandRewriteSortOrderForTableResizeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TST.TableSortOrderArchive old_sort_order = 2;
  if (has_old_sort_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->old_sort_order(), output);
  }

  // optional .TST.TableSortOrderArchive new_sort_order = 3;
  if (has_new_sort_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->new_sort_order(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandRewriteSortOrderForTableResizeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TST.TableCommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TST.TableSortOrderArchive old_sort_order = 2;
  if (has_old_sort_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->old_sort_order(), target);
  }

  // optional .TST.TableSortOrderArchive new_sort_order = 3;
  if (has_new_sort_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->new_sort_order(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandRewriteSortOrderForTableResizeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TST.TableCommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TST.TableSortOrderArchive old_sort_order = 2;
    if (has_old_sort_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_sort_order());
    }

    // optional .TST.TableSortOrderArchive new_sort_order = 3;
    if (has_new_sort_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_sort_order());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandRewriteSortOrderForTableResizeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandRewriteSortOrderForTableResizeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandRewriteSortOrderForTableResizeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandRewriteSortOrderForTableResizeArchive::MergeFrom(const CommandRewriteSortOrderForTableResizeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TST::TableCommandArchive::MergeFrom(from.super());
    }
    if (from.has_old_sort_order()) {
      mutable_old_sort_order()->::TST::TableSortOrderArchive::MergeFrom(from.old_sort_order());
    }
    if (from.has_new_sort_order()) {
      mutable_new_sort_order()->::TST::TableSortOrderArchive::MergeFrom(from.new_sort_order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandRewriteSortOrderForTableResizeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandRewriteSortOrderForTableResizeArchive::CopyFrom(const CommandRewriteSortOrderForTableResizeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteSortOrderForTableResizeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_old_sort_order()) {
    if (!this->old_sort_order().IsInitialized()) return false;
  }
  if (has_new_sort_order()) {
    if (!this->new_sort_order().IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteSortOrderForTableResizeArchive::Swap(CommandRewriteSortOrderForTableResizeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(old_sort_order_, other->old_sort_order_);
    std::swap(new_sort_order_, other->new_sort_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandRewriteSortOrderForTableResizeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandRewriteSortOrderForTableResizeArchive_descriptor_;
  metadata.reflection = CommandRewriteSortOrderForTableResizeArchive_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TST

// @@protoc_insertion_point(global_scope)
