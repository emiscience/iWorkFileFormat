// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSSArchives.proto

#ifndef PROTOBUF_TSSArchives_2eproto__INCLUDED
#define PROTOBUF_TSSArchives_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
#include "TSKArchives.pb.h"
// @@protoc_insertion_point(includes)

namespace TSS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TSSArchives_2eproto();
void protobuf_AssignDesc_TSSArchives_2eproto();
void protobuf_ShutdownFile_TSSArchives_2eproto();

class StyleArchive;
class StylesheetArchive;
class StylesheetArchive_IdentifiedStyleEntry;
class StylesheetArchive_StyleChildrenEntry;
class ThemeArchive;
class ApplyThemeCommandArchive;
class ApplyThemeChildCommandArchive;
class ReapUnusedStyleCommandArchive;
class ReapUnusedStyleCommandArchive_IdentifiedStyleEntry;
class StyleUpdatePropertyMapCommandArchive;
class ThemeReplacePresetCommandArchive;
class ThemeReplaceColorPresetCommandArchive;
class ThemeAddStylePresetCommandArchive;
class ThemeRemoveStylePresetCommandArchive;
class ThemeMovePresetCommandArchive;
class ThemeReplaceStylePresetCommandArchive;

enum ValueType {
  ObjectType = 0,
  IntType = 1,
  FloatType = 2,
  DoubleType = 3
};
bool ValueType_IsValid(int value);
const ValueType ValueType_MIN = ObjectType;
const ValueType ValueType_MAX = DoubleType;
const int ValueType_ARRAYSIZE = ValueType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ValueType_descriptor();
inline const ::std::string& ValueType_Name(ValueType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ValueType_descriptor(), value);
}
inline bool ValueType_Parse(
    const ::std::string& name, ValueType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ValueType>(
    ValueType_descriptor(), name, value);
}
// ===================================================================

class StyleArchive : public ::google::protobuf::Message {
 public:
  StyleArchive();
  virtual ~StyleArchive();

  StyleArchive(const StyleArchive& from);

  inline StyleArchive& operator=(const StyleArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StyleArchive& default_instance();

  void Swap(StyleArchive* other);

  // implements Message ----------------------------------------------

  StyleArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StyleArchive& from);
  void MergeFrom(const StyleArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string style_identifier = 2;
  inline bool has_style_identifier() const;
  inline void clear_style_identifier();
  static const int kStyleIdentifierFieldNumber = 2;
  inline const ::std::string& style_identifier() const;
  inline void set_style_identifier(const ::std::string& value);
  inline void set_style_identifier(const char* value);
  inline void set_style_identifier(const char* value, size_t size);
  inline ::std::string* mutable_style_identifier();
  inline ::std::string* release_style_identifier();
  inline void set_allocated_style_identifier(::std::string* style_identifier);

  // optional .TSP.Reference parent = 3;
  inline bool has_parent() const;
  inline void clear_parent();
  static const int kParentFieldNumber = 3;
  inline const ::TSP::Reference& parent() const;
  inline ::TSP::Reference* mutable_parent();
  inline ::TSP::Reference* release_parent();
  inline void set_allocated_parent(::TSP::Reference* parent);

  // optional bool is_variation = 4 [default = false];
  inline bool has_is_variation() const;
  inline void clear_is_variation();
  static const int kIsVariationFieldNumber = 4;
  inline bool is_variation() const;
  inline void set_is_variation(bool value);

  // optional .TSP.Reference stylesheet = 5;
  inline bool has_stylesheet() const;
  inline void clear_stylesheet();
  static const int kStylesheetFieldNumber = 5;
  inline const ::TSP::Reference& stylesheet() const;
  inline ::TSP::Reference* mutable_stylesheet();
  inline ::TSP::Reference* release_stylesheet();
  inline void set_allocated_stylesheet(::TSP::Reference* stylesheet);

  // @@protoc_insertion_point(class_scope:TSS.StyleArchive)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_style_identifier();
  inline void clear_has_style_identifier();
  inline void set_has_parent();
  inline void clear_has_parent();
  inline void set_has_is_variation();
  inline void clear_has_is_variation();
  inline void set_has_stylesheet();
  inline void clear_has_stylesheet();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* style_identifier_;
  ::TSP::Reference* parent_;
  ::TSP::Reference* stylesheet_;
  bool is_variation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_TSSArchives_2eproto();
  friend void protobuf_AssignDesc_TSSArchives_2eproto();
  friend void protobuf_ShutdownFile_TSSArchives_2eproto();

  void InitAsDefaultInstance();
  static StyleArchive* default_instance_;
};
// -------------------------------------------------------------------

class StylesheetArchive_IdentifiedStyleEntry : public ::google::protobuf::Message {
 public:
  StylesheetArchive_IdentifiedStyleEntry();
  virtual ~StylesheetArchive_IdentifiedStyleEntry();

  StylesheetArchive_IdentifiedStyleEntry(const StylesheetArchive_IdentifiedStyleEntry& from);

  inline StylesheetArchive_IdentifiedStyleEntry& operator=(const StylesheetArchive_IdentifiedStyleEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StylesheetArchive_IdentifiedStyleEntry& default_instance();

  void Swap(StylesheetArchive_IdentifiedStyleEntry* other);

  // implements Message ----------------------------------------------

  StylesheetArchive_IdentifiedStyleEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StylesheetArchive_IdentifiedStyleEntry& from);
  void MergeFrom(const StylesheetArchive_IdentifiedStyleEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string identifier = 1;
  inline bool has_identifier() const;
  inline void clear_identifier();
  static const int kIdentifierFieldNumber = 1;
  inline const ::std::string& identifier() const;
  inline void set_identifier(const ::std::string& value);
  inline void set_identifier(const char* value);
  inline void set_identifier(const char* value, size_t size);
  inline ::std::string* mutable_identifier();
  inline ::std::string* release_identifier();
  inline void set_allocated_identifier(::std::string* identifier);

  // required .TSP.Reference style = 2;
  inline bool has_style() const;
  inline void clear_style();
  static const int kStyleFieldNumber = 2;
  inline const ::TSP::Reference& style() const;
  inline ::TSP::Reference* mutable_style();
  inline ::TSP::Reference* release_style();
  inline void set_allocated_style(::TSP::Reference* style);

  // @@protoc_insertion_point(class_scope:TSS.StylesheetArchive.IdentifiedStyleEntry)
 private:
  inline void set_has_identifier();
  inline void clear_has_identifier();
  inline void set_has_style();
  inline void clear_has_style();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* identifier_;
  ::TSP::Reference* style_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TSSArchives_2eproto();
  friend void protobuf_AssignDesc_TSSArchives_2eproto();
  friend void protobuf_ShutdownFile_TSSArchives_2eproto();

  void InitAsDefaultInstance();
  static StylesheetArchive_IdentifiedStyleEntry* default_instance_;
};
// -------------------------------------------------------------------

class StylesheetArchive_StyleChildrenEntry : public ::google::protobuf::Message {
 public:
  StylesheetArchive_StyleChildrenEntry();
  virtual ~StylesheetArchive_StyleChildrenEntry();

  StylesheetArchive_StyleChildrenEntry(const StylesheetArchive_StyleChildrenEntry& from);

  inline StylesheetArchive_StyleChildrenEntry& operator=(const StylesheetArchive_StyleChildrenEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StylesheetArchive_StyleChildrenEntry& default_instance();

  void Swap(StylesheetArchive_StyleChildrenEntry* other);

  // implements Message ----------------------------------------------

  StylesheetArchive_StyleChildrenEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StylesheetArchive_StyleChildrenEntry& from);
  void MergeFrom(const StylesheetArchive_StyleChildrenEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSP.Reference parent = 1;
  inline bool has_parent() const;
  inline void clear_parent();
  static const int kParentFieldNumber = 1;
  inline const ::TSP::Reference& parent() const;
  inline ::TSP::Reference* mutable_parent();
  inline ::TSP::Reference* release_parent();
  inline void set_allocated_parent(::TSP::Reference* parent);

  // repeated .TSP.Reference children = 2;
  inline int children_size() const;
  inline void clear_children();
  static const int kChildrenFieldNumber = 2;
  inline const ::TSP::Reference& children(int index) const;
  inline ::TSP::Reference* mutable_children(int index);
  inline ::TSP::Reference* add_children();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      children() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_children();

  // @@protoc_insertion_point(class_scope:TSS.StylesheetArchive.StyleChildrenEntry)
 private:
  inline void set_has_parent();
  inline void clear_has_parent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSP::Reference* parent_;
  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > children_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TSSArchives_2eproto();
  friend void protobuf_AssignDesc_TSSArchives_2eproto();
  friend void protobuf_ShutdownFile_TSSArchives_2eproto();

  void InitAsDefaultInstance();
  static StylesheetArchive_StyleChildrenEntry* default_instance_;
};
// -------------------------------------------------------------------

class StylesheetArchive : public ::google::protobuf::Message {
 public:
  StylesheetArchive();
  virtual ~StylesheetArchive();

  StylesheetArchive(const StylesheetArchive& from);

  inline StylesheetArchive& operator=(const StylesheetArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StylesheetArchive& default_instance();

  void Swap(StylesheetArchive* other);

  // implements Message ----------------------------------------------

  StylesheetArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StylesheetArchive& from);
  void MergeFrom(const StylesheetArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef StylesheetArchive_IdentifiedStyleEntry IdentifiedStyleEntry;
  typedef StylesheetArchive_StyleChildrenEntry StyleChildrenEntry;

  // accessors -------------------------------------------------------

  // repeated .TSP.Reference styles = 1;
  inline int styles_size() const;
  inline void clear_styles();
  static const int kStylesFieldNumber = 1;
  inline const ::TSP::Reference& styles(int index) const;
  inline ::TSP::Reference* mutable_styles(int index);
  inline ::TSP::Reference* add_styles();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      styles() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_styles();

  // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 2;
  inline int identifier_to_style_map_size() const;
  inline void clear_identifier_to_style_map();
  static const int kIdentifierToStyleMapFieldNumber = 2;
  inline const ::TSS::StylesheetArchive_IdentifiedStyleEntry& identifier_to_style_map(int index) const;
  inline ::TSS::StylesheetArchive_IdentifiedStyleEntry* mutable_identifier_to_style_map(int index);
  inline ::TSS::StylesheetArchive_IdentifiedStyleEntry* add_identifier_to_style_map();
  inline const ::google::protobuf::RepeatedPtrField< ::TSS::StylesheetArchive_IdentifiedStyleEntry >&
      identifier_to_style_map() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSS::StylesheetArchive_IdentifiedStyleEntry >*
      mutable_identifier_to_style_map();

  // optional .TSP.Reference parent = 3;
  inline bool has_parent() const;
  inline void clear_parent();
  static const int kParentFieldNumber = 3;
  inline const ::TSP::Reference& parent() const;
  inline ::TSP::Reference* mutable_parent();
  inline ::TSP::Reference* release_parent();
  inline void set_allocated_parent(::TSP::Reference* parent);

  // optional bool is_locked = 4 [default = true];
  inline bool has_is_locked() const;
  inline void clear_is_locked();
  static const int kIsLockedFieldNumber = 4;
  inline bool is_locked() const;
  inline void set_is_locked(bool value);

  // repeated .TSS.StylesheetArchive.StyleChildrenEntry parent_to_children_style_map = 5;
  inline int parent_to_children_style_map_size() const;
  inline void clear_parent_to_children_style_map();
  static const int kParentToChildrenStyleMapFieldNumber = 5;
  inline const ::TSS::StylesheetArchive_StyleChildrenEntry& parent_to_children_style_map(int index) const;
  inline ::TSS::StylesheetArchive_StyleChildrenEntry* mutable_parent_to_children_style_map(int index);
  inline ::TSS::StylesheetArchive_StyleChildrenEntry* add_parent_to_children_style_map();
  inline const ::google::protobuf::RepeatedPtrField< ::TSS::StylesheetArchive_StyleChildrenEntry >&
      parent_to_children_style_map() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSS::StylesheetArchive_StyleChildrenEntry >*
      mutable_parent_to_children_style_map();

  // optional bool can_cull_styles = 6 [default = false];
  inline bool has_can_cull_styles() const;
  inline void clear_can_cull_styles();
  static const int kCanCullStylesFieldNumber = 6;
  inline bool can_cull_styles() const;
  inline void set_can_cull_styles(bool value);

  // @@protoc_insertion_point(class_scope:TSS.StylesheetArchive)
 private:
  inline void set_has_parent();
  inline void clear_has_parent();
  inline void set_has_is_locked();
  inline void clear_has_is_locked();
  inline void set_has_can_cull_styles();
  inline void clear_has_can_cull_styles();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > styles_;
  ::google::protobuf::RepeatedPtrField< ::TSS::StylesheetArchive_IdentifiedStyleEntry > identifier_to_style_map_;
  ::TSP::Reference* parent_;
  ::google::protobuf::RepeatedPtrField< ::TSS::StylesheetArchive_StyleChildrenEntry > parent_to_children_style_map_;
  bool is_locked_;
  bool can_cull_styles_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_TSSArchives_2eproto();
  friend void protobuf_AssignDesc_TSSArchives_2eproto();
  friend void protobuf_ShutdownFile_TSSArchives_2eproto();

  void InitAsDefaultInstance();
  static StylesheetArchive* default_instance_;
};
// -------------------------------------------------------------------

class ThemeArchive : public ::google::protobuf::Message {
 public:
  ThemeArchive();
  virtual ~ThemeArchive();

  ThemeArchive(const ThemeArchive& from);

  inline ThemeArchive& operator=(const ThemeArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThemeArchive& default_instance();

  void Swap(ThemeArchive* other);

  // implements Message ----------------------------------------------

  ThemeArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ThemeArchive& from);
  void MergeFrom(const ThemeArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TSP.Reference stylesheet = 1;
  inline bool has_stylesheet() const;
  inline void clear_stylesheet();
  static const int kStylesheetFieldNumber = 1;
  inline const ::TSP::Reference& stylesheet() const;
  inline ::TSP::Reference* mutable_stylesheet();
  inline ::TSP::Reference* release_stylesheet();
  inline void set_allocated_stylesheet(::TSP::Reference* stylesheet);

  // optional string theme_identifier = 3;
  inline bool has_theme_identifier() const;
  inline void clear_theme_identifier();
  static const int kThemeIdentifierFieldNumber = 3;
  inline const ::std::string& theme_identifier() const;
  inline void set_theme_identifier(const ::std::string& value);
  inline void set_theme_identifier(const char* value);
  inline void set_theme_identifier(const char* value, size_t size);
  inline ::std::string* mutable_theme_identifier();
  inline ::std::string* release_theme_identifier();
  inline void set_allocated_theme_identifier(::std::string* theme_identifier);

  // repeated .TSP.Color color_presets = 10;
  inline int color_presets_size() const;
  inline void clear_color_presets();
  static const int kColorPresetsFieldNumber = 10;
  inline const ::TSP::Color& color_presets(int index) const;
  inline ::TSP::Color* mutable_color_presets(int index);
  inline ::TSP::Color* add_color_presets();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Color >&
      color_presets() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Color >*
      mutable_color_presets();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(ThemeArchive)
  // @@protoc_insertion_point(class_scope:TSS.ThemeArchive)
 private:
  inline void set_has_stylesheet();
  inline void clear_has_stylesheet();
  inline void set_has_theme_identifier();
  inline void clear_has_theme_identifier();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSP::Reference* stylesheet_;
  ::std::string* theme_identifier_;
  ::google::protobuf::RepeatedPtrField< ::TSP::Color > color_presets_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_TSSArchives_2eproto();
  friend void protobuf_AssignDesc_TSSArchives_2eproto();
  friend void protobuf_ShutdownFile_TSSArchives_2eproto();

  void InitAsDefaultInstance();
  static ThemeArchive* default_instance_;
};
// -------------------------------------------------------------------

class ApplyThemeCommandArchive : public ::google::protobuf::Message {
 public:
  ApplyThemeCommandArchive();
  virtual ~ApplyThemeCommandArchive();

  ApplyThemeCommandArchive(const ApplyThemeCommandArchive& from);

  inline ApplyThemeCommandArchive& operator=(const ApplyThemeCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ApplyThemeCommandArchive& default_instance();

  void Swap(ApplyThemeCommandArchive* other);

  // implements Message ----------------------------------------------

  ApplyThemeCommandArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ApplyThemeCommandArchive& from);
  void MergeFrom(const ApplyThemeCommandArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSK.CommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSK::CommandArchive& super() const;
  inline ::TSK::CommandArchive* mutable_super();
  inline ::TSK::CommandArchive* release_super();
  inline void set_allocated_super(::TSK::CommandArchive* super);

  // repeated .TSP.Reference commands = 2;
  inline int commands_size() const;
  inline void clear_commands();
  static const int kCommandsFieldNumber = 2;
  inline const ::TSP::Reference& commands(int index) const;
  inline ::TSP::Reference* mutable_commands(int index);
  inline ::TSP::Reference* add_commands();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      commands() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_commands();

  // optional .TSP.Reference old_theme = 3;
  inline bool has_old_theme() const;
  inline void clear_old_theme();
  static const int kOldThemeFieldNumber = 3;
  inline const ::TSP::Reference& old_theme() const;
  inline ::TSP::Reference* mutable_old_theme();
  inline ::TSP::Reference* release_old_theme();
  inline void set_allocated_old_theme(::TSP::Reference* old_theme);

  // optional .TSP.Reference new_theme = 4;
  inline bool has_new_theme() const;
  inline void clear_new_theme();
  static const int kNewThemeFieldNumber = 4;
  inline const ::TSP::Reference& new_theme() const;
  inline ::TSP::Reference* mutable_new_theme();
  inline ::TSP::Reference* release_new_theme();
  inline void set_allocated_new_theme(::TSP::Reference* new_theme);

  // @@protoc_insertion_point(class_scope:TSS.ApplyThemeCommandArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_old_theme();
  inline void clear_has_old_theme();
  inline void set_has_new_theme();
  inline void clear_has_new_theme();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSK::CommandArchive* super_;
  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > commands_;
  ::TSP::Reference* old_theme_;
  ::TSP::Reference* new_theme_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TSSArchives_2eproto();
  friend void protobuf_AssignDesc_TSSArchives_2eproto();
  friend void protobuf_ShutdownFile_TSSArchives_2eproto();

  void InitAsDefaultInstance();
  static ApplyThemeCommandArchive* default_instance_;
};
// -------------------------------------------------------------------

class ApplyThemeChildCommandArchive : public ::google::protobuf::Message {
 public:
  ApplyThemeChildCommandArchive();
  virtual ~ApplyThemeChildCommandArchive();

  ApplyThemeChildCommandArchive(const ApplyThemeChildCommandArchive& from);

  inline ApplyThemeChildCommandArchive& operator=(const ApplyThemeChildCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ApplyThemeChildCommandArchive& default_instance();

  void Swap(ApplyThemeChildCommandArchive* other);

  // implements Message ----------------------------------------------

  ApplyThemeChildCommandArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ApplyThemeChildCommandArchive& from);
  void MergeFrom(const ApplyThemeChildCommandArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSK.CommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSK::CommandArchive& super() const;
  inline ::TSK::CommandArchive* mutable_super();
  inline ::TSK::CommandArchive* release_super();
  inline void set_allocated_super(::TSK::CommandArchive* super);

  // optional .TSP.Reference parent = 2;
  inline bool has_parent() const;
  inline void clear_parent();
  static const int kParentFieldNumber = 2;
  inline const ::TSP::Reference& parent() const;
  inline ::TSP::Reference* mutable_parent();
  inline ::TSP::Reference* release_parent();
  inline void set_allocated_parent(::TSP::Reference* parent);

  // @@protoc_insertion_point(class_scope:TSS.ApplyThemeChildCommandArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_parent();
  inline void clear_has_parent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSK::CommandArchive* super_;
  ::TSP::Reference* parent_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TSSArchives_2eproto();
  friend void protobuf_AssignDesc_TSSArchives_2eproto();
  friend void protobuf_ShutdownFile_TSSArchives_2eproto();

  void InitAsDefaultInstance();
  static ApplyThemeChildCommandArchive* default_instance_;
};
// -------------------------------------------------------------------

class ReapUnusedStyleCommandArchive_IdentifiedStyleEntry : public ::google::protobuf::Message {
 public:
  ReapUnusedStyleCommandArchive_IdentifiedStyleEntry();
  virtual ~ReapUnusedStyleCommandArchive_IdentifiedStyleEntry();

  ReapUnusedStyleCommandArchive_IdentifiedStyleEntry(const ReapUnusedStyleCommandArchive_IdentifiedStyleEntry& from);

  inline ReapUnusedStyleCommandArchive_IdentifiedStyleEntry& operator=(const ReapUnusedStyleCommandArchive_IdentifiedStyleEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReapUnusedStyleCommandArchive_IdentifiedStyleEntry& default_instance();

  void Swap(ReapUnusedStyleCommandArchive_IdentifiedStyleEntry* other);

  // implements Message ----------------------------------------------

  ReapUnusedStyleCommandArchive_IdentifiedStyleEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReapUnusedStyleCommandArchive_IdentifiedStyleEntry& from);
  void MergeFrom(const ReapUnusedStyleCommandArchive_IdentifiedStyleEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string identifier = 1;
  inline bool has_identifier() const;
  inline void clear_identifier();
  static const int kIdentifierFieldNumber = 1;
  inline const ::std::string& identifier() const;
  inline void set_identifier(const ::std::string& value);
  inline void set_identifier(const char* value);
  inline void set_identifier(const char* value, size_t size);
  inline ::std::string* mutable_identifier();
  inline ::std::string* release_identifier();
  inline void set_allocated_identifier(::std::string* identifier);

  // required .TSP.Reference style = 2;
  inline bool has_style() const;
  inline void clear_style();
  static const int kStyleFieldNumber = 2;
  inline const ::TSP::Reference& style() const;
  inline ::TSP::Reference* mutable_style();
  inline ::TSP::Reference* release_style();
  inline void set_allocated_style(::TSP::Reference* style);

  // @@protoc_insertion_point(class_scope:TSS.ReapUnusedStyleCommandArchive.IdentifiedStyleEntry)
 private:
  inline void set_has_identifier();
  inline void clear_has_identifier();
  inline void set_has_style();
  inline void clear_has_style();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* identifier_;
  ::TSP::Reference* style_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TSSArchives_2eproto();
  friend void protobuf_AssignDesc_TSSArchives_2eproto();
  friend void protobuf_ShutdownFile_TSSArchives_2eproto();

  void InitAsDefaultInstance();
  static ReapUnusedStyleCommandArchive_IdentifiedStyleEntry* default_instance_;
};
// -------------------------------------------------------------------

class ReapUnusedStyleCommandArchive : public ::google::protobuf::Message {
 public:
  ReapUnusedStyleCommandArchive();
  virtual ~ReapUnusedStyleCommandArchive();

  ReapUnusedStyleCommandArchive(const ReapUnusedStyleCommandArchive& from);

  inline ReapUnusedStyleCommandArchive& operator=(const ReapUnusedStyleCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReapUnusedStyleCommandArchive& default_instance();

  void Swap(ReapUnusedStyleCommandArchive* other);

  // implements Message ----------------------------------------------

  ReapUnusedStyleCommandArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReapUnusedStyleCommandArchive& from);
  void MergeFrom(const ReapUnusedStyleCommandArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReapUnusedStyleCommandArchive_IdentifiedStyleEntry IdentifiedStyleEntry;

  // accessors -------------------------------------------------------

  // required .TSK.CommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSK::CommandArchive& super() const;
  inline ::TSK::CommandArchive* mutable_super();
  inline ::TSK::CommandArchive* release_super();
  inline void set_allocated_super(::TSK::CommandArchive* super);

  // optional .TSP.Reference stylesheet = 2;
  inline bool has_stylesheet() const;
  inline void clear_stylesheet();
  static const int kStylesheetFieldNumber = 2;
  inline const ::TSP::Reference& stylesheet() const;
  inline ::TSP::Reference* mutable_stylesheet();
  inline ::TSP::Reference* release_stylesheet();
  inline void set_allocated_stylesheet(::TSP::Reference* stylesheet);

  // repeated .TSP.Reference styles = 3;
  inline int styles_size() const;
  inline void clear_styles();
  static const int kStylesFieldNumber = 3;
  inline const ::TSP::Reference& styles(int index) const;
  inline ::TSP::Reference* mutable_styles(int index);
  inline ::TSP::Reference* add_styles();
  inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
      styles() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
      mutable_styles();

  // repeated .TSS.ReapUnusedStyleCommandArchive.IdentifiedStyleEntry identified_styles = 4;
  inline int identified_styles_size() const;
  inline void clear_identified_styles();
  static const int kIdentifiedStylesFieldNumber = 4;
  inline const ::TSS::ReapUnusedStyleCommandArchive_IdentifiedStyleEntry& identified_styles(int index) const;
  inline ::TSS::ReapUnusedStyleCommandArchive_IdentifiedStyleEntry* mutable_identified_styles(int index);
  inline ::TSS::ReapUnusedStyleCommandArchive_IdentifiedStyleEntry* add_identified_styles();
  inline const ::google::protobuf::RepeatedPtrField< ::TSS::ReapUnusedStyleCommandArchive_IdentifiedStyleEntry >&
      identified_styles() const;
  inline ::google::protobuf::RepeatedPtrField< ::TSS::ReapUnusedStyleCommandArchive_IdentifiedStyleEntry >*
      mutable_identified_styles();

  // @@protoc_insertion_point(class_scope:TSS.ReapUnusedStyleCommandArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_stylesheet();
  inline void clear_has_stylesheet();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSK::CommandArchive* super_;
  ::TSP::Reference* stylesheet_;
  ::google::protobuf::RepeatedPtrField< ::TSP::Reference > styles_;
  ::google::protobuf::RepeatedPtrField< ::TSS::ReapUnusedStyleCommandArchive_IdentifiedStyleEntry > identified_styles_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TSSArchives_2eproto();
  friend void protobuf_AssignDesc_TSSArchives_2eproto();
  friend void protobuf_ShutdownFile_TSSArchives_2eproto();

  void InitAsDefaultInstance();
  static ReapUnusedStyleCommandArchive* default_instance_;
};
// -------------------------------------------------------------------

class StyleUpdatePropertyMapCommandArchive : public ::google::protobuf::Message {
 public:
  StyleUpdatePropertyMapCommandArchive();
  virtual ~StyleUpdatePropertyMapCommandArchive();

  StyleUpdatePropertyMapCommandArchive(const StyleUpdatePropertyMapCommandArchive& from);

  inline StyleUpdatePropertyMapCommandArchive& operator=(const StyleUpdatePropertyMapCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StyleUpdatePropertyMapCommandArchive& default_instance();

  void Swap(StyleUpdatePropertyMapCommandArchive* other);

  // implements Message ----------------------------------------------

  StyleUpdatePropertyMapCommandArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StyleUpdatePropertyMapCommandArchive& from);
  void MergeFrom(const StyleUpdatePropertyMapCommandArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSK.CommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSK::CommandArchive& super() const;
  inline ::TSK::CommandArchive* mutable_super();
  inline ::TSK::CommandArchive* release_super();
  inline void set_allocated_super(::TSK::CommandArchive* super);

  // required .TSP.Reference current_style = 2;
  inline bool has_current_style() const;
  inline void clear_current_style();
  static const int kCurrentStyleFieldNumber = 2;
  inline const ::TSP::Reference& current_style() const;
  inline ::TSP::Reference* mutable_current_style();
  inline ::TSP::Reference* release_current_style();
  inline void set_allocated_current_style(::TSP::Reference* current_style);

  // required .TSP.Reference style_with_old_property_map = 3;
  inline bool has_style_with_old_property_map() const;
  inline void clear_style_with_old_property_map();
  static const int kStyleWithOldPropertyMapFieldNumber = 3;
  inline const ::TSP::Reference& style_with_old_property_map() const;
  inline ::TSP::Reference* mutable_style_with_old_property_map();
  inline ::TSP::Reference* release_style_with_old_property_map();
  inline void set_allocated_style_with_old_property_map(::TSP::Reference* style_with_old_property_map);

  // required .TSP.Reference style_with_new_property_map = 4;
  inline bool has_style_with_new_property_map() const;
  inline void clear_style_with_new_property_map();
  static const int kStyleWithNewPropertyMapFieldNumber = 4;
  inline const ::TSP::Reference& style_with_new_property_map() const;
  inline ::TSP::Reference* mutable_style_with_new_property_map();
  inline ::TSP::Reference* release_style_with_new_property_map();
  inline void set_allocated_style_with_new_property_map(::TSP::Reference* style_with_new_property_map);

  // optional bool notify_for_style_clients = 6 [default = true];
  inline bool has_notify_for_style_clients() const;
  inline void clear_notify_for_style_clients();
  static const int kNotifyForStyleClientsFieldNumber = 6;
  inline bool notify_for_style_clients() const;
  inline void set_notify_for_style_clients(bool value);

  // @@protoc_insertion_point(class_scope:TSS.StyleUpdatePropertyMapCommandArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_current_style();
  inline void clear_has_current_style();
  inline void set_has_style_with_old_property_map();
  inline void clear_has_style_with_old_property_map();
  inline void set_has_style_with_new_property_map();
  inline void clear_has_style_with_new_property_map();
  inline void set_has_notify_for_style_clients();
  inline void clear_has_notify_for_style_clients();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSK::CommandArchive* super_;
  ::TSP::Reference* current_style_;
  ::TSP::Reference* style_with_old_property_map_;
  ::TSP::Reference* style_with_new_property_map_;
  bool notify_for_style_clients_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_TSSArchives_2eproto();
  friend void protobuf_AssignDesc_TSSArchives_2eproto();
  friend void protobuf_ShutdownFile_TSSArchives_2eproto();

  void InitAsDefaultInstance();
  static StyleUpdatePropertyMapCommandArchive* default_instance_;
};
// -------------------------------------------------------------------

class ThemeReplacePresetCommandArchive : public ::google::protobuf::Message {
 public:
  ThemeReplacePresetCommandArchive();
  virtual ~ThemeReplacePresetCommandArchive();

  ThemeReplacePresetCommandArchive(const ThemeReplacePresetCommandArchive& from);

  inline ThemeReplacePresetCommandArchive& operator=(const ThemeReplacePresetCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThemeReplacePresetCommandArchive& default_instance();

  void Swap(ThemeReplacePresetCommandArchive* other);

  // implements Message ----------------------------------------------

  ThemeReplacePresetCommandArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ThemeReplacePresetCommandArchive& from);
  void MergeFrom(const ThemeReplacePresetCommandArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSK.CommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSK::CommandArchive& super() const;
  inline ::TSK::CommandArchive* mutable_super();
  inline ::TSK::CommandArchive* release_super();
  inline void set_allocated_super(::TSK::CommandArchive* super);

  // required .TSP.Reference theme = 2;
  inline bool has_theme() const;
  inline void clear_theme();
  static const int kThemeFieldNumber = 2;
  inline const ::TSP::Reference& theme() const;
  inline ::TSP::Reference* mutable_theme();
  inline ::TSP::Reference* release_theme();
  inline void set_allocated_theme(::TSP::Reference* theme);

  // required .TSP.Reference preset = 3;
  inline bool has_preset() const;
  inline void clear_preset();
  static const int kPresetFieldNumber = 3;
  inline const ::TSP::Reference& preset() const;
  inline ::TSP::Reference* mutable_preset();
  inline ::TSP::Reference* release_preset();
  inline void set_allocated_preset(::TSP::Reference* preset);

  // required .TSP.Reference oldPreset = 4;
  inline bool has_oldpreset() const;
  inline void clear_oldpreset();
  static const int kOldPresetFieldNumber = 4;
  inline const ::TSP::Reference& oldpreset() const;
  inline ::TSP::Reference* mutable_oldpreset();
  inline ::TSP::Reference* release_oldpreset();
  inline void set_allocated_oldpreset(::TSP::Reference* oldpreset);

  // required uint32 index = 5;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 5;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TSS.ThemeReplacePresetCommandArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_theme();
  inline void clear_has_theme();
  inline void set_has_preset();
  inline void clear_has_preset();
  inline void set_has_oldpreset();
  inline void clear_has_oldpreset();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSK::CommandArchive* super_;
  ::TSP::Reference* theme_;
  ::TSP::Reference* preset_;
  ::TSP::Reference* oldpreset_;
  ::google::protobuf::uint32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_TSSArchives_2eproto();
  friend void protobuf_AssignDesc_TSSArchives_2eproto();
  friend void protobuf_ShutdownFile_TSSArchives_2eproto();

  void InitAsDefaultInstance();
  static ThemeReplacePresetCommandArchive* default_instance_;
};
// -------------------------------------------------------------------

class ThemeReplaceColorPresetCommandArchive : public ::google::protobuf::Message {
 public:
  ThemeReplaceColorPresetCommandArchive();
  virtual ~ThemeReplaceColorPresetCommandArchive();

  ThemeReplaceColorPresetCommandArchive(const ThemeReplaceColorPresetCommandArchive& from);

  inline ThemeReplaceColorPresetCommandArchive& operator=(const ThemeReplaceColorPresetCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThemeReplaceColorPresetCommandArchive& default_instance();

  void Swap(ThemeReplaceColorPresetCommandArchive* other);

  // implements Message ----------------------------------------------

  ThemeReplaceColorPresetCommandArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ThemeReplaceColorPresetCommandArchive& from);
  void MergeFrom(const ThemeReplaceColorPresetCommandArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSK.CommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSK::CommandArchive& super() const;
  inline ::TSK::CommandArchive* mutable_super();
  inline ::TSK::CommandArchive* release_super();
  inline void set_allocated_super(::TSK::CommandArchive* super);

  // required .TSP.Reference theme = 2;
  inline bool has_theme() const;
  inline void clear_theme();
  static const int kThemeFieldNumber = 2;
  inline const ::TSP::Reference& theme() const;
  inline ::TSP::Reference* mutable_theme();
  inline ::TSP::Reference* release_theme();
  inline void set_allocated_theme(::TSP::Reference* theme);

  // required .TSP.Color color = 3;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 3;
  inline const ::TSP::Color& color() const;
  inline ::TSP::Color* mutable_color();
  inline ::TSP::Color* release_color();
  inline void set_allocated_color(::TSP::Color* color);

  // required .TSP.Color old_color = 4;
  inline bool has_old_color() const;
  inline void clear_old_color();
  static const int kOldColorFieldNumber = 4;
  inline const ::TSP::Color& old_color() const;
  inline ::TSP::Color* mutable_old_color();
  inline ::TSP::Color* release_old_color();
  inline void set_allocated_old_color(::TSP::Color* old_color);

  // required uint32 index = 5;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 5;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TSS.ThemeReplaceColorPresetCommandArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_theme();
  inline void clear_has_theme();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_old_color();
  inline void clear_has_old_color();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSK::CommandArchive* super_;
  ::TSP::Reference* theme_;
  ::TSP::Color* color_;
  ::TSP::Color* old_color_;
  ::google::protobuf::uint32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_TSSArchives_2eproto();
  friend void protobuf_AssignDesc_TSSArchives_2eproto();
  friend void protobuf_ShutdownFile_TSSArchives_2eproto();

  void InitAsDefaultInstance();
  static ThemeReplaceColorPresetCommandArchive* default_instance_;
};
// -------------------------------------------------------------------

class ThemeAddStylePresetCommandArchive : public ::google::protobuf::Message {
 public:
  ThemeAddStylePresetCommandArchive();
  virtual ~ThemeAddStylePresetCommandArchive();

  ThemeAddStylePresetCommandArchive(const ThemeAddStylePresetCommandArchive& from);

  inline ThemeAddStylePresetCommandArchive& operator=(const ThemeAddStylePresetCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThemeAddStylePresetCommandArchive& default_instance();

  void Swap(ThemeAddStylePresetCommandArchive* other);

  // implements Message ----------------------------------------------

  ThemeAddStylePresetCommandArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ThemeAddStylePresetCommandArchive& from);
  void MergeFrom(const ThemeAddStylePresetCommandArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSK.CommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSK::CommandArchive& super() const;
  inline ::TSK::CommandArchive* mutable_super();
  inline ::TSK::CommandArchive* release_super();
  inline void set_allocated_super(::TSK::CommandArchive* super);

  // required .TSP.Reference theme = 2;
  inline bool has_theme() const;
  inline void clear_theme();
  static const int kThemeFieldNumber = 2;
  inline const ::TSP::Reference& theme() const;
  inline ::TSP::Reference* mutable_theme();
  inline ::TSP::Reference* release_theme();
  inline void set_allocated_theme(::TSP::Reference* theme);

  // required .TSP.Reference preset = 3;
  inline bool has_preset() const;
  inline void clear_preset();
  static const int kPresetFieldNumber = 3;
  inline const ::TSP::Reference& preset() const;
  inline ::TSP::Reference* mutable_preset();
  inline ::TSP::Reference* release_preset();
  inline void set_allocated_preset(::TSP::Reference* preset);

  // required string preset_kind = 4;
  inline bool has_preset_kind() const;
  inline void clear_preset_kind();
  static const int kPresetKindFieldNumber = 4;
  inline const ::std::string& preset_kind() const;
  inline void set_preset_kind(const ::std::string& value);
  inline void set_preset_kind(const char* value);
  inline void set_preset_kind(const char* value, size_t size);
  inline ::std::string* mutable_preset_kind();
  inline ::std::string* release_preset_kind();
  inline void set_allocated_preset_kind(::std::string* preset_kind);

  // optional string identifier = 5;
  inline bool has_identifier() const;
  inline void clear_identifier();
  static const int kIdentifierFieldNumber = 5;
  inline const ::std::string& identifier() const;
  inline void set_identifier(const ::std::string& value);
  inline void set_identifier(const char* value);
  inline void set_identifier(const char* value, size_t size);
  inline ::std::string* mutable_identifier();
  inline ::std::string* release_identifier();
  inline void set_allocated_identifier(::std::string* identifier);

  // optional bool add_preset_to_stylesheet = 6;
  inline bool has_add_preset_to_stylesheet() const;
  inline void clear_add_preset_to_stylesheet();
  static const int kAddPresetToStylesheetFieldNumber = 6;
  inline bool add_preset_to_stylesheet() const;
  inline void set_add_preset_to_stylesheet(bool value);

  // @@protoc_insertion_point(class_scope:TSS.ThemeAddStylePresetCommandArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_theme();
  inline void clear_has_theme();
  inline void set_has_preset();
  inline void clear_has_preset();
  inline void set_has_preset_kind();
  inline void clear_has_preset_kind();
  inline void set_has_identifier();
  inline void clear_has_identifier();
  inline void set_has_add_preset_to_stylesheet();
  inline void clear_has_add_preset_to_stylesheet();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSK::CommandArchive* super_;
  ::TSP::Reference* theme_;
  ::TSP::Reference* preset_;
  ::std::string* preset_kind_;
  ::std::string* identifier_;
  bool add_preset_to_stylesheet_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_TSSArchives_2eproto();
  friend void protobuf_AssignDesc_TSSArchives_2eproto();
  friend void protobuf_ShutdownFile_TSSArchives_2eproto();

  void InitAsDefaultInstance();
  static ThemeAddStylePresetCommandArchive* default_instance_;
};
// -------------------------------------------------------------------

class ThemeRemoveStylePresetCommandArchive : public ::google::protobuf::Message {
 public:
  ThemeRemoveStylePresetCommandArchive();
  virtual ~ThemeRemoveStylePresetCommandArchive();

  ThemeRemoveStylePresetCommandArchive(const ThemeRemoveStylePresetCommandArchive& from);

  inline ThemeRemoveStylePresetCommandArchive& operator=(const ThemeRemoveStylePresetCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThemeRemoveStylePresetCommandArchive& default_instance();

  void Swap(ThemeRemoveStylePresetCommandArchive* other);

  // implements Message ----------------------------------------------

  ThemeRemoveStylePresetCommandArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ThemeRemoveStylePresetCommandArchive& from);
  void MergeFrom(const ThemeRemoveStylePresetCommandArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSK.CommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSK::CommandArchive& super() const;
  inline ::TSK::CommandArchive* mutable_super();
  inline ::TSK::CommandArchive* release_super();
  inline void set_allocated_super(::TSK::CommandArchive* super);

  // required .TSP.Reference theme = 2;
  inline bool has_theme() const;
  inline void clear_theme();
  static const int kThemeFieldNumber = 2;
  inline const ::TSP::Reference& theme() const;
  inline ::TSP::Reference* mutable_theme();
  inline ::TSP::Reference* release_theme();
  inline void set_allocated_theme(::TSP::Reference* theme);

  // required .TSP.Reference preset = 3;
  inline bool has_preset() const;
  inline void clear_preset();
  static const int kPresetFieldNumber = 3;
  inline const ::TSP::Reference& preset() const;
  inline ::TSP::Reference* mutable_preset();
  inline ::TSP::Reference* release_preset();
  inline void set_allocated_preset(::TSP::Reference* preset);

  // required uint32 preset_index = 4;
  inline bool has_preset_index() const;
  inline void clear_preset_index();
  static const int kPresetIndexFieldNumber = 4;
  inline ::google::protobuf::uint32 preset_index() const;
  inline void set_preset_index(::google::protobuf::uint32 value);

  // required string preset_kind = 5;
  inline bool has_preset_kind() const;
  inline void clear_preset_kind();
  static const int kPresetKindFieldNumber = 5;
  inline const ::std::string& preset_kind() const;
  inline void set_preset_kind(const ::std::string& value);
  inline void set_preset_kind(const char* value);
  inline void set_preset_kind(const char* value, size_t size);
  inline ::std::string* mutable_preset_kind();
  inline ::std::string* release_preset_kind();
  inline void set_allocated_preset_kind(::std::string* preset_kind);

  // optional string identifier = 6;
  inline bool has_identifier() const;
  inline void clear_identifier();
  static const int kIdentifierFieldNumber = 6;
  inline const ::std::string& identifier() const;
  inline void set_identifier(const ::std::string& value);
  inline void set_identifier(const char* value);
  inline void set_identifier(const char* value, size_t size);
  inline ::std::string* mutable_identifier();
  inline ::std::string* release_identifier();
  inline void set_allocated_identifier(::std::string* identifier);

  // @@protoc_insertion_point(class_scope:TSS.ThemeRemoveStylePresetCommandArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_theme();
  inline void clear_has_theme();
  inline void set_has_preset();
  inline void clear_has_preset();
  inline void set_has_preset_index();
  inline void clear_has_preset_index();
  inline void set_has_preset_kind();
  inline void clear_has_preset_kind();
  inline void set_has_identifier();
  inline void clear_has_identifier();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSK::CommandArchive* super_;
  ::TSP::Reference* theme_;
  ::TSP::Reference* preset_;
  ::std::string* preset_kind_;
  ::std::string* identifier_;
  ::google::protobuf::uint32 preset_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_TSSArchives_2eproto();
  friend void protobuf_AssignDesc_TSSArchives_2eproto();
  friend void protobuf_ShutdownFile_TSSArchives_2eproto();

  void InitAsDefaultInstance();
  static ThemeRemoveStylePresetCommandArchive* default_instance_;
};
// -------------------------------------------------------------------

class ThemeMovePresetCommandArchive : public ::google::protobuf::Message {
 public:
  ThemeMovePresetCommandArchive();
  virtual ~ThemeMovePresetCommandArchive();

  ThemeMovePresetCommandArchive(const ThemeMovePresetCommandArchive& from);

  inline ThemeMovePresetCommandArchive& operator=(const ThemeMovePresetCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThemeMovePresetCommandArchive& default_instance();

  void Swap(ThemeMovePresetCommandArchive* other);

  // implements Message ----------------------------------------------

  ThemeMovePresetCommandArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ThemeMovePresetCommandArchive& from);
  void MergeFrom(const ThemeMovePresetCommandArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSK.CommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSK::CommandArchive& super() const;
  inline ::TSK::CommandArchive* mutable_super();
  inline ::TSK::CommandArchive* release_super();
  inline void set_allocated_super(::TSK::CommandArchive* super);

  // required .TSP.Reference theme = 2;
  inline bool has_theme() const;
  inline void clear_theme();
  static const int kThemeFieldNumber = 2;
  inline const ::TSP::Reference& theme() const;
  inline ::TSP::Reference* mutable_theme();
  inline ::TSP::Reference* release_theme();
  inline void set_allocated_theme(::TSP::Reference* theme);

  // required .TSP.Reference preset = 3;
  inline bool has_preset() const;
  inline void clear_preset();
  static const int kPresetFieldNumber = 3;
  inline const ::TSP::Reference& preset() const;
  inline ::TSP::Reference* mutable_preset();
  inline ::TSP::Reference* release_preset();
  inline void set_allocated_preset(::TSP::Reference* preset);

  // required uint32 new_index = 4;
  inline bool has_new_index() const;
  inline void clear_new_index();
  static const int kNewIndexFieldNumber = 4;
  inline ::google::protobuf::uint32 new_index() const;
  inline void set_new_index(::google::protobuf::uint32 value);

  // required uint32 old_index = 5;
  inline bool has_old_index() const;
  inline void clear_old_index();
  static const int kOldIndexFieldNumber = 5;
  inline ::google::protobuf::uint32 old_index() const;
  inline void set_old_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TSS.ThemeMovePresetCommandArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_theme();
  inline void clear_has_theme();
  inline void set_has_preset();
  inline void clear_has_preset();
  inline void set_has_new_index();
  inline void clear_has_new_index();
  inline void set_has_old_index();
  inline void clear_has_old_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSK::CommandArchive* super_;
  ::TSP::Reference* theme_;
  ::TSP::Reference* preset_;
  ::google::protobuf::uint32 new_index_;
  ::google::protobuf::uint32 old_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_TSSArchives_2eproto();
  friend void protobuf_AssignDesc_TSSArchives_2eproto();
  friend void protobuf_ShutdownFile_TSSArchives_2eproto();

  void InitAsDefaultInstance();
  static ThemeMovePresetCommandArchive* default_instance_;
};
// -------------------------------------------------------------------

class ThemeReplaceStylePresetCommandArchive : public ::google::protobuf::Message {
 public:
  ThemeReplaceStylePresetCommandArchive();
  virtual ~ThemeReplaceStylePresetCommandArchive();

  ThemeReplaceStylePresetCommandArchive(const ThemeReplaceStylePresetCommandArchive& from);

  inline ThemeReplaceStylePresetCommandArchive& operator=(const ThemeReplaceStylePresetCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThemeReplaceStylePresetCommandArchive& default_instance();

  void Swap(ThemeReplaceStylePresetCommandArchive* other);

  // implements Message ----------------------------------------------

  ThemeReplaceStylePresetCommandArchive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ThemeReplaceStylePresetCommandArchive& from);
  void MergeFrom(const ThemeReplaceStylePresetCommandArchive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .TSK.CommandArchive super = 1;
  inline bool has_super() const;
  inline void clear_super();
  static const int kSuperFieldNumber = 1;
  inline const ::TSK::CommandArchive& super() const;
  inline ::TSK::CommandArchive* mutable_super();
  inline ::TSK::CommandArchive* release_super();
  inline void set_allocated_super(::TSK::CommandArchive* super);

  // required .TSP.Reference preset = 3;
  inline bool has_preset() const;
  inline void clear_preset();
  static const int kPresetFieldNumber = 3;
  inline const ::TSP::Reference& preset() const;
  inline ::TSP::Reference* mutable_preset();
  inline ::TSP::Reference* release_preset();
  inline void set_allocated_preset(::TSP::Reference* preset);

  // required .TSP.Reference old_preset = 4;
  inline bool has_old_preset() const;
  inline void clear_old_preset();
  static const int kOldPresetFieldNumber = 4;
  inline const ::TSP::Reference& old_preset() const;
  inline ::TSP::Reference* mutable_old_preset();
  inline ::TSP::Reference* release_old_preset();
  inline void set_allocated_old_preset(::TSP::Reference* old_preset);

  // @@protoc_insertion_point(class_scope:TSS.ThemeReplaceStylePresetCommandArchive)
 private:
  inline void set_has_super();
  inline void clear_has_super();
  inline void set_has_preset();
  inline void clear_has_preset();
  inline void set_has_old_preset();
  inline void clear_has_old_preset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TSK::CommandArchive* super_;
  ::TSP::Reference* preset_;
  ::TSP::Reference* old_preset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_TSSArchives_2eproto();
  friend void protobuf_AssignDesc_TSSArchives_2eproto();
  friend void protobuf_ShutdownFile_TSSArchives_2eproto();

  void InitAsDefaultInstance();
  static ThemeReplaceStylePresetCommandArchive* default_instance_;
};
// ===================================================================


// ===================================================================

// StyleArchive

// optional string name = 1;
inline bool StyleArchive::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StyleArchive::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StyleArchive::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StyleArchive::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& StyleArchive::name() const {
  return *name_;
}
inline void StyleArchive::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void StyleArchive::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void StyleArchive::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StyleArchive::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* StyleArchive::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StyleArchive::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string style_identifier = 2;
inline bool StyleArchive::has_style_identifier() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StyleArchive::set_has_style_identifier() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StyleArchive::clear_has_style_identifier() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StyleArchive::clear_style_identifier() {
  if (style_identifier_ != &::google::protobuf::internal::kEmptyString) {
    style_identifier_->clear();
  }
  clear_has_style_identifier();
}
inline const ::std::string& StyleArchive::style_identifier() const {
  return *style_identifier_;
}
inline void StyleArchive::set_style_identifier(const ::std::string& value) {
  set_has_style_identifier();
  if (style_identifier_ == &::google::protobuf::internal::kEmptyString) {
    style_identifier_ = new ::std::string;
  }
  style_identifier_->assign(value);
}
inline void StyleArchive::set_style_identifier(const char* value) {
  set_has_style_identifier();
  if (style_identifier_ == &::google::protobuf::internal::kEmptyString) {
    style_identifier_ = new ::std::string;
  }
  style_identifier_->assign(value);
}
inline void StyleArchive::set_style_identifier(const char* value, size_t size) {
  set_has_style_identifier();
  if (style_identifier_ == &::google::protobuf::internal::kEmptyString) {
    style_identifier_ = new ::std::string;
  }
  style_identifier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StyleArchive::mutable_style_identifier() {
  set_has_style_identifier();
  if (style_identifier_ == &::google::protobuf::internal::kEmptyString) {
    style_identifier_ = new ::std::string;
  }
  return style_identifier_;
}
inline ::std::string* StyleArchive::release_style_identifier() {
  clear_has_style_identifier();
  if (style_identifier_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = style_identifier_;
    style_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StyleArchive::set_allocated_style_identifier(::std::string* style_identifier) {
  if (style_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete style_identifier_;
  }
  if (style_identifier) {
    set_has_style_identifier();
    style_identifier_ = style_identifier;
  } else {
    clear_has_style_identifier();
    style_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .TSP.Reference parent = 3;
inline bool StyleArchive::has_parent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StyleArchive::set_has_parent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StyleArchive::clear_has_parent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StyleArchive::clear_parent() {
  if (parent_ != NULL) parent_->::TSP::Reference::Clear();
  clear_has_parent();
}
inline const ::TSP::Reference& StyleArchive::parent() const {
  return parent_ != NULL ? *parent_ : *default_instance_->parent_;
}
inline ::TSP::Reference* StyleArchive::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) parent_ = new ::TSP::Reference;
  return parent_;
}
inline ::TSP::Reference* StyleArchive::release_parent() {
  clear_has_parent();
  ::TSP::Reference* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline void StyleArchive::set_allocated_parent(::TSP::Reference* parent) {
  delete parent_;
  parent_ = parent;
  if (parent) {
    set_has_parent();
  } else {
    clear_has_parent();
  }
}

// optional bool is_variation = 4 [default = false];
inline bool StyleArchive::has_is_variation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StyleArchive::set_has_is_variation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StyleArchive::clear_has_is_variation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StyleArchive::clear_is_variation() {
  is_variation_ = false;
  clear_has_is_variation();
}
inline bool StyleArchive::is_variation() const {
  return is_variation_;
}
inline void StyleArchive::set_is_variation(bool value) {
  set_has_is_variation();
  is_variation_ = value;
}

// optional .TSP.Reference stylesheet = 5;
inline bool StyleArchive::has_stylesheet() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StyleArchive::set_has_stylesheet() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StyleArchive::clear_has_stylesheet() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StyleArchive::clear_stylesheet() {
  if (stylesheet_ != NULL) stylesheet_->::TSP::Reference::Clear();
  clear_has_stylesheet();
}
inline const ::TSP::Reference& StyleArchive::stylesheet() const {
  return stylesheet_ != NULL ? *stylesheet_ : *default_instance_->stylesheet_;
}
inline ::TSP::Reference* StyleArchive::mutable_stylesheet() {
  set_has_stylesheet();
  if (stylesheet_ == NULL) stylesheet_ = new ::TSP::Reference;
  return stylesheet_;
}
inline ::TSP::Reference* StyleArchive::release_stylesheet() {
  clear_has_stylesheet();
  ::TSP::Reference* temp = stylesheet_;
  stylesheet_ = NULL;
  return temp;
}
inline void StyleArchive::set_allocated_stylesheet(::TSP::Reference* stylesheet) {
  delete stylesheet_;
  stylesheet_ = stylesheet;
  if (stylesheet) {
    set_has_stylesheet();
  } else {
    clear_has_stylesheet();
  }
}

// -------------------------------------------------------------------

// StylesheetArchive_IdentifiedStyleEntry

// required string identifier = 1;
inline bool StylesheetArchive_IdentifiedStyleEntry::has_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StylesheetArchive_IdentifiedStyleEntry::set_has_identifier() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StylesheetArchive_IdentifiedStyleEntry::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StylesheetArchive_IdentifiedStyleEntry::clear_identifier() {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    identifier_->clear();
  }
  clear_has_identifier();
}
inline const ::std::string& StylesheetArchive_IdentifiedStyleEntry::identifier() const {
  return *identifier_;
}
inline void StylesheetArchive_IdentifiedStyleEntry::set_identifier(const ::std::string& value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void StylesheetArchive_IdentifiedStyleEntry::set_identifier(const char* value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void StylesheetArchive_IdentifiedStyleEntry::set_identifier(const char* value, size_t size) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StylesheetArchive_IdentifiedStyleEntry::mutable_identifier() {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  return identifier_;
}
inline ::std::string* StylesheetArchive_IdentifiedStyleEntry::release_identifier() {
  clear_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = identifier_;
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StylesheetArchive_IdentifiedStyleEntry::set_allocated_identifier(::std::string* identifier) {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete identifier_;
  }
  if (identifier) {
    set_has_identifier();
    identifier_ = identifier;
  } else {
    clear_has_identifier();
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .TSP.Reference style = 2;
inline bool StylesheetArchive_IdentifiedStyleEntry::has_style() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StylesheetArchive_IdentifiedStyleEntry::set_has_style() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StylesheetArchive_IdentifiedStyleEntry::clear_has_style() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StylesheetArchive_IdentifiedStyleEntry::clear_style() {
  if (style_ != NULL) style_->::TSP::Reference::Clear();
  clear_has_style();
}
inline const ::TSP::Reference& StylesheetArchive_IdentifiedStyleEntry::style() const {
  return style_ != NULL ? *style_ : *default_instance_->style_;
}
inline ::TSP::Reference* StylesheetArchive_IdentifiedStyleEntry::mutable_style() {
  set_has_style();
  if (style_ == NULL) style_ = new ::TSP::Reference;
  return style_;
}
inline ::TSP::Reference* StylesheetArchive_IdentifiedStyleEntry::release_style() {
  clear_has_style();
  ::TSP::Reference* temp = style_;
  style_ = NULL;
  return temp;
}
inline void StylesheetArchive_IdentifiedStyleEntry::set_allocated_style(::TSP::Reference* style) {
  delete style_;
  style_ = style;
  if (style) {
    set_has_style();
  } else {
    clear_has_style();
  }
}

// -------------------------------------------------------------------

// StylesheetArchive_StyleChildrenEntry

// required .TSP.Reference parent = 1;
inline bool StylesheetArchive_StyleChildrenEntry::has_parent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StylesheetArchive_StyleChildrenEntry::set_has_parent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StylesheetArchive_StyleChildrenEntry::clear_has_parent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StylesheetArchive_StyleChildrenEntry::clear_parent() {
  if (parent_ != NULL) parent_->::TSP::Reference::Clear();
  clear_has_parent();
}
inline const ::TSP::Reference& StylesheetArchive_StyleChildrenEntry::parent() const {
  return parent_ != NULL ? *parent_ : *default_instance_->parent_;
}
inline ::TSP::Reference* StylesheetArchive_StyleChildrenEntry::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) parent_ = new ::TSP::Reference;
  return parent_;
}
inline ::TSP::Reference* StylesheetArchive_StyleChildrenEntry::release_parent() {
  clear_has_parent();
  ::TSP::Reference* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline void StylesheetArchive_StyleChildrenEntry::set_allocated_parent(::TSP::Reference* parent) {
  delete parent_;
  parent_ = parent;
  if (parent) {
    set_has_parent();
  } else {
    clear_has_parent();
  }
}

// repeated .TSP.Reference children = 2;
inline int StylesheetArchive_StyleChildrenEntry::children_size() const {
  return children_.size();
}
inline void StylesheetArchive_StyleChildrenEntry::clear_children() {
  children_.Clear();
}
inline const ::TSP::Reference& StylesheetArchive_StyleChildrenEntry::children(int index) const {
  return children_.Get(index);
}
inline ::TSP::Reference* StylesheetArchive_StyleChildrenEntry::mutable_children(int index) {
  return children_.Mutable(index);
}
inline ::TSP::Reference* StylesheetArchive_StyleChildrenEntry::add_children() {
  return children_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
StylesheetArchive_StyleChildrenEntry::children() const {
  return children_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
StylesheetArchive_StyleChildrenEntry::mutable_children() {
  return &children_;
}

// -------------------------------------------------------------------

// StylesheetArchive

// repeated .TSP.Reference styles = 1;
inline int StylesheetArchive::styles_size() const {
  return styles_.size();
}
inline void StylesheetArchive::clear_styles() {
  styles_.Clear();
}
inline const ::TSP::Reference& StylesheetArchive::styles(int index) const {
  return styles_.Get(index);
}
inline ::TSP::Reference* StylesheetArchive::mutable_styles(int index) {
  return styles_.Mutable(index);
}
inline ::TSP::Reference* StylesheetArchive::add_styles() {
  return styles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
StylesheetArchive::styles() const {
  return styles_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
StylesheetArchive::mutable_styles() {
  return &styles_;
}

// repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 2;
inline int StylesheetArchive::identifier_to_style_map_size() const {
  return identifier_to_style_map_.size();
}
inline void StylesheetArchive::clear_identifier_to_style_map() {
  identifier_to_style_map_.Clear();
}
inline const ::TSS::StylesheetArchive_IdentifiedStyleEntry& StylesheetArchive::identifier_to_style_map(int index) const {
  return identifier_to_style_map_.Get(index);
}
inline ::TSS::StylesheetArchive_IdentifiedStyleEntry* StylesheetArchive::mutable_identifier_to_style_map(int index) {
  return identifier_to_style_map_.Mutable(index);
}
inline ::TSS::StylesheetArchive_IdentifiedStyleEntry* StylesheetArchive::add_identifier_to_style_map() {
  return identifier_to_style_map_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSS::StylesheetArchive_IdentifiedStyleEntry >&
StylesheetArchive::identifier_to_style_map() const {
  return identifier_to_style_map_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSS::StylesheetArchive_IdentifiedStyleEntry >*
StylesheetArchive::mutable_identifier_to_style_map() {
  return &identifier_to_style_map_;
}

// optional .TSP.Reference parent = 3;
inline bool StylesheetArchive::has_parent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StylesheetArchive::set_has_parent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StylesheetArchive::clear_has_parent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StylesheetArchive::clear_parent() {
  if (parent_ != NULL) parent_->::TSP::Reference::Clear();
  clear_has_parent();
}
inline const ::TSP::Reference& StylesheetArchive::parent() const {
  return parent_ != NULL ? *parent_ : *default_instance_->parent_;
}
inline ::TSP::Reference* StylesheetArchive::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) parent_ = new ::TSP::Reference;
  return parent_;
}
inline ::TSP::Reference* StylesheetArchive::release_parent() {
  clear_has_parent();
  ::TSP::Reference* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline void StylesheetArchive::set_allocated_parent(::TSP::Reference* parent) {
  delete parent_;
  parent_ = parent;
  if (parent) {
    set_has_parent();
  } else {
    clear_has_parent();
  }
}

// optional bool is_locked = 4 [default = true];
inline bool StylesheetArchive::has_is_locked() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StylesheetArchive::set_has_is_locked() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StylesheetArchive::clear_has_is_locked() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StylesheetArchive::clear_is_locked() {
  is_locked_ = true;
  clear_has_is_locked();
}
inline bool StylesheetArchive::is_locked() const {
  return is_locked_;
}
inline void StylesheetArchive::set_is_locked(bool value) {
  set_has_is_locked();
  is_locked_ = value;
}

// repeated .TSS.StylesheetArchive.StyleChildrenEntry parent_to_children_style_map = 5;
inline int StylesheetArchive::parent_to_children_style_map_size() const {
  return parent_to_children_style_map_.size();
}
inline void StylesheetArchive::clear_parent_to_children_style_map() {
  parent_to_children_style_map_.Clear();
}
inline const ::TSS::StylesheetArchive_StyleChildrenEntry& StylesheetArchive::parent_to_children_style_map(int index) const {
  return parent_to_children_style_map_.Get(index);
}
inline ::TSS::StylesheetArchive_StyleChildrenEntry* StylesheetArchive::mutable_parent_to_children_style_map(int index) {
  return parent_to_children_style_map_.Mutable(index);
}
inline ::TSS::StylesheetArchive_StyleChildrenEntry* StylesheetArchive::add_parent_to_children_style_map() {
  return parent_to_children_style_map_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSS::StylesheetArchive_StyleChildrenEntry >&
StylesheetArchive::parent_to_children_style_map() const {
  return parent_to_children_style_map_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSS::StylesheetArchive_StyleChildrenEntry >*
StylesheetArchive::mutable_parent_to_children_style_map() {
  return &parent_to_children_style_map_;
}

// optional bool can_cull_styles = 6 [default = false];
inline bool StylesheetArchive::has_can_cull_styles() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StylesheetArchive::set_has_can_cull_styles() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StylesheetArchive::clear_has_can_cull_styles() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StylesheetArchive::clear_can_cull_styles() {
  can_cull_styles_ = false;
  clear_has_can_cull_styles();
}
inline bool StylesheetArchive::can_cull_styles() const {
  return can_cull_styles_;
}
inline void StylesheetArchive::set_can_cull_styles(bool value) {
  set_has_can_cull_styles();
  can_cull_styles_ = value;
}

// -------------------------------------------------------------------

// ThemeArchive

// optional .TSP.Reference stylesheet = 1;
inline bool ThemeArchive::has_stylesheet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ThemeArchive::set_has_stylesheet() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ThemeArchive::clear_has_stylesheet() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ThemeArchive::clear_stylesheet() {
  if (stylesheet_ != NULL) stylesheet_->::TSP::Reference::Clear();
  clear_has_stylesheet();
}
inline const ::TSP::Reference& ThemeArchive::stylesheet() const {
  return stylesheet_ != NULL ? *stylesheet_ : *default_instance_->stylesheet_;
}
inline ::TSP::Reference* ThemeArchive::mutable_stylesheet() {
  set_has_stylesheet();
  if (stylesheet_ == NULL) stylesheet_ = new ::TSP::Reference;
  return stylesheet_;
}
inline ::TSP::Reference* ThemeArchive::release_stylesheet() {
  clear_has_stylesheet();
  ::TSP::Reference* temp = stylesheet_;
  stylesheet_ = NULL;
  return temp;
}
inline void ThemeArchive::set_allocated_stylesheet(::TSP::Reference* stylesheet) {
  delete stylesheet_;
  stylesheet_ = stylesheet;
  if (stylesheet) {
    set_has_stylesheet();
  } else {
    clear_has_stylesheet();
  }
}

// optional string theme_identifier = 3;
inline bool ThemeArchive::has_theme_identifier() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ThemeArchive::set_has_theme_identifier() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ThemeArchive::clear_has_theme_identifier() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ThemeArchive::clear_theme_identifier() {
  if (theme_identifier_ != &::google::protobuf::internal::kEmptyString) {
    theme_identifier_->clear();
  }
  clear_has_theme_identifier();
}
inline const ::std::string& ThemeArchive::theme_identifier() const {
  return *theme_identifier_;
}
inline void ThemeArchive::set_theme_identifier(const ::std::string& value) {
  set_has_theme_identifier();
  if (theme_identifier_ == &::google::protobuf::internal::kEmptyString) {
    theme_identifier_ = new ::std::string;
  }
  theme_identifier_->assign(value);
}
inline void ThemeArchive::set_theme_identifier(const char* value) {
  set_has_theme_identifier();
  if (theme_identifier_ == &::google::protobuf::internal::kEmptyString) {
    theme_identifier_ = new ::std::string;
  }
  theme_identifier_->assign(value);
}
inline void ThemeArchive::set_theme_identifier(const char* value, size_t size) {
  set_has_theme_identifier();
  if (theme_identifier_ == &::google::protobuf::internal::kEmptyString) {
    theme_identifier_ = new ::std::string;
  }
  theme_identifier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ThemeArchive::mutable_theme_identifier() {
  set_has_theme_identifier();
  if (theme_identifier_ == &::google::protobuf::internal::kEmptyString) {
    theme_identifier_ = new ::std::string;
  }
  return theme_identifier_;
}
inline ::std::string* ThemeArchive::release_theme_identifier() {
  clear_has_theme_identifier();
  if (theme_identifier_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = theme_identifier_;
    theme_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ThemeArchive::set_allocated_theme_identifier(::std::string* theme_identifier) {
  if (theme_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete theme_identifier_;
  }
  if (theme_identifier) {
    set_has_theme_identifier();
    theme_identifier_ = theme_identifier;
  } else {
    clear_has_theme_identifier();
    theme_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .TSP.Color color_presets = 10;
inline int ThemeArchive::color_presets_size() const {
  return color_presets_.size();
}
inline void ThemeArchive::clear_color_presets() {
  color_presets_.Clear();
}
inline const ::TSP::Color& ThemeArchive::color_presets(int index) const {
  return color_presets_.Get(index);
}
inline ::TSP::Color* ThemeArchive::mutable_color_presets(int index) {
  return color_presets_.Mutable(index);
}
inline ::TSP::Color* ThemeArchive::add_color_presets() {
  return color_presets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Color >&
ThemeArchive::color_presets() const {
  return color_presets_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Color >*
ThemeArchive::mutable_color_presets() {
  return &color_presets_;
}

// -------------------------------------------------------------------

// ApplyThemeCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ApplyThemeCommandArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ApplyThemeCommandArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ApplyThemeCommandArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ApplyThemeCommandArchive::clear_super() {
  if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
  clear_has_super();
}
inline const ::TSK::CommandArchive& ApplyThemeCommandArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSK::CommandArchive* ApplyThemeCommandArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSK::CommandArchive;
  return super_;
}
inline ::TSK::CommandArchive* ApplyThemeCommandArchive::release_super() {
  clear_has_super();
  ::TSK::CommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void ApplyThemeCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// repeated .TSP.Reference commands = 2;
inline int ApplyThemeCommandArchive::commands_size() const {
  return commands_.size();
}
inline void ApplyThemeCommandArchive::clear_commands() {
  commands_.Clear();
}
inline const ::TSP::Reference& ApplyThemeCommandArchive::commands(int index) const {
  return commands_.Get(index);
}
inline ::TSP::Reference* ApplyThemeCommandArchive::mutable_commands(int index) {
  return commands_.Mutable(index);
}
inline ::TSP::Reference* ApplyThemeCommandArchive::add_commands() {
  return commands_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
ApplyThemeCommandArchive::commands() const {
  return commands_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
ApplyThemeCommandArchive::mutable_commands() {
  return &commands_;
}

// optional .TSP.Reference old_theme = 3;
inline bool ApplyThemeCommandArchive::has_old_theme() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ApplyThemeCommandArchive::set_has_old_theme() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ApplyThemeCommandArchive::clear_has_old_theme() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ApplyThemeCommandArchive::clear_old_theme() {
  if (old_theme_ != NULL) old_theme_->::TSP::Reference::Clear();
  clear_has_old_theme();
}
inline const ::TSP::Reference& ApplyThemeCommandArchive::old_theme() const {
  return old_theme_ != NULL ? *old_theme_ : *default_instance_->old_theme_;
}
inline ::TSP::Reference* ApplyThemeCommandArchive::mutable_old_theme() {
  set_has_old_theme();
  if (old_theme_ == NULL) old_theme_ = new ::TSP::Reference;
  return old_theme_;
}
inline ::TSP::Reference* ApplyThemeCommandArchive::release_old_theme() {
  clear_has_old_theme();
  ::TSP::Reference* temp = old_theme_;
  old_theme_ = NULL;
  return temp;
}
inline void ApplyThemeCommandArchive::set_allocated_old_theme(::TSP::Reference* old_theme) {
  delete old_theme_;
  old_theme_ = old_theme;
  if (old_theme) {
    set_has_old_theme();
  } else {
    clear_has_old_theme();
  }
}

// optional .TSP.Reference new_theme = 4;
inline bool ApplyThemeCommandArchive::has_new_theme() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ApplyThemeCommandArchive::set_has_new_theme() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ApplyThemeCommandArchive::clear_has_new_theme() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ApplyThemeCommandArchive::clear_new_theme() {
  if (new_theme_ != NULL) new_theme_->::TSP::Reference::Clear();
  clear_has_new_theme();
}
inline const ::TSP::Reference& ApplyThemeCommandArchive::new_theme() const {
  return new_theme_ != NULL ? *new_theme_ : *default_instance_->new_theme_;
}
inline ::TSP::Reference* ApplyThemeCommandArchive::mutable_new_theme() {
  set_has_new_theme();
  if (new_theme_ == NULL) new_theme_ = new ::TSP::Reference;
  return new_theme_;
}
inline ::TSP::Reference* ApplyThemeCommandArchive::release_new_theme() {
  clear_has_new_theme();
  ::TSP::Reference* temp = new_theme_;
  new_theme_ = NULL;
  return temp;
}
inline void ApplyThemeCommandArchive::set_allocated_new_theme(::TSP::Reference* new_theme) {
  delete new_theme_;
  new_theme_ = new_theme;
  if (new_theme) {
    set_has_new_theme();
  } else {
    clear_has_new_theme();
  }
}

// -------------------------------------------------------------------

// ApplyThemeChildCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ApplyThemeChildCommandArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ApplyThemeChildCommandArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ApplyThemeChildCommandArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ApplyThemeChildCommandArchive::clear_super() {
  if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
  clear_has_super();
}
inline const ::TSK::CommandArchive& ApplyThemeChildCommandArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSK::CommandArchive* ApplyThemeChildCommandArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSK::CommandArchive;
  return super_;
}
inline ::TSK::CommandArchive* ApplyThemeChildCommandArchive::release_super() {
  clear_has_super();
  ::TSK::CommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void ApplyThemeChildCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// optional .TSP.Reference parent = 2;
inline bool ApplyThemeChildCommandArchive::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ApplyThemeChildCommandArchive::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ApplyThemeChildCommandArchive::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ApplyThemeChildCommandArchive::clear_parent() {
  if (parent_ != NULL) parent_->::TSP::Reference::Clear();
  clear_has_parent();
}
inline const ::TSP::Reference& ApplyThemeChildCommandArchive::parent() const {
  return parent_ != NULL ? *parent_ : *default_instance_->parent_;
}
inline ::TSP::Reference* ApplyThemeChildCommandArchive::mutable_parent() {
  set_has_parent();
  if (parent_ == NULL) parent_ = new ::TSP::Reference;
  return parent_;
}
inline ::TSP::Reference* ApplyThemeChildCommandArchive::release_parent() {
  clear_has_parent();
  ::TSP::Reference* temp = parent_;
  parent_ = NULL;
  return temp;
}
inline void ApplyThemeChildCommandArchive::set_allocated_parent(::TSP::Reference* parent) {
  delete parent_;
  parent_ = parent;
  if (parent) {
    set_has_parent();
  } else {
    clear_has_parent();
  }
}

// -------------------------------------------------------------------

// ReapUnusedStyleCommandArchive_IdentifiedStyleEntry

// required string identifier = 1;
inline bool ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::has_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::set_has_identifier() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::clear_identifier() {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    identifier_->clear();
  }
  clear_has_identifier();
}
inline const ::std::string& ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::identifier() const {
  return *identifier_;
}
inline void ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::set_identifier(const ::std::string& value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::set_identifier(const char* value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::set_identifier(const char* value, size_t size) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::mutable_identifier() {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  return identifier_;
}
inline ::std::string* ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::release_identifier() {
  clear_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = identifier_;
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::set_allocated_identifier(::std::string* identifier) {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete identifier_;
  }
  if (identifier) {
    set_has_identifier();
    identifier_ = identifier;
  } else {
    clear_has_identifier();
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .TSP.Reference style = 2;
inline bool ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::has_style() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::set_has_style() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::clear_has_style() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::clear_style() {
  if (style_ != NULL) style_->::TSP::Reference::Clear();
  clear_has_style();
}
inline const ::TSP::Reference& ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::style() const {
  return style_ != NULL ? *style_ : *default_instance_->style_;
}
inline ::TSP::Reference* ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::mutable_style() {
  set_has_style();
  if (style_ == NULL) style_ = new ::TSP::Reference;
  return style_;
}
inline ::TSP::Reference* ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::release_style() {
  clear_has_style();
  ::TSP::Reference* temp = style_;
  style_ = NULL;
  return temp;
}
inline void ReapUnusedStyleCommandArchive_IdentifiedStyleEntry::set_allocated_style(::TSP::Reference* style) {
  delete style_;
  style_ = style;
  if (style) {
    set_has_style();
  } else {
    clear_has_style();
  }
}

// -------------------------------------------------------------------

// ReapUnusedStyleCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ReapUnusedStyleCommandArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReapUnusedStyleCommandArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReapUnusedStyleCommandArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReapUnusedStyleCommandArchive::clear_super() {
  if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
  clear_has_super();
}
inline const ::TSK::CommandArchive& ReapUnusedStyleCommandArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSK::CommandArchive* ReapUnusedStyleCommandArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSK::CommandArchive;
  return super_;
}
inline ::TSK::CommandArchive* ReapUnusedStyleCommandArchive::release_super() {
  clear_has_super();
  ::TSK::CommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void ReapUnusedStyleCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// optional .TSP.Reference stylesheet = 2;
inline bool ReapUnusedStyleCommandArchive::has_stylesheet() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReapUnusedStyleCommandArchive::set_has_stylesheet() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReapUnusedStyleCommandArchive::clear_has_stylesheet() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReapUnusedStyleCommandArchive::clear_stylesheet() {
  if (stylesheet_ != NULL) stylesheet_->::TSP::Reference::Clear();
  clear_has_stylesheet();
}
inline const ::TSP::Reference& ReapUnusedStyleCommandArchive::stylesheet() const {
  return stylesheet_ != NULL ? *stylesheet_ : *default_instance_->stylesheet_;
}
inline ::TSP::Reference* ReapUnusedStyleCommandArchive::mutable_stylesheet() {
  set_has_stylesheet();
  if (stylesheet_ == NULL) stylesheet_ = new ::TSP::Reference;
  return stylesheet_;
}
inline ::TSP::Reference* ReapUnusedStyleCommandArchive::release_stylesheet() {
  clear_has_stylesheet();
  ::TSP::Reference* temp = stylesheet_;
  stylesheet_ = NULL;
  return temp;
}
inline void ReapUnusedStyleCommandArchive::set_allocated_stylesheet(::TSP::Reference* stylesheet) {
  delete stylesheet_;
  stylesheet_ = stylesheet;
  if (stylesheet) {
    set_has_stylesheet();
  } else {
    clear_has_stylesheet();
  }
}

// repeated .TSP.Reference styles = 3;
inline int ReapUnusedStyleCommandArchive::styles_size() const {
  return styles_.size();
}
inline void ReapUnusedStyleCommandArchive::clear_styles() {
  styles_.Clear();
}
inline const ::TSP::Reference& ReapUnusedStyleCommandArchive::styles(int index) const {
  return styles_.Get(index);
}
inline ::TSP::Reference* ReapUnusedStyleCommandArchive::mutable_styles(int index) {
  return styles_.Mutable(index);
}
inline ::TSP::Reference* ReapUnusedStyleCommandArchive::add_styles() {
  return styles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSP::Reference >&
ReapUnusedStyleCommandArchive::styles() const {
  return styles_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSP::Reference >*
ReapUnusedStyleCommandArchive::mutable_styles() {
  return &styles_;
}

// repeated .TSS.ReapUnusedStyleCommandArchive.IdentifiedStyleEntry identified_styles = 4;
inline int ReapUnusedStyleCommandArchive::identified_styles_size() const {
  return identified_styles_.size();
}
inline void ReapUnusedStyleCommandArchive::clear_identified_styles() {
  identified_styles_.Clear();
}
inline const ::TSS::ReapUnusedStyleCommandArchive_IdentifiedStyleEntry& ReapUnusedStyleCommandArchive::identified_styles(int index) const {
  return identified_styles_.Get(index);
}
inline ::TSS::ReapUnusedStyleCommandArchive_IdentifiedStyleEntry* ReapUnusedStyleCommandArchive::mutable_identified_styles(int index) {
  return identified_styles_.Mutable(index);
}
inline ::TSS::ReapUnusedStyleCommandArchive_IdentifiedStyleEntry* ReapUnusedStyleCommandArchive::add_identified_styles() {
  return identified_styles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TSS::ReapUnusedStyleCommandArchive_IdentifiedStyleEntry >&
ReapUnusedStyleCommandArchive::identified_styles() const {
  return identified_styles_;
}
inline ::google::protobuf::RepeatedPtrField< ::TSS::ReapUnusedStyleCommandArchive_IdentifiedStyleEntry >*
ReapUnusedStyleCommandArchive::mutable_identified_styles() {
  return &identified_styles_;
}

// -------------------------------------------------------------------

// StyleUpdatePropertyMapCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool StyleUpdatePropertyMapCommandArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StyleUpdatePropertyMapCommandArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StyleUpdatePropertyMapCommandArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StyleUpdatePropertyMapCommandArchive::clear_super() {
  if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
  clear_has_super();
}
inline const ::TSK::CommandArchive& StyleUpdatePropertyMapCommandArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSK::CommandArchive* StyleUpdatePropertyMapCommandArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSK::CommandArchive;
  return super_;
}
inline ::TSK::CommandArchive* StyleUpdatePropertyMapCommandArchive::release_super() {
  clear_has_super();
  ::TSK::CommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void StyleUpdatePropertyMapCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// required .TSP.Reference current_style = 2;
inline bool StyleUpdatePropertyMapCommandArchive::has_current_style() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StyleUpdatePropertyMapCommandArchive::set_has_current_style() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StyleUpdatePropertyMapCommandArchive::clear_has_current_style() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StyleUpdatePropertyMapCommandArchive::clear_current_style() {
  if (current_style_ != NULL) current_style_->::TSP::Reference::Clear();
  clear_has_current_style();
}
inline const ::TSP::Reference& StyleUpdatePropertyMapCommandArchive::current_style() const {
  return current_style_ != NULL ? *current_style_ : *default_instance_->current_style_;
}
inline ::TSP::Reference* StyleUpdatePropertyMapCommandArchive::mutable_current_style() {
  set_has_current_style();
  if (current_style_ == NULL) current_style_ = new ::TSP::Reference;
  return current_style_;
}
inline ::TSP::Reference* StyleUpdatePropertyMapCommandArchive::release_current_style() {
  clear_has_current_style();
  ::TSP::Reference* temp = current_style_;
  current_style_ = NULL;
  return temp;
}
inline void StyleUpdatePropertyMapCommandArchive::set_allocated_current_style(::TSP::Reference* current_style) {
  delete current_style_;
  current_style_ = current_style;
  if (current_style) {
    set_has_current_style();
  } else {
    clear_has_current_style();
  }
}

// required .TSP.Reference style_with_old_property_map = 3;
inline bool StyleUpdatePropertyMapCommandArchive::has_style_with_old_property_map() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StyleUpdatePropertyMapCommandArchive::set_has_style_with_old_property_map() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StyleUpdatePropertyMapCommandArchive::clear_has_style_with_old_property_map() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StyleUpdatePropertyMapCommandArchive::clear_style_with_old_property_map() {
  if (style_with_old_property_map_ != NULL) style_with_old_property_map_->::TSP::Reference::Clear();
  clear_has_style_with_old_property_map();
}
inline const ::TSP::Reference& StyleUpdatePropertyMapCommandArchive::style_with_old_property_map() const {
  return style_with_old_property_map_ != NULL ? *style_with_old_property_map_ : *default_instance_->style_with_old_property_map_;
}
inline ::TSP::Reference* StyleUpdatePropertyMapCommandArchive::mutable_style_with_old_property_map() {
  set_has_style_with_old_property_map();
  if (style_with_old_property_map_ == NULL) style_with_old_property_map_ = new ::TSP::Reference;
  return style_with_old_property_map_;
}
inline ::TSP::Reference* StyleUpdatePropertyMapCommandArchive::release_style_with_old_property_map() {
  clear_has_style_with_old_property_map();
  ::TSP::Reference* temp = style_with_old_property_map_;
  style_with_old_property_map_ = NULL;
  return temp;
}
inline void StyleUpdatePropertyMapCommandArchive::set_allocated_style_with_old_property_map(::TSP::Reference* style_with_old_property_map) {
  delete style_with_old_property_map_;
  style_with_old_property_map_ = style_with_old_property_map;
  if (style_with_old_property_map) {
    set_has_style_with_old_property_map();
  } else {
    clear_has_style_with_old_property_map();
  }
}

// required .TSP.Reference style_with_new_property_map = 4;
inline bool StyleUpdatePropertyMapCommandArchive::has_style_with_new_property_map() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StyleUpdatePropertyMapCommandArchive::set_has_style_with_new_property_map() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StyleUpdatePropertyMapCommandArchive::clear_has_style_with_new_property_map() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StyleUpdatePropertyMapCommandArchive::clear_style_with_new_property_map() {
  if (style_with_new_property_map_ != NULL) style_with_new_property_map_->::TSP::Reference::Clear();
  clear_has_style_with_new_property_map();
}
inline const ::TSP::Reference& StyleUpdatePropertyMapCommandArchive::style_with_new_property_map() const {
  return style_with_new_property_map_ != NULL ? *style_with_new_property_map_ : *default_instance_->style_with_new_property_map_;
}
inline ::TSP::Reference* StyleUpdatePropertyMapCommandArchive::mutable_style_with_new_property_map() {
  set_has_style_with_new_property_map();
  if (style_with_new_property_map_ == NULL) style_with_new_property_map_ = new ::TSP::Reference;
  return style_with_new_property_map_;
}
inline ::TSP::Reference* StyleUpdatePropertyMapCommandArchive::release_style_with_new_property_map() {
  clear_has_style_with_new_property_map();
  ::TSP::Reference* temp = style_with_new_property_map_;
  style_with_new_property_map_ = NULL;
  return temp;
}
inline void StyleUpdatePropertyMapCommandArchive::set_allocated_style_with_new_property_map(::TSP::Reference* style_with_new_property_map) {
  delete style_with_new_property_map_;
  style_with_new_property_map_ = style_with_new_property_map;
  if (style_with_new_property_map) {
    set_has_style_with_new_property_map();
  } else {
    clear_has_style_with_new_property_map();
  }
}

// optional bool notify_for_style_clients = 6 [default = true];
inline bool StyleUpdatePropertyMapCommandArchive::has_notify_for_style_clients() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StyleUpdatePropertyMapCommandArchive::set_has_notify_for_style_clients() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StyleUpdatePropertyMapCommandArchive::clear_has_notify_for_style_clients() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StyleUpdatePropertyMapCommandArchive::clear_notify_for_style_clients() {
  notify_for_style_clients_ = true;
  clear_has_notify_for_style_clients();
}
inline bool StyleUpdatePropertyMapCommandArchive::notify_for_style_clients() const {
  return notify_for_style_clients_;
}
inline void StyleUpdatePropertyMapCommandArchive::set_notify_for_style_clients(bool value) {
  set_has_notify_for_style_clients();
  notify_for_style_clients_ = value;
}

// -------------------------------------------------------------------

// ThemeReplacePresetCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ThemeReplacePresetCommandArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ThemeReplacePresetCommandArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ThemeReplacePresetCommandArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ThemeReplacePresetCommandArchive::clear_super() {
  if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
  clear_has_super();
}
inline const ::TSK::CommandArchive& ThemeReplacePresetCommandArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSK::CommandArchive* ThemeReplacePresetCommandArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSK::CommandArchive;
  return super_;
}
inline ::TSK::CommandArchive* ThemeReplacePresetCommandArchive::release_super() {
  clear_has_super();
  ::TSK::CommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void ThemeReplacePresetCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// required .TSP.Reference theme = 2;
inline bool ThemeReplacePresetCommandArchive::has_theme() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ThemeReplacePresetCommandArchive::set_has_theme() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ThemeReplacePresetCommandArchive::clear_has_theme() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ThemeReplacePresetCommandArchive::clear_theme() {
  if (theme_ != NULL) theme_->::TSP::Reference::Clear();
  clear_has_theme();
}
inline const ::TSP::Reference& ThemeReplacePresetCommandArchive::theme() const {
  return theme_ != NULL ? *theme_ : *default_instance_->theme_;
}
inline ::TSP::Reference* ThemeReplacePresetCommandArchive::mutable_theme() {
  set_has_theme();
  if (theme_ == NULL) theme_ = new ::TSP::Reference;
  return theme_;
}
inline ::TSP::Reference* ThemeReplacePresetCommandArchive::release_theme() {
  clear_has_theme();
  ::TSP::Reference* temp = theme_;
  theme_ = NULL;
  return temp;
}
inline void ThemeReplacePresetCommandArchive::set_allocated_theme(::TSP::Reference* theme) {
  delete theme_;
  theme_ = theme;
  if (theme) {
    set_has_theme();
  } else {
    clear_has_theme();
  }
}

// required .TSP.Reference preset = 3;
inline bool ThemeReplacePresetCommandArchive::has_preset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ThemeReplacePresetCommandArchive::set_has_preset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ThemeReplacePresetCommandArchive::clear_has_preset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ThemeReplacePresetCommandArchive::clear_preset() {
  if (preset_ != NULL) preset_->::TSP::Reference::Clear();
  clear_has_preset();
}
inline const ::TSP::Reference& ThemeReplacePresetCommandArchive::preset() const {
  return preset_ != NULL ? *preset_ : *default_instance_->preset_;
}
inline ::TSP::Reference* ThemeReplacePresetCommandArchive::mutable_preset() {
  set_has_preset();
  if (preset_ == NULL) preset_ = new ::TSP::Reference;
  return preset_;
}
inline ::TSP::Reference* ThemeReplacePresetCommandArchive::release_preset() {
  clear_has_preset();
  ::TSP::Reference* temp = preset_;
  preset_ = NULL;
  return temp;
}
inline void ThemeReplacePresetCommandArchive::set_allocated_preset(::TSP::Reference* preset) {
  delete preset_;
  preset_ = preset;
  if (preset) {
    set_has_preset();
  } else {
    clear_has_preset();
  }
}

// required .TSP.Reference oldPreset = 4;
inline bool ThemeReplacePresetCommandArchive::has_oldpreset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ThemeReplacePresetCommandArchive::set_has_oldpreset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ThemeReplacePresetCommandArchive::clear_has_oldpreset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ThemeReplacePresetCommandArchive::clear_oldpreset() {
  if (oldpreset_ != NULL) oldpreset_->::TSP::Reference::Clear();
  clear_has_oldpreset();
}
inline const ::TSP::Reference& ThemeReplacePresetCommandArchive::oldpreset() const {
  return oldpreset_ != NULL ? *oldpreset_ : *default_instance_->oldpreset_;
}
inline ::TSP::Reference* ThemeReplacePresetCommandArchive::mutable_oldpreset() {
  set_has_oldpreset();
  if (oldpreset_ == NULL) oldpreset_ = new ::TSP::Reference;
  return oldpreset_;
}
inline ::TSP::Reference* ThemeReplacePresetCommandArchive::release_oldpreset() {
  clear_has_oldpreset();
  ::TSP::Reference* temp = oldpreset_;
  oldpreset_ = NULL;
  return temp;
}
inline void ThemeReplacePresetCommandArchive::set_allocated_oldpreset(::TSP::Reference* oldpreset) {
  delete oldpreset_;
  oldpreset_ = oldpreset;
  if (oldpreset) {
    set_has_oldpreset();
  } else {
    clear_has_oldpreset();
  }
}

// required uint32 index = 5;
inline bool ThemeReplacePresetCommandArchive::has_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ThemeReplacePresetCommandArchive::set_has_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ThemeReplacePresetCommandArchive::clear_has_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ThemeReplacePresetCommandArchive::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 ThemeReplacePresetCommandArchive::index() const {
  return index_;
}
inline void ThemeReplacePresetCommandArchive::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// ThemeReplaceColorPresetCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ThemeReplaceColorPresetCommandArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ThemeReplaceColorPresetCommandArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ThemeReplaceColorPresetCommandArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ThemeReplaceColorPresetCommandArchive::clear_super() {
  if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
  clear_has_super();
}
inline const ::TSK::CommandArchive& ThemeReplaceColorPresetCommandArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSK::CommandArchive* ThemeReplaceColorPresetCommandArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSK::CommandArchive;
  return super_;
}
inline ::TSK::CommandArchive* ThemeReplaceColorPresetCommandArchive::release_super() {
  clear_has_super();
  ::TSK::CommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void ThemeReplaceColorPresetCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// required .TSP.Reference theme = 2;
inline bool ThemeReplaceColorPresetCommandArchive::has_theme() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ThemeReplaceColorPresetCommandArchive::set_has_theme() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ThemeReplaceColorPresetCommandArchive::clear_has_theme() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ThemeReplaceColorPresetCommandArchive::clear_theme() {
  if (theme_ != NULL) theme_->::TSP::Reference::Clear();
  clear_has_theme();
}
inline const ::TSP::Reference& ThemeReplaceColorPresetCommandArchive::theme() const {
  return theme_ != NULL ? *theme_ : *default_instance_->theme_;
}
inline ::TSP::Reference* ThemeReplaceColorPresetCommandArchive::mutable_theme() {
  set_has_theme();
  if (theme_ == NULL) theme_ = new ::TSP::Reference;
  return theme_;
}
inline ::TSP::Reference* ThemeReplaceColorPresetCommandArchive::release_theme() {
  clear_has_theme();
  ::TSP::Reference* temp = theme_;
  theme_ = NULL;
  return temp;
}
inline void ThemeReplaceColorPresetCommandArchive::set_allocated_theme(::TSP::Reference* theme) {
  delete theme_;
  theme_ = theme;
  if (theme) {
    set_has_theme();
  } else {
    clear_has_theme();
  }
}

// required .TSP.Color color = 3;
inline bool ThemeReplaceColorPresetCommandArchive::has_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ThemeReplaceColorPresetCommandArchive::set_has_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ThemeReplaceColorPresetCommandArchive::clear_has_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ThemeReplaceColorPresetCommandArchive::clear_color() {
  if (color_ != NULL) color_->::TSP::Color::Clear();
  clear_has_color();
}
inline const ::TSP::Color& ThemeReplaceColorPresetCommandArchive::color() const {
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
inline ::TSP::Color* ThemeReplaceColorPresetCommandArchive::mutable_color() {
  set_has_color();
  if (color_ == NULL) color_ = new ::TSP::Color;
  return color_;
}
inline ::TSP::Color* ThemeReplaceColorPresetCommandArchive::release_color() {
  clear_has_color();
  ::TSP::Color* temp = color_;
  color_ = NULL;
  return temp;
}
inline void ThemeReplaceColorPresetCommandArchive::set_allocated_color(::TSP::Color* color) {
  delete color_;
  color_ = color;
  if (color) {
    set_has_color();
  } else {
    clear_has_color();
  }
}

// required .TSP.Color old_color = 4;
inline bool ThemeReplaceColorPresetCommandArchive::has_old_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ThemeReplaceColorPresetCommandArchive::set_has_old_color() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ThemeReplaceColorPresetCommandArchive::clear_has_old_color() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ThemeReplaceColorPresetCommandArchive::clear_old_color() {
  if (old_color_ != NULL) old_color_->::TSP::Color::Clear();
  clear_has_old_color();
}
inline const ::TSP::Color& ThemeReplaceColorPresetCommandArchive::old_color() const {
  return old_color_ != NULL ? *old_color_ : *default_instance_->old_color_;
}
inline ::TSP::Color* ThemeReplaceColorPresetCommandArchive::mutable_old_color() {
  set_has_old_color();
  if (old_color_ == NULL) old_color_ = new ::TSP::Color;
  return old_color_;
}
inline ::TSP::Color* ThemeReplaceColorPresetCommandArchive::release_old_color() {
  clear_has_old_color();
  ::TSP::Color* temp = old_color_;
  old_color_ = NULL;
  return temp;
}
inline void ThemeReplaceColorPresetCommandArchive::set_allocated_old_color(::TSP::Color* old_color) {
  delete old_color_;
  old_color_ = old_color;
  if (old_color) {
    set_has_old_color();
  } else {
    clear_has_old_color();
  }
}

// required uint32 index = 5;
inline bool ThemeReplaceColorPresetCommandArchive::has_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ThemeReplaceColorPresetCommandArchive::set_has_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ThemeReplaceColorPresetCommandArchive::clear_has_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ThemeReplaceColorPresetCommandArchive::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 ThemeReplaceColorPresetCommandArchive::index() const {
  return index_;
}
inline void ThemeReplaceColorPresetCommandArchive::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// ThemeAddStylePresetCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ThemeAddStylePresetCommandArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ThemeAddStylePresetCommandArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ThemeAddStylePresetCommandArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ThemeAddStylePresetCommandArchive::clear_super() {
  if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
  clear_has_super();
}
inline const ::TSK::CommandArchive& ThemeAddStylePresetCommandArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSK::CommandArchive* ThemeAddStylePresetCommandArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSK::CommandArchive;
  return super_;
}
inline ::TSK::CommandArchive* ThemeAddStylePresetCommandArchive::release_super() {
  clear_has_super();
  ::TSK::CommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void ThemeAddStylePresetCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// required .TSP.Reference theme = 2;
inline bool ThemeAddStylePresetCommandArchive::has_theme() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ThemeAddStylePresetCommandArchive::set_has_theme() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ThemeAddStylePresetCommandArchive::clear_has_theme() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ThemeAddStylePresetCommandArchive::clear_theme() {
  if (theme_ != NULL) theme_->::TSP::Reference::Clear();
  clear_has_theme();
}
inline const ::TSP::Reference& ThemeAddStylePresetCommandArchive::theme() const {
  return theme_ != NULL ? *theme_ : *default_instance_->theme_;
}
inline ::TSP::Reference* ThemeAddStylePresetCommandArchive::mutable_theme() {
  set_has_theme();
  if (theme_ == NULL) theme_ = new ::TSP::Reference;
  return theme_;
}
inline ::TSP::Reference* ThemeAddStylePresetCommandArchive::release_theme() {
  clear_has_theme();
  ::TSP::Reference* temp = theme_;
  theme_ = NULL;
  return temp;
}
inline void ThemeAddStylePresetCommandArchive::set_allocated_theme(::TSP::Reference* theme) {
  delete theme_;
  theme_ = theme;
  if (theme) {
    set_has_theme();
  } else {
    clear_has_theme();
  }
}

// required .TSP.Reference preset = 3;
inline bool ThemeAddStylePresetCommandArchive::has_preset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ThemeAddStylePresetCommandArchive::set_has_preset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ThemeAddStylePresetCommandArchive::clear_has_preset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ThemeAddStylePresetCommandArchive::clear_preset() {
  if (preset_ != NULL) preset_->::TSP::Reference::Clear();
  clear_has_preset();
}
inline const ::TSP::Reference& ThemeAddStylePresetCommandArchive::preset() const {
  return preset_ != NULL ? *preset_ : *default_instance_->preset_;
}
inline ::TSP::Reference* ThemeAddStylePresetCommandArchive::mutable_preset() {
  set_has_preset();
  if (preset_ == NULL) preset_ = new ::TSP::Reference;
  return preset_;
}
inline ::TSP::Reference* ThemeAddStylePresetCommandArchive::release_preset() {
  clear_has_preset();
  ::TSP::Reference* temp = preset_;
  preset_ = NULL;
  return temp;
}
inline void ThemeAddStylePresetCommandArchive::set_allocated_preset(::TSP::Reference* preset) {
  delete preset_;
  preset_ = preset;
  if (preset) {
    set_has_preset();
  } else {
    clear_has_preset();
  }
}

// required string preset_kind = 4;
inline bool ThemeAddStylePresetCommandArchive::has_preset_kind() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ThemeAddStylePresetCommandArchive::set_has_preset_kind() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ThemeAddStylePresetCommandArchive::clear_has_preset_kind() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ThemeAddStylePresetCommandArchive::clear_preset_kind() {
  if (preset_kind_ != &::google::protobuf::internal::kEmptyString) {
    preset_kind_->clear();
  }
  clear_has_preset_kind();
}
inline const ::std::string& ThemeAddStylePresetCommandArchive::preset_kind() const {
  return *preset_kind_;
}
inline void ThemeAddStylePresetCommandArchive::set_preset_kind(const ::std::string& value) {
  set_has_preset_kind();
  if (preset_kind_ == &::google::protobuf::internal::kEmptyString) {
    preset_kind_ = new ::std::string;
  }
  preset_kind_->assign(value);
}
inline void ThemeAddStylePresetCommandArchive::set_preset_kind(const char* value) {
  set_has_preset_kind();
  if (preset_kind_ == &::google::protobuf::internal::kEmptyString) {
    preset_kind_ = new ::std::string;
  }
  preset_kind_->assign(value);
}
inline void ThemeAddStylePresetCommandArchive::set_preset_kind(const char* value, size_t size) {
  set_has_preset_kind();
  if (preset_kind_ == &::google::protobuf::internal::kEmptyString) {
    preset_kind_ = new ::std::string;
  }
  preset_kind_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ThemeAddStylePresetCommandArchive::mutable_preset_kind() {
  set_has_preset_kind();
  if (preset_kind_ == &::google::protobuf::internal::kEmptyString) {
    preset_kind_ = new ::std::string;
  }
  return preset_kind_;
}
inline ::std::string* ThemeAddStylePresetCommandArchive::release_preset_kind() {
  clear_has_preset_kind();
  if (preset_kind_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = preset_kind_;
    preset_kind_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ThemeAddStylePresetCommandArchive::set_allocated_preset_kind(::std::string* preset_kind) {
  if (preset_kind_ != &::google::protobuf::internal::kEmptyString) {
    delete preset_kind_;
  }
  if (preset_kind) {
    set_has_preset_kind();
    preset_kind_ = preset_kind;
  } else {
    clear_has_preset_kind();
    preset_kind_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string identifier = 5;
inline bool ThemeAddStylePresetCommandArchive::has_identifier() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ThemeAddStylePresetCommandArchive::set_has_identifier() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ThemeAddStylePresetCommandArchive::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ThemeAddStylePresetCommandArchive::clear_identifier() {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    identifier_->clear();
  }
  clear_has_identifier();
}
inline const ::std::string& ThemeAddStylePresetCommandArchive::identifier() const {
  return *identifier_;
}
inline void ThemeAddStylePresetCommandArchive::set_identifier(const ::std::string& value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void ThemeAddStylePresetCommandArchive::set_identifier(const char* value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void ThemeAddStylePresetCommandArchive::set_identifier(const char* value, size_t size) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ThemeAddStylePresetCommandArchive::mutable_identifier() {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  return identifier_;
}
inline ::std::string* ThemeAddStylePresetCommandArchive::release_identifier() {
  clear_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = identifier_;
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ThemeAddStylePresetCommandArchive::set_allocated_identifier(::std::string* identifier) {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete identifier_;
  }
  if (identifier) {
    set_has_identifier();
    identifier_ = identifier;
  } else {
    clear_has_identifier();
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool add_preset_to_stylesheet = 6;
inline bool ThemeAddStylePresetCommandArchive::has_add_preset_to_stylesheet() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ThemeAddStylePresetCommandArchive::set_has_add_preset_to_stylesheet() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ThemeAddStylePresetCommandArchive::clear_has_add_preset_to_stylesheet() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ThemeAddStylePresetCommandArchive::clear_add_preset_to_stylesheet() {
  add_preset_to_stylesheet_ = false;
  clear_has_add_preset_to_stylesheet();
}
inline bool ThemeAddStylePresetCommandArchive::add_preset_to_stylesheet() const {
  return add_preset_to_stylesheet_;
}
inline void ThemeAddStylePresetCommandArchive::set_add_preset_to_stylesheet(bool value) {
  set_has_add_preset_to_stylesheet();
  add_preset_to_stylesheet_ = value;
}

// -------------------------------------------------------------------

// ThemeRemoveStylePresetCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ThemeRemoveStylePresetCommandArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ThemeRemoveStylePresetCommandArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ThemeRemoveStylePresetCommandArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ThemeRemoveStylePresetCommandArchive::clear_super() {
  if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
  clear_has_super();
}
inline const ::TSK::CommandArchive& ThemeRemoveStylePresetCommandArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSK::CommandArchive* ThemeRemoveStylePresetCommandArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSK::CommandArchive;
  return super_;
}
inline ::TSK::CommandArchive* ThemeRemoveStylePresetCommandArchive::release_super() {
  clear_has_super();
  ::TSK::CommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void ThemeRemoveStylePresetCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// required .TSP.Reference theme = 2;
inline bool ThemeRemoveStylePresetCommandArchive::has_theme() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ThemeRemoveStylePresetCommandArchive::set_has_theme() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ThemeRemoveStylePresetCommandArchive::clear_has_theme() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ThemeRemoveStylePresetCommandArchive::clear_theme() {
  if (theme_ != NULL) theme_->::TSP::Reference::Clear();
  clear_has_theme();
}
inline const ::TSP::Reference& ThemeRemoveStylePresetCommandArchive::theme() const {
  return theme_ != NULL ? *theme_ : *default_instance_->theme_;
}
inline ::TSP::Reference* ThemeRemoveStylePresetCommandArchive::mutable_theme() {
  set_has_theme();
  if (theme_ == NULL) theme_ = new ::TSP::Reference;
  return theme_;
}
inline ::TSP::Reference* ThemeRemoveStylePresetCommandArchive::release_theme() {
  clear_has_theme();
  ::TSP::Reference* temp = theme_;
  theme_ = NULL;
  return temp;
}
inline void ThemeRemoveStylePresetCommandArchive::set_allocated_theme(::TSP::Reference* theme) {
  delete theme_;
  theme_ = theme;
  if (theme) {
    set_has_theme();
  } else {
    clear_has_theme();
  }
}

// required .TSP.Reference preset = 3;
inline bool ThemeRemoveStylePresetCommandArchive::has_preset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ThemeRemoveStylePresetCommandArchive::set_has_preset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ThemeRemoveStylePresetCommandArchive::clear_has_preset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ThemeRemoveStylePresetCommandArchive::clear_preset() {
  if (preset_ != NULL) preset_->::TSP::Reference::Clear();
  clear_has_preset();
}
inline const ::TSP::Reference& ThemeRemoveStylePresetCommandArchive::preset() const {
  return preset_ != NULL ? *preset_ : *default_instance_->preset_;
}
inline ::TSP::Reference* ThemeRemoveStylePresetCommandArchive::mutable_preset() {
  set_has_preset();
  if (preset_ == NULL) preset_ = new ::TSP::Reference;
  return preset_;
}
inline ::TSP::Reference* ThemeRemoveStylePresetCommandArchive::release_preset() {
  clear_has_preset();
  ::TSP::Reference* temp = preset_;
  preset_ = NULL;
  return temp;
}
inline void ThemeRemoveStylePresetCommandArchive::set_allocated_preset(::TSP::Reference* preset) {
  delete preset_;
  preset_ = preset;
  if (preset) {
    set_has_preset();
  } else {
    clear_has_preset();
  }
}

// required uint32 preset_index = 4;
inline bool ThemeRemoveStylePresetCommandArchive::has_preset_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ThemeRemoveStylePresetCommandArchive::set_has_preset_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ThemeRemoveStylePresetCommandArchive::clear_has_preset_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ThemeRemoveStylePresetCommandArchive::clear_preset_index() {
  preset_index_ = 0u;
  clear_has_preset_index();
}
inline ::google::protobuf::uint32 ThemeRemoveStylePresetCommandArchive::preset_index() const {
  return preset_index_;
}
inline void ThemeRemoveStylePresetCommandArchive::set_preset_index(::google::protobuf::uint32 value) {
  set_has_preset_index();
  preset_index_ = value;
}

// required string preset_kind = 5;
inline bool ThemeRemoveStylePresetCommandArchive::has_preset_kind() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ThemeRemoveStylePresetCommandArchive::set_has_preset_kind() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ThemeRemoveStylePresetCommandArchive::clear_has_preset_kind() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ThemeRemoveStylePresetCommandArchive::clear_preset_kind() {
  if (preset_kind_ != &::google::protobuf::internal::kEmptyString) {
    preset_kind_->clear();
  }
  clear_has_preset_kind();
}
inline const ::std::string& ThemeRemoveStylePresetCommandArchive::preset_kind() const {
  return *preset_kind_;
}
inline void ThemeRemoveStylePresetCommandArchive::set_preset_kind(const ::std::string& value) {
  set_has_preset_kind();
  if (preset_kind_ == &::google::protobuf::internal::kEmptyString) {
    preset_kind_ = new ::std::string;
  }
  preset_kind_->assign(value);
}
inline void ThemeRemoveStylePresetCommandArchive::set_preset_kind(const char* value) {
  set_has_preset_kind();
  if (preset_kind_ == &::google::protobuf::internal::kEmptyString) {
    preset_kind_ = new ::std::string;
  }
  preset_kind_->assign(value);
}
inline void ThemeRemoveStylePresetCommandArchive::set_preset_kind(const char* value, size_t size) {
  set_has_preset_kind();
  if (preset_kind_ == &::google::protobuf::internal::kEmptyString) {
    preset_kind_ = new ::std::string;
  }
  preset_kind_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ThemeRemoveStylePresetCommandArchive::mutable_preset_kind() {
  set_has_preset_kind();
  if (preset_kind_ == &::google::protobuf::internal::kEmptyString) {
    preset_kind_ = new ::std::string;
  }
  return preset_kind_;
}
inline ::std::string* ThemeRemoveStylePresetCommandArchive::release_preset_kind() {
  clear_has_preset_kind();
  if (preset_kind_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = preset_kind_;
    preset_kind_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ThemeRemoveStylePresetCommandArchive::set_allocated_preset_kind(::std::string* preset_kind) {
  if (preset_kind_ != &::google::protobuf::internal::kEmptyString) {
    delete preset_kind_;
  }
  if (preset_kind) {
    set_has_preset_kind();
    preset_kind_ = preset_kind;
  } else {
    clear_has_preset_kind();
    preset_kind_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string identifier = 6;
inline bool ThemeRemoveStylePresetCommandArchive::has_identifier() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ThemeRemoveStylePresetCommandArchive::set_has_identifier() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ThemeRemoveStylePresetCommandArchive::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ThemeRemoveStylePresetCommandArchive::clear_identifier() {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    identifier_->clear();
  }
  clear_has_identifier();
}
inline const ::std::string& ThemeRemoveStylePresetCommandArchive::identifier() const {
  return *identifier_;
}
inline void ThemeRemoveStylePresetCommandArchive::set_identifier(const ::std::string& value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void ThemeRemoveStylePresetCommandArchive::set_identifier(const char* value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void ThemeRemoveStylePresetCommandArchive::set_identifier(const char* value, size_t size) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ThemeRemoveStylePresetCommandArchive::mutable_identifier() {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  return identifier_;
}
inline ::std::string* ThemeRemoveStylePresetCommandArchive::release_identifier() {
  clear_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = identifier_;
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ThemeRemoveStylePresetCommandArchive::set_allocated_identifier(::std::string* identifier) {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete identifier_;
  }
  if (identifier) {
    set_has_identifier();
    identifier_ = identifier;
  } else {
    clear_has_identifier();
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ThemeMovePresetCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ThemeMovePresetCommandArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ThemeMovePresetCommandArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ThemeMovePresetCommandArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ThemeMovePresetCommandArchive::clear_super() {
  if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
  clear_has_super();
}
inline const ::TSK::CommandArchive& ThemeMovePresetCommandArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSK::CommandArchive* ThemeMovePresetCommandArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSK::CommandArchive;
  return super_;
}
inline ::TSK::CommandArchive* ThemeMovePresetCommandArchive::release_super() {
  clear_has_super();
  ::TSK::CommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void ThemeMovePresetCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// required .TSP.Reference theme = 2;
inline bool ThemeMovePresetCommandArchive::has_theme() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ThemeMovePresetCommandArchive::set_has_theme() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ThemeMovePresetCommandArchive::clear_has_theme() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ThemeMovePresetCommandArchive::clear_theme() {
  if (theme_ != NULL) theme_->::TSP::Reference::Clear();
  clear_has_theme();
}
inline const ::TSP::Reference& ThemeMovePresetCommandArchive::theme() const {
  return theme_ != NULL ? *theme_ : *default_instance_->theme_;
}
inline ::TSP::Reference* ThemeMovePresetCommandArchive::mutable_theme() {
  set_has_theme();
  if (theme_ == NULL) theme_ = new ::TSP::Reference;
  return theme_;
}
inline ::TSP::Reference* ThemeMovePresetCommandArchive::release_theme() {
  clear_has_theme();
  ::TSP::Reference* temp = theme_;
  theme_ = NULL;
  return temp;
}
inline void ThemeMovePresetCommandArchive::set_allocated_theme(::TSP::Reference* theme) {
  delete theme_;
  theme_ = theme;
  if (theme) {
    set_has_theme();
  } else {
    clear_has_theme();
  }
}

// required .TSP.Reference preset = 3;
inline bool ThemeMovePresetCommandArchive::has_preset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ThemeMovePresetCommandArchive::set_has_preset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ThemeMovePresetCommandArchive::clear_has_preset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ThemeMovePresetCommandArchive::clear_preset() {
  if (preset_ != NULL) preset_->::TSP::Reference::Clear();
  clear_has_preset();
}
inline const ::TSP::Reference& ThemeMovePresetCommandArchive::preset() const {
  return preset_ != NULL ? *preset_ : *default_instance_->preset_;
}
inline ::TSP::Reference* ThemeMovePresetCommandArchive::mutable_preset() {
  set_has_preset();
  if (preset_ == NULL) preset_ = new ::TSP::Reference;
  return preset_;
}
inline ::TSP::Reference* ThemeMovePresetCommandArchive::release_preset() {
  clear_has_preset();
  ::TSP::Reference* temp = preset_;
  preset_ = NULL;
  return temp;
}
inline void ThemeMovePresetCommandArchive::set_allocated_preset(::TSP::Reference* preset) {
  delete preset_;
  preset_ = preset;
  if (preset) {
    set_has_preset();
  } else {
    clear_has_preset();
  }
}

// required uint32 new_index = 4;
inline bool ThemeMovePresetCommandArchive::has_new_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ThemeMovePresetCommandArchive::set_has_new_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ThemeMovePresetCommandArchive::clear_has_new_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ThemeMovePresetCommandArchive::clear_new_index() {
  new_index_ = 0u;
  clear_has_new_index();
}
inline ::google::protobuf::uint32 ThemeMovePresetCommandArchive::new_index() const {
  return new_index_;
}
inline void ThemeMovePresetCommandArchive::set_new_index(::google::protobuf::uint32 value) {
  set_has_new_index();
  new_index_ = value;
}

// required uint32 old_index = 5;
inline bool ThemeMovePresetCommandArchive::has_old_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ThemeMovePresetCommandArchive::set_has_old_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ThemeMovePresetCommandArchive::clear_has_old_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ThemeMovePresetCommandArchive::clear_old_index() {
  old_index_ = 0u;
  clear_has_old_index();
}
inline ::google::protobuf::uint32 ThemeMovePresetCommandArchive::old_index() const {
  return old_index_;
}
inline void ThemeMovePresetCommandArchive::set_old_index(::google::protobuf::uint32 value) {
  set_has_old_index();
  old_index_ = value;
}

// -------------------------------------------------------------------

// ThemeReplaceStylePresetCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool ThemeReplaceStylePresetCommandArchive::has_super() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ThemeReplaceStylePresetCommandArchive::set_has_super() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ThemeReplaceStylePresetCommandArchive::clear_has_super() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ThemeReplaceStylePresetCommandArchive::clear_super() {
  if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
  clear_has_super();
}
inline const ::TSK::CommandArchive& ThemeReplaceStylePresetCommandArchive::super() const {
  return super_ != NULL ? *super_ : *default_instance_->super_;
}
inline ::TSK::CommandArchive* ThemeReplaceStylePresetCommandArchive::mutable_super() {
  set_has_super();
  if (super_ == NULL) super_ = new ::TSK::CommandArchive;
  return super_;
}
inline ::TSK::CommandArchive* ThemeReplaceStylePresetCommandArchive::release_super() {
  clear_has_super();
  ::TSK::CommandArchive* temp = super_;
  super_ = NULL;
  return temp;
}
inline void ThemeReplaceStylePresetCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  delete super_;
  super_ = super;
  if (super) {
    set_has_super();
  } else {
    clear_has_super();
  }
}

// required .TSP.Reference preset = 3;
inline bool ThemeReplaceStylePresetCommandArchive::has_preset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ThemeReplaceStylePresetCommandArchive::set_has_preset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ThemeReplaceStylePresetCommandArchive::clear_has_preset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ThemeReplaceStylePresetCommandArchive::clear_preset() {
  if (preset_ != NULL) preset_->::TSP::Reference::Clear();
  clear_has_preset();
}
inline const ::TSP::Reference& ThemeReplaceStylePresetCommandArchive::preset() const {
  return preset_ != NULL ? *preset_ : *default_instance_->preset_;
}
inline ::TSP::Reference* ThemeReplaceStylePresetCommandArchive::mutable_preset() {
  set_has_preset();
  if (preset_ == NULL) preset_ = new ::TSP::Reference;
  return preset_;
}
inline ::TSP::Reference* ThemeReplaceStylePresetCommandArchive::release_preset() {
  clear_has_preset();
  ::TSP::Reference* temp = preset_;
  preset_ = NULL;
  return temp;
}
inline void ThemeReplaceStylePresetCommandArchive::set_allocated_preset(::TSP::Reference* preset) {
  delete preset_;
  preset_ = preset;
  if (preset) {
    set_has_preset();
  } else {
    clear_has_preset();
  }
}

// required .TSP.Reference old_preset = 4;
inline bool ThemeReplaceStylePresetCommandArchive::has_old_preset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ThemeReplaceStylePresetCommandArchive::set_has_old_preset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ThemeReplaceStylePresetCommandArchive::clear_has_old_preset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ThemeReplaceStylePresetCommandArchive::clear_old_preset() {
  if (old_preset_ != NULL) old_preset_->::TSP::Reference::Clear();
  clear_has_old_preset();
}
inline const ::TSP::Reference& ThemeReplaceStylePresetCommandArchive::old_preset() const {
  return old_preset_ != NULL ? *old_preset_ : *default_instance_->old_preset_;
}
inline ::TSP::Reference* ThemeReplaceStylePresetCommandArchive::mutable_old_preset() {
  set_has_old_preset();
  if (old_preset_ == NULL) old_preset_ = new ::TSP::Reference;
  return old_preset_;
}
inline ::TSP::Reference* ThemeReplaceStylePresetCommandArchive::release_old_preset() {
  clear_has_old_preset();
  ::TSP::Reference* temp = old_preset_;
  old_preset_ = NULL;
  return temp;
}
inline void ThemeReplaceStylePresetCommandArchive::set_allocated_old_preset(::TSP::Reference* old_preset) {
  delete old_preset_;
  old_preset_ = old_preset;
  if (old_preset) {
    set_has_old_preset();
  } else {
    clear_has_old_preset();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSS

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSS::ValueType>() {
  return ::TSS::ValueType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TSSArchives_2eproto__INCLUDED
