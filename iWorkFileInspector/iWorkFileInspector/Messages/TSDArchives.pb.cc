// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSDArchives.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TSDArchives.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TSD {

namespace {

const ::google::protobuf::Descriptor* EdgeInsetsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EdgeInsetsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeometryArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeometryArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointPathSourceArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointPathSourceArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PointPathSourceArchive_PointPathSourceType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ScalarPathSourceArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScalarPathSourceArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ScalarPathSourceArchive_ScalarPathSourceType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BezierPathSourceArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BezierPathSourceArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalloutPathSourceArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalloutPathSourceArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectionLinePathSourceArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectionLinePathSourceArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ConnectionLinePathSourceArchive_ConnectionLinePathSourceType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EditableBezierPathSourceArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EditableBezierPathSourceArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* EditableBezierPathSourceArchive_Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EditableBezierPathSourceArchive_Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* EditableBezierPathSourceArchive_Subpath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EditableBezierPathSourceArchive_Subpath_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EditableBezierPathSourceArchive_NodeType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PathSourceArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathSourceArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* AngleGradientArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AngleGradientArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransformGradientArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransformGradientArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* GradientArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GradientArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* GradientArchive_GradientStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GradientArchive_GradientStop_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GradientArchive_GradientType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ImageFillArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageFillArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ImageFillArchive_ImageFillTechnique_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FillArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FillArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* StrokePatternArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StrokePatternArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StrokePatternArchive_StrokePatternType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StrokeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StrokeArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StrokeArchive_LineCap_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SmartStrokeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmartStrokeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrameArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* PatternedStrokeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PatternedStrokeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* LineEndArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineEndArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShadowArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShadowArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ShadowArchive_ShadowType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DropShadowArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DropShadowArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactShadowArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactShadowArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurvedShadowArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurvedShadowArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReflectionArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReflectionArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageAdjustmentsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageAdjustmentsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShapeStylePropertiesArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShapeStylePropertiesArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShapeStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShapeStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaStylePropertiesArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaStylePropertiesArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaStyleArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaStyleArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThemePresetsArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThemePresetsArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThemeReplaceFillPresetCommandArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThemeReplaceFillPresetCommandArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* DrawableArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DrawableArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShapeArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShapeArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectionLineArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectionLineArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* MaskArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaskArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* MovieArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MovieArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MovieArchive_MovieLoopOption_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ExteriorTextWrapArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExteriorTextWrapArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuideArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuideArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GuideArchive_GuideType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UserDefinedGuideArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserDefinedGuideArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UserDefinedGuideArchive_GuideType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GuideStorageArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuideStorageArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CanvasSelectionArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CanvasSelectionArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommentStorageArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommentStorageArchive_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LineJoin_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_TSDArchives_2eproto() {
  protobuf_AddDesc_TSDArchives_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TSDArchives.proto");
  GOOGLE_CHECK(file != NULL);
  EdgeInsetsArchive_descriptor_ = file->message_type(0);
  static const int EdgeInsetsArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeInsetsArchive, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeInsetsArchive, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeInsetsArchive, bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeInsetsArchive, right_),
  };
  EdgeInsetsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EdgeInsetsArchive_descriptor_,
      EdgeInsetsArchive::default_instance_,
      EdgeInsetsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeInsetsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeInsetsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EdgeInsetsArchive));
  GeometryArchive_descriptor_ = file->message_type(1);
  static const int GeometryArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeometryArchive, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeometryArchive, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeometryArchive, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeometryArchive, angle_),
  };
  GeometryArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GeometryArchive_descriptor_,
      GeometryArchive::default_instance_,
      GeometryArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeometryArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeometryArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GeometryArchive));
  PointPathSourceArchive_descriptor_ = file->message_type(2);
  static const int PointPathSourceArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointPathSourceArchive, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointPathSourceArchive, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointPathSourceArchive, naturalsize_),
  };
  PointPathSourceArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointPathSourceArchive_descriptor_,
      PointPathSourceArchive::default_instance_,
      PointPathSourceArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointPathSourceArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointPathSourceArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointPathSourceArchive));
  PointPathSourceArchive_PointPathSourceType_descriptor_ = PointPathSourceArchive_descriptor_->enum_type(0);
  ScalarPathSourceArchive_descriptor_ = file->message_type(3);
  static const int ScalarPathSourceArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarPathSourceArchive, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarPathSourceArchive, scalar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarPathSourceArchive, naturalsize_),
  };
  ScalarPathSourceArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScalarPathSourceArchive_descriptor_,
      ScalarPathSourceArchive::default_instance_,
      ScalarPathSourceArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarPathSourceArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarPathSourceArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScalarPathSourceArchive));
  ScalarPathSourceArchive_ScalarPathSourceType_descriptor_ = ScalarPathSourceArchive_descriptor_->enum_type(0);
  BezierPathSourceArchive_descriptor_ = file->message_type(4);
  static const int BezierPathSourceArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BezierPathSourceArchive, path_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BezierPathSourceArchive, naturalsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BezierPathSourceArchive, path_),
  };
  BezierPathSourceArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BezierPathSourceArchive_descriptor_,
      BezierPathSourceArchive::default_instance_,
      BezierPathSourceArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BezierPathSourceArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BezierPathSourceArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BezierPathSourceArchive));
  CalloutPathSourceArchive_descriptor_ = file->message_type(5);
  static const int CalloutPathSourceArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalloutPathSourceArchive, natural_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalloutPathSourceArchive, tail_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalloutPathSourceArchive, tail_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalloutPathSourceArchive, corner_radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalloutPathSourceArchive, center_tail_),
  };
  CalloutPathSourceArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CalloutPathSourceArchive_descriptor_,
      CalloutPathSourceArchive::default_instance_,
      CalloutPathSourceArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalloutPathSourceArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalloutPathSourceArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CalloutPathSourceArchive));
  ConnectionLinePathSourceArchive_descriptor_ = file->message_type(6);
  static const int ConnectionLinePathSourceArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionLinePathSourceArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionLinePathSourceArchive, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionLinePathSourceArchive, outset_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionLinePathSourceArchive, outset_to_),
  };
  ConnectionLinePathSourceArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectionLinePathSourceArchive_descriptor_,
      ConnectionLinePathSourceArchive::default_instance_,
      ConnectionLinePathSourceArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionLinePathSourceArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionLinePathSourceArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectionLinePathSourceArchive));
  ConnectionLinePathSourceArchive_ConnectionLinePathSourceType_descriptor_ = ConnectionLinePathSourceArchive_descriptor_->enum_type(0);
  EditableBezierPathSourceArchive_descriptor_ = file->message_type(7);
  static const int EditableBezierPathSourceArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditableBezierPathSourceArchive, subpaths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditableBezierPathSourceArchive, naturalsize_),
  };
  EditableBezierPathSourceArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EditableBezierPathSourceArchive_descriptor_,
      EditableBezierPathSourceArchive::default_instance_,
      EditableBezierPathSourceArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditableBezierPathSourceArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditableBezierPathSourceArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EditableBezierPathSourceArchive));
  EditableBezierPathSourceArchive_Node_descriptor_ = EditableBezierPathSourceArchive_descriptor_->nested_type(0);
  static const int EditableBezierPathSourceArchive_Node_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditableBezierPathSourceArchive_Node, incontrolpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditableBezierPathSourceArchive_Node, nodepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditableBezierPathSourceArchive_Node, outcontrolpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditableBezierPathSourceArchive_Node, type_),
  };
  EditableBezierPathSourceArchive_Node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EditableBezierPathSourceArchive_Node_descriptor_,
      EditableBezierPathSourceArchive_Node::default_instance_,
      EditableBezierPathSourceArchive_Node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditableBezierPathSourceArchive_Node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditableBezierPathSourceArchive_Node, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EditableBezierPathSourceArchive_Node));
  EditableBezierPathSourceArchive_Subpath_descriptor_ = EditableBezierPathSourceArchive_descriptor_->nested_type(1);
  static const int EditableBezierPathSourceArchive_Subpath_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditableBezierPathSourceArchive_Subpath, nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditableBezierPathSourceArchive_Subpath, closed_),
  };
  EditableBezierPathSourceArchive_Subpath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EditableBezierPathSourceArchive_Subpath_descriptor_,
      EditableBezierPathSourceArchive_Subpath::default_instance_,
      EditableBezierPathSourceArchive_Subpath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditableBezierPathSourceArchive_Subpath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditableBezierPathSourceArchive_Subpath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EditableBezierPathSourceArchive_Subpath));
  EditableBezierPathSourceArchive_NodeType_descriptor_ = EditableBezierPathSourceArchive_descriptor_->enum_type(0);
  PathSourceArchive_descriptor_ = file->message_type(8);
  static const int PathSourceArchive_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathSourceArchive, horizontalflip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathSourceArchive, verticalflip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathSourceArchive, point_path_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathSourceArchive, scalar_path_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathSourceArchive, bezier_path_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathSourceArchive, callout_path_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathSourceArchive, connection_line_path_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathSourceArchive, editable_bezier_path_source_),
  };
  PathSourceArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PathSourceArchive_descriptor_,
      PathSourceArchive::default_instance_,
      PathSourceArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathSourceArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathSourceArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PathSourceArchive));
  AngleGradientArchive_descriptor_ = file->message_type(9);
  static const int AngleGradientArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AngleGradientArchive, gradientangle_),
  };
  AngleGradientArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AngleGradientArchive_descriptor_,
      AngleGradientArchive::default_instance_,
      AngleGradientArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AngleGradientArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AngleGradientArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AngleGradientArchive));
  TransformGradientArchive_descriptor_ = file->message_type(10);
  static const int TransformGradientArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformGradientArchive, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformGradientArchive, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformGradientArchive, basenaturalsize_),
  };
  TransformGradientArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransformGradientArchive_descriptor_,
      TransformGradientArchive::default_instance_,
      TransformGradientArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformGradientArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformGradientArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransformGradientArchive));
  GradientArchive_descriptor_ = file->message_type(11);
  static const int GradientArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GradientArchive, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GradientArchive, stops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GradientArchive, opacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GradientArchive, advancedgradient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GradientArchive, anglegradient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GradientArchive, transformgradient_),
  };
  GradientArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GradientArchive_descriptor_,
      GradientArchive::default_instance_,
      GradientArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GradientArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GradientArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GradientArchive));
  GradientArchive_GradientStop_descriptor_ = GradientArchive_descriptor_->nested_type(0);
  static const int GradientArchive_GradientStop_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GradientArchive_GradientStop, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GradientArchive_GradientStop, fraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GradientArchive_GradientStop, inflection_),
  };
  GradientArchive_GradientStop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GradientArchive_GradientStop_descriptor_,
      GradientArchive_GradientStop::default_instance_,
      GradientArchive_GradientStop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GradientArchive_GradientStop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GradientArchive_GradientStop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GradientArchive_GradientStop));
  GradientArchive_GradientType_descriptor_ = GradientArchive_descriptor_->enum_type(0);
  ImageFillArchive_descriptor_ = file->message_type(12);
  static const int ImageFillArchive_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageFillArchive, imagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageFillArchive, technique_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageFillArchive, tint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageFillArchive, fillsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageFillArchive, originalimagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageFillArchive, interpretsuntaggedimagedataasgeneric_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageFillArchive, database_imagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageFillArchive, database_originalimagedata_),
  };
  ImageFillArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageFillArchive_descriptor_,
      ImageFillArchive::default_instance_,
      ImageFillArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageFillArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageFillArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageFillArchive));
  ImageFillArchive_ImageFillTechnique_descriptor_ = ImageFillArchive_descriptor_->enum_type(0);
  FillArchive_descriptor_ = file->message_type(13);
  static const int FillArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillArchive, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillArchive, gradient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillArchive, image_),
  };
  FillArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FillArchive_descriptor_,
      FillArchive::default_instance_,
      FillArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillArchive, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillArchive, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FillArchive));
  StrokePatternArchive_descriptor_ = file->message_type(14);
  static const int StrokePatternArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrokePatternArchive, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrokePatternArchive, phase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrokePatternArchive, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrokePatternArchive, pattern_),
  };
  StrokePatternArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StrokePatternArchive_descriptor_,
      StrokePatternArchive::default_instance_,
      StrokePatternArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrokePatternArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrokePatternArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StrokePatternArchive));
  StrokePatternArchive_StrokePatternType_descriptor_ = StrokePatternArchive_descriptor_->enum_type(0);
  StrokeArchive_descriptor_ = file->message_type(15);
  static const int StrokeArchive_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrokeArchive, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrokeArchive, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrokeArchive, cap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrokeArchive, join_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrokeArchive, miterlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrokeArchive, pattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrokeArchive, smartstroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrokeArchive, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrokeArchive, patterned_stroke_),
  };
  StrokeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StrokeArchive_descriptor_,
      StrokeArchive::default_instance_,
      StrokeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrokeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrokeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StrokeArchive));
  StrokeArchive_LineCap_descriptor_ = StrokeArchive_descriptor_->enum_type(0);
  SmartStrokeArchive_descriptor_ = file->message_type(16);
  static const int SmartStrokeArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmartStrokeArchive, strokename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmartStrokeArchive, randomseed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmartStrokeArchive, parametervalues_),
  };
  SmartStrokeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SmartStrokeArchive_descriptor_,
      SmartStrokeArchive::default_instance_,
      SmartStrokeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmartStrokeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmartStrokeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SmartStrokeArchive));
  FrameArchive_descriptor_ = file->message_type(17);
  static const int FrameArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameArchive, framename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameArchive, assetscale_),
  };
  FrameArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameArchive_descriptor_,
      FrameArchive::default_instance_,
      FrameArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameArchive));
  PatternedStrokeArchive_descriptor_ = file->message_type(18);
  static const int PatternedStrokeArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatternedStrokeArchive, pattern_name_),
  };
  PatternedStrokeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PatternedStrokeArchive_descriptor_,
      PatternedStrokeArchive::default_instance_,
      PatternedStrokeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatternedStrokeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatternedStrokeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PatternedStrokeArchive));
  LineEndArchive_descriptor_ = file->message_type(19);
  static const int LineEndArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineEndArchive, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineEndArchive, line_join_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineEndArchive, end_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineEndArchive, is_filled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineEndArchive, identifier_),
  };
  LineEndArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LineEndArchive_descriptor_,
      LineEndArchive::default_instance_,
      LineEndArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineEndArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineEndArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LineEndArchive));
  ShadowArchive_descriptor_ = file->message_type(20);
  static const int ShadowArchive_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShadowArchive, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShadowArchive, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShadowArchive, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShadowArchive, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShadowArchive, opacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShadowArchive, is_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShadowArchive, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShadowArchive, dropshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShadowArchive, contactshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShadowArchive, curvedshadow_),
  };
  ShadowArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShadowArchive_descriptor_,
      ShadowArchive::default_instance_,
      ShadowArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShadowArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShadowArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShadowArchive));
  ShadowArchive_ShadowType_descriptor_ = ShadowArchive_descriptor_->enum_type(0);
  DropShadowArchive_descriptor_ = file->message_type(21);
  static const int DropShadowArchive_offsets_[1] = {
  };
  DropShadowArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DropShadowArchive_descriptor_,
      DropShadowArchive::default_instance_,
      DropShadowArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropShadowArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropShadowArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DropShadowArchive));
  ContactShadowArchive_descriptor_ = file->message_type(22);
  static const int ContactShadowArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactShadowArchive, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactShadowArchive, offset_),
  };
  ContactShadowArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactShadowArchive_descriptor_,
      ContactShadowArchive::default_instance_,
      ContactShadowArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactShadowArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactShadowArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactShadowArchive));
  CurvedShadowArchive_descriptor_ = file->message_type(23);
  static const int CurvedShadowArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurvedShadowArchive, curve_),
  };
  CurvedShadowArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurvedShadowArchive_descriptor_,
      CurvedShadowArchive::default_instance_,
      CurvedShadowArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurvedShadowArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurvedShadowArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurvedShadowArchive));
  ReflectionArchive_descriptor_ = file->message_type(24);
  static const int ReflectionArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReflectionArchive, opacity_),
  };
  ReflectionArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReflectionArchive_descriptor_,
      ReflectionArchive::default_instance_,
      ReflectionArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReflectionArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReflectionArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReflectionArchive));
  ImageAdjustmentsArchive_descriptor_ = file->message_type(25);
  static const int ImageAdjustmentsArchive_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAdjustmentsArchive, exposure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAdjustmentsArchive, saturation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAdjustmentsArchive, contrast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAdjustmentsArchive, highlights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAdjustmentsArchive, shadows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAdjustmentsArchive, sharpness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAdjustmentsArchive, denoise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAdjustmentsArchive, temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAdjustmentsArchive, tint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAdjustmentsArchive, bottom_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAdjustmentsArchive, top_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAdjustmentsArchive, gamma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAdjustmentsArchive, enhance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAdjustmentsArchive, represents_sage_adjustments_),
  };
  ImageAdjustmentsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageAdjustmentsArchive_descriptor_,
      ImageAdjustmentsArchive::default_instance_,
      ImageAdjustmentsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAdjustmentsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAdjustmentsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageAdjustmentsArchive));
  ShapeStylePropertiesArchive_descriptor_ = file->message_type(26);
  static const int ShapeStylePropertiesArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStylePropertiesArchive, fill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStylePropertiesArchive, stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStylePropertiesArchive, opacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStylePropertiesArchive, shadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStylePropertiesArchive, reflection_),
  };
  ShapeStylePropertiesArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShapeStylePropertiesArchive_descriptor_,
      ShapeStylePropertiesArchive::default_instance_,
      ShapeStylePropertiesArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStylePropertiesArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStylePropertiesArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShapeStylePropertiesArchive));
  ShapeStyleArchive_descriptor_ = file->message_type(27);
  static const int ShapeStyleArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStyleArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStyleArchive, override_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStyleArchive, shape_properties_),
  };
  ShapeStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShapeStyleArchive_descriptor_,
      ShapeStyleArchive::default_instance_,
      ShapeStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeStyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShapeStyleArchive));
  MediaStylePropertiesArchive_descriptor_ = file->message_type(28);
  static const int MediaStylePropertiesArchive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaStylePropertiesArchive, stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaStylePropertiesArchive, opacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaStylePropertiesArchive, shadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaStylePropertiesArchive, reflection_),
  };
  MediaStylePropertiesArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaStylePropertiesArchive_descriptor_,
      MediaStylePropertiesArchive::default_instance_,
      MediaStylePropertiesArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaStylePropertiesArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaStylePropertiesArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaStylePropertiesArchive));
  MediaStyleArchive_descriptor_ = file->message_type(29);
  static const int MediaStyleArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaStyleArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaStyleArchive, override_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaStyleArchive, media_properties_),
  };
  MediaStyleArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaStyleArchive_descriptor_,
      MediaStyleArchive::default_instance_,
      MediaStyleArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaStyleArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaStyleArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaStyleArchive));
  ThemePresetsArchive_descriptor_ = file->message_type(30);
  static const int ThemePresetsArchive_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemePresetsArchive, gradient_fill_presets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemePresetsArchive, image_fill_presets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemePresetsArchive, shadow_presets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemePresetsArchive, line_style_presets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemePresetsArchive, shape_style_presets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemePresetsArchive, textbox_style_presets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemePresetsArchive, image_style_presets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemePresetsArchive, movie_style_presets_),
  };
  ThemePresetsArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThemePresetsArchive_descriptor_,
      ThemePresetsArchive::default_instance_,
      ThemePresetsArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemePresetsArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemePresetsArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThemePresetsArchive));
  ThemeReplaceFillPresetCommandArchive_descriptor_ = file->message_type(31);
  static const int ThemeReplaceFillPresetCommandArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeReplaceFillPresetCommandArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeReplaceFillPresetCommandArchive, theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeReplaceFillPresetCommandArchive, fill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeReplaceFillPresetCommandArchive, old_fill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeReplaceFillPresetCommandArchive, index_),
  };
  ThemeReplaceFillPresetCommandArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThemeReplaceFillPresetCommandArchive_descriptor_,
      ThemeReplaceFillPresetCommandArchive::default_instance_,
      ThemeReplaceFillPresetCommandArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeReplaceFillPresetCommandArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeReplaceFillPresetCommandArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThemeReplaceFillPresetCommandArchive));
  DrawableArchive_descriptor_ = file->message_type(32);
  static const int DrawableArchive_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableArchive, geometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableArchive, parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableArchive, exterior_text_wrap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableArchive, hyperlink_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableArchive, locked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableArchive, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableArchive, aspect_ratio_locked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableArchive, accessibility_description_),
  };
  DrawableArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DrawableArchive_descriptor_,
      DrawableArchive::default_instance_,
      DrawableArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawableArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DrawableArchive));
  ContainerArchive_descriptor_ = file->message_type(33);
  static const int ContainerArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerArchive, geometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerArchive, parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerArchive, children_),
  };
  ContainerArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerArchive_descriptor_,
      ContainerArchive::default_instance_,
      ContainerArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerArchive));
  GroupArchive_descriptor_ = file->message_type(34);
  static const int GroupArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupArchive, children_),
  };
  GroupArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupArchive_descriptor_,
      GroupArchive::default_instance_,
      GroupArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupArchive));
  ShapeArchive_descriptor_ = file->message_type(35);
  static const int ShapeArchive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeArchive, style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeArchive, pathsource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeArchive, head_line_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeArchive, tail_line_end_),
  };
  ShapeArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShapeArchive_descriptor_,
      ShapeArchive::default_instance_,
      ShapeArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShapeArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShapeArchive));
  ConnectionLineArchive_descriptor_ = file->message_type(36);
  static const int ConnectionLineArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionLineArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionLineArchive, connected_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionLineArchive, connected_to_),
  };
  ConnectionLineArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectionLineArchive_descriptor_,
      ConnectionLineArchive::default_instance_,
      ConnectionLineArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionLineArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionLineArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectionLineArchive));
  ImageArchive_descriptor_ = file->message_type(37);
  static const int ImageArchive_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageArchive, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageArchive, style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageArchive, originalsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageArchive, mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageArchive, thumbnaildata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageArchive, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageArchive, originaldata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageArchive, naturalsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageArchive, instantalphapath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageArchive, imageadjustments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageArchive, enhancedimagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageArchive, adjustedimagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageArchive, thumbnailadjustedimagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageArchive, interpretsuntaggedimagedataasgeneric_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageArchive, database_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageArchive, database_thumbnaildata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageArchive, database_originaldata_),
  };
  ImageArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageArchive_descriptor_,
      ImageArchive::default_instance_,
      ImageArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageArchive));
  MaskArchive_descriptor_ = file->message_type(38);
  static const int MaskArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaskArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaskArchive, pathsource_),
  };
  MaskArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MaskArchive_descriptor_,
      MaskArchive::default_instance_,
      MaskArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaskArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaskArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MaskArchive));
  MovieArchive_descriptor_ = file->message_type(39);
  static const int MovieArchive_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieArchive, super_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieArchive, moviedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieArchive, importedauxiliarymoviedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieArchive, movieremoteurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieArchive, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieArchive, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieArchive, postertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieArchive, loopoptionasinteger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieArchive, loop_option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieArchive, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieArchive, autoplay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieArchive, audioonly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieArchive, streaming_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieArchive, posterimagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieArchive, audioonlyimagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieArchive, poster_image_generated_with_alpha_support_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieArchive, playablestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieArchive, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieArchive, database_moviedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieArchive, database_posterimagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieArchive, database_audioonlyimagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieArchive, style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieArchive, originalsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieArchive, naturalsize_),
  };
  MovieArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MovieArchive_descriptor_,
      MovieArchive::default_instance_,
      MovieArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MovieArchive));
  MovieArchive_MovieLoopOption_descriptor_ = MovieArchive_descriptor_->enum_type(0);
  ExteriorTextWrapArchive_descriptor_ = file->message_type(40);
  static const int ExteriorTextWrapArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExteriorTextWrapArchive, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExteriorTextWrapArchive, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExteriorTextWrapArchive, fit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExteriorTextWrapArchive, margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExteriorTextWrapArchive, alpha_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExteriorTextWrapArchive, is_html_wrap_),
  };
  ExteriorTextWrapArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExteriorTextWrapArchive_descriptor_,
      ExteriorTextWrapArchive::default_instance_,
      ExteriorTextWrapArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExteriorTextWrapArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExteriorTextWrapArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExteriorTextWrapArchive));
  GuideArchive_descriptor_ = file->message_type(41);
  static const int GuideArchive_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideArchive, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideArchive, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideArchive, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideArchive, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideArchive, dynamic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideArchive, infinite_),
  };
  GuideArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuideArchive_descriptor_,
      GuideArchive::default_instance_,
      GuideArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuideArchive));
  GuideArchive_GuideType_descriptor_ = GuideArchive_descriptor_->enum_type(0);
  UserDefinedGuideArchive_descriptor_ = file->message_type(42);
  static const int UserDefinedGuideArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDefinedGuideArchive, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDefinedGuideArchive, position_),
  };
  UserDefinedGuideArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserDefinedGuideArchive_descriptor_,
      UserDefinedGuideArchive::default_instance_,
      UserDefinedGuideArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDefinedGuideArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDefinedGuideArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserDefinedGuideArchive));
  UserDefinedGuideArchive_GuideType_descriptor_ = UserDefinedGuideArchive_descriptor_->enum_type(0);
  GuideStorageArchive_descriptor_ = file->message_type(43);
  static const int GuideStorageArchive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideStorageArchive, userdefinedguides_),
  };
  GuideStorageArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuideStorageArchive_descriptor_,
      GuideStorageArchive::default_instance_,
      GuideStorageArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideStorageArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideStorageArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuideStorageArchive));
  CanvasSelectionArchive_descriptor_ = file->message_type(44);
  static const int CanvasSelectionArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanvasSelectionArchive, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanvasSelectionArchive, container_),
  };
  CanvasSelectionArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CanvasSelectionArchive_descriptor_,
      CanvasSelectionArchive::default_instance_,
      CanvasSelectionArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanvasSelectionArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanvasSelectionArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CanvasSelectionArchive));
  CommentStorageArchive_descriptor_ = file->message_type(45);
  static const int CommentStorageArchive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentStorageArchive, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentStorageArchive, creation_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentStorageArchive, author_),
  };
  CommentStorageArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommentStorageArchive_descriptor_,
      CommentStorageArchive::default_instance_,
      CommentStorageArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentStorageArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommentStorageArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommentStorageArchive));
  LineJoin_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TSDArchives_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EdgeInsetsArchive_descriptor_, &EdgeInsetsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GeometryArchive_descriptor_, &GeometryArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointPathSourceArchive_descriptor_, &PointPathSourceArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScalarPathSourceArchive_descriptor_, &ScalarPathSourceArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BezierPathSourceArchive_descriptor_, &BezierPathSourceArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CalloutPathSourceArchive_descriptor_, &CalloutPathSourceArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectionLinePathSourceArchive_descriptor_, &ConnectionLinePathSourceArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EditableBezierPathSourceArchive_descriptor_, &EditableBezierPathSourceArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EditableBezierPathSourceArchive_Node_descriptor_, &EditableBezierPathSourceArchive_Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EditableBezierPathSourceArchive_Subpath_descriptor_, &EditableBezierPathSourceArchive_Subpath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PathSourceArchive_descriptor_, &PathSourceArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AngleGradientArchive_descriptor_, &AngleGradientArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransformGradientArchive_descriptor_, &TransformGradientArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GradientArchive_descriptor_, &GradientArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GradientArchive_GradientStop_descriptor_, &GradientArchive_GradientStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageFillArchive_descriptor_, &ImageFillArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FillArchive_descriptor_, &FillArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StrokePatternArchive_descriptor_, &StrokePatternArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StrokeArchive_descriptor_, &StrokeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SmartStrokeArchive_descriptor_, &SmartStrokeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameArchive_descriptor_, &FrameArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PatternedStrokeArchive_descriptor_, &PatternedStrokeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LineEndArchive_descriptor_, &LineEndArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShadowArchive_descriptor_, &ShadowArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DropShadowArchive_descriptor_, &DropShadowArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactShadowArchive_descriptor_, &ContactShadowArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurvedShadowArchive_descriptor_, &CurvedShadowArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReflectionArchive_descriptor_, &ReflectionArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageAdjustmentsArchive_descriptor_, &ImageAdjustmentsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShapeStylePropertiesArchive_descriptor_, &ShapeStylePropertiesArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShapeStyleArchive_descriptor_, &ShapeStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaStylePropertiesArchive_descriptor_, &MediaStylePropertiesArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaStyleArchive_descriptor_, &MediaStyleArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThemePresetsArchive_descriptor_, &ThemePresetsArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThemeReplaceFillPresetCommandArchive_descriptor_, &ThemeReplaceFillPresetCommandArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DrawableArchive_descriptor_, &DrawableArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerArchive_descriptor_, &ContainerArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupArchive_descriptor_, &GroupArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShapeArchive_descriptor_, &ShapeArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectionLineArchive_descriptor_, &ConnectionLineArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageArchive_descriptor_, &ImageArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MaskArchive_descriptor_, &MaskArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MovieArchive_descriptor_, &MovieArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExteriorTextWrapArchive_descriptor_, &ExteriorTextWrapArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuideArchive_descriptor_, &GuideArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserDefinedGuideArchive_descriptor_, &UserDefinedGuideArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuideStorageArchive_descriptor_, &GuideStorageArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CanvasSelectionArchive_descriptor_, &CanvasSelectionArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommentStorageArchive_descriptor_, &CommentStorageArchive::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TSDArchives_2eproto() {
  delete EdgeInsetsArchive::default_instance_;
  delete EdgeInsetsArchive_reflection_;
  delete GeometryArchive::default_instance_;
  delete GeometryArchive_reflection_;
  delete PointPathSourceArchive::default_instance_;
  delete PointPathSourceArchive_reflection_;
  delete ScalarPathSourceArchive::default_instance_;
  delete ScalarPathSourceArchive_reflection_;
  delete BezierPathSourceArchive::default_instance_;
  delete BezierPathSourceArchive_reflection_;
  delete CalloutPathSourceArchive::default_instance_;
  delete CalloutPathSourceArchive_reflection_;
  delete ConnectionLinePathSourceArchive::default_instance_;
  delete ConnectionLinePathSourceArchive_reflection_;
  delete EditableBezierPathSourceArchive::default_instance_;
  delete EditableBezierPathSourceArchive_reflection_;
  delete EditableBezierPathSourceArchive_Node::default_instance_;
  delete EditableBezierPathSourceArchive_Node_reflection_;
  delete EditableBezierPathSourceArchive_Subpath::default_instance_;
  delete EditableBezierPathSourceArchive_Subpath_reflection_;
  delete PathSourceArchive::default_instance_;
  delete PathSourceArchive_reflection_;
  delete AngleGradientArchive::default_instance_;
  delete AngleGradientArchive_reflection_;
  delete TransformGradientArchive::default_instance_;
  delete TransformGradientArchive_reflection_;
  delete GradientArchive::default_instance_;
  delete GradientArchive_reflection_;
  delete GradientArchive_GradientStop::default_instance_;
  delete GradientArchive_GradientStop_reflection_;
  delete ImageFillArchive::default_instance_;
  delete ImageFillArchive_reflection_;
  delete FillArchive::default_instance_;
  delete FillArchive_reflection_;
  delete StrokePatternArchive::default_instance_;
  delete StrokePatternArchive_reflection_;
  delete StrokeArchive::default_instance_;
  delete StrokeArchive_reflection_;
  delete SmartStrokeArchive::default_instance_;
  delete SmartStrokeArchive_reflection_;
  delete FrameArchive::default_instance_;
  delete FrameArchive_reflection_;
  delete PatternedStrokeArchive::default_instance_;
  delete PatternedStrokeArchive_reflection_;
  delete LineEndArchive::default_instance_;
  delete LineEndArchive_reflection_;
  delete ShadowArchive::default_instance_;
  delete ShadowArchive_reflection_;
  delete DropShadowArchive::default_instance_;
  delete DropShadowArchive_reflection_;
  delete ContactShadowArchive::default_instance_;
  delete ContactShadowArchive_reflection_;
  delete CurvedShadowArchive::default_instance_;
  delete CurvedShadowArchive_reflection_;
  delete ReflectionArchive::default_instance_;
  delete ReflectionArchive_reflection_;
  delete ImageAdjustmentsArchive::default_instance_;
  delete ImageAdjustmentsArchive_reflection_;
  delete ShapeStylePropertiesArchive::default_instance_;
  delete ShapeStylePropertiesArchive_reflection_;
  delete ShapeStyleArchive::default_instance_;
  delete ShapeStyleArchive_reflection_;
  delete MediaStylePropertiesArchive::default_instance_;
  delete MediaStylePropertiesArchive_reflection_;
  delete MediaStyleArchive::default_instance_;
  delete MediaStyleArchive_reflection_;
  delete ThemePresetsArchive::default_instance_;
  delete ThemePresetsArchive_reflection_;
  delete ThemeReplaceFillPresetCommandArchive::default_instance_;
  delete ThemeReplaceFillPresetCommandArchive_reflection_;
  delete DrawableArchive::default_instance_;
  delete DrawableArchive_reflection_;
  delete ContainerArchive::default_instance_;
  delete ContainerArchive_reflection_;
  delete GroupArchive::default_instance_;
  delete GroupArchive_reflection_;
  delete ShapeArchive::default_instance_;
  delete ShapeArchive_reflection_;
  delete ConnectionLineArchive::default_instance_;
  delete ConnectionLineArchive_reflection_;
  delete ImageArchive::default_instance_;
  delete ImageArchive_reflection_;
  delete MaskArchive::default_instance_;
  delete MaskArchive_reflection_;
  delete MovieArchive::default_instance_;
  delete MovieArchive_reflection_;
  delete ExteriorTextWrapArchive::default_instance_;
  delete ExteriorTextWrapArchive_reflection_;
  delete GuideArchive::default_instance_;
  delete GuideArchive_reflection_;
  delete UserDefinedGuideArchive::default_instance_;
  delete UserDefinedGuideArchive_reflection_;
  delete GuideStorageArchive::default_instance_;
  delete GuideStorageArchive_reflection_;
  delete CanvasSelectionArchive::default_instance_;
  delete CanvasSelectionArchive_reflection_;
  delete CommentStorageArchive::default_instance_;
  delete CommentStorageArchive_reflection_;
}

void protobuf_AddDesc_TSDArchives_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::TSP::protobuf_AddDesc_TSPMessages_2eproto();
  ::TSK::protobuf_AddDesc_TSKArchives_2eproto();
  ::TSS::protobuf_AddDesc_TSSArchives_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021TSDArchives.proto\022\003TSD\032\021TSPMessages.pr"
    "oto\032\021TSKArchives.proto\032\021TSSArchives.prot"
    "o\"M\n\021EdgeInsetsArchive\022\013\n\003top\030\001 \002(\002\022\014\n\004l"
    "eft\030\002 \002(\002\022\016\n\006bottom\030\003 \002(\002\022\r\n\005right\030\004 \002(\002"
    "\"f\n\017GeometryArchive\022\034\n\010position\030\001 \001(\0132\n."
    "TSP.Point\022\027\n\004size\030\002 \001(\0132\t.TSP.Size\022\r\n\005fl"
    "ags\030\003 \001(\r\022\r\n\005angle\030\004 \001(\002\"\216\002\n\026PointPathSo"
    "urceArchive\022=\n\004type\030\001 \001(\0162/.TSD.PointPat"
    "hSourceArchive.PointPathSourceType\022\031\n\005po"
    "int\030\002 \001(\0132\n.TSP.Point\022\036\n\013naturalSize\030\003 \001"
    "(\0132\t.TSP.Size\"z\n\023PointPathSourceType\022\027\n\023"
    "kTSDLeftSingleArrow\020\000\022\030\n\024kTSDRightSingle"
    "Arrow\020\001\022\023\n\017kTSDDoubleArrow\020\n\022\014\n\010kTSDStar"
    "\020d\022\r\n\010kTSDPlus\020\310\001\"\345\001\n\027ScalarPathSourceAr"
    "chive\022\?\n\004type\030\001 \001(\01621.TSD.ScalarPathSour"
    "ceArchive.ScalarPathSourceType\022\016\n\006scalar"
    "\030\002 \001(\002\022\036\n\013naturalSize\030\003 \001(\0132\t.TSP.Size\"Y"
    "\n\024ScalarPathSourceType\022\030\n\024kTSDRoundedRec"
    "tangle\020\000\022\026\n\022kTSDRegularPolygon\020\001\022\017\n\013kTSD"
    "Chevron\020\002\"k\n\027BezierPathSourceArchive\022\027\n\013"
    "path_string\030\001 \001(\tB\002\030\001\022\036\n\013naturalSize\030\002 \001"
    "(\0132\t.TSP.Size\022\027\n\004path\030\003 \001(\0132\t.TSP.Path\"\235"
    "\001\n\030CalloutPathSourceArchive\022\037\n\014natural_s"
    "ize\030\001 \001(\0132\t.TSP.Size\022!\n\rtail_position\030\002 "
    "\001(\0132\n.TSP.Point\022\021\n\ttail_size\030\003 \001(\002\022\025\n\rco"
    "rner_radius\030\004 \001(\002\022\023\n\013center_tail\030\005 \001(\010\"\262"
    "\002\n\037ConnectionLinePathSourceArchive\022+\n\005su"
    "per\030\001 \002(\0132\034.TSD.BezierPathSourceArchive\022"
    "O\n\004type\030\002 \001(\0162A.TSD.ConnectionLinePathSo"
    "urceArchive.ConnectionLinePathSourceType"
    "\022\023\n\013outset_from\030\003 \001(\002\022\021\n\toutset_to\030\004 \001(\002"
    "\"i\n\034ConnectionLinePathSourceType\022#\n\037kTSD"
    "ConnectionLineTypeQuadratic\020\000\022$\n kTSDCon"
    "nectionLineTypeOrthogonal\020\001\"\263\003\n\037Editable"
    "BezierPathSourceArchive\022>\n\010subpaths\030\001 \003("
    "\0132,.TSD.EditableBezierPathSourceArchive."
    "Subpath\022\036\n\013naturalSize\030\002 \001(\0132\t.TSP.Size\032"
    "\253\001\n\004Node\022\"\n\016inControlPoint\030\001 \002(\0132\n.TSP.P"
    "oint\022\035\n\tnodePoint\030\002 \002(\0132\n.TSP.Point\022#\n\017o"
    "utControlPoint\030\003 \002(\0132\n.TSP.Point\022;\n\004type"
    "\030\004 \002(\0162-.TSD.EditableBezierPathSourceArc"
    "hive.NodeType\032S\n\007Subpath\0228\n\005nodes\030\001 \003(\0132"
    ").TSD.EditableBezierPathSourceArchive.No"
    "de\022\016\n\006closed\030\002 \002(\010\"-\n\010NodeType\022\t\n\005sharp\020"
    "\001\022\n\n\006bezier\020\002\022\n\n\006smooth\020\003\"\277\003\n\021PathSource"
    "Archive\022\026\n\016horizontalFlip\030\001 \001(\010\022\024\n\014verti"
    "calFlip\030\002 \001(\010\0226\n\021point_path_source\030\003 \001(\013"
    "2\033.TSD.PointPathSourceArchive\0228\n\022scalar_"
    "path_source\030\004 \001(\0132\034.TSD.ScalarPathSource"
    "Archive\0228\n\022bezier_path_source\030\005 \001(\0132\034.TS"
    "D.BezierPathSourceArchive\022:\n\023callout_pat"
    "h_source\030\006 \001(\0132\035.TSD.CalloutPathSourceAr"
    "chive\022I\n\033connection_line_path_source\030\007 \001"
    "(\0132$.TSD.ConnectionLinePathSourceArchive"
    "\022I\n\033editable_bezier_path_source\030\010 \001(\0132$."
    "TSD.EditableBezierPathSourceArchive\"-\n\024A"
    "ngleGradientArchive\022\025\n\rgradientangle\030\002 \001"
    "(\002\"r\n\030TransformGradientArchive\022\031\n\005start\030"
    "\001 \001(\0132\n.TSP.Point\022\027\n\003end\030\002 \001(\0132\n.TSP.Poi"
    "nt\022\"\n\017baseNaturalSize\030\003 \001(\0132\t.TSP.Size\"\204"
    "\003\n\017GradientArchive\022/\n\004type\030\001 \001(\0162!.TSD.G"
    "radientArchive.GradientType\0220\n\005stops\030\002 \003"
    "(\0132!.TSD.GradientArchive.GradientStop\022\017\n"
    "\007opacity\030\003 \001(\002\022\030\n\020advancedGradient\030\004 \001(\010"
    "\0220\n\ranglegradient\030\005 \001(\0132\031.TSD.AngleGradi"
    "entArchive\0228\n\021transformgradient\030\006 \001(\0132\035."
    "TSD.TransformGradientArchive\032O\n\014Gradient"
    "Stop\022\031\n\005color\030\001 \001(\0132\n.TSP.Color\022\020\n\010fract"
    "ion\030\002 \001(\002\022\022\n\ninflection\030\003 \001(\002\"&\n\014Gradien"
    "tType\022\n\n\006Linear\020\000\022\n\n\006Radial\020\001\"\326\003\n\020ImageF"
    "illArchive\022%\n\timagedata\030\006 \001(\0132\022.TSP.Data"
    "Reference\022H\n\ttechnique\030\002 \001(\0162(.TSD.Image"
    "FillArchive.ImageFillTechnique:\013NaturalS"
    "ize\022\030\n\004tint\030\003 \001(\0132\n.TSP.Color\022\033\n\010fillsiz"
    "e\030\004 \001(\0132\t.TSP.Size\022-\n\021originalimagedata\030"
    "\007 \001(\0132\022.TSP.DataReference\022,\n$interpretsU"
    "ntaggedImageDataAsGeneric\030\010 \001(\010\022*\n\022datab"
    "ase_imagedata\030\001 \001(\0132\016.TSP.Reference\0222\n\032d"
    "atabase_originalimagedata\030\005 \001(\0132\016.TSP.Re"
    "ference\"]\n\022ImageFillTechnique\022\017\n\013Natural"
    "Size\020\000\022\013\n\007Stretch\020\001\022\010\n\004Tile\020\002\022\017\n\013ScaleTo"
    "Fill\020\003\022\016\n\nScaleToFit\020\004\"\200\001\n\013FillArchive\022\031"
    "\n\005color\030\001 \001(\0132\n.TSP.Color\022&\n\010gradient\030\002 "
    "\001(\0132\024.TSD.GradientArchive\022$\n\005image\030\003 \001(\013"
    "2\025.TSD.ImageFillArchive*\010\010d\020\200\200\200\200\002\"\317\001\n\024St"
    "rokePatternArchive\0229\n\004type\030\001 \001(\0162+.TSD.S"
    "trokePatternArchive.StrokePatternType\022\r\n"
    "\005phase\030\002 \001(\002\022\r\n\005count\030\003 \001(\r\022\017\n\007pattern\030\004"
    " \003(\002\"M\n\021StrokePatternType\022\016\n\nTSDPattern\020"
    "\000\022\023\n\017TSDSolidPattern\020\001\022\023\n\017TSDEmptyPatter"
    "n\020\002\"\373\002\n\rStrokeArchive\022\031\n\005color\030\001 \001(\0132\n.T"
    "SP.Color\022\r\n\005width\030\002 \001(\002\022\'\n\003cap\030\003 \001(\0162\032.T"
    "SD.StrokeArchive.LineCap\022\033\n\004join\030\004 \001(\0162\r"
    ".TSD.LineJoin\022\022\n\nmiterLimit\030\005 \001(\002\022*\n\007pat"
    "tern\030\006 \001(\0132\031.TSD.StrokePatternArchive\022,\n"
    "\013smartStroke\030\007 \001(\0132\027.TSD.SmartStrokeArch"
    "ive\022 \n\005frame\030\010 \001(\0132\021.TSD.FrameArchive\0225\n"
    "\020patterned_stroke\030\t \001(\0132\033.TSD.PatternedS"
    "trokeArchive\"3\n\007LineCap\022\013\n\007ButtCap\020\000\022\014\n\010"
    "RoundCap\020\001\022\r\n\tSquareCap\020\002\"o\n\022SmartStroke"
    "Archive\022\022\n\nstrokeName\030\002 \001(\t\022\022\n\nrandomSee"
    "d\030\003 \001(\005\0221\n\017parameterValues\030\004 \001(\0132\030.TSP.R"
    "eferenceDictionary\"5\n\014FrameArchive\022\021\n\tfr"
    "ameName\030\002 \001(\t\022\022\n\nassetScale\030\003 \001(\002\".\n\026Pat"
    "ternedStrokeArchive\022\024\n\014pattern_name\030\002 \001("
    "\t\"\234\001\n\016LineEndArchive\022\027\n\004path\030\001 \001(\0132\t.TSP"
    ".Path\022+\n\tline_join\030\002 \001(\0162\r.TSD.LineJoin:"
    "\tMiterJoin\022\035\n\tend_point\030\003 \001(\0132\n.TSP.Poin"
    "t\022\021\n\tis_filled\030\004 \001(\010\022\022\n\nidentifier\030\005 \001(\t"
    "\"\250\003\n\rShadowArchive\022\031\n\005color\030\001 \001(\0132\n.TSP."
    "Color\022\022\n\005angle\030\002 \001(\002:\003315\022\021\n\006offset\030\003 \001("
    "\002:\0015\022\021\n\006radius\030\004 \001(\005:\0011\022\022\n\007opacity\030\005 \001(\002"
    ":\0011\022\030\n\nis_enabled\030\006 \001(\010:\004true\022:\n\004type\030\007 "
    "\001(\0162\035.TSD.ShadowArchive.ShadowType:\rTSDD"
    "ropShadow\022*\n\ndropShadow\030\010 \001(\0132\026.TSD.Drop"
    "ShadowArchive\0220\n\rcontactShadow\030\t \001(\0132\031.T"
    "SD.ContactShadowArchive\022.\n\014curvedShadow\030"
    "\n \001(\0132\030.TSD.CurvedShadowArchive\"J\n\nShado"
    "wType\022\021\n\rTSDDropShadow\020\000\022\024\n\020TSDContactSh"
    "adow\020\001\022\023\n\017TSDCurvedShadow\020\002\"\023\n\021DropShado"
    "wArchive\">\n\024ContactShadowArchive\022\023\n\006heig"
    "ht\030\002 \001(\002:\0030.2\022\021\n\006offset\030\004 \001(\002:\0010\")\n\023Curv"
    "edShadowArchive\022\022\n\005curve\030\001 \001(\002:\0030.6\")\n\021R"
    "eflectionArchive\022\024\n\007opacity\030\001 \001(\002:\0030.5\"\274"
    "\002\n\027ImageAdjustmentsArchive\022\020\n\010exposure\030\001"
    " \001(\002\022\022\n\nsaturation\030\002 \001(\002\022\020\n\010contrast\030\003 \001"
    "(\002\022\022\n\nhighlights\030\004 \001(\002\022\017\n\007shadows\030\005 \001(\002\022"
    "\021\n\tsharpness\030\006 \001(\002\022\017\n\007denoise\030\007 \001(\002\022\023\n\013t"
    "emperature\030\010 \001(\002\022\014\n\004tint\030\t \001(\002\022\024\n\014bottom"
    "_level\030\n \001(\002\022\024\n\ttop_level\030\013 \001(\002:\0011\022\r\n\005ga"
    "mma\030\014 \001(\002\022\026\n\007enhance\030\r \001(\010:\005false\022*\n\033rep"
    "resents_sage_adjustments\030\016 \001(\010:\005false\"\302\001"
    "\n\033ShapeStylePropertiesArchive\022\036\n\004fill\030\001 "
    "\001(\0132\020.TSD.FillArchive\022\"\n\006stroke\030\002 \001(\0132\022."
    "TSD.StrokeArchive\022\017\n\007opacity\030\003 \001(\002\022\"\n\006sh"
    "adow\030\004 \001(\0132\022.TSD.ShadowArchive\022*\n\nreflec"
    "tion\030\005 \001(\0132\026.TSD.ReflectionArchive\"\214\001\n\021S"
    "hapeStyleArchive\022 \n\005super\030\001 \002(\0132\021.TSS.St"
    "yleArchive\022\031\n\016override_count\030\n \001(\r:\0010\022:\n"
    "\020shape_properties\030\013 \001(\0132 .TSD.ShapeStyle"
    "PropertiesArchive\"\242\001\n\033MediaStyleProperti"
    "esArchive\022\"\n\006stroke\030\001 \001(\0132\022.TSD.StrokeAr"
    "chive\022\017\n\007opacity\030\002 \001(\002\022\"\n\006shadow\030\003 \001(\0132\022"
    ".TSD.ShadowArchive\022*\n\nreflection\030\004 \001(\0132\026"
    ".TSD.ReflectionArchive\"\214\001\n\021MediaStyleArc"
    "hive\022 \n\005super\030\001 \002(\0132\021.TSS.StyleArchive\022\031"
    "\n\016override_count\030\n \001(\r:\0010\022:\n\020media_prope"
    "rties\030\013 \001(\0132 .TSD.MediaStylePropertiesAr"
    "chive\"\302\003\n\023ThemePresetsArchive\022/\n\025gradien"
    "t_fill_presets\030\001 \003(\0132\020.TSD.FillArchive\022,"
    "\n\022image_fill_presets\030\002 \003(\0132\020.TSD.FillArc"
    "hive\022*\n\016shadow_presets\030\003 \003(\0132\022.TSD.Shado"
    "wArchive\022*\n\022line_style_presets\030\004 \003(\0132\016.T"
    "SP.Reference\022+\n\023shape_style_presets\030\005 \003("
    "\0132\016.TSP.Reference\022-\n\025textbox_style_prese"
    "ts\030\006 \003(\0132\016.TSP.Reference\022+\n\023image_style_"
    "presets\030\007 \003(\0132\016.TSP.Reference\022+\n\023movie_s"
    "tyle_presets\030\010 \003(\0132\016.TSP.Reference2>\n\tex"
    "tension\022\021.TSS.ThemeArchive\030d \001(\0132\030.TSD.T"
    "hemePresetsArchive\"\274\001\n$ThemeReplaceFillP"
    "resetCommandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK"
    ".CommandArchive\022\035\n\005theme\030\002 \002(\0132\016.TSP.Ref"
    "erence\022\036\n\004fill\030\003 \002(\0132\020.TSD.FillArchive\022\""
    "\n\010old_fill\030\004 \002(\0132\020.TSD.FillArchive\022\r\n\005in"
    "dex\030\005 \002(\r\"\233\002\n\017DrawableArchive\022&\n\010geometr"
    "y\030\001 \001(\0132\024.TSD.GeometryArchive\022\036\n\006parent\030"
    "\002 \001(\0132\016.TSP.Reference\0228\n\022exterior_text_w"
    "rap\030\003 \001(\0132\034.TSD.ExteriorTextWrapArchive\022"
    "\025\n\rhyperlink_url\030\004 \001(\t\022\016\n\006locked\030\005 \001(\010\022\037"
    "\n\007comment\030\006 \001(\0132\016.TSP.Reference\022\033\n\023aspec"
    "t_ratio_locked\030\007 \001(\010\022!\n\031accessibility_de"
    "scription\030\010 \001(\t\"|\n\020ContainerArchive\022&\n\010g"
    "eometry\030\001 \001(\0132\024.TSD.GeometryArchive\022\036\n\006p"
    "arent\030\002 \001(\0132\016.TSP.Reference\022 \n\010children\030"
    "\003 \003(\0132\016.TSP.Reference\"U\n\014GroupArchive\022#\n"
    "\005super\030\001 \002(\0132\024.TSD.DrawableArchive\022 \n\010ch"
    "ildren\030\002 \003(\0132\016.TSP.Reference\"\326\001\n\014ShapeAr"
    "chive\022#\n\005super\030\001 \002(\0132\024.TSD.DrawableArchi"
    "ve\022\035\n\005style\030\002 \001(\0132\016.TSP.Reference\022*\n\npat"
    "hsource\030\003 \001(\0132\026.TSD.PathSourceArchive\022*\n"
    "\rhead_line_end\030\004 \001(\0132\023.TSD.LineEndArchiv"
    "e\022*\n\rtail_line_end\030\005 \001(\0132\023.TSD.LineEndAr"
    "chive\"\207\001\n\025ConnectionLineArchive\022 \n\005super"
    "\030\001 \002(\0132\021.TSD.ShapeArchive\022&\n\016connected_f"
    "rom\030\002 \001(\0132\016.TSP.Reference\022$\n\014connected_t"
    "o\030\003 \001(\0132\016.TSP.Reference\"\336\005\n\014ImageArchive"
    "\022#\n\005super\030\001 \002(\0132\024.TSD.DrawableArchive\022 \n"
    "\004data\030\013 \001(\0132\022.TSP.DataReference\022\035\n\005style"
    "\030\003 \001(\0132\016.TSP.Reference\022\037\n\014originalSize\030\004"
    " \001(\0132\t.TSP.Size\022\034\n\004mask\030\005 \001(\0132\016.TSP.Refe"
    "rence\022)\n\rthumbnailData\030\014 \001(\0132\022.TSP.DataR"
    "eference\022\r\n\005flags\030\007 \001(\r\022(\n\014originalData\030"
    "\r \001(\0132\022.TSP.DataReference\022\036\n\013naturalSize"
    "\030\t \001(\0132\t.TSP.Size\022#\n\020instantAlphaPath\030\n "
    "\001(\0132\t.TSP.Path\0226\n\020imageAdjustments\030\016 \001(\013"
    "2\034.TSD.ImageAdjustmentsArchive\022-\n\021enhanc"
    "edImageData\030\021 \001(\0132\022.TSP.DataReference\022-\n"
    "\021adjustedImageData\030\017 \001(\0132\022.TSP.DataRefer"
    "ence\0226\n\032thumbnailAdjustedImageData\030\020 \001(\013"
    "2\022.TSP.DataReference\022,\n$interpretsUntagg"
    "edImageDataAsGeneric\030\022 \001(\010\022%\n\rdatabase_d"
    "ata\030\002 \001(\0132\016.TSP.Reference\022.\n\026database_th"
    "umbnailData\030\006 \001(\0132\016.TSP.Reference\022-\n\025dat"
    "abase_originalData\030\010 \001(\0132\016.TSP.Reference"
    "\"^\n\013MaskArchive\022#\n\005super\030\001 \002(\0132\024.TSD.Dra"
    "wableArchive\022*\n\npathsource\030\002 \001(\0132\026.TSD.P"
    "athSourceArchive\"\361\006\n\014MovieArchive\022#\n\005sup"
    "er\030\001 \002(\0132\024.TSD.DrawableArchive\022%\n\tmovieD"
    "ata\030\016 \001(\0132\022.TSP.DataReference\0226\n\032importe"
    "dAuxiliaryMovieData\030\026 \001(\0132\022.TSP.DataRefe"
    "rence\022\026\n\016movieRemoteURL\030\021 \001(\t\022\021\n\tstartTi"
    "me\030\003 \001(\002\022\017\n\007endTime\030\004 \001(\002\022\022\n\nposterTime\030"
    "\005 \001(\002\022\037\n\023loopOptionAsInteger\030\006 \001(\rB\002\030\001\022<"
    "\n\013loop_option\030\030 \001(\0162!.TSD.MovieArchive.M"
    "ovieLoopOption:\004None\022\016\n\006volume\030\007 \001(\002\022\024\n\010"
    "autoPlay\030\010 \001(\010B\002\030\001\022\021\n\taudioOnly\030\t \001(\010\022\021\n"
    "\tstreaming\030\022 \001(\010\022+\n\017posterImageData\030\017 \001("
    "\0132\022.TSP.DataReference\022.\n\022audioOnlyImageD"
    "ata\030\020 \001(\0132\022.TSP.DataReference\0221\n)poster_"
    "image_generated_with_alpha_support\030\027 \001(\010"
    "\022\025\n\rplayableState\030\014 \001(\r\022\r\n\005flags\030\r \001(\r\022*"
    "\n\022database_movieData\030\002 \001(\0132\016.TSP.Referen"
    "ce\0220\n\030database_posterImageData\030\n \001(\0132\016.T"
    "SP.Reference\0223\n\033database_audioOnlyImageD"
    "ata\030\013 \001(\0132\016.TSP.Reference\022\035\n\005style\030\023 \001(\013"
    "2\016.TSP.Reference\022\037\n\014originalSize\030\024 \001(\0132\t"
    ".TSP.Size\022\036\n\013naturalSize\030\025 \001(\0132\t.TSP.Siz"
    "e\"9\n\017MovieLoopOption\022\010\n\004None\020\000\022\n\n\006Repeat"
    "\020\001\022\020\n\014BackAndForth\020\002\"\213\001\n\027ExteriorTextWra"
    "pArchive\022\014\n\004type\030\001 \001(\r\022\021\n\tdirection\030\002 \001("
    "\r\022\020\n\010fit_type\030\003 \001(\r\022\016\n\006margin\030\004 \001(\002\022\027\n\017a"
    "lpha_threshold\030\005 \001(\002\022\024\n\014is_html_wrap\030\006 \001"
    "(\010\"\263\001\n\014GuideArchive\022)\n\004type\030\001 \001(\0162\033.TSD."
    "GuideArchive.GuideType\022\016\n\006offset\030\002 \001(\002\022\r"
    "\n\005start\030\003 \001(\002\022\013\n\003end\030\004 \001(\002\022\017\n\007dynamic\030\005 "
    "\001(\010\022\020\n\010infinite\030\006 \001(\010\")\n\tGuideType\022\016\n\nHo"
    "rizontal\020\000\022\014\n\010Vertical\020\001\"\214\001\n\027UserDefined"
    "GuideArchive\0224\n\004type\030\001 \001(\0162&.TSD.UserDef"
    "inedGuideArchive.GuideType\022\020\n\010position\030\002"
    " \001(\002\")\n\tGuideType\022\016\n\nHorizontal\020\000\022\014\n\010Ver"
    "tical\020\001\"N\n\023GuideStorageArchive\0227\n\021userDe"
    "finedGuides\030\001 \003(\0132\034.TSD.UserDefinedGuide"
    "Archive\"Z\n\026CanvasSelectionArchive\022\035\n\005inf"
    "os\030\001 \003(\0132\016.TSP.Reference\022!\n\tcontainer\030\002 "
    "\001(\0132\016.TSP.Reference\"g\n\025CommentStorageArc"
    "hive\022\014\n\004text\030\001 \001(\t\022 \n\rcreation_date\030\002 \001("
    "\0132\t.TSP.Date\022\036\n\006author\030\003 \001(\0132\016.TSP.Refer"
    "ence*7\n\010LineJoin\022\r\n\tMiterJoin\020\000\022\r\n\tRound"
    "Join\020\001\022\r\n\tBevelJoin\020\002", 9941);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TSDArchives.proto", &protobuf_RegisterTypes);
  EdgeInsetsArchive::default_instance_ = new EdgeInsetsArchive();
  GeometryArchive::default_instance_ = new GeometryArchive();
  PointPathSourceArchive::default_instance_ = new PointPathSourceArchive();
  ScalarPathSourceArchive::default_instance_ = new ScalarPathSourceArchive();
  BezierPathSourceArchive::default_instance_ = new BezierPathSourceArchive();
  CalloutPathSourceArchive::default_instance_ = new CalloutPathSourceArchive();
  ConnectionLinePathSourceArchive::default_instance_ = new ConnectionLinePathSourceArchive();
  EditableBezierPathSourceArchive::default_instance_ = new EditableBezierPathSourceArchive();
  EditableBezierPathSourceArchive_Node::default_instance_ = new EditableBezierPathSourceArchive_Node();
  EditableBezierPathSourceArchive_Subpath::default_instance_ = new EditableBezierPathSourceArchive_Subpath();
  PathSourceArchive::default_instance_ = new PathSourceArchive();
  AngleGradientArchive::default_instance_ = new AngleGradientArchive();
  TransformGradientArchive::default_instance_ = new TransformGradientArchive();
  GradientArchive::default_instance_ = new GradientArchive();
  GradientArchive_GradientStop::default_instance_ = new GradientArchive_GradientStop();
  ImageFillArchive::default_instance_ = new ImageFillArchive();
  FillArchive::default_instance_ = new FillArchive();
  StrokePatternArchive::default_instance_ = new StrokePatternArchive();
  StrokeArchive::default_instance_ = new StrokeArchive();
  SmartStrokeArchive::default_instance_ = new SmartStrokeArchive();
  FrameArchive::default_instance_ = new FrameArchive();
  PatternedStrokeArchive::default_instance_ = new PatternedStrokeArchive();
  LineEndArchive::default_instance_ = new LineEndArchive();
  ShadowArchive::default_instance_ = new ShadowArchive();
  DropShadowArchive::default_instance_ = new DropShadowArchive();
  ContactShadowArchive::default_instance_ = new ContactShadowArchive();
  CurvedShadowArchive::default_instance_ = new CurvedShadowArchive();
  ReflectionArchive::default_instance_ = new ReflectionArchive();
  ImageAdjustmentsArchive::default_instance_ = new ImageAdjustmentsArchive();
  ShapeStylePropertiesArchive::default_instance_ = new ShapeStylePropertiesArchive();
  ShapeStyleArchive::default_instance_ = new ShapeStyleArchive();
  MediaStylePropertiesArchive::default_instance_ = new MediaStylePropertiesArchive();
  MediaStyleArchive::default_instance_ = new MediaStyleArchive();
  ThemePresetsArchive::default_instance_ = new ThemePresetsArchive();
  ThemeReplaceFillPresetCommandArchive::default_instance_ = new ThemeReplaceFillPresetCommandArchive();
  DrawableArchive::default_instance_ = new DrawableArchive();
  ContainerArchive::default_instance_ = new ContainerArchive();
  GroupArchive::default_instance_ = new GroupArchive();
  ShapeArchive::default_instance_ = new ShapeArchive();
  ConnectionLineArchive::default_instance_ = new ConnectionLineArchive();
  ImageArchive::default_instance_ = new ImageArchive();
  MaskArchive::default_instance_ = new MaskArchive();
  MovieArchive::default_instance_ = new MovieArchive();
  ExteriorTextWrapArchive::default_instance_ = new ExteriorTextWrapArchive();
  GuideArchive::default_instance_ = new GuideArchive();
  UserDefinedGuideArchive::default_instance_ = new UserDefinedGuideArchive();
  GuideStorageArchive::default_instance_ = new GuideStorageArchive();
  CanvasSelectionArchive::default_instance_ = new CanvasSelectionArchive();
  CommentStorageArchive::default_instance_ = new CommentStorageArchive();
  EdgeInsetsArchive::default_instance_->InitAsDefaultInstance();
  GeometryArchive::default_instance_->InitAsDefaultInstance();
  PointPathSourceArchive::default_instance_->InitAsDefaultInstance();
  ScalarPathSourceArchive::default_instance_->InitAsDefaultInstance();
  BezierPathSourceArchive::default_instance_->InitAsDefaultInstance();
  CalloutPathSourceArchive::default_instance_->InitAsDefaultInstance();
  ConnectionLinePathSourceArchive::default_instance_->InitAsDefaultInstance();
  EditableBezierPathSourceArchive::default_instance_->InitAsDefaultInstance();
  EditableBezierPathSourceArchive_Node::default_instance_->InitAsDefaultInstance();
  EditableBezierPathSourceArchive_Subpath::default_instance_->InitAsDefaultInstance();
  PathSourceArchive::default_instance_->InitAsDefaultInstance();
  AngleGradientArchive::default_instance_->InitAsDefaultInstance();
  TransformGradientArchive::default_instance_->InitAsDefaultInstance();
  GradientArchive::default_instance_->InitAsDefaultInstance();
  GradientArchive_GradientStop::default_instance_->InitAsDefaultInstance();
  ImageFillArchive::default_instance_->InitAsDefaultInstance();
  FillArchive::default_instance_->InitAsDefaultInstance();
  StrokePatternArchive::default_instance_->InitAsDefaultInstance();
  StrokeArchive::default_instance_->InitAsDefaultInstance();
  SmartStrokeArchive::default_instance_->InitAsDefaultInstance();
  FrameArchive::default_instance_->InitAsDefaultInstance();
  PatternedStrokeArchive::default_instance_->InitAsDefaultInstance();
  LineEndArchive::default_instance_->InitAsDefaultInstance();
  ShadowArchive::default_instance_->InitAsDefaultInstance();
  DropShadowArchive::default_instance_->InitAsDefaultInstance();
  ContactShadowArchive::default_instance_->InitAsDefaultInstance();
  CurvedShadowArchive::default_instance_->InitAsDefaultInstance();
  ReflectionArchive::default_instance_->InitAsDefaultInstance();
  ImageAdjustmentsArchive::default_instance_->InitAsDefaultInstance();
  ShapeStylePropertiesArchive::default_instance_->InitAsDefaultInstance();
  ShapeStyleArchive::default_instance_->InitAsDefaultInstance();
  MediaStylePropertiesArchive::default_instance_->InitAsDefaultInstance();
  MediaStyleArchive::default_instance_->InitAsDefaultInstance();
  ThemePresetsArchive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::TSS::ThemeArchive::default_instance(),
    100, 11, false, false,
    &::TSD::ThemePresetsArchive::default_instance());
  ThemeReplaceFillPresetCommandArchive::default_instance_->InitAsDefaultInstance();
  DrawableArchive::default_instance_->InitAsDefaultInstance();
  ContainerArchive::default_instance_->InitAsDefaultInstance();
  GroupArchive::default_instance_->InitAsDefaultInstance();
  ShapeArchive::default_instance_->InitAsDefaultInstance();
  ConnectionLineArchive::default_instance_->InitAsDefaultInstance();
  ImageArchive::default_instance_->InitAsDefaultInstance();
  MaskArchive::default_instance_->InitAsDefaultInstance();
  MovieArchive::default_instance_->InitAsDefaultInstance();
  ExteriorTextWrapArchive::default_instance_->InitAsDefaultInstance();
  GuideArchive::default_instance_->InitAsDefaultInstance();
  UserDefinedGuideArchive::default_instance_->InitAsDefaultInstance();
  GuideStorageArchive::default_instance_->InitAsDefaultInstance();
  CanvasSelectionArchive::default_instance_->InitAsDefaultInstance();
  CommentStorageArchive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TSDArchives_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TSDArchives_2eproto {
  StaticDescriptorInitializer_TSDArchives_2eproto() {
    protobuf_AddDesc_TSDArchives_2eproto();
  }
} static_descriptor_initializer_TSDArchives_2eproto_;
const ::google::protobuf::EnumDescriptor* LineJoin_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineJoin_descriptor_;
}
bool LineJoin_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int EdgeInsetsArchive::kTopFieldNumber;
const int EdgeInsetsArchive::kLeftFieldNumber;
const int EdgeInsetsArchive::kBottomFieldNumber;
const int EdgeInsetsArchive::kRightFieldNumber;
#endif  // !_MSC_VER

EdgeInsetsArchive::EdgeInsetsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EdgeInsetsArchive::InitAsDefaultInstance() {
}

EdgeInsetsArchive::EdgeInsetsArchive(const EdgeInsetsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EdgeInsetsArchive::SharedCtor() {
  _cached_size_ = 0;
  top_ = 0;
  left_ = 0;
  bottom_ = 0;
  right_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EdgeInsetsArchive::~EdgeInsetsArchive() {
  SharedDtor();
}

void EdgeInsetsArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EdgeInsetsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EdgeInsetsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EdgeInsetsArchive_descriptor_;
}

const EdgeInsetsArchive& EdgeInsetsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

EdgeInsetsArchive* EdgeInsetsArchive::default_instance_ = NULL;

EdgeInsetsArchive* EdgeInsetsArchive::New() const {
  return new EdgeInsetsArchive;
}

void EdgeInsetsArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    top_ = 0;
    left_ = 0;
    bottom_ = 0;
    right_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EdgeInsetsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float top = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top_)));
          set_has_top();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_left;
        break;
      }

      // required float left = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_bottom;
        break;
      }

      // required float bottom = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bottom_)));
          set_has_bottom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_right;
        break;
      }

      // required float right = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EdgeInsetsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float top = 1;
  if (has_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->top(), output);
  }

  // required float left = 2;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->left(), output);
  }

  // required float bottom = 3;
  if (has_bottom()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->bottom(), output);
  }

  // required float right = 4;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->right(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EdgeInsetsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float top = 1;
  if (has_top()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->top(), target);
  }

  // required float left = 2;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->left(), target);
  }

  // required float bottom = 3;
  if (has_bottom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->bottom(), target);
  }

  // required float right = 4;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->right(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EdgeInsetsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float top = 1;
    if (has_top()) {
      total_size += 1 + 4;
    }

    // required float left = 2;
    if (has_left()) {
      total_size += 1 + 4;
    }

    // required float bottom = 3;
    if (has_bottom()) {
      total_size += 1 + 4;
    }

    // required float right = 4;
    if (has_right()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EdgeInsetsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EdgeInsetsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EdgeInsetsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EdgeInsetsArchive::MergeFrom(const EdgeInsetsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_bottom()) {
      set_bottom(from.bottom());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EdgeInsetsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgeInsetsArchive::CopyFrom(const EdgeInsetsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeInsetsArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void EdgeInsetsArchive::Swap(EdgeInsetsArchive* other) {
  if (other != this) {
    std::swap(top_, other->top_);
    std::swap(left_, other->left_);
    std::swap(bottom_, other->bottom_);
    std::swap(right_, other->right_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EdgeInsetsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EdgeInsetsArchive_descriptor_;
  metadata.reflection = EdgeInsetsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GeometryArchive::kPositionFieldNumber;
const int GeometryArchive::kSizeFieldNumber;
const int GeometryArchive::kFlagsFieldNumber;
const int GeometryArchive::kAngleFieldNumber;
#endif  // !_MSC_VER

GeometryArchive::GeometryArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GeometryArchive::InitAsDefaultInstance() {
  position_ = const_cast< ::TSP::Point*>(&::TSP::Point::default_instance());
  size_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
}

GeometryArchive::GeometryArchive(const GeometryArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GeometryArchive::SharedCtor() {
  _cached_size_ = 0;
  position_ = NULL;
  size_ = NULL;
  flags_ = 0u;
  angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeometryArchive::~GeometryArchive() {
  SharedDtor();
}

void GeometryArchive::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete size_;
  }
}

void GeometryArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeometryArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeometryArchive_descriptor_;
}

const GeometryArchive& GeometryArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

GeometryArchive* GeometryArchive::default_instance_ = NULL;

GeometryArchive* GeometryArchive::New() const {
  return new GeometryArchive;
}

void GeometryArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_position()) {
      if (position_ != NULL) position_->::TSP::Point::Clear();
    }
    if (has_size()) {
      if (size_ != NULL) size_->::TSP::Size::Clear();
    }
    flags_ = 0u;
    angle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GeometryArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Point position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_size;
        break;
      }

      // optional .TSP.Size size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_angle;
        break;
      }

      // optional float angle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GeometryArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Point position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->position(), output);
  }

  // optional .TSP.Size size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->size(), output);
  }

  // optional uint32 flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  // optional float angle = 4;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GeometryArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Point position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->position(), target);
  }

  // optional .TSP.Size size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->size(), target);
  }

  // optional uint32 flags = 3;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flags(), target);
  }

  // optional float angle = 4;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GeometryArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Point position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional .TSP.Size size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->size());
    }

    // optional uint32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional float angle = 4;
    if (has_angle()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeometryArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GeometryArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GeometryArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GeometryArchive::MergeFrom(const GeometryArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      mutable_position()->::TSP::Point::MergeFrom(from.position());
    }
    if (from.has_size()) {
      mutable_size()->::TSP::Size::MergeFrom(from.size());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GeometryArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeometryArchive::CopyFrom(const GeometryArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryArchive::IsInitialized() const {

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_size()) {
    if (!this->size().IsInitialized()) return false;
  }
  return true;
}

void GeometryArchive::Swap(GeometryArchive* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(size_, other->size_);
    std::swap(flags_, other->flags_);
    std::swap(angle_, other->angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GeometryArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeometryArchive_descriptor_;
  metadata.reflection = GeometryArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PointPathSourceArchive_PointPathSourceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointPathSourceArchive_PointPathSourceType_descriptor_;
}
bool PointPathSourceArchive_PointPathSourceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 10:
    case 100:
    case 200:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PointPathSourceArchive_PointPathSourceType PointPathSourceArchive::kTSDLeftSingleArrow;
const PointPathSourceArchive_PointPathSourceType PointPathSourceArchive::kTSDRightSingleArrow;
const PointPathSourceArchive_PointPathSourceType PointPathSourceArchive::kTSDDoubleArrow;
const PointPathSourceArchive_PointPathSourceType PointPathSourceArchive::kTSDStar;
const PointPathSourceArchive_PointPathSourceType PointPathSourceArchive::kTSDPlus;
const PointPathSourceArchive_PointPathSourceType PointPathSourceArchive::PointPathSourceType_MIN;
const PointPathSourceArchive_PointPathSourceType PointPathSourceArchive::PointPathSourceType_MAX;
const int PointPathSourceArchive::PointPathSourceType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PointPathSourceArchive::kTypeFieldNumber;
const int PointPathSourceArchive::kPointFieldNumber;
const int PointPathSourceArchive::kNaturalSizeFieldNumber;
#endif  // !_MSC_VER

PointPathSourceArchive::PointPathSourceArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PointPathSourceArchive::InitAsDefaultInstance() {
  point_ = const_cast< ::TSP::Point*>(&::TSP::Point::default_instance());
  naturalsize_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
}

PointPathSourceArchive::PointPathSourceArchive(const PointPathSourceArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PointPathSourceArchive::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  point_ = NULL;
  naturalsize_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointPathSourceArchive::~PointPathSourceArchive() {
  SharedDtor();
}

void PointPathSourceArchive::SharedDtor() {
  if (this != default_instance_) {
    delete point_;
    delete naturalsize_;
  }
}

void PointPathSourceArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointPathSourceArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointPathSourceArchive_descriptor_;
}

const PointPathSourceArchive& PointPathSourceArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

PointPathSourceArchive* PointPathSourceArchive::default_instance_ = NULL;

PointPathSourceArchive* PointPathSourceArchive::New() const {
  return new PointPathSourceArchive;
}

void PointPathSourceArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_point()) {
      if (point_ != NULL) point_->::TSP::Point::Clear();
    }
    if (has_naturalsize()) {
      if (naturalsize_ != NULL) naturalsize_->::TSP::Size::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointPathSourceArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSD.PointPathSourceArchive.PointPathSourceType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSD::PointPathSourceArchive_PointPathSourceType_IsValid(value)) {
            set_type(static_cast< ::TSD::PointPathSourceArchive_PointPathSourceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_point;
        break;
      }

      // optional .TSP.Point point = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_naturalSize;
        break;
      }

      // optional .TSP.Size naturalSize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_naturalSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_naturalsize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PointPathSourceArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSD.PointPathSourceArchive.PointPathSourceType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .TSP.Point point = 2;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->point(), output);
  }

  // optional .TSP.Size naturalSize = 3;
  if (has_naturalsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->naturalsize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PointPathSourceArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSD.PointPathSourceArchive.PointPathSourceType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .TSP.Point point = 2;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->point(), target);
  }

  // optional .TSP.Size naturalSize = 3;
  if (has_naturalsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->naturalsize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PointPathSourceArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSD.PointPathSourceArchive.PointPathSourceType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .TSP.Point point = 2;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point());
    }

    // optional .TSP.Size naturalSize = 3;
    if (has_naturalsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->naturalsize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointPathSourceArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointPathSourceArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointPathSourceArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointPathSourceArchive::MergeFrom(const PointPathSourceArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_point()) {
      mutable_point()->::TSP::Point::MergeFrom(from.point());
    }
    if (from.has_naturalsize()) {
      mutable_naturalsize()->::TSP::Size::MergeFrom(from.naturalsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointPathSourceArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointPathSourceArchive::CopyFrom(const PointPathSourceArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointPathSourceArchive::IsInitialized() const {

  if (has_point()) {
    if (!this->point().IsInitialized()) return false;
  }
  if (has_naturalsize()) {
    if (!this->naturalsize().IsInitialized()) return false;
  }
  return true;
}

void PointPathSourceArchive::Swap(PointPathSourceArchive* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(point_, other->point_);
    std::swap(naturalsize_, other->naturalsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointPathSourceArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointPathSourceArchive_descriptor_;
  metadata.reflection = PointPathSourceArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ScalarPathSourceArchive_ScalarPathSourceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScalarPathSourceArchive_ScalarPathSourceType_descriptor_;
}
bool ScalarPathSourceArchive_ScalarPathSourceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ScalarPathSourceArchive_ScalarPathSourceType ScalarPathSourceArchive::kTSDRoundedRectangle;
const ScalarPathSourceArchive_ScalarPathSourceType ScalarPathSourceArchive::kTSDRegularPolygon;
const ScalarPathSourceArchive_ScalarPathSourceType ScalarPathSourceArchive::kTSDChevron;
const ScalarPathSourceArchive_ScalarPathSourceType ScalarPathSourceArchive::ScalarPathSourceType_MIN;
const ScalarPathSourceArchive_ScalarPathSourceType ScalarPathSourceArchive::ScalarPathSourceType_MAX;
const int ScalarPathSourceArchive::ScalarPathSourceType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ScalarPathSourceArchive::kTypeFieldNumber;
const int ScalarPathSourceArchive::kScalarFieldNumber;
const int ScalarPathSourceArchive::kNaturalSizeFieldNumber;
#endif  // !_MSC_VER

ScalarPathSourceArchive::ScalarPathSourceArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScalarPathSourceArchive::InitAsDefaultInstance() {
  naturalsize_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
}

ScalarPathSourceArchive::ScalarPathSourceArchive(const ScalarPathSourceArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScalarPathSourceArchive::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  scalar_ = 0;
  naturalsize_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScalarPathSourceArchive::~ScalarPathSourceArchive() {
  SharedDtor();
}

void ScalarPathSourceArchive::SharedDtor() {
  if (this != default_instance_) {
    delete naturalsize_;
  }
}

void ScalarPathSourceArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScalarPathSourceArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScalarPathSourceArchive_descriptor_;
}

const ScalarPathSourceArchive& ScalarPathSourceArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

ScalarPathSourceArchive* ScalarPathSourceArchive::default_instance_ = NULL;

ScalarPathSourceArchive* ScalarPathSourceArchive::New() const {
  return new ScalarPathSourceArchive;
}

void ScalarPathSourceArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    scalar_ = 0;
    if (has_naturalsize()) {
      if (naturalsize_ != NULL) naturalsize_->::TSP::Size::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScalarPathSourceArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSD.ScalarPathSourceArchive.ScalarPathSourceType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSD::ScalarPathSourceArchive_ScalarPathSourceType_IsValid(value)) {
            set_type(static_cast< ::TSD::ScalarPathSourceArchive_ScalarPathSourceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_scalar;
        break;
      }

      // optional float scalar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scalar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scalar_)));
          set_has_scalar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_naturalSize;
        break;
      }

      // optional .TSP.Size naturalSize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_naturalSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_naturalsize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScalarPathSourceArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSD.ScalarPathSourceArchive.ScalarPathSourceType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional float scalar = 2;
  if (has_scalar()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scalar(), output);
  }

  // optional .TSP.Size naturalSize = 3;
  if (has_naturalsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->naturalsize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScalarPathSourceArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSD.ScalarPathSourceArchive.ScalarPathSourceType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional float scalar = 2;
  if (has_scalar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scalar(), target);
  }

  // optional .TSP.Size naturalSize = 3;
  if (has_naturalsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->naturalsize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScalarPathSourceArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSD.ScalarPathSourceArchive.ScalarPathSourceType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional float scalar = 2;
    if (has_scalar()) {
      total_size += 1 + 4;
    }

    // optional .TSP.Size naturalSize = 3;
    if (has_naturalsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->naturalsize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScalarPathSourceArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScalarPathSourceArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScalarPathSourceArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScalarPathSourceArchive::MergeFrom(const ScalarPathSourceArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_scalar()) {
      set_scalar(from.scalar());
    }
    if (from.has_naturalsize()) {
      mutable_naturalsize()->::TSP::Size::MergeFrom(from.naturalsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScalarPathSourceArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarPathSourceArchive::CopyFrom(const ScalarPathSourceArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarPathSourceArchive::IsInitialized() const {

  if (has_naturalsize()) {
    if (!this->naturalsize().IsInitialized()) return false;
  }
  return true;
}

void ScalarPathSourceArchive::Swap(ScalarPathSourceArchive* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(scalar_, other->scalar_);
    std::swap(naturalsize_, other->naturalsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScalarPathSourceArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScalarPathSourceArchive_descriptor_;
  metadata.reflection = ScalarPathSourceArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BezierPathSourceArchive::kPathStringFieldNumber;
const int BezierPathSourceArchive::kNaturalSizeFieldNumber;
const int BezierPathSourceArchive::kPathFieldNumber;
#endif  // !_MSC_VER

BezierPathSourceArchive::BezierPathSourceArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BezierPathSourceArchive::InitAsDefaultInstance() {
  naturalsize_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
  path_ = const_cast< ::TSP::Path*>(&::TSP::Path::default_instance());
}

BezierPathSourceArchive::BezierPathSourceArchive(const BezierPathSourceArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BezierPathSourceArchive::SharedCtor() {
  _cached_size_ = 0;
  path_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  naturalsize_ = NULL;
  path_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BezierPathSourceArchive::~BezierPathSourceArchive() {
  SharedDtor();
}

void BezierPathSourceArchive::SharedDtor() {
  if (path_string_ != &::google::protobuf::internal::kEmptyString) {
    delete path_string_;
  }
  if (this != default_instance_) {
    delete naturalsize_;
    delete path_;
  }
}

void BezierPathSourceArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BezierPathSourceArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BezierPathSourceArchive_descriptor_;
}

const BezierPathSourceArchive& BezierPathSourceArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

BezierPathSourceArchive* BezierPathSourceArchive::default_instance_ = NULL;

BezierPathSourceArchive* BezierPathSourceArchive::New() const {
  return new BezierPathSourceArchive;
}

void BezierPathSourceArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path_string()) {
      if (path_string_ != &::google::protobuf::internal::kEmptyString) {
        path_string_->clear();
      }
    }
    if (has_naturalsize()) {
      if (naturalsize_ != NULL) naturalsize_->::TSP::Size::Clear();
    }
    if (has_path()) {
      if (path_ != NULL) path_->::TSP::Path::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BezierPathSourceArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path_string = 1 [deprecated = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path_string().data(), this->path_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_naturalSize;
        break;
      }

      // optional .TSP.Size naturalSize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_naturalSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_naturalsize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }

      // optional .TSP.Path path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BezierPathSourceArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string path_string = 1 [deprecated = true];
  if (has_path_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path_string().data(), this->path_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path_string(), output);
  }

  // optional .TSP.Size naturalSize = 2;
  if (has_naturalsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->naturalsize(), output);
  }

  // optional .TSP.Path path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BezierPathSourceArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string path_string = 1 [deprecated = true];
  if (has_path_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path_string().data(), this->path_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path_string(), target);
  }

  // optional .TSP.Size naturalSize = 2;
  if (has_naturalsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->naturalsize(), target);
  }

  // optional .TSP.Path path = 3;
  if (has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BezierPathSourceArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string path_string = 1 [deprecated = true];
    if (has_path_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path_string());
    }

    // optional .TSP.Size naturalSize = 2;
    if (has_naturalsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->naturalsize());
    }

    // optional .TSP.Path path = 3;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BezierPathSourceArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BezierPathSourceArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BezierPathSourceArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BezierPathSourceArchive::MergeFrom(const BezierPathSourceArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path_string()) {
      set_path_string(from.path_string());
    }
    if (from.has_naturalsize()) {
      mutable_naturalsize()->::TSP::Size::MergeFrom(from.naturalsize());
    }
    if (from.has_path()) {
      mutable_path()->::TSP::Path::MergeFrom(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BezierPathSourceArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BezierPathSourceArchive::CopyFrom(const BezierPathSourceArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BezierPathSourceArchive::IsInitialized() const {

  if (has_naturalsize()) {
    if (!this->naturalsize().IsInitialized()) return false;
  }
  if (has_path()) {
    if (!this->path().IsInitialized()) return false;
  }
  return true;
}

void BezierPathSourceArchive::Swap(BezierPathSourceArchive* other) {
  if (other != this) {
    std::swap(path_string_, other->path_string_);
    std::swap(naturalsize_, other->naturalsize_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BezierPathSourceArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BezierPathSourceArchive_descriptor_;
  metadata.reflection = BezierPathSourceArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CalloutPathSourceArchive::kNaturalSizeFieldNumber;
const int CalloutPathSourceArchive::kTailPositionFieldNumber;
const int CalloutPathSourceArchive::kTailSizeFieldNumber;
const int CalloutPathSourceArchive::kCornerRadiusFieldNumber;
const int CalloutPathSourceArchive::kCenterTailFieldNumber;
#endif  // !_MSC_VER

CalloutPathSourceArchive::CalloutPathSourceArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CalloutPathSourceArchive::InitAsDefaultInstance() {
  natural_size_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
  tail_position_ = const_cast< ::TSP::Point*>(&::TSP::Point::default_instance());
}

CalloutPathSourceArchive::CalloutPathSourceArchive(const CalloutPathSourceArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CalloutPathSourceArchive::SharedCtor() {
  _cached_size_ = 0;
  natural_size_ = NULL;
  tail_position_ = NULL;
  tail_size_ = 0;
  corner_radius_ = 0;
  center_tail_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalloutPathSourceArchive::~CalloutPathSourceArchive() {
  SharedDtor();
}

void CalloutPathSourceArchive::SharedDtor() {
  if (this != default_instance_) {
    delete natural_size_;
    delete tail_position_;
  }
}

void CalloutPathSourceArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalloutPathSourceArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalloutPathSourceArchive_descriptor_;
}

const CalloutPathSourceArchive& CalloutPathSourceArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

CalloutPathSourceArchive* CalloutPathSourceArchive::default_instance_ = NULL;

CalloutPathSourceArchive* CalloutPathSourceArchive::New() const {
  return new CalloutPathSourceArchive;
}

void CalloutPathSourceArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_natural_size()) {
      if (natural_size_ != NULL) natural_size_->::TSP::Size::Clear();
    }
    if (has_tail_position()) {
      if (tail_position_ != NULL) tail_position_->::TSP::Point::Clear();
    }
    tail_size_ = 0;
    corner_radius_ = 0;
    center_tail_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CalloutPathSourceArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Size natural_size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_natural_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tail_position;
        break;
      }

      // optional .TSP.Point tail_position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tail_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tail_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_tail_size;
        break;
      }

      // optional float tail_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tail_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tail_size_)));
          set_has_tail_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_corner_radius;
        break;
      }

      // optional float corner_radius = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_corner_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &corner_radius_)));
          set_has_corner_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_center_tail;
        break;
      }

      // optional bool center_tail = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_center_tail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &center_tail_)));
          set_has_center_tail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CalloutPathSourceArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Size natural_size = 1;
  if (has_natural_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->natural_size(), output);
  }

  // optional .TSP.Point tail_position = 2;
  if (has_tail_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tail_position(), output);
  }

  // optional float tail_size = 3;
  if (has_tail_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->tail_size(), output);
  }

  // optional float corner_radius = 4;
  if (has_corner_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->corner_radius(), output);
  }

  // optional bool center_tail = 5;
  if (has_center_tail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->center_tail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CalloutPathSourceArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Size natural_size = 1;
  if (has_natural_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->natural_size(), target);
  }

  // optional .TSP.Point tail_position = 2;
  if (has_tail_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tail_position(), target);
  }

  // optional float tail_size = 3;
  if (has_tail_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->tail_size(), target);
  }

  // optional float corner_radius = 4;
  if (has_corner_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->corner_radius(), target);
  }

  // optional bool center_tail = 5;
  if (has_center_tail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->center_tail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CalloutPathSourceArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Size natural_size = 1;
    if (has_natural_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->natural_size());
    }

    // optional .TSP.Point tail_position = 2;
    if (has_tail_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tail_position());
    }

    // optional float tail_size = 3;
    if (has_tail_size()) {
      total_size += 1 + 4;
    }

    // optional float corner_radius = 4;
    if (has_corner_radius()) {
      total_size += 1 + 4;
    }

    // optional bool center_tail = 5;
    if (has_center_tail()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalloutPathSourceArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CalloutPathSourceArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalloutPathSourceArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalloutPathSourceArchive::MergeFrom(const CalloutPathSourceArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_natural_size()) {
      mutable_natural_size()->::TSP::Size::MergeFrom(from.natural_size());
    }
    if (from.has_tail_position()) {
      mutable_tail_position()->::TSP::Point::MergeFrom(from.tail_position());
    }
    if (from.has_tail_size()) {
      set_tail_size(from.tail_size());
    }
    if (from.has_corner_radius()) {
      set_corner_radius(from.corner_radius());
    }
    if (from.has_center_tail()) {
      set_center_tail(from.center_tail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CalloutPathSourceArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalloutPathSourceArchive::CopyFrom(const CalloutPathSourceArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalloutPathSourceArchive::IsInitialized() const {

  if (has_natural_size()) {
    if (!this->natural_size().IsInitialized()) return false;
  }
  if (has_tail_position()) {
    if (!this->tail_position().IsInitialized()) return false;
  }
  return true;
}

void CalloutPathSourceArchive::Swap(CalloutPathSourceArchive* other) {
  if (other != this) {
    std::swap(natural_size_, other->natural_size_);
    std::swap(tail_position_, other->tail_position_);
    std::swap(tail_size_, other->tail_size_);
    std::swap(corner_radius_, other->corner_radius_);
    std::swap(center_tail_, other->center_tail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CalloutPathSourceArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalloutPathSourceArchive_descriptor_;
  metadata.reflection = CalloutPathSourceArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ConnectionLinePathSourceArchive_ConnectionLinePathSourceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectionLinePathSourceArchive_ConnectionLinePathSourceType_descriptor_;
}
bool ConnectionLinePathSourceArchive_ConnectionLinePathSourceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ConnectionLinePathSourceArchive_ConnectionLinePathSourceType ConnectionLinePathSourceArchive::kTSDConnectionLineTypeQuadratic;
const ConnectionLinePathSourceArchive_ConnectionLinePathSourceType ConnectionLinePathSourceArchive::kTSDConnectionLineTypeOrthogonal;
const ConnectionLinePathSourceArchive_ConnectionLinePathSourceType ConnectionLinePathSourceArchive::ConnectionLinePathSourceType_MIN;
const ConnectionLinePathSourceArchive_ConnectionLinePathSourceType ConnectionLinePathSourceArchive::ConnectionLinePathSourceType_MAX;
const int ConnectionLinePathSourceArchive::ConnectionLinePathSourceType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ConnectionLinePathSourceArchive::kSuperFieldNumber;
const int ConnectionLinePathSourceArchive::kTypeFieldNumber;
const int ConnectionLinePathSourceArchive::kOutsetFromFieldNumber;
const int ConnectionLinePathSourceArchive::kOutsetToFieldNumber;
#endif  // !_MSC_VER

ConnectionLinePathSourceArchive::ConnectionLinePathSourceArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnectionLinePathSourceArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSD::BezierPathSourceArchive*>(&::TSD::BezierPathSourceArchive::default_instance());
}

ConnectionLinePathSourceArchive::ConnectionLinePathSourceArchive(const ConnectionLinePathSourceArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectionLinePathSourceArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  type_ = 0;
  outset_from_ = 0;
  outset_to_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectionLinePathSourceArchive::~ConnectionLinePathSourceArchive() {
  SharedDtor();
}

void ConnectionLinePathSourceArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void ConnectionLinePathSourceArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectionLinePathSourceArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectionLinePathSourceArchive_descriptor_;
}

const ConnectionLinePathSourceArchive& ConnectionLinePathSourceArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

ConnectionLinePathSourceArchive* ConnectionLinePathSourceArchive::default_instance_ = NULL;

ConnectionLinePathSourceArchive* ConnectionLinePathSourceArchive::New() const {
  return new ConnectionLinePathSourceArchive;
}

void ConnectionLinePathSourceArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSD::BezierPathSourceArchive::Clear();
    }
    type_ = 0;
    outset_from_ = 0;
    outset_to_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectionLinePathSourceArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSD.BezierPathSourceArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .TSD.ConnectionLinePathSourceArchive.ConnectionLinePathSourceType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSD::ConnectionLinePathSourceArchive_ConnectionLinePathSourceType_IsValid(value)) {
            set_type(static_cast< ::TSD::ConnectionLinePathSourceArchive_ConnectionLinePathSourceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_outset_from;
        break;
      }

      // optional float outset_from = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_outset_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &outset_from_)));
          set_has_outset_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_outset_to;
        break;
      }

      // optional float outset_to = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_outset_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &outset_to_)));
          set_has_outset_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnectionLinePathSourceArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSD.BezierPathSourceArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSD.ConnectionLinePathSourceArchive.ConnectionLinePathSourceType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional float outset_from = 3;
  if (has_outset_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->outset_from(), output);
  }

  // optional float outset_to = 4;
  if (has_outset_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->outset_to(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnectionLinePathSourceArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSD.BezierPathSourceArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSD.ConnectionLinePathSourceArchive.ConnectionLinePathSourceType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional float outset_from = 3;
  if (has_outset_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->outset_from(), target);
  }

  // optional float outset_to = 4;
  if (has_outset_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->outset_to(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnectionLinePathSourceArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSD.BezierPathSourceArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSD.ConnectionLinePathSourceArchive.ConnectionLinePathSourceType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional float outset_from = 3;
    if (has_outset_from()) {
      total_size += 1 + 4;
    }

    // optional float outset_to = 4;
    if (has_outset_to()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectionLinePathSourceArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectionLinePathSourceArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectionLinePathSourceArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectionLinePathSourceArchive::MergeFrom(const ConnectionLinePathSourceArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSD::BezierPathSourceArchive::MergeFrom(from.super());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_outset_from()) {
      set_outset_from(from.outset_from());
    }
    if (from.has_outset_to()) {
      set_outset_to(from.outset_to());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectionLinePathSourceArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionLinePathSourceArchive::CopyFrom(const ConnectionLinePathSourceArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionLinePathSourceArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  return true;
}

void ConnectionLinePathSourceArchive::Swap(ConnectionLinePathSourceArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(type_, other->type_);
    std::swap(outset_from_, other->outset_from_);
    std::swap(outset_to_, other->outset_to_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectionLinePathSourceArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectionLinePathSourceArchive_descriptor_;
  metadata.reflection = ConnectionLinePathSourceArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* EditableBezierPathSourceArchive_NodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EditableBezierPathSourceArchive_NodeType_descriptor_;
}
bool EditableBezierPathSourceArchive_NodeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const EditableBezierPathSourceArchive_NodeType EditableBezierPathSourceArchive::sharp;
const EditableBezierPathSourceArchive_NodeType EditableBezierPathSourceArchive::bezier;
const EditableBezierPathSourceArchive_NodeType EditableBezierPathSourceArchive::smooth;
const EditableBezierPathSourceArchive_NodeType EditableBezierPathSourceArchive::NodeType_MIN;
const EditableBezierPathSourceArchive_NodeType EditableBezierPathSourceArchive::NodeType_MAX;
const int EditableBezierPathSourceArchive::NodeType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int EditableBezierPathSourceArchive_Node::kInControlPointFieldNumber;
const int EditableBezierPathSourceArchive_Node::kNodePointFieldNumber;
const int EditableBezierPathSourceArchive_Node::kOutControlPointFieldNumber;
const int EditableBezierPathSourceArchive_Node::kTypeFieldNumber;
#endif  // !_MSC_VER

EditableBezierPathSourceArchive_Node::EditableBezierPathSourceArchive_Node()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EditableBezierPathSourceArchive_Node::InitAsDefaultInstance() {
  incontrolpoint_ = const_cast< ::TSP::Point*>(&::TSP::Point::default_instance());
  nodepoint_ = const_cast< ::TSP::Point*>(&::TSP::Point::default_instance());
  outcontrolpoint_ = const_cast< ::TSP::Point*>(&::TSP::Point::default_instance());
}

EditableBezierPathSourceArchive_Node::EditableBezierPathSourceArchive_Node(const EditableBezierPathSourceArchive_Node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EditableBezierPathSourceArchive_Node::SharedCtor() {
  _cached_size_ = 0;
  incontrolpoint_ = NULL;
  nodepoint_ = NULL;
  outcontrolpoint_ = NULL;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EditableBezierPathSourceArchive_Node::~EditableBezierPathSourceArchive_Node() {
  SharedDtor();
}

void EditableBezierPathSourceArchive_Node::SharedDtor() {
  if (this != default_instance_) {
    delete incontrolpoint_;
    delete nodepoint_;
    delete outcontrolpoint_;
  }
}

void EditableBezierPathSourceArchive_Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EditableBezierPathSourceArchive_Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EditableBezierPathSourceArchive_Node_descriptor_;
}

const EditableBezierPathSourceArchive_Node& EditableBezierPathSourceArchive_Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

EditableBezierPathSourceArchive_Node* EditableBezierPathSourceArchive_Node::default_instance_ = NULL;

EditableBezierPathSourceArchive_Node* EditableBezierPathSourceArchive_Node::New() const {
  return new EditableBezierPathSourceArchive_Node;
}

void EditableBezierPathSourceArchive_Node::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_incontrolpoint()) {
      if (incontrolpoint_ != NULL) incontrolpoint_->::TSP::Point::Clear();
    }
    if (has_nodepoint()) {
      if (nodepoint_ != NULL) nodepoint_->::TSP::Point::Clear();
    }
    if (has_outcontrolpoint()) {
      if (outcontrolpoint_ != NULL) outcontrolpoint_->::TSP::Point::Clear();
    }
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EditableBezierPathSourceArchive_Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSP.Point inControlPoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_incontrolpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nodePoint;
        break;
      }

      // required .TSP.Point nodePoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodePoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nodepoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_outControlPoint;
        break;
      }

      // required .TSP.Point outControlPoint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outControlPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_outcontrolpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required .TSD.EditableBezierPathSourceArchive.NodeType type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSD::EditableBezierPathSourceArchive_NodeType_IsValid(value)) {
            set_type(static_cast< ::TSD::EditableBezierPathSourceArchive_NodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EditableBezierPathSourceArchive_Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSP.Point inControlPoint = 1;
  if (has_incontrolpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->incontrolpoint(), output);
  }

  // required .TSP.Point nodePoint = 2;
  if (has_nodepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nodepoint(), output);
  }

  // required .TSP.Point outControlPoint = 3;
  if (has_outcontrolpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->outcontrolpoint(), output);
  }

  // required .TSD.EditableBezierPathSourceArchive.NodeType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EditableBezierPathSourceArchive_Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSP.Point inControlPoint = 1;
  if (has_incontrolpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->incontrolpoint(), target);
  }

  // required .TSP.Point nodePoint = 2;
  if (has_nodepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->nodepoint(), target);
  }

  // required .TSP.Point outControlPoint = 3;
  if (has_outcontrolpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->outcontrolpoint(), target);
  }

  // required .TSD.EditableBezierPathSourceArchive.NodeType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EditableBezierPathSourceArchive_Node::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSP.Point inControlPoint = 1;
    if (has_incontrolpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->incontrolpoint());
    }

    // required .TSP.Point nodePoint = 2;
    if (has_nodepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nodepoint());
    }

    // required .TSP.Point outControlPoint = 3;
    if (has_outcontrolpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->outcontrolpoint());
    }

    // required .TSD.EditableBezierPathSourceArchive.NodeType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EditableBezierPathSourceArchive_Node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EditableBezierPathSourceArchive_Node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EditableBezierPathSourceArchive_Node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EditableBezierPathSourceArchive_Node::MergeFrom(const EditableBezierPathSourceArchive_Node& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_incontrolpoint()) {
      mutable_incontrolpoint()->::TSP::Point::MergeFrom(from.incontrolpoint());
    }
    if (from.has_nodepoint()) {
      mutable_nodepoint()->::TSP::Point::MergeFrom(from.nodepoint());
    }
    if (from.has_outcontrolpoint()) {
      mutable_outcontrolpoint()->::TSP::Point::MergeFrom(from.outcontrolpoint());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EditableBezierPathSourceArchive_Node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EditableBezierPathSourceArchive_Node::CopyFrom(const EditableBezierPathSourceArchive_Node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditableBezierPathSourceArchive_Node::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_incontrolpoint()) {
    if (!this->incontrolpoint().IsInitialized()) return false;
  }
  if (has_nodepoint()) {
    if (!this->nodepoint().IsInitialized()) return false;
  }
  if (has_outcontrolpoint()) {
    if (!this->outcontrolpoint().IsInitialized()) return false;
  }
  return true;
}

void EditableBezierPathSourceArchive_Node::Swap(EditableBezierPathSourceArchive_Node* other) {
  if (other != this) {
    std::swap(incontrolpoint_, other->incontrolpoint_);
    std::swap(nodepoint_, other->nodepoint_);
    std::swap(outcontrolpoint_, other->outcontrolpoint_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EditableBezierPathSourceArchive_Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EditableBezierPathSourceArchive_Node_descriptor_;
  metadata.reflection = EditableBezierPathSourceArchive_Node_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int EditableBezierPathSourceArchive_Subpath::kNodesFieldNumber;
const int EditableBezierPathSourceArchive_Subpath::kClosedFieldNumber;
#endif  // !_MSC_VER

EditableBezierPathSourceArchive_Subpath::EditableBezierPathSourceArchive_Subpath()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EditableBezierPathSourceArchive_Subpath::InitAsDefaultInstance() {
}

EditableBezierPathSourceArchive_Subpath::EditableBezierPathSourceArchive_Subpath(const EditableBezierPathSourceArchive_Subpath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EditableBezierPathSourceArchive_Subpath::SharedCtor() {
  _cached_size_ = 0;
  closed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EditableBezierPathSourceArchive_Subpath::~EditableBezierPathSourceArchive_Subpath() {
  SharedDtor();
}

void EditableBezierPathSourceArchive_Subpath::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EditableBezierPathSourceArchive_Subpath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EditableBezierPathSourceArchive_Subpath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EditableBezierPathSourceArchive_Subpath_descriptor_;
}

const EditableBezierPathSourceArchive_Subpath& EditableBezierPathSourceArchive_Subpath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

EditableBezierPathSourceArchive_Subpath* EditableBezierPathSourceArchive_Subpath::default_instance_ = NULL;

EditableBezierPathSourceArchive_Subpath* EditableBezierPathSourceArchive_Subpath::New() const {
  return new EditableBezierPathSourceArchive_Subpath;
}

void EditableBezierPathSourceArchive_Subpath::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    closed_ = false;
  }
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EditableBezierPathSourceArchive_Subpath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSD.EditableBezierPathSourceArchive.Node nodes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_nodes;
        if (input->ExpectTag(16)) goto parse_closed;
        break;
      }

      // required bool closed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_closed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &closed_)));
          set_has_closed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EditableBezierPathSourceArchive_Subpath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSD.EditableBezierPathSourceArchive.Node nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(i), output);
  }

  // required bool closed = 2;
  if (has_closed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->closed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EditableBezierPathSourceArchive_Subpath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSD.EditableBezierPathSourceArchive.Node nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nodes(i), target);
  }

  // required bool closed = 2;
  if (has_closed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->closed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EditableBezierPathSourceArchive_Subpath::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool closed = 2;
    if (has_closed()) {
      total_size += 1 + 1;
    }

  }
  // repeated .TSD.EditableBezierPathSourceArchive.Node nodes = 1;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EditableBezierPathSourceArchive_Subpath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EditableBezierPathSourceArchive_Subpath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EditableBezierPathSourceArchive_Subpath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EditableBezierPathSourceArchive_Subpath::MergeFrom(const EditableBezierPathSourceArchive_Subpath& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_closed()) {
      set_closed(from.closed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EditableBezierPathSourceArchive_Subpath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EditableBezierPathSourceArchive_Subpath::CopyFrom(const EditableBezierPathSourceArchive_Subpath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditableBezierPathSourceArchive_Subpath::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < nodes_size(); i++) {
    if (!this->nodes(i).IsInitialized()) return false;
  }
  return true;
}

void EditableBezierPathSourceArchive_Subpath::Swap(EditableBezierPathSourceArchive_Subpath* other) {
  if (other != this) {
    nodes_.Swap(&other->nodes_);
    std::swap(closed_, other->closed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EditableBezierPathSourceArchive_Subpath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EditableBezierPathSourceArchive_Subpath_descriptor_;
  metadata.reflection = EditableBezierPathSourceArchive_Subpath_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int EditableBezierPathSourceArchive::kSubpathsFieldNumber;
const int EditableBezierPathSourceArchive::kNaturalSizeFieldNumber;
#endif  // !_MSC_VER

EditableBezierPathSourceArchive::EditableBezierPathSourceArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EditableBezierPathSourceArchive::InitAsDefaultInstance() {
  naturalsize_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
}

EditableBezierPathSourceArchive::EditableBezierPathSourceArchive(const EditableBezierPathSourceArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EditableBezierPathSourceArchive::SharedCtor() {
  _cached_size_ = 0;
  naturalsize_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EditableBezierPathSourceArchive::~EditableBezierPathSourceArchive() {
  SharedDtor();
}

void EditableBezierPathSourceArchive::SharedDtor() {
  if (this != default_instance_) {
    delete naturalsize_;
  }
}

void EditableBezierPathSourceArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EditableBezierPathSourceArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EditableBezierPathSourceArchive_descriptor_;
}

const EditableBezierPathSourceArchive& EditableBezierPathSourceArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

EditableBezierPathSourceArchive* EditableBezierPathSourceArchive::default_instance_ = NULL;

EditableBezierPathSourceArchive* EditableBezierPathSourceArchive::New() const {
  return new EditableBezierPathSourceArchive;
}

void EditableBezierPathSourceArchive::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_naturalsize()) {
      if (naturalsize_ != NULL) naturalsize_->::TSP::Size::Clear();
    }
  }
  subpaths_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EditableBezierPathSourceArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSD.EditableBezierPathSourceArchive.Subpath subpaths = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subpaths:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subpaths()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_subpaths;
        if (input->ExpectTag(18)) goto parse_naturalSize;
        break;
      }

      // optional .TSP.Size naturalSize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_naturalSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_naturalsize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EditableBezierPathSourceArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSD.EditableBezierPathSourceArchive.Subpath subpaths = 1;
  for (int i = 0; i < this->subpaths_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->subpaths(i), output);
  }

  // optional .TSP.Size naturalSize = 2;
  if (has_naturalsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->naturalsize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EditableBezierPathSourceArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSD.EditableBezierPathSourceArchive.Subpath subpaths = 1;
  for (int i = 0; i < this->subpaths_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->subpaths(i), target);
  }

  // optional .TSP.Size naturalSize = 2;
  if (has_naturalsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->naturalsize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EditableBezierPathSourceArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .TSP.Size naturalSize = 2;
    if (has_naturalsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->naturalsize());
    }

  }
  // repeated .TSD.EditableBezierPathSourceArchive.Subpath subpaths = 1;
  total_size += 1 * this->subpaths_size();
  for (int i = 0; i < this->subpaths_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subpaths(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EditableBezierPathSourceArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EditableBezierPathSourceArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EditableBezierPathSourceArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EditableBezierPathSourceArchive::MergeFrom(const EditableBezierPathSourceArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  subpaths_.MergeFrom(from.subpaths_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_naturalsize()) {
      mutable_naturalsize()->::TSP::Size::MergeFrom(from.naturalsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EditableBezierPathSourceArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EditableBezierPathSourceArchive::CopyFrom(const EditableBezierPathSourceArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditableBezierPathSourceArchive::IsInitialized() const {

  for (int i = 0; i < subpaths_size(); i++) {
    if (!this->subpaths(i).IsInitialized()) return false;
  }
  if (has_naturalsize()) {
    if (!this->naturalsize().IsInitialized()) return false;
  }
  return true;
}

void EditableBezierPathSourceArchive::Swap(EditableBezierPathSourceArchive* other) {
  if (other != this) {
    subpaths_.Swap(&other->subpaths_);
    std::swap(naturalsize_, other->naturalsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EditableBezierPathSourceArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EditableBezierPathSourceArchive_descriptor_;
  metadata.reflection = EditableBezierPathSourceArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PathSourceArchive::kHorizontalFlipFieldNumber;
const int PathSourceArchive::kVerticalFlipFieldNumber;
const int PathSourceArchive::kPointPathSourceFieldNumber;
const int PathSourceArchive::kScalarPathSourceFieldNumber;
const int PathSourceArchive::kBezierPathSourceFieldNumber;
const int PathSourceArchive::kCalloutPathSourceFieldNumber;
const int PathSourceArchive::kConnectionLinePathSourceFieldNumber;
const int PathSourceArchive::kEditableBezierPathSourceFieldNumber;
#endif  // !_MSC_VER

PathSourceArchive::PathSourceArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PathSourceArchive::InitAsDefaultInstance() {
  point_path_source_ = const_cast< ::TSD::PointPathSourceArchive*>(&::TSD::PointPathSourceArchive::default_instance());
  scalar_path_source_ = const_cast< ::TSD::ScalarPathSourceArchive*>(&::TSD::ScalarPathSourceArchive::default_instance());
  bezier_path_source_ = const_cast< ::TSD::BezierPathSourceArchive*>(&::TSD::BezierPathSourceArchive::default_instance());
  callout_path_source_ = const_cast< ::TSD::CalloutPathSourceArchive*>(&::TSD::CalloutPathSourceArchive::default_instance());
  connection_line_path_source_ = const_cast< ::TSD::ConnectionLinePathSourceArchive*>(&::TSD::ConnectionLinePathSourceArchive::default_instance());
  editable_bezier_path_source_ = const_cast< ::TSD::EditableBezierPathSourceArchive*>(&::TSD::EditableBezierPathSourceArchive::default_instance());
}

PathSourceArchive::PathSourceArchive(const PathSourceArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PathSourceArchive::SharedCtor() {
  _cached_size_ = 0;
  horizontalflip_ = false;
  verticalflip_ = false;
  point_path_source_ = NULL;
  scalar_path_source_ = NULL;
  bezier_path_source_ = NULL;
  callout_path_source_ = NULL;
  connection_line_path_source_ = NULL;
  editable_bezier_path_source_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathSourceArchive::~PathSourceArchive() {
  SharedDtor();
}

void PathSourceArchive::SharedDtor() {
  if (this != default_instance_) {
    delete point_path_source_;
    delete scalar_path_source_;
    delete bezier_path_source_;
    delete callout_path_source_;
    delete connection_line_path_source_;
    delete editable_bezier_path_source_;
  }
}

void PathSourceArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathSourceArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathSourceArchive_descriptor_;
}

const PathSourceArchive& PathSourceArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

PathSourceArchive* PathSourceArchive::default_instance_ = NULL;

PathSourceArchive* PathSourceArchive::New() const {
  return new PathSourceArchive;
}

void PathSourceArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    horizontalflip_ = false;
    verticalflip_ = false;
    if (has_point_path_source()) {
      if (point_path_source_ != NULL) point_path_source_->::TSD::PointPathSourceArchive::Clear();
    }
    if (has_scalar_path_source()) {
      if (scalar_path_source_ != NULL) scalar_path_source_->::TSD::ScalarPathSourceArchive::Clear();
    }
    if (has_bezier_path_source()) {
      if (bezier_path_source_ != NULL) bezier_path_source_->::TSD::BezierPathSourceArchive::Clear();
    }
    if (has_callout_path_source()) {
      if (callout_path_source_ != NULL) callout_path_source_->::TSD::CalloutPathSourceArchive::Clear();
    }
    if (has_connection_line_path_source()) {
      if (connection_line_path_source_ != NULL) connection_line_path_source_->::TSD::ConnectionLinePathSourceArchive::Clear();
    }
    if (has_editable_bezier_path_source()) {
      if (editable_bezier_path_source_ != NULL) editable_bezier_path_source_->::TSD::EditableBezierPathSourceArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PathSourceArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool horizontalFlip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horizontalflip_)));
          set_has_horizontalflip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_verticalFlip;
        break;
      }

      // optional bool verticalFlip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_verticalFlip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &verticalflip_)));
          set_has_verticalflip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_point_path_source;
        break;
      }

      // optional .TSD.PointPathSourceArchive point_path_source = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point_path_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point_path_source()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_scalar_path_source;
        break;
      }

      // optional .TSD.ScalarPathSourceArchive scalar_path_source = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scalar_path_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scalar_path_source()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bezier_path_source;
        break;
      }

      // optional .TSD.BezierPathSourceArchive bezier_path_source = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bezier_path_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bezier_path_source()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_callout_path_source;
        break;
      }

      // optional .TSD.CalloutPathSourceArchive callout_path_source = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_callout_path_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_callout_path_source()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_connection_line_path_source;
        break;
      }

      // optional .TSD.ConnectionLinePathSourceArchive connection_line_path_source = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connection_line_path_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connection_line_path_source()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_editable_bezier_path_source;
        break;
      }

      // optional .TSD.EditableBezierPathSourceArchive editable_bezier_path_source = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_editable_bezier_path_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_editable_bezier_path_source()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PathSourceArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool horizontalFlip = 1;
  if (has_horizontalflip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->horizontalflip(), output);
  }

  // optional bool verticalFlip = 2;
  if (has_verticalflip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->verticalflip(), output);
  }

  // optional .TSD.PointPathSourceArchive point_path_source = 3;
  if (has_point_path_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->point_path_source(), output);
  }

  // optional .TSD.ScalarPathSourceArchive scalar_path_source = 4;
  if (has_scalar_path_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->scalar_path_source(), output);
  }

  // optional .TSD.BezierPathSourceArchive bezier_path_source = 5;
  if (has_bezier_path_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bezier_path_source(), output);
  }

  // optional .TSD.CalloutPathSourceArchive callout_path_source = 6;
  if (has_callout_path_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->callout_path_source(), output);
  }

  // optional .TSD.ConnectionLinePathSourceArchive connection_line_path_source = 7;
  if (has_connection_line_path_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->connection_line_path_source(), output);
  }

  // optional .TSD.EditableBezierPathSourceArchive editable_bezier_path_source = 8;
  if (has_editable_bezier_path_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->editable_bezier_path_source(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PathSourceArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool horizontalFlip = 1;
  if (has_horizontalflip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->horizontalflip(), target);
  }

  // optional bool verticalFlip = 2;
  if (has_verticalflip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->verticalflip(), target);
  }

  // optional .TSD.PointPathSourceArchive point_path_source = 3;
  if (has_point_path_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->point_path_source(), target);
  }

  // optional .TSD.ScalarPathSourceArchive scalar_path_source = 4;
  if (has_scalar_path_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->scalar_path_source(), target);
  }

  // optional .TSD.BezierPathSourceArchive bezier_path_source = 5;
  if (has_bezier_path_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bezier_path_source(), target);
  }

  // optional .TSD.CalloutPathSourceArchive callout_path_source = 6;
  if (has_callout_path_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->callout_path_source(), target);
  }

  // optional .TSD.ConnectionLinePathSourceArchive connection_line_path_source = 7;
  if (has_connection_line_path_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->connection_line_path_source(), target);
  }

  // optional .TSD.EditableBezierPathSourceArchive editable_bezier_path_source = 8;
  if (has_editable_bezier_path_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->editable_bezier_path_source(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PathSourceArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool horizontalFlip = 1;
    if (has_horizontalflip()) {
      total_size += 1 + 1;
    }

    // optional bool verticalFlip = 2;
    if (has_verticalflip()) {
      total_size += 1 + 1;
    }

    // optional .TSD.PointPathSourceArchive point_path_source = 3;
    if (has_point_path_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point_path_source());
    }

    // optional .TSD.ScalarPathSourceArchive scalar_path_source = 4;
    if (has_scalar_path_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scalar_path_source());
    }

    // optional .TSD.BezierPathSourceArchive bezier_path_source = 5;
    if (has_bezier_path_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bezier_path_source());
    }

    // optional .TSD.CalloutPathSourceArchive callout_path_source = 6;
    if (has_callout_path_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->callout_path_source());
    }

    // optional .TSD.ConnectionLinePathSourceArchive connection_line_path_source = 7;
    if (has_connection_line_path_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connection_line_path_source());
    }

    // optional .TSD.EditableBezierPathSourceArchive editable_bezier_path_source = 8;
    if (has_editable_bezier_path_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->editable_bezier_path_source());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathSourceArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PathSourceArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PathSourceArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PathSourceArchive::MergeFrom(const PathSourceArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_horizontalflip()) {
      set_horizontalflip(from.horizontalflip());
    }
    if (from.has_verticalflip()) {
      set_verticalflip(from.verticalflip());
    }
    if (from.has_point_path_source()) {
      mutable_point_path_source()->::TSD::PointPathSourceArchive::MergeFrom(from.point_path_source());
    }
    if (from.has_scalar_path_source()) {
      mutable_scalar_path_source()->::TSD::ScalarPathSourceArchive::MergeFrom(from.scalar_path_source());
    }
    if (from.has_bezier_path_source()) {
      mutable_bezier_path_source()->::TSD::BezierPathSourceArchive::MergeFrom(from.bezier_path_source());
    }
    if (from.has_callout_path_source()) {
      mutable_callout_path_source()->::TSD::CalloutPathSourceArchive::MergeFrom(from.callout_path_source());
    }
    if (from.has_connection_line_path_source()) {
      mutable_connection_line_path_source()->::TSD::ConnectionLinePathSourceArchive::MergeFrom(from.connection_line_path_source());
    }
    if (from.has_editable_bezier_path_source()) {
      mutable_editable_bezier_path_source()->::TSD::EditableBezierPathSourceArchive::MergeFrom(from.editable_bezier_path_source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PathSourceArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathSourceArchive::CopyFrom(const PathSourceArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathSourceArchive::IsInitialized() const {

  if (has_point_path_source()) {
    if (!this->point_path_source().IsInitialized()) return false;
  }
  if (has_scalar_path_source()) {
    if (!this->scalar_path_source().IsInitialized()) return false;
  }
  if (has_bezier_path_source()) {
    if (!this->bezier_path_source().IsInitialized()) return false;
  }
  if (has_callout_path_source()) {
    if (!this->callout_path_source().IsInitialized()) return false;
  }
  if (has_connection_line_path_source()) {
    if (!this->connection_line_path_source().IsInitialized()) return false;
  }
  if (has_editable_bezier_path_source()) {
    if (!this->editable_bezier_path_source().IsInitialized()) return false;
  }
  return true;
}

void PathSourceArchive::Swap(PathSourceArchive* other) {
  if (other != this) {
    std::swap(horizontalflip_, other->horizontalflip_);
    std::swap(verticalflip_, other->verticalflip_);
    std::swap(point_path_source_, other->point_path_source_);
    std::swap(scalar_path_source_, other->scalar_path_source_);
    std::swap(bezier_path_source_, other->bezier_path_source_);
    std::swap(callout_path_source_, other->callout_path_source_);
    std::swap(connection_line_path_source_, other->connection_line_path_source_);
    std::swap(editable_bezier_path_source_, other->editable_bezier_path_source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PathSourceArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathSourceArchive_descriptor_;
  metadata.reflection = PathSourceArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AngleGradientArchive::kGradientangleFieldNumber;
#endif  // !_MSC_VER

AngleGradientArchive::AngleGradientArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AngleGradientArchive::InitAsDefaultInstance() {
}

AngleGradientArchive::AngleGradientArchive(const AngleGradientArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AngleGradientArchive::SharedCtor() {
  _cached_size_ = 0;
  gradientangle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AngleGradientArchive::~AngleGradientArchive() {
  SharedDtor();
}

void AngleGradientArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AngleGradientArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AngleGradientArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AngleGradientArchive_descriptor_;
}

const AngleGradientArchive& AngleGradientArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

AngleGradientArchive* AngleGradientArchive::default_instance_ = NULL;

AngleGradientArchive* AngleGradientArchive::New() const {
  return new AngleGradientArchive;
}

void AngleGradientArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gradientangle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AngleGradientArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float gradientangle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gradientangle_)));
          set_has_gradientangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AngleGradientArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float gradientangle = 2;
  if (has_gradientangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->gradientangle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AngleGradientArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float gradientangle = 2;
  if (has_gradientangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->gradientangle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AngleGradientArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float gradientangle = 2;
    if (has_gradientangle()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AngleGradientArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AngleGradientArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AngleGradientArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AngleGradientArchive::MergeFrom(const AngleGradientArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gradientangle()) {
      set_gradientangle(from.gradientangle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AngleGradientArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AngleGradientArchive::CopyFrom(const AngleGradientArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AngleGradientArchive::IsInitialized() const {

  return true;
}

void AngleGradientArchive::Swap(AngleGradientArchive* other) {
  if (other != this) {
    std::swap(gradientangle_, other->gradientangle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AngleGradientArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AngleGradientArchive_descriptor_;
  metadata.reflection = AngleGradientArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransformGradientArchive::kStartFieldNumber;
const int TransformGradientArchive::kEndFieldNumber;
const int TransformGradientArchive::kBaseNaturalSizeFieldNumber;
#endif  // !_MSC_VER

TransformGradientArchive::TransformGradientArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransformGradientArchive::InitAsDefaultInstance() {
  start_ = const_cast< ::TSP::Point*>(&::TSP::Point::default_instance());
  end_ = const_cast< ::TSP::Point*>(&::TSP::Point::default_instance());
  basenaturalsize_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
}

TransformGradientArchive::TransformGradientArchive(const TransformGradientArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransformGradientArchive::SharedCtor() {
  _cached_size_ = 0;
  start_ = NULL;
  end_ = NULL;
  basenaturalsize_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransformGradientArchive::~TransformGradientArchive() {
  SharedDtor();
}

void TransformGradientArchive::SharedDtor() {
  if (this != default_instance_) {
    delete start_;
    delete end_;
    delete basenaturalsize_;
  }
}

void TransformGradientArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransformGradientArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransformGradientArchive_descriptor_;
}

const TransformGradientArchive& TransformGradientArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

TransformGradientArchive* TransformGradientArchive::default_instance_ = NULL;

TransformGradientArchive* TransformGradientArchive::New() const {
  return new TransformGradientArchive;
}

void TransformGradientArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_start()) {
      if (start_ != NULL) start_->::TSP::Point::Clear();
    }
    if (has_end()) {
      if (end_ != NULL) end_->::TSP::Point::Clear();
    }
    if (has_basenaturalsize()) {
      if (basenaturalsize_ != NULL) basenaturalsize_->::TSP::Size::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransformGradientArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Point start = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_end;
        break;
      }

      // optional .TSP.Point end = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_baseNaturalSize;
        break;
      }

      // optional .TSP.Size baseNaturalSize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baseNaturalSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basenaturalsize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransformGradientArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Point start = 1;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->start(), output);
  }

  // optional .TSP.Point end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->end(), output);
  }

  // optional .TSP.Size baseNaturalSize = 3;
  if (has_basenaturalsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->basenaturalsize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransformGradientArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Point start = 1;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->start(), target);
  }

  // optional .TSP.Point end = 2;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->end(), target);
  }

  // optional .TSP.Size baseNaturalSize = 3;
  if (has_basenaturalsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->basenaturalsize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransformGradientArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Point start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start());
    }

    // optional .TSP.Point end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end());
    }

    // optional .TSP.Size baseNaturalSize = 3;
    if (has_basenaturalsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basenaturalsize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformGradientArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransformGradientArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransformGradientArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransformGradientArchive::MergeFrom(const TransformGradientArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start()) {
      mutable_start()->::TSP::Point::MergeFrom(from.start());
    }
    if (from.has_end()) {
      mutable_end()->::TSP::Point::MergeFrom(from.end());
    }
    if (from.has_basenaturalsize()) {
      mutable_basenaturalsize()->::TSP::Size::MergeFrom(from.basenaturalsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransformGradientArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformGradientArchive::CopyFrom(const TransformGradientArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformGradientArchive::IsInitialized() const {

  if (has_start()) {
    if (!this->start().IsInitialized()) return false;
  }
  if (has_end()) {
    if (!this->end().IsInitialized()) return false;
  }
  if (has_basenaturalsize()) {
    if (!this->basenaturalsize().IsInitialized()) return false;
  }
  return true;
}

void TransformGradientArchive::Swap(TransformGradientArchive* other) {
  if (other != this) {
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(basenaturalsize_, other->basenaturalsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransformGradientArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransformGradientArchive_descriptor_;
  metadata.reflection = TransformGradientArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GradientArchive_GradientType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GradientArchive_GradientType_descriptor_;
}
bool GradientArchive_GradientType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GradientArchive_GradientType GradientArchive::Linear;
const GradientArchive_GradientType GradientArchive::Radial;
const GradientArchive_GradientType GradientArchive::GradientType_MIN;
const GradientArchive_GradientType GradientArchive::GradientType_MAX;
const int GradientArchive::GradientType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GradientArchive_GradientStop::kColorFieldNumber;
const int GradientArchive_GradientStop::kFractionFieldNumber;
const int GradientArchive_GradientStop::kInflectionFieldNumber;
#endif  // !_MSC_VER

GradientArchive_GradientStop::GradientArchive_GradientStop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GradientArchive_GradientStop::InitAsDefaultInstance() {
  color_ = const_cast< ::TSP::Color*>(&::TSP::Color::default_instance());
}

GradientArchive_GradientStop::GradientArchive_GradientStop(const GradientArchive_GradientStop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GradientArchive_GradientStop::SharedCtor() {
  _cached_size_ = 0;
  color_ = NULL;
  fraction_ = 0;
  inflection_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GradientArchive_GradientStop::~GradientArchive_GradientStop() {
  SharedDtor();
}

void GradientArchive_GradientStop::SharedDtor() {
  if (this != default_instance_) {
    delete color_;
  }
}

void GradientArchive_GradientStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GradientArchive_GradientStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GradientArchive_GradientStop_descriptor_;
}

const GradientArchive_GradientStop& GradientArchive_GradientStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

GradientArchive_GradientStop* GradientArchive_GradientStop::default_instance_ = NULL;

GradientArchive_GradientStop* GradientArchive_GradientStop::New() const {
  return new GradientArchive_GradientStop;
}

void GradientArchive_GradientStop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_color()) {
      if (color_ != NULL) color_->::TSP::Color::Clear();
    }
    fraction_ = 0;
    inflection_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GradientArchive_GradientStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Color color = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_fraction;
        break;
      }

      // optional float fraction = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fraction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fraction_)));
          set_has_fraction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_inflection;
        break;
      }

      // optional float inflection = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_inflection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inflection_)));
          set_has_inflection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GradientArchive_GradientStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Color color = 1;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->color(), output);
  }

  // optional float fraction = 2;
  if (has_fraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->fraction(), output);
  }

  // optional float inflection = 3;
  if (has_inflection()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->inflection(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GradientArchive_GradientStop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Color color = 1;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->color(), target);
  }

  // optional float fraction = 2;
  if (has_fraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->fraction(), target);
  }

  // optional float inflection = 3;
  if (has_inflection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->inflection(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GradientArchive_GradientStop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Color color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->color());
    }

    // optional float fraction = 2;
    if (has_fraction()) {
      total_size += 1 + 4;
    }

    // optional float inflection = 3;
    if (has_inflection()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GradientArchive_GradientStop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GradientArchive_GradientStop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GradientArchive_GradientStop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GradientArchive_GradientStop::MergeFrom(const GradientArchive_GradientStop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color()) {
      mutable_color()->::TSP::Color::MergeFrom(from.color());
    }
    if (from.has_fraction()) {
      set_fraction(from.fraction());
    }
    if (from.has_inflection()) {
      set_inflection(from.inflection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GradientArchive_GradientStop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GradientArchive_GradientStop::CopyFrom(const GradientArchive_GradientStop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GradientArchive_GradientStop::IsInitialized() const {

  if (has_color()) {
    if (!this->color().IsInitialized()) return false;
  }
  return true;
}

void GradientArchive_GradientStop::Swap(GradientArchive_GradientStop* other) {
  if (other != this) {
    std::swap(color_, other->color_);
    std::swap(fraction_, other->fraction_);
    std::swap(inflection_, other->inflection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GradientArchive_GradientStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GradientArchive_GradientStop_descriptor_;
  metadata.reflection = GradientArchive_GradientStop_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GradientArchive::kTypeFieldNumber;
const int GradientArchive::kStopsFieldNumber;
const int GradientArchive::kOpacityFieldNumber;
const int GradientArchive::kAdvancedGradientFieldNumber;
const int GradientArchive::kAnglegradientFieldNumber;
const int GradientArchive::kTransformgradientFieldNumber;
#endif  // !_MSC_VER

GradientArchive::GradientArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GradientArchive::InitAsDefaultInstance() {
  anglegradient_ = const_cast< ::TSD::AngleGradientArchive*>(&::TSD::AngleGradientArchive::default_instance());
  transformgradient_ = const_cast< ::TSD::TransformGradientArchive*>(&::TSD::TransformGradientArchive::default_instance());
}

GradientArchive::GradientArchive(const GradientArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GradientArchive::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  opacity_ = 0;
  advancedgradient_ = false;
  anglegradient_ = NULL;
  transformgradient_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GradientArchive::~GradientArchive() {
  SharedDtor();
}

void GradientArchive::SharedDtor() {
  if (this != default_instance_) {
    delete anglegradient_;
    delete transformgradient_;
  }
}

void GradientArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GradientArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GradientArchive_descriptor_;
}

const GradientArchive& GradientArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

GradientArchive* GradientArchive::default_instance_ = NULL;

GradientArchive* GradientArchive::New() const {
  return new GradientArchive;
}

void GradientArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    opacity_ = 0;
    advancedgradient_ = false;
    if (has_anglegradient()) {
      if (anglegradient_ != NULL) anglegradient_->::TSD::AngleGradientArchive::Clear();
    }
    if (has_transformgradient()) {
      if (transformgradient_ != NULL) transformgradient_->::TSD::TransformGradientArchive::Clear();
    }
  }
  stops_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GradientArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSD.GradientArchive.GradientType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSD::GradientArchive_GradientType_IsValid(value)) {
            set_type(static_cast< ::TSD::GradientArchive_GradientType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stops;
        break;
      }

      // repeated .TSD.GradientArchive.GradientStop stops = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stops()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stops;
        if (input->ExpectTag(29)) goto parse_opacity;
        break;
      }

      // optional float opacity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &opacity_)));
          set_has_opacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_advancedGradient;
        break;
      }

      // optional bool advancedGradient = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_advancedGradient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &advancedgradient_)));
          set_has_advancedgradient();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_anglegradient;
        break;
      }

      // optional .TSD.AngleGradientArchive anglegradient = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_anglegradient:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_anglegradient()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_transformgradient;
        break;
      }

      // optional .TSD.TransformGradientArchive transformgradient = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transformgradient:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transformgradient()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GradientArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSD.GradientArchive.GradientType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .TSD.GradientArchive.GradientStop stops = 2;
  for (int i = 0; i < this->stops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stops(i), output);
  }

  // optional float opacity = 3;
  if (has_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->opacity(), output);
  }

  // optional bool advancedGradient = 4;
  if (has_advancedgradient()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->advancedgradient(), output);
  }

  // optional .TSD.AngleGradientArchive anglegradient = 5;
  if (has_anglegradient()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->anglegradient(), output);
  }

  // optional .TSD.TransformGradientArchive transformgradient = 6;
  if (has_transformgradient()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->transformgradient(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GradientArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSD.GradientArchive.GradientType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .TSD.GradientArchive.GradientStop stops = 2;
  for (int i = 0; i < this->stops_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stops(i), target);
  }

  // optional float opacity = 3;
  if (has_opacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->opacity(), target);
  }

  // optional bool advancedGradient = 4;
  if (has_advancedgradient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->advancedgradient(), target);
  }

  // optional .TSD.AngleGradientArchive anglegradient = 5;
  if (has_anglegradient()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->anglegradient(), target);
  }

  // optional .TSD.TransformGradientArchive transformgradient = 6;
  if (has_transformgradient()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->transformgradient(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GradientArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSD.GradientArchive.GradientType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional float opacity = 3;
    if (has_opacity()) {
      total_size += 1 + 4;
    }

    // optional bool advancedGradient = 4;
    if (has_advancedgradient()) {
      total_size += 1 + 1;
    }

    // optional .TSD.AngleGradientArchive anglegradient = 5;
    if (has_anglegradient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->anglegradient());
    }

    // optional .TSD.TransformGradientArchive transformgradient = 6;
    if (has_transformgradient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transformgradient());
    }

  }
  // repeated .TSD.GradientArchive.GradientStop stops = 2;
  total_size += 1 * this->stops_size();
  for (int i = 0; i < this->stops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stops(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GradientArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GradientArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GradientArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GradientArchive::MergeFrom(const GradientArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  stops_.MergeFrom(from.stops_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_opacity()) {
      set_opacity(from.opacity());
    }
    if (from.has_advancedgradient()) {
      set_advancedgradient(from.advancedgradient());
    }
    if (from.has_anglegradient()) {
      mutable_anglegradient()->::TSD::AngleGradientArchive::MergeFrom(from.anglegradient());
    }
    if (from.has_transformgradient()) {
      mutable_transformgradient()->::TSD::TransformGradientArchive::MergeFrom(from.transformgradient());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GradientArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GradientArchive::CopyFrom(const GradientArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GradientArchive::IsInitialized() const {

  for (int i = 0; i < stops_size(); i++) {
    if (!this->stops(i).IsInitialized()) return false;
  }
  if (has_transformgradient()) {
    if (!this->transformgradient().IsInitialized()) return false;
  }
  return true;
}

void GradientArchive::Swap(GradientArchive* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    stops_.Swap(&other->stops_);
    std::swap(opacity_, other->opacity_);
    std::swap(advancedgradient_, other->advancedgradient_);
    std::swap(anglegradient_, other->anglegradient_);
    std::swap(transformgradient_, other->transformgradient_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GradientArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GradientArchive_descriptor_;
  metadata.reflection = GradientArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ImageFillArchive_ImageFillTechnique_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageFillArchive_ImageFillTechnique_descriptor_;
}
bool ImageFillArchive_ImageFillTechnique_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ImageFillArchive_ImageFillTechnique ImageFillArchive::NaturalSize;
const ImageFillArchive_ImageFillTechnique ImageFillArchive::Stretch;
const ImageFillArchive_ImageFillTechnique ImageFillArchive::Tile;
const ImageFillArchive_ImageFillTechnique ImageFillArchive::ScaleToFill;
const ImageFillArchive_ImageFillTechnique ImageFillArchive::ScaleToFit;
const ImageFillArchive_ImageFillTechnique ImageFillArchive::ImageFillTechnique_MIN;
const ImageFillArchive_ImageFillTechnique ImageFillArchive::ImageFillTechnique_MAX;
const int ImageFillArchive::ImageFillTechnique_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ImageFillArchive::kImagedataFieldNumber;
const int ImageFillArchive::kTechniqueFieldNumber;
const int ImageFillArchive::kTintFieldNumber;
const int ImageFillArchive::kFillsizeFieldNumber;
const int ImageFillArchive::kOriginalimagedataFieldNumber;
const int ImageFillArchive::kInterpretsUntaggedImageDataAsGenericFieldNumber;
const int ImageFillArchive::kDatabaseImagedataFieldNumber;
const int ImageFillArchive::kDatabaseOriginalimagedataFieldNumber;
#endif  // !_MSC_VER

ImageFillArchive::ImageFillArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImageFillArchive::InitAsDefaultInstance() {
  imagedata_ = const_cast< ::TSP::DataReference*>(&::TSP::DataReference::default_instance());
  tint_ = const_cast< ::TSP::Color*>(&::TSP::Color::default_instance());
  fillsize_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
  originalimagedata_ = const_cast< ::TSP::DataReference*>(&::TSP::DataReference::default_instance());
  database_imagedata_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  database_originalimagedata_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ImageFillArchive::ImageFillArchive(const ImageFillArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImageFillArchive::SharedCtor() {
  _cached_size_ = 0;
  imagedata_ = NULL;
  technique_ = 0;
  tint_ = NULL;
  fillsize_ = NULL;
  originalimagedata_ = NULL;
  interpretsuntaggedimagedataasgeneric_ = false;
  database_imagedata_ = NULL;
  database_originalimagedata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageFillArchive::~ImageFillArchive() {
  SharedDtor();
}

void ImageFillArchive::SharedDtor() {
  if (this != default_instance_) {
    delete imagedata_;
    delete tint_;
    delete fillsize_;
    delete originalimagedata_;
    delete database_imagedata_;
    delete database_originalimagedata_;
  }
}

void ImageFillArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageFillArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageFillArchive_descriptor_;
}

const ImageFillArchive& ImageFillArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

ImageFillArchive* ImageFillArchive::default_instance_ = NULL;

ImageFillArchive* ImageFillArchive::New() const {
  return new ImageFillArchive;
}

void ImageFillArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_imagedata()) {
      if (imagedata_ != NULL) imagedata_->::TSP::DataReference::Clear();
    }
    technique_ = 0;
    if (has_tint()) {
      if (tint_ != NULL) tint_->::TSP::Color::Clear();
    }
    if (has_fillsize()) {
      if (fillsize_ != NULL) fillsize_->::TSP::Size::Clear();
    }
    if (has_originalimagedata()) {
      if (originalimagedata_ != NULL) originalimagedata_->::TSP::DataReference::Clear();
    }
    interpretsuntaggedimagedataasgeneric_ = false;
    if (has_database_imagedata()) {
      if (database_imagedata_ != NULL) database_imagedata_->::TSP::Reference::Clear();
    }
    if (has_database_originalimagedata()) {
      if (database_originalimagedata_ != NULL) database_originalimagedata_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageFillArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Reference database_imagedata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_database_imagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_technique;
        break;
      }

      // optional .TSD.ImageFillArchive.ImageFillTechnique technique = 2 [default = NaturalSize];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_technique:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSD::ImageFillArchive_ImageFillTechnique_IsValid(value)) {
            set_technique(static_cast< ::TSD::ImageFillArchive_ImageFillTechnique >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tint;
        break;
      }

      // optional .TSP.Color tint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fillsize;
        break;
      }

      // optional .TSP.Size fillsize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fillsize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fillsize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_database_originalimagedata;
        break;
      }

      // optional .TSP.Reference database_originalimagedata = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_database_originalimagedata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_database_originalimagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_imagedata;
        break;
      }

      // optional .TSP.DataReference imagedata = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imagedata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_originalimagedata;
        break;
      }

      // optional .TSP.DataReference originalimagedata = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_originalimagedata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_originalimagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_interpretsUntaggedImageDataAsGeneric;
        break;
      }

      // optional bool interpretsUntaggedImageDataAsGeneric = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interpretsUntaggedImageDataAsGeneric:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &interpretsuntaggedimagedataasgeneric_)));
          set_has_interpretsuntaggedimagedataasgeneric();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImageFillArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Reference database_imagedata = 1;
  if (has_database_imagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->database_imagedata(), output);
  }

  // optional .TSD.ImageFillArchive.ImageFillTechnique technique = 2 [default = NaturalSize];
  if (has_technique()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->technique(), output);
  }

  // optional .TSP.Color tint = 3;
  if (has_tint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tint(), output);
  }

  // optional .TSP.Size fillsize = 4;
  if (has_fillsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fillsize(), output);
  }

  // optional .TSP.Reference database_originalimagedata = 5;
  if (has_database_originalimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->database_originalimagedata(), output);
  }

  // optional .TSP.DataReference imagedata = 6;
  if (has_imagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->imagedata(), output);
  }

  // optional .TSP.DataReference originalimagedata = 7;
  if (has_originalimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->originalimagedata(), output);
  }

  // optional bool interpretsUntaggedImageDataAsGeneric = 8;
  if (has_interpretsuntaggedimagedataasgeneric()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->interpretsuntaggedimagedataasgeneric(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImageFillArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Reference database_imagedata = 1;
  if (has_database_imagedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->database_imagedata(), target);
  }

  // optional .TSD.ImageFillArchive.ImageFillTechnique technique = 2 [default = NaturalSize];
  if (has_technique()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->technique(), target);
  }

  // optional .TSP.Color tint = 3;
  if (has_tint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tint(), target);
  }

  // optional .TSP.Size fillsize = 4;
  if (has_fillsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fillsize(), target);
  }

  // optional .TSP.Reference database_originalimagedata = 5;
  if (has_database_originalimagedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->database_originalimagedata(), target);
  }

  // optional .TSP.DataReference imagedata = 6;
  if (has_imagedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->imagedata(), target);
  }

  // optional .TSP.DataReference originalimagedata = 7;
  if (has_originalimagedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->originalimagedata(), target);
  }

  // optional bool interpretsUntaggedImageDataAsGeneric = 8;
  if (has_interpretsuntaggedimagedataasgeneric()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->interpretsuntaggedimagedataasgeneric(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImageFillArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.DataReference imagedata = 6;
    if (has_imagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->imagedata());
    }

    // optional .TSD.ImageFillArchive.ImageFillTechnique technique = 2 [default = NaturalSize];
    if (has_technique()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->technique());
    }

    // optional .TSP.Color tint = 3;
    if (has_tint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tint());
    }

    // optional .TSP.Size fillsize = 4;
    if (has_fillsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fillsize());
    }

    // optional .TSP.DataReference originalimagedata = 7;
    if (has_originalimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->originalimagedata());
    }

    // optional bool interpretsUntaggedImageDataAsGeneric = 8;
    if (has_interpretsuntaggedimagedataasgeneric()) {
      total_size += 1 + 1;
    }

    // optional .TSP.Reference database_imagedata = 1;
    if (has_database_imagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->database_imagedata());
    }

    // optional .TSP.Reference database_originalimagedata = 5;
    if (has_database_originalimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->database_originalimagedata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageFillArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageFillArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageFillArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageFillArchive::MergeFrom(const ImageFillArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_imagedata()) {
      mutable_imagedata()->::TSP::DataReference::MergeFrom(from.imagedata());
    }
    if (from.has_technique()) {
      set_technique(from.technique());
    }
    if (from.has_tint()) {
      mutable_tint()->::TSP::Color::MergeFrom(from.tint());
    }
    if (from.has_fillsize()) {
      mutable_fillsize()->::TSP::Size::MergeFrom(from.fillsize());
    }
    if (from.has_originalimagedata()) {
      mutable_originalimagedata()->::TSP::DataReference::MergeFrom(from.originalimagedata());
    }
    if (from.has_interpretsuntaggedimagedataasgeneric()) {
      set_interpretsuntaggedimagedataasgeneric(from.interpretsuntaggedimagedataasgeneric());
    }
    if (from.has_database_imagedata()) {
      mutable_database_imagedata()->::TSP::Reference::MergeFrom(from.database_imagedata());
    }
    if (from.has_database_originalimagedata()) {
      mutable_database_originalimagedata()->::TSP::Reference::MergeFrom(from.database_originalimagedata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageFillArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageFillArchive::CopyFrom(const ImageFillArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageFillArchive::IsInitialized() const {

  if (has_imagedata()) {
    if (!this->imagedata().IsInitialized()) return false;
  }
  if (has_tint()) {
    if (!this->tint().IsInitialized()) return false;
  }
  if (has_fillsize()) {
    if (!this->fillsize().IsInitialized()) return false;
  }
  if (has_originalimagedata()) {
    if (!this->originalimagedata().IsInitialized()) return false;
  }
  if (has_database_imagedata()) {
    if (!this->database_imagedata().IsInitialized()) return false;
  }
  if (has_database_originalimagedata()) {
    if (!this->database_originalimagedata().IsInitialized()) return false;
  }
  return true;
}

void ImageFillArchive::Swap(ImageFillArchive* other) {
  if (other != this) {
    std::swap(imagedata_, other->imagedata_);
    std::swap(technique_, other->technique_);
    std::swap(tint_, other->tint_);
    std::swap(fillsize_, other->fillsize_);
    std::swap(originalimagedata_, other->originalimagedata_);
    std::swap(interpretsuntaggedimagedataasgeneric_, other->interpretsuntaggedimagedataasgeneric_);
    std::swap(database_imagedata_, other->database_imagedata_);
    std::swap(database_originalimagedata_, other->database_originalimagedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageFillArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageFillArchive_descriptor_;
  metadata.reflection = ImageFillArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FillArchive::kColorFieldNumber;
const int FillArchive::kGradientFieldNumber;
const int FillArchive::kImageFieldNumber;
#endif  // !_MSC_VER

FillArchive::FillArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FillArchive::InitAsDefaultInstance() {
  color_ = const_cast< ::TSP::Color*>(&::TSP::Color::default_instance());
  gradient_ = const_cast< ::TSD::GradientArchive*>(&::TSD::GradientArchive::default_instance());
  image_ = const_cast< ::TSD::ImageFillArchive*>(&::TSD::ImageFillArchive::default_instance());
}

FillArchive::FillArchive(const FillArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FillArchive::SharedCtor() {
  _cached_size_ = 0;
  color_ = NULL;
  gradient_ = NULL;
  image_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FillArchive::~FillArchive() {
  SharedDtor();
}

void FillArchive::SharedDtor() {
  if (this != default_instance_) {
    delete color_;
    delete gradient_;
    delete image_;
  }
}

void FillArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FillArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FillArchive_descriptor_;
}

const FillArchive& FillArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

FillArchive* FillArchive::default_instance_ = NULL;

FillArchive* FillArchive::New() const {
  return new FillArchive;
}

void FillArchive::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_color()) {
      if (color_ != NULL) color_->::TSP::Color::Clear();
    }
    if (has_gradient()) {
      if (gradient_ != NULL) gradient_->::TSD::GradientArchive::Clear();
    }
    if (has_image()) {
      if (image_ != NULL) image_->::TSD::ImageFillArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FillArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Color color = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gradient;
        break;
      }

      // optional .TSD.GradientArchive gradient = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gradient:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gradient()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_image;
        break;
      }

      // optional .TSD.ImageFillArchive image = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FillArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Color color = 1;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->color(), output);
  }

  // optional .TSD.GradientArchive gradient = 2;
  if (has_gradient()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gradient(), output);
  }

  // optional .TSD.ImageFillArchive image = 3;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->image(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FillArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Color color = 1;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->color(), target);
  }

  // optional .TSD.GradientArchive gradient = 2;
  if (has_gradient()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gradient(), target);
  }

  // optional .TSD.ImageFillArchive image = 3;
  if (has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->image(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FillArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Color color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->color());
    }

    // optional .TSD.GradientArchive gradient = 2;
    if (has_gradient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gradient());
    }

    // optional .TSD.ImageFillArchive image = 3;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FillArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FillArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FillArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FillArchive::MergeFrom(const FillArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color()) {
      mutable_color()->::TSP::Color::MergeFrom(from.color());
    }
    if (from.has_gradient()) {
      mutable_gradient()->::TSD::GradientArchive::MergeFrom(from.gradient());
    }
    if (from.has_image()) {
      mutable_image()->::TSD::ImageFillArchive::MergeFrom(from.image());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FillArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FillArchive::CopyFrom(const FillArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FillArchive::IsInitialized() const {

  if (has_color()) {
    if (!this->color().IsInitialized()) return false;
  }
  if (has_gradient()) {
    if (!this->gradient().IsInitialized()) return false;
  }
  if (has_image()) {
    if (!this->image().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void FillArchive::Swap(FillArchive* other) {
  if (other != this) {
    std::swap(color_, other->color_);
    std::swap(gradient_, other->gradient_);
    std::swap(image_, other->image_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata FillArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FillArchive_descriptor_;
  metadata.reflection = FillArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* StrokePatternArchive_StrokePatternType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrokePatternArchive_StrokePatternType_descriptor_;
}
bool StrokePatternArchive_StrokePatternType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StrokePatternArchive_StrokePatternType StrokePatternArchive::TSDPattern;
const StrokePatternArchive_StrokePatternType StrokePatternArchive::TSDSolidPattern;
const StrokePatternArchive_StrokePatternType StrokePatternArchive::TSDEmptyPattern;
const StrokePatternArchive_StrokePatternType StrokePatternArchive::StrokePatternType_MIN;
const StrokePatternArchive_StrokePatternType StrokePatternArchive::StrokePatternType_MAX;
const int StrokePatternArchive::StrokePatternType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int StrokePatternArchive::kTypeFieldNumber;
const int StrokePatternArchive::kPhaseFieldNumber;
const int StrokePatternArchive::kCountFieldNumber;
const int StrokePatternArchive::kPatternFieldNumber;
#endif  // !_MSC_VER

StrokePatternArchive::StrokePatternArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StrokePatternArchive::InitAsDefaultInstance() {
}

StrokePatternArchive::StrokePatternArchive(const StrokePatternArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StrokePatternArchive::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  phase_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StrokePatternArchive::~StrokePatternArchive() {
  SharedDtor();
}

void StrokePatternArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StrokePatternArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StrokePatternArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrokePatternArchive_descriptor_;
}

const StrokePatternArchive& StrokePatternArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

StrokePatternArchive* StrokePatternArchive::default_instance_ = NULL;

StrokePatternArchive* StrokePatternArchive::New() const {
  return new StrokePatternArchive;
}

void StrokePatternArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    phase_ = 0;
    count_ = 0u;
  }
  pattern_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StrokePatternArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSD.StrokePatternArchive.StrokePatternType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSD::StrokePatternArchive_StrokePatternType_IsValid(value)) {
            set_type(static_cast< ::TSD::StrokePatternArchive_StrokePatternType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_phase;
        break;
      }

      // optional float phase = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_phase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phase_)));
          set_has_phase();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_pattern;
        break;
      }

      // repeated float pattern = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pattern:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_pattern())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_pattern())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_pattern;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StrokePatternArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSD.StrokePatternArchive.StrokePatternType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional float phase = 2;
  if (has_phase()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->phase(), output);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // repeated float pattern = 4;
  for (int i = 0; i < this->pattern_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->pattern(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StrokePatternArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSD.StrokePatternArchive.StrokePatternType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional float phase = 2;
  if (has_phase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->phase(), target);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // repeated float pattern = 4;
  for (int i = 0; i < this->pattern_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->pattern(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StrokePatternArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSD.StrokePatternArchive.StrokePatternType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional float phase = 2;
    if (has_phase()) {
      total_size += 1 + 4;
    }

    // optional uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  // repeated float pattern = 4;
  {
    int data_size = 0;
    data_size = 4 * this->pattern_size();
    total_size += 1 * this->pattern_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StrokePatternArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StrokePatternArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StrokePatternArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StrokePatternArchive::MergeFrom(const StrokePatternArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  pattern_.MergeFrom(from.pattern_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_phase()) {
      set_phase(from.phase());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StrokePatternArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrokePatternArchive::CopyFrom(const StrokePatternArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrokePatternArchive::IsInitialized() const {

  return true;
}

void StrokePatternArchive::Swap(StrokePatternArchive* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(phase_, other->phase_);
    std::swap(count_, other->count_);
    pattern_.Swap(&other->pattern_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StrokePatternArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StrokePatternArchive_descriptor_;
  metadata.reflection = StrokePatternArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* StrokeArchive_LineCap_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrokeArchive_LineCap_descriptor_;
}
bool StrokeArchive_LineCap_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StrokeArchive_LineCap StrokeArchive::ButtCap;
const StrokeArchive_LineCap StrokeArchive::RoundCap;
const StrokeArchive_LineCap StrokeArchive::SquareCap;
const StrokeArchive_LineCap StrokeArchive::LineCap_MIN;
const StrokeArchive_LineCap StrokeArchive::LineCap_MAX;
const int StrokeArchive::LineCap_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int StrokeArchive::kColorFieldNumber;
const int StrokeArchive::kWidthFieldNumber;
const int StrokeArchive::kCapFieldNumber;
const int StrokeArchive::kJoinFieldNumber;
const int StrokeArchive::kMiterLimitFieldNumber;
const int StrokeArchive::kPatternFieldNumber;
const int StrokeArchive::kSmartStrokeFieldNumber;
const int StrokeArchive::kFrameFieldNumber;
const int StrokeArchive::kPatternedStrokeFieldNumber;
#endif  // !_MSC_VER

StrokeArchive::StrokeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StrokeArchive::InitAsDefaultInstance() {
  color_ = const_cast< ::TSP::Color*>(&::TSP::Color::default_instance());
  pattern_ = const_cast< ::TSD::StrokePatternArchive*>(&::TSD::StrokePatternArchive::default_instance());
  smartstroke_ = const_cast< ::TSD::SmartStrokeArchive*>(&::TSD::SmartStrokeArchive::default_instance());
  frame_ = const_cast< ::TSD::FrameArchive*>(&::TSD::FrameArchive::default_instance());
  patterned_stroke_ = const_cast< ::TSD::PatternedStrokeArchive*>(&::TSD::PatternedStrokeArchive::default_instance());
}

StrokeArchive::StrokeArchive(const StrokeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StrokeArchive::SharedCtor() {
  _cached_size_ = 0;
  color_ = NULL;
  width_ = 0;
  cap_ = 0;
  join_ = 0;
  miterlimit_ = 0;
  pattern_ = NULL;
  smartstroke_ = NULL;
  frame_ = NULL;
  patterned_stroke_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StrokeArchive::~StrokeArchive() {
  SharedDtor();
}

void StrokeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete color_;
    delete pattern_;
    delete smartstroke_;
    delete frame_;
    delete patterned_stroke_;
  }
}

void StrokeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StrokeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrokeArchive_descriptor_;
}

const StrokeArchive& StrokeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

StrokeArchive* StrokeArchive::default_instance_ = NULL;

StrokeArchive* StrokeArchive::New() const {
  return new StrokeArchive;
}

void StrokeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_color()) {
      if (color_ != NULL) color_->::TSP::Color::Clear();
    }
    width_ = 0;
    cap_ = 0;
    join_ = 0;
    miterlimit_ = 0;
    if (has_pattern()) {
      if (pattern_ != NULL) pattern_->::TSD::StrokePatternArchive::Clear();
    }
    if (has_smartstroke()) {
      if (smartstroke_ != NULL) smartstroke_->::TSD::SmartStrokeArchive::Clear();
    }
    if (has_frame()) {
      if (frame_ != NULL) frame_->::TSD::FrameArchive::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_patterned_stroke()) {
      if (patterned_stroke_ != NULL) patterned_stroke_->::TSD::PatternedStrokeArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StrokeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Color color = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_width;
        break;
      }

      // optional float width = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cap;
        break;
      }

      // optional .TSD.StrokeArchive.LineCap cap = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cap:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSD::StrokeArchive_LineCap_IsValid(value)) {
            set_cap(static_cast< ::TSD::StrokeArchive_LineCap >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_join;
        break;
      }

      // optional .TSD.LineJoin join = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_join:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSD::LineJoin_IsValid(value)) {
            set_join(static_cast< ::TSD::LineJoin >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_miterLimit;
        break;
      }

      // optional float miterLimit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_miterLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &miterlimit_)));
          set_has_miterlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pattern;
        break;
      }

      // optional .TSD.StrokePatternArchive pattern = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pattern()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_smartStroke;
        break;
      }

      // optional .TSD.SmartStrokeArchive smartStroke = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_smartStroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smartstroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_frame;
        break;
      }

      // optional .TSD.FrameArchive frame = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frame()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_patterned_stroke;
        break;
      }

      // optional .TSD.PatternedStrokeArchive patterned_stroke = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patterned_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_patterned_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StrokeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Color color = 1;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->color(), output);
  }

  // optional float width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->width(), output);
  }

  // optional .TSD.StrokeArchive.LineCap cap = 3;
  if (has_cap()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->cap(), output);
  }

  // optional .TSD.LineJoin join = 4;
  if (has_join()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->join(), output);
  }

  // optional float miterLimit = 5;
  if (has_miterlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->miterlimit(), output);
  }

  // optional .TSD.StrokePatternArchive pattern = 6;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pattern(), output);
  }

  // optional .TSD.SmartStrokeArchive smartStroke = 7;
  if (has_smartstroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->smartstroke(), output);
  }

  // optional .TSD.FrameArchive frame = 8;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->frame(), output);
  }

  // optional .TSD.PatternedStrokeArchive patterned_stroke = 9;
  if (has_patterned_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->patterned_stroke(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StrokeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Color color = 1;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->color(), target);
  }

  // optional float width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->width(), target);
  }

  // optional .TSD.StrokeArchive.LineCap cap = 3;
  if (has_cap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->cap(), target);
  }

  // optional .TSD.LineJoin join = 4;
  if (has_join()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->join(), target);
  }

  // optional float miterLimit = 5;
  if (has_miterlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->miterlimit(), target);
  }

  // optional .TSD.StrokePatternArchive pattern = 6;
  if (has_pattern()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pattern(), target);
  }

  // optional .TSD.SmartStrokeArchive smartStroke = 7;
  if (has_smartstroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->smartstroke(), target);
  }

  // optional .TSD.FrameArchive frame = 8;
  if (has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->frame(), target);
  }

  // optional .TSD.PatternedStrokeArchive patterned_stroke = 9;
  if (has_patterned_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->patterned_stroke(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StrokeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Color color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->color());
    }

    // optional float width = 2;
    if (has_width()) {
      total_size += 1 + 4;
    }

    // optional .TSD.StrokeArchive.LineCap cap = 3;
    if (has_cap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cap());
    }

    // optional .TSD.LineJoin join = 4;
    if (has_join()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->join());
    }

    // optional float miterLimit = 5;
    if (has_miterlimit()) {
      total_size += 1 + 4;
    }

    // optional .TSD.StrokePatternArchive pattern = 6;
    if (has_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pattern());
    }

    // optional .TSD.SmartStrokeArchive smartStroke = 7;
    if (has_smartstroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->smartstroke());
    }

    // optional .TSD.FrameArchive frame = 8;
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frame());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TSD.PatternedStrokeArchive patterned_stroke = 9;
    if (has_patterned_stroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->patterned_stroke());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StrokeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StrokeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StrokeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StrokeArchive::MergeFrom(const StrokeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color()) {
      mutable_color()->::TSP::Color::MergeFrom(from.color());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_cap()) {
      set_cap(from.cap());
    }
    if (from.has_join()) {
      set_join(from.join());
    }
    if (from.has_miterlimit()) {
      set_miterlimit(from.miterlimit());
    }
    if (from.has_pattern()) {
      mutable_pattern()->::TSD::StrokePatternArchive::MergeFrom(from.pattern());
    }
    if (from.has_smartstroke()) {
      mutable_smartstroke()->::TSD::SmartStrokeArchive::MergeFrom(from.smartstroke());
    }
    if (from.has_frame()) {
      mutable_frame()->::TSD::FrameArchive::MergeFrom(from.frame());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_patterned_stroke()) {
      mutable_patterned_stroke()->::TSD::PatternedStrokeArchive::MergeFrom(from.patterned_stroke());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StrokeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrokeArchive::CopyFrom(const StrokeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrokeArchive::IsInitialized() const {

  if (has_color()) {
    if (!this->color().IsInitialized()) return false;
  }
  if (has_smartstroke()) {
    if (!this->smartstroke().IsInitialized()) return false;
  }
  return true;
}

void StrokeArchive::Swap(StrokeArchive* other) {
  if (other != this) {
    std::swap(color_, other->color_);
    std::swap(width_, other->width_);
    std::swap(cap_, other->cap_);
    std::swap(join_, other->join_);
    std::swap(miterlimit_, other->miterlimit_);
    std::swap(pattern_, other->pattern_);
    std::swap(smartstroke_, other->smartstroke_);
    std::swap(frame_, other->frame_);
    std::swap(patterned_stroke_, other->patterned_stroke_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StrokeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StrokeArchive_descriptor_;
  metadata.reflection = StrokeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SmartStrokeArchive::kStrokeNameFieldNumber;
const int SmartStrokeArchive::kRandomSeedFieldNumber;
const int SmartStrokeArchive::kParameterValuesFieldNumber;
#endif  // !_MSC_VER

SmartStrokeArchive::SmartStrokeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SmartStrokeArchive::InitAsDefaultInstance() {
  parametervalues_ = const_cast< ::TSP::ReferenceDictionary*>(&::TSP::ReferenceDictionary::default_instance());
}

SmartStrokeArchive::SmartStrokeArchive(const SmartStrokeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SmartStrokeArchive::SharedCtor() {
  _cached_size_ = 0;
  strokename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  randomseed_ = 0;
  parametervalues_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmartStrokeArchive::~SmartStrokeArchive() {
  SharedDtor();
}

void SmartStrokeArchive::SharedDtor() {
  if (strokename_ != &::google::protobuf::internal::kEmptyString) {
    delete strokename_;
  }
  if (this != default_instance_) {
    delete parametervalues_;
  }
}

void SmartStrokeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmartStrokeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmartStrokeArchive_descriptor_;
}

const SmartStrokeArchive& SmartStrokeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

SmartStrokeArchive* SmartStrokeArchive::default_instance_ = NULL;

SmartStrokeArchive* SmartStrokeArchive::New() const {
  return new SmartStrokeArchive;
}

void SmartStrokeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strokename()) {
      if (strokename_ != &::google::protobuf::internal::kEmptyString) {
        strokename_->clear();
      }
    }
    randomseed_ = 0;
    if (has_parametervalues()) {
      if (parametervalues_ != NULL) parametervalues_->::TSP::ReferenceDictionary::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SmartStrokeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string strokeName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strokename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strokename().data(), this->strokename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_randomSeed;
        break;
      }

      // optional int32 randomSeed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_randomSeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &randomseed_)));
          set_has_randomseed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_parameterValues;
        break;
      }

      // optional .TSP.ReferenceDictionary parameterValues = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parameterValues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parametervalues()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SmartStrokeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string strokeName = 2;
  if (has_strokename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strokename().data(), this->strokename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strokename(), output);
  }

  // optional int32 randomSeed = 3;
  if (has_randomseed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->randomseed(), output);
  }

  // optional .TSP.ReferenceDictionary parameterValues = 4;
  if (has_parametervalues()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->parametervalues(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SmartStrokeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string strokeName = 2;
  if (has_strokename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strokename().data(), this->strokename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strokename(), target);
  }

  // optional int32 randomSeed = 3;
  if (has_randomseed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->randomseed(), target);
  }

  // optional .TSP.ReferenceDictionary parameterValues = 4;
  if (has_parametervalues()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->parametervalues(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SmartStrokeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string strokeName = 2;
    if (has_strokename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strokename());
    }

    // optional int32 randomSeed = 3;
    if (has_randomseed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->randomseed());
    }

    // optional .TSP.ReferenceDictionary parameterValues = 4;
    if (has_parametervalues()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parametervalues());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmartStrokeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SmartStrokeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SmartStrokeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SmartStrokeArchive::MergeFrom(const SmartStrokeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strokename()) {
      set_strokename(from.strokename());
    }
    if (from.has_randomseed()) {
      set_randomseed(from.randomseed());
    }
    if (from.has_parametervalues()) {
      mutable_parametervalues()->::TSP::ReferenceDictionary::MergeFrom(from.parametervalues());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SmartStrokeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmartStrokeArchive::CopyFrom(const SmartStrokeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmartStrokeArchive::IsInitialized() const {

  if (has_parametervalues()) {
    if (!this->parametervalues().IsInitialized()) return false;
  }
  return true;
}

void SmartStrokeArchive::Swap(SmartStrokeArchive* other) {
  if (other != this) {
    std::swap(strokename_, other->strokename_);
    std::swap(randomseed_, other->randomseed_);
    std::swap(parametervalues_, other->parametervalues_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SmartStrokeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmartStrokeArchive_descriptor_;
  metadata.reflection = SmartStrokeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrameArchive::kFrameNameFieldNumber;
const int FrameArchive::kAssetScaleFieldNumber;
#endif  // !_MSC_VER

FrameArchive::FrameArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FrameArchive::InitAsDefaultInstance() {
}

FrameArchive::FrameArchive(const FrameArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FrameArchive::SharedCtor() {
  _cached_size_ = 0;
  framename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  assetscale_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameArchive::~FrameArchive() {
  SharedDtor();
}

void FrameArchive::SharedDtor() {
  if (framename_ != &::google::protobuf::internal::kEmptyString) {
    delete framename_;
  }
  if (this != default_instance_) {
  }
}

void FrameArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameArchive_descriptor_;
}

const FrameArchive& FrameArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

FrameArchive* FrameArchive::default_instance_ = NULL;

FrameArchive* FrameArchive::New() const {
  return new FrameArchive;
}

void FrameArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_framename()) {
      if (framename_ != &::google::protobuf::internal::kEmptyString) {
        framename_->clear();
      }
    }
    assetscale_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string frameName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_framename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->framename().data(), this->framename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_assetScale;
        break;
      }

      // optional float assetScale = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_assetScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &assetscale_)));
          set_has_assetscale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FrameArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string frameName = 2;
  if (has_framename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->framename().data(), this->framename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->framename(), output);
  }

  // optional float assetScale = 3;
  if (has_assetscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->assetscale(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FrameArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string frameName = 2;
  if (has_framename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->framename().data(), this->framename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->framename(), target);
  }

  // optional float assetScale = 3;
  if (has_assetscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->assetscale(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FrameArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string frameName = 2;
    if (has_framename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->framename());
    }

    // optional float assetScale = 3;
    if (has_assetscale()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameArchive::MergeFrom(const FrameArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framename()) {
      set_framename(from.framename());
    }
    if (from.has_assetscale()) {
      set_assetscale(from.assetscale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameArchive::CopyFrom(const FrameArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameArchive::IsInitialized() const {

  return true;
}

void FrameArchive::Swap(FrameArchive* other) {
  if (other != this) {
    std::swap(framename_, other->framename_);
    std::swap(assetscale_, other->assetscale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameArchive_descriptor_;
  metadata.reflection = FrameArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PatternedStrokeArchive::kPatternNameFieldNumber;
#endif  // !_MSC_VER

PatternedStrokeArchive::PatternedStrokeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PatternedStrokeArchive::InitAsDefaultInstance() {
}

PatternedStrokeArchive::PatternedStrokeArchive(const PatternedStrokeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PatternedStrokeArchive::SharedCtor() {
  _cached_size_ = 0;
  pattern_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PatternedStrokeArchive::~PatternedStrokeArchive() {
  SharedDtor();
}

void PatternedStrokeArchive::SharedDtor() {
  if (pattern_name_ != &::google::protobuf::internal::kEmptyString) {
    delete pattern_name_;
  }
  if (this != default_instance_) {
  }
}

void PatternedStrokeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PatternedStrokeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PatternedStrokeArchive_descriptor_;
}

const PatternedStrokeArchive& PatternedStrokeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

PatternedStrokeArchive* PatternedStrokeArchive::default_instance_ = NULL;

PatternedStrokeArchive* PatternedStrokeArchive::New() const {
  return new PatternedStrokeArchive;
}

void PatternedStrokeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pattern_name()) {
      if (pattern_name_ != &::google::protobuf::internal::kEmptyString) {
        pattern_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PatternedStrokeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pattern_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pattern_name().data(), this->pattern_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PatternedStrokeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string pattern_name = 2;
  if (has_pattern_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pattern_name().data(), this->pattern_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pattern_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PatternedStrokeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string pattern_name = 2;
  if (has_pattern_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pattern_name().data(), this->pattern_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pattern_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PatternedStrokeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string pattern_name = 2;
    if (has_pattern_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pattern_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PatternedStrokeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PatternedStrokeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PatternedStrokeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PatternedStrokeArchive::MergeFrom(const PatternedStrokeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pattern_name()) {
      set_pattern_name(from.pattern_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PatternedStrokeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatternedStrokeArchive::CopyFrom(const PatternedStrokeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatternedStrokeArchive::IsInitialized() const {

  return true;
}

void PatternedStrokeArchive::Swap(PatternedStrokeArchive* other) {
  if (other != this) {
    std::swap(pattern_name_, other->pattern_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PatternedStrokeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PatternedStrokeArchive_descriptor_;
  metadata.reflection = PatternedStrokeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LineEndArchive::kPathFieldNumber;
const int LineEndArchive::kLineJoinFieldNumber;
const int LineEndArchive::kEndPointFieldNumber;
const int LineEndArchive::kIsFilledFieldNumber;
const int LineEndArchive::kIdentifierFieldNumber;
#endif  // !_MSC_VER

LineEndArchive::LineEndArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LineEndArchive::InitAsDefaultInstance() {
  path_ = const_cast< ::TSP::Path*>(&::TSP::Path::default_instance());
  end_point_ = const_cast< ::TSP::Point*>(&::TSP::Point::default_instance());
}

LineEndArchive::LineEndArchive(const LineEndArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LineEndArchive::SharedCtor() {
  _cached_size_ = 0;
  path_ = NULL;
  line_join_ = 0;
  end_point_ = NULL;
  is_filled_ = false;
  identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineEndArchive::~LineEndArchive() {
  SharedDtor();
}

void LineEndArchive::SharedDtor() {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete identifier_;
  }
  if (this != default_instance_) {
    delete path_;
    delete end_point_;
  }
}

void LineEndArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineEndArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineEndArchive_descriptor_;
}

const LineEndArchive& LineEndArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

LineEndArchive* LineEndArchive::default_instance_ = NULL;

LineEndArchive* LineEndArchive::New() const {
  return new LineEndArchive;
}

void LineEndArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != NULL) path_->::TSP::Path::Clear();
    }
    line_join_ = 0;
    if (has_end_point()) {
      if (end_point_ != NULL) end_point_->::TSP::Point::Clear();
    }
    is_filled_ = false;
    if (has_identifier()) {
      if (identifier_ != &::google::protobuf::internal::kEmptyString) {
        identifier_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LineEndArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Path path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_line_join;
        break;
      }

      // optional .TSD.LineJoin line_join = 2 [default = MiterJoin];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_line_join:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSD::LineJoin_IsValid(value)) {
            set_line_join(static_cast< ::TSD::LineJoin >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_end_point;
        break;
      }

      // optional .TSP.Point end_point = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_filled;
        break;
      }

      // optional bool is_filled = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_filled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_filled_)));
          set_has_is_filled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_identifier;
        break;
      }

      // optional string identifier = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->identifier().data(), this->identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LineEndArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Path path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->path(), output);
  }

  // optional .TSD.LineJoin line_join = 2 [default = MiterJoin];
  if (has_line_join()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->line_join(), output);
  }

  // optional .TSP.Point end_point = 3;
  if (has_end_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->end_point(), output);
  }

  // optional bool is_filled = 4;
  if (has_is_filled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_filled(), output);
  }

  // optional string identifier = 5;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->identifier(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LineEndArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Path path = 1;
  if (has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->path(), target);
  }

  // optional .TSD.LineJoin line_join = 2 [default = MiterJoin];
  if (has_line_join()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->line_join(), target);
  }

  // optional .TSP.Point end_point = 3;
  if (has_end_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->end_point(), target);
  }

  // optional bool is_filled = 4;
  if (has_is_filled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_filled(), target);
  }

  // optional string identifier = 5;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->identifier(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LineEndArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Path path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->path());
    }

    // optional .TSD.LineJoin line_join = 2 [default = MiterJoin];
    if (has_line_join()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->line_join());
    }

    // optional .TSP.Point end_point = 3;
    if (has_end_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_point());
    }

    // optional bool is_filled = 4;
    if (has_is_filled()) {
      total_size += 1 + 1;
    }

    // optional string identifier = 5;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identifier());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineEndArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LineEndArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LineEndArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LineEndArchive::MergeFrom(const LineEndArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      mutable_path()->::TSP::Path::MergeFrom(from.path());
    }
    if (from.has_line_join()) {
      set_line_join(from.line_join());
    }
    if (from.has_end_point()) {
      mutable_end_point()->::TSP::Point::MergeFrom(from.end_point());
    }
    if (from.has_is_filled()) {
      set_is_filled(from.is_filled());
    }
    if (from.has_identifier()) {
      set_identifier(from.identifier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LineEndArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineEndArchive::CopyFrom(const LineEndArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineEndArchive::IsInitialized() const {

  if (has_path()) {
    if (!this->path().IsInitialized()) return false;
  }
  if (has_end_point()) {
    if (!this->end_point().IsInitialized()) return false;
  }
  return true;
}

void LineEndArchive::Swap(LineEndArchive* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(line_join_, other->line_join_);
    std::swap(end_point_, other->end_point_);
    std::swap(is_filled_, other->is_filled_);
    std::swap(identifier_, other->identifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LineEndArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineEndArchive_descriptor_;
  metadata.reflection = LineEndArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ShadowArchive_ShadowType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShadowArchive_ShadowType_descriptor_;
}
bool ShadowArchive_ShadowType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ShadowArchive_ShadowType ShadowArchive::TSDDropShadow;
const ShadowArchive_ShadowType ShadowArchive::TSDContactShadow;
const ShadowArchive_ShadowType ShadowArchive::TSDCurvedShadow;
const ShadowArchive_ShadowType ShadowArchive::ShadowType_MIN;
const ShadowArchive_ShadowType ShadowArchive::ShadowType_MAX;
const int ShadowArchive::ShadowType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ShadowArchive::kColorFieldNumber;
const int ShadowArchive::kAngleFieldNumber;
const int ShadowArchive::kOffsetFieldNumber;
const int ShadowArchive::kRadiusFieldNumber;
const int ShadowArchive::kOpacityFieldNumber;
const int ShadowArchive::kIsEnabledFieldNumber;
const int ShadowArchive::kTypeFieldNumber;
const int ShadowArchive::kDropShadowFieldNumber;
const int ShadowArchive::kContactShadowFieldNumber;
const int ShadowArchive::kCurvedShadowFieldNumber;
#endif  // !_MSC_VER

ShadowArchive::ShadowArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShadowArchive::InitAsDefaultInstance() {
  color_ = const_cast< ::TSP::Color*>(&::TSP::Color::default_instance());
  dropshadow_ = const_cast< ::TSD::DropShadowArchive*>(&::TSD::DropShadowArchive::default_instance());
  contactshadow_ = const_cast< ::TSD::ContactShadowArchive*>(&::TSD::ContactShadowArchive::default_instance());
  curvedshadow_ = const_cast< ::TSD::CurvedShadowArchive*>(&::TSD::CurvedShadowArchive::default_instance());
}

ShadowArchive::ShadowArchive(const ShadowArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShadowArchive::SharedCtor() {
  _cached_size_ = 0;
  color_ = NULL;
  angle_ = 315;
  offset_ = 5;
  radius_ = 1;
  opacity_ = 1;
  is_enabled_ = true;
  type_ = 0;
  dropshadow_ = NULL;
  contactshadow_ = NULL;
  curvedshadow_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShadowArchive::~ShadowArchive() {
  SharedDtor();
}

void ShadowArchive::SharedDtor() {
  if (this != default_instance_) {
    delete color_;
    delete dropshadow_;
    delete contactshadow_;
    delete curvedshadow_;
  }
}

void ShadowArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShadowArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShadowArchive_descriptor_;
}

const ShadowArchive& ShadowArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

ShadowArchive* ShadowArchive::default_instance_ = NULL;

ShadowArchive* ShadowArchive::New() const {
  return new ShadowArchive;
}

void ShadowArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_color()) {
      if (color_ != NULL) color_->::TSP::Color::Clear();
    }
    angle_ = 315;
    offset_ = 5;
    radius_ = 1;
    opacity_ = 1;
    is_enabled_ = true;
    type_ = 0;
    if (has_dropshadow()) {
      if (dropshadow_ != NULL) dropshadow_->::TSD::DropShadowArchive::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_contactshadow()) {
      if (contactshadow_ != NULL) contactshadow_->::TSD::ContactShadowArchive::Clear();
    }
    if (has_curvedshadow()) {
      if (curvedshadow_ != NULL) curvedshadow_->::TSD::CurvedShadowArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShadowArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSP.Color color = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_angle;
        break;
      }

      // optional float angle = 2 [default = 315];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_offset;
        break;
      }

      // optional float offset = 3 [default = 5];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_radius;
        break;
      }

      // optional int32 radius = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_opacity;
        break;
      }

      // optional float opacity = 5 [default = 1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &opacity_)));
          set_has_opacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_enabled;
        break;
      }

      // optional bool is_enabled = 6 [default = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_enabled_)));
          set_has_is_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // optional .TSD.ShadowArchive.ShadowType type = 7 [default = TSDDropShadow];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSD::ShadowArchive_ShadowType_IsValid(value)) {
            set_type(static_cast< ::TSD::ShadowArchive_ShadowType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_dropShadow;
        break;
      }

      // optional .TSD.DropShadowArchive dropShadow = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dropShadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dropshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_contactShadow;
        break;
      }

      // optional .TSD.ContactShadowArchive contactShadow = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contactShadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contactshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_curvedShadow;
        break;
      }

      // optional .TSD.CurvedShadowArchive curvedShadow = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_curvedShadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curvedshadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShadowArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSP.Color color = 1;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->color(), output);
  }

  // optional float angle = 2 [default = 315];
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->angle(), output);
  }

  // optional float offset = 3 [default = 5];
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->offset(), output);
  }

  // optional int32 radius = 4 [default = 1];
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->radius(), output);
  }

  // optional float opacity = 5 [default = 1];
  if (has_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->opacity(), output);
  }

  // optional bool is_enabled = 6 [default = true];
  if (has_is_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_enabled(), output);
  }

  // optional .TSD.ShadowArchive.ShadowType type = 7 [default = TSDDropShadow];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->type(), output);
  }

  // optional .TSD.DropShadowArchive dropShadow = 8;
  if (has_dropshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->dropshadow(), output);
  }

  // optional .TSD.ContactShadowArchive contactShadow = 9;
  if (has_contactshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->contactshadow(), output);
  }

  // optional .TSD.CurvedShadowArchive curvedShadow = 10;
  if (has_curvedshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->curvedshadow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShadowArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSP.Color color = 1;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->color(), target);
  }

  // optional float angle = 2 [default = 315];
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->angle(), target);
  }

  // optional float offset = 3 [default = 5];
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->offset(), target);
  }

  // optional int32 radius = 4 [default = 1];
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->radius(), target);
  }

  // optional float opacity = 5 [default = 1];
  if (has_opacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->opacity(), target);
  }

  // optional bool is_enabled = 6 [default = true];
  if (has_is_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_enabled(), target);
  }

  // optional .TSD.ShadowArchive.ShadowType type = 7 [default = TSDDropShadow];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->type(), target);
  }

  // optional .TSD.DropShadowArchive dropShadow = 8;
  if (has_dropshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->dropshadow(), target);
  }

  // optional .TSD.ContactShadowArchive contactShadow = 9;
  if (has_contactshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->contactshadow(), target);
  }

  // optional .TSD.CurvedShadowArchive curvedShadow = 10;
  if (has_curvedshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->curvedshadow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShadowArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSP.Color color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->color());
    }

    // optional float angle = 2 [default = 315];
    if (has_angle()) {
      total_size += 1 + 4;
    }

    // optional float offset = 3 [default = 5];
    if (has_offset()) {
      total_size += 1 + 4;
    }

    // optional int32 radius = 4 [default = 1];
    if (has_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->radius());
    }

    // optional float opacity = 5 [default = 1];
    if (has_opacity()) {
      total_size += 1 + 4;
    }

    // optional bool is_enabled = 6 [default = true];
    if (has_is_enabled()) {
      total_size += 1 + 1;
    }

    // optional .TSD.ShadowArchive.ShadowType type = 7 [default = TSDDropShadow];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .TSD.DropShadowArchive dropShadow = 8;
    if (has_dropshadow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dropshadow());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TSD.ContactShadowArchive contactShadow = 9;
    if (has_contactshadow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contactshadow());
    }

    // optional .TSD.CurvedShadowArchive curvedShadow = 10;
    if (has_curvedshadow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->curvedshadow());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShadowArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShadowArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShadowArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShadowArchive::MergeFrom(const ShadowArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color()) {
      mutable_color()->::TSP::Color::MergeFrom(from.color());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_opacity()) {
      set_opacity(from.opacity());
    }
    if (from.has_is_enabled()) {
      set_is_enabled(from.is_enabled());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_dropshadow()) {
      mutable_dropshadow()->::TSD::DropShadowArchive::MergeFrom(from.dropshadow());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_contactshadow()) {
      mutable_contactshadow()->::TSD::ContactShadowArchive::MergeFrom(from.contactshadow());
    }
    if (from.has_curvedshadow()) {
      mutable_curvedshadow()->::TSD::CurvedShadowArchive::MergeFrom(from.curvedshadow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShadowArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShadowArchive::CopyFrom(const ShadowArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShadowArchive::IsInitialized() const {

  if (has_color()) {
    if (!this->color().IsInitialized()) return false;
  }
  return true;
}

void ShadowArchive::Swap(ShadowArchive* other) {
  if (other != this) {
    std::swap(color_, other->color_);
    std::swap(angle_, other->angle_);
    std::swap(offset_, other->offset_);
    std::swap(radius_, other->radius_);
    std::swap(opacity_, other->opacity_);
    std::swap(is_enabled_, other->is_enabled_);
    std::swap(type_, other->type_);
    std::swap(dropshadow_, other->dropshadow_);
    std::swap(contactshadow_, other->contactshadow_);
    std::swap(curvedshadow_, other->curvedshadow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShadowArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShadowArchive_descriptor_;
  metadata.reflection = ShadowArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DropShadowArchive::DropShadowArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DropShadowArchive::InitAsDefaultInstance() {
}

DropShadowArchive::DropShadowArchive(const DropShadowArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DropShadowArchive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DropShadowArchive::~DropShadowArchive() {
  SharedDtor();
}

void DropShadowArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DropShadowArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropShadowArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DropShadowArchive_descriptor_;
}

const DropShadowArchive& DropShadowArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

DropShadowArchive* DropShadowArchive::default_instance_ = NULL;

DropShadowArchive* DropShadowArchive::New() const {
  return new DropShadowArchive;
}

void DropShadowArchive::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DropShadowArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DropShadowArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DropShadowArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DropShadowArchive::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropShadowArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DropShadowArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DropShadowArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DropShadowArchive::MergeFrom(const DropShadowArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DropShadowArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropShadowArchive::CopyFrom(const DropShadowArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropShadowArchive::IsInitialized() const {

  return true;
}

void DropShadowArchive::Swap(DropShadowArchive* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DropShadowArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DropShadowArchive_descriptor_;
  metadata.reflection = DropShadowArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactShadowArchive::kHeightFieldNumber;
const int ContactShadowArchive::kOffsetFieldNumber;
#endif  // !_MSC_VER

ContactShadowArchive::ContactShadowArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactShadowArchive::InitAsDefaultInstance() {
}

ContactShadowArchive::ContactShadowArchive(const ContactShadowArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactShadowArchive::SharedCtor() {
  _cached_size_ = 0;
  height_ = 0.2f;
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactShadowArchive::~ContactShadowArchive() {
  SharedDtor();
}

void ContactShadowArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContactShadowArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactShadowArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactShadowArchive_descriptor_;
}

const ContactShadowArchive& ContactShadowArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

ContactShadowArchive* ContactShadowArchive::default_instance_ = NULL;

ContactShadowArchive* ContactShadowArchive::New() const {
  return new ContactShadowArchive;
}

void ContactShadowArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    height_ = 0.2f;
    offset_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactShadowArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float height = 2 [default = 0.2];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_offset;
        break;
      }

      // optional float offset = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactShadowArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float height = 2 [default = 0.2];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->height(), output);
  }

  // optional float offset = 4 [default = 0];
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactShadowArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float height = 2 [default = 0.2];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->height(), target);
  }

  // optional float offset = 4 [default = 0];
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactShadowArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float height = 2 [default = 0.2];
    if (has_height()) {
      total_size += 1 + 4;
    }

    // optional float offset = 4 [default = 0];
    if (has_offset()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactShadowArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactShadowArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactShadowArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactShadowArchive::MergeFrom(const ContactShadowArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactShadowArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactShadowArchive::CopyFrom(const ContactShadowArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactShadowArchive::IsInitialized() const {

  return true;
}

void ContactShadowArchive::Swap(ContactShadowArchive* other) {
  if (other != this) {
    std::swap(height_, other->height_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactShadowArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactShadowArchive_descriptor_;
  metadata.reflection = ContactShadowArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CurvedShadowArchive::kCurveFieldNumber;
#endif  // !_MSC_VER

CurvedShadowArchive::CurvedShadowArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CurvedShadowArchive::InitAsDefaultInstance() {
}

CurvedShadowArchive::CurvedShadowArchive(const CurvedShadowArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CurvedShadowArchive::SharedCtor() {
  _cached_size_ = 0;
  curve_ = 0.6f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurvedShadowArchive::~CurvedShadowArchive() {
  SharedDtor();
}

void CurvedShadowArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CurvedShadowArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurvedShadowArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurvedShadowArchive_descriptor_;
}

const CurvedShadowArchive& CurvedShadowArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

CurvedShadowArchive* CurvedShadowArchive::default_instance_ = NULL;

CurvedShadowArchive* CurvedShadowArchive::New() const {
  return new CurvedShadowArchive;
}

void CurvedShadowArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    curve_ = 0.6f;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurvedShadowArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float curve = 1 [default = 0.6];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &curve_)));
          set_has_curve();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CurvedShadowArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float curve = 1 [default = 0.6];
  if (has_curve()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->curve(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CurvedShadowArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float curve = 1 [default = 0.6];
  if (has_curve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->curve(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CurvedShadowArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float curve = 1 [default = 0.6];
    if (has_curve()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurvedShadowArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurvedShadowArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurvedShadowArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurvedShadowArchive::MergeFrom(const CurvedShadowArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curve()) {
      set_curve(from.curve());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurvedShadowArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurvedShadowArchive::CopyFrom(const CurvedShadowArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurvedShadowArchive::IsInitialized() const {

  return true;
}

void CurvedShadowArchive::Swap(CurvedShadowArchive* other) {
  if (other != this) {
    std::swap(curve_, other->curve_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurvedShadowArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurvedShadowArchive_descriptor_;
  metadata.reflection = CurvedShadowArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReflectionArchive::kOpacityFieldNumber;
#endif  // !_MSC_VER

ReflectionArchive::ReflectionArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReflectionArchive::InitAsDefaultInstance() {
}

ReflectionArchive::ReflectionArchive(const ReflectionArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReflectionArchive::SharedCtor() {
  _cached_size_ = 0;
  opacity_ = 0.5f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReflectionArchive::~ReflectionArchive() {
  SharedDtor();
}

void ReflectionArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReflectionArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReflectionArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReflectionArchive_descriptor_;
}

const ReflectionArchive& ReflectionArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

ReflectionArchive* ReflectionArchive::default_instance_ = NULL;

ReflectionArchive* ReflectionArchive::New() const {
  return new ReflectionArchive;
}

void ReflectionArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opacity_ = 0.5f;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReflectionArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float opacity = 1 [default = 0.5];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &opacity_)));
          set_has_opacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReflectionArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float opacity = 1 [default = 0.5];
  if (has_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->opacity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReflectionArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float opacity = 1 [default = 0.5];
  if (has_opacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->opacity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReflectionArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float opacity = 1 [default = 0.5];
    if (has_opacity()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReflectionArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReflectionArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReflectionArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReflectionArchive::MergeFrom(const ReflectionArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opacity()) {
      set_opacity(from.opacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReflectionArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReflectionArchive::CopyFrom(const ReflectionArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReflectionArchive::IsInitialized() const {

  return true;
}

void ReflectionArchive::Swap(ReflectionArchive* other) {
  if (other != this) {
    std::swap(opacity_, other->opacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReflectionArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReflectionArchive_descriptor_;
  metadata.reflection = ReflectionArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImageAdjustmentsArchive::kExposureFieldNumber;
const int ImageAdjustmentsArchive::kSaturationFieldNumber;
const int ImageAdjustmentsArchive::kContrastFieldNumber;
const int ImageAdjustmentsArchive::kHighlightsFieldNumber;
const int ImageAdjustmentsArchive::kShadowsFieldNumber;
const int ImageAdjustmentsArchive::kSharpnessFieldNumber;
const int ImageAdjustmentsArchive::kDenoiseFieldNumber;
const int ImageAdjustmentsArchive::kTemperatureFieldNumber;
const int ImageAdjustmentsArchive::kTintFieldNumber;
const int ImageAdjustmentsArchive::kBottomLevelFieldNumber;
const int ImageAdjustmentsArchive::kTopLevelFieldNumber;
const int ImageAdjustmentsArchive::kGammaFieldNumber;
const int ImageAdjustmentsArchive::kEnhanceFieldNumber;
const int ImageAdjustmentsArchive::kRepresentsSageAdjustmentsFieldNumber;
#endif  // !_MSC_VER

ImageAdjustmentsArchive::ImageAdjustmentsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImageAdjustmentsArchive::InitAsDefaultInstance() {
}

ImageAdjustmentsArchive::ImageAdjustmentsArchive(const ImageAdjustmentsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImageAdjustmentsArchive::SharedCtor() {
  _cached_size_ = 0;
  exposure_ = 0;
  saturation_ = 0;
  contrast_ = 0;
  highlights_ = 0;
  shadows_ = 0;
  sharpness_ = 0;
  denoise_ = 0;
  temperature_ = 0;
  tint_ = 0;
  bottom_level_ = 0;
  top_level_ = 1;
  gamma_ = 0;
  enhance_ = false;
  represents_sage_adjustments_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageAdjustmentsArchive::~ImageAdjustmentsArchive() {
  SharedDtor();
}

void ImageAdjustmentsArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ImageAdjustmentsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageAdjustmentsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageAdjustmentsArchive_descriptor_;
}

const ImageAdjustmentsArchive& ImageAdjustmentsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

ImageAdjustmentsArchive* ImageAdjustmentsArchive::default_instance_ = NULL;

ImageAdjustmentsArchive* ImageAdjustmentsArchive::New() const {
  return new ImageAdjustmentsArchive;
}

void ImageAdjustmentsArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exposure_ = 0;
    saturation_ = 0;
    contrast_ = 0;
    highlights_ = 0;
    shadows_ = 0;
    sharpness_ = 0;
    denoise_ = 0;
    temperature_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    tint_ = 0;
    bottom_level_ = 0;
    top_level_ = 1;
    gamma_ = 0;
    enhance_ = false;
    represents_sage_adjustments_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageAdjustmentsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float exposure = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &exposure_)));
          set_has_exposure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_saturation;
        break;
      }

      // optional float saturation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_saturation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &saturation_)));
          set_has_saturation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_contrast;
        break;
      }

      // optional float contrast = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_contrast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &contrast_)));
          set_has_contrast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_highlights;
        break;
      }

      // optional float highlights = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_highlights:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &highlights_)));
          set_has_highlights();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_shadows;
        break;
      }

      // optional float shadows = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_shadows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shadows_)));
          set_has_shadows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_sharpness;
        break;
      }

      // optional float sharpness = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sharpness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sharpness_)));
          set_has_sharpness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_denoise;
        break;
      }

      // optional float denoise = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_denoise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &denoise_)));
          set_has_denoise();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_temperature;
        break;
      }

      // optional float temperature = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temperature_)));
          set_has_temperature();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_tint;
        break;
      }

      // optional float tint = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tint_)));
          set_has_tint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_bottom_level;
        break;
      }

      // optional float bottom_level = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bottom_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bottom_level_)));
          set_has_bottom_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_top_level;
        break;
      }

      // optional float top_level = 11 [default = 1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_top_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top_level_)));
          set_has_top_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_gamma;
        break;
      }

      // optional float gamma = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gamma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gamma_)));
          set_has_gamma();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_enhance;
        break;
      }

      // optional bool enhance = 13 [default = false];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enhance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enhance_)));
          set_has_enhance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_represents_sage_adjustments;
        break;
      }

      // optional bool represents_sage_adjustments = 14 [default = false];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_represents_sage_adjustments:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &represents_sage_adjustments_)));
          set_has_represents_sage_adjustments();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImageAdjustmentsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float exposure = 1;
  if (has_exposure()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->exposure(), output);
  }

  // optional float saturation = 2;
  if (has_saturation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->saturation(), output);
  }

  // optional float contrast = 3;
  if (has_contrast()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->contrast(), output);
  }

  // optional float highlights = 4;
  if (has_highlights()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->highlights(), output);
  }

  // optional float shadows = 5;
  if (has_shadows()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->shadows(), output);
  }

  // optional float sharpness = 6;
  if (has_sharpness()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->sharpness(), output);
  }

  // optional float denoise = 7;
  if (has_denoise()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->denoise(), output);
  }

  // optional float temperature = 8;
  if (has_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->temperature(), output);
  }

  // optional float tint = 9;
  if (has_tint()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->tint(), output);
  }

  // optional float bottom_level = 10;
  if (has_bottom_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->bottom_level(), output);
  }

  // optional float top_level = 11 [default = 1];
  if (has_top_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->top_level(), output);
  }

  // optional float gamma = 12;
  if (has_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->gamma(), output);
  }

  // optional bool enhance = 13 [default = false];
  if (has_enhance()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->enhance(), output);
  }

  // optional bool represents_sage_adjustments = 14 [default = false];
  if (has_represents_sage_adjustments()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->represents_sage_adjustments(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImageAdjustmentsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float exposure = 1;
  if (has_exposure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->exposure(), target);
  }

  // optional float saturation = 2;
  if (has_saturation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->saturation(), target);
  }

  // optional float contrast = 3;
  if (has_contrast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->contrast(), target);
  }

  // optional float highlights = 4;
  if (has_highlights()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->highlights(), target);
  }

  // optional float shadows = 5;
  if (has_shadows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->shadows(), target);
  }

  // optional float sharpness = 6;
  if (has_sharpness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->sharpness(), target);
  }

  // optional float denoise = 7;
  if (has_denoise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->denoise(), target);
  }

  // optional float temperature = 8;
  if (has_temperature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->temperature(), target);
  }

  // optional float tint = 9;
  if (has_tint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->tint(), target);
  }

  // optional float bottom_level = 10;
  if (has_bottom_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->bottom_level(), target);
  }

  // optional float top_level = 11 [default = 1];
  if (has_top_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->top_level(), target);
  }

  // optional float gamma = 12;
  if (has_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->gamma(), target);
  }

  // optional bool enhance = 13 [default = false];
  if (has_enhance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->enhance(), target);
  }

  // optional bool represents_sage_adjustments = 14 [default = false];
  if (has_represents_sage_adjustments()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->represents_sage_adjustments(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImageAdjustmentsArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float exposure = 1;
    if (has_exposure()) {
      total_size += 1 + 4;
    }

    // optional float saturation = 2;
    if (has_saturation()) {
      total_size += 1 + 4;
    }

    // optional float contrast = 3;
    if (has_contrast()) {
      total_size += 1 + 4;
    }

    // optional float highlights = 4;
    if (has_highlights()) {
      total_size += 1 + 4;
    }

    // optional float shadows = 5;
    if (has_shadows()) {
      total_size += 1 + 4;
    }

    // optional float sharpness = 6;
    if (has_sharpness()) {
      total_size += 1 + 4;
    }

    // optional float denoise = 7;
    if (has_denoise()) {
      total_size += 1 + 4;
    }

    // optional float temperature = 8;
    if (has_temperature()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float tint = 9;
    if (has_tint()) {
      total_size += 1 + 4;
    }

    // optional float bottom_level = 10;
    if (has_bottom_level()) {
      total_size += 1 + 4;
    }

    // optional float top_level = 11 [default = 1];
    if (has_top_level()) {
      total_size += 1 + 4;
    }

    // optional float gamma = 12;
    if (has_gamma()) {
      total_size += 1 + 4;
    }

    // optional bool enhance = 13 [default = false];
    if (has_enhance()) {
      total_size += 1 + 1;
    }

    // optional bool represents_sage_adjustments = 14 [default = false];
    if (has_represents_sage_adjustments()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageAdjustmentsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageAdjustmentsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageAdjustmentsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageAdjustmentsArchive::MergeFrom(const ImageAdjustmentsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exposure()) {
      set_exposure(from.exposure());
    }
    if (from.has_saturation()) {
      set_saturation(from.saturation());
    }
    if (from.has_contrast()) {
      set_contrast(from.contrast());
    }
    if (from.has_highlights()) {
      set_highlights(from.highlights());
    }
    if (from.has_shadows()) {
      set_shadows(from.shadows());
    }
    if (from.has_sharpness()) {
      set_sharpness(from.sharpness());
    }
    if (from.has_denoise()) {
      set_denoise(from.denoise());
    }
    if (from.has_temperature()) {
      set_temperature(from.temperature());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tint()) {
      set_tint(from.tint());
    }
    if (from.has_bottom_level()) {
      set_bottom_level(from.bottom_level());
    }
    if (from.has_top_level()) {
      set_top_level(from.top_level());
    }
    if (from.has_gamma()) {
      set_gamma(from.gamma());
    }
    if (from.has_enhance()) {
      set_enhance(from.enhance());
    }
    if (from.has_represents_sage_adjustments()) {
      set_represents_sage_adjustments(from.represents_sage_adjustments());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageAdjustmentsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageAdjustmentsArchive::CopyFrom(const ImageAdjustmentsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageAdjustmentsArchive::IsInitialized() const {

  return true;
}

void ImageAdjustmentsArchive::Swap(ImageAdjustmentsArchive* other) {
  if (other != this) {
    std::swap(exposure_, other->exposure_);
    std::swap(saturation_, other->saturation_);
    std::swap(contrast_, other->contrast_);
    std::swap(highlights_, other->highlights_);
    std::swap(shadows_, other->shadows_);
    std::swap(sharpness_, other->sharpness_);
    std::swap(denoise_, other->denoise_);
    std::swap(temperature_, other->temperature_);
    std::swap(tint_, other->tint_);
    std::swap(bottom_level_, other->bottom_level_);
    std::swap(top_level_, other->top_level_);
    std::swap(gamma_, other->gamma_);
    std::swap(enhance_, other->enhance_);
    std::swap(represents_sage_adjustments_, other->represents_sage_adjustments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageAdjustmentsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageAdjustmentsArchive_descriptor_;
  metadata.reflection = ImageAdjustmentsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShapeStylePropertiesArchive::kFillFieldNumber;
const int ShapeStylePropertiesArchive::kStrokeFieldNumber;
const int ShapeStylePropertiesArchive::kOpacityFieldNumber;
const int ShapeStylePropertiesArchive::kShadowFieldNumber;
const int ShapeStylePropertiesArchive::kReflectionFieldNumber;
#endif  // !_MSC_VER

ShapeStylePropertiesArchive::ShapeStylePropertiesArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShapeStylePropertiesArchive::InitAsDefaultInstance() {
  fill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  stroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  shadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  reflection_ = const_cast< ::TSD::ReflectionArchive*>(&::TSD::ReflectionArchive::default_instance());
}

ShapeStylePropertiesArchive::ShapeStylePropertiesArchive(const ShapeStylePropertiesArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShapeStylePropertiesArchive::SharedCtor() {
  _cached_size_ = 0;
  fill_ = NULL;
  stroke_ = NULL;
  opacity_ = 0;
  shadow_ = NULL;
  reflection_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShapeStylePropertiesArchive::~ShapeStylePropertiesArchive() {
  SharedDtor();
}

void ShapeStylePropertiesArchive::SharedDtor() {
  if (this != default_instance_) {
    delete fill_;
    delete stroke_;
    delete shadow_;
    delete reflection_;
  }
}

void ShapeStylePropertiesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShapeStylePropertiesArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShapeStylePropertiesArchive_descriptor_;
}

const ShapeStylePropertiesArchive& ShapeStylePropertiesArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

ShapeStylePropertiesArchive* ShapeStylePropertiesArchive::default_instance_ = NULL;

ShapeStylePropertiesArchive* ShapeStylePropertiesArchive::New() const {
  return new ShapeStylePropertiesArchive;
}

void ShapeStylePropertiesArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fill()) {
      if (fill_ != NULL) fill_->::TSD::FillArchive::Clear();
    }
    if (has_stroke()) {
      if (stroke_ != NULL) stroke_->::TSD::StrokeArchive::Clear();
    }
    opacity_ = 0;
    if (has_shadow()) {
      if (shadow_ != NULL) shadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_reflection()) {
      if (reflection_ != NULL) reflection_->::TSD::ReflectionArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShapeStylePropertiesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSD.FillArchive fill = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stroke;
        break;
      }

      // optional .TSD.StrokeArchive stroke = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stroke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_opacity;
        break;
      }

      // optional float opacity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &opacity_)));
          set_has_opacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_shadow;
        break;
      }

      // optional .TSD.ShadowArchive shadow = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_reflection;
        break;
      }

      // optional .TSD.ReflectionArchive reflection = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reflection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reflection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShapeStylePropertiesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSD.FillArchive fill = 1;
  if (has_fill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fill(), output);
  }

  // optional .TSD.StrokeArchive stroke = 2;
  if (has_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stroke(), output);
  }

  // optional float opacity = 3;
  if (has_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->opacity(), output);
  }

  // optional .TSD.ShadowArchive shadow = 4;
  if (has_shadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->shadow(), output);
  }

  // optional .TSD.ReflectionArchive reflection = 5;
  if (has_reflection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->reflection(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShapeStylePropertiesArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSD.FillArchive fill = 1;
  if (has_fill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fill(), target);
  }

  // optional .TSD.StrokeArchive stroke = 2;
  if (has_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stroke(), target);
  }

  // optional float opacity = 3;
  if (has_opacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->opacity(), target);
  }

  // optional .TSD.ShadowArchive shadow = 4;
  if (has_shadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->shadow(), target);
  }

  // optional .TSD.ReflectionArchive reflection = 5;
  if (has_reflection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->reflection(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShapeStylePropertiesArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSD.FillArchive fill = 1;
    if (has_fill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fill());
    }

    // optional .TSD.StrokeArchive stroke = 2;
    if (has_stroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stroke());
    }

    // optional float opacity = 3;
    if (has_opacity()) {
      total_size += 1 + 4;
    }

    // optional .TSD.ShadowArchive shadow = 4;
    if (has_shadow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shadow());
    }

    // optional .TSD.ReflectionArchive reflection = 5;
    if (has_reflection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reflection());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShapeStylePropertiesArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShapeStylePropertiesArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShapeStylePropertiesArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShapeStylePropertiesArchive::MergeFrom(const ShapeStylePropertiesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fill()) {
      mutable_fill()->::TSD::FillArchive::MergeFrom(from.fill());
    }
    if (from.has_stroke()) {
      mutable_stroke()->::TSD::StrokeArchive::MergeFrom(from.stroke());
    }
    if (from.has_opacity()) {
      set_opacity(from.opacity());
    }
    if (from.has_shadow()) {
      mutable_shadow()->::TSD::ShadowArchive::MergeFrom(from.shadow());
    }
    if (from.has_reflection()) {
      mutable_reflection()->::TSD::ReflectionArchive::MergeFrom(from.reflection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShapeStylePropertiesArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeStylePropertiesArchive::CopyFrom(const ShapeStylePropertiesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeStylePropertiesArchive::IsInitialized() const {

  if (has_fill()) {
    if (!this->fill().IsInitialized()) return false;
  }
  if (has_stroke()) {
    if (!this->stroke().IsInitialized()) return false;
  }
  if (has_shadow()) {
    if (!this->shadow().IsInitialized()) return false;
  }
  return true;
}

void ShapeStylePropertiesArchive::Swap(ShapeStylePropertiesArchive* other) {
  if (other != this) {
    std::swap(fill_, other->fill_);
    std::swap(stroke_, other->stroke_);
    std::swap(opacity_, other->opacity_);
    std::swap(shadow_, other->shadow_);
    std::swap(reflection_, other->reflection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShapeStylePropertiesArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShapeStylePropertiesArchive_descriptor_;
  metadata.reflection = ShapeStylePropertiesArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShapeStyleArchive::kSuperFieldNumber;
const int ShapeStyleArchive::kOverrideCountFieldNumber;
const int ShapeStyleArchive::kShapePropertiesFieldNumber;
#endif  // !_MSC_VER

ShapeStyleArchive::ShapeStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShapeStyleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::StyleArchive*>(&::TSS::StyleArchive::default_instance());
  shape_properties_ = const_cast< ::TSD::ShapeStylePropertiesArchive*>(&::TSD::ShapeStylePropertiesArchive::default_instance());
}

ShapeStyleArchive::ShapeStyleArchive(const ShapeStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShapeStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  override_count_ = 0u;
  shape_properties_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShapeStyleArchive::~ShapeStyleArchive() {
  SharedDtor();
}

void ShapeStyleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete shape_properties_;
  }
}

void ShapeStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShapeStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShapeStyleArchive_descriptor_;
}

const ShapeStyleArchive& ShapeStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

ShapeStyleArchive* ShapeStyleArchive::default_instance_ = NULL;

ShapeStyleArchive* ShapeStyleArchive::New() const {
  return new ShapeStyleArchive;
}

void ShapeStyleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::StyleArchive::Clear();
    }
    override_count_ = 0u;
    if (has_shape_properties()) {
      if (shape_properties_ != NULL) shape_properties_->::TSD::ShapeStylePropertiesArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShapeStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSS.StyleArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_override_count;
        break;
      }

      // optional uint32 override_count = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_override_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &override_count_)));
          set_has_override_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_shape_properties;
        break;
      }

      // optional .TSD.ShapeStylePropertiesArchive shape_properties = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shape_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShapeStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (has_override_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->override_count(), output);
  }

  // optional .TSD.ShapeStylePropertiesArchive shape_properties = 11;
  if (has_shape_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->shape_properties(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShapeStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (has_override_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->override_count(), target);
  }

  // optional .TSD.ShapeStylePropertiesArchive shape_properties = 11;
  if (has_shape_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->shape_properties(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShapeStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSS.StyleArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional uint32 override_count = 10 [default = 0];
    if (has_override_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->override_count());
    }

    // optional .TSD.ShapeStylePropertiesArchive shape_properties = 11;
    if (has_shape_properties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shape_properties());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShapeStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShapeStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShapeStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShapeStyleArchive::MergeFrom(const ShapeStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::StyleArchive::MergeFrom(from.super());
    }
    if (from.has_override_count()) {
      set_override_count(from.override_count());
    }
    if (from.has_shape_properties()) {
      mutable_shape_properties()->::TSD::ShapeStylePropertiesArchive::MergeFrom(from.shape_properties());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShapeStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeStyleArchive::CopyFrom(const ShapeStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeStyleArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_shape_properties()) {
    if (!this->shape_properties().IsInitialized()) return false;
  }
  return true;
}

void ShapeStyleArchive::Swap(ShapeStyleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(override_count_, other->override_count_);
    std::swap(shape_properties_, other->shape_properties_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShapeStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShapeStyleArchive_descriptor_;
  metadata.reflection = ShapeStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MediaStylePropertiesArchive::kStrokeFieldNumber;
const int MediaStylePropertiesArchive::kOpacityFieldNumber;
const int MediaStylePropertiesArchive::kShadowFieldNumber;
const int MediaStylePropertiesArchive::kReflectionFieldNumber;
#endif  // !_MSC_VER

MediaStylePropertiesArchive::MediaStylePropertiesArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaStylePropertiesArchive::InitAsDefaultInstance() {
  stroke_ = const_cast< ::TSD::StrokeArchive*>(&::TSD::StrokeArchive::default_instance());
  shadow_ = const_cast< ::TSD::ShadowArchive*>(&::TSD::ShadowArchive::default_instance());
  reflection_ = const_cast< ::TSD::ReflectionArchive*>(&::TSD::ReflectionArchive::default_instance());
}

MediaStylePropertiesArchive::MediaStylePropertiesArchive(const MediaStylePropertiesArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaStylePropertiesArchive::SharedCtor() {
  _cached_size_ = 0;
  stroke_ = NULL;
  opacity_ = 0;
  shadow_ = NULL;
  reflection_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaStylePropertiesArchive::~MediaStylePropertiesArchive() {
  SharedDtor();
}

void MediaStylePropertiesArchive::SharedDtor() {
  if (this != default_instance_) {
    delete stroke_;
    delete shadow_;
    delete reflection_;
  }
}

void MediaStylePropertiesArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaStylePropertiesArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaStylePropertiesArchive_descriptor_;
}

const MediaStylePropertiesArchive& MediaStylePropertiesArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

MediaStylePropertiesArchive* MediaStylePropertiesArchive::default_instance_ = NULL;

MediaStylePropertiesArchive* MediaStylePropertiesArchive::New() const {
  return new MediaStylePropertiesArchive;
}

void MediaStylePropertiesArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stroke()) {
      if (stroke_ != NULL) stroke_->::TSD::StrokeArchive::Clear();
    }
    opacity_ = 0;
    if (has_shadow()) {
      if (shadow_ != NULL) shadow_->::TSD::ShadowArchive::Clear();
    }
    if (has_reflection()) {
      if (reflection_ != NULL) reflection_->::TSD::ReflectionArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaStylePropertiesArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSD.StrokeArchive stroke = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stroke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_opacity;
        break;
      }

      // optional float opacity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &opacity_)));
          set_has_opacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_shadow;
        break;
      }

      // optional .TSD.ShadowArchive shadow = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shadow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reflection;
        break;
      }

      // optional .TSD.ReflectionArchive reflection = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reflection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reflection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaStylePropertiesArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSD.StrokeArchive stroke = 1;
  if (has_stroke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stroke(), output);
  }

  // optional float opacity = 2;
  if (has_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->opacity(), output);
  }

  // optional .TSD.ShadowArchive shadow = 3;
  if (has_shadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->shadow(), output);
  }

  // optional .TSD.ReflectionArchive reflection = 4;
  if (has_reflection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reflection(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaStylePropertiesArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSD.StrokeArchive stroke = 1;
  if (has_stroke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stroke(), target);
  }

  // optional float opacity = 2;
  if (has_opacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->opacity(), target);
  }

  // optional .TSD.ShadowArchive shadow = 3;
  if (has_shadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->shadow(), target);
  }

  // optional .TSD.ReflectionArchive reflection = 4;
  if (has_reflection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reflection(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaStylePropertiesArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSD.StrokeArchive stroke = 1;
    if (has_stroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stroke());
    }

    // optional float opacity = 2;
    if (has_opacity()) {
      total_size += 1 + 4;
    }

    // optional .TSD.ShadowArchive shadow = 3;
    if (has_shadow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shadow());
    }

    // optional .TSD.ReflectionArchive reflection = 4;
    if (has_reflection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reflection());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaStylePropertiesArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaStylePropertiesArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaStylePropertiesArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaStylePropertiesArchive::MergeFrom(const MediaStylePropertiesArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stroke()) {
      mutable_stroke()->::TSD::StrokeArchive::MergeFrom(from.stroke());
    }
    if (from.has_opacity()) {
      set_opacity(from.opacity());
    }
    if (from.has_shadow()) {
      mutable_shadow()->::TSD::ShadowArchive::MergeFrom(from.shadow());
    }
    if (from.has_reflection()) {
      mutable_reflection()->::TSD::ReflectionArchive::MergeFrom(from.reflection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaStylePropertiesArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaStylePropertiesArchive::CopyFrom(const MediaStylePropertiesArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaStylePropertiesArchive::IsInitialized() const {

  if (has_stroke()) {
    if (!this->stroke().IsInitialized()) return false;
  }
  if (has_shadow()) {
    if (!this->shadow().IsInitialized()) return false;
  }
  return true;
}

void MediaStylePropertiesArchive::Swap(MediaStylePropertiesArchive* other) {
  if (other != this) {
    std::swap(stroke_, other->stroke_);
    std::swap(opacity_, other->opacity_);
    std::swap(shadow_, other->shadow_);
    std::swap(reflection_, other->reflection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaStylePropertiesArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaStylePropertiesArchive_descriptor_;
  metadata.reflection = MediaStylePropertiesArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MediaStyleArchive::kSuperFieldNumber;
const int MediaStyleArchive::kOverrideCountFieldNumber;
const int MediaStyleArchive::kMediaPropertiesFieldNumber;
#endif  // !_MSC_VER

MediaStyleArchive::MediaStyleArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaStyleArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSS::StyleArchive*>(&::TSS::StyleArchive::default_instance());
  media_properties_ = const_cast< ::TSD::MediaStylePropertiesArchive*>(&::TSD::MediaStylePropertiesArchive::default_instance());
}

MediaStyleArchive::MediaStyleArchive(const MediaStyleArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaStyleArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  override_count_ = 0u;
  media_properties_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaStyleArchive::~MediaStyleArchive() {
  SharedDtor();
}

void MediaStyleArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete media_properties_;
  }
}

void MediaStyleArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaStyleArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaStyleArchive_descriptor_;
}

const MediaStyleArchive& MediaStyleArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

MediaStyleArchive* MediaStyleArchive::default_instance_ = NULL;

MediaStyleArchive* MediaStyleArchive::New() const {
  return new MediaStyleArchive;
}

void MediaStyleArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSS::StyleArchive::Clear();
    }
    override_count_ = 0u;
    if (has_media_properties()) {
      if (media_properties_ != NULL) media_properties_->::TSD::MediaStylePropertiesArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaStyleArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSS.StyleArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_override_count;
        break;
      }

      // optional uint32 override_count = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_override_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &override_count_)));
          set_has_override_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_media_properties;
        break;
      }

      // optional .TSD.MediaStylePropertiesArchive media_properties = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_media_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_media_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaStyleArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (has_override_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->override_count(), output);
  }

  // optional .TSD.MediaStylePropertiesArchive media_properties = 11;
  if (has_media_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->media_properties(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaStyleArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSS.StyleArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional uint32 override_count = 10 [default = 0];
  if (has_override_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->override_count(), target);
  }

  // optional .TSD.MediaStylePropertiesArchive media_properties = 11;
  if (has_media_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->media_properties(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaStyleArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSS.StyleArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional uint32 override_count = 10 [default = 0];
    if (has_override_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->override_count());
    }

    // optional .TSD.MediaStylePropertiesArchive media_properties = 11;
    if (has_media_properties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->media_properties());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaStyleArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaStyleArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaStyleArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaStyleArchive::MergeFrom(const MediaStyleArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSS::StyleArchive::MergeFrom(from.super());
    }
    if (from.has_override_count()) {
      set_override_count(from.override_count());
    }
    if (from.has_media_properties()) {
      mutable_media_properties()->::TSD::MediaStylePropertiesArchive::MergeFrom(from.media_properties());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaStyleArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaStyleArchive::CopyFrom(const MediaStyleArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaStyleArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_media_properties()) {
    if (!this->media_properties().IsInitialized()) return false;
  }
  return true;
}

void MediaStyleArchive::Swap(MediaStyleArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(override_count_, other->override_count_);
    std::swap(media_properties_, other->media_properties_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaStyleArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaStyleArchive_descriptor_;
  metadata.reflection = MediaStyleArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThemePresetsArchive::kGradientFillPresetsFieldNumber;
const int ThemePresetsArchive::kImageFillPresetsFieldNumber;
const int ThemePresetsArchive::kShadowPresetsFieldNumber;
const int ThemePresetsArchive::kLineStylePresetsFieldNumber;
const int ThemePresetsArchive::kShapeStylePresetsFieldNumber;
const int ThemePresetsArchive::kTextboxStylePresetsFieldNumber;
const int ThemePresetsArchive::kImageStylePresetsFieldNumber;
const int ThemePresetsArchive::kMovieStylePresetsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ThemePresetsArchive::kExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::TSS::ThemeArchive,
    ::google::protobuf::internal::MessageTypeTraits< ::TSD::ThemePresetsArchive >, 11, false >
  ThemePresetsArchive::extension(kExtensionFieldNumber, ::TSD::ThemePresetsArchive::default_instance());
ThemePresetsArchive::ThemePresetsArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThemePresetsArchive::InitAsDefaultInstance() {
}

ThemePresetsArchive::ThemePresetsArchive(const ThemePresetsArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThemePresetsArchive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThemePresetsArchive::~ThemePresetsArchive() {
  SharedDtor();
}

void ThemePresetsArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ThemePresetsArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThemePresetsArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThemePresetsArchive_descriptor_;
}

const ThemePresetsArchive& ThemePresetsArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

ThemePresetsArchive* ThemePresetsArchive::default_instance_ = NULL;

ThemePresetsArchive* ThemePresetsArchive::New() const {
  return new ThemePresetsArchive;
}

void ThemePresetsArchive::Clear() {
  gradient_fill_presets_.Clear();
  image_fill_presets_.Clear();
  shadow_presets_.Clear();
  line_style_presets_.Clear();
  shape_style_presets_.Clear();
  textbox_style_presets_.Clear();
  image_style_presets_.Clear();
  movie_style_presets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThemePresetsArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSD.FillArchive gradient_fill_presets = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gradient_fill_presets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gradient_fill_presets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_gradient_fill_presets;
        if (input->ExpectTag(18)) goto parse_image_fill_presets;
        break;
      }

      // repeated .TSD.FillArchive image_fill_presets = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_fill_presets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_image_fill_presets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_image_fill_presets;
        if (input->ExpectTag(26)) goto parse_shadow_presets;
        break;
      }

      // repeated .TSD.ShadowArchive shadow_presets = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shadow_presets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shadow_presets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_shadow_presets;
        if (input->ExpectTag(34)) goto parse_line_style_presets;
        break;
      }

      // repeated .TSP.Reference line_style_presets = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_line_style_presets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_line_style_presets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_line_style_presets;
        if (input->ExpectTag(42)) goto parse_shape_style_presets;
        break;
      }

      // repeated .TSP.Reference shape_style_presets = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shape_style_presets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shape_style_presets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_shape_style_presets;
        if (input->ExpectTag(50)) goto parse_textbox_style_presets;
        break;
      }

      // repeated .TSP.Reference textbox_style_presets = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_textbox_style_presets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_textbox_style_presets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_textbox_style_presets;
        if (input->ExpectTag(58)) goto parse_image_style_presets;
        break;
      }

      // repeated .TSP.Reference image_style_presets = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_style_presets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_image_style_presets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_image_style_presets;
        if (input->ExpectTag(66)) goto parse_movie_style_presets;
        break;
      }

      // repeated .TSP.Reference movie_style_presets = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_movie_style_presets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_movie_style_presets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_movie_style_presets;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThemePresetsArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSD.FillArchive gradient_fill_presets = 1;
  for (int i = 0; i < this->gradient_fill_presets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gradient_fill_presets(i), output);
  }

  // repeated .TSD.FillArchive image_fill_presets = 2;
  for (int i = 0; i < this->image_fill_presets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->image_fill_presets(i), output);
  }

  // repeated .TSD.ShadowArchive shadow_presets = 3;
  for (int i = 0; i < this->shadow_presets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->shadow_presets(i), output);
  }

  // repeated .TSP.Reference line_style_presets = 4;
  for (int i = 0; i < this->line_style_presets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->line_style_presets(i), output);
  }

  // repeated .TSP.Reference shape_style_presets = 5;
  for (int i = 0; i < this->shape_style_presets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->shape_style_presets(i), output);
  }

  // repeated .TSP.Reference textbox_style_presets = 6;
  for (int i = 0; i < this->textbox_style_presets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->textbox_style_presets(i), output);
  }

  // repeated .TSP.Reference image_style_presets = 7;
  for (int i = 0; i < this->image_style_presets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->image_style_presets(i), output);
  }

  // repeated .TSP.Reference movie_style_presets = 8;
  for (int i = 0; i < this->movie_style_presets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->movie_style_presets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThemePresetsArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSD.FillArchive gradient_fill_presets = 1;
  for (int i = 0; i < this->gradient_fill_presets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gradient_fill_presets(i), target);
  }

  // repeated .TSD.FillArchive image_fill_presets = 2;
  for (int i = 0; i < this->image_fill_presets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->image_fill_presets(i), target);
  }

  // repeated .TSD.ShadowArchive shadow_presets = 3;
  for (int i = 0; i < this->shadow_presets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->shadow_presets(i), target);
  }

  // repeated .TSP.Reference line_style_presets = 4;
  for (int i = 0; i < this->line_style_presets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->line_style_presets(i), target);
  }

  // repeated .TSP.Reference shape_style_presets = 5;
  for (int i = 0; i < this->shape_style_presets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->shape_style_presets(i), target);
  }

  // repeated .TSP.Reference textbox_style_presets = 6;
  for (int i = 0; i < this->textbox_style_presets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->textbox_style_presets(i), target);
  }

  // repeated .TSP.Reference image_style_presets = 7;
  for (int i = 0; i < this->image_style_presets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->image_style_presets(i), target);
  }

  // repeated .TSP.Reference movie_style_presets = 8;
  for (int i = 0; i < this->movie_style_presets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->movie_style_presets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThemePresetsArchive::ByteSize() const {
  int total_size = 0;

  // repeated .TSD.FillArchive gradient_fill_presets = 1;
  total_size += 1 * this->gradient_fill_presets_size();
  for (int i = 0; i < this->gradient_fill_presets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gradient_fill_presets(i));
  }

  // repeated .TSD.FillArchive image_fill_presets = 2;
  total_size += 1 * this->image_fill_presets_size();
  for (int i = 0; i < this->image_fill_presets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->image_fill_presets(i));
  }

  // repeated .TSD.ShadowArchive shadow_presets = 3;
  total_size += 1 * this->shadow_presets_size();
  for (int i = 0; i < this->shadow_presets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shadow_presets(i));
  }

  // repeated .TSP.Reference line_style_presets = 4;
  total_size += 1 * this->line_style_presets_size();
  for (int i = 0; i < this->line_style_presets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->line_style_presets(i));
  }

  // repeated .TSP.Reference shape_style_presets = 5;
  total_size += 1 * this->shape_style_presets_size();
  for (int i = 0; i < this->shape_style_presets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shape_style_presets(i));
  }

  // repeated .TSP.Reference textbox_style_presets = 6;
  total_size += 1 * this->textbox_style_presets_size();
  for (int i = 0; i < this->textbox_style_presets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->textbox_style_presets(i));
  }

  // repeated .TSP.Reference image_style_presets = 7;
  total_size += 1 * this->image_style_presets_size();
  for (int i = 0; i < this->image_style_presets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->image_style_presets(i));
  }

  // repeated .TSP.Reference movie_style_presets = 8;
  total_size += 1 * this->movie_style_presets_size();
  for (int i = 0; i < this->movie_style_presets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->movie_style_presets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThemePresetsArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThemePresetsArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThemePresetsArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThemePresetsArchive::MergeFrom(const ThemePresetsArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  gradient_fill_presets_.MergeFrom(from.gradient_fill_presets_);
  image_fill_presets_.MergeFrom(from.image_fill_presets_);
  shadow_presets_.MergeFrom(from.shadow_presets_);
  line_style_presets_.MergeFrom(from.line_style_presets_);
  shape_style_presets_.MergeFrom(from.shape_style_presets_);
  textbox_style_presets_.MergeFrom(from.textbox_style_presets_);
  image_style_presets_.MergeFrom(from.image_style_presets_);
  movie_style_presets_.MergeFrom(from.movie_style_presets_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThemePresetsArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThemePresetsArchive::CopyFrom(const ThemePresetsArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemePresetsArchive::IsInitialized() const {

  for (int i = 0; i < gradient_fill_presets_size(); i++) {
    if (!this->gradient_fill_presets(i).IsInitialized()) return false;
  }
  for (int i = 0; i < image_fill_presets_size(); i++) {
    if (!this->image_fill_presets(i).IsInitialized()) return false;
  }
  for (int i = 0; i < shadow_presets_size(); i++) {
    if (!this->shadow_presets(i).IsInitialized()) return false;
  }
  for (int i = 0; i < line_style_presets_size(); i++) {
    if (!this->line_style_presets(i).IsInitialized()) return false;
  }
  for (int i = 0; i < shape_style_presets_size(); i++) {
    if (!this->shape_style_presets(i).IsInitialized()) return false;
  }
  for (int i = 0; i < textbox_style_presets_size(); i++) {
    if (!this->textbox_style_presets(i).IsInitialized()) return false;
  }
  for (int i = 0; i < image_style_presets_size(); i++) {
    if (!this->image_style_presets(i).IsInitialized()) return false;
  }
  for (int i = 0; i < movie_style_presets_size(); i++) {
    if (!this->movie_style_presets(i).IsInitialized()) return false;
  }
  return true;
}

void ThemePresetsArchive::Swap(ThemePresetsArchive* other) {
  if (other != this) {
    gradient_fill_presets_.Swap(&other->gradient_fill_presets_);
    image_fill_presets_.Swap(&other->image_fill_presets_);
    shadow_presets_.Swap(&other->shadow_presets_);
    line_style_presets_.Swap(&other->line_style_presets_);
    shape_style_presets_.Swap(&other->shape_style_presets_);
    textbox_style_presets_.Swap(&other->textbox_style_presets_);
    image_style_presets_.Swap(&other->image_style_presets_);
    movie_style_presets_.Swap(&other->movie_style_presets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThemePresetsArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThemePresetsArchive_descriptor_;
  metadata.reflection = ThemePresetsArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThemeReplaceFillPresetCommandArchive::kSuperFieldNumber;
const int ThemeReplaceFillPresetCommandArchive::kThemeFieldNumber;
const int ThemeReplaceFillPresetCommandArchive::kFillFieldNumber;
const int ThemeReplaceFillPresetCommandArchive::kOldFillFieldNumber;
const int ThemeReplaceFillPresetCommandArchive::kIndexFieldNumber;
#endif  // !_MSC_VER

ThemeReplaceFillPresetCommandArchive::ThemeReplaceFillPresetCommandArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThemeReplaceFillPresetCommandArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSK::CommandArchive*>(&::TSK::CommandArchive::default_instance());
  theme_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  fill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
  old_fill_ = const_cast< ::TSD::FillArchive*>(&::TSD::FillArchive::default_instance());
}

ThemeReplaceFillPresetCommandArchive::ThemeReplaceFillPresetCommandArchive(const ThemeReplaceFillPresetCommandArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThemeReplaceFillPresetCommandArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  theme_ = NULL;
  fill_ = NULL;
  old_fill_ = NULL;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThemeReplaceFillPresetCommandArchive::~ThemeReplaceFillPresetCommandArchive() {
  SharedDtor();
}

void ThemeReplaceFillPresetCommandArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete theme_;
    delete fill_;
    delete old_fill_;
  }
}

void ThemeReplaceFillPresetCommandArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThemeReplaceFillPresetCommandArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThemeReplaceFillPresetCommandArchive_descriptor_;
}

const ThemeReplaceFillPresetCommandArchive& ThemeReplaceFillPresetCommandArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

ThemeReplaceFillPresetCommandArchive* ThemeReplaceFillPresetCommandArchive::default_instance_ = NULL;

ThemeReplaceFillPresetCommandArchive* ThemeReplaceFillPresetCommandArchive::New() const {
  return new ThemeReplaceFillPresetCommandArchive;
}

void ThemeReplaceFillPresetCommandArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSK::CommandArchive::Clear();
    }
    if (has_theme()) {
      if (theme_ != NULL) theme_->::TSP::Reference::Clear();
    }
    if (has_fill()) {
      if (fill_ != NULL) fill_->::TSD::FillArchive::Clear();
    }
    if (has_old_fill()) {
      if (old_fill_ != NULL) old_fill_->::TSD::FillArchive::Clear();
    }
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThemeReplaceFillPresetCommandArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSK.CommandArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_theme;
        break;
      }

      // required .TSP.Reference theme = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_theme()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fill;
        break;
      }

      // required .TSD.FillArchive fill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_old_fill;
        break;
      }

      // required .TSD.FillArchive old_fill = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_fill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_fill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_index;
        break;
      }

      // required uint32 index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThemeReplaceFillPresetCommandArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // required .TSP.Reference theme = 2;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->theme(), output);
  }

  // required .TSD.FillArchive fill = 3;
  if (has_fill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fill(), output);
  }

  // required .TSD.FillArchive old_fill = 4;
  if (has_old_fill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->old_fill(), output);
  }

  // required uint32 index = 5;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThemeReplaceFillPresetCommandArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSK.CommandArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // required .TSP.Reference theme = 2;
  if (has_theme()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->theme(), target);
  }

  // required .TSD.FillArchive fill = 3;
  if (has_fill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fill(), target);
  }

  // required .TSD.FillArchive old_fill = 4;
  if (has_old_fill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->old_fill(), target);
  }

  // required uint32 index = 5;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThemeReplaceFillPresetCommandArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSK.CommandArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // required .TSP.Reference theme = 2;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->theme());
    }

    // required .TSD.FillArchive fill = 3;
    if (has_fill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fill());
    }

    // required .TSD.FillArchive old_fill = 4;
    if (has_old_fill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_fill());
    }

    // required uint32 index = 5;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThemeReplaceFillPresetCommandArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThemeReplaceFillPresetCommandArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThemeReplaceFillPresetCommandArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThemeReplaceFillPresetCommandArchive::MergeFrom(const ThemeReplaceFillPresetCommandArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSK::CommandArchive::MergeFrom(from.super());
    }
    if (from.has_theme()) {
      mutable_theme()->::TSP::Reference::MergeFrom(from.theme());
    }
    if (from.has_fill()) {
      mutable_fill()->::TSD::FillArchive::MergeFrom(from.fill());
    }
    if (from.has_old_fill()) {
      mutable_old_fill()->::TSD::FillArchive::MergeFrom(from.old_fill());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThemeReplaceFillPresetCommandArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThemeReplaceFillPresetCommandArchive::CopyFrom(const ThemeReplaceFillPresetCommandArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeReplaceFillPresetCommandArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_theme()) {
    if (!this->theme().IsInitialized()) return false;
  }
  if (has_fill()) {
    if (!this->fill().IsInitialized()) return false;
  }
  if (has_old_fill()) {
    if (!this->old_fill().IsInitialized()) return false;
  }
  return true;
}

void ThemeReplaceFillPresetCommandArchive::Swap(ThemeReplaceFillPresetCommandArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(theme_, other->theme_);
    std::swap(fill_, other->fill_);
    std::swap(old_fill_, other->old_fill_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThemeReplaceFillPresetCommandArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThemeReplaceFillPresetCommandArchive_descriptor_;
  metadata.reflection = ThemeReplaceFillPresetCommandArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DrawableArchive::kGeometryFieldNumber;
const int DrawableArchive::kParentFieldNumber;
const int DrawableArchive::kExteriorTextWrapFieldNumber;
const int DrawableArchive::kHyperlinkUrlFieldNumber;
const int DrawableArchive::kLockedFieldNumber;
const int DrawableArchive::kCommentFieldNumber;
const int DrawableArchive::kAspectRatioLockedFieldNumber;
const int DrawableArchive::kAccessibilityDescriptionFieldNumber;
#endif  // !_MSC_VER

DrawableArchive::DrawableArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DrawableArchive::InitAsDefaultInstance() {
  geometry_ = const_cast< ::TSD::GeometryArchive*>(&::TSD::GeometryArchive::default_instance());
  parent_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  exterior_text_wrap_ = const_cast< ::TSD::ExteriorTextWrapArchive*>(&::TSD::ExteriorTextWrapArchive::default_instance());
  comment_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

DrawableArchive::DrawableArchive(const DrawableArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DrawableArchive::SharedCtor() {
  _cached_size_ = 0;
  geometry_ = NULL;
  parent_ = NULL;
  exterior_text_wrap_ = NULL;
  hyperlink_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  locked_ = false;
  comment_ = NULL;
  aspect_ratio_locked_ = false;
  accessibility_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DrawableArchive::~DrawableArchive() {
  SharedDtor();
}

void DrawableArchive::SharedDtor() {
  if (hyperlink_url_ != &::google::protobuf::internal::kEmptyString) {
    delete hyperlink_url_;
  }
  if (accessibility_description_ != &::google::protobuf::internal::kEmptyString) {
    delete accessibility_description_;
  }
  if (this != default_instance_) {
    delete geometry_;
    delete parent_;
    delete exterior_text_wrap_;
    delete comment_;
  }
}

void DrawableArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DrawableArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrawableArchive_descriptor_;
}

const DrawableArchive& DrawableArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

DrawableArchive* DrawableArchive::default_instance_ = NULL;

DrawableArchive* DrawableArchive::New() const {
  return new DrawableArchive;
}

void DrawableArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_geometry()) {
      if (geometry_ != NULL) geometry_->::TSD::GeometryArchive::Clear();
    }
    if (has_parent()) {
      if (parent_ != NULL) parent_->::TSP::Reference::Clear();
    }
    if (has_exterior_text_wrap()) {
      if (exterior_text_wrap_ != NULL) exterior_text_wrap_->::TSD::ExteriorTextWrapArchive::Clear();
    }
    if (has_hyperlink_url()) {
      if (hyperlink_url_ != &::google::protobuf::internal::kEmptyString) {
        hyperlink_url_->clear();
      }
    }
    locked_ = false;
    if (has_comment()) {
      if (comment_ != NULL) comment_->::TSP::Reference::Clear();
    }
    aspect_ratio_locked_ = false;
    if (has_accessibility_description()) {
      if (accessibility_description_ != &::google::protobuf::internal::kEmptyString) {
        accessibility_description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DrawableArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSD.GeometryArchive geometry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geometry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_parent;
        break;
      }

      // optional .TSP.Reference parent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_exterior_text_wrap;
        break;
      }

      // optional .TSD.ExteriorTextWrapArchive exterior_text_wrap = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exterior_text_wrap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exterior_text_wrap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hyperlink_url;
        break;
      }

      // optional string hyperlink_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hyperlink_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hyperlink_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hyperlink_url().data(), this->hyperlink_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_locked;
        break;
      }

      // optional bool locked = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &locked_)));
          set_has_locked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_comment;
        break;
      }

      // optional .TSP.Reference comment = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_aspect_ratio_locked;
        break;
      }

      // optional bool aspect_ratio_locked = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aspect_ratio_locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aspect_ratio_locked_)));
          set_has_aspect_ratio_locked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_accessibility_description;
        break;
      }

      // optional string accessibility_description = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accessibility_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accessibility_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accessibility_description().data(), this->accessibility_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DrawableArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSD.GeometryArchive geometry = 1;
  if (has_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->geometry(), output);
  }

  // optional .TSP.Reference parent = 2;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->parent(), output);
  }

  // optional .TSD.ExteriorTextWrapArchive exterior_text_wrap = 3;
  if (has_exterior_text_wrap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->exterior_text_wrap(), output);
  }

  // optional string hyperlink_url = 4;
  if (has_hyperlink_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hyperlink_url().data(), this->hyperlink_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->hyperlink_url(), output);
  }

  // optional bool locked = 5;
  if (has_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->locked(), output);
  }

  // optional .TSP.Reference comment = 6;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->comment(), output);
  }

  // optional bool aspect_ratio_locked = 7;
  if (has_aspect_ratio_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->aspect_ratio_locked(), output);
  }

  // optional string accessibility_description = 8;
  if (has_accessibility_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accessibility_description().data(), this->accessibility_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->accessibility_description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DrawableArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSD.GeometryArchive geometry = 1;
  if (has_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->geometry(), target);
  }

  // optional .TSP.Reference parent = 2;
  if (has_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->parent(), target);
  }

  // optional .TSD.ExteriorTextWrapArchive exterior_text_wrap = 3;
  if (has_exterior_text_wrap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->exterior_text_wrap(), target);
  }

  // optional string hyperlink_url = 4;
  if (has_hyperlink_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hyperlink_url().data(), this->hyperlink_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hyperlink_url(), target);
  }

  // optional bool locked = 5;
  if (has_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->locked(), target);
  }

  // optional .TSP.Reference comment = 6;
  if (has_comment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->comment(), target);
  }

  // optional bool aspect_ratio_locked = 7;
  if (has_aspect_ratio_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->aspect_ratio_locked(), target);
  }

  // optional string accessibility_description = 8;
  if (has_accessibility_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accessibility_description().data(), this->accessibility_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->accessibility_description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DrawableArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSD.GeometryArchive geometry = 1;
    if (has_geometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geometry());
    }

    // optional .TSP.Reference parent = 2;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parent());
    }

    // optional .TSD.ExteriorTextWrapArchive exterior_text_wrap = 3;
    if (has_exterior_text_wrap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exterior_text_wrap());
    }

    // optional string hyperlink_url = 4;
    if (has_hyperlink_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hyperlink_url());
    }

    // optional bool locked = 5;
    if (has_locked()) {
      total_size += 1 + 1;
    }

    // optional .TSP.Reference comment = 6;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->comment());
    }

    // optional bool aspect_ratio_locked = 7;
    if (has_aspect_ratio_locked()) {
      total_size += 1 + 1;
    }

    // optional string accessibility_description = 8;
    if (has_accessibility_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accessibility_description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrawableArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DrawableArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DrawableArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DrawableArchive::MergeFrom(const DrawableArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_geometry()) {
      mutable_geometry()->::TSD::GeometryArchive::MergeFrom(from.geometry());
    }
    if (from.has_parent()) {
      mutable_parent()->::TSP::Reference::MergeFrom(from.parent());
    }
    if (from.has_exterior_text_wrap()) {
      mutable_exterior_text_wrap()->::TSD::ExteriorTextWrapArchive::MergeFrom(from.exterior_text_wrap());
    }
    if (from.has_hyperlink_url()) {
      set_hyperlink_url(from.hyperlink_url());
    }
    if (from.has_locked()) {
      set_locked(from.locked());
    }
    if (from.has_comment()) {
      mutable_comment()->::TSP::Reference::MergeFrom(from.comment());
    }
    if (from.has_aspect_ratio_locked()) {
      set_aspect_ratio_locked(from.aspect_ratio_locked());
    }
    if (from.has_accessibility_description()) {
      set_accessibility_description(from.accessibility_description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DrawableArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawableArchive::CopyFrom(const DrawableArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableArchive::IsInitialized() const {

  if (has_geometry()) {
    if (!this->geometry().IsInitialized()) return false;
  }
  if (has_parent()) {
    if (!this->parent().IsInitialized()) return false;
  }
  if (has_comment()) {
    if (!this->comment().IsInitialized()) return false;
  }
  return true;
}

void DrawableArchive::Swap(DrawableArchive* other) {
  if (other != this) {
    std::swap(geometry_, other->geometry_);
    std::swap(parent_, other->parent_);
    std::swap(exterior_text_wrap_, other->exterior_text_wrap_);
    std::swap(hyperlink_url_, other->hyperlink_url_);
    std::swap(locked_, other->locked_);
    std::swap(comment_, other->comment_);
    std::swap(aspect_ratio_locked_, other->aspect_ratio_locked_);
    std::swap(accessibility_description_, other->accessibility_description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DrawableArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DrawableArchive_descriptor_;
  metadata.reflection = DrawableArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerArchive::kGeometryFieldNumber;
const int ContainerArchive::kParentFieldNumber;
const int ContainerArchive::kChildrenFieldNumber;
#endif  // !_MSC_VER

ContainerArchive::ContainerArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerArchive::InitAsDefaultInstance() {
  geometry_ = const_cast< ::TSD::GeometryArchive*>(&::TSD::GeometryArchive::default_instance());
  parent_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ContainerArchive::ContainerArchive(const ContainerArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerArchive::SharedCtor() {
  _cached_size_ = 0;
  geometry_ = NULL;
  parent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerArchive::~ContainerArchive() {
  SharedDtor();
}

void ContainerArchive::SharedDtor() {
  if (this != default_instance_) {
    delete geometry_;
    delete parent_;
  }
}

void ContainerArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerArchive_descriptor_;
}

const ContainerArchive& ContainerArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

ContainerArchive* ContainerArchive::default_instance_ = NULL;

ContainerArchive* ContainerArchive::New() const {
  return new ContainerArchive;
}

void ContainerArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_geometry()) {
      if (geometry_ != NULL) geometry_->::TSD::GeometryArchive::Clear();
    }
    if (has_parent()) {
      if (parent_ != NULL) parent_->::TSP::Reference::Clear();
    }
  }
  children_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSD.GeometryArchive geometry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geometry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_parent;
        break;
      }

      // optional .TSP.Reference parent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_children;
        break;
      }

      // repeated .TSP.Reference children = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_children;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSD.GeometryArchive geometry = 1;
  if (has_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->geometry(), output);
  }

  // optional .TSP.Reference parent = 2;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->parent(), output);
  }

  // repeated .TSP.Reference children = 3;
  for (int i = 0; i < this->children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->children(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSD.GeometryArchive geometry = 1;
  if (has_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->geometry(), target);
  }

  // optional .TSP.Reference parent = 2;
  if (has_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->parent(), target);
  }

  // repeated .TSP.Reference children = 3;
  for (int i = 0; i < this->children_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->children(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSD.GeometryArchive geometry = 1;
    if (has_geometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geometry());
    }

    // optional .TSP.Reference parent = 2;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parent());
    }

  }
  // repeated .TSP.Reference children = 3;
  total_size += 1 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerArchive::MergeFrom(const ContainerArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  children_.MergeFrom(from.children_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_geometry()) {
      mutable_geometry()->::TSD::GeometryArchive::MergeFrom(from.geometry());
    }
    if (from.has_parent()) {
      mutable_parent()->::TSP::Reference::MergeFrom(from.parent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerArchive::CopyFrom(const ContainerArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerArchive::IsInitialized() const {

  if (has_geometry()) {
    if (!this->geometry().IsInitialized()) return false;
  }
  if (has_parent()) {
    if (!this->parent().IsInitialized()) return false;
  }
  for (int i = 0; i < children_size(); i++) {
    if (!this->children(i).IsInitialized()) return false;
  }
  return true;
}

void ContainerArchive::Swap(ContainerArchive* other) {
  if (other != this) {
    std::swap(geometry_, other->geometry_);
    std::swap(parent_, other->parent_);
    children_.Swap(&other->children_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerArchive_descriptor_;
  metadata.reflection = ContainerArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupArchive::kSuperFieldNumber;
const int GroupArchive::kChildrenFieldNumber;
#endif  // !_MSC_VER

GroupArchive::GroupArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSD::DrawableArchive*>(&::TSD::DrawableArchive::default_instance());
}

GroupArchive::GroupArchive(const GroupArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupArchive::~GroupArchive() {
  SharedDtor();
}

void GroupArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
  }
}

void GroupArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupArchive_descriptor_;
}

const GroupArchive& GroupArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

GroupArchive* GroupArchive::default_instance_ = NULL;

GroupArchive* GroupArchive::New() const {
  return new GroupArchive;
}

void GroupArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSD::DrawableArchive::Clear();
    }
  }
  children_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSD.DrawableArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_children;
        break;
      }

      // repeated .TSP.Reference children = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_children;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSD.DrawableArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // repeated .TSP.Reference children = 2;
  for (int i = 0; i < this->children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->children(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSD.DrawableArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // repeated .TSP.Reference children = 2;
  for (int i = 0; i < this->children_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->children(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSD.DrawableArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

  }
  // repeated .TSP.Reference children = 2;
  total_size += 1 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupArchive::MergeFrom(const GroupArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  children_.MergeFrom(from.children_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSD::DrawableArchive::MergeFrom(from.super());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupArchive::CopyFrom(const GroupArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  for (int i = 0; i < children_size(); i++) {
    if (!this->children(i).IsInitialized()) return false;
  }
  return true;
}

void GroupArchive::Swap(GroupArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    children_.Swap(&other->children_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupArchive_descriptor_;
  metadata.reflection = GroupArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShapeArchive::kSuperFieldNumber;
const int ShapeArchive::kStyleFieldNumber;
const int ShapeArchive::kPathsourceFieldNumber;
const int ShapeArchive::kHeadLineEndFieldNumber;
const int ShapeArchive::kTailLineEndFieldNumber;
#endif  // !_MSC_VER

ShapeArchive::ShapeArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShapeArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSD::DrawableArchive*>(&::TSD::DrawableArchive::default_instance());
  style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  pathsource_ = const_cast< ::TSD::PathSourceArchive*>(&::TSD::PathSourceArchive::default_instance());
  head_line_end_ = const_cast< ::TSD::LineEndArchive*>(&::TSD::LineEndArchive::default_instance());
  tail_line_end_ = const_cast< ::TSD::LineEndArchive*>(&::TSD::LineEndArchive::default_instance());
}

ShapeArchive::ShapeArchive(const ShapeArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShapeArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  style_ = NULL;
  pathsource_ = NULL;
  head_line_end_ = NULL;
  tail_line_end_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShapeArchive::~ShapeArchive() {
  SharedDtor();
}

void ShapeArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete style_;
    delete pathsource_;
    delete head_line_end_;
    delete tail_line_end_;
  }
}

void ShapeArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShapeArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShapeArchive_descriptor_;
}

const ShapeArchive& ShapeArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

ShapeArchive* ShapeArchive::default_instance_ = NULL;

ShapeArchive* ShapeArchive::New() const {
  return new ShapeArchive;
}

void ShapeArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSD::DrawableArchive::Clear();
    }
    if (has_style()) {
      if (style_ != NULL) style_->::TSP::Reference::Clear();
    }
    if (has_pathsource()) {
      if (pathsource_ != NULL) pathsource_->::TSD::PathSourceArchive::Clear();
    }
    if (has_head_line_end()) {
      if (head_line_end_ != NULL) head_line_end_->::TSD::LineEndArchive::Clear();
    }
    if (has_tail_line_end()) {
      if (tail_line_end_ != NULL) tail_line_end_->::TSD::LineEndArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShapeArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSD.DrawableArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_style;
        break;
      }

      // optional .TSP.Reference style = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pathsource;
        break;
      }

      // optional .TSD.PathSourceArchive pathsource = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pathsource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pathsource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_head_line_end;
        break;
      }

      // optional .TSD.LineEndArchive head_line_end = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head_line_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head_line_end()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tail_line_end;
        break;
      }

      // optional .TSD.LineEndArchive tail_line_end = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tail_line_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tail_line_end()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShapeArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSD.DrawableArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference style = 2;
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->style(), output);
  }

  // optional .TSD.PathSourceArchive pathsource = 3;
  if (has_pathsource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pathsource(), output);
  }

  // optional .TSD.LineEndArchive head_line_end = 4;
  if (has_head_line_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->head_line_end(), output);
  }

  // optional .TSD.LineEndArchive tail_line_end = 5;
  if (has_tail_line_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tail_line_end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShapeArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSD.DrawableArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference style = 2;
  if (has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->style(), target);
  }

  // optional .TSD.PathSourceArchive pathsource = 3;
  if (has_pathsource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pathsource(), target);
  }

  // optional .TSD.LineEndArchive head_line_end = 4;
  if (has_head_line_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->head_line_end(), target);
  }

  // optional .TSD.LineEndArchive tail_line_end = 5;
  if (has_tail_line_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tail_line_end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShapeArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSD.DrawableArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference style = 2;
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->style());
    }

    // optional .TSD.PathSourceArchive pathsource = 3;
    if (has_pathsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pathsource());
    }

    // optional .TSD.LineEndArchive head_line_end = 4;
    if (has_head_line_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head_line_end());
    }

    // optional .TSD.LineEndArchive tail_line_end = 5;
    if (has_tail_line_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tail_line_end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShapeArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShapeArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShapeArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShapeArchive::MergeFrom(const ShapeArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSD::DrawableArchive::MergeFrom(from.super());
    }
    if (from.has_style()) {
      mutable_style()->::TSP::Reference::MergeFrom(from.style());
    }
    if (from.has_pathsource()) {
      mutable_pathsource()->::TSD::PathSourceArchive::MergeFrom(from.pathsource());
    }
    if (from.has_head_line_end()) {
      mutable_head_line_end()->::TSD::LineEndArchive::MergeFrom(from.head_line_end());
    }
    if (from.has_tail_line_end()) {
      mutable_tail_line_end()->::TSD::LineEndArchive::MergeFrom(from.tail_line_end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShapeArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeArchive::CopyFrom(const ShapeArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_style()) {
    if (!this->style().IsInitialized()) return false;
  }
  if (has_pathsource()) {
    if (!this->pathsource().IsInitialized()) return false;
  }
  if (has_head_line_end()) {
    if (!this->head_line_end().IsInitialized()) return false;
  }
  if (has_tail_line_end()) {
    if (!this->tail_line_end().IsInitialized()) return false;
  }
  return true;
}

void ShapeArchive::Swap(ShapeArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(style_, other->style_);
    std::swap(pathsource_, other->pathsource_);
    std::swap(head_line_end_, other->head_line_end_);
    std::swap(tail_line_end_, other->tail_line_end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShapeArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShapeArchive_descriptor_;
  metadata.reflection = ShapeArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectionLineArchive::kSuperFieldNumber;
const int ConnectionLineArchive::kConnectedFromFieldNumber;
const int ConnectionLineArchive::kConnectedToFieldNumber;
#endif  // !_MSC_VER

ConnectionLineArchive::ConnectionLineArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnectionLineArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSD::ShapeArchive*>(&::TSD::ShapeArchive::default_instance());
  connected_from_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  connected_to_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ConnectionLineArchive::ConnectionLineArchive(const ConnectionLineArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectionLineArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  connected_from_ = NULL;
  connected_to_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectionLineArchive::~ConnectionLineArchive() {
  SharedDtor();
}

void ConnectionLineArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete connected_from_;
    delete connected_to_;
  }
}

void ConnectionLineArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectionLineArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectionLineArchive_descriptor_;
}

const ConnectionLineArchive& ConnectionLineArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

ConnectionLineArchive* ConnectionLineArchive::default_instance_ = NULL;

ConnectionLineArchive* ConnectionLineArchive::New() const {
  return new ConnectionLineArchive;
}

void ConnectionLineArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSD::ShapeArchive::Clear();
    }
    if (has_connected_from()) {
      if (connected_from_ != NULL) connected_from_->::TSP::Reference::Clear();
    }
    if (has_connected_to()) {
      if (connected_to_ != NULL) connected_to_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectionLineArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSD.ShapeArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_connected_from;
        break;
      }

      // optional .TSP.Reference connected_from = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connected_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connected_from()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_connected_to;
        break;
      }

      // optional .TSP.Reference connected_to = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connected_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connected_to()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnectionLineArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSD.ShapeArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference connected_from = 2;
  if (has_connected_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->connected_from(), output);
  }

  // optional .TSP.Reference connected_to = 3;
  if (has_connected_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->connected_to(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnectionLineArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSD.ShapeArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference connected_from = 2;
  if (has_connected_from()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->connected_from(), target);
  }

  // optional .TSP.Reference connected_to = 3;
  if (has_connected_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->connected_to(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnectionLineArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSD.ShapeArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.Reference connected_from = 2;
    if (has_connected_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connected_from());
    }

    // optional .TSP.Reference connected_to = 3;
    if (has_connected_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connected_to());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectionLineArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectionLineArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectionLineArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectionLineArchive::MergeFrom(const ConnectionLineArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSD::ShapeArchive::MergeFrom(from.super());
    }
    if (from.has_connected_from()) {
      mutable_connected_from()->::TSP::Reference::MergeFrom(from.connected_from());
    }
    if (from.has_connected_to()) {
      mutable_connected_to()->::TSP::Reference::MergeFrom(from.connected_to());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectionLineArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionLineArchive::CopyFrom(const ConnectionLineArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionLineArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_connected_from()) {
    if (!this->connected_from().IsInitialized()) return false;
  }
  if (has_connected_to()) {
    if (!this->connected_to().IsInitialized()) return false;
  }
  return true;
}

void ConnectionLineArchive::Swap(ConnectionLineArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(connected_from_, other->connected_from_);
    std::swap(connected_to_, other->connected_to_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectionLineArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectionLineArchive_descriptor_;
  metadata.reflection = ConnectionLineArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImageArchive::kSuperFieldNumber;
const int ImageArchive::kDataFieldNumber;
const int ImageArchive::kStyleFieldNumber;
const int ImageArchive::kOriginalSizeFieldNumber;
const int ImageArchive::kMaskFieldNumber;
const int ImageArchive::kThumbnailDataFieldNumber;
const int ImageArchive::kFlagsFieldNumber;
const int ImageArchive::kOriginalDataFieldNumber;
const int ImageArchive::kNaturalSizeFieldNumber;
const int ImageArchive::kInstantAlphaPathFieldNumber;
const int ImageArchive::kImageAdjustmentsFieldNumber;
const int ImageArchive::kEnhancedImageDataFieldNumber;
const int ImageArchive::kAdjustedImageDataFieldNumber;
const int ImageArchive::kThumbnailAdjustedImageDataFieldNumber;
const int ImageArchive::kInterpretsUntaggedImageDataAsGenericFieldNumber;
const int ImageArchive::kDatabaseDataFieldNumber;
const int ImageArchive::kDatabaseThumbnailDataFieldNumber;
const int ImageArchive::kDatabaseOriginalDataFieldNumber;
#endif  // !_MSC_VER

ImageArchive::ImageArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImageArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSD::DrawableArchive*>(&::TSD::DrawableArchive::default_instance());
  data_ = const_cast< ::TSP::DataReference*>(&::TSP::DataReference::default_instance());
  style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  originalsize_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
  mask_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  thumbnaildata_ = const_cast< ::TSP::DataReference*>(&::TSP::DataReference::default_instance());
  originaldata_ = const_cast< ::TSP::DataReference*>(&::TSP::DataReference::default_instance());
  naturalsize_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
  instantalphapath_ = const_cast< ::TSP::Path*>(&::TSP::Path::default_instance());
  imageadjustments_ = const_cast< ::TSD::ImageAdjustmentsArchive*>(&::TSD::ImageAdjustmentsArchive::default_instance());
  enhancedimagedata_ = const_cast< ::TSP::DataReference*>(&::TSP::DataReference::default_instance());
  adjustedimagedata_ = const_cast< ::TSP::DataReference*>(&::TSP::DataReference::default_instance());
  thumbnailadjustedimagedata_ = const_cast< ::TSP::DataReference*>(&::TSP::DataReference::default_instance());
  database_data_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  database_thumbnaildata_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  database_originaldata_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

ImageArchive::ImageArchive(const ImageArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImageArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  data_ = NULL;
  style_ = NULL;
  originalsize_ = NULL;
  mask_ = NULL;
  thumbnaildata_ = NULL;
  flags_ = 0u;
  originaldata_ = NULL;
  naturalsize_ = NULL;
  instantalphapath_ = NULL;
  imageadjustments_ = NULL;
  enhancedimagedata_ = NULL;
  adjustedimagedata_ = NULL;
  thumbnailadjustedimagedata_ = NULL;
  interpretsuntaggedimagedataasgeneric_ = false;
  database_data_ = NULL;
  database_thumbnaildata_ = NULL;
  database_originaldata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageArchive::~ImageArchive() {
  SharedDtor();
}

void ImageArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete data_;
    delete style_;
    delete originalsize_;
    delete mask_;
    delete thumbnaildata_;
    delete originaldata_;
    delete naturalsize_;
    delete instantalphapath_;
    delete imageadjustments_;
    delete enhancedimagedata_;
    delete adjustedimagedata_;
    delete thumbnailadjustedimagedata_;
    delete database_data_;
    delete database_thumbnaildata_;
    delete database_originaldata_;
  }
}

void ImageArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageArchive_descriptor_;
}

const ImageArchive& ImageArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

ImageArchive* ImageArchive::default_instance_ = NULL;

ImageArchive* ImageArchive::New() const {
  return new ImageArchive;
}

void ImageArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSD::DrawableArchive::Clear();
    }
    if (has_data()) {
      if (data_ != NULL) data_->::TSP::DataReference::Clear();
    }
    if (has_style()) {
      if (style_ != NULL) style_->::TSP::Reference::Clear();
    }
    if (has_originalsize()) {
      if (originalsize_ != NULL) originalsize_->::TSP::Size::Clear();
    }
    if (has_mask()) {
      if (mask_ != NULL) mask_->::TSP::Reference::Clear();
    }
    if (has_thumbnaildata()) {
      if (thumbnaildata_ != NULL) thumbnaildata_->::TSP::DataReference::Clear();
    }
    flags_ = 0u;
    if (has_originaldata()) {
      if (originaldata_ != NULL) originaldata_->::TSP::DataReference::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_naturalsize()) {
      if (naturalsize_ != NULL) naturalsize_->::TSP::Size::Clear();
    }
    if (has_instantalphapath()) {
      if (instantalphapath_ != NULL) instantalphapath_->::TSP::Path::Clear();
    }
    if (has_imageadjustments()) {
      if (imageadjustments_ != NULL) imageadjustments_->::TSD::ImageAdjustmentsArchive::Clear();
    }
    if (has_enhancedimagedata()) {
      if (enhancedimagedata_ != NULL) enhancedimagedata_->::TSP::DataReference::Clear();
    }
    if (has_adjustedimagedata()) {
      if (adjustedimagedata_ != NULL) adjustedimagedata_->::TSP::DataReference::Clear();
    }
    if (has_thumbnailadjustedimagedata()) {
      if (thumbnailadjustedimagedata_ != NULL) thumbnailadjustedimagedata_->::TSP::DataReference::Clear();
    }
    interpretsuntaggedimagedataasgeneric_ = false;
    if (has_database_data()) {
      if (database_data_ != NULL) database_data_->::TSP::Reference::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_database_thumbnaildata()) {
      if (database_thumbnaildata_ != NULL) database_thumbnaildata_->::TSP::Reference::Clear();
    }
    if (has_database_originaldata()) {
      if (database_originaldata_ != NULL) database_originaldata_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSD.DrawableArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_database_data;
        break;
      }

      // optional .TSP.Reference database_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_database_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_database_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_style;
        break;
      }

      // optional .TSP.Reference style = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_originalSize;
        break;
      }

      // optional .TSP.Size originalSize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_originalSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_originalsize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_mask;
        break;
      }

      // optional .TSP.Reference mask = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mask()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_database_thumbnailData;
        break;
      }

      // optional .TSP.Reference database_thumbnailData = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_database_thumbnailData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_database_thumbnaildata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_database_originalData;
        break;
      }

      // optional .TSP.Reference database_originalData = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_database_originalData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_database_originaldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_naturalSize;
        break;
      }

      // optional .TSP.Size naturalSize = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_naturalSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_naturalsize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_instantAlphaPath;
        break;
      }

      // optional .TSP.Path instantAlphaPath = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instantAlphaPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instantalphapath()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_data;
        break;
      }

      // optional .TSP.DataReference data = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_thumbnailData;
        break;
      }

      // optional .TSP.DataReference thumbnailData = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thumbnailData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thumbnaildata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_originalData;
        break;
      }

      // optional .TSP.DataReference originalData = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_originalData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_originaldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_imageAdjustments;
        break;
      }

      // optional .TSD.ImageAdjustmentsArchive imageAdjustments = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imageAdjustments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imageadjustments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_adjustedImageData;
        break;
      }

      // optional .TSP.DataReference adjustedImageData = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adjustedImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adjustedimagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_thumbnailAdjustedImageData;
        break;
      }

      // optional .TSP.DataReference thumbnailAdjustedImageData = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thumbnailAdjustedImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thumbnailadjustedimagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_enhancedImageData;
        break;
      }

      // optional .TSP.DataReference enhancedImageData = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enhancedImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enhancedimagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_interpretsUntaggedImageDataAsGeneric;
        break;
      }

      // optional bool interpretsUntaggedImageDataAsGeneric = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interpretsUntaggedImageDataAsGeneric:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &interpretsuntaggedimagedataasgeneric_)));
          set_has_interpretsuntaggedimagedataasgeneric();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImageArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSD.DrawableArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference database_data = 2;
  if (has_database_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->database_data(), output);
  }

  // optional .TSP.Reference style = 3;
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->style(), output);
  }

  // optional .TSP.Size originalSize = 4;
  if (has_originalsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->originalsize(), output);
  }

  // optional .TSP.Reference mask = 5;
  if (has_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mask(), output);
  }

  // optional .TSP.Reference database_thumbnailData = 6;
  if (has_database_thumbnaildata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->database_thumbnaildata(), output);
  }

  // optional uint32 flags = 7;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->flags(), output);
  }

  // optional .TSP.Reference database_originalData = 8;
  if (has_database_originaldata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->database_originaldata(), output);
  }

  // optional .TSP.Size naturalSize = 9;
  if (has_naturalsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->naturalsize(), output);
  }

  // optional .TSP.Path instantAlphaPath = 10;
  if (has_instantalphapath()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->instantalphapath(), output);
  }

  // optional .TSP.DataReference data = 11;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->data(), output);
  }

  // optional .TSP.DataReference thumbnailData = 12;
  if (has_thumbnaildata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->thumbnaildata(), output);
  }

  // optional .TSP.DataReference originalData = 13;
  if (has_originaldata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->originaldata(), output);
  }

  // optional .TSD.ImageAdjustmentsArchive imageAdjustments = 14;
  if (has_imageadjustments()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->imageadjustments(), output);
  }

  // optional .TSP.DataReference adjustedImageData = 15;
  if (has_adjustedimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->adjustedimagedata(), output);
  }

  // optional .TSP.DataReference thumbnailAdjustedImageData = 16;
  if (has_thumbnailadjustedimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->thumbnailadjustedimagedata(), output);
  }

  // optional .TSP.DataReference enhancedImageData = 17;
  if (has_enhancedimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->enhancedimagedata(), output);
  }

  // optional bool interpretsUntaggedImageDataAsGeneric = 18;
  if (has_interpretsuntaggedimagedataasgeneric()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->interpretsuntaggedimagedataasgeneric(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImageArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSD.DrawableArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference database_data = 2;
  if (has_database_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->database_data(), target);
  }

  // optional .TSP.Reference style = 3;
  if (has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->style(), target);
  }

  // optional .TSP.Size originalSize = 4;
  if (has_originalsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->originalsize(), target);
  }

  // optional .TSP.Reference mask = 5;
  if (has_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->mask(), target);
  }

  // optional .TSP.Reference database_thumbnailData = 6;
  if (has_database_thumbnaildata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->database_thumbnaildata(), target);
  }

  // optional uint32 flags = 7;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->flags(), target);
  }

  // optional .TSP.Reference database_originalData = 8;
  if (has_database_originaldata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->database_originaldata(), target);
  }

  // optional .TSP.Size naturalSize = 9;
  if (has_naturalsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->naturalsize(), target);
  }

  // optional .TSP.Path instantAlphaPath = 10;
  if (has_instantalphapath()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->instantalphapath(), target);
  }

  // optional .TSP.DataReference data = 11;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->data(), target);
  }

  // optional .TSP.DataReference thumbnailData = 12;
  if (has_thumbnaildata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->thumbnaildata(), target);
  }

  // optional .TSP.DataReference originalData = 13;
  if (has_originaldata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->originaldata(), target);
  }

  // optional .TSD.ImageAdjustmentsArchive imageAdjustments = 14;
  if (has_imageadjustments()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->imageadjustments(), target);
  }

  // optional .TSP.DataReference adjustedImageData = 15;
  if (has_adjustedimagedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->adjustedimagedata(), target);
  }

  // optional .TSP.DataReference thumbnailAdjustedImageData = 16;
  if (has_thumbnailadjustedimagedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->thumbnailadjustedimagedata(), target);
  }

  // optional .TSP.DataReference enhancedImageData = 17;
  if (has_enhancedimagedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->enhancedimagedata(), target);
  }

  // optional bool interpretsUntaggedImageDataAsGeneric = 18;
  if (has_interpretsuntaggedimagedataasgeneric()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->interpretsuntaggedimagedataasgeneric(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImageArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSD.DrawableArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.DataReference data = 11;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional .TSP.Reference style = 3;
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->style());
    }

    // optional .TSP.Size originalSize = 4;
    if (has_originalsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->originalsize());
    }

    // optional .TSP.Reference mask = 5;
    if (has_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mask());
    }

    // optional .TSP.DataReference thumbnailData = 12;
    if (has_thumbnaildata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->thumbnaildata());
    }

    // optional uint32 flags = 7;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional .TSP.DataReference originalData = 13;
    if (has_originaldata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->originaldata());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TSP.Size naturalSize = 9;
    if (has_naturalsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->naturalsize());
    }

    // optional .TSP.Path instantAlphaPath = 10;
    if (has_instantalphapath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instantalphapath());
    }

    // optional .TSD.ImageAdjustmentsArchive imageAdjustments = 14;
    if (has_imageadjustments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->imageadjustments());
    }

    // optional .TSP.DataReference enhancedImageData = 17;
    if (has_enhancedimagedata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enhancedimagedata());
    }

    // optional .TSP.DataReference adjustedImageData = 15;
    if (has_adjustedimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adjustedimagedata());
    }

    // optional .TSP.DataReference thumbnailAdjustedImageData = 16;
    if (has_thumbnailadjustedimagedata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->thumbnailadjustedimagedata());
    }

    // optional bool interpretsUntaggedImageDataAsGeneric = 18;
    if (has_interpretsuntaggedimagedataasgeneric()) {
      total_size += 2 + 1;
    }

    // optional .TSP.Reference database_data = 2;
    if (has_database_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->database_data());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .TSP.Reference database_thumbnailData = 6;
    if (has_database_thumbnaildata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->database_thumbnaildata());
    }

    // optional .TSP.Reference database_originalData = 8;
    if (has_database_originaldata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->database_originaldata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageArchive::MergeFrom(const ImageArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSD::DrawableArchive::MergeFrom(from.super());
    }
    if (from.has_data()) {
      mutable_data()->::TSP::DataReference::MergeFrom(from.data());
    }
    if (from.has_style()) {
      mutable_style()->::TSP::Reference::MergeFrom(from.style());
    }
    if (from.has_originalsize()) {
      mutable_originalsize()->::TSP::Size::MergeFrom(from.originalsize());
    }
    if (from.has_mask()) {
      mutable_mask()->::TSP::Reference::MergeFrom(from.mask());
    }
    if (from.has_thumbnaildata()) {
      mutable_thumbnaildata()->::TSP::DataReference::MergeFrom(from.thumbnaildata());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_originaldata()) {
      mutable_originaldata()->::TSP::DataReference::MergeFrom(from.originaldata());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_naturalsize()) {
      mutable_naturalsize()->::TSP::Size::MergeFrom(from.naturalsize());
    }
    if (from.has_instantalphapath()) {
      mutable_instantalphapath()->::TSP::Path::MergeFrom(from.instantalphapath());
    }
    if (from.has_imageadjustments()) {
      mutable_imageadjustments()->::TSD::ImageAdjustmentsArchive::MergeFrom(from.imageadjustments());
    }
    if (from.has_enhancedimagedata()) {
      mutable_enhancedimagedata()->::TSP::DataReference::MergeFrom(from.enhancedimagedata());
    }
    if (from.has_adjustedimagedata()) {
      mutable_adjustedimagedata()->::TSP::DataReference::MergeFrom(from.adjustedimagedata());
    }
    if (from.has_thumbnailadjustedimagedata()) {
      mutable_thumbnailadjustedimagedata()->::TSP::DataReference::MergeFrom(from.thumbnailadjustedimagedata());
    }
    if (from.has_interpretsuntaggedimagedataasgeneric()) {
      set_interpretsuntaggedimagedataasgeneric(from.interpretsuntaggedimagedataasgeneric());
    }
    if (from.has_database_data()) {
      mutable_database_data()->::TSP::Reference::MergeFrom(from.database_data());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_database_thumbnaildata()) {
      mutable_database_thumbnaildata()->::TSP::Reference::MergeFrom(from.database_thumbnaildata());
    }
    if (from.has_database_originaldata()) {
      mutable_database_originaldata()->::TSP::Reference::MergeFrom(from.database_originaldata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageArchive::CopyFrom(const ImageArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  if (has_style()) {
    if (!this->style().IsInitialized()) return false;
  }
  if (has_originalsize()) {
    if (!this->originalsize().IsInitialized()) return false;
  }
  if (has_mask()) {
    if (!this->mask().IsInitialized()) return false;
  }
  if (has_thumbnaildata()) {
    if (!this->thumbnaildata().IsInitialized()) return false;
  }
  if (has_originaldata()) {
    if (!this->originaldata().IsInitialized()) return false;
  }
  if (has_naturalsize()) {
    if (!this->naturalsize().IsInitialized()) return false;
  }
  if (has_instantalphapath()) {
    if (!this->instantalphapath().IsInitialized()) return false;
  }
  if (has_enhancedimagedata()) {
    if (!this->enhancedimagedata().IsInitialized()) return false;
  }
  if (has_adjustedimagedata()) {
    if (!this->adjustedimagedata().IsInitialized()) return false;
  }
  if (has_thumbnailadjustedimagedata()) {
    if (!this->thumbnailadjustedimagedata().IsInitialized()) return false;
  }
  if (has_database_data()) {
    if (!this->database_data().IsInitialized()) return false;
  }
  if (has_database_thumbnaildata()) {
    if (!this->database_thumbnaildata().IsInitialized()) return false;
  }
  if (has_database_originaldata()) {
    if (!this->database_originaldata().IsInitialized()) return false;
  }
  return true;
}

void ImageArchive::Swap(ImageArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(data_, other->data_);
    std::swap(style_, other->style_);
    std::swap(originalsize_, other->originalsize_);
    std::swap(mask_, other->mask_);
    std::swap(thumbnaildata_, other->thumbnaildata_);
    std::swap(flags_, other->flags_);
    std::swap(originaldata_, other->originaldata_);
    std::swap(naturalsize_, other->naturalsize_);
    std::swap(instantalphapath_, other->instantalphapath_);
    std::swap(imageadjustments_, other->imageadjustments_);
    std::swap(enhancedimagedata_, other->enhancedimagedata_);
    std::swap(adjustedimagedata_, other->adjustedimagedata_);
    std::swap(thumbnailadjustedimagedata_, other->thumbnailadjustedimagedata_);
    std::swap(interpretsuntaggedimagedataasgeneric_, other->interpretsuntaggedimagedataasgeneric_);
    std::swap(database_data_, other->database_data_);
    std::swap(database_thumbnaildata_, other->database_thumbnaildata_);
    std::swap(database_originaldata_, other->database_originaldata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageArchive_descriptor_;
  metadata.reflection = ImageArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MaskArchive::kSuperFieldNumber;
const int MaskArchive::kPathsourceFieldNumber;
#endif  // !_MSC_VER

MaskArchive::MaskArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MaskArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSD::DrawableArchive*>(&::TSD::DrawableArchive::default_instance());
  pathsource_ = const_cast< ::TSD::PathSourceArchive*>(&::TSD::PathSourceArchive::default_instance());
}

MaskArchive::MaskArchive(const MaskArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MaskArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  pathsource_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaskArchive::~MaskArchive() {
  SharedDtor();
}

void MaskArchive::SharedDtor() {
  if (this != default_instance_) {
    delete super_;
    delete pathsource_;
  }
}

void MaskArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaskArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaskArchive_descriptor_;
}

const MaskArchive& MaskArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

MaskArchive* MaskArchive::default_instance_ = NULL;

MaskArchive* MaskArchive::New() const {
  return new MaskArchive;
}

void MaskArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSD::DrawableArchive::Clear();
    }
    if (has_pathsource()) {
      if (pathsource_ != NULL) pathsource_->::TSD::PathSourceArchive::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MaskArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSD.DrawableArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pathsource;
        break;
      }

      // optional .TSD.PathSourceArchive pathsource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pathsource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pathsource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MaskArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSD.DrawableArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSD.PathSourceArchive pathsource = 2;
  if (has_pathsource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pathsource(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MaskArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSD.DrawableArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSD.PathSourceArchive pathsource = 2;
  if (has_pathsource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pathsource(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MaskArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSD.DrawableArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSD.PathSourceArchive pathsource = 2;
    if (has_pathsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pathsource());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaskArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MaskArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaskArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaskArchive::MergeFrom(const MaskArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSD::DrawableArchive::MergeFrom(from.super());
    }
    if (from.has_pathsource()) {
      mutable_pathsource()->::TSD::PathSourceArchive::MergeFrom(from.pathsource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MaskArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaskArchive::CopyFrom(const MaskArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaskArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_pathsource()) {
    if (!this->pathsource().IsInitialized()) return false;
  }
  return true;
}

void MaskArchive::Swap(MaskArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(pathsource_, other->pathsource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MaskArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaskArchive_descriptor_;
  metadata.reflection = MaskArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MovieArchive_MovieLoopOption_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MovieArchive_MovieLoopOption_descriptor_;
}
bool MovieArchive_MovieLoopOption_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MovieArchive_MovieLoopOption MovieArchive::None;
const MovieArchive_MovieLoopOption MovieArchive::Repeat;
const MovieArchive_MovieLoopOption MovieArchive::BackAndForth;
const MovieArchive_MovieLoopOption MovieArchive::MovieLoopOption_MIN;
const MovieArchive_MovieLoopOption MovieArchive::MovieLoopOption_MAX;
const int MovieArchive::MovieLoopOption_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MovieArchive::kSuperFieldNumber;
const int MovieArchive::kMovieDataFieldNumber;
const int MovieArchive::kImportedAuxiliaryMovieDataFieldNumber;
const int MovieArchive::kMovieRemoteURLFieldNumber;
const int MovieArchive::kStartTimeFieldNumber;
const int MovieArchive::kEndTimeFieldNumber;
const int MovieArchive::kPosterTimeFieldNumber;
const int MovieArchive::kLoopOptionAsIntegerFieldNumber;
const int MovieArchive::kLoopOptionFieldNumber;
const int MovieArchive::kVolumeFieldNumber;
const int MovieArchive::kAutoPlayFieldNumber;
const int MovieArchive::kAudioOnlyFieldNumber;
const int MovieArchive::kStreamingFieldNumber;
const int MovieArchive::kPosterImageDataFieldNumber;
const int MovieArchive::kAudioOnlyImageDataFieldNumber;
const int MovieArchive::kPosterImageGeneratedWithAlphaSupportFieldNumber;
const int MovieArchive::kPlayableStateFieldNumber;
const int MovieArchive::kFlagsFieldNumber;
const int MovieArchive::kDatabaseMovieDataFieldNumber;
const int MovieArchive::kDatabasePosterImageDataFieldNumber;
const int MovieArchive::kDatabaseAudioOnlyImageDataFieldNumber;
const int MovieArchive::kStyleFieldNumber;
const int MovieArchive::kOriginalSizeFieldNumber;
const int MovieArchive::kNaturalSizeFieldNumber;
#endif  // !_MSC_VER

MovieArchive::MovieArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MovieArchive::InitAsDefaultInstance() {
  super_ = const_cast< ::TSD::DrawableArchive*>(&::TSD::DrawableArchive::default_instance());
  moviedata_ = const_cast< ::TSP::DataReference*>(&::TSP::DataReference::default_instance());
  importedauxiliarymoviedata_ = const_cast< ::TSP::DataReference*>(&::TSP::DataReference::default_instance());
  posterimagedata_ = const_cast< ::TSP::DataReference*>(&::TSP::DataReference::default_instance());
  audioonlyimagedata_ = const_cast< ::TSP::DataReference*>(&::TSP::DataReference::default_instance());
  database_moviedata_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  database_posterimagedata_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  database_audioonlyimagedata_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  style_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
  originalsize_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
  naturalsize_ = const_cast< ::TSP::Size*>(&::TSP::Size::default_instance());
}

MovieArchive::MovieArchive(const MovieArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MovieArchive::SharedCtor() {
  _cached_size_ = 0;
  super_ = NULL;
  moviedata_ = NULL;
  importedauxiliarymoviedata_ = NULL;
  movieremoteurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starttime_ = 0;
  endtime_ = 0;
  postertime_ = 0;
  loopoptionasinteger_ = 0u;
  loop_option_ = 0;
  volume_ = 0;
  autoplay_ = false;
  audioonly_ = false;
  streaming_ = false;
  posterimagedata_ = NULL;
  audioonlyimagedata_ = NULL;
  poster_image_generated_with_alpha_support_ = false;
  playablestate_ = 0u;
  flags_ = 0u;
  database_moviedata_ = NULL;
  database_posterimagedata_ = NULL;
  database_audioonlyimagedata_ = NULL;
  style_ = NULL;
  originalsize_ = NULL;
  naturalsize_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MovieArchive::~MovieArchive() {
  SharedDtor();
}

void MovieArchive::SharedDtor() {
  if (movieremoteurl_ != &::google::protobuf::internal::kEmptyString) {
    delete movieremoteurl_;
  }
  if (this != default_instance_) {
    delete super_;
    delete moviedata_;
    delete importedauxiliarymoviedata_;
    delete posterimagedata_;
    delete audioonlyimagedata_;
    delete database_moviedata_;
    delete database_posterimagedata_;
    delete database_audioonlyimagedata_;
    delete style_;
    delete originalsize_;
    delete naturalsize_;
  }
}

void MovieArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MovieArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MovieArchive_descriptor_;
}

const MovieArchive& MovieArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

MovieArchive* MovieArchive::default_instance_ = NULL;

MovieArchive* MovieArchive::New() const {
  return new MovieArchive;
}

void MovieArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_super()) {
      if (super_ != NULL) super_->::TSD::DrawableArchive::Clear();
    }
    if (has_moviedata()) {
      if (moviedata_ != NULL) moviedata_->::TSP::DataReference::Clear();
    }
    if (has_importedauxiliarymoviedata()) {
      if (importedauxiliarymoviedata_ != NULL) importedauxiliarymoviedata_->::TSP::DataReference::Clear();
    }
    if (has_movieremoteurl()) {
      if (movieremoteurl_ != &::google::protobuf::internal::kEmptyString) {
        movieremoteurl_->clear();
      }
    }
    starttime_ = 0;
    endtime_ = 0;
    postertime_ = 0;
    loopoptionasinteger_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    loop_option_ = 0;
    volume_ = 0;
    autoplay_ = false;
    audioonly_ = false;
    streaming_ = false;
    if (has_posterimagedata()) {
      if (posterimagedata_ != NULL) posterimagedata_->::TSP::DataReference::Clear();
    }
    if (has_audioonlyimagedata()) {
      if (audioonlyimagedata_ != NULL) audioonlyimagedata_->::TSP::DataReference::Clear();
    }
    poster_image_generated_with_alpha_support_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    playablestate_ = 0u;
    flags_ = 0u;
    if (has_database_moviedata()) {
      if (database_moviedata_ != NULL) database_moviedata_->::TSP::Reference::Clear();
    }
    if (has_database_posterimagedata()) {
      if (database_posterimagedata_ != NULL) database_posterimagedata_->::TSP::Reference::Clear();
    }
    if (has_database_audioonlyimagedata()) {
      if (database_audioonlyimagedata_ != NULL) database_audioonlyimagedata_->::TSP::Reference::Clear();
    }
    if (has_style()) {
      if (style_ != NULL) style_->::TSP::Reference::Clear();
    }
    if (has_originalsize()) {
      if (originalsize_ != NULL) originalsize_->::TSP::Size::Clear();
    }
    if (has_naturalsize()) {
      if (naturalsize_ != NULL) naturalsize_->::TSP::Size::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MovieArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TSD.DrawableArchive super = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_database_movieData;
        break;
      }

      // optional .TSP.Reference database_movieData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_database_movieData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_database_moviedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_startTime;
        break;
      }

      // optional float startTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_endTime;
        break;
      }

      // optional float endTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_posterTime;
        break;
      }

      // optional float posterTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posterTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &postertime_)));
          set_has_postertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_loopOptionAsInteger;
        break;
      }

      // optional uint32 loopOptionAsInteger = 6 [deprecated = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loopOptionAsInteger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loopoptionasinteger_)));
          set_has_loopoptionasinteger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_volume;
        break;
      }

      // optional float volume = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_autoPlay;
        break;
      }

      // optional bool autoPlay = 8 [deprecated = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoPlay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autoplay_)));
          set_has_autoplay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_audioOnly;
        break;
      }

      // optional bool audioOnly = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_audioOnly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &audioonly_)));
          set_has_audioonly();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_database_posterImageData;
        break;
      }

      // optional .TSP.Reference database_posterImageData = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_database_posterImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_database_posterimagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_database_audioOnlyImageData;
        break;
      }

      // optional .TSP.Reference database_audioOnlyImageData = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_database_audioOnlyImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_database_audioonlyimagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_playableState;
        break;
      }

      // optional uint32 playableState = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playableState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playablestate_)));
          set_has_playablestate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_movieData;
        break;
      }

      // optional .TSP.DataReference movieData = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_movieData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_moviedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_posterImageData;
        break;
      }

      // optional .TSP.DataReference posterImageData = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_posterImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_posterimagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_audioOnlyImageData;
        break;
      }

      // optional .TSP.DataReference audioOnlyImageData = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_audioOnlyImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audioonlyimagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_movieRemoteURL;
        break;
      }

      // optional string movieRemoteURL = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_movieRemoteURL:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_movieremoteurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->movieremoteurl().data(), this->movieremoteurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_streaming;
        break;
      }

      // optional bool streaming = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_streaming:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &streaming_)));
          set_has_streaming();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_style;
        break;
      }

      // optional .TSP.Reference style = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_style()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_originalSize;
        break;
      }

      // optional .TSP.Size originalSize = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_originalSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_originalsize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_naturalSize;
        break;
      }

      // optional .TSP.Size naturalSize = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_naturalSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_naturalsize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_importedAuxiliaryMovieData;
        break;
      }

      // optional .TSP.DataReference importedAuxiliaryMovieData = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_importedAuxiliaryMovieData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_importedauxiliarymoviedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_poster_image_generated_with_alpha_support;
        break;
      }

      // optional bool poster_image_generated_with_alpha_support = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poster_image_generated_with_alpha_support:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &poster_image_generated_with_alpha_support_)));
          set_has_poster_image_generated_with_alpha_support();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_loop_option;
        break;
      }

      // optional .TSD.MovieArchive.MovieLoopOption loop_option = 24 [default = None];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loop_option:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSD::MovieArchive_MovieLoopOption_IsValid(value)) {
            set_loop_option(static_cast< ::TSD::MovieArchive_MovieLoopOption >(value));
          } else {
            mutable_unknown_fields()->AddVarint(24, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MovieArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TSD.DrawableArchive super = 1;
  if (has_super()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->super(), output);
  }

  // optional .TSP.Reference database_movieData = 2;
  if (has_database_moviedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->database_moviedata(), output);
  }

  // optional float startTime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->starttime(), output);
  }

  // optional float endTime = 4;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->endtime(), output);
  }

  // optional float posterTime = 5;
  if (has_postertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->postertime(), output);
  }

  // optional uint32 loopOptionAsInteger = 6 [deprecated = true];
  if (has_loopoptionasinteger()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->loopoptionasinteger(), output);
  }

  // optional float volume = 7;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->volume(), output);
  }

  // optional bool autoPlay = 8 [deprecated = true];
  if (has_autoplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->autoplay(), output);
  }

  // optional bool audioOnly = 9;
  if (has_audioonly()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->audioonly(), output);
  }

  // optional .TSP.Reference database_posterImageData = 10;
  if (has_database_posterimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->database_posterimagedata(), output);
  }

  // optional .TSP.Reference database_audioOnlyImageData = 11;
  if (has_database_audioonlyimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->database_audioonlyimagedata(), output);
  }

  // optional uint32 playableState = 12;
  if (has_playablestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->playablestate(), output);
  }

  // optional uint32 flags = 13;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->flags(), output);
  }

  // optional .TSP.DataReference movieData = 14;
  if (has_moviedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->moviedata(), output);
  }

  // optional .TSP.DataReference posterImageData = 15;
  if (has_posterimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->posterimagedata(), output);
  }

  // optional .TSP.DataReference audioOnlyImageData = 16;
  if (has_audioonlyimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->audioonlyimagedata(), output);
  }

  // optional string movieRemoteURL = 17;
  if (has_movieremoteurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->movieremoteurl().data(), this->movieremoteurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->movieremoteurl(), output);
  }

  // optional bool streaming = 18;
  if (has_streaming()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->streaming(), output);
  }

  // optional .TSP.Reference style = 19;
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->style(), output);
  }

  // optional .TSP.Size originalSize = 20;
  if (has_originalsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->originalsize(), output);
  }

  // optional .TSP.Size naturalSize = 21;
  if (has_naturalsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->naturalsize(), output);
  }

  // optional .TSP.DataReference importedAuxiliaryMovieData = 22;
  if (has_importedauxiliarymoviedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->importedauxiliarymoviedata(), output);
  }

  // optional bool poster_image_generated_with_alpha_support = 23;
  if (has_poster_image_generated_with_alpha_support()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->poster_image_generated_with_alpha_support(), output);
  }

  // optional .TSD.MovieArchive.MovieLoopOption loop_option = 24 [default = None];
  if (has_loop_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->loop_option(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MovieArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TSD.DrawableArchive super = 1;
  if (has_super()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->super(), target);
  }

  // optional .TSP.Reference database_movieData = 2;
  if (has_database_moviedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->database_moviedata(), target);
  }

  // optional float startTime = 3;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->starttime(), target);
  }

  // optional float endTime = 4;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->endtime(), target);
  }

  // optional float posterTime = 5;
  if (has_postertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->postertime(), target);
  }

  // optional uint32 loopOptionAsInteger = 6 [deprecated = true];
  if (has_loopoptionasinteger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->loopoptionasinteger(), target);
  }

  // optional float volume = 7;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->volume(), target);
  }

  // optional bool autoPlay = 8 [deprecated = true];
  if (has_autoplay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->autoplay(), target);
  }

  // optional bool audioOnly = 9;
  if (has_audioonly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->audioonly(), target);
  }

  // optional .TSP.Reference database_posterImageData = 10;
  if (has_database_posterimagedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->database_posterimagedata(), target);
  }

  // optional .TSP.Reference database_audioOnlyImageData = 11;
  if (has_database_audioonlyimagedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->database_audioonlyimagedata(), target);
  }

  // optional uint32 playableState = 12;
  if (has_playablestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->playablestate(), target);
  }

  // optional uint32 flags = 13;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->flags(), target);
  }

  // optional .TSP.DataReference movieData = 14;
  if (has_moviedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->moviedata(), target);
  }

  // optional .TSP.DataReference posterImageData = 15;
  if (has_posterimagedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->posterimagedata(), target);
  }

  // optional .TSP.DataReference audioOnlyImageData = 16;
  if (has_audioonlyimagedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->audioonlyimagedata(), target);
  }

  // optional string movieRemoteURL = 17;
  if (has_movieremoteurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->movieremoteurl().data(), this->movieremoteurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->movieremoteurl(), target);
  }

  // optional bool streaming = 18;
  if (has_streaming()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->streaming(), target);
  }

  // optional .TSP.Reference style = 19;
  if (has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->style(), target);
  }

  // optional .TSP.Size originalSize = 20;
  if (has_originalsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->originalsize(), target);
  }

  // optional .TSP.Size naturalSize = 21;
  if (has_naturalsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->naturalsize(), target);
  }

  // optional .TSP.DataReference importedAuxiliaryMovieData = 22;
  if (has_importedauxiliarymoviedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->importedauxiliarymoviedata(), target);
  }

  // optional bool poster_image_generated_with_alpha_support = 23;
  if (has_poster_image_generated_with_alpha_support()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->poster_image_generated_with_alpha_support(), target);
  }

  // optional .TSD.MovieArchive.MovieLoopOption loop_option = 24 [default = None];
  if (has_loop_option()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->loop_option(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MovieArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TSD.DrawableArchive super = 1;
    if (has_super()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super());
    }

    // optional .TSP.DataReference movieData = 14;
    if (has_moviedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->moviedata());
    }

    // optional .TSP.DataReference importedAuxiliaryMovieData = 22;
    if (has_importedauxiliarymoviedata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->importedauxiliarymoviedata());
    }

    // optional string movieRemoteURL = 17;
    if (has_movieremoteurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->movieremoteurl());
    }

    // optional float startTime = 3;
    if (has_starttime()) {
      total_size += 1 + 4;
    }

    // optional float endTime = 4;
    if (has_endtime()) {
      total_size += 1 + 4;
    }

    // optional float posterTime = 5;
    if (has_postertime()) {
      total_size += 1 + 4;
    }

    // optional uint32 loopOptionAsInteger = 6 [deprecated = true];
    if (has_loopoptionasinteger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loopoptionasinteger());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TSD.MovieArchive.MovieLoopOption loop_option = 24 [default = None];
    if (has_loop_option()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->loop_option());
    }

    // optional float volume = 7;
    if (has_volume()) {
      total_size += 1 + 4;
    }

    // optional bool autoPlay = 8 [deprecated = true];
    if (has_autoplay()) {
      total_size += 1 + 1;
    }

    // optional bool audioOnly = 9;
    if (has_audioonly()) {
      total_size += 1 + 1;
    }

    // optional bool streaming = 18;
    if (has_streaming()) {
      total_size += 2 + 1;
    }

    // optional .TSP.DataReference posterImageData = 15;
    if (has_posterimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->posterimagedata());
    }

    // optional .TSP.DataReference audioOnlyImageData = 16;
    if (has_audioonlyimagedata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->audioonlyimagedata());
    }

    // optional bool poster_image_generated_with_alpha_support = 23;
    if (has_poster_image_generated_with_alpha_support()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 playableState = 12;
    if (has_playablestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playablestate());
    }

    // optional uint32 flags = 13;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional .TSP.Reference database_movieData = 2;
    if (has_database_moviedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->database_moviedata());
    }

    // optional .TSP.Reference database_posterImageData = 10;
    if (has_database_posterimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->database_posterimagedata());
    }

    // optional .TSP.Reference database_audioOnlyImageData = 11;
    if (has_database_audioonlyimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->database_audioonlyimagedata());
    }

    // optional .TSP.Reference style = 19;
    if (has_style()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->style());
    }

    // optional .TSP.Size originalSize = 20;
    if (has_originalsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->originalsize());
    }

    // optional .TSP.Size naturalSize = 21;
    if (has_naturalsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->naturalsize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MovieArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MovieArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MovieArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MovieArchive::MergeFrom(const MovieArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super()) {
      mutable_super()->::TSD::DrawableArchive::MergeFrom(from.super());
    }
    if (from.has_moviedata()) {
      mutable_moviedata()->::TSP::DataReference::MergeFrom(from.moviedata());
    }
    if (from.has_importedauxiliarymoviedata()) {
      mutable_importedauxiliarymoviedata()->::TSP::DataReference::MergeFrom(from.importedauxiliarymoviedata());
    }
    if (from.has_movieremoteurl()) {
      set_movieremoteurl(from.movieremoteurl());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_postertime()) {
      set_postertime(from.postertime());
    }
    if (from.has_loopoptionasinteger()) {
      set_loopoptionasinteger(from.loopoptionasinteger());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_loop_option()) {
      set_loop_option(from.loop_option());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_autoplay()) {
      set_autoplay(from.autoplay());
    }
    if (from.has_audioonly()) {
      set_audioonly(from.audioonly());
    }
    if (from.has_streaming()) {
      set_streaming(from.streaming());
    }
    if (from.has_posterimagedata()) {
      mutable_posterimagedata()->::TSP::DataReference::MergeFrom(from.posterimagedata());
    }
    if (from.has_audioonlyimagedata()) {
      mutable_audioonlyimagedata()->::TSP::DataReference::MergeFrom(from.audioonlyimagedata());
    }
    if (from.has_poster_image_generated_with_alpha_support()) {
      set_poster_image_generated_with_alpha_support(from.poster_image_generated_with_alpha_support());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_playablestate()) {
      set_playablestate(from.playablestate());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_database_moviedata()) {
      mutable_database_moviedata()->::TSP::Reference::MergeFrom(from.database_moviedata());
    }
    if (from.has_database_posterimagedata()) {
      mutable_database_posterimagedata()->::TSP::Reference::MergeFrom(from.database_posterimagedata());
    }
    if (from.has_database_audioonlyimagedata()) {
      mutable_database_audioonlyimagedata()->::TSP::Reference::MergeFrom(from.database_audioonlyimagedata());
    }
    if (from.has_style()) {
      mutable_style()->::TSP::Reference::MergeFrom(from.style());
    }
    if (from.has_originalsize()) {
      mutable_originalsize()->::TSP::Size::MergeFrom(from.originalsize());
    }
    if (from.has_naturalsize()) {
      mutable_naturalsize()->::TSP::Size::MergeFrom(from.naturalsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MovieArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovieArchive::CopyFrom(const MovieArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovieArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_super()) {
    if (!this->super().IsInitialized()) return false;
  }
  if (has_moviedata()) {
    if (!this->moviedata().IsInitialized()) return false;
  }
  if (has_importedauxiliarymoviedata()) {
    if (!this->importedauxiliarymoviedata().IsInitialized()) return false;
  }
  if (has_posterimagedata()) {
    if (!this->posterimagedata().IsInitialized()) return false;
  }
  if (has_audioonlyimagedata()) {
    if (!this->audioonlyimagedata().IsInitialized()) return false;
  }
  if (has_database_moviedata()) {
    if (!this->database_moviedata().IsInitialized()) return false;
  }
  if (has_database_posterimagedata()) {
    if (!this->database_posterimagedata().IsInitialized()) return false;
  }
  if (has_database_audioonlyimagedata()) {
    if (!this->database_audioonlyimagedata().IsInitialized()) return false;
  }
  if (has_style()) {
    if (!this->style().IsInitialized()) return false;
  }
  if (has_originalsize()) {
    if (!this->originalsize().IsInitialized()) return false;
  }
  if (has_naturalsize()) {
    if (!this->naturalsize().IsInitialized()) return false;
  }
  return true;
}

void MovieArchive::Swap(MovieArchive* other) {
  if (other != this) {
    std::swap(super_, other->super_);
    std::swap(moviedata_, other->moviedata_);
    std::swap(importedauxiliarymoviedata_, other->importedauxiliarymoviedata_);
    std::swap(movieremoteurl_, other->movieremoteurl_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(postertime_, other->postertime_);
    std::swap(loopoptionasinteger_, other->loopoptionasinteger_);
    std::swap(loop_option_, other->loop_option_);
    std::swap(volume_, other->volume_);
    std::swap(autoplay_, other->autoplay_);
    std::swap(audioonly_, other->audioonly_);
    std::swap(streaming_, other->streaming_);
    std::swap(posterimagedata_, other->posterimagedata_);
    std::swap(audioonlyimagedata_, other->audioonlyimagedata_);
    std::swap(poster_image_generated_with_alpha_support_, other->poster_image_generated_with_alpha_support_);
    std::swap(playablestate_, other->playablestate_);
    std::swap(flags_, other->flags_);
    std::swap(database_moviedata_, other->database_moviedata_);
    std::swap(database_posterimagedata_, other->database_posterimagedata_);
    std::swap(database_audioonlyimagedata_, other->database_audioonlyimagedata_);
    std::swap(style_, other->style_);
    std::swap(originalsize_, other->originalsize_);
    std::swap(naturalsize_, other->naturalsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MovieArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MovieArchive_descriptor_;
  metadata.reflection = MovieArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExteriorTextWrapArchive::kTypeFieldNumber;
const int ExteriorTextWrapArchive::kDirectionFieldNumber;
const int ExteriorTextWrapArchive::kFitTypeFieldNumber;
const int ExteriorTextWrapArchive::kMarginFieldNumber;
const int ExteriorTextWrapArchive::kAlphaThresholdFieldNumber;
const int ExteriorTextWrapArchive::kIsHtmlWrapFieldNumber;
#endif  // !_MSC_VER

ExteriorTextWrapArchive::ExteriorTextWrapArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExteriorTextWrapArchive::InitAsDefaultInstance() {
}

ExteriorTextWrapArchive::ExteriorTextWrapArchive(const ExteriorTextWrapArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExteriorTextWrapArchive::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  direction_ = 0u;
  fit_type_ = 0u;
  margin_ = 0;
  alpha_threshold_ = 0;
  is_html_wrap_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExteriorTextWrapArchive::~ExteriorTextWrapArchive() {
  SharedDtor();
}

void ExteriorTextWrapArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExteriorTextWrapArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExteriorTextWrapArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExteriorTextWrapArchive_descriptor_;
}

const ExteriorTextWrapArchive& ExteriorTextWrapArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

ExteriorTextWrapArchive* ExteriorTextWrapArchive::default_instance_ = NULL;

ExteriorTextWrapArchive* ExteriorTextWrapArchive::New() const {
  return new ExteriorTextWrapArchive;
}

void ExteriorTextWrapArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    direction_ = 0u;
    fit_type_ = 0u;
    margin_ = 0;
    alpha_threshold_ = 0;
    is_html_wrap_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExteriorTextWrapArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_direction;
        break;
      }

      // optional uint32 direction = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fit_type;
        break;
      }

      // optional uint32 fit_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fit_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fit_type_)));
          set_has_fit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_margin;
        break;
      }

      // optional float margin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &margin_)));
          set_has_margin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_alpha_threshold;
        break;
      }

      // optional float alpha_threshold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alpha_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_threshold_)));
          set_has_alpha_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_html_wrap;
        break;
      }

      // optional bool is_html_wrap = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_html_wrap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_html_wrap_)));
          set_has_is_html_wrap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExteriorTextWrapArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 direction = 2;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->direction(), output);
  }

  // optional uint32 fit_type = 3;
  if (has_fit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fit_type(), output);
  }

  // optional float margin = 4;
  if (has_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->margin(), output);
  }

  // optional float alpha_threshold = 5;
  if (has_alpha_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->alpha_threshold(), output);
  }

  // optional bool is_html_wrap = 6;
  if (has_is_html_wrap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_html_wrap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExteriorTextWrapArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 direction = 2;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->direction(), target);
  }

  // optional uint32 fit_type = 3;
  if (has_fit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fit_type(), target);
  }

  // optional float margin = 4;
  if (has_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->margin(), target);
  }

  // optional float alpha_threshold = 5;
  if (has_alpha_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->alpha_threshold(), target);
  }

  // optional bool is_html_wrap = 6;
  if (has_is_html_wrap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_html_wrap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExteriorTextWrapArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 direction = 2;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->direction());
    }

    // optional uint32 fit_type = 3;
    if (has_fit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fit_type());
    }

    // optional float margin = 4;
    if (has_margin()) {
      total_size += 1 + 4;
    }

    // optional float alpha_threshold = 5;
    if (has_alpha_threshold()) {
      total_size += 1 + 4;
    }

    // optional bool is_html_wrap = 6;
    if (has_is_html_wrap()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExteriorTextWrapArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExteriorTextWrapArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExteriorTextWrapArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExteriorTextWrapArchive::MergeFrom(const ExteriorTextWrapArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_fit_type()) {
      set_fit_type(from.fit_type());
    }
    if (from.has_margin()) {
      set_margin(from.margin());
    }
    if (from.has_alpha_threshold()) {
      set_alpha_threshold(from.alpha_threshold());
    }
    if (from.has_is_html_wrap()) {
      set_is_html_wrap(from.is_html_wrap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExteriorTextWrapArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExteriorTextWrapArchive::CopyFrom(const ExteriorTextWrapArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExteriorTextWrapArchive::IsInitialized() const {

  return true;
}

void ExteriorTextWrapArchive::Swap(ExteriorTextWrapArchive* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(direction_, other->direction_);
    std::swap(fit_type_, other->fit_type_);
    std::swap(margin_, other->margin_);
    std::swap(alpha_threshold_, other->alpha_threshold_);
    std::swap(is_html_wrap_, other->is_html_wrap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExteriorTextWrapArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExteriorTextWrapArchive_descriptor_;
  metadata.reflection = ExteriorTextWrapArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GuideArchive_GuideType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuideArchive_GuideType_descriptor_;
}
bool GuideArchive_GuideType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GuideArchive_GuideType GuideArchive::Horizontal;
const GuideArchive_GuideType GuideArchive::Vertical;
const GuideArchive_GuideType GuideArchive::GuideType_MIN;
const GuideArchive_GuideType GuideArchive::GuideType_MAX;
const int GuideArchive::GuideType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GuideArchive::kTypeFieldNumber;
const int GuideArchive::kOffsetFieldNumber;
const int GuideArchive::kStartFieldNumber;
const int GuideArchive::kEndFieldNumber;
const int GuideArchive::kDynamicFieldNumber;
const int GuideArchive::kInfiniteFieldNumber;
#endif  // !_MSC_VER

GuideArchive::GuideArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuideArchive::InitAsDefaultInstance() {
}

GuideArchive::GuideArchive(const GuideArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuideArchive::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  offset_ = 0;
  start_ = 0;
  end_ = 0;
  dynamic_ = false;
  infinite_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuideArchive::~GuideArchive() {
  SharedDtor();
}

void GuideArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuideArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuideArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuideArchive_descriptor_;
}

const GuideArchive& GuideArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

GuideArchive* GuideArchive::default_instance_ = NULL;

GuideArchive* GuideArchive::New() const {
  return new GuideArchive;
}

void GuideArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    offset_ = 0;
    start_ = 0;
    end_ = 0;
    dynamic_ = false;
    infinite_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuideArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSD.GuideArchive.GuideType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSD::GuideArchive_GuideType_IsValid(value)) {
            set_type(static_cast< ::TSD::GuideArchive_GuideType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_offset;
        break;
      }

      // optional float offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_start;
        break;
      }

      // optional float start = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_end;
        break;
      }

      // optional float end = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dynamic;
        break;
      }

      // optional bool dynamic = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dynamic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dynamic_)));
          set_has_dynamic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_infinite;
        break;
      }

      // optional bool infinite = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_infinite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &infinite_)));
          set_has_infinite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuideArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSD.GuideArchive.GuideType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional float offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->offset(), output);
  }

  // optional float start = 3;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->start(), output);
  }

  // optional float end = 4;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->end(), output);
  }

  // optional bool dynamic = 5;
  if (has_dynamic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->dynamic(), output);
  }

  // optional bool infinite = 6;
  if (has_infinite()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->infinite(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuideArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSD.GuideArchive.GuideType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional float offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->offset(), target);
  }

  // optional float start = 3;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->start(), target);
  }

  // optional float end = 4;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->end(), target);
  }

  // optional bool dynamic = 5;
  if (has_dynamic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->dynamic(), target);
  }

  // optional bool infinite = 6;
  if (has_infinite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->infinite(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuideArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSD.GuideArchive.GuideType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional float offset = 2;
    if (has_offset()) {
      total_size += 1 + 4;
    }

    // optional float start = 3;
    if (has_start()) {
      total_size += 1 + 4;
    }

    // optional float end = 4;
    if (has_end()) {
      total_size += 1 + 4;
    }

    // optional bool dynamic = 5;
    if (has_dynamic()) {
      total_size += 1 + 1;
    }

    // optional bool infinite = 6;
    if (has_infinite()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuideArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuideArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuideArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuideArchive::MergeFrom(const GuideArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_dynamic()) {
      set_dynamic(from.dynamic());
    }
    if (from.has_infinite()) {
      set_infinite(from.infinite());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuideArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuideArchive::CopyFrom(const GuideArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideArchive::IsInitialized() const {

  return true;
}

void GuideArchive::Swap(GuideArchive* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(offset_, other->offset_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(dynamic_, other->dynamic_);
    std::swap(infinite_, other->infinite_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuideArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuideArchive_descriptor_;
  metadata.reflection = GuideArchive_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* UserDefinedGuideArchive_GuideType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDefinedGuideArchive_GuideType_descriptor_;
}
bool UserDefinedGuideArchive_GuideType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UserDefinedGuideArchive_GuideType UserDefinedGuideArchive::Horizontal;
const UserDefinedGuideArchive_GuideType UserDefinedGuideArchive::Vertical;
const UserDefinedGuideArchive_GuideType UserDefinedGuideArchive::GuideType_MIN;
const UserDefinedGuideArchive_GuideType UserDefinedGuideArchive::GuideType_MAX;
const int UserDefinedGuideArchive::GuideType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UserDefinedGuideArchive::kTypeFieldNumber;
const int UserDefinedGuideArchive::kPositionFieldNumber;
#endif  // !_MSC_VER

UserDefinedGuideArchive::UserDefinedGuideArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserDefinedGuideArchive::InitAsDefaultInstance() {
}

UserDefinedGuideArchive::UserDefinedGuideArchive(const UserDefinedGuideArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserDefinedGuideArchive::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserDefinedGuideArchive::~UserDefinedGuideArchive() {
  SharedDtor();
}

void UserDefinedGuideArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserDefinedGuideArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserDefinedGuideArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDefinedGuideArchive_descriptor_;
}

const UserDefinedGuideArchive& UserDefinedGuideArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

UserDefinedGuideArchive* UserDefinedGuideArchive::default_instance_ = NULL;

UserDefinedGuideArchive* UserDefinedGuideArchive::New() const {
  return new UserDefinedGuideArchive;
}

void UserDefinedGuideArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    position_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserDefinedGuideArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TSD.UserDefinedGuideArchive.GuideType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSD::UserDefinedGuideArchive_GuideType_IsValid(value)) {
            set_type(static_cast< ::TSD::UserDefinedGuideArchive_GuideType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_position;
        break;
      }

      // optional float position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserDefinedGuideArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TSD.UserDefinedGuideArchive.GuideType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional float position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserDefinedGuideArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TSD.UserDefinedGuideArchive.GuideType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional float position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserDefinedGuideArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TSD.UserDefinedGuideArchive.GuideType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional float position = 2;
    if (has_position()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserDefinedGuideArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserDefinedGuideArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserDefinedGuideArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserDefinedGuideArchive::MergeFrom(const UserDefinedGuideArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserDefinedGuideArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDefinedGuideArchive::CopyFrom(const UserDefinedGuideArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDefinedGuideArchive::IsInitialized() const {

  return true;
}

void UserDefinedGuideArchive::Swap(UserDefinedGuideArchive* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserDefinedGuideArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserDefinedGuideArchive_descriptor_;
  metadata.reflection = UserDefinedGuideArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuideStorageArchive::kUserDefinedGuidesFieldNumber;
#endif  // !_MSC_VER

GuideStorageArchive::GuideStorageArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuideStorageArchive::InitAsDefaultInstance() {
}

GuideStorageArchive::GuideStorageArchive(const GuideStorageArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuideStorageArchive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuideStorageArchive::~GuideStorageArchive() {
  SharedDtor();
}

void GuideStorageArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuideStorageArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuideStorageArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuideStorageArchive_descriptor_;
}

const GuideStorageArchive& GuideStorageArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

GuideStorageArchive* GuideStorageArchive::default_instance_ = NULL;

GuideStorageArchive* GuideStorageArchive::New() const {
  return new GuideStorageArchive;
}

void GuideStorageArchive::Clear() {
  userdefinedguides_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuideStorageArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSD.UserDefinedGuideArchive userDefinedGuides = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userDefinedGuides:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userdefinedguides()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_userDefinedGuides;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuideStorageArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSD.UserDefinedGuideArchive userDefinedGuides = 1;
  for (int i = 0; i < this->userdefinedguides_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userdefinedguides(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuideStorageArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSD.UserDefinedGuideArchive userDefinedGuides = 1;
  for (int i = 0; i < this->userdefinedguides_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userdefinedguides(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuideStorageArchive::ByteSize() const {
  int total_size = 0;

  // repeated .TSD.UserDefinedGuideArchive userDefinedGuides = 1;
  total_size += 1 * this->userdefinedguides_size();
  for (int i = 0; i < this->userdefinedguides_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userdefinedguides(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuideStorageArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuideStorageArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuideStorageArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuideStorageArchive::MergeFrom(const GuideStorageArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  userdefinedguides_.MergeFrom(from.userdefinedguides_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuideStorageArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuideStorageArchive::CopyFrom(const GuideStorageArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideStorageArchive::IsInitialized() const {

  return true;
}

void GuideStorageArchive::Swap(GuideStorageArchive* other) {
  if (other != this) {
    userdefinedguides_.Swap(&other->userdefinedguides_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuideStorageArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuideStorageArchive_descriptor_;
  metadata.reflection = GuideStorageArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CanvasSelectionArchive::kInfosFieldNumber;
const int CanvasSelectionArchive::kContainerFieldNumber;
#endif  // !_MSC_VER

CanvasSelectionArchive::CanvasSelectionArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CanvasSelectionArchive::InitAsDefaultInstance() {
  container_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CanvasSelectionArchive::CanvasSelectionArchive(const CanvasSelectionArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CanvasSelectionArchive::SharedCtor() {
  _cached_size_ = 0;
  container_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CanvasSelectionArchive::~CanvasSelectionArchive() {
  SharedDtor();
}

void CanvasSelectionArchive::SharedDtor() {
  if (this != default_instance_) {
    delete container_;
  }
}

void CanvasSelectionArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CanvasSelectionArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CanvasSelectionArchive_descriptor_;
}

const CanvasSelectionArchive& CanvasSelectionArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

CanvasSelectionArchive* CanvasSelectionArchive::default_instance_ = NULL;

CanvasSelectionArchive* CanvasSelectionArchive::New() const {
  return new CanvasSelectionArchive;
}

void CanvasSelectionArchive::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_container()) {
      if (container_ != NULL) container_->::TSP::Reference::Clear();
    }
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CanvasSelectionArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TSP.Reference infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectTag(18)) goto parse_container;
        break;
      }

      // optional .TSP.Reference container = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_container:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CanvasSelectionArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TSP.Reference infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  // optional .TSP.Reference container = 2;
  if (has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->container(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CanvasSelectionArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TSP.Reference infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  // optional .TSP.Reference container = 2;
  if (has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->container(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CanvasSelectionArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .TSP.Reference container = 2;
    if (has_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->container());
    }

  }
  // repeated .TSP.Reference infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CanvasSelectionArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CanvasSelectionArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CanvasSelectionArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CanvasSelectionArchive::MergeFrom(const CanvasSelectionArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_container()) {
      mutable_container()->::TSP::Reference::MergeFrom(from.container());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CanvasSelectionArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CanvasSelectionArchive::CopyFrom(const CanvasSelectionArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanvasSelectionArchive::IsInitialized() const {

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  if (has_container()) {
    if (!this->container().IsInitialized()) return false;
  }
  return true;
}

void CanvasSelectionArchive::Swap(CanvasSelectionArchive* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(container_, other->container_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CanvasSelectionArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CanvasSelectionArchive_descriptor_;
  metadata.reflection = CanvasSelectionArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommentStorageArchive::kTextFieldNumber;
const int CommentStorageArchive::kCreationDateFieldNumber;
const int CommentStorageArchive::kAuthorFieldNumber;
#endif  // !_MSC_VER

CommentStorageArchive::CommentStorageArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommentStorageArchive::InitAsDefaultInstance() {
  creation_date_ = const_cast< ::TSP::Date*>(&::TSP::Date::default_instance());
  author_ = const_cast< ::TSP::Reference*>(&::TSP::Reference::default_instance());
}

CommentStorageArchive::CommentStorageArchive(const CommentStorageArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommentStorageArchive::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creation_date_ = NULL;
  author_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommentStorageArchive::~CommentStorageArchive() {
  SharedDtor();
}

void CommentStorageArchive::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
    delete creation_date_;
    delete author_;
  }
}

void CommentStorageArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommentStorageArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommentStorageArchive_descriptor_;
}

const CommentStorageArchive& CommentStorageArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSDArchives_2eproto();
  return *default_instance_;
}

CommentStorageArchive* CommentStorageArchive::default_instance_ = NULL;

CommentStorageArchive* CommentStorageArchive::New() const {
  return new CommentStorageArchive;
}

void CommentStorageArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    if (has_creation_date()) {
      if (creation_date_ != NULL) creation_date_->::TSP::Date::Clear();
    }
    if (has_author()) {
      if (author_ != NULL) author_->::TSP::Reference::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommentStorageArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_creation_date;
        break;
      }

      // optional .TSP.Date creation_date = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creation_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creation_date()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_author;
        break;
      }

      // optional .TSP.Reference author = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_author:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_author()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommentStorageArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }

  // optional .TSP.Date creation_date = 2;
  if (has_creation_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->creation_date(), output);
  }

  // optional .TSP.Reference author = 3;
  if (has_author()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->author(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommentStorageArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional .TSP.Date creation_date = 2;
  if (has_creation_date()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->creation_date(), target);
  }

  // optional .TSP.Reference author = 3;
  if (has_author()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->author(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommentStorageArchive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .TSP.Date creation_date = 2;
    if (has_creation_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->creation_date());
    }

    // optional .TSP.Reference author = 3;
    if (has_author()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->author());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommentStorageArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommentStorageArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommentStorageArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommentStorageArchive::MergeFrom(const CommentStorageArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_creation_date()) {
      mutable_creation_date()->::TSP::Date::MergeFrom(from.creation_date());
    }
    if (from.has_author()) {
      mutable_author()->::TSP::Reference::MergeFrom(from.author());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommentStorageArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommentStorageArchive::CopyFrom(const CommentStorageArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommentStorageArchive::IsInitialized() const {

  if (has_creation_date()) {
    if (!this->creation_date().IsInitialized()) return false;
  }
  if (has_author()) {
    if (!this->author().IsInitialized()) return false;
  }
  return true;
}

void CommentStorageArchive::Swap(CommentStorageArchive* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(creation_date_, other->creation_date_);
    std::swap(author_, other->author_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommentStorageArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommentStorageArchive_descriptor_;
  metadata.reflection = CommentStorageArchive_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSD

// @@protoc_insertion_point(global_scope)
